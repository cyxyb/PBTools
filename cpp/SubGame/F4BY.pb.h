// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: F4BY.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_F4BY_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_F4BY_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_F4BY_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[228]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_F4BY_2eproto;
namespace F4BY {
class AnniversaryStage1Result;
class AnniversaryStage1ResultDefaultTypeInternal;
extern AnniversaryStage1ResultDefaultTypeInternal _AnniversaryStage1Result_default_instance_;
class AnniversaryStage2Result;
class AnniversaryStage2ResultDefaultTypeInternal;
extern AnniversaryStage2ResultDefaultTypeInternal _AnniversaryStage2Result_default_instance_;
class AnniversaryStage3Result;
class AnniversaryStage3ResultDefaultTypeInternal;
extern AnniversaryStage3ResultDefaultTypeInternal _AnniversaryStage3Result_default_instance_;
class AwardDetail;
class AwardDetailDefaultTypeInternal;
extern AwardDetailDefaultTypeInternal _AwardDetail_default_instance_;
class AwardPoolRecord;
class AwardPoolRecordDefaultTypeInternal;
extern AwardPoolRecordDefaultTypeInternal _AwardPoolRecord_default_instance_;
class AwardProp;
class AwardPropDefaultTypeInternal;
extern AwardPropDefaultTypeInternal _AwardProp_default_instance_;
class BigRewardInfo;
class BigRewardInfoDefaultTypeInternal;
extern BigRewardInfoDefaultTypeInternal _BigRewardInfo_default_instance_;
class CSAnniversaryHit;
class CSAnniversaryHitDefaultTypeInternal;
extern CSAnniversaryHitDefaultTypeInternal _CSAnniversaryHit_default_instance_;
class CSAnniversarySelectReq;
class CSAnniversarySelectReqDefaultTypeInternal;
extern CSAnniversarySelectReqDefaultTypeInternal _CSAnniversarySelectReq_default_instance_;
class CSAwardPool;
class CSAwardPoolDefaultTypeInternal;
extern CSAwardPoolDefaultTypeInternal _CSAwardPool_default_instance_;
class CSBombGlobeFishHit;
class CSBombGlobeFishHitDefaultTypeInternal;
extern CSBombGlobeFishHitDefaultTypeInternal _CSBombGlobeFishHit_default_instance_;
class CSBombHitFishInfo;
class CSBombHitFishInfoDefaultTypeInternal;
extern CSBombHitFishInfoDefaultTypeInternal _CSBombHitFishInfo_default_instance_;
class CSBombInfo;
class CSBombInfoDefaultTypeInternal;
extern CSBombInfoDefaultTypeInternal _CSBombInfo_default_instance_;
class CSBuyGun;
class CSBuyGunDefaultTypeInternal;
extern CSBuyGunDefaultTypeInternal _CSBuyGun_default_instance_;
class CSBuyWings;
class CSBuyWingsDefaultTypeInternal;
extern CSBuyWingsDefaultTypeInternal _CSBuyWings_default_instance_;
class CSCallFish;
class CSCallFishDefaultTypeInternal;
extern CSCallFishDefaultTypeInternal _CSCallFish_default_instance_;
class CSChat;
class CSChatDefaultTypeInternal;
extern CSChatDefaultTypeInternal _CSChat_default_instance_;
class CSChestConfig;
class CSChestConfigDefaultTypeInternal;
extern CSChestConfigDefaultTypeInternal _CSChestConfig_default_instance_;
class CSChestSetAutoSelect;
class CSChestSetAutoSelectDefaultTypeInternal;
extern CSChestSetAutoSelectDefaultTypeInternal _CSChestSetAutoSelect_default_instance_;
class CSChestSetEnable;
class CSChestSetEnableDefaultTypeInternal;
extern CSChestSetEnableDefaultTypeInternal _CSChestSetEnable_default_instance_;
class CSClickStatistic;
class CSClickStatisticDefaultTypeInternal;
extern CSClickStatisticDefaultTypeInternal _CSClickStatistic_default_instance_;
class CSCrazySkill;
class CSCrazySkillDefaultTypeInternal;
extern CSCrazySkillDefaultTypeInternal _CSCrazySkill_default_instance_;
class CSDrawReward;
class CSDrawRewardDefaultTypeInternal;
extern CSDrawRewardDefaultTypeInternal _CSDrawReward_default_instance_;
class CSDrawTimes;
class CSDrawTimesDefaultTypeInternal;
extern CSDrawTimesDefaultTypeInternal _CSDrawTimes_default_instance_;
class CSExchangeShop;
class CSExchangeShopDefaultTypeInternal;
extern CSExchangeShopDefaultTypeInternal _CSExchangeShop_default_instance_;
class CSFishOutsideScreen;
class CSFishOutsideScreenDefaultTypeInternal;
extern CSFishOutsideScreenDefaultTypeInternal _CSFishOutsideScreen_default_instance_;
class CSFreePoolInfo;
class CSFreePoolInfoDefaultTypeInternal;
extern CSFreePoolInfoDefaultTypeInternal _CSFreePoolInfo_default_instance_;
class CSFreePoolLottery;
class CSFreePoolLotteryDefaultTypeInternal;
extern CSFreePoolLotteryDefaultTypeInternal _CSFreePoolLottery_default_instance_;
class CSFreePoolOpen;
class CSFreePoolOpenDefaultTypeInternal;
extern CSFreePoolOpenDefaultTypeInternal _CSFreePoolOpen_default_instance_;
class CSGameItemSwitch;
class CSGameItemSwitchDefaultTypeInternal;
extern CSGameItemSwitchDefaultTypeInternal _CSGameItemSwitch_default_instance_;
class CSGetAwardPoolRecord;
class CSGetAwardPoolRecordDefaultTypeInternal;
extern CSGetAwardPoolRecordDefaultTypeInternal _CSGetAwardPoolRecord_default_instance_;
class CSGetLuckyNum;
class CSGetLuckyNumDefaultTypeInternal;
extern CSGetLuckyNumDefaultTypeInternal _CSGetLuckyNum_default_instance_;
class CSGetLuckyTaskAward;
class CSGetLuckyTaskAwardDefaultTypeInternal;
extern CSGetLuckyTaskAwardDefaultTypeInternal _CSGetLuckyTaskAward_default_instance_;
class CSHeartBeat;
class CSHeartBeatDefaultTypeInternal;
extern CSHeartBeatDefaultTypeInternal _CSHeartBeat_default_instance_;
class CSHitFish;
class CSHitFishDefaultTypeInternal;
extern CSHitFishDefaultTypeInternal _CSHitFish_default_instance_;
class CSLockFish;
class CSLockFishDefaultTypeInternal;
extern CSLockFishDefaultTypeInternal _CSLockFish_default_instance_;
class CSLoginGameWithToken;
class CSLoginGameWithTokenDefaultTypeInternal;
extern CSLoginGameWithTokenDefaultTypeInternal _CSLoginGameWithToken_default_instance_;
class CSLuckyDrawInfo;
class CSLuckyDrawInfoDefaultTypeInternal;
extern CSLuckyDrawInfoDefaultTypeInternal _CSLuckyDrawInfo_default_instance_;
class CSLuckyPoolDraw;
class CSLuckyPoolDrawDefaultTypeInternal;
extern CSLuckyPoolDrawDefaultTypeInternal _CSLuckyPoolDraw_default_instance_;
class CSLuckyPoolInfo;
class CSLuckyPoolInfoDefaultTypeInternal;
extern CSLuckyPoolInfoDefaultTypeInternal _CSLuckyPoolInfo_default_instance_;
class CSLuckyRecord;
class CSLuckyRecordDefaultTypeInternal;
extern CSLuckyRecordDefaultTypeInternal _CSLuckyRecord_default_instance_;
class CSLuckyRedDot;
class CSLuckyRedDotDefaultTypeInternal;
extern CSLuckyRedDotDefaultTypeInternal _CSLuckyRedDot_default_instance_;
class CSMatchPackAddition;
class CSMatchPackAdditionDefaultTypeInternal;
extern CSMatchPackAdditionDefaultTypeInternal _CSMatchPackAddition_default_instance_;
class CSMatchPackBuying;
class CSMatchPackBuyingDefaultTypeInternal;
extern CSMatchPackBuyingDefaultTypeInternal _CSMatchPackBuying_default_instance_;
class CSNewClickStatistic;
class CSNewClickStatisticDefaultTypeInternal;
extern CSNewClickStatisticDefaultTypeInternal _CSNewClickStatistic_default_instance_;
class CSNotifyLogout;
class CSNotifyLogoutDefaultTypeInternal;
extern CSNotifyLogoutDefaultTypeInternal _CSNotifyLogout_default_instance_;
class CSOpenScallop;
class CSOpenScallopDefaultTypeInternal;
extern CSOpenScallopDefaultTypeInternal _CSOpenScallop_default_instance_;
class CSPreHit;
class CSPreHitDefaultTypeInternal;
extern CSPreHitDefaultTypeInternal _CSPreHit_default_instance_;
class CSPreShoot;
class CSPreShootDefaultTypeInternal;
extern CSPreShootDefaultTypeInternal _CSPreShoot_default_instance_;
class CSPropStatus;
class CSPropStatusDefaultTypeInternal;
extern CSPropStatusDefaultTypeInternal _CSPropStatus_default_instance_;
class CSPurchasePackage;
class CSPurchasePackageDefaultTypeInternal;
extern CSPurchasePackageDefaultTypeInternal _CSPurchasePackage_default_instance_;
class CSReceiveMissionReward;
class CSReceiveMissionRewardDefaultTypeInternal;
extern CSReceiveMissionRewardDefaultTypeInternal _CSReceiveMissionReward_default_instance_;
class CSSaveSkillTime;
class CSSaveSkillTimeDefaultTypeInternal;
extern CSSaveSkillTimeDefaultTypeInternal _CSSaveSkillTime_default_instance_;
class CSSelectChestReward;
class CSSelectChestRewardDefaultTypeInternal;
extern CSSelectChestRewardDefaultTypeInternal _CSSelectChestReward_default_instance_;
class CSSetDoubleShoot;
class CSSetDoubleShootDefaultTypeInternal;
extern CSSetDoubleShootDefaultTypeInternal _CSSetDoubleShoot_default_instance_;
class CSSetProbability;
class CSSetProbabilityDefaultTypeInternal;
extern CSSetProbabilityDefaultTypeInternal _CSSetProbability_default_instance_;
class CSSetWings;
class CSSetWingsDefaultTypeInternal;
extern CSSetWingsDefaultTypeInternal _CSSetWings_default_instance_;
class CSSevenDayAward;
class CSSevenDayAwardDefaultTypeInternal;
extern CSSevenDayAwardDefaultTypeInternal _CSSevenDayAward_default_instance_;
class CSSevenDayInfo;
class CSSevenDayInfoDefaultTypeInternal;
extern CSSevenDayInfoDefaultTypeInternal _CSSevenDayInfo_default_instance_;
class CSSyncConfigs;
class CSSyncConfigsDefaultTypeInternal;
extern CSSyncConfigsDefaultTypeInternal _CSSyncConfigs_default_instance_;
class CSSyncFishReq;
class CSSyncFishReqDefaultTypeInternal;
extern CSSyncFishReqDefaultTypeInternal _CSSyncFishReq_default_instance_;
class CSSyncFishRsp;
class CSSyncFishRspDefaultTypeInternal;
extern CSSyncFishRspDefaultTypeInternal _CSSyncFishRsp_default_instance_;
class CSSyncMoney;
class CSSyncMoneyDefaultTypeInternal;
extern CSSyncMoneyDefaultTypeInternal _CSSyncMoney_default_instance_;
class CSSyncPropInfo;
class CSSyncPropInfoDefaultTypeInternal;
extern CSSyncPropInfoDefaultTypeInternal _CSSyncPropInfo_default_instance_;
class CSTorpedoCancelShoot;
class CSTorpedoCancelShootDefaultTypeInternal;
extern CSTorpedoCancelShootDefaultTypeInternal _CSTorpedoCancelShoot_default_instance_;
class CSTorpedoHit;
class CSTorpedoHitDefaultTypeInternal;
extern CSTorpedoHitDefaultTypeInternal _CSTorpedoHit_default_instance_;
class CSTorpedoPreShoot;
class CSTorpedoPreShootDefaultTypeInternal;
extern CSTorpedoPreShootDefaultTypeInternal _CSTorpedoPreShoot_default_instance_;
class CSTorpedoShoot;
class CSTorpedoShootDefaultTypeInternal;
extern CSTorpedoShootDefaultTypeInternal _CSTorpedoShoot_default_instance_;
class CSTreasureHuntMission;
class CSTreasureHuntMissionDefaultTypeInternal;
extern CSTreasureHuntMissionDefaultTypeInternal _CSTreasureHuntMission_default_instance_;
class CSTreasureHuntPackage;
class CSTreasureHuntPackageDefaultTypeInternal;
extern CSTreasureHuntPackageDefaultTypeInternal _CSTreasureHuntPackage_default_instance_;
class CSTrebleSkill;
class CSTrebleSkillDefaultTypeInternal;
extern CSTrebleSkillDefaultTypeInternal _CSTrebleSkill_default_instance_;
class CSUseProp;
class CSUsePropDefaultTypeInternal;
extern CSUsePropDefaultTypeInternal _CSUseProp_default_instance_;
class CSUserEvent;
class CSUserEventDefaultTypeInternal;
extern CSUserEventDefaultTypeInternal _CSUserEvent_default_instance_;
class CSUserInfoNotify;
class CSUserInfoNotifyDefaultTypeInternal;
extern CSUserInfoNotifyDefaultTypeInternal _CSUserInfoNotify_default_instance_;
class CSUserLog;
class CSUserLogDefaultTypeInternal;
extern CSUserLogDefaultTypeInternal _CSUserLog_default_instance_;
class CSUserPoolDouble;
class CSUserPoolDoubleDefaultTypeInternal;
extern CSUserPoolDoubleDefaultTypeInternal _CSUserPoolDouble_default_instance_;
class CSUserPoolDoubleInfo;
class CSUserPoolDoubleInfoDefaultTypeInternal;
extern CSUserPoolDoubleInfoDefaultTypeInternal _CSUserPoolDoubleInfo_default_instance_;
class CSUserPoolDraw;
class CSUserPoolDrawDefaultTypeInternal;
extern CSUserPoolDrawDefaultTypeInternal _CSUserPoolDraw_default_instance_;
class CSUserPoolInfo;
class CSUserPoolInfoDefaultTypeInternal;
extern CSUserPoolInfoDefaultTypeInternal _CSUserPoolInfo_default_instance_;
class CSUserPoolPreDraw;
class CSUserPoolPreDrawDefaultTypeInternal;
extern CSUserPoolPreDrawDefaultTypeInternal _CSUserPoolPreDraw_default_instance_;
class CSUserPoolStatus;
class CSUserPoolStatusDefaultTypeInternal;
extern CSUserPoolStatusDefaultTypeInternal _CSUserPoolStatus_default_instance_;
class CSUserReady;
class CSUserReadyDefaultTypeInternal;
extern CSUserReadyDefaultTypeInternal _CSUserReady_default_instance_;
class CSUserRunBackground;
class CSUserRunBackgroundDefaultTypeInternal;
extern CSUserRunBackgroundDefaultTypeInternal _CSUserRunBackground_default_instance_;
class CSUserShoot;
class CSUserShootDefaultTypeInternal;
extern CSUserShootDefaultTypeInternal _CSUserShoot_default_instance_;
class CSVerifyActivity;
class CSVerifyActivityDefaultTypeInternal;
extern CSVerifyActivityDefaultTypeInternal _CSVerifyActivity_default_instance_;
class CSVerifyTermChange;
class CSVerifyTermChangeDefaultTypeInternal;
extern CSVerifyTermChangeDefaultTypeInternal _CSVerifyTermChange_default_instance_;
class ChestBrief;
class ChestBriefDefaultTypeInternal;
extern ChestBriefDefaultTypeInternal _ChestBrief_default_instance_;
class CommonResp;
class CommonRespDefaultTypeInternal;
extern CommonRespDefaultTypeInternal _CommonResp_default_instance_;
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class EffectInfo;
class EffectInfoDefaultTypeInternal;
extern EffectInfoDefaultTypeInternal _EffectInfo_default_instance_;
class ExchangeShopInfo;
class ExchangeShopInfoDefaultTypeInternal;
extern ExchangeShopInfoDefaultTypeInternal _ExchangeShopInfo_default_instance_;
class FishTrace;
class FishTraceDefaultTypeInternal;
extern FishTraceDefaultTypeInternal _FishTrace_default_instance_;
class FrozenFish;
class FrozenFishDefaultTypeInternal;
extern FrozenFishDefaultTypeInternal _FrozenFish_default_instance_;
class GivenCardAward;
class GivenCardAwardDefaultTypeInternal;
extern GivenCardAwardDefaultTypeInternal _GivenCardAward_default_instance_;
class GunInfo;
class GunInfoDefaultTypeInternal;
extern GunInfoDefaultTypeInternal _GunInfo_default_instance_;
class GunSpecEffect;
class GunSpecEffectDefaultTypeInternal;
extern GunSpecEffectDefaultTypeInternal _GunSpecEffect_default_instance_;
class JumpHighArena;
class JumpHighArenaDefaultTypeInternal;
extern JumpHighArenaDefaultTypeInternal _JumpHighArena_default_instance_;
class LuckyAwardNotify;
class LuckyAwardNotifyDefaultTypeInternal;
extern LuckyAwardNotifyDefaultTypeInternal _LuckyAwardNotify_default_instance_;
class LuckyRecord;
class LuckyRecordDefaultTypeInternal;
extern LuckyRecordDefaultTypeInternal _LuckyRecord_default_instance_;
class LuckyTaskInfo;
class LuckyTaskInfoDefaultTypeInternal;
extern LuckyTaskInfoDefaultTypeInternal _LuckyTaskInfo_default_instance_;
class MatchPackAddition;
class MatchPackAdditionDefaultTypeInternal;
extern MatchPackAdditionDefaultTypeInternal _MatchPackAddition_default_instance_;
class MissionInfo;
class MissionInfoDefaultTypeInternal;
extern MissionInfoDefaultTypeInternal _MissionInfo_default_instance_;
class MultiInfo;
class MultiInfoDefaultTypeInternal;
extern MultiInfoDefaultTypeInternal _MultiInfo_default_instance_;
class Obj;
class ObjDefaultTypeInternal;
extern ObjDefaultTypeInternal _Obj_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object1;
class Object1DefaultTypeInternal;
extern Object1DefaultTypeInternal _Object1_default_instance_;
class Object2;
class Object2DefaultTypeInternal;
extern Object2DefaultTypeInternal _Object2_default_instance_;
class Object3;
class Object3DefaultTypeInternal;
extern Object3DefaultTypeInternal _Object3_default_instance_;
class OpenChestReward;
class OpenChestRewardDefaultTypeInternal;
extern OpenChestRewardDefaultTypeInternal _OpenChestReward_default_instance_;
class OwnRecord;
class OwnRecordDefaultTypeInternal;
extern OwnRecordDefaultTypeInternal _OwnRecord_default_instance_;
class Package;
class PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PropInfo;
class PropInfoDefaultTypeInternal;
extern PropInfoDefaultTypeInternal _PropInfo_default_instance_;
class RewardInfo;
class RewardInfoDefaultTypeInternal;
extern RewardInfoDefaultTypeInternal _RewardInfo_default_instance_;
class SCActivityInfo;
class SCActivityInfoDefaultTypeInternal;
extern SCActivityInfoDefaultTypeInternal _SCActivityInfo_default_instance_;
class SCAnniversarySelectResult;
class SCAnniversarySelectResultDefaultTypeInternal;
extern SCAnniversarySelectResultDefaultTypeInternal _SCAnniversarySelectResult_default_instance_;
class SCAnniversaryShowSelect;
class SCAnniversaryShowSelectDefaultTypeInternal;
extern SCAnniversaryShowSelectDefaultTypeInternal _SCAnniversaryShowSelect_default_instance_;
class SCAwardPool;
class SCAwardPoolDefaultTypeInternal;
extern SCAwardPoolDefaultTypeInternal _SCAwardPool_default_instance_;
class SCBombGlobeFishInfo;
class SCBombGlobeFishInfoDefaultTypeInternal;
extern SCBombGlobeFishInfoDefaultTypeInternal _SCBombGlobeFishInfo_default_instance_;
class SCBuyGun;
class SCBuyGunDefaultTypeInternal;
extern SCBuyGunDefaultTypeInternal _SCBuyGun_default_instance_;
class SCBuyWings;
class SCBuyWingsDefaultTypeInternal;
extern SCBuyWingsDefaultTypeInternal _SCBuyWings_default_instance_;
class SCCallFish;
class SCCallFishDefaultTypeInternal;
extern SCCallFishDefaultTypeInternal _SCCallFish_default_instance_;
class SCCaptureScallop;
class SCCaptureScallopDefaultTypeInternal;
extern SCCaptureScallopDefaultTypeInternal _SCCaptureScallop_default_instance_;
class SCChangeScene;
class SCChangeSceneDefaultTypeInternal;
extern SCChangeSceneDefaultTypeInternal _SCChangeScene_default_instance_;
class SCChat;
class SCChatDefaultTypeInternal;
extern SCChatDefaultTypeInternal _SCChat_default_instance_;
class SCChestConfig;
class SCChestConfigDefaultTypeInternal;
extern SCChestConfigDefaultTypeInternal _SCChestConfig_default_instance_;
class SCChestSetAutoSelect;
class SCChestSetAutoSelectDefaultTypeInternal;
extern SCChestSetAutoSelectDefaultTypeInternal _SCChestSetAutoSelect_default_instance_;
class SCChestSetEnable;
class SCChestSetEnableDefaultTypeInternal;
extern SCChestSetEnableDefaultTypeInternal _SCChestSetEnable_default_instance_;
class SCComTask;
class SCComTaskDefaultTypeInternal;
extern SCComTaskDefaultTypeInternal _SCComTask_default_instance_;
class SCCrazySkill;
class SCCrazySkillDefaultTypeInternal;
extern SCCrazySkillDefaultTypeInternal _SCCrazySkill_default_instance_;
class SCDrawReward;
class SCDrawRewardDefaultTypeInternal;
extern SCDrawRewardDefaultTypeInternal _SCDrawReward_default_instance_;
class SCDrawTimes;
class SCDrawTimesDefaultTypeInternal;
extern SCDrawTimesDefaultTypeInternal _SCDrawTimes_default_instance_;
class SCExchangeShop;
class SCExchangeShopDefaultTypeInternal;
extern SCExchangeShopDefaultTypeInternal _SCExchangeShop_default_instance_;
class SCFishTracesList;
class SCFishTracesListDefaultTypeInternal;
extern SCFishTracesListDefaultTypeInternal _SCFishTracesList_default_instance_;
class SCFrozenFish;
class SCFrozenFishDefaultTypeInternal;
extern SCFrozenFishDefaultTypeInternal _SCFrozenFish_default_instance_;
class SCFrozenTime;
class SCFrozenTimeDefaultTypeInternal;
extern SCFrozenTimeDefaultTypeInternal _SCFrozenTime_default_instance_;
class SCGainAward;
class SCGainAwardDefaultTypeInternal;
extern SCGainAwardDefaultTypeInternal _SCGainAward_default_instance_;
class SCGameInfoNotify;
class SCGameInfoNotifyDefaultTypeInternal;
extern SCGameInfoNotifyDefaultTypeInternal _SCGameInfoNotify_default_instance_;
class SCGameItemSwitch;
class SCGameItemSwitchDefaultTypeInternal;
extern SCGameItemSwitchDefaultTypeInternal _SCGameItemSwitch_default_instance_;
class SCGetAwardPoolRecord;
class SCGetAwardPoolRecordDefaultTypeInternal;
extern SCGetAwardPoolRecordDefaultTypeInternal _SCGetAwardPoolRecord_default_instance_;
class SCGetLuckyNum;
class SCGetLuckyNumDefaultTypeInternal;
extern SCGetLuckyNumDefaultTypeInternal _SCGetLuckyNum_default_instance_;
class SCGetLuckyTaskAward;
class SCGetLuckyTaskAwardDefaultTypeInternal;
extern SCGetLuckyTaskAwardDefaultTypeInternal _SCGetLuckyTaskAward_default_instance_;
class SCGetMagicCube;
class SCGetMagicCubeDefaultTypeInternal;
extern SCGetMagicCubeDefaultTypeInternal _SCGetMagicCube_default_instance_;
class SCHeartBeat;
class SCHeartBeatDefaultTypeInternal;
extern SCHeartBeatDefaultTypeInternal _SCHeartBeat_default_instance_;
class SCHitFish;
class SCHitFishDefaultTypeInternal;
extern SCHitFishDefaultTypeInternal _SCHitFish_default_instance_;
class SCHitSpecialFish;
class SCHitSpecialFishDefaultTypeInternal;
extern SCHitSpecialFishDefaultTypeInternal _SCHitSpecialFish_default_instance_;
class SCInfoRedDot;
class SCInfoRedDotDefaultTypeInternal;
extern SCInfoRedDotDefaultTypeInternal _SCInfoRedDot_default_instance_;
class SCKiRinFish;
class SCKiRinFishDefaultTypeInternal;
extern SCKiRinFishDefaultTypeInternal _SCKiRinFish_default_instance_;
class SCLockFish;
class SCLockFishDefaultTypeInternal;
extern SCLockFishDefaultTypeInternal _SCLockFish_default_instance_;
class SCLoginGameWithToken;
class SCLoginGameWithTokenDefaultTypeInternal;
extern SCLoginGameWithTokenDefaultTypeInternal _SCLoginGameWithToken_default_instance_;
class SCLuckyDrawInfo;
class SCLuckyDrawInfoDefaultTypeInternal;
extern SCLuckyDrawInfoDefaultTypeInternal _SCLuckyDrawInfo_default_instance_;
class SCLuckyPoolDraw;
class SCLuckyPoolDrawDefaultTypeInternal;
extern SCLuckyPoolDrawDefaultTypeInternal _SCLuckyPoolDraw_default_instance_;
class SCLuckyPoolInfo;
class SCLuckyPoolInfoDefaultTypeInternal;
extern SCLuckyPoolInfoDefaultTypeInternal _SCLuckyPoolInfo_default_instance_;
class SCLuckyRecord;
class SCLuckyRecordDefaultTypeInternal;
extern SCLuckyRecordDefaultTypeInternal _SCLuckyRecord_default_instance_;
class SCLuckyRedDot;
class SCLuckyRedDotDefaultTypeInternal;
extern SCLuckyRedDotDefaultTypeInternal _SCLuckyRedDot_default_instance_;
class SCMagicCubeBulletInfo;
class SCMagicCubeBulletInfoDefaultTypeInternal;
extern SCMagicCubeBulletInfoDefaultTypeInternal _SCMagicCubeBulletInfo_default_instance_;
class SCMatchPackAddition;
class SCMatchPackAdditionDefaultTypeInternal;
extern SCMatchPackAdditionDefaultTypeInternal _SCMatchPackAddition_default_instance_;
class SCMatchPackInvail;
class SCMatchPackInvailDefaultTypeInternal;
extern SCMatchPackInvailDefaultTypeInternal _SCMatchPackInvail_default_instance_;
class SCNotifyActStatus;
class SCNotifyActStatusDefaultTypeInternal;
extern SCNotifyActStatusDefaultTypeInternal _SCNotifyActStatus_default_instance_;
class SCNotifyLogin;
class SCNotifyLoginDefaultTypeInternal;
extern SCNotifyLoginDefaultTypeInternal _SCNotifyLogin_default_instance_;
class SCNotifyLogout;
class SCNotifyLogoutDefaultTypeInternal;
extern SCNotifyLogoutDefaultTypeInternal _SCNotifyLogout_default_instance_;
class SCNvWaFishCapture;
class SCNvWaFishCaptureDefaultTypeInternal;
extern SCNvWaFishCaptureDefaultTypeInternal _SCNvWaFishCapture_default_instance_;
class SCOpenChest;
class SCOpenChestDefaultTypeInternal;
extern SCOpenChestDefaultTypeInternal _SCOpenChest_default_instance_;
class SCOpenScallop;
class SCOpenScallopDefaultTypeInternal;
extern SCOpenScallopDefaultTypeInternal _SCOpenScallop_default_instance_;
class SCOwnRecord;
class SCOwnRecordDefaultTypeInternal;
extern SCOwnRecordDefaultTypeInternal _SCOwnRecord_default_instance_;
class SCPreHit;
class SCPreHitDefaultTypeInternal;
extern SCPreHitDefaultTypeInternal _SCPreHit_default_instance_;
class SCPreShoot;
class SCPreShootDefaultTypeInternal;
extern SCPreShootDefaultTypeInternal _SCPreShoot_default_instance_;
class SCPropDropNotify;
class SCPropDropNotifyDefaultTypeInternal;
extern SCPropDropNotifyDefaultTypeInternal _SCPropDropNotify_default_instance_;
class SCPropStatus;
class SCPropStatusDefaultTypeInternal;
extern SCPropStatusDefaultTypeInternal _SCPropStatus_default_instance_;
class SCPurchasePackage;
class SCPurchasePackageDefaultTypeInternal;
extern SCPurchasePackageDefaultTypeInternal _SCPurchasePackage_default_instance_;
class SCReceiveMissionReward;
class SCReceiveMissionRewardDefaultTypeInternal;
extern SCReceiveMissionRewardDefaultTypeInternal _SCReceiveMissionReward_default_instance_;
class SCSelectChestReward;
class SCSelectChestRewardDefaultTypeInternal;
extern SCSelectChestRewardDefaultTypeInternal _SCSelectChestReward_default_instance_;
class SCSetProbability;
class SCSetProbabilityDefaultTypeInternal;
extern SCSetProbabilityDefaultTypeInternal _SCSetProbability_default_instance_;
class SCSetWings;
class SCSetWingsDefaultTypeInternal;
extern SCSetWingsDefaultTypeInternal _SCSetWings_default_instance_;
class SCSettleScallopLottery;
class SCSettleScallopLotteryDefaultTypeInternal;
extern SCSettleScallopLotteryDefaultTypeInternal _SCSettleScallopLottery_default_instance_;
class SCSevenDayAward;
class SCSevenDayAwardDefaultTypeInternal;
extern SCSevenDayAwardDefaultTypeInternal _SCSevenDayAward_default_instance_;
class SCSevenDayInfo;
class SCSevenDayInfoDefaultTypeInternal;
extern SCSevenDayInfoDefaultTypeInternal _SCSevenDayInfo_default_instance_;
class SCSpecEffect;
class SCSpecEffectDefaultTypeInternal;
extern SCSpecEffectDefaultTypeInternal _SCSpecEffect_default_instance_;
class SCSyncAnniversaryHitStage;
class SCSyncAnniversaryHitStageDefaultTypeInternal;
extern SCSyncAnniversaryHitStageDefaultTypeInternal _SCSyncAnniversaryHitStage_default_instance_;
class SCSyncBomb;
class SCSyncBombDefaultTypeInternal;
extern SCSyncBombDefaultTypeInternal _SCSyncBomb_default_instance_;
class SCSyncBombFinish;
class SCSyncBombFinishDefaultTypeInternal;
extern SCSyncBombFinishDefaultTypeInternal _SCSyncBombFinish_default_instance_;
class SCSyncConfigs;
class SCSyncConfigsDefaultTypeInternal;
extern SCSyncConfigsDefaultTypeInternal _SCSyncConfigs_default_instance_;
class SCSyncFishReq;
class SCSyncFishReqDefaultTypeInternal;
extern SCSyncFishReqDefaultTypeInternal _SCSyncFishReq_default_instance_;
class SCSyncFishRsp;
class SCSyncFishRspDefaultTypeInternal;
extern SCSyncFishRspDefaultTypeInternal _SCSyncFishRsp_default_instance_;
class SCSyncMoney;
class SCSyncMoneyDefaultTypeInternal;
extern SCSyncMoneyDefaultTypeInternal _SCSyncMoney_default_instance_;
class SCSyncPropInfo;
class SCSyncPropInfoDefaultTypeInternal;
extern SCSyncPropInfoDefaultTypeInternal _SCSyncPropInfo_default_instance_;
class SCSyncScallopLottery;
class SCSyncScallopLotteryDefaultTypeInternal;
extern SCSyncScallopLotteryDefaultTypeInternal _SCSyncScallopLottery_default_instance_;
class SCTaskInfo;
class SCTaskInfoDefaultTypeInternal;
extern SCTaskInfoDefaultTypeInternal _SCTaskInfo_default_instance_;
class SCTorpedoCancelShoot;
class SCTorpedoCancelShootDefaultTypeInternal;
extern SCTorpedoCancelShootDefaultTypeInternal _SCTorpedoCancelShoot_default_instance_;
class SCTorpedoHit;
class SCTorpedoHitDefaultTypeInternal;
extern SCTorpedoHitDefaultTypeInternal _SCTorpedoHit_default_instance_;
class SCTorpedoPreShoot;
class SCTorpedoPreShootDefaultTypeInternal;
extern SCTorpedoPreShootDefaultTypeInternal _SCTorpedoPreShoot_default_instance_;
class SCTorpedoShoot;
class SCTorpedoShootDefaultTypeInternal;
extern SCTorpedoShootDefaultTypeInternal _SCTorpedoShoot_default_instance_;
class SCTortoiseExplode;
class SCTortoiseExplodeDefaultTypeInternal;
extern SCTortoiseExplodeDefaultTypeInternal _SCTortoiseExplode_default_instance_;
class SCTreasureFishCatched;
class SCTreasureFishCatchedDefaultTypeInternal;
extern SCTreasureFishCatchedDefaultTypeInternal _SCTreasureFishCatched_default_instance_;
class SCTreasureFishInfo;
class SCTreasureFishInfoDefaultTypeInternal;
extern SCTreasureFishInfoDefaultTypeInternal _SCTreasureFishInfo_default_instance_;
class SCTreasureHuntMission;
class SCTreasureHuntMissionDefaultTypeInternal;
extern SCTreasureHuntMissionDefaultTypeInternal _SCTreasureHuntMission_default_instance_;
class SCTreasureHuntPackage;
class SCTreasureHuntPackageDefaultTypeInternal;
extern SCTreasureHuntPackageDefaultTypeInternal _SCTreasureHuntPackage_default_instance_;
class SCTrebleSkill;
class SCTrebleSkillDefaultTypeInternal;
extern SCTrebleSkillDefaultTypeInternal _SCTrebleSkill_default_instance_;
class SCUpdateChestStatus;
class SCUpdateChestStatusDefaultTypeInternal;
extern SCUpdateChestStatusDefaultTypeInternal _SCUpdateChestStatus_default_instance_;
class SCUseProp;
class SCUsePropDefaultTypeInternal;
extern SCUsePropDefaultTypeInternal _SCUseProp_default_instance_;
class SCUserInfoNotify;
class SCUserInfoNotifyDefaultTypeInternal;
extern SCUserInfoNotifyDefaultTypeInternal _SCUserInfoNotify_default_instance_;
class SCUserPoolAdd;
class SCUserPoolAddDefaultTypeInternal;
extern SCUserPoolAddDefaultTypeInternal _SCUserPoolAdd_default_instance_;
class SCUserPoolDouble;
class SCUserPoolDoubleDefaultTypeInternal;
extern SCUserPoolDoubleDefaultTypeInternal _SCUserPoolDouble_default_instance_;
class SCUserPoolDoubleInfo;
class SCUserPoolDoubleInfoDefaultTypeInternal;
extern SCUserPoolDoubleInfoDefaultTypeInternal _SCUserPoolDoubleInfo_default_instance_;
class SCUserPoolDraw;
class SCUserPoolDrawDefaultTypeInternal;
extern SCUserPoolDrawDefaultTypeInternal _SCUserPoolDraw_default_instance_;
class SCUserPoolInfo;
class SCUserPoolInfoDefaultTypeInternal;
extern SCUserPoolInfoDefaultTypeInternal _SCUserPoolInfo_default_instance_;
class SCUserPoolPreDraw;
class SCUserPoolPreDrawDefaultTypeInternal;
extern SCUserPoolPreDrawDefaultTypeInternal _SCUserPoolPreDraw_default_instance_;
class SCUserPoolStatus;
class SCUserPoolStatusDefaultTypeInternal;
extern SCUserPoolStatusDefaultTypeInternal _SCUserPoolStatus_default_instance_;
class SCUserReady;
class SCUserReadyDefaultTypeInternal;
extern SCUserReadyDefaultTypeInternal _SCUserReady_default_instance_;
class SCUserRunBackground;
class SCUserRunBackgroundDefaultTypeInternal;
extern SCUserRunBackgroundDefaultTypeInternal _SCUserRunBackground_default_instance_;
class SCUserShoot;
class SCUserShootDefaultTypeInternal;
extern SCUserShootDefaultTypeInternal _SCUserShoot_default_instance_;
class SCValentineDayFish;
class SCValentineDayFishDefaultTypeInternal;
extern SCValentineDayFishDefaultTypeInternal _SCValentineDayFish_default_instance_;
class SCVerifyActivity;
class SCVerifyActivityDefaultTypeInternal;
extern SCVerifyActivityDefaultTypeInternal _SCVerifyActivity_default_instance_;
class SCVerifyTermChange;
class SCVerifyTermChangeDefaultTypeInternal;
extern SCVerifyTermChangeDefaultTypeInternal _SCVerifyTermChange_default_instance_;
class SCVipChargeAward;
class SCVipChargeAwardDefaultTypeInternal;
extern SCVipChargeAwardDefaultTypeInternal _SCVipChargeAward_default_instance_;
class SCWaterDropInfo;
class SCWaterDropInfoDefaultTypeInternal;
extern SCWaterDropInfoDefaultTypeInternal _SCWaterDropInfo_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
class ScallopLottery;
class ScallopLotteryDefaultTypeInternal;
extern ScallopLotteryDefaultTypeInternal _ScallopLottery_default_instance_;
class SevenDayDetail;
class SevenDayDetailDefaultTypeInternal;
extern SevenDayDetailDefaultTypeInternal _SevenDayDetail_default_instance_;
class SevenDayTask;
class SevenDayTaskDefaultTypeInternal;
extern SevenDayTaskDefaultTypeInternal _SevenDayTask_default_instance_;
class StationBase;
class StationBaseDefaultTypeInternal;
extern StationBaseDefaultTypeInternal _StationBase_default_instance_;
class SyncPropInfoX;
class SyncPropInfoXDefaultTypeInternal;
extern SyncPropInfoXDefaultTypeInternal _SyncPropInfoX_default_instance_;
class TreasureHuntConfig;
class TreasureHuntConfigDefaultTypeInternal;
extern TreasureHuntConfigDefaultTypeInternal _TreasureHuntConfig_default_instance_;
class UserAwardItem;
class UserAwardItemDefaultTypeInternal;
extern UserAwardItemDefaultTypeInternal _UserAwardItem_default_instance_;
class UserSyncPropInfo;
class UserSyncPropInfoDefaultTypeInternal;
extern UserSyncPropInfoDefaultTypeInternal _UserSyncPropInfo_default_instance_;
class VipInfo;
class VipInfoDefaultTypeInternal;
extern VipInfoDefaultTypeInternal _VipInfo_default_instance_;
class WheelObject;
class WheelObjectDefaultTypeInternal;
extern WheelObjectDefaultTypeInternal _WheelObject_default_instance_;
class WingsInfo;
class WingsInfoDefaultTypeInternal;
extern WingsInfoDefaultTypeInternal _WingsInfo_default_instance_;
class WingsSpecEffect;
class WingsSpecEffectDefaultTypeInternal;
extern WingsSpecEffectDefaultTypeInternal _WingsSpecEffect_default_instance_;
}  // namespace F4BY
PROTOBUF_NAMESPACE_OPEN
template<> ::F4BY::AnniversaryStage1Result* Arena::CreateMaybeMessage<::F4BY::AnniversaryStage1Result>(Arena*);
template<> ::F4BY::AnniversaryStage2Result* Arena::CreateMaybeMessage<::F4BY::AnniversaryStage2Result>(Arena*);
template<> ::F4BY::AnniversaryStage3Result* Arena::CreateMaybeMessage<::F4BY::AnniversaryStage3Result>(Arena*);
template<> ::F4BY::AwardDetail* Arena::CreateMaybeMessage<::F4BY::AwardDetail>(Arena*);
template<> ::F4BY::AwardPoolRecord* Arena::CreateMaybeMessage<::F4BY::AwardPoolRecord>(Arena*);
template<> ::F4BY::AwardProp* Arena::CreateMaybeMessage<::F4BY::AwardProp>(Arena*);
template<> ::F4BY::BigRewardInfo* Arena::CreateMaybeMessage<::F4BY::BigRewardInfo>(Arena*);
template<> ::F4BY::CSAnniversaryHit* Arena::CreateMaybeMessage<::F4BY::CSAnniversaryHit>(Arena*);
template<> ::F4BY::CSAnniversarySelectReq* Arena::CreateMaybeMessage<::F4BY::CSAnniversarySelectReq>(Arena*);
template<> ::F4BY::CSAwardPool* Arena::CreateMaybeMessage<::F4BY::CSAwardPool>(Arena*);
template<> ::F4BY::CSBombGlobeFishHit* Arena::CreateMaybeMessage<::F4BY::CSBombGlobeFishHit>(Arena*);
template<> ::F4BY::CSBombHitFishInfo* Arena::CreateMaybeMessage<::F4BY::CSBombHitFishInfo>(Arena*);
template<> ::F4BY::CSBombInfo* Arena::CreateMaybeMessage<::F4BY::CSBombInfo>(Arena*);
template<> ::F4BY::CSBuyGun* Arena::CreateMaybeMessage<::F4BY::CSBuyGun>(Arena*);
template<> ::F4BY::CSBuyWings* Arena::CreateMaybeMessage<::F4BY::CSBuyWings>(Arena*);
template<> ::F4BY::CSCallFish* Arena::CreateMaybeMessage<::F4BY::CSCallFish>(Arena*);
template<> ::F4BY::CSChat* Arena::CreateMaybeMessage<::F4BY::CSChat>(Arena*);
template<> ::F4BY::CSChestConfig* Arena::CreateMaybeMessage<::F4BY::CSChestConfig>(Arena*);
template<> ::F4BY::CSChestSetAutoSelect* Arena::CreateMaybeMessage<::F4BY::CSChestSetAutoSelect>(Arena*);
template<> ::F4BY::CSChestSetEnable* Arena::CreateMaybeMessage<::F4BY::CSChestSetEnable>(Arena*);
template<> ::F4BY::CSClickStatistic* Arena::CreateMaybeMessage<::F4BY::CSClickStatistic>(Arena*);
template<> ::F4BY::CSCrazySkill* Arena::CreateMaybeMessage<::F4BY::CSCrazySkill>(Arena*);
template<> ::F4BY::CSDrawReward* Arena::CreateMaybeMessage<::F4BY::CSDrawReward>(Arena*);
template<> ::F4BY::CSDrawTimes* Arena::CreateMaybeMessage<::F4BY::CSDrawTimes>(Arena*);
template<> ::F4BY::CSExchangeShop* Arena::CreateMaybeMessage<::F4BY::CSExchangeShop>(Arena*);
template<> ::F4BY::CSFishOutsideScreen* Arena::CreateMaybeMessage<::F4BY::CSFishOutsideScreen>(Arena*);
template<> ::F4BY::CSFreePoolInfo* Arena::CreateMaybeMessage<::F4BY::CSFreePoolInfo>(Arena*);
template<> ::F4BY::CSFreePoolLottery* Arena::CreateMaybeMessage<::F4BY::CSFreePoolLottery>(Arena*);
template<> ::F4BY::CSFreePoolOpen* Arena::CreateMaybeMessage<::F4BY::CSFreePoolOpen>(Arena*);
template<> ::F4BY::CSGameItemSwitch* Arena::CreateMaybeMessage<::F4BY::CSGameItemSwitch>(Arena*);
template<> ::F4BY::CSGetAwardPoolRecord* Arena::CreateMaybeMessage<::F4BY::CSGetAwardPoolRecord>(Arena*);
template<> ::F4BY::CSGetLuckyNum* Arena::CreateMaybeMessage<::F4BY::CSGetLuckyNum>(Arena*);
template<> ::F4BY::CSGetLuckyTaskAward* Arena::CreateMaybeMessage<::F4BY::CSGetLuckyTaskAward>(Arena*);
template<> ::F4BY::CSHeartBeat* Arena::CreateMaybeMessage<::F4BY::CSHeartBeat>(Arena*);
template<> ::F4BY::CSHitFish* Arena::CreateMaybeMessage<::F4BY::CSHitFish>(Arena*);
template<> ::F4BY::CSLockFish* Arena::CreateMaybeMessage<::F4BY::CSLockFish>(Arena*);
template<> ::F4BY::CSLoginGameWithToken* Arena::CreateMaybeMessage<::F4BY::CSLoginGameWithToken>(Arena*);
template<> ::F4BY::CSLuckyDrawInfo* Arena::CreateMaybeMessage<::F4BY::CSLuckyDrawInfo>(Arena*);
template<> ::F4BY::CSLuckyPoolDraw* Arena::CreateMaybeMessage<::F4BY::CSLuckyPoolDraw>(Arena*);
template<> ::F4BY::CSLuckyPoolInfo* Arena::CreateMaybeMessage<::F4BY::CSLuckyPoolInfo>(Arena*);
template<> ::F4BY::CSLuckyRecord* Arena::CreateMaybeMessage<::F4BY::CSLuckyRecord>(Arena*);
template<> ::F4BY::CSLuckyRedDot* Arena::CreateMaybeMessage<::F4BY::CSLuckyRedDot>(Arena*);
template<> ::F4BY::CSMatchPackAddition* Arena::CreateMaybeMessage<::F4BY::CSMatchPackAddition>(Arena*);
template<> ::F4BY::CSMatchPackBuying* Arena::CreateMaybeMessage<::F4BY::CSMatchPackBuying>(Arena*);
template<> ::F4BY::CSNewClickStatistic* Arena::CreateMaybeMessage<::F4BY::CSNewClickStatistic>(Arena*);
template<> ::F4BY::CSNotifyLogout* Arena::CreateMaybeMessage<::F4BY::CSNotifyLogout>(Arena*);
template<> ::F4BY::CSOpenScallop* Arena::CreateMaybeMessage<::F4BY::CSOpenScallop>(Arena*);
template<> ::F4BY::CSPreHit* Arena::CreateMaybeMessage<::F4BY::CSPreHit>(Arena*);
template<> ::F4BY::CSPreShoot* Arena::CreateMaybeMessage<::F4BY::CSPreShoot>(Arena*);
template<> ::F4BY::CSPropStatus* Arena::CreateMaybeMessage<::F4BY::CSPropStatus>(Arena*);
template<> ::F4BY::CSPurchasePackage* Arena::CreateMaybeMessage<::F4BY::CSPurchasePackage>(Arena*);
template<> ::F4BY::CSReceiveMissionReward* Arena::CreateMaybeMessage<::F4BY::CSReceiveMissionReward>(Arena*);
template<> ::F4BY::CSSaveSkillTime* Arena::CreateMaybeMessage<::F4BY::CSSaveSkillTime>(Arena*);
template<> ::F4BY::CSSelectChestReward* Arena::CreateMaybeMessage<::F4BY::CSSelectChestReward>(Arena*);
template<> ::F4BY::CSSetDoubleShoot* Arena::CreateMaybeMessage<::F4BY::CSSetDoubleShoot>(Arena*);
template<> ::F4BY::CSSetProbability* Arena::CreateMaybeMessage<::F4BY::CSSetProbability>(Arena*);
template<> ::F4BY::CSSetWings* Arena::CreateMaybeMessage<::F4BY::CSSetWings>(Arena*);
template<> ::F4BY::CSSevenDayAward* Arena::CreateMaybeMessage<::F4BY::CSSevenDayAward>(Arena*);
template<> ::F4BY::CSSevenDayInfo* Arena::CreateMaybeMessage<::F4BY::CSSevenDayInfo>(Arena*);
template<> ::F4BY::CSSyncConfigs* Arena::CreateMaybeMessage<::F4BY::CSSyncConfigs>(Arena*);
template<> ::F4BY::CSSyncFishReq* Arena::CreateMaybeMessage<::F4BY::CSSyncFishReq>(Arena*);
template<> ::F4BY::CSSyncFishRsp* Arena::CreateMaybeMessage<::F4BY::CSSyncFishRsp>(Arena*);
template<> ::F4BY::CSSyncMoney* Arena::CreateMaybeMessage<::F4BY::CSSyncMoney>(Arena*);
template<> ::F4BY::CSSyncPropInfo* Arena::CreateMaybeMessage<::F4BY::CSSyncPropInfo>(Arena*);
template<> ::F4BY::CSTorpedoCancelShoot* Arena::CreateMaybeMessage<::F4BY::CSTorpedoCancelShoot>(Arena*);
template<> ::F4BY::CSTorpedoHit* Arena::CreateMaybeMessage<::F4BY::CSTorpedoHit>(Arena*);
template<> ::F4BY::CSTorpedoPreShoot* Arena::CreateMaybeMessage<::F4BY::CSTorpedoPreShoot>(Arena*);
template<> ::F4BY::CSTorpedoShoot* Arena::CreateMaybeMessage<::F4BY::CSTorpedoShoot>(Arena*);
template<> ::F4BY::CSTreasureHuntMission* Arena::CreateMaybeMessage<::F4BY::CSTreasureHuntMission>(Arena*);
template<> ::F4BY::CSTreasureHuntPackage* Arena::CreateMaybeMessage<::F4BY::CSTreasureHuntPackage>(Arena*);
template<> ::F4BY::CSTrebleSkill* Arena::CreateMaybeMessage<::F4BY::CSTrebleSkill>(Arena*);
template<> ::F4BY::CSUseProp* Arena::CreateMaybeMessage<::F4BY::CSUseProp>(Arena*);
template<> ::F4BY::CSUserEvent* Arena::CreateMaybeMessage<::F4BY::CSUserEvent>(Arena*);
template<> ::F4BY::CSUserInfoNotify* Arena::CreateMaybeMessage<::F4BY::CSUserInfoNotify>(Arena*);
template<> ::F4BY::CSUserLog* Arena::CreateMaybeMessage<::F4BY::CSUserLog>(Arena*);
template<> ::F4BY::CSUserPoolDouble* Arena::CreateMaybeMessage<::F4BY::CSUserPoolDouble>(Arena*);
template<> ::F4BY::CSUserPoolDoubleInfo* Arena::CreateMaybeMessage<::F4BY::CSUserPoolDoubleInfo>(Arena*);
template<> ::F4BY::CSUserPoolDraw* Arena::CreateMaybeMessage<::F4BY::CSUserPoolDraw>(Arena*);
template<> ::F4BY::CSUserPoolInfo* Arena::CreateMaybeMessage<::F4BY::CSUserPoolInfo>(Arena*);
template<> ::F4BY::CSUserPoolPreDraw* Arena::CreateMaybeMessage<::F4BY::CSUserPoolPreDraw>(Arena*);
template<> ::F4BY::CSUserPoolStatus* Arena::CreateMaybeMessage<::F4BY::CSUserPoolStatus>(Arena*);
template<> ::F4BY::CSUserReady* Arena::CreateMaybeMessage<::F4BY::CSUserReady>(Arena*);
template<> ::F4BY::CSUserRunBackground* Arena::CreateMaybeMessage<::F4BY::CSUserRunBackground>(Arena*);
template<> ::F4BY::CSUserShoot* Arena::CreateMaybeMessage<::F4BY::CSUserShoot>(Arena*);
template<> ::F4BY::CSVerifyActivity* Arena::CreateMaybeMessage<::F4BY::CSVerifyActivity>(Arena*);
template<> ::F4BY::CSVerifyTermChange* Arena::CreateMaybeMessage<::F4BY::CSVerifyTermChange>(Arena*);
template<> ::F4BY::ChestBrief* Arena::CreateMaybeMessage<::F4BY::ChestBrief>(Arena*);
template<> ::F4BY::CommonResp* Arena::CreateMaybeMessage<::F4BY::CommonResp>(Arena*);
template<> ::F4BY::Decimal* Arena::CreateMaybeMessage<::F4BY::Decimal>(Arena*);
template<> ::F4BY::EffectInfo* Arena::CreateMaybeMessage<::F4BY::EffectInfo>(Arena*);
template<> ::F4BY::ExchangeShopInfo* Arena::CreateMaybeMessage<::F4BY::ExchangeShopInfo>(Arena*);
template<> ::F4BY::FishTrace* Arena::CreateMaybeMessage<::F4BY::FishTrace>(Arena*);
template<> ::F4BY::FrozenFish* Arena::CreateMaybeMessage<::F4BY::FrozenFish>(Arena*);
template<> ::F4BY::GivenCardAward* Arena::CreateMaybeMessage<::F4BY::GivenCardAward>(Arena*);
template<> ::F4BY::GunInfo* Arena::CreateMaybeMessage<::F4BY::GunInfo>(Arena*);
template<> ::F4BY::GunSpecEffect* Arena::CreateMaybeMessage<::F4BY::GunSpecEffect>(Arena*);
template<> ::F4BY::JumpHighArena* Arena::CreateMaybeMessage<::F4BY::JumpHighArena>(Arena*);
template<> ::F4BY::LuckyAwardNotify* Arena::CreateMaybeMessage<::F4BY::LuckyAwardNotify>(Arena*);
template<> ::F4BY::LuckyRecord* Arena::CreateMaybeMessage<::F4BY::LuckyRecord>(Arena*);
template<> ::F4BY::LuckyTaskInfo* Arena::CreateMaybeMessage<::F4BY::LuckyTaskInfo>(Arena*);
template<> ::F4BY::MatchPackAddition* Arena::CreateMaybeMessage<::F4BY::MatchPackAddition>(Arena*);
template<> ::F4BY::MissionInfo* Arena::CreateMaybeMessage<::F4BY::MissionInfo>(Arena*);
template<> ::F4BY::MultiInfo* Arena::CreateMaybeMessage<::F4BY::MultiInfo>(Arena*);
template<> ::F4BY::Obj* Arena::CreateMaybeMessage<::F4BY::Obj>(Arena*);
template<> ::F4BY::Object* Arena::CreateMaybeMessage<::F4BY::Object>(Arena*);
template<> ::F4BY::Object1* Arena::CreateMaybeMessage<::F4BY::Object1>(Arena*);
template<> ::F4BY::Object2* Arena::CreateMaybeMessage<::F4BY::Object2>(Arena*);
template<> ::F4BY::Object3* Arena::CreateMaybeMessage<::F4BY::Object3>(Arena*);
template<> ::F4BY::OpenChestReward* Arena::CreateMaybeMessage<::F4BY::OpenChestReward>(Arena*);
template<> ::F4BY::OwnRecord* Arena::CreateMaybeMessage<::F4BY::OwnRecord>(Arena*);
template<> ::F4BY::Package* Arena::CreateMaybeMessage<::F4BY::Package>(Arena*);
template<> ::F4BY::PropInfo* Arena::CreateMaybeMessage<::F4BY::PropInfo>(Arena*);
template<> ::F4BY::RewardInfo* Arena::CreateMaybeMessage<::F4BY::RewardInfo>(Arena*);
template<> ::F4BY::SCActivityInfo* Arena::CreateMaybeMessage<::F4BY::SCActivityInfo>(Arena*);
template<> ::F4BY::SCAnniversarySelectResult* Arena::CreateMaybeMessage<::F4BY::SCAnniversarySelectResult>(Arena*);
template<> ::F4BY::SCAnniversaryShowSelect* Arena::CreateMaybeMessage<::F4BY::SCAnniversaryShowSelect>(Arena*);
template<> ::F4BY::SCAwardPool* Arena::CreateMaybeMessage<::F4BY::SCAwardPool>(Arena*);
template<> ::F4BY::SCBombGlobeFishInfo* Arena::CreateMaybeMessage<::F4BY::SCBombGlobeFishInfo>(Arena*);
template<> ::F4BY::SCBuyGun* Arena::CreateMaybeMessage<::F4BY::SCBuyGun>(Arena*);
template<> ::F4BY::SCBuyWings* Arena::CreateMaybeMessage<::F4BY::SCBuyWings>(Arena*);
template<> ::F4BY::SCCallFish* Arena::CreateMaybeMessage<::F4BY::SCCallFish>(Arena*);
template<> ::F4BY::SCCaptureScallop* Arena::CreateMaybeMessage<::F4BY::SCCaptureScallop>(Arena*);
template<> ::F4BY::SCChangeScene* Arena::CreateMaybeMessage<::F4BY::SCChangeScene>(Arena*);
template<> ::F4BY::SCChat* Arena::CreateMaybeMessage<::F4BY::SCChat>(Arena*);
template<> ::F4BY::SCChestConfig* Arena::CreateMaybeMessage<::F4BY::SCChestConfig>(Arena*);
template<> ::F4BY::SCChestSetAutoSelect* Arena::CreateMaybeMessage<::F4BY::SCChestSetAutoSelect>(Arena*);
template<> ::F4BY::SCChestSetEnable* Arena::CreateMaybeMessage<::F4BY::SCChestSetEnable>(Arena*);
template<> ::F4BY::SCComTask* Arena::CreateMaybeMessage<::F4BY::SCComTask>(Arena*);
template<> ::F4BY::SCCrazySkill* Arena::CreateMaybeMessage<::F4BY::SCCrazySkill>(Arena*);
template<> ::F4BY::SCDrawReward* Arena::CreateMaybeMessage<::F4BY::SCDrawReward>(Arena*);
template<> ::F4BY::SCDrawTimes* Arena::CreateMaybeMessage<::F4BY::SCDrawTimes>(Arena*);
template<> ::F4BY::SCExchangeShop* Arena::CreateMaybeMessage<::F4BY::SCExchangeShop>(Arena*);
template<> ::F4BY::SCFishTracesList* Arena::CreateMaybeMessage<::F4BY::SCFishTracesList>(Arena*);
template<> ::F4BY::SCFrozenFish* Arena::CreateMaybeMessage<::F4BY::SCFrozenFish>(Arena*);
template<> ::F4BY::SCFrozenTime* Arena::CreateMaybeMessage<::F4BY::SCFrozenTime>(Arena*);
template<> ::F4BY::SCGainAward* Arena::CreateMaybeMessage<::F4BY::SCGainAward>(Arena*);
template<> ::F4BY::SCGameInfoNotify* Arena::CreateMaybeMessage<::F4BY::SCGameInfoNotify>(Arena*);
template<> ::F4BY::SCGameItemSwitch* Arena::CreateMaybeMessage<::F4BY::SCGameItemSwitch>(Arena*);
template<> ::F4BY::SCGetAwardPoolRecord* Arena::CreateMaybeMessage<::F4BY::SCGetAwardPoolRecord>(Arena*);
template<> ::F4BY::SCGetLuckyNum* Arena::CreateMaybeMessage<::F4BY::SCGetLuckyNum>(Arena*);
template<> ::F4BY::SCGetLuckyTaskAward* Arena::CreateMaybeMessage<::F4BY::SCGetLuckyTaskAward>(Arena*);
template<> ::F4BY::SCGetMagicCube* Arena::CreateMaybeMessage<::F4BY::SCGetMagicCube>(Arena*);
template<> ::F4BY::SCHeartBeat* Arena::CreateMaybeMessage<::F4BY::SCHeartBeat>(Arena*);
template<> ::F4BY::SCHitFish* Arena::CreateMaybeMessage<::F4BY::SCHitFish>(Arena*);
template<> ::F4BY::SCHitSpecialFish* Arena::CreateMaybeMessage<::F4BY::SCHitSpecialFish>(Arena*);
template<> ::F4BY::SCInfoRedDot* Arena::CreateMaybeMessage<::F4BY::SCInfoRedDot>(Arena*);
template<> ::F4BY::SCKiRinFish* Arena::CreateMaybeMessage<::F4BY::SCKiRinFish>(Arena*);
template<> ::F4BY::SCLockFish* Arena::CreateMaybeMessage<::F4BY::SCLockFish>(Arena*);
template<> ::F4BY::SCLoginGameWithToken* Arena::CreateMaybeMessage<::F4BY::SCLoginGameWithToken>(Arena*);
template<> ::F4BY::SCLuckyDrawInfo* Arena::CreateMaybeMessage<::F4BY::SCLuckyDrawInfo>(Arena*);
template<> ::F4BY::SCLuckyPoolDraw* Arena::CreateMaybeMessage<::F4BY::SCLuckyPoolDraw>(Arena*);
template<> ::F4BY::SCLuckyPoolInfo* Arena::CreateMaybeMessage<::F4BY::SCLuckyPoolInfo>(Arena*);
template<> ::F4BY::SCLuckyRecord* Arena::CreateMaybeMessage<::F4BY::SCLuckyRecord>(Arena*);
template<> ::F4BY::SCLuckyRedDot* Arena::CreateMaybeMessage<::F4BY::SCLuckyRedDot>(Arena*);
template<> ::F4BY::SCMagicCubeBulletInfo* Arena::CreateMaybeMessage<::F4BY::SCMagicCubeBulletInfo>(Arena*);
template<> ::F4BY::SCMatchPackAddition* Arena::CreateMaybeMessage<::F4BY::SCMatchPackAddition>(Arena*);
template<> ::F4BY::SCMatchPackInvail* Arena::CreateMaybeMessage<::F4BY::SCMatchPackInvail>(Arena*);
template<> ::F4BY::SCNotifyActStatus* Arena::CreateMaybeMessage<::F4BY::SCNotifyActStatus>(Arena*);
template<> ::F4BY::SCNotifyLogin* Arena::CreateMaybeMessage<::F4BY::SCNotifyLogin>(Arena*);
template<> ::F4BY::SCNotifyLogout* Arena::CreateMaybeMessage<::F4BY::SCNotifyLogout>(Arena*);
template<> ::F4BY::SCNvWaFishCapture* Arena::CreateMaybeMessage<::F4BY::SCNvWaFishCapture>(Arena*);
template<> ::F4BY::SCOpenChest* Arena::CreateMaybeMessage<::F4BY::SCOpenChest>(Arena*);
template<> ::F4BY::SCOpenScallop* Arena::CreateMaybeMessage<::F4BY::SCOpenScallop>(Arena*);
template<> ::F4BY::SCOwnRecord* Arena::CreateMaybeMessage<::F4BY::SCOwnRecord>(Arena*);
template<> ::F4BY::SCPreHit* Arena::CreateMaybeMessage<::F4BY::SCPreHit>(Arena*);
template<> ::F4BY::SCPreShoot* Arena::CreateMaybeMessage<::F4BY::SCPreShoot>(Arena*);
template<> ::F4BY::SCPropDropNotify* Arena::CreateMaybeMessage<::F4BY::SCPropDropNotify>(Arena*);
template<> ::F4BY::SCPropStatus* Arena::CreateMaybeMessage<::F4BY::SCPropStatus>(Arena*);
template<> ::F4BY::SCPurchasePackage* Arena::CreateMaybeMessage<::F4BY::SCPurchasePackage>(Arena*);
template<> ::F4BY::SCReceiveMissionReward* Arena::CreateMaybeMessage<::F4BY::SCReceiveMissionReward>(Arena*);
template<> ::F4BY::SCSelectChestReward* Arena::CreateMaybeMessage<::F4BY::SCSelectChestReward>(Arena*);
template<> ::F4BY::SCSetProbability* Arena::CreateMaybeMessage<::F4BY::SCSetProbability>(Arena*);
template<> ::F4BY::SCSetWings* Arena::CreateMaybeMessage<::F4BY::SCSetWings>(Arena*);
template<> ::F4BY::SCSettleScallopLottery* Arena::CreateMaybeMessage<::F4BY::SCSettleScallopLottery>(Arena*);
template<> ::F4BY::SCSevenDayAward* Arena::CreateMaybeMessage<::F4BY::SCSevenDayAward>(Arena*);
template<> ::F4BY::SCSevenDayInfo* Arena::CreateMaybeMessage<::F4BY::SCSevenDayInfo>(Arena*);
template<> ::F4BY::SCSpecEffect* Arena::CreateMaybeMessage<::F4BY::SCSpecEffect>(Arena*);
template<> ::F4BY::SCSyncAnniversaryHitStage* Arena::CreateMaybeMessage<::F4BY::SCSyncAnniversaryHitStage>(Arena*);
template<> ::F4BY::SCSyncBomb* Arena::CreateMaybeMessage<::F4BY::SCSyncBomb>(Arena*);
template<> ::F4BY::SCSyncBombFinish* Arena::CreateMaybeMessage<::F4BY::SCSyncBombFinish>(Arena*);
template<> ::F4BY::SCSyncConfigs* Arena::CreateMaybeMessage<::F4BY::SCSyncConfigs>(Arena*);
template<> ::F4BY::SCSyncFishReq* Arena::CreateMaybeMessage<::F4BY::SCSyncFishReq>(Arena*);
template<> ::F4BY::SCSyncFishRsp* Arena::CreateMaybeMessage<::F4BY::SCSyncFishRsp>(Arena*);
template<> ::F4BY::SCSyncMoney* Arena::CreateMaybeMessage<::F4BY::SCSyncMoney>(Arena*);
template<> ::F4BY::SCSyncPropInfo* Arena::CreateMaybeMessage<::F4BY::SCSyncPropInfo>(Arena*);
template<> ::F4BY::SCSyncScallopLottery* Arena::CreateMaybeMessage<::F4BY::SCSyncScallopLottery>(Arena*);
template<> ::F4BY::SCTaskInfo* Arena::CreateMaybeMessage<::F4BY::SCTaskInfo>(Arena*);
template<> ::F4BY::SCTorpedoCancelShoot* Arena::CreateMaybeMessage<::F4BY::SCTorpedoCancelShoot>(Arena*);
template<> ::F4BY::SCTorpedoHit* Arena::CreateMaybeMessage<::F4BY::SCTorpedoHit>(Arena*);
template<> ::F4BY::SCTorpedoPreShoot* Arena::CreateMaybeMessage<::F4BY::SCTorpedoPreShoot>(Arena*);
template<> ::F4BY::SCTorpedoShoot* Arena::CreateMaybeMessage<::F4BY::SCTorpedoShoot>(Arena*);
template<> ::F4BY::SCTortoiseExplode* Arena::CreateMaybeMessage<::F4BY::SCTortoiseExplode>(Arena*);
template<> ::F4BY::SCTreasureFishCatched* Arena::CreateMaybeMessage<::F4BY::SCTreasureFishCatched>(Arena*);
template<> ::F4BY::SCTreasureFishInfo* Arena::CreateMaybeMessage<::F4BY::SCTreasureFishInfo>(Arena*);
template<> ::F4BY::SCTreasureHuntMission* Arena::CreateMaybeMessage<::F4BY::SCTreasureHuntMission>(Arena*);
template<> ::F4BY::SCTreasureHuntPackage* Arena::CreateMaybeMessage<::F4BY::SCTreasureHuntPackage>(Arena*);
template<> ::F4BY::SCTrebleSkill* Arena::CreateMaybeMessage<::F4BY::SCTrebleSkill>(Arena*);
template<> ::F4BY::SCUpdateChestStatus* Arena::CreateMaybeMessage<::F4BY::SCUpdateChestStatus>(Arena*);
template<> ::F4BY::SCUseProp* Arena::CreateMaybeMessage<::F4BY::SCUseProp>(Arena*);
template<> ::F4BY::SCUserInfoNotify* Arena::CreateMaybeMessage<::F4BY::SCUserInfoNotify>(Arena*);
template<> ::F4BY::SCUserPoolAdd* Arena::CreateMaybeMessage<::F4BY::SCUserPoolAdd>(Arena*);
template<> ::F4BY::SCUserPoolDouble* Arena::CreateMaybeMessage<::F4BY::SCUserPoolDouble>(Arena*);
template<> ::F4BY::SCUserPoolDoubleInfo* Arena::CreateMaybeMessage<::F4BY::SCUserPoolDoubleInfo>(Arena*);
template<> ::F4BY::SCUserPoolDraw* Arena::CreateMaybeMessage<::F4BY::SCUserPoolDraw>(Arena*);
template<> ::F4BY::SCUserPoolInfo* Arena::CreateMaybeMessage<::F4BY::SCUserPoolInfo>(Arena*);
template<> ::F4BY::SCUserPoolPreDraw* Arena::CreateMaybeMessage<::F4BY::SCUserPoolPreDraw>(Arena*);
template<> ::F4BY::SCUserPoolStatus* Arena::CreateMaybeMessage<::F4BY::SCUserPoolStatus>(Arena*);
template<> ::F4BY::SCUserReady* Arena::CreateMaybeMessage<::F4BY::SCUserReady>(Arena*);
template<> ::F4BY::SCUserRunBackground* Arena::CreateMaybeMessage<::F4BY::SCUserRunBackground>(Arena*);
template<> ::F4BY::SCUserShoot* Arena::CreateMaybeMessage<::F4BY::SCUserShoot>(Arena*);
template<> ::F4BY::SCValentineDayFish* Arena::CreateMaybeMessage<::F4BY::SCValentineDayFish>(Arena*);
template<> ::F4BY::SCVerifyActivity* Arena::CreateMaybeMessage<::F4BY::SCVerifyActivity>(Arena*);
template<> ::F4BY::SCVerifyTermChange* Arena::CreateMaybeMessage<::F4BY::SCVerifyTermChange>(Arena*);
template<> ::F4BY::SCVipChargeAward* Arena::CreateMaybeMessage<::F4BY::SCVipChargeAward>(Arena*);
template<> ::F4BY::SCWaterDropInfo* Arena::CreateMaybeMessage<::F4BY::SCWaterDropInfo>(Arena*);
template<> ::F4BY::SC_SceneInfo* Arena::CreateMaybeMessage<::F4BY::SC_SceneInfo>(Arena*);
template<> ::F4BY::ScallopLottery* Arena::CreateMaybeMessage<::F4BY::ScallopLottery>(Arena*);
template<> ::F4BY::SevenDayDetail* Arena::CreateMaybeMessage<::F4BY::SevenDayDetail>(Arena*);
template<> ::F4BY::SevenDayTask* Arena::CreateMaybeMessage<::F4BY::SevenDayTask>(Arena*);
template<> ::F4BY::StationBase* Arena::CreateMaybeMessage<::F4BY::StationBase>(Arena*);
template<> ::F4BY::SyncPropInfoX* Arena::CreateMaybeMessage<::F4BY::SyncPropInfoX>(Arena*);
template<> ::F4BY::TreasureHuntConfig* Arena::CreateMaybeMessage<::F4BY::TreasureHuntConfig>(Arena*);
template<> ::F4BY::UserAwardItem* Arena::CreateMaybeMessage<::F4BY::UserAwardItem>(Arena*);
template<> ::F4BY::UserSyncPropInfo* Arena::CreateMaybeMessage<::F4BY::UserSyncPropInfo>(Arena*);
template<> ::F4BY::VipInfo* Arena::CreateMaybeMessage<::F4BY::VipInfo>(Arena*);
template<> ::F4BY::WheelObject* Arena::CreateMaybeMessage<::F4BY::WheelObject>(Arena*);
template<> ::F4BY::WingsInfo* Arena::CreateMaybeMessage<::F4BY::WingsInfo>(Arena*);
template<> ::F4BY::WingsSpecEffect* Arena::CreateMaybeMessage<::F4BY::WingsSpecEffect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace F4BY {

enum EMsgIDSubGame : int {
  None = 0,
  HeartBeat = 1000,
  LoginGameWithToken = 1001,
  UserReady = 1002,
  SetProbability = 1003,
  FishTracesList = 1004,
  ChangeScene = 1005,
  FishOutsideScreen = 1006,
  LockFish = 1007,
  UserShoot = 1008,
  HitFish = 1009,
  CrazySkill = 1010,
  SyncMoney = 1011,
  NotifyLogout = 1012,
  SyncFishReq = 1013,
  SyncFishRsp = 1014,
  UserRunBackground = 1015,
  HitSpecialFish = 1016,
  SyncPropInfo = 1017,
  NotifyLogin = 1018,
  TrebleSkill = 1019,
  UserLog = 1020,
  UserEvent = 1021,
  UserInfoNotify = 1025,
  GameInfoNotify = 1026,
  Chat = 1027,
  GainAward = 1028,
  PropStatus = 1029,
  PropDropNotify = 1030,
  UseProp = 1031,
  FrozenTime = 1032,
  UserPoolInfo = 1042,
  UserPoolStatus = 1043,
  UserPoolPreDraw = 1044,
  UserPoolDraw = 1045,
  UserPoolAdd = 1046,
  TorpedoPreShoot = 1047,
  TorpedoCancelShoot = 1048,
  TorpedoShoot = 1049,
  TorpedoHit = 1050,
  CallFish = 1051,
  ComTask = 1052,
  TaskInfo = 1053,
  SaveSkillTime = 1054,
  SevenDayInfo = 1055,
  SevenDayAward = 1056,
  VipChargeAward = 1057,
  InfoRedDot = 1058,
  ActivityInfo = 1059,
  ClickStatistic = 1060,
  AwardPool = 1061,
  NewClickStatistic = 1062,
  GetAwardPoolRecord = 1063,
  TreasureFishInfo = 1064,
  TreasureFishCatched = 1065,
  MatchPackAdditionX = 1066,
  MatchPackInvail = 1067,
  MatchPackBuying = 1068,
  GameItemSwitch = 1069,
  LuckyDrawInfo = 1070,
  GetLuckyTaskAward = 1071,
  LuckyRedDot = 1072,
  GetLuckyNum = 1073,
  GetLuckyRecord = 1074,
  GetOwnRecord = 1075,
  UserPoolDoubleInfo = 1100,
  UserPoolDouble = 1101,
  LuckyPoolInfo = 1102,
  LuckyPoolDraw = 1103,
  BombInfo = 1110,
  BombHitFishInfo = 1111,
  SyncBomb = 1112,
  SyncBombFinish = 1113,
  GetMagicCube = 1114,
  SyncMagicCubeBtInfo = 1115,
  PreHit = 1116,
  PreShoot = 1117,
  SyncValentineDayFish = 1118,
  BombGlobeFishInfo = 1119,
  BombGlobeFishHit = 1120,
  AnniversaryShowSelect = 1133,
  AnniversarySelectReq = 1134,
  AnniversarySelectResult = 1135,
  AnniversaryHit = 1136,
  SyncAnniversaryHitStage = 1137,
  SyncKiRinHitStage = 1138,
  NvWaFishCapture = 1139,
  CaptureScallop = 1141,
  SettleScallopLottery = 1142,
  SyncScallopLottery = 1143,
  OpenScallop = 1144,
  UpdateChestStatus = 1145,
  ChestConfig = 1146,
  OpenChest = 1147,
  SelectChestReward = 1148,
  ChestSetAutoSelect = 1149,
  SpecEffect = 1150,
  ChestSetEnable = 1151,
  FrozenFishRep = 1200,
  TortoiseExplode = 1210,
  SetWings = 1211,
  SyncConfigs = 1212,
  DrawReward = 1213,
  TreasureHuntMission = 1214,
  ReceiveMissionReward = 1215,
  DrawTimes = 1217,
  VerifyActivity = 1218,
  ExchangeShop = 1219,
  TreasureHuntPackage = 1220,
  PurchasePackage = 1221,
  VerifyTermChange = 1222,
  BuyGun = 1223,
  BuyWings = 1224,
  WaterDropInfo = 1230,
  NotifyActStatus = 1231,
  SetDoubleShoot = 1232,
  LotteryResult3002 = 20001,
  LotteryResult3005 = 20002,
  FreePoolInfo = 21001,
  FreePoolLottery = 21002,
  FreePoolOpen = 21003,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = None;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = FreePoolOpen;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
enum ErrCode : int {
  Succ = 0,
  AlreadyInOtherGame = 241,
  Fail = 1000,
  LoadPropsDataFailed = 10001,
  CanNotFindPlayerPoint = 10002,
  ParameterIsWrong = 10003,
  LackOfMoney = 10004,
  FreeTimesChangeRatio = 10005,
  IsNotSup = 10006,
  DeserializeFailed = 10007,
  PlayerNotExist = 10008,
  PlayerAlreadyLogin = 10009,
  LoadPlayerDataFailed = 10010,
  AllocTableFailed = 10011,
  DefendPlugIn = 10012,
  QPEnterRoomFailed = 10013,
  QPBaseUserInfoGetFailed = 10014,
  QPReadGoldFailed = 10015,
  ThisTableIsFull = 10016,
  PropNoEnough = 10017,
  PropRoomLimit = 10018,
  PropUsing = 10019,
  PropNotExist = 10020,
  PropUsingSetGun = 10021,
  ThisRoomIsFull = 10022,
  ServerClosed = 10023,
  PropHave = 10024,
  PropCanNotBuy = 10025,
  UserPoolNoMeet = 10030,
  UserPoolToHigher = 10031,
  CallFishTideComing = 10032,
  CallFishFull = 10033,
  UserPoolLoadFail = 10034,
  FrozenFishTideComing = 10035,
  FrozenNotEnough = 10036,
  FrozenWaitCD = 10037,
  FrozenFishTide = 10038,
  IllegalParam = 10040,
  ConfigError = 10041,
  PreventCheatWarning = 10042,
  OpenChestFail = 10050,
  SelectChestRewardFail = 10051,
  NotMetTaskConditionError = 10052,
  DrawNumError = 10053,
  PurchaseLimitError = 10054,
  TreasureHuntNotStartError = 10055,
  ErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrCode_IsValid(int value);
constexpr ErrCode ErrCode_MIN = Succ;
constexpr ErrCode ErrCode_MAX = TreasureHuntNotStartError;
constexpr int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor();
template<typename T>
inline const std::string& ErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrCode_descriptor(), enum_t_value);
}
inline bool ErrCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
enum UserEventType : int {
  UserEventTypeHideIcon = 0,
  UserEventTypeCrazySkill = 1,
  UserEventTypeUserPool = 2,
  UserEventTypeMultiShoot = 3,
  UserEventTypeStore = 4,
  UserEventTypeCustomTable = 5,
  UserEventTypeChangeTable = 6,
  UserLogTypeMax = 7,
  UserEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserEventType_IsValid(int value);
constexpr UserEventType UserEventType_MIN = UserEventTypeHideIcon;
constexpr UserEventType UserEventType_MAX = UserLogTypeMax;
constexpr int UserEventType_ARRAYSIZE = UserEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserEventType_descriptor();
template<typename T>
inline const std::string& UserEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserEventType_descriptor(), enum_t_value);
}
inline bool UserEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserEventType>(
    UserEventType_descriptor(), name, value);
}
enum CallFishType : int {
  CallTypeNormal = 0,
  CallTypeSpecial = 1,
  CallFishType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CallFishType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CallFishType_IsValid(int value);
constexpr CallFishType CallFishType_MIN = CallTypeNormal;
constexpr CallFishType CallFishType_MAX = CallTypeSpecial;
constexpr int CallFishType_ARRAYSIZE = CallFishType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallFishType_descriptor();
template<typename T>
inline const std::string& CallFishType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CallFishType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CallFishType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CallFishType_descriptor(), enum_t_value);
}
inline bool CallFishType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CallFishType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CallFishType>(
    CallFishType_descriptor(), name, value);
}
enum ChestType : int {
  ChestTypeNone = 0,
  ChestTypePorcelain = 1,
  ChestTypeBronze = 2,
  ChestTypeSilver = 3,
  ChestTypeGold = 4,
  ChestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChestType_IsValid(int value);
constexpr ChestType ChestType_MIN = ChestTypeNone;
constexpr ChestType ChestType_MAX = ChestTypeGold;
constexpr int ChestType_ARRAYSIZE = ChestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestType_descriptor();
template<typename T>
inline const std::string& ChestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChestType_descriptor(), enum_t_value);
}
inline bool ChestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChestType>(
    ChestType_descriptor(), name, value);
}
enum ChestAutoSelectOption : int {
  ChestAutoSelectOptionNone = 0,
  RedPacketTicket = 1,
  Money = 2,
  ChestAutoSelectOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChestAutoSelectOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChestAutoSelectOption_IsValid(int value);
constexpr ChestAutoSelectOption ChestAutoSelectOption_MIN = ChestAutoSelectOptionNone;
constexpr ChestAutoSelectOption ChestAutoSelectOption_MAX = Money;
constexpr int ChestAutoSelectOption_ARRAYSIZE = ChestAutoSelectOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestAutoSelectOption_descriptor();
template<typename T>
inline const std::string& ChestAutoSelectOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChestAutoSelectOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChestAutoSelectOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChestAutoSelectOption_descriptor(), enum_t_value);
}
inline bool ChestAutoSelectOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChestAutoSelectOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChestAutoSelectOption>(
    ChestAutoSelectOption_descriptor(), name, value);
}
// ===================================================================

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationBaseListFieldNumber = 1,
    kGunInfoFieldNumber = 2,
    kRatioListFieldNumber = 5,
    kGunRatioNumFieldNumber = 3,
    kGunLevelNumFieldNumber = 4,
  };
  // repeated .F4BY.StationBase station_base_list = 1;
  int station_base_list_size() const;
  private:
  int _internal_station_base_list_size() const;
  public:
  void clear_station_base_list();
  ::F4BY::StationBase* mutable_station_base_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >*
      mutable_station_base_list();
  private:
  const ::F4BY::StationBase& _internal_station_base_list(int index) const;
  ::F4BY::StationBase* _internal_add_station_base_list();
  public:
  const ::F4BY::StationBase& station_base_list(int index) const;
  ::F4BY::StationBase* add_station_base_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >&
      station_base_list() const;

  // repeated .F4BY.GunInfo gun_info = 2;
  int gun_info_size() const;
  private:
  int _internal_gun_info_size() const;
  public:
  void clear_gun_info();
  ::F4BY::GunInfo* mutable_gun_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >*
      mutable_gun_info();
  private:
  const ::F4BY::GunInfo& _internal_gun_info(int index) const;
  ::F4BY::GunInfo* _internal_add_gun_info();
  public:
  const ::F4BY::GunInfo& gun_info(int index) const;
  ::F4BY::GunInfo* add_gun_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >&
      gun_info() const;

  // repeated int32 ratio_list = 5;
  int ratio_list_size() const;
  private:
  int _internal_ratio_list_size() const;
  public:
  void clear_ratio_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratio_list() const;
  void _internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratio_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_list(int index) const;
  void set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratio_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratio_list();

  // int32 gun_ratio_num = 3;
  void clear_gun_ratio_num();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_num() const;
  void set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio_num() const;
  void _internal_set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level_num = 4;
  void clear_gun_level_num();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_num() const;
  void set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level_num() const;
  void _internal_set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase > station_base_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo > gun_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratio_list_;
  mutable std::atomic<int> _ratio_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CommonResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CommonResp) */ {
 public:
  inline CommonResp() : CommonResp(nullptr) {}
  virtual ~CommonResp();

  CommonResp(const CommonResp& from);
  CommonResp(CommonResp&& from) noexcept
    : CommonResp() {
    *this = ::std::move(from);
  }

  inline CommonResp& operator=(const CommonResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResp& operator=(CommonResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonResp& default_instance();

  static inline const CommonResp* internal_default_instance() {
    return reinterpret_cast<const CommonResp*>(
               &_CommonResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonResp& a, CommonResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonResp* New() const final {
    return CreateMaybeMessage<CommonResp>(nullptr);
  }

  CommonResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonResp& from);
  void MergeFrom(const CommonResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CommonResp";
  }
  protected:
  explicit CommonResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CommonResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiListFieldNumber = 8,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kRatioFieldNumber = 3,
    kTimeFieldNumber = 4,
    kMultipleFieldNumber = 5,
    kUidFieldNumber = 6,
    kOriginIdFieldNumber = 7,
    kOriginUidFieldNumber = 9,
  };
  // repeated .F4BY.MultiInfo multi_list = 8;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float time = 4;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // int32 multiple = 5;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 6;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originId = 7;
  void clear_originid();
  ::PROTOBUF_NAMESPACE_ID::int32 originid() const;
  void set_originid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originid() const;
  void _internal_set_originid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 origin_uid = 9;
  void clear_origin_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid() const;
  void set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_uid() const;
  void _internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  float time_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originid_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Obj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Obj) */ {
 public:
  inline Obj() : Obj(nullptr) {}
  virtual ~Obj();

  Obj(const Obj& from);
  Obj(Obj&& from) noexcept
    : Obj() {
    *this = ::std::move(from);
  }

  inline Obj& operator=(const Obj& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obj& operator=(Obj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obj& default_instance();

  static inline const Obj* internal_default_instance() {
    return reinterpret_cast<const Obj*>(
               &_Obj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Obj& a, Obj& b) {
    a.Swap(&b);
  }
  inline void Swap(Obj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obj* New() const final {
    return CreateMaybeMessage<Obj>(nullptr);
  }

  Obj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obj& from);
  void MergeFrom(const Obj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Obj";
  }
  protected:
  explicit Obj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Obj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Object1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Object1) */ {
 public:
  inline Object1() : Object1(nullptr) {}
  virtual ~Object1();

  Object1(const Object1& from);
  Object1(Object1&& from) noexcept
    : Object1() {
    *this = ::std::move(from);
  }

  inline Object1& operator=(const Object1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object1& operator=(Object1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object1& default_instance();

  static inline const Object1* internal_default_instance() {
    return reinterpret_cast<const Object1*>(
               &_Object1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Object1& a, Object1& b) {
    a.Swap(&b);
  }
  inline void Swap(Object1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object1* New() const final {
    return CreateMaybeMessage<Object1>(nullptr);
  }

  Object1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object1& from);
  void MergeFrom(const Object1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Object1";
  }
  protected:
  explicit Object1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Object1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Object2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Object2) */ {
 public:
  inline Object2() : Object2(nullptr) {}
  virtual ~Object2();

  Object2(const Object2& from);
  Object2(Object2&& from) noexcept
    : Object2() {
    *this = ::std::move(from);
  }

  inline Object2& operator=(const Object2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object2& operator=(Object2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object2& default_instance();

  static inline const Object2* internal_default_instance() {
    return reinterpret_cast<const Object2*>(
               &_Object2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Object2& a, Object2& b) {
    a.Swap(&b);
  }
  inline void Swap(Object2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object2* New() const final {
    return CreateMaybeMessage<Object2>(nullptr);
  }

  Object2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object2& from);
  void MergeFrom(const Object2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Object2";
  }
  protected:
  explicit Object2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Object2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Object3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Object3) */ {
 public:
  inline Object3() : Object3(nullptr) {}
  virtual ~Object3();

  Object3(const Object3& from);
  Object3(Object3&& from) noexcept
    : Object3() {
    *this = ::std::move(from);
  }

  inline Object3& operator=(const Object3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object3& operator=(Object3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object3& default_instance();

  static inline const Object3* internal_default_instance() {
    return reinterpret_cast<const Object3*>(
               &_Object3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Object3& a, Object3& b) {
    a.Swap(&b);
  }
  inline void Swap(Object3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object3* New() const final {
    return CreateMaybeMessage<Object3>(nullptr);
  }

  Object3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object3& from);
  void MergeFrom(const Object3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Object3";
  }
  protected:
  explicit Object3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Object3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class WheelObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.WheelObject) */ {
 public:
  inline WheelObject() : WheelObject(nullptr) {}
  virtual ~WheelObject();

  WheelObject(const WheelObject& from);
  WheelObject(WheelObject&& from) noexcept
    : WheelObject() {
    *this = ::std::move(from);
  }

  inline WheelObject& operator=(const WheelObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelObject& operator=(WheelObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WheelObject& default_instance();

  static inline const WheelObject* internal_default_instance() {
    return reinterpret_cast<const WheelObject*>(
               &_WheelObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WheelObject& a, WheelObject& b) {
    a.Swap(&b);
  }
  inline void Swap(WheelObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WheelObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WheelObject* New() const final {
    return CreateMaybeMessage<WheelObject>(nullptr);
  }

  WheelObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WheelObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WheelObject& from);
  void MergeFrom(const WheelObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WheelObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.WheelObject";
  }
  protected:
  explicit WheelObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelsFieldNumber = 1,
    kRatioFieldNumber = 2,
  };
  // repeated .F4BY.Object3 wheels = 1;
  int wheels_size() const;
  private:
  int _internal_wheels_size() const;
  public:
  void clear_wheels();
  ::F4BY::Object3* mutable_wheels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >*
      mutable_wheels();
  private:
  const ::F4BY::Object3& _internal_wheels(int index) const;
  ::F4BY::Object3* _internal_add_wheels();
  public:
  const ::F4BY::Object3& wheels(int index) const;
  ::F4BY::Object3* add_wheels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >&
      wheels() const;

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.WheelObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 > wheels_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 denom = 2;
  void clear_denom();
  ::PROTOBUF_NAMESPACE_ID::int32 denom() const;
  void set_denom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_denom() const;
  void _internal_set_denom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 denom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLoginGameWithToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLoginGameWithToken) */ {
 public:
  inline CSLoginGameWithToken() : CSLoginGameWithToken(nullptr) {}
  virtual ~CSLoginGameWithToken();

  CSLoginGameWithToken(const CSLoginGameWithToken& from);
  CSLoginGameWithToken(CSLoginGameWithToken&& from) noexcept
    : CSLoginGameWithToken() {
    *this = ::std::move(from);
  }

  inline CSLoginGameWithToken& operator=(const CSLoginGameWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLoginGameWithToken& operator=(CSLoginGameWithToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLoginGameWithToken& default_instance();

  static inline const CSLoginGameWithToken* internal_default_instance() {
    return reinterpret_cast<const CSLoginGameWithToken*>(
               &_CSLoginGameWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSLoginGameWithToken& a, CSLoginGameWithToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLoginGameWithToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLoginGameWithToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLoginGameWithToken* New() const final {
    return CreateMaybeMessage<CSLoginGameWithToken>(nullptr);
  }

  CSLoginGameWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLoginGameWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLoginGameWithToken& from);
  void MergeFrom(const CSLoginGameWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLoginGameWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLoginGameWithToken";
  }
  protected:
  explicit CSLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kOSTypeFieldNumber = 3,
    kTableIdFieldNumber = 4,
    kLastTableIdFieldNumber = 5,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oSType = 3;
  void clear_ostype();
  ::PROTOBUF_NAMESPACE_ID::int32 ostype() const;
  void set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ostype() const;
  void _internal_set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tableId = 4;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_tableId = 5;
  void clear_last_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 last_tableid() const;
  void set_last_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_tableid() const;
  void _internal_set_last_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSLoginGameWithToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ostype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLoginGameWithToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLoginGameWithToken) */ {
 public:
  inline SCLoginGameWithToken() : SCLoginGameWithToken(nullptr) {}
  virtual ~SCLoginGameWithToken();

  SCLoginGameWithToken(const SCLoginGameWithToken& from);
  SCLoginGameWithToken(SCLoginGameWithToken&& from) noexcept
    : SCLoginGameWithToken() {
    *this = ::std::move(from);
  }

  inline SCLoginGameWithToken& operator=(const SCLoginGameWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLoginGameWithToken& operator=(SCLoginGameWithToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLoginGameWithToken& default_instance();

  static inline const SCLoginGameWithToken* internal_default_instance() {
    return reinterpret_cast<const SCLoginGameWithToken*>(
               &_SCLoginGameWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SCLoginGameWithToken& a, SCLoginGameWithToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLoginGameWithToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLoginGameWithToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLoginGameWithToken* New() const final {
    return CreateMaybeMessage<SCLoginGameWithToken>(nullptr);
  }

  SCLoginGameWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLoginGameWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLoginGameWithToken& from);
  void MergeFrom(const SCLoginGameWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLoginGameWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLoginGameWithToken";
  }
  protected:
  explicit SCLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIndexFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // int32 scene_index = 1;
  void clear_scene_index();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index() const;
  void set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_index() const;
  void _internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tableId = 2;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCLoginGameWithToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserReady) */ {
 public:
  inline CSUserReady() : CSUserReady(nullptr) {}
  virtual ~CSUserReady();

  CSUserReady(const CSUserReady& from);
  CSUserReady(CSUserReady&& from) noexcept
    : CSUserReady() {
    *this = ::std::move(from);
  }

  inline CSUserReady& operator=(const CSUserReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserReady& operator=(CSUserReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserReady& default_instance();

  static inline const CSUserReady* internal_default_instance() {
    return reinterpret_cast<const CSUserReady*>(
               &_CSUserReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CSUserReady& a, CSUserReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserReady* New() const final {
    return CreateMaybeMessage<CSUserReady>(nullptr);
  }

  CSUserReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserReady& from);
  void MergeFrom(const CSUserReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserReady";
  }
  protected:
  explicit CSUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class EffectInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.EffectInfo) */ {
 public:
  inline EffectInfo() : EffectInfo(nullptr) {}
  virtual ~EffectInfo();

  EffectInfo(const EffectInfo& from);
  EffectInfo(EffectInfo&& from) noexcept
    : EffectInfo() {
    *this = ::std::move(from);
  }

  inline EffectInfo& operator=(const EffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectInfo& operator=(EffectInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EffectInfo& default_instance();

  static inline const EffectInfo* internal_default_instance() {
    return reinterpret_cast<const EffectInfo*>(
               &_EffectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EffectInfo& a, EffectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EffectInfo* New() const final {
    return CreateMaybeMessage<EffectInfo>(nullptr);
  }

  EffectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EffectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EffectInfo& from);
  void MergeFrom(const EffectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.EffectInfo";
  }
  protected:
  explicit EffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdFieldNumber = 1,
    kIsGlobalFieldNumber = 2,
  };
  // int32 effect_id = 1;
  void clear_effect_id();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id() const;
  void set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_id() const;
  void _internal_set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_global = 2;
  void clear_is_global();
  bool is_global() const;
  void set_is_global(bool value);
  private:
  bool _internal_is_global() const;
  void _internal_set_is_global(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.EffectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id_;
  bool is_global_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class StationBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.StationBase) */ {
 public:
  inline StationBase() : StationBase(nullptr) {}
  virtual ~StationBase();

  StationBase(const StationBase& from);
  StationBase(StationBase&& from) noexcept
    : StationBase() {
    *this = ::std::move(from);
  }

  inline StationBase& operator=(const StationBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline StationBase& operator=(StationBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StationBase& default_instance();

  static inline const StationBase* internal_default_instance() {
    return reinterpret_cast<const StationBase*>(
               &_StationBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StationBase& a, StationBase& b) {
    a.Swap(&b);
  }
  inline void Swap(StationBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StationBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StationBase* New() const final {
    return CreateMaybeMessage<StationBase>(nullptr);
  }

  StationBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StationBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StationBase& from);
  void MergeFrom(const StationBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StationBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.StationBase";
  }
  protected:
  explicit StationBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 5,
    kRedPacketTicketFieldNumber = 13,
    kEffectInfoFieldNumber = 14,
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kUserScoreFieldNumber = 3,
    kChairIdxFieldNumber = 4,
    kPlayerIdFieldNumber = 6,
    kVipFieldNumber = 7,
    kStatusFieldNumber = 8,
    kCrazySkillOpenFieldNumber = 9,
    kUserTicketFieldNumber = 10,
    kEffectFieldNumber = 11,
    kExtraDataFieldNumber = 12,
    kWingsPropsIdFieldNumber = 15,
  };
  // string player_name = 5;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .F4BY.Decimal red_packet_ticket = 13;
  bool has_red_packet_ticket() const;
  private:
  bool _internal_has_red_packet_ticket() const;
  public:
  void clear_red_packet_ticket();
  const ::F4BY::Decimal& red_packet_ticket() const;
  ::F4BY::Decimal* release_red_packet_ticket();
  ::F4BY::Decimal* mutable_red_packet_ticket();
  void set_allocated_red_packet_ticket(::F4BY::Decimal* red_packet_ticket);
  private:
  const ::F4BY::Decimal& _internal_red_packet_ticket() const;
  ::F4BY::Decimal* _internal_mutable_red_packet_ticket();
  public:
  void unsafe_arena_set_allocated_red_packet_ticket(
      ::F4BY::Decimal* red_packet_ticket);
  ::F4BY::Decimal* unsafe_arena_release_red_packet_ticket();

  // .F4BY.EffectInfo effect_info = 14;
  bool has_effect_info() const;
  private:
  bool _internal_has_effect_info() const;
  public:
  void clear_effect_info();
  const ::F4BY::EffectInfo& effect_info() const;
  ::F4BY::EffectInfo* release_effect_info();
  ::F4BY::EffectInfo* mutable_effect_info();
  void set_allocated_effect_info(::F4BY::EffectInfo* effect_info);
  private:
  const ::F4BY::EffectInfo& _internal_effect_info() const;
  ::F4BY::EffectInfo* _internal_mutable_effect_info();
  public:
  void unsafe_arena_set_allocated_effect_info(
      ::F4BY::EffectInfo* effect_info);
  ::F4BY::EffectInfo* unsafe_arena_release_effect_info();

  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 user_score = 3;
  void clear_user_score();
  ::PROTOBUF_NAMESPACE_ID::int64 user_score() const;
  void set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_score() const;
  void _internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_idx = 4;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_id = 6;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip = 7;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 8;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool crazy_skill_open = 9;
  void clear_crazy_skill_open();
  bool crazy_skill_open() const;
  void set_crazy_skill_open(bool value);
  private:
  bool _internal_crazy_skill_open() const;
  void _internal_set_crazy_skill_open(bool value);
  public:

  // int32 user_ticket = 10;
  void clear_user_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 user_ticket() const;
  void set_user_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_ticket() const;
  void _internal_set_user_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 effect = 11;
  void clear_effect();
  ::PROTOBUF_NAMESPACE_ID::int32 effect() const;
  void set_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect() const;
  void _internal_set_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extra_data = 12;
  void clear_extra_data();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_data() const;
  void set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_data() const;
  void _internal_set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wings_props_id = 15;
  void clear_wings_props_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_props_id() const;
  void set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_props_id() const;
  void _internal_set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.StationBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::F4BY::Decimal* red_packet_ticket_;
  ::F4BY::EffectInfo* effect_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  bool crazy_skill_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_props_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserReady) */ {
 public:
  inline SCUserReady() : SCUserReady(nullptr) {}
  virtual ~SCUserReady();

  SCUserReady(const SCUserReady& from);
  SCUserReady(SCUserReady&& from) noexcept
    : SCUserReady() {
    *this = ::std::move(from);
  }

  inline SCUserReady& operator=(const SCUserReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserReady& operator=(SCUserReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserReady& default_instance();

  static inline const SCUserReady* internal_default_instance() {
    return reinterpret_cast<const SCUserReady*>(
               &_SCUserReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SCUserReady& a, SCUserReady& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserReady* New() const final {
    return CreateMaybeMessage<SCUserReady>(nullptr);
  }

  SCUserReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserReady& from);
  void MergeFrom(const SCUserReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserReady";
  }
  protected:
  explicit SCUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationBaseListFieldNumber = 1,
  };
  // repeated .F4BY.StationBase station_base_list = 1;
  int station_base_list_size() const;
  private:
  int _internal_station_base_list_size() const;
  public:
  void clear_station_base_list();
  ::F4BY::StationBase* mutable_station_base_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >*
      mutable_station_base_list();
  private:
  const ::F4BY::StationBase& _internal_station_base_list(int index) const;
  ::F4BY::StationBase* _internal_add_station_base_list();
  public:
  const ::F4BY::StationBase& station_base_list(int index) const;
  ::F4BY::StationBase* add_station_base_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >&
      station_base_list() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCUserReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase > station_base_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCNotifyLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCNotifyLogin) */ {
 public:
  inline SCNotifyLogin() : SCNotifyLogin(nullptr) {}
  virtual ~SCNotifyLogin();

  SCNotifyLogin(const SCNotifyLogin& from);
  SCNotifyLogin(SCNotifyLogin&& from) noexcept
    : SCNotifyLogin() {
    *this = ::std::move(from);
  }

  inline SCNotifyLogin& operator=(const SCNotifyLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNotifyLogin& operator=(SCNotifyLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNotifyLogin& default_instance();

  static inline const SCNotifyLogin* internal_default_instance() {
    return reinterpret_cast<const SCNotifyLogin*>(
               &_SCNotifyLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SCNotifyLogin& a, SCNotifyLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNotifyLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNotifyLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNotifyLogin* New() const final {
    return CreateMaybeMessage<SCNotifyLogin>(nullptr);
  }

  SCNotifyLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNotifyLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNotifyLogin& from);
  void MergeFrom(const SCNotifyLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNotifyLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCNotifyLogin";
  }
  protected:
  explicit SCNotifyLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationBaseListFieldNumber = 1,
  };
  // .F4BY.StationBase station_base_list = 1;
  bool has_station_base_list() const;
  private:
  bool _internal_has_station_base_list() const;
  public:
  void clear_station_base_list();
  const ::F4BY::StationBase& station_base_list() const;
  ::F4BY::StationBase* release_station_base_list();
  ::F4BY::StationBase* mutable_station_base_list();
  void set_allocated_station_base_list(::F4BY::StationBase* station_base_list);
  private:
  const ::F4BY::StationBase& _internal_station_base_list() const;
  ::F4BY::StationBase* _internal_mutable_station_base_list();
  public:
  void unsafe_arena_set_allocated_station_base_list(
      ::F4BY::StationBase* station_base_list);
  ::F4BY::StationBase* unsafe_arena_release_station_base_list();

  // @@protoc_insertion_point(class_scope:F4BY.SCNotifyLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::StationBase* station_base_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSNotifyLogout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSNotifyLogout) */ {
 public:
  inline CSNotifyLogout() : CSNotifyLogout(nullptr) {}
  virtual ~CSNotifyLogout();

  CSNotifyLogout(const CSNotifyLogout& from);
  CSNotifyLogout(CSNotifyLogout&& from) noexcept
    : CSNotifyLogout() {
    *this = ::std::move(from);
  }

  inline CSNotifyLogout& operator=(const CSNotifyLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNotifyLogout& operator=(CSNotifyLogout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSNotifyLogout& default_instance();

  static inline const CSNotifyLogout* internal_default_instance() {
    return reinterpret_cast<const CSNotifyLogout*>(
               &_CSNotifyLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CSNotifyLogout& a, CSNotifyLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNotifyLogout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNotifyLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSNotifyLogout* New() const final {
    return CreateMaybeMessage<CSNotifyLogout>(nullptr);
  }

  CSNotifyLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSNotifyLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSNotifyLogout& from);
  void MergeFrom(const CSNotifyLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNotifyLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSNotifyLogout";
  }
  protected:
  explicit CSNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSNotifyLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCNotifyLogout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCNotifyLogout) */ {
 public:
  inline SCNotifyLogout() : SCNotifyLogout(nullptr) {}
  virtual ~SCNotifyLogout();

  SCNotifyLogout(const SCNotifyLogout& from);
  SCNotifyLogout(SCNotifyLogout&& from) noexcept
    : SCNotifyLogout() {
    *this = ::std::move(from);
  }

  inline SCNotifyLogout& operator=(const SCNotifyLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNotifyLogout& operator=(SCNotifyLogout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNotifyLogout& default_instance();

  static inline const SCNotifyLogout* internal_default_instance() {
    return reinterpret_cast<const SCNotifyLogout*>(
               &_SCNotifyLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SCNotifyLogout& a, SCNotifyLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNotifyLogout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNotifyLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNotifyLogout* New() const final {
    return CreateMaybeMessage<SCNotifyLogout>(nullptr);
  }

  SCNotifyLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNotifyLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNotifyLogout& from);
  void MergeFrom(const SCNotifyLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNotifyLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCNotifyLogout";
  }
  protected:
  explicit SCNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCNotifyLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSetProbability PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSetProbability) */ {
 public:
  inline CSSetProbability() : CSSetProbability(nullptr) {}
  virtual ~CSSetProbability();

  CSSetProbability(const CSSetProbability& from);
  CSSetProbability(CSSetProbability&& from) noexcept
    : CSSetProbability() {
    *this = ::std::move(from);
  }

  inline CSSetProbability& operator=(const CSSetProbability& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetProbability& operator=(CSSetProbability&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetProbability& default_instance();

  static inline const CSSetProbability* internal_default_instance() {
    return reinterpret_cast<const CSSetProbability*>(
               &_CSSetProbability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CSSetProbability& a, CSSetProbability& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetProbability* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetProbability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetProbability* New() const final {
    return CreateMaybeMessage<CSSetProbability>(nullptr);
  }

  CSSetProbability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetProbability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetProbability& from);
  void MergeFrom(const CSSetProbability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetProbability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSetProbability";
  }
  protected:
  explicit CSSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kIsUseAutoFieldNumber = 3,
  };
  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_use_auto = 3;
  void clear_is_use_auto();
  bool is_use_auto() const;
  void set_is_use_auto(bool value);
  private:
  bool _internal_is_use_auto() const;
  void _internal_set_is_use_auto(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSetProbability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  bool is_use_auto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSetProbability PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSetProbability) */ {
 public:
  inline SCSetProbability() : SCSetProbability(nullptr) {}
  virtual ~SCSetProbability();

  SCSetProbability(const SCSetProbability& from);
  SCSetProbability(SCSetProbability&& from) noexcept
    : SCSetProbability() {
    *this = ::std::move(from);
  }

  inline SCSetProbability& operator=(const SCSetProbability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetProbability& operator=(SCSetProbability&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetProbability& default_instance();

  static inline const SCSetProbability* internal_default_instance() {
    return reinterpret_cast<const SCSetProbability*>(
               &_SCSetProbability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SCSetProbability& a, SCSetProbability& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetProbability* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetProbability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetProbability* New() const final {
    return CreateMaybeMessage<SCSetProbability>(nullptr);
  }

  SCSetProbability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetProbability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetProbability& from);
  void MergeFrom(const SCSetProbability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetProbability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSetProbability";
  }
  protected:
  explicit SCSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 5,
    kCodeFieldNumber = 1,
    kChairIdxFieldNumber = 2,
    kGunRatioFieldNumber = 3,
    kGunLevelFieldNumber = 4,
    kIsUnlockFieldNumber = 6,
    kExtraDataFieldNumber = 7,
  };
  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 2;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_ratio = 3;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 4;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_unlock = 6;
  void clear_is_unlock();
  bool is_unlock() const;
  void set_is_unlock(bool value);
  private:
  bool _internal_is_unlock() const;
  void _internal_set_is_unlock(bool value);
  public:

  // int32 extra_data = 7;
  void clear_extra_data();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_data() const;
  void set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_data() const;
  void _internal_set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSetProbability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  bool is_unlock_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSetWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSetWings) */ {
 public:
  inline CSSetWings() : CSSetWings(nullptr) {}
  virtual ~CSSetWings();

  CSSetWings(const CSSetWings& from);
  CSSetWings(CSSetWings&& from) noexcept
    : CSSetWings() {
    *this = ::std::move(from);
  }

  inline CSSetWings& operator=(const CSSetWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetWings& operator=(CSSetWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetWings& default_instance();

  static inline const CSSetWings* internal_default_instance() {
    return reinterpret_cast<const CSSetWings*>(
               &_CSSetWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CSSetWings& a, CSSetWings& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetWings* New() const final {
    return CreateMaybeMessage<CSSetWings>(nullptr);
  }

  CSSetWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetWings& from);
  void MergeFrom(const CSSetWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSetWings";
  }
  protected:
  explicit CSSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsPropIdFieldNumber = 1,
  };
  // int32 wings_prop_id = 1;
  void clear_wings_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id() const;
  void set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_prop_id() const;
  void _internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSetWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSetWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSetWings) */ {
 public:
  inline SCSetWings() : SCSetWings(nullptr) {}
  virtual ~SCSetWings();

  SCSetWings(const SCSetWings& from);
  SCSetWings(SCSetWings&& from) noexcept
    : SCSetWings() {
    *this = ::std::move(from);
  }

  inline SCSetWings& operator=(const SCSetWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetWings& operator=(SCSetWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetWings& default_instance();

  static inline const SCSetWings* internal_default_instance() {
    return reinterpret_cast<const SCSetWings*>(
               &_SCSetWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SCSetWings& a, SCSetWings& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetWings* New() const final {
    return CreateMaybeMessage<SCSetWings>(nullptr);
  }

  SCSetWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetWings& from);
  void MergeFrom(const SCSetWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSetWings";
  }
  protected:
  explicit SCSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kWingsPropIdFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wings_prop_id = 2;
  void clear_wings_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id() const;
  void set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_prop_id() const;
  void _internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSetWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserShoot) */ {
 public:
  inline CSUserShoot() : CSUserShoot(nullptr) {}
  virtual ~CSUserShoot();

  CSUserShoot(const CSUserShoot& from);
  CSUserShoot(CSUserShoot&& from) noexcept
    : CSUserShoot() {
    *this = ::std::move(from);
  }

  inline CSUserShoot& operator=(const CSUserShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserShoot& operator=(CSUserShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserShoot& default_instance();

  static inline const CSUserShoot* internal_default_instance() {
    return reinterpret_cast<const CSUserShoot*>(
               &_CSUserShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSUserShoot& a, CSUserShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserShoot* New() const final {
    return CreateMaybeMessage<CSUserShoot>(nullptr);
  }

  CSUserShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserShoot& from);
  void MergeFrom(const CSUserShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserShoot";
  }
  protected:
  explicit CSUserShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBulletIdFieldNumber = 2,
    kAngleFieldNumber = 1,
    kRatioFieldNumber = 3,
    kBulletTypeFieldNumber = 4,
    kIsOffsetFieldNumber = 5,
    kChairIdFieldNumber = 6,
    kExtraMulFieldNumber = 7,
  };
  // repeated int32 bullet_id = 2;
  int bullet_id_size() const;
  private:
  int _internal_bullet_id_size() const;
  public:
  void clear_bullet_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bullet_id() const;
  void _internal_add_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bullet_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id(int index) const;
  void set_bullet_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bullet_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bullet_id();

  // int32 angle = 1;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_type = 4;
  void clear_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type() const;
  void set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_type() const;
  void _internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_offset = 5;
  void clear_is_offset();
  bool is_offset() const;
  void set_is_offset(bool value);
  private:
  bool _internal_is_offset() const;
  void _internal_set_is_offset(bool value);
  public:

  // int32 chair_id = 6;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extra_mul = 7;
  void clear_extra_mul();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_mul() const;
  void set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_mul() const;
  void _internal_set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bullet_id_;
  mutable std::atomic<int> _bullet_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type_;
  bool is_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_mul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserShoot) */ {
 public:
  inline SCUserShoot() : SCUserShoot(nullptr) {}
  virtual ~SCUserShoot();

  SCUserShoot(const SCUserShoot& from);
  SCUserShoot(SCUserShoot&& from) noexcept
    : SCUserShoot() {
    *this = ::std::move(from);
  }

  inline SCUserShoot& operator=(const SCUserShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserShoot& operator=(SCUserShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserShoot& default_instance();

  static inline const SCUserShoot* internal_default_instance() {
    return reinterpret_cast<const SCUserShoot*>(
               &_SCUserShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SCUserShoot& a, SCUserShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserShoot* New() const final {
    return CreateMaybeMessage<SCUserShoot>(nullptr);
  }

  SCUserShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserShoot& from);
  void MergeFrom(const SCUserShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserShoot";
  }
  protected:
  explicit SCUserShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kAngleFieldNumber = 2,
    kScoreFieldNumber = 3,
    kBulletTypeFieldNumber = 4,
    kBulletOffsetFieldNumber = 5,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 angle = 2;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_type = 4;
  void clear_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type() const;
  void set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_type() const;
  void _internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bullet_offset = 5;
  void clear_bullet_offset();
  bool bullet_offset() const;
  void set_bullet_offset(bool value);
  private:
  bool _internal_bullet_offset() const;
  void _internal_set_bullet_offset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type_;
  bool bullet_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSHitFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSHitFish) */ {
 public:
  inline CSHitFish() : CSHitFish(nullptr) {}
  virtual ~CSHitFish();

  CSHitFish(const CSHitFish& from);
  CSHitFish(CSHitFish&& from) noexcept
    : CSHitFish() {
    *this = ::std::move(from);
  }

  inline CSHitFish& operator=(const CSHitFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHitFish& operator=(CSHitFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHitFish& default_instance();

  static inline const CSHitFish* internal_default_instance() {
    return reinterpret_cast<const CSHitFish*>(
               &_CSHitFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSHitFish& a, CSHitFish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHitFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHitFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHitFish* New() const final {
    return CreateMaybeMessage<CSHitFish>(nullptr);
  }

  CSHitFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHitFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHitFish& from);
  void MergeFrom(const CSHitFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHitFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSHitFish";
  }
  protected:
  explicit CSHitFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFishesFieldNumber = 3,
    kFishUidFieldNumber = 1,
    kBulletIdFieldNumber = 2,
    kChairIdFieldNumber = 4,
    kRatioFieldNumber = 5,
    kBulletTypeFieldNumber = 6,
  };
  // repeated int32 screen_fishes = 3;
  int screen_fishes_size() const;
  private:
  int _internal_screen_fishes_size() const;
  public:
  void clear_screen_fishes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen_fishes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_screen_fishes() const;
  void _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_screen_fishes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 screen_fishes(int index) const;
  void set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      screen_fishes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_screen_fishes();

  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_id = 2;
  void clear_bullet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id() const;
  void set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id() const;
  void _internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_id = 4;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 5;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_type = 6;
  void clear_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type() const;
  void set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_type() const;
  void _internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSHitFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > screen_fishes_;
  mutable std::atomic<int> _screen_fishes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class MultiInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.MultiInfo) */ {
 public:
  inline MultiInfo() : MultiInfo(nullptr) {}
  virtual ~MultiInfo();

  MultiInfo(const MultiInfo& from);
  MultiInfo(MultiInfo&& from) noexcept
    : MultiInfo() {
    *this = ::std::move(from);
  }

  inline MultiInfo& operator=(const MultiInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiInfo& operator=(MultiInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiInfo& default_instance();

  static inline const MultiInfo* internal_default_instance() {
    return reinterpret_cast<const MultiInfo*>(
               &_MultiInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MultiInfo& a, MultiInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiInfo* New() const final {
    return CreateMaybeMessage<MultiInfo>(nullptr);
  }

  MultiInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiInfo& from);
  void MergeFrom(const MultiInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.MultiInfo";
  }
  protected:
  explicit MultiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBtTypeFieldNumber = 1,
    kBtMultiFieldNumber = 2,
    kBtBaseFieldNumber = 3,
  };
  // int32 bt_type = 1;
  void clear_bt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_type() const;
  void set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_type() const;
  void _internal_set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_multi = 2;
  void clear_bt_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_multi() const;
  void set_bt_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_multi() const;
  void _internal_set_bt_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_base = 3;
  void clear_bt_base();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_base() const;
  void set_bt_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_base() const;
  void _internal_set_bt_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.MultiInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCHitFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCHitFish) */ {
 public:
  inline SCHitFish() : SCHitFish(nullptr) {}
  virtual ~SCHitFish();

  SCHitFish(const SCHitFish& from);
  SCHitFish(SCHitFish&& from) noexcept
    : SCHitFish() {
    *this = ::std::move(from);
  }

  inline SCHitFish& operator=(const SCHitFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHitFish& operator=(SCHitFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHitFish& default_instance();

  static inline const SCHitFish* internal_default_instance() {
    return reinterpret_cast<const SCHitFish*>(
               &_SCHitFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SCHitFish& a, SCHitFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHitFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHitFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHitFish* New() const final {
    return CreateMaybeMessage<SCHitFish>(nullptr);
  }

  SCHitFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHitFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHitFish& from);
  void MergeFrom(const SCHitFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHitFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCHitFish";
  }
  protected:
  explicit SCHitFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiListFieldNumber = 9,
    kDropPropsFieldNumber = 11,
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kUserScoreFieldNumber = 4,
    kEarnFieldNumber = 3,
    kFishValueFieldNumber = 5,
    kMultipleFieldNumber = 6,
    kHitBulletTypeFieldNumber = 7,
    kMagicCubeMultiFieldNumber = 8,
    kOriginUidFieldNumber = 10,
    kDeathFieldNumber = 12,
  };
  // repeated .F4BY.MultiInfo multi_list = 9;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // repeated .F4BY.Object drop_props = 11;
  int drop_props_size() const;
  private:
  int _internal_drop_props_size() const;
  public:
  void clear_drop_props();
  ::F4BY::Object* mutable_drop_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
      mutable_drop_props();
  private:
  const ::F4BY::Object& _internal_drop_props(int index) const;
  ::F4BY::Object* _internal_add_drop_props();
  public:
  const ::F4BY::Object& drop_props(int index) const;
  ::F4BY::Object* add_drop_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
      drop_props() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 user_score = 4;
  void clear_user_score();
  ::PROTOBUF_NAMESPACE_ID::int64 user_score() const;
  void set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_score() const;
  void _internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 earn = 3;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_value = 5;
  void clear_fish_value();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value() const;
  void set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_value() const;
  void _internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 6;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hit_bullet_type = 7;
  void clear_hit_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 hit_bullet_type() const;
  void set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hit_bullet_type() const;
  void _internal_set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magic_cube_multi = 8;
  void clear_magic_cube_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi() const;
  void set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magic_cube_multi() const;
  void _internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 origin_uid = 10;
  void clear_origin_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid() const;
  void set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_uid() const;
  void _internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool death = 12;
  void clear_death();
  bool death() const;
  void set_death(bool value);
  private:
  bool _internal_death() const;
  void _internal_set_death(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCHitFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object > drop_props_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 hit_bullet_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid_;
  bool death_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCHitSpecialFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCHitSpecialFish) */ {
 public:
  inline SCHitSpecialFish() : SCHitSpecialFish(nullptr) {}
  virtual ~SCHitSpecialFish();

  SCHitSpecialFish(const SCHitSpecialFish& from);
  SCHitSpecialFish(SCHitSpecialFish&& from) noexcept
    : SCHitSpecialFish() {
    *this = ::std::move(from);
  }

  inline SCHitSpecialFish& operator=(const SCHitSpecialFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHitSpecialFish& operator=(SCHitSpecialFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHitSpecialFish& default_instance();

  static inline const SCHitSpecialFish* internal_default_instance() {
    return reinterpret_cast<const SCHitSpecialFish*>(
               &_SCHitSpecialFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SCHitSpecialFish& a, SCHitSpecialFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHitSpecialFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHitSpecialFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHitSpecialFish* New() const final {
    return CreateMaybeMessage<SCHitSpecialFish>(nullptr);
  }

  SCHitSpecialFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHitSpecialFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHitSpecialFish& from);
  void MergeFrom(const SCHitSpecialFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHitSpecialFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCHitSpecialFish";
  }
  protected:
  explicit SCHitSpecialFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShockFishesFieldNumber = 9,
    kDropPropsFieldNumber = 10,
    kMultiListFieldNumber = 15,
    kWheelFieldNumber = 11,
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kEarnFieldNumber = 3,
    kFishValueFieldNumber = 4,
    kUserScoreFieldNumber = 5,
    kDeathFieldNumber = 6,
    kGrowStageFieldNumber = 7,
    kMultipleFieldNumber = 8,
    kHitBulletTypeFieldNumber = 12,
    kPropNoFieldNumber = 13,
    kMagicCubeMultiFieldNumber = 14,
    kOriginUidFieldNumber = 16,
    kDragonScoreFieldNumber = 17,
  };
  // repeated .F4BY.Object shock_fishes = 9;
  int shock_fishes_size() const;
  private:
  int _internal_shock_fishes_size() const;
  public:
  void clear_shock_fishes();
  ::F4BY::Object* mutable_shock_fishes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
      mutable_shock_fishes();
  private:
  const ::F4BY::Object& _internal_shock_fishes(int index) const;
  ::F4BY::Object* _internal_add_shock_fishes();
  public:
  const ::F4BY::Object& shock_fishes(int index) const;
  ::F4BY::Object* add_shock_fishes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
      shock_fishes() const;

  // repeated .F4BY.Object drop_props = 10;
  int drop_props_size() const;
  private:
  int _internal_drop_props_size() const;
  public:
  void clear_drop_props();
  ::F4BY::Object* mutable_drop_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
      mutable_drop_props();
  private:
  const ::F4BY::Object& _internal_drop_props(int index) const;
  ::F4BY::Object* _internal_add_drop_props();
  public:
  const ::F4BY::Object& drop_props(int index) const;
  ::F4BY::Object* add_drop_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
      drop_props() const;

  // repeated .F4BY.MultiInfo multi_list = 15;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // .F4BY.WheelObject wheel = 11;
  bool has_wheel() const;
  private:
  bool _internal_has_wheel() const;
  public:
  void clear_wheel();
  const ::F4BY::WheelObject& wheel() const;
  ::F4BY::WheelObject* release_wheel();
  ::F4BY::WheelObject* mutable_wheel();
  void set_allocated_wheel(::F4BY::WheelObject* wheel);
  private:
  const ::F4BY::WheelObject& _internal_wheel() const;
  ::F4BY::WheelObject* _internal_mutable_wheel();
  public:
  void unsafe_arena_set_allocated_wheel(
      ::F4BY::WheelObject* wheel);
  ::F4BY::WheelObject* unsafe_arena_release_wheel();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 3;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_value = 4;
  void clear_fish_value();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value() const;
  void set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_value() const;
  void _internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 user_score = 5;
  void clear_user_score();
  ::PROTOBUF_NAMESPACE_ID::int64 user_score() const;
  void set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_score() const;
  void _internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool death = 6;
  void clear_death();
  bool death() const;
  void set_death(bool value);
  private:
  bool _internal_death() const;
  void _internal_set_death(bool value);
  public:

  // int32 grow_stage = 7;
  void clear_grow_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 grow_stage() const;
  void set_grow_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grow_stage() const;
  void _internal_set_grow_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 8;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hit_bullet_type = 12;
  void clear_hit_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 hit_bullet_type() const;
  void set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hit_bullet_type() const;
  void _internal_set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_no = 13;
  void clear_prop_no();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_no() const;
  void set_prop_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_no() const;
  void _internal_set_prop_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magic_cube_multi = 14;
  void clear_magic_cube_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi() const;
  void set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magic_cube_multi() const;
  void _internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 origin_uid = 16;
  void clear_origin_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid() const;
  void set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_uid() const;
  void _internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dragon_score = 17;
  void clear_dragon_score();
  ::PROTOBUF_NAMESPACE_ID::int32 dragon_score() const;
  void set_dragon_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dragon_score() const;
  void _internal_set_dragon_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCHitSpecialFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object > shock_fishes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object > drop_props_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::F4BY::WheelObject* wheel_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_score_;
  bool death_;
  ::PROTOBUF_NAMESPACE_ID::int32 grow_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 hit_bullet_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dragon_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SyncPropInfoX PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SyncPropInfoX) */ {
 public:
  inline SyncPropInfoX() : SyncPropInfoX(nullptr) {}
  virtual ~SyncPropInfoX();

  SyncPropInfoX(const SyncPropInfoX& from);
  SyncPropInfoX(SyncPropInfoX&& from) noexcept
    : SyncPropInfoX() {
    *this = ::std::move(from);
  }

  inline SyncPropInfoX& operator=(const SyncPropInfoX& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPropInfoX& operator=(SyncPropInfoX&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPropInfoX& default_instance();

  static inline const SyncPropInfoX* internal_default_instance() {
    return reinterpret_cast<const SyncPropInfoX*>(
               &_SyncPropInfoX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SyncPropInfoX& a, SyncPropInfoX& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPropInfoX* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPropInfoX* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPropInfoX* New() const final {
    return CreateMaybeMessage<SyncPropInfoX>(nullptr);
  }

  SyncPropInfoX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPropInfoX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPropInfoX& from);
  void MergeFrom(const SyncPropInfoX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPropInfoX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SyncPropInfoX";
  }
  protected:
  explicit SyncPropInfoX(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kAngleFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // .F4BY.Object prop = 1;
  bool has_prop() const;
  private:
  bool _internal_has_prop() const;
  public:
  void clear_prop();
  const ::F4BY::Object& prop() const;
  ::F4BY::Object* release_prop();
  ::F4BY::Object* mutable_prop();
  void set_allocated_prop(::F4BY::Object* prop);
  private:
  const ::F4BY::Object& _internal_prop() const;
  ::F4BY::Object* _internal_mutable_prop();
  public:
  void unsafe_arena_set_allocated_prop(
      ::F4BY::Object* prop);
  ::F4BY::Object* unsafe_arena_release_prop();

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float angle = 4;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SyncPropInfoX)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Object* prop_;
  float x_;
  float y_;
  float angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class UserSyncPropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.UserSyncPropInfo) */ {
 public:
  inline UserSyncPropInfo() : UserSyncPropInfo(nullptr) {}
  virtual ~UserSyncPropInfo();

  UserSyncPropInfo(const UserSyncPropInfo& from);
  UserSyncPropInfo(UserSyncPropInfo&& from) noexcept
    : UserSyncPropInfo() {
    *this = ::std::move(from);
  }

  inline UserSyncPropInfo& operator=(const UserSyncPropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSyncPropInfo& operator=(UserSyncPropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSyncPropInfo& default_instance();

  static inline const UserSyncPropInfo* internal_default_instance() {
    return reinterpret_cast<const UserSyncPropInfo*>(
               &_UserSyncPropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UserSyncPropInfo& a, UserSyncPropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSyncPropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSyncPropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSyncPropInfo* New() const final {
    return CreateMaybeMessage<UserSyncPropInfo>(nullptr);
  }

  UserSyncPropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSyncPropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSyncPropInfo& from);
  void MergeFrom(const UserSyncPropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSyncPropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.UserSyncPropInfo";
  }
  protected:
  explicit UserSyncPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 2,
    kChairIdxFieldNumber = 1,
  };
  // repeated .F4BY.SyncPropInfoX props = 2;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  ::F4BY::SyncPropInfoX* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::SyncPropInfoX >*
      mutable_props();
  private:
  const ::F4BY::SyncPropInfoX& _internal_props(int index) const;
  ::F4BY::SyncPropInfoX* _internal_add_props();
  public:
  const ::F4BY::SyncPropInfoX& props(int index) const;
  ::F4BY::SyncPropInfoX* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::SyncPropInfoX >&
      props() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.UserSyncPropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::SyncPropInfoX > props_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSyncPropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSyncPropInfo) */ {
 public:
  inline CSSyncPropInfo() : CSSyncPropInfo(nullptr) {}
  virtual ~CSSyncPropInfo();

  CSSyncPropInfo(const CSSyncPropInfo& from);
  CSSyncPropInfo(CSSyncPropInfo&& from) noexcept
    : CSSyncPropInfo() {
    *this = ::std::move(from);
  }

  inline CSSyncPropInfo& operator=(const CSSyncPropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncPropInfo& operator=(CSSyncPropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncPropInfo& default_instance();

  static inline const CSSyncPropInfo* internal_default_instance() {
    return reinterpret_cast<const CSSyncPropInfo*>(
               &_CSSyncPropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CSSyncPropInfo& a, CSSyncPropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncPropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncPropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncPropInfo* New() const final {
    return CreateMaybeMessage<CSSyncPropInfo>(nullptr);
  }

  CSSyncPropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncPropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncPropInfo& from);
  void MergeFrom(const CSSyncPropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncPropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSyncPropInfo";
  }
  protected:
  explicit CSSyncPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kChairIdxFieldNumber = 2,
  };
  // .F4BY.SyncPropInfoX info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::F4BY::SyncPropInfoX& info() const;
  ::F4BY::SyncPropInfoX* release_info();
  ::F4BY::SyncPropInfoX* mutable_info();
  void set_allocated_info(::F4BY::SyncPropInfoX* info);
  private:
  const ::F4BY::SyncPropInfoX& _internal_info() const;
  ::F4BY::SyncPropInfoX* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::F4BY::SyncPropInfoX* info);
  ::F4BY::SyncPropInfoX* unsafe_arena_release_info();

  // int32 chair_idx = 2;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSyncPropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::SyncPropInfoX* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncPropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncPropInfo) */ {
 public:
  inline SCSyncPropInfo() : SCSyncPropInfo(nullptr) {}
  virtual ~SCSyncPropInfo();

  SCSyncPropInfo(const SCSyncPropInfo& from);
  SCSyncPropInfo(SCSyncPropInfo&& from) noexcept
    : SCSyncPropInfo() {
    *this = ::std::move(from);
  }

  inline SCSyncPropInfo& operator=(const SCSyncPropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncPropInfo& operator=(SCSyncPropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncPropInfo& default_instance();

  static inline const SCSyncPropInfo* internal_default_instance() {
    return reinterpret_cast<const SCSyncPropInfo*>(
               &_SCSyncPropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SCSyncPropInfo& a, SCSyncPropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncPropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncPropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncPropInfo* New() const final {
    return CreateMaybeMessage<SCSyncPropInfo>(nullptr);
  }

  SCSyncPropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncPropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncPropInfo& from);
  void MergeFrom(const SCSyncPropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncPropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncPropInfo";
  }
  protected:
  explicit SCSyncPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .F4BY.UserSyncPropInfo users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::F4BY::UserSyncPropInfo* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserSyncPropInfo >*
      mutable_users();
  private:
  const ::F4BY::UserSyncPropInfo& _internal_users(int index) const;
  ::F4BY::UserSyncPropInfo* _internal_add_users();
  public:
  const ::F4BY::UserSyncPropInfo& users(int index) const;
  ::F4BY::UserSyncPropInfo* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserSyncPropInfo >&
      users() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncPropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserSyncPropInfo > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSyncMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSyncMoney) */ {
 public:
  inline CSSyncMoney() : CSSyncMoney(nullptr) {}
  virtual ~CSSyncMoney();

  CSSyncMoney(const CSSyncMoney& from);
  CSSyncMoney(CSSyncMoney&& from) noexcept
    : CSSyncMoney() {
    *this = ::std::move(from);
  }

  inline CSSyncMoney& operator=(const CSSyncMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncMoney& operator=(CSSyncMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncMoney& default_instance();

  static inline const CSSyncMoney* internal_default_instance() {
    return reinterpret_cast<const CSSyncMoney*>(
               &_CSSyncMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSSyncMoney& a, CSSyncMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncMoney* New() const final {
    return CreateMaybeMessage<CSSyncMoney>(nullptr);
  }

  CSSyncMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncMoney& from);
  void MergeFrom(const CSSyncMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSyncMoney";
  }
  protected:
  explicit CSSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSyncMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncMoney) */ {
 public:
  inline SCSyncMoney() : SCSyncMoney(nullptr) {}
  virtual ~SCSyncMoney();

  SCSyncMoney(const SCSyncMoney& from);
  SCSyncMoney(SCSyncMoney&& from) noexcept
    : SCSyncMoney() {
    *this = ::std::move(from);
  }

  inline SCSyncMoney& operator=(const SCSyncMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncMoney& operator=(SCSyncMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncMoney& default_instance();

  static inline const SCSyncMoney* internal_default_instance() {
    return reinterpret_cast<const SCSyncMoney*>(
               &_SCSyncMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SCSyncMoney& a, SCSyncMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncMoney* New() const final {
    return CreateMaybeMessage<SCSyncMoney>(nullptr);
  }

  SCSyncMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncMoney& from);
  void MergeFrom(const SCSyncMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncMoney";
  }
  protected:
  explicit SCSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kScoreFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDeltaFieldNumber = 4,
    kTicketFieldNumber = 5,
    kVipFieldNumber = 6,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delta = 4;
  void clear_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta() const;
  void _internal_set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 5;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip = 6;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class FishTrace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.FishTrace) */ {
 public:
  inline FishTrace() : FishTrace(nullptr) {}
  virtual ~FishTrace();

  FishTrace(const FishTrace& from);
  FishTrace(FishTrace&& from) noexcept
    : FishTrace() {
    *this = ::std::move(from);
  }

  inline FishTrace& operator=(const FishTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline FishTrace& operator=(FishTrace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FishTrace& default_instance();

  static inline const FishTrace* internal_default_instance() {
    return reinterpret_cast<const FishTrace*>(
               &_FishTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FishTrace& a, FishTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(FishTrace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FishTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FishTrace* New() const final {
    return CreateMaybeMessage<FishTrace>(nullptr);
  }

  FishTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FishTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FishTrace& from);
  void MergeFrom(const FishTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FishTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.FishTrace";
  }
  protected:
  explicit FishTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeadsListFieldNumber = 7,
    kFishUidFieldNumber = 1,
    kFishTypeFieldNumber = 2,
    kFishLayerFieldNumber = 3,
    kFishStageFieldNumber = 4,
    kIsAcedFieldNumber = 5,
    kAliveTimeFieldNumber = 6,
    kFishTorpedoIdFieldNumber = 8,
    kFishRoadFieldNumber = 9,
  };
  // repeated int32 beads_list = 7;
  int beads_list_size() const;
  private:
  int _internal_beads_list_size() const;
  public:
  void clear_beads_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beads_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_beads_list() const;
  void _internal_add_beads_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_beads_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 beads_list(int index) const;
  void set_beads_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_beads_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      beads_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_beads_list();

  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_type = 2;
  void clear_fish_type();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_type() const;
  void set_fish_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_type() const;
  void _internal_set_fish_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_layer = 3;
  void clear_fish_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_layer() const;
  void set_fish_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_layer() const;
  void _internal_set_fish_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_stage = 4;
  void clear_fish_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_stage() const;
  void set_fish_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_stage() const;
  void _internal_set_fish_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_aced = 5;
  void clear_is_aced();
  bool is_aced() const;
  void set_is_aced(bool value);
  private:
  bool _internal_is_aced() const;
  void _internal_set_is_aced(bool value);
  public:

  // int32 alive_time = 6;
  void clear_alive_time();
  ::PROTOBUF_NAMESPACE_ID::int32 alive_time() const;
  void set_alive_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alive_time() const;
  void _internal_set_alive_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_torpedoId = 8;
  void clear_fish_torpedoid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_torpedoid() const;
  void set_fish_torpedoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_torpedoid() const;
  void _internal_set_fish_torpedoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_road = 9;
  void clear_fish_road();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road() const;
  void set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_road() const;
  void _internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.FishTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > beads_list_;
  mutable std::atomic<int> _beads_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_stage_;
  bool is_aced_;
  ::PROTOBUF_NAMESPACE_ID::int32 alive_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_torpedoid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCFishTracesList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCFishTracesList) */ {
 public:
  inline SCFishTracesList() : SCFishTracesList(nullptr) {}
  virtual ~SCFishTracesList();

  SCFishTracesList(const SCFishTracesList& from);
  SCFishTracesList(SCFishTracesList&& from) noexcept
    : SCFishTracesList() {
    *this = ::std::move(from);
  }

  inline SCFishTracesList& operator=(const SCFishTracesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFishTracesList& operator=(SCFishTracesList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFishTracesList& default_instance();

  static inline const SCFishTracesList* internal_default_instance() {
    return reinterpret_cast<const SCFishTracesList*>(
               &_SCFishTracesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SCFishTracesList& a, SCFishTracesList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFishTracesList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFishTracesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFishTracesList* New() const final {
    return CreateMaybeMessage<SCFishTracesList>(nullptr);
  }

  SCFishTracesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFishTracesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFishTracesList& from);
  void MergeFrom(const SCFishTracesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFishTracesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCFishTracesList";
  }
  protected:
  explicit SCFishTracesList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTracesFieldNumber = 1,
    kFishRoadFieldNumber = 2,
    kFishArrayFieldNumber = 3,
    kCreateIntervalFieldNumber = 4,
    kIsCalledFieldNumber = 5,
    kAfterTideFirstFieldNumber = 6,
    kCallTypeFieldNumber = 7,
    kMoveDelayFieldNumber = 8,
    kRoadIdxFieldNumber = 9,
    kMoveTFieldNumber = 10,
  };
  // repeated .F4BY.FishTrace fish_traces = 1;
  int fish_traces_size() const;
  private:
  int _internal_fish_traces_size() const;
  public:
  void clear_fish_traces();
  ::F4BY::FishTrace* mutable_fish_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >*
      mutable_fish_traces();
  private:
  const ::F4BY::FishTrace& _internal_fish_traces(int index) const;
  ::F4BY::FishTrace* _internal_add_fish_traces();
  public:
  const ::F4BY::FishTrace& fish_traces(int index) const;
  ::F4BY::FishTrace* add_fish_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >&
      fish_traces() const;

  // int32 fish_road = 2;
  void clear_fish_road();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road() const;
  void set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_road() const;
  void _internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_array = 3;
  void clear_fish_array();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_array() const;
  void set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_array() const;
  void _internal_set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 create_interval = 4;
  void clear_create_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 create_interval() const;
  void set_create_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_interval() const;
  void _internal_set_create_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_called = 5;
  void clear_is_called();
  bool is_called() const;
  void set_is_called(bool value);
  private:
  bool _internal_is_called() const;
  void _internal_set_is_called(bool value);
  public:

  // bool after_tide_first = 6;
  void clear_after_tide_first();
  bool after_tide_first() const;
  void set_after_tide_first(bool value);
  private:
  bool _internal_after_tide_first() const;
  void _internal_set_after_tide_first(bool value);
  public:

  // .F4BY.CallFishType call_type = 7;
  void clear_call_type();
  ::F4BY::CallFishType call_type() const;
  void set_call_type(::F4BY::CallFishType value);
  private:
  ::F4BY::CallFishType _internal_call_type() const;
  void _internal_set_call_type(::F4BY::CallFishType value);
  public:

  // float move_delay = 8;
  void clear_move_delay();
  float move_delay() const;
  void set_move_delay(float value);
  private:
  float _internal_move_delay() const;
  void _internal_set_move_delay(float value);
  public:

  // int32 road_idx = 9;
  void clear_road_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 road_idx() const;
  void set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_idx() const;
  void _internal_set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float move_t = 10;
  void clear_move_t();
  float move_t() const;
  void set_move_t(float value);
  private:
  float _internal_move_t() const;
  void _internal_set_move_t(float value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCFishTracesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace > fish_traces_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_array_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_interval_;
  bool is_called_;
  bool after_tide_first_;
  int call_type_;
  float move_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_idx_;
  float move_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSyncFishReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSyncFishReq) */ {
 public:
  inline CSSyncFishReq() : CSSyncFishReq(nullptr) {}
  virtual ~CSSyncFishReq();

  CSSyncFishReq(const CSSyncFishReq& from);
  CSSyncFishReq(CSSyncFishReq&& from) noexcept
    : CSSyncFishReq() {
    *this = ::std::move(from);
  }

  inline CSSyncFishReq& operator=(const CSSyncFishReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncFishReq& operator=(CSSyncFishReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncFishReq& default_instance();

  static inline const CSSyncFishReq* internal_default_instance() {
    return reinterpret_cast<const CSSyncFishReq*>(
               &_CSSyncFishReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CSSyncFishReq& a, CSSyncFishReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncFishReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncFishReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncFishReq* New() const final {
    return CreateMaybeMessage<CSSyncFishReq>(nullptr);
  }

  CSSyncFishReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncFishReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncFishReq& from);
  void MergeFrom(const CSSyncFishReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncFishReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSyncFishReq";
  }
  protected:
  explicit CSSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSyncFishReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncFishReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncFishReq) */ {
 public:
  inline SCSyncFishReq() : SCSyncFishReq(nullptr) {}
  virtual ~SCSyncFishReq();

  SCSyncFishReq(const SCSyncFishReq& from);
  SCSyncFishReq(SCSyncFishReq&& from) noexcept
    : SCSyncFishReq() {
    *this = ::std::move(from);
  }

  inline SCSyncFishReq& operator=(const SCSyncFishReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncFishReq& operator=(SCSyncFishReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncFishReq& default_instance();

  static inline const SCSyncFishReq* internal_default_instance() {
    return reinterpret_cast<const SCSyncFishReq*>(
               &_SCSyncFishReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SCSyncFishReq& a, SCSyncFishReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncFishReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncFishReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncFishReq* New() const final {
    return CreateMaybeMessage<SCSyncFishReq>(nullptr);
  }

  SCSyncFishReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncFishReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncFishReq& from);
  void MergeFrom(const SCSyncFishReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncFishReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncFishReq";
  }
  protected:
  explicit SCSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqPlayerIdFieldNumber = 1,
  };
  // int32 req_player_id = 1;
  void clear_req_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 req_player_id() const;
  void set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_player_id() const;
  void _internal_set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncFishReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSyncFishRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSyncFishRsp) */ {
 public:
  inline CSSyncFishRsp() : CSSyncFishRsp(nullptr) {}
  virtual ~CSSyncFishRsp();

  CSSyncFishRsp(const CSSyncFishRsp& from);
  CSSyncFishRsp(CSSyncFishRsp&& from) noexcept
    : CSSyncFishRsp() {
    *this = ::std::move(from);
  }

  inline CSSyncFishRsp& operator=(const CSSyncFishRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncFishRsp& operator=(CSSyncFishRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncFishRsp& default_instance();

  static inline const CSSyncFishRsp* internal_default_instance() {
    return reinterpret_cast<const CSSyncFishRsp*>(
               &_CSSyncFishRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CSSyncFishRsp& a, CSSyncFishRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncFishRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncFishRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncFishRsp* New() const final {
    return CreateMaybeMessage<CSSyncFishRsp>(nullptr);
  }

  CSSyncFishRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncFishRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncFishRsp& from);
  void MergeFrom(const CSSyncFishRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncFishRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSyncFishRsp";
  }
  protected:
  explicit CSSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTracesFieldNumber = 1,
    kFishRoadFieldNumber = 2,
    kFishArrayFieldNumber = 3,
    kMoveDelayFieldNumber = 4,
    kRoadIdxFieldNumber = 5,
    kMoveTFieldNumber = 6,
    kFinishFieldNumber = 7,
    kReqPlayerIdFieldNumber = 8,
  };
  // repeated .F4BY.FishTrace fish_traces = 1;
  int fish_traces_size() const;
  private:
  int _internal_fish_traces_size() const;
  public:
  void clear_fish_traces();
  ::F4BY::FishTrace* mutable_fish_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >*
      mutable_fish_traces();
  private:
  const ::F4BY::FishTrace& _internal_fish_traces(int index) const;
  ::F4BY::FishTrace* _internal_add_fish_traces();
  public:
  const ::F4BY::FishTrace& fish_traces(int index) const;
  ::F4BY::FishTrace* add_fish_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >&
      fish_traces() const;

  // int32 fish_road = 2;
  void clear_fish_road();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road() const;
  void set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_road() const;
  void _internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_array = 3;
  void clear_fish_array();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_array() const;
  void set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_array() const;
  void _internal_set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float move_delay = 4;
  void clear_move_delay();
  float move_delay() const;
  void set_move_delay(float value);
  private:
  float _internal_move_delay() const;
  void _internal_set_move_delay(float value);
  public:

  // int32 road_idx = 5;
  void clear_road_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 road_idx() const;
  void set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_idx() const;
  void _internal_set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float move_t = 6;
  void clear_move_t();
  float move_t() const;
  void set_move_t(float value);
  private:
  float _internal_move_t() const;
  void _internal_set_move_t(float value);
  public:

  // bool finish = 7;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // int32 req_player_id = 8;
  void clear_req_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 req_player_id() const;
  void set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_player_id() const;
  void _internal_set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSyncFishRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace > fish_traces_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_array_;
  float move_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_idx_;
  float move_t_;
  bool finish_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncFishRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncFishRsp) */ {
 public:
  inline SCSyncFishRsp() : SCSyncFishRsp(nullptr) {}
  virtual ~SCSyncFishRsp();

  SCSyncFishRsp(const SCSyncFishRsp& from);
  SCSyncFishRsp(SCSyncFishRsp&& from) noexcept
    : SCSyncFishRsp() {
    *this = ::std::move(from);
  }

  inline SCSyncFishRsp& operator=(const SCSyncFishRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncFishRsp& operator=(SCSyncFishRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncFishRsp& default_instance();

  static inline const SCSyncFishRsp* internal_default_instance() {
    return reinterpret_cast<const SCSyncFishRsp*>(
               &_SCSyncFishRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SCSyncFishRsp& a, SCSyncFishRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncFishRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncFishRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncFishRsp* New() const final {
    return CreateMaybeMessage<SCSyncFishRsp>(nullptr);
  }

  SCSyncFishRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncFishRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncFishRsp& from);
  void MergeFrom(const SCSyncFishRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncFishRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncFishRsp";
  }
  protected:
  explicit SCSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTracesFieldNumber = 1,
    kFishRoadFieldNumber = 2,
    kFishArrayFieldNumber = 3,
    kMoveDelayFieldNumber = 4,
    kRoadIdxFieldNumber = 5,
    kMoveTFieldNumber = 6,
    kCreateIntervalFieldNumber = 7,
    kIsCalledFieldNumber = 8,
    kCallTypeFieldNumber = 9,
  };
  // repeated .F4BY.FishTrace fish_traces = 1;
  int fish_traces_size() const;
  private:
  int _internal_fish_traces_size() const;
  public:
  void clear_fish_traces();
  ::F4BY::FishTrace* mutable_fish_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >*
      mutable_fish_traces();
  private:
  const ::F4BY::FishTrace& _internal_fish_traces(int index) const;
  ::F4BY::FishTrace* _internal_add_fish_traces();
  public:
  const ::F4BY::FishTrace& fish_traces(int index) const;
  ::F4BY::FishTrace* add_fish_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >&
      fish_traces() const;

  // int32 fish_road = 2;
  void clear_fish_road();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road() const;
  void set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_road() const;
  void _internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_array = 3;
  void clear_fish_array();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_array() const;
  void set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_array() const;
  void _internal_set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float move_delay = 4;
  void clear_move_delay();
  float move_delay() const;
  void set_move_delay(float value);
  private:
  float _internal_move_delay() const;
  void _internal_set_move_delay(float value);
  public:

  // int32 road_idx = 5;
  void clear_road_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 road_idx() const;
  void set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_idx() const;
  void _internal_set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float move_t = 6;
  void clear_move_t();
  float move_t() const;
  void set_move_t(float value);
  private:
  float _internal_move_t() const;
  void _internal_set_move_t(float value);
  public:

  // float create_interval = 7;
  void clear_create_interval();
  float create_interval() const;
  void set_create_interval(float value);
  private:
  float _internal_create_interval() const;
  void _internal_set_create_interval(float value);
  public:

  // bool is_called = 8;
  void clear_is_called();
  bool is_called() const;
  void set_is_called(bool value);
  private:
  bool _internal_is_called() const;
  void _internal_set_is_called(bool value);
  public:

  // .F4BY.CallFishType call_type = 9;
  void clear_call_type();
  ::F4BY::CallFishType call_type() const;
  void set_call_type(::F4BY::CallFishType value);
  private:
  ::F4BY::CallFishType _internal_call_type() const;
  void _internal_set_call_type(::F4BY::CallFishType value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncFishRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace > fish_traces_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_road_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_array_;
  float move_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_idx_;
  float move_t_;
  float create_interval_;
  bool is_called_;
  int call_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCChangeScene PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCChangeScene) */ {
 public:
  inline SCChangeScene() : SCChangeScene(nullptr) {}
  virtual ~SCChangeScene();

  SCChangeScene(const SCChangeScene& from);
  SCChangeScene(SCChangeScene&& from) noexcept
    : SCChangeScene() {
    *this = ::std::move(from);
  }

  inline SCChangeScene& operator=(const SCChangeScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChangeScene& operator=(SCChangeScene&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChangeScene& default_instance();

  static inline const SCChangeScene* internal_default_instance() {
    return reinterpret_cast<const SCChangeScene*>(
               &_SCChangeScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SCChangeScene& a, SCChangeScene& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChangeScene* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChangeScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChangeScene* New() const final {
    return CreateMaybeMessage<SCChangeScene>(nullptr);
  }

  SCChangeScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChangeScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChangeScene& from);
  void MergeFrom(const SCChangeScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChangeScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCChangeScene";
  }
  protected:
  explicit SCChangeScene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIndexFieldNumber = 1,
  };
  // int32 scene_index = 1;
  void clear_scene_index();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index() const;
  void set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_index() const;
  void _internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCChangeScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSFishOutsideScreen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSFishOutsideScreen) */ {
 public:
  inline CSFishOutsideScreen() : CSFishOutsideScreen(nullptr) {}
  virtual ~CSFishOutsideScreen();

  CSFishOutsideScreen(const CSFishOutsideScreen& from);
  CSFishOutsideScreen(CSFishOutsideScreen&& from) noexcept
    : CSFishOutsideScreen() {
    *this = ::std::move(from);
  }

  inline CSFishOutsideScreen& operator=(const CSFishOutsideScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFishOutsideScreen& operator=(CSFishOutsideScreen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFishOutsideScreen& default_instance();

  static inline const CSFishOutsideScreen* internal_default_instance() {
    return reinterpret_cast<const CSFishOutsideScreen*>(
               &_CSFishOutsideScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CSFishOutsideScreen& a, CSFishOutsideScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFishOutsideScreen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFishOutsideScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFishOutsideScreen* New() const final {
    return CreateMaybeMessage<CSFishOutsideScreen>(nullptr);
  }

  CSFishOutsideScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFishOutsideScreen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFishOutsideScreen& from);
  void MergeFrom(const CSFishOutsideScreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFishOutsideScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSFishOutsideScreen";
  }
  protected:
  explicit CSFishOutsideScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSFishOutsideScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLockFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLockFish) */ {
 public:
  inline CSLockFish() : CSLockFish(nullptr) {}
  virtual ~CSLockFish();

  CSLockFish(const CSLockFish& from);
  CSLockFish(CSLockFish&& from) noexcept
    : CSLockFish() {
    *this = ::std::move(from);
  }

  inline CSLockFish& operator=(const CSLockFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLockFish& operator=(CSLockFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLockFish& default_instance();

  static inline const CSLockFish* internal_default_instance() {
    return reinterpret_cast<const CSLockFish*>(
               &_CSLockFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CSLockFish& a, CSLockFish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLockFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLockFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLockFish* New() const final {
    return CreateMaybeMessage<CSLockFish>(nullptr);
  }

  CSLockFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLockFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLockFish& from);
  void MergeFrom(const CSLockFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLockFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLockFish";
  }
  protected:
  explicit CSLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
    kIsOpenFieldNumber = 2,
    kChairIdxFieldNumber = 3,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_open = 2;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSLockFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  bool is_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLockFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLockFish) */ {
 public:
  inline SCLockFish() : SCLockFish(nullptr) {}
  virtual ~SCLockFish();

  SCLockFish(const SCLockFish& from);
  SCLockFish(SCLockFish&& from) noexcept
    : SCLockFish() {
    *this = ::std::move(from);
  }

  inline SCLockFish& operator=(const SCLockFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLockFish& operator=(SCLockFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLockFish& default_instance();

  static inline const SCLockFish* internal_default_instance() {
    return reinterpret_cast<const SCLockFish*>(
               &_SCLockFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SCLockFish& a, SCLockFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLockFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLockFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLockFish* New() const final {
    return CreateMaybeMessage<SCLockFish>(nullptr);
  }

  SCLockFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLockFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLockFish& from);
  void MergeFrom(const SCLockFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLockFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLockFish";
  }
  protected:
  explicit SCLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kIsOpenFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_open = 3;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCLockFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSCrazySkill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSCrazySkill) */ {
 public:
  inline CSCrazySkill() : CSCrazySkill(nullptr) {}
  virtual ~CSCrazySkill();

  CSCrazySkill(const CSCrazySkill& from);
  CSCrazySkill(CSCrazySkill&& from) noexcept
    : CSCrazySkill() {
    *this = ::std::move(from);
  }

  inline CSCrazySkill& operator=(const CSCrazySkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSCrazySkill& operator=(CSCrazySkill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSCrazySkill& default_instance();

  static inline const CSCrazySkill* internal_default_instance() {
    return reinterpret_cast<const CSCrazySkill*>(
               &_CSCrazySkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CSCrazySkill& a, CSCrazySkill& b) {
    a.Swap(&b);
  }
  inline void Swap(CSCrazySkill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSCrazySkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSCrazySkill* New() const final {
    return CreateMaybeMessage<CSCrazySkill>(nullptr);
  }

  CSCrazySkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSCrazySkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSCrazySkill& from);
  void MergeFrom(const CSCrazySkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSCrazySkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSCrazySkill";
  }
  protected:
  explicit CSCrazySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOpenFieldNumber = 1,
  };
  // bool is_open = 1;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSCrazySkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCCrazySkill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCCrazySkill) */ {
 public:
  inline SCCrazySkill() : SCCrazySkill(nullptr) {}
  virtual ~SCCrazySkill();

  SCCrazySkill(const SCCrazySkill& from);
  SCCrazySkill(SCCrazySkill&& from) noexcept
    : SCCrazySkill() {
    *this = ::std::move(from);
  }

  inline SCCrazySkill& operator=(const SCCrazySkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCCrazySkill& operator=(SCCrazySkill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCCrazySkill& default_instance();

  static inline const SCCrazySkill* internal_default_instance() {
    return reinterpret_cast<const SCCrazySkill*>(
               &_SCCrazySkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SCCrazySkill& a, SCCrazySkill& b) {
    a.Swap(&b);
  }
  inline void Swap(SCCrazySkill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCCrazySkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCCrazySkill* New() const final {
    return CreateMaybeMessage<SCCrazySkill>(nullptr);
  }

  SCCrazySkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCCrazySkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCCrazySkill& from);
  void MergeFrom(const SCCrazySkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCCrazySkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCCrazySkill";
  }
  protected:
  explicit SCCrazySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kIsOpenFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_open = 2;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCCrazySkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTrebleSkill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTrebleSkill) */ {
 public:
  inline CSTrebleSkill() : CSTrebleSkill(nullptr) {}
  virtual ~CSTrebleSkill();

  CSTrebleSkill(const CSTrebleSkill& from);
  CSTrebleSkill(CSTrebleSkill&& from) noexcept
    : CSTrebleSkill() {
    *this = ::std::move(from);
  }

  inline CSTrebleSkill& operator=(const CSTrebleSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTrebleSkill& operator=(CSTrebleSkill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTrebleSkill& default_instance();

  static inline const CSTrebleSkill* internal_default_instance() {
    return reinterpret_cast<const CSTrebleSkill*>(
               &_CSTrebleSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CSTrebleSkill& a, CSTrebleSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTrebleSkill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTrebleSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTrebleSkill* New() const final {
    return CreateMaybeMessage<CSTrebleSkill>(nullptr);
  }

  CSTrebleSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTrebleSkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTrebleSkill& from);
  void MergeFrom(const CSTrebleSkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTrebleSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTrebleSkill";
  }
  protected:
  explicit CSTrebleSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOpenFieldNumber = 1,
  };
  // bool is_open = 1;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSTrebleSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTrebleSkill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTrebleSkill) */ {
 public:
  inline SCTrebleSkill() : SCTrebleSkill(nullptr) {}
  virtual ~SCTrebleSkill();

  SCTrebleSkill(const SCTrebleSkill& from);
  SCTrebleSkill(SCTrebleSkill&& from) noexcept
    : SCTrebleSkill() {
    *this = ::std::move(from);
  }

  inline SCTrebleSkill& operator=(const SCTrebleSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTrebleSkill& operator=(SCTrebleSkill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTrebleSkill& default_instance();

  static inline const SCTrebleSkill* internal_default_instance() {
    return reinterpret_cast<const SCTrebleSkill*>(
               &_SCTrebleSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SCTrebleSkill& a, SCTrebleSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTrebleSkill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTrebleSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTrebleSkill* New() const final {
    return CreateMaybeMessage<SCTrebleSkill>(nullptr);
  }

  SCTrebleSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTrebleSkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTrebleSkill& from);
  void MergeFrom(const SCTrebleSkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTrebleSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTrebleSkill";
  }
  protected:
  explicit SCTrebleSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kIsOpenFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_open = 2;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTrebleSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserRunBackground PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserRunBackground) */ {
 public:
  inline CSUserRunBackground() : CSUserRunBackground(nullptr) {}
  virtual ~CSUserRunBackground();

  CSUserRunBackground(const CSUserRunBackground& from);
  CSUserRunBackground(CSUserRunBackground&& from) noexcept
    : CSUserRunBackground() {
    *this = ::std::move(from);
  }

  inline CSUserRunBackground& operator=(const CSUserRunBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserRunBackground& operator=(CSUserRunBackground&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserRunBackground& default_instance();

  static inline const CSUserRunBackground* internal_default_instance() {
    return reinterpret_cast<const CSUserRunBackground*>(
               &_CSUserRunBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CSUserRunBackground& a, CSUserRunBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserRunBackground* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserRunBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserRunBackground* New() const final {
    return CreateMaybeMessage<CSUserRunBackground>(nullptr);
  }

  CSUserRunBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserRunBackground>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserRunBackground& from);
  void MergeFrom(const CSUserRunBackground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserRunBackground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserRunBackground";
  }
  protected:
  explicit CSUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundFieldNumber = 1,
  };
  // bool background = 1;
  void clear_background();
  bool background() const;
  void set_background(bool value);
  private:
  bool _internal_background() const;
  void _internal_set_background(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserRunBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool background_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserRunBackground PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserRunBackground) */ {
 public:
  inline SCUserRunBackground() : SCUserRunBackground(nullptr) {}
  virtual ~SCUserRunBackground();

  SCUserRunBackground(const SCUserRunBackground& from);
  SCUserRunBackground(SCUserRunBackground&& from) noexcept
    : SCUserRunBackground() {
    *this = ::std::move(from);
  }

  inline SCUserRunBackground& operator=(const SCUserRunBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserRunBackground& operator=(SCUserRunBackground&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserRunBackground& default_instance();

  static inline const SCUserRunBackground* internal_default_instance() {
    return reinterpret_cast<const SCUserRunBackground*>(
               &_SCUserRunBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SCUserRunBackground& a, SCUserRunBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserRunBackground* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserRunBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserRunBackground* New() const final {
    return CreateMaybeMessage<SCUserRunBackground>(nullptr);
  }

  SCUserRunBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserRunBackground>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserRunBackground& from);
  void MergeFrom(const SCUserRunBackground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserRunBackground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserRunBackground";
  }
  protected:
  explicit SCUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kBackgroundFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool background = 2;
  void clear_background();
  bool background() const;
  void set_background(bool value);
  private:
  bool _internal_background() const;
  void _internal_set_background(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserRunBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool background_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSHeartBeat) */ {
 public:
  inline CSHeartBeat() : CSHeartBeat(nullptr) {}
  virtual ~CSHeartBeat();

  CSHeartBeat(const CSHeartBeat& from);
  CSHeartBeat(CSHeartBeat&& from) noexcept
    : CSHeartBeat() {
    *this = ::std::move(from);
  }

  inline CSHeartBeat& operator=(const CSHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHeartBeat& operator=(CSHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHeartBeat& default_instance();

  static inline const CSHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CSHeartBeat*>(
               &_CSHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CSHeartBeat& a, CSHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHeartBeat* New() const final {
    return CreateMaybeMessage<CSHeartBeat>(nullptr);
  }

  CSHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHeartBeat& from);
  void MergeFrom(const CSHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSHeartBeat";
  }
  protected:
  explicit CSHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCHeartBeat) */ {
 public:
  inline SCHeartBeat() : SCHeartBeat(nullptr) {}
  virtual ~SCHeartBeat();

  SCHeartBeat(const SCHeartBeat& from);
  SCHeartBeat(SCHeartBeat&& from) noexcept
    : SCHeartBeat() {
    *this = ::std::move(from);
  }

  inline SCHeartBeat& operator=(const SCHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHeartBeat& operator=(SCHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHeartBeat& default_instance();

  static inline const SCHeartBeat* internal_default_instance() {
    return reinterpret_cast<const SCHeartBeat*>(
               &_SCHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SCHeartBeat& a, SCHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHeartBeat* New() const final {
    return CreateMaybeMessage<SCHeartBeat>(nullptr);
  }

  SCHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHeartBeat& from);
  void MergeFrom(const SCHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCHeartBeat";
  }
  protected:
  explicit SCHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.SCHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class GunSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.GunSpecEffect) */ {
 public:
  inline GunSpecEffect() : GunSpecEffect(nullptr) {}
  virtual ~GunSpecEffect();

  GunSpecEffect(const GunSpecEffect& from);
  GunSpecEffect(GunSpecEffect&& from) noexcept
    : GunSpecEffect() {
    *this = ::std::move(from);
  }

  inline GunSpecEffect& operator=(const GunSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunSpecEffect& operator=(GunSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunSpecEffect& default_instance();

  static inline const GunSpecEffect* internal_default_instance() {
    return reinterpret_cast<const GunSpecEffect*>(
               &_GunSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GunSpecEffect& a, GunSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(GunSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunSpecEffect* New() const final {
    return CreateMaybeMessage<GunSpecEffect>(nullptr);
  }

  GunSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunSpecEffect& from);
  void MergeFrom(const GunSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.GunSpecEffect";
  }
  protected:
  explicit GunSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioLimitFieldNumber = 1,
    kHitChangeRateFieldNumber = 2,
    kMoneyChangeRateFieldNumber = 3,
    kViolenceRateFieldNumber = 4,
    kSpeedRateFieldNumber = 5,
    kAdvancedFieldNumber = 6,
    kDoubleTagFieldNumber = 7,
  };
  // int32 ratioLimit = 1;
  void clear_ratiolimit();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit() const;
  void set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolimit() const;
  void _internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hitChangeRate = 2;
  void clear_hitchangerate();
  float hitchangerate() const;
  void set_hitchangerate(float value);
  private:
  float _internal_hitchangerate() const;
  void _internal_set_hitchangerate(float value);
  public:

  // float moneyChangeRate = 3;
  void clear_moneychangerate();
  float moneychangerate() const;
  void set_moneychangerate(float value);
  private:
  float _internal_moneychangerate() const;
  void _internal_set_moneychangerate(float value);
  public:

  // float violenceRate = 4;
  void clear_violencerate();
  float violencerate() const;
  void set_violencerate(float value);
  private:
  float _internal_violencerate() const;
  void _internal_set_violencerate(float value);
  public:

  // float speedRate = 5;
  void clear_speedrate();
  float speedrate() const;
  void set_speedrate(float value);
  private:
  float _internal_speedrate() const;
  void _internal_set_speedrate(float value);
  public:

  // bool advanced = 6;
  void clear_advanced();
  bool advanced() const;
  void set_advanced(bool value);
  private:
  bool _internal_advanced() const;
  void _internal_set_advanced(bool value);
  public:

  // bool double_tag = 7;
  void clear_double_tag();
  bool double_tag() const;
  void set_double_tag(bool value);
  private:
  bool _internal_double_tag() const;
  void _internal_set_double_tag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.GunSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit_;
  float hitchangerate_;
  float moneychangerate_;
  float violencerate_;
  float speedrate_;
  bool advanced_;
  bool double_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class WingsSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.WingsSpecEffect) */ {
 public:
  inline WingsSpecEffect() : WingsSpecEffect(nullptr) {}
  virtual ~WingsSpecEffect();

  WingsSpecEffect(const WingsSpecEffect& from);
  WingsSpecEffect(WingsSpecEffect&& from) noexcept
    : WingsSpecEffect() {
    *this = ::std::move(from);
  }

  inline WingsSpecEffect& operator=(const WingsSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline WingsSpecEffect& operator=(WingsSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WingsSpecEffect& default_instance();

  static inline const WingsSpecEffect* internal_default_instance() {
    return reinterpret_cast<const WingsSpecEffect*>(
               &_WingsSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(WingsSpecEffect& a, WingsSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(WingsSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WingsSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WingsSpecEffect* New() const final {
    return CreateMaybeMessage<WingsSpecEffect>(nullptr);
  }

  WingsSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WingsSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WingsSpecEffect& from);
  void MergeFrom(const WingsSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WingsSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.WingsSpecEffect";
  }
  protected:
  explicit WingsSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedRateFieldNumber = 1,
    kRatioLimitFieldNumber = 2,
    kHitChangeRateFieldNumber = 3,
    kMoneyChangeRateFieldNumber = 4,
    kAdvancedFieldNumber = 5,
    kDoubleTagFieldNumber = 6,
  };
  // float speedRate = 1;
  void clear_speedrate();
  float speedrate() const;
  void set_speedrate(float value);
  private:
  float _internal_speedrate() const;
  void _internal_set_speedrate(float value);
  public:

  // int32 ratioLimit = 2;
  void clear_ratiolimit();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit() const;
  void set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolimit() const;
  void _internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hitChangeRate = 3;
  void clear_hitchangerate();
  float hitchangerate() const;
  void set_hitchangerate(float value);
  private:
  float _internal_hitchangerate() const;
  void _internal_set_hitchangerate(float value);
  public:

  // float moneyChangeRate = 4;
  void clear_moneychangerate();
  float moneychangerate() const;
  void set_moneychangerate(float value);
  private:
  float _internal_moneychangerate() const;
  void _internal_set_moneychangerate(float value);
  public:

  // bool advanced = 5;
  void clear_advanced();
  bool advanced() const;
  void set_advanced(bool value);
  private:
  bool _internal_advanced() const;
  void _internal_set_advanced(bool value);
  public:

  // bool double_tag = 6;
  void clear_double_tag();
  bool double_tag() const;
  void set_double_tag(bool value);
  private:
  bool _internal_double_tag() const;
  void _internal_set_double_tag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.WingsSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float speedrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit_;
  float hitchangerate_;
  float moneychangerate_;
  bool advanced_;
  bool double_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class WingsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.WingsInfo) */ {
 public:
  inline WingsInfo() : WingsInfo(nullptr) {}
  virtual ~WingsInfo();

  WingsInfo(const WingsInfo& from);
  WingsInfo(WingsInfo&& from) noexcept
    : WingsInfo() {
    *this = ::std::move(from);
  }

  inline WingsInfo& operator=(const WingsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WingsInfo& operator=(WingsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WingsInfo& default_instance();

  static inline const WingsInfo* internal_default_instance() {
    return reinterpret_cast<const WingsInfo*>(
               &_WingsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(WingsInfo& a, WingsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WingsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WingsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WingsInfo* New() const final {
    return CreateMaybeMessage<WingsInfo>(nullptr);
  }

  WingsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WingsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WingsInfo& from);
  void MergeFrom(const WingsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WingsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.WingsInfo";
  }
  protected:
  explicit WingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsSpecEffectFieldNumber = 3,
    kWingsIdFieldNumber = 1,
    kReceiveTypeFieldNumber = 4,
    kActivityIdFieldNumber = 5,
    kEnableFieldNumber = 2,
    kNewEnableFieldNumber = 7,
    kDoubleTagFieldNumber = 8,
    kPriceFieldNumber = 6,
  };
  // .F4BY.WingsSpecEffect wings_spec_effect = 3;
  bool has_wings_spec_effect() const;
  private:
  bool _internal_has_wings_spec_effect() const;
  public:
  void clear_wings_spec_effect();
  const ::F4BY::WingsSpecEffect& wings_spec_effect() const;
  ::F4BY::WingsSpecEffect* release_wings_spec_effect();
  ::F4BY::WingsSpecEffect* mutable_wings_spec_effect();
  void set_allocated_wings_spec_effect(::F4BY::WingsSpecEffect* wings_spec_effect);
  private:
  const ::F4BY::WingsSpecEffect& _internal_wings_spec_effect() const;
  ::F4BY::WingsSpecEffect* _internal_mutable_wings_spec_effect();
  public:
  void unsafe_arena_set_allocated_wings_spec_effect(
      ::F4BY::WingsSpecEffect* wings_spec_effect);
  ::F4BY::WingsSpecEffect* unsafe_arena_release_wings_spec_effect();

  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_type = 4;
  void clear_receive_type();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_type() const;
  void set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_type() const;
  void _internal_set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activity_id = 5;
  void clear_activity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id() const;
  void set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activity_id() const;
  void _internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool new_enable = 7;
  void clear_new_enable();
  bool new_enable() const;
  void set_new_enable(bool value);
  private:
  bool _internal_new_enable() const;
  void _internal_set_new_enable(bool value);
  public:

  // bool double_tag = 8;
  void clear_double_tag();
  bool double_tag() const;
  void set_double_tag(bool value);
  private:
  bool _internal_double_tag() const;
  void _internal_set_double_tag(bool value);
  public:

  // int32 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.WingsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::WingsSpecEffect* wings_spec_effect_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id_;
  bool enable_;
  bool new_enable_;
  bool double_tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class GunInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.GunInfo) */ {
 public:
  inline GunInfo() : GunInfo(nullptr) {}
  virtual ~GunInfo();

  GunInfo(const GunInfo& from);
  GunInfo(GunInfo&& from) noexcept
    : GunInfo() {
    *this = ::std::move(from);
  }

  inline GunInfo& operator=(const GunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunInfo& operator=(GunInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunInfo& default_instance();

  static inline const GunInfo* internal_default_instance() {
    return reinterpret_cast<const GunInfo*>(
               &_GunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GunInfo& a, GunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GunInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunInfo* New() const final {
    return CreateMaybeMessage<GunInfo>(nullptr);
  }

  GunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunInfo& from);
  void MergeFrom(const GunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.GunInfo";
  }
  protected:
  explicit GunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioListFieldNumber = 16,
    kGunSpecEffectFieldNumber = 11,
    kGunLevelFieldNumber = 1,
    kRatioMinFieldNumber = 2,
    kRatioMaxFieldNumber = 3,
    kEnableFieldNumber = 4,
    kNewEnableFieldNumber = 5,
    kIsVipFieldNumber = 6,
    kIsMemberFieldNumber = 8,
    kVipLimitFieldNumber = 7,
    kMemberSecFieldNumber = 9,
    kExtraDataFieldNumber = 10,
    kPriceFieldNumber = 12,
    kAttackSpeedFieldNumber = 13,
    kRageFieldNumber = 14,
    kActivityIdFieldNumber = 15,
  };
  // repeated int32 ratio_list = 16;
  int ratio_list_size() const;
  private:
  int _internal_ratio_list_size() const;
  public:
  void clear_ratio_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratio_list() const;
  void _internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratio_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_list(int index) const;
  void set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratio_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratio_list();

  // .F4BY.GunSpecEffect gunSpecEffect = 11;
  bool has_gunspeceffect() const;
  private:
  bool _internal_has_gunspeceffect() const;
  public:
  void clear_gunspeceffect();
  const ::F4BY::GunSpecEffect& gunspeceffect() const;
  ::F4BY::GunSpecEffect* release_gunspeceffect();
  ::F4BY::GunSpecEffect* mutable_gunspeceffect();
  void set_allocated_gunspeceffect(::F4BY::GunSpecEffect* gunspeceffect);
  private:
  const ::F4BY::GunSpecEffect& _internal_gunspeceffect() const;
  ::F4BY::GunSpecEffect* _internal_mutable_gunspeceffect();
  public:
  void unsafe_arena_set_allocated_gunspeceffect(
      ::F4BY::GunSpecEffect* gunspeceffect);
  ::F4BY::GunSpecEffect* unsafe_arena_release_gunspeceffect();

  // int32 gun_level = 1;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio_min = 2;
  void clear_ratio_min();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_min() const;
  void set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_min() const;
  void _internal_set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio_max = 3;
  void clear_ratio_max();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_max() const;
  void set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_max() const;
  void _internal_set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 4;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool new_enable = 5;
  void clear_new_enable();
  bool new_enable() const;
  void set_new_enable(bool value);
  private:
  bool _internal_new_enable() const;
  void _internal_set_new_enable(bool value);
  public:

  // bool is_vip = 6;
  void clear_is_vip();
  bool is_vip() const;
  void set_is_vip(bool value);
  private:
  bool _internal_is_vip() const;
  void _internal_set_is_vip(bool value);
  public:

  // bool is_member = 8;
  void clear_is_member();
  bool is_member() const;
  void set_is_member(bool value);
  private:
  bool _internal_is_member() const;
  void _internal_set_is_member(bool value);
  public:

  // int32 vip_limit = 7;
  void clear_vip_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_limit() const;
  void set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_limit() const;
  void _internal_set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 member_sec = 9;
  void clear_member_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 member_sec() const;
  void set_member_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_member_sec() const;
  void _internal_set_member_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extra_data = 10;
  void clear_extra_data();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_data() const;
  void set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_data() const;
  void _internal_set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 12;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float attack_speed = 13;
  void clear_attack_speed();
  float attack_speed() const;
  void set_attack_speed(float value);
  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);
  public:

  // float rage = 14;
  void clear_rage();
  float rage() const;
  void set_rage(float value);
  private:
  float _internal_rage() const;
  void _internal_set_rage(float value);
  public:

  // int32 activity_id = 15;
  void clear_activity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id() const;
  void set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activity_id() const;
  void _internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.GunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratio_list_;
  mutable std::atomic<int> _ratio_list_cached_byte_size_;
  ::F4BY::GunSpecEffect* gunspeceffect_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_max_;
  bool enable_;
  bool new_enable_;
  bool is_vip_;
  bool is_member_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 member_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  float attack_speed_;
  float rage_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class VipInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.VipInfo) */ {
 public:
  inline VipInfo() : VipInfo(nullptr) {}
  virtual ~VipInfo();

  VipInfo(const VipInfo& from);
  VipInfo(VipInfo&& from) noexcept
    : VipInfo() {
    *this = ::std::move(from);
  }

  inline VipInfo& operator=(const VipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VipInfo& operator=(VipInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VipInfo& default_instance();

  static inline const VipInfo* internal_default_instance() {
    return reinterpret_cast<const VipInfo*>(
               &_VipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(VipInfo& a, VipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VipInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VipInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VipInfo* New() const final {
    return CreateMaybeMessage<VipInfo>(nullptr);
  }

  VipInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VipInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VipInfo& from);
  void MergeFrom(const VipInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VipInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.VipInfo";
  }
  protected:
  explicit VipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldVipFieldNumber = 1,
    kCurVipFieldNumber = 2,
  };
  // int32 old_vip = 1;
  void clear_old_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 old_vip() const;
  void set_old_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_old_vip() const;
  void _internal_set_old_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_vip = 2;
  void clear_cur_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_vip() const;
  void set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_vip() const;
  void _internal_set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.VipInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class PropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.PropInfo) */ {
 public:
  inline PropInfo() : PropInfo(nullptr) {}
  virtual ~PropInfo();

  PropInfo(const PropInfo& from);
  PropInfo(PropInfo&& from) noexcept
    : PropInfo() {
    *this = ::std::move(from);
  }

  inline PropInfo& operator=(const PropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropInfo& operator=(PropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropInfo& default_instance();

  static inline const PropInfo* internal_default_instance() {
    return reinterpret_cast<const PropInfo*>(
               &_PropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(PropInfo& a, PropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropInfo* New() const final {
    return CreateMaybeMessage<PropInfo>(nullptr);
  }

  PropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropInfo& from);
  void MergeFrom(const PropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.PropInfo";
  }
  protected:
  explicit PropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // .F4BY.Object prop = 2;
  bool has_prop() const;
  private:
  bool _internal_has_prop() const;
  public:
  void clear_prop();
  const ::F4BY::Object& prop() const;
  ::F4BY::Object* release_prop();
  ::F4BY::Object* mutable_prop();
  void set_allocated_prop(::F4BY::Object* prop);
  private:
  const ::F4BY::Object& _internal_prop() const;
  ::F4BY::Object* _internal_mutable_prop();
  public:
  void unsafe_arena_set_allocated_prop(
      ::F4BY::Object* prop);
  ::F4BY::Object* unsafe_arena_release_prop();

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.PropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Object* prop_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserInfoNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserInfoNotify) */ {
 public:
  inline CSUserInfoNotify() : CSUserInfoNotify(nullptr) {}
  virtual ~CSUserInfoNotify();

  CSUserInfoNotify(const CSUserInfoNotify& from);
  CSUserInfoNotify(CSUserInfoNotify&& from) noexcept
    : CSUserInfoNotify() {
    *this = ::std::move(from);
  }

  inline CSUserInfoNotify& operator=(const CSUserInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserInfoNotify& operator=(CSUserInfoNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserInfoNotify& default_instance();

  static inline const CSUserInfoNotify* internal_default_instance() {
    return reinterpret_cast<const CSUserInfoNotify*>(
               &_CSUserInfoNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CSUserInfoNotify& a, CSUserInfoNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserInfoNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserInfoNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserInfoNotify* New() const final {
    return CreateMaybeMessage<CSUserInfoNotify>(nullptr);
  }

  CSUserInfoNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserInfoNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserInfoNotify& from);
  void MergeFrom(const CSUserInfoNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserInfoNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserInfoNotify";
  }
  protected:
  explicit CSUserInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastFieldNumber = 1,
  };
  // bool broadcast = 1;
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserInfoNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool broadcast_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserInfoNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserInfoNotify) */ {
 public:
  inline SCUserInfoNotify() : SCUserInfoNotify(nullptr) {}
  virtual ~SCUserInfoNotify();

  SCUserInfoNotify(const SCUserInfoNotify& from);
  SCUserInfoNotify(SCUserInfoNotify&& from) noexcept
    : SCUserInfoNotify() {
    *this = ::std::move(from);
  }

  inline SCUserInfoNotify& operator=(const SCUserInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserInfoNotify& operator=(SCUserInfoNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserInfoNotify& default_instance();

  static inline const SCUserInfoNotify* internal_default_instance() {
    return reinterpret_cast<const SCUserInfoNotify*>(
               &_SCUserInfoNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SCUserInfoNotify& a, SCUserInfoNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserInfoNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserInfoNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserInfoNotify* New() const final {
    return CreateMaybeMessage<SCUserInfoNotify>(nullptr);
  }

  SCUserInfoNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserInfoNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserInfoNotify& from);
  void MergeFrom(const SCUserInfoNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserInfoNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserInfoNotify";
  }
  protected:
  explicit SCUserInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunInfoFieldNumber = 2,
    kWingsInfoFieldNumber = 3,
    kPropInfoFieldNumber = 5,
    kVipInfoFieldNumber = 4,
    kChairIdxFieldNumber = 1,
    kLastGunLevelFieldNumber = 6,
    kLastRatioFieldNumber = 7,
    kLastWingsPropIdFieldNumber = 8,
  };
  // repeated .F4BY.GunInfo gun_info = 2;
  int gun_info_size() const;
  private:
  int _internal_gun_info_size() const;
  public:
  void clear_gun_info();
  ::F4BY::GunInfo* mutable_gun_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >*
      mutable_gun_info();
  private:
  const ::F4BY::GunInfo& _internal_gun_info(int index) const;
  ::F4BY::GunInfo* _internal_add_gun_info();
  public:
  const ::F4BY::GunInfo& gun_info(int index) const;
  ::F4BY::GunInfo* add_gun_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >&
      gun_info() const;

  // repeated .F4BY.WingsInfo wings_info = 3;
  int wings_info_size() const;
  private:
  int _internal_wings_info_size() const;
  public:
  void clear_wings_info();
  ::F4BY::WingsInfo* mutable_wings_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::WingsInfo >*
      mutable_wings_info();
  private:
  const ::F4BY::WingsInfo& _internal_wings_info(int index) const;
  ::F4BY::WingsInfo* _internal_add_wings_info();
  public:
  const ::F4BY::WingsInfo& wings_info(int index) const;
  ::F4BY::WingsInfo* add_wings_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::WingsInfo >&
      wings_info() const;

  // repeated .F4BY.PropInfo prop_info = 5;
  int prop_info_size() const;
  private:
  int _internal_prop_info_size() const;
  public:
  void clear_prop_info();
  ::F4BY::PropInfo* mutable_prop_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::PropInfo >*
      mutable_prop_info();
  private:
  const ::F4BY::PropInfo& _internal_prop_info(int index) const;
  ::F4BY::PropInfo* _internal_add_prop_info();
  public:
  const ::F4BY::PropInfo& prop_info(int index) const;
  ::F4BY::PropInfo* add_prop_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::PropInfo >&
      prop_info() const;

  // .F4BY.VipInfo vip_info = 4;
  bool has_vip_info() const;
  private:
  bool _internal_has_vip_info() const;
  public:
  void clear_vip_info();
  const ::F4BY::VipInfo& vip_info() const;
  ::F4BY::VipInfo* release_vip_info();
  ::F4BY::VipInfo* mutable_vip_info();
  void set_allocated_vip_info(::F4BY::VipInfo* vip_info);
  private:
  const ::F4BY::VipInfo& _internal_vip_info() const;
  ::F4BY::VipInfo* _internal_mutable_vip_info();
  public:
  void unsafe_arena_set_allocated_vip_info(
      ::F4BY::VipInfo* vip_info);
  ::F4BY::VipInfo* unsafe_arena_release_vip_info();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_gun_level = 6;
  void clear_last_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 last_gun_level() const;
  void set_last_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_gun_level() const;
  void _internal_set_last_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_ratio = 7;
  void clear_last_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 last_ratio() const;
  void set_last_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_ratio() const;
  void _internal_set_last_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_wings_propId = 8;
  void clear_last_wings_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 last_wings_propid() const;
  void set_last_wings_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_wings_propid() const;
  void _internal_set_last_wings_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserInfoNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo > gun_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::WingsInfo > wings_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::PropInfo > prop_info_;
  ::F4BY::VipInfo* vip_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_wings_propid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGameInfoNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGameInfoNotify) */ {
 public:
  inline SCGameInfoNotify() : SCGameInfoNotify(nullptr) {}
  virtual ~SCGameInfoNotify();

  SCGameInfoNotify(const SCGameInfoNotify& from);
  SCGameInfoNotify(SCGameInfoNotify&& from) noexcept
    : SCGameInfoNotify() {
    *this = ::std::move(from);
  }

  inline SCGameInfoNotify& operator=(const SCGameInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGameInfoNotify& operator=(SCGameInfoNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGameInfoNotify& default_instance();

  static inline const SCGameInfoNotify* internal_default_instance() {
    return reinterpret_cast<const SCGameInfoNotify*>(
               &_SCGameInfoNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SCGameInfoNotify& a, SCGameInfoNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGameInfoNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGameInfoNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGameInfoNotify* New() const final {
    return CreateMaybeMessage<SCGameInfoNotify>(nullptr);
  }

  SCGameInfoNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGameInfoNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGameInfoNotify& from);
  void MergeFrom(const SCGameInfoNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGameInfoNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGameInfoNotify";
  }
  protected:
  explicit SCGameInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardFishFieldNumber = 2,
    kUserPoolLimitFieldNumber = 3,
    kUserPoolFieldNumber = 1,
  };
  // repeated int32 award_fish = 2;
  int award_fish_size() const;
  private:
  int _internal_award_fish_size() const;
  public:
  void clear_award_fish();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_fish(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_award_fish() const;
  void _internal_add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_award_fish();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 award_fish(int index) const;
  void set_award_fish(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      award_fish() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_award_fish();

  // repeated .F4BY.Object3 user_pool_limit = 3;
  int user_pool_limit_size() const;
  private:
  int _internal_user_pool_limit_size() const;
  public:
  void clear_user_pool_limit();
  ::F4BY::Object3* mutable_user_pool_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >*
      mutable_user_pool_limit();
  private:
  const ::F4BY::Object3& _internal_user_pool_limit(int index) const;
  ::F4BY::Object3* _internal_add_user_pool_limit();
  public:
  const ::F4BY::Object3& user_pool_limit(int index) const;
  ::F4BY::Object3* add_user_pool_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >&
      user_pool_limit() const;

  // bool user_pool = 1;
  void clear_user_pool();
  bool user_pool() const;
  void set_user_pool(bool value);
  private:
  bool _internal_user_pool() const;
  void _internal_set_user_pool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCGameInfoNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > award_fish_;
  mutable std::atomic<int> _award_fish_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 > user_pool_limit_;
  bool user_pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCInfoRedDot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCInfoRedDot) */ {
 public:
  inline SCInfoRedDot() : SCInfoRedDot(nullptr) {}
  virtual ~SCInfoRedDot();

  SCInfoRedDot(const SCInfoRedDot& from);
  SCInfoRedDot(SCInfoRedDot&& from) noexcept
    : SCInfoRedDot() {
    *this = ::std::move(from);
  }

  inline SCInfoRedDot& operator=(const SCInfoRedDot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCInfoRedDot& operator=(SCInfoRedDot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCInfoRedDot& default_instance();

  static inline const SCInfoRedDot* internal_default_instance() {
    return reinterpret_cast<const SCInfoRedDot*>(
               &_SCInfoRedDot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SCInfoRedDot& a, SCInfoRedDot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCInfoRedDot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCInfoRedDot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCInfoRedDot* New() const final {
    return CreateMaybeMessage<SCInfoRedDot>(nullptr);
  }

  SCInfoRedDot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCInfoRedDot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCInfoRedDot& from);
  void MergeFrom(const SCInfoRedDot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCInfoRedDot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCInfoRedDot";
  }
  protected:
  explicit SCInfoRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSevenDayFieldNumber = 1,
    kRedDotFieldNumber = 2,
  };
  // bool seven_day = 1;
  void clear_seven_day();
  bool seven_day() const;
  void set_seven_day(bool value);
  private:
  bool _internal_seven_day() const;
  void _internal_set_seven_day(bool value);
  public:

  // bool red_dot = 2;
  void clear_red_dot();
  bool red_dot() const;
  void set_red_dot(bool value);
  private:
  bool _internal_red_dot() const;
  void _internal_set_red_dot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCInfoRedDot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool seven_day_;
  bool red_dot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class JumpHighArena PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.JumpHighArena) */ {
 public:
  inline JumpHighArena() : JumpHighArena(nullptr) {}
  virtual ~JumpHighArena();

  JumpHighArena(const JumpHighArena& from);
  JumpHighArena(JumpHighArena&& from) noexcept
    : JumpHighArena() {
    *this = ::std::move(from);
  }

  inline JumpHighArena& operator=(const JumpHighArena& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumpHighArena& operator=(JumpHighArena&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JumpHighArena& default_instance();

  static inline const JumpHighArena* internal_default_instance() {
    return reinterpret_cast<const JumpHighArena*>(
               &_JumpHighArena_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(JumpHighArena& a, JumpHighArena& b) {
    a.Swap(&b);
  }
  inline void Swap(JumpHighArena* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumpHighArena* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JumpHighArena* New() const final {
    return CreateMaybeMessage<JumpHighArena>(nullptr);
  }

  JumpHighArena* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JumpHighArena>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JumpHighArena& from);
  void MergeFrom(const JumpHighArena& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumpHighArena* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.JumpHighArena";
  }
  protected:
  explicit JumpHighArena(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 5,
    kIsOpenFieldNumber = 1,
    kVipFieldNumber = 2,
    kCoinFieldNumber = 3,
    kGameTimeFieldNumber = 4,
  };
  // string tips = 5;
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // bool is_open = 1;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // int32 vip = 2;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin = 3;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_time = 4;
  void clear_game_time();
  ::PROTOBUF_NAMESPACE_ID::int32 game_time() const;
  void set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_time() const;
  void _internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.JumpHighArena)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  bool is_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCActivityInfo) */ {
 public:
  inline SCActivityInfo() : SCActivityInfo(nullptr) {}
  virtual ~SCActivityInfo();

  SCActivityInfo(const SCActivityInfo& from);
  SCActivityInfo(SCActivityInfo&& from) noexcept
    : SCActivityInfo() {
    *this = ::std::move(from);
  }

  inline SCActivityInfo& operator=(const SCActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCActivityInfo& operator=(SCActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCActivityInfo& default_instance();

  static inline const SCActivityInfo* internal_default_instance() {
    return reinterpret_cast<const SCActivityInfo*>(
               &_SCActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SCActivityInfo& a, SCActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCActivityInfo* New() const final {
    return CreateMaybeMessage<SCActivityInfo>(nullptr);
  }

  SCActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCActivityInfo& from);
  void MergeFrom(const SCActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCActivityInfo";
  }
  protected:
  explicit SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJumpFieldNumber = 1,
    kLimitFieldNumber = 2,
    kPoolIsOpenFieldNumber = 3,
  };
  // .F4BY.JumpHighArena jump = 1;
  bool has_jump() const;
  private:
  bool _internal_has_jump() const;
  public:
  void clear_jump();
  const ::F4BY::JumpHighArena& jump() const;
  ::F4BY::JumpHighArena* release_jump();
  ::F4BY::JumpHighArena* mutable_jump();
  void set_allocated_jump(::F4BY::JumpHighArena* jump);
  private:
  const ::F4BY::JumpHighArena& _internal_jump() const;
  ::F4BY::JumpHighArena* _internal_mutable_jump();
  public:
  void unsafe_arena_set_allocated_jump(
      ::F4BY::JumpHighArena* jump);
  ::F4BY::JumpHighArena* unsafe_arena_release_jump();

  // int32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool pool_is_open = 3;
  void clear_pool_is_open();
  bool pool_is_open() const;
  void set_pool_is_open(bool value);
  private:
  bool _internal_pool_is_open() const;
  void _internal_set_pool_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::JumpHighArena* jump_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  bool pool_is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSChat) */ {
 public:
  inline CSChat() : CSChat(nullptr) {}
  virtual ~CSChat();

  CSChat(const CSChat& from);
  CSChat(CSChat&& from) noexcept
    : CSChat() {
    *this = ::std::move(from);
  }

  inline CSChat& operator=(const CSChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChat& operator=(CSChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChat& default_instance();

  static inline const CSChat* internal_default_instance() {
    return reinterpret_cast<const CSChat*>(
               &_CSChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CSChat& a, CSChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChat* New() const final {
    return CreateMaybeMessage<CSChat>(nullptr);
  }

  CSChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChat& from);
  void MergeFrom(const CSChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSChat";
  }
  protected:
  explicit CSChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kMsgIdxFieldNumber = 2,
    kChairIdxFieldNumber = 3,
  };
  // int32 msg_type = 1;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_idx = 2;
  void clear_msg_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_idx() const;
  void set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_idx() const;
  void _internal_set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCChat) */ {
 public:
  inline SCChat() : SCChat(nullptr) {}
  virtual ~SCChat();

  SCChat(const SCChat& from);
  SCChat(SCChat&& from) noexcept
    : SCChat() {
    *this = ::std::move(from);
  }

  inline SCChat& operator=(const SCChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChat& operator=(SCChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChat& default_instance();

  static inline const SCChat* internal_default_instance() {
    return reinterpret_cast<const SCChat*>(
               &_SCChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SCChat& a, SCChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChat* New() const final {
    return CreateMaybeMessage<SCChat>(nullptr);
  }

  SCChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChat& from);
  void MergeFrom(const SCChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCChat";
  }
  protected:
  explicit SCChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kMsgIdxFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_type = 2;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_idx = 3;
  void clear_msg_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_idx() const;
  void set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_idx() const;
  void _internal_set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGainAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGainAward) */ {
 public:
  inline SCGainAward() : SCGainAward(nullptr) {}
  virtual ~SCGainAward();

  SCGainAward(const SCGainAward& from);
  SCGainAward(SCGainAward&& from) noexcept
    : SCGainAward() {
    *this = ::std::move(from);
  }

  inline SCGainAward& operator=(const SCGainAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGainAward& operator=(SCGainAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGainAward& default_instance();

  static inline const SCGainAward* internal_default_instance() {
    return reinterpret_cast<const SCGainAward*>(
               &_SCGainAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SCGainAward& a, SCGainAward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGainAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGainAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGainAward* New() const final {
    return CreateMaybeMessage<SCGainAward>(nullptr);
  }

  SCGainAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGainAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGainAward& from);
  void MergeFrom(const SCGainAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGainAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGainAward";
  }
  protected:
  explicit SCGainAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardFieldNumber = 3,
    kChairIdxFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // .F4BY.Object award = 3;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  const ::F4BY::Object& award() const;
  ::F4BY::Object* release_award();
  ::F4BY::Object* mutable_award();
  void set_allocated_award(::F4BY::Object* award);
  private:
  const ::F4BY::Object& _internal_award() const;
  ::F4BY::Object* _internal_mutable_award();
  public:
  void unsafe_arena_set_allocated_award(
      ::F4BY::Object* award);
  ::F4BY::Object* unsafe_arena_release_award();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCGainAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Object* award_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSAwardPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSAwardPool) */ {
 public:
  inline CSAwardPool() : CSAwardPool(nullptr) {}
  virtual ~CSAwardPool();

  CSAwardPool(const CSAwardPool& from);
  CSAwardPool(CSAwardPool&& from) noexcept
    : CSAwardPool() {
    *this = ::std::move(from);
  }

  inline CSAwardPool& operator=(const CSAwardPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSAwardPool& operator=(CSAwardPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSAwardPool& default_instance();

  static inline const CSAwardPool* internal_default_instance() {
    return reinterpret_cast<const CSAwardPool*>(
               &_CSAwardPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CSAwardPool& a, CSAwardPool& b) {
    a.Swap(&b);
  }
  inline void Swap(CSAwardPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSAwardPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSAwardPool* New() const final {
    return CreateMaybeMessage<CSAwardPool>(nullptr);
  }

  CSAwardPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSAwardPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSAwardPool& from);
  void MergeFrom(const CSAwardPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSAwardPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSAwardPool";
  }
  protected:
  explicit CSAwardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSAwardPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCAwardPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCAwardPool) */ {
 public:
  inline SCAwardPool() : SCAwardPool(nullptr) {}
  virtual ~SCAwardPool();

  SCAwardPool(const SCAwardPool& from);
  SCAwardPool(SCAwardPool&& from) noexcept
    : SCAwardPool() {
    *this = ::std::move(from);
  }

  inline SCAwardPool& operator=(const SCAwardPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAwardPool& operator=(SCAwardPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAwardPool& default_instance();

  static inline const SCAwardPool* internal_default_instance() {
    return reinterpret_cast<const SCAwardPool*>(
               &_SCAwardPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SCAwardPool& a, SCAwardPool& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAwardPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAwardPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAwardPool* New() const final {
    return CreateMaybeMessage<SCAwardPool>(nullptr);
  }

  SCAwardPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAwardPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAwardPool& from);
  void MergeFrom(const SCAwardPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAwardPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCAwardPool";
  }
  protected:
  explicit SCAwardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
  };
  // repeated .F4BY.Object3 pool = 1;
  int pool_size() const;
  private:
  int _internal_pool_size() const;
  public:
  void clear_pool();
  ::F4BY::Object3* mutable_pool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >*
      mutable_pool();
  private:
  const ::F4BY::Object3& _internal_pool(int index) const;
  ::F4BY::Object3* _internal_add_pool();
  public:
  const ::F4BY::Object3& pool(int index) const;
  ::F4BY::Object3* add_pool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >&
      pool() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCAwardPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 > pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSPropStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSPropStatus) */ {
 public:
  inline CSPropStatus() : CSPropStatus(nullptr) {}
  virtual ~CSPropStatus();

  CSPropStatus(const CSPropStatus& from);
  CSPropStatus(CSPropStatus&& from) noexcept
    : CSPropStatus() {
    *this = ::std::move(from);
  }

  inline CSPropStatus& operator=(const CSPropStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPropStatus& operator=(CSPropStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPropStatus& default_instance();

  static inline const CSPropStatus* internal_default_instance() {
    return reinterpret_cast<const CSPropStatus*>(
               &_CSPropStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CSPropStatus& a, CSPropStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPropStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPropStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPropStatus* New() const final {
    return CreateMaybeMessage<CSPropStatus>(nullptr);
  }

  CSPropStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPropStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPropStatus& from);
  void MergeFrom(const CSPropStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPropStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSPropStatus";
  }
  protected:
  explicit CSPropStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSPropStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCPropStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCPropStatus) */ {
 public:
  inline SCPropStatus() : SCPropStatus(nullptr) {}
  virtual ~SCPropStatus();

  SCPropStatus(const SCPropStatus& from);
  SCPropStatus(SCPropStatus&& from) noexcept
    : SCPropStatus() {
    *this = ::std::move(from);
  }

  inline SCPropStatus& operator=(const SCPropStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropStatus& operator=(SCPropStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropStatus& default_instance();

  static inline const SCPropStatus* internal_default_instance() {
    return reinterpret_cast<const SCPropStatus*>(
               &_SCPropStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SCPropStatus& a, SCPropStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropStatus* New() const final {
    return CreateMaybeMessage<SCPropStatus>(nullptr);
  }

  SCPropStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropStatus& from);
  void MergeFrom(const SCPropStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCPropStatus";
  }
  protected:
  explicit SCPropStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kPropIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kBtIdFieldNumber = 4,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_id = 2;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_id = 4;
  void clear_bt_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_id() const;
  void set_bt_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_id() const;
  void _internal_set_bt_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCPropStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class GivenCardAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.GivenCardAward) */ {
 public:
  inline GivenCardAward() : GivenCardAward(nullptr) {}
  virtual ~GivenCardAward();

  GivenCardAward(const GivenCardAward& from);
  GivenCardAward(GivenCardAward&& from) noexcept
    : GivenCardAward() {
    *this = ::std::move(from);
  }

  inline GivenCardAward& operator=(const GivenCardAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline GivenCardAward& operator=(GivenCardAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GivenCardAward& default_instance();

  static inline const GivenCardAward* internal_default_instance() {
    return reinterpret_cast<const GivenCardAward*>(
               &_GivenCardAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GivenCardAward& a, GivenCardAward& b) {
    a.Swap(&b);
  }
  inline void Swap(GivenCardAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GivenCardAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GivenCardAward* New() const final {
    return CreateMaybeMessage<GivenCardAward>(nullptr);
  }

  GivenCardAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GivenCardAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GivenCardAward& from);
  void MergeFrom(const GivenCardAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GivenCardAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.GivenCardAward";
  }
  protected:
  explicit GivenCardAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdxFieldNumber = 1,
    kBaseFieldNumber = 2,
    kMultipleFieldNumber = 3,
  };
  // int32 card_idx = 1;
  void clear_card_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx() const;
  void set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_idx() const;
  void _internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 base = 2;
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::int32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 3;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.GivenCardAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class UserAwardItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.UserAwardItem) */ {
 public:
  inline UserAwardItem() : UserAwardItem(nullptr) {}
  virtual ~UserAwardItem();

  UserAwardItem(const UserAwardItem& from);
  UserAwardItem(UserAwardItem&& from) noexcept
    : UserAwardItem() {
    *this = ::std::move(from);
  }

  inline UserAwardItem& operator=(const UserAwardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAwardItem& operator=(UserAwardItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAwardItem& default_instance();

  static inline const UserAwardItem* internal_default_instance() {
    return reinterpret_cast<const UserAwardItem*>(
               &_UserAwardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(UserAwardItem& a, UserAwardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAwardItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAwardItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAwardItem* New() const final {
    return CreateMaybeMessage<UserAwardItem>(nullptr);
  }

  UserAwardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAwardItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAwardItem& from);
  void MergeFrom(const UserAwardItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAwardItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.UserAwardItem";
  }
  protected:
  explicit UserAwardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 4,
    kNameFieldNumber = 3,
    kIndexFieldNumber = 1,
    kItemMaxFieldNumber = 2,
  };
  // repeated .F4BY.Object2 goods = 4;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::F4BY::Object2* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >*
      mutable_goods();
  private:
  const ::F4BY::Object2& _internal_goods(int index) const;
  ::F4BY::Object2* _internal_add_goods();
  public:
  const ::F4BY::Object2& goods(int index) const;
  ::F4BY::Object2* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >&
      goods() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 item_max = 2;
  void clear_item_max();
  ::PROTOBUF_NAMESPACE_ID::int32 item_max() const;
  void set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_max() const;
  void _internal_set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.UserAwardItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 > goods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserPoolInfo) */ {
 public:
  inline CSUserPoolInfo() : CSUserPoolInfo(nullptr) {}
  virtual ~CSUserPoolInfo();

  CSUserPoolInfo(const CSUserPoolInfo& from);
  CSUserPoolInfo(CSUserPoolInfo&& from) noexcept
    : CSUserPoolInfo() {
    *this = ::std::move(from);
  }

  inline CSUserPoolInfo& operator=(const CSUserPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolInfo& operator=(CSUserPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolInfo& default_instance();

  static inline const CSUserPoolInfo* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolInfo*>(
               &_CSUserPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CSUserPoolInfo& a, CSUserPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolInfo* New() const final {
    return CreateMaybeMessage<CSUserPoolInfo>(nullptr);
  }

  CSUserPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolInfo& from);
  void MergeFrom(const CSUserPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserPoolInfo";
  }
  protected:
  explicit CSUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenPageFieldNumber = 1,
  };
  // bool open_page = 1;
  void clear_open_page();
  bool open_page() const;
  void set_open_page(bool value);
  private:
  bool _internal_open_page() const;
  void _internal_set_open_page(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolInfo) */ {
 public:
  inline SCUserPoolInfo() : SCUserPoolInfo(nullptr) {}
  virtual ~SCUserPoolInfo();

  SCUserPoolInfo(const SCUserPoolInfo& from);
  SCUserPoolInfo(SCUserPoolInfo&& from) noexcept
    : SCUserPoolInfo() {
    *this = ::std::move(from);
  }

  inline SCUserPoolInfo& operator=(const SCUserPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolInfo& operator=(SCUserPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolInfo& default_instance();

  static inline const SCUserPoolInfo* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolInfo*>(
               &_SCUserPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SCUserPoolInfo& a, SCUserPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolInfo* New() const final {
    return CreateMaybeMessage<SCUserPoolInfo>(nullptr);
  }

  SCUserPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolInfo& from);
  void MergeFrom(const SCUserPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolInfo";
  }
  protected:
  explicit SCUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 6,
    kChairIdxFieldNumber = 1,
    kOpenPageFieldNumber = 2,
    kStatusFieldNumber = 3,
    kCountFieldNumber = 4,
    kPoolMaxFieldNumber = 5,
  };
  // repeated .F4BY.UserAwardItem items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::F4BY::UserAwardItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserAwardItem >*
      mutable_items();
  private:
  const ::F4BY::UserAwardItem& _internal_items(int index) const;
  ::F4BY::UserAwardItem* _internal_add_items();
  public:
  const ::F4BY::UserAwardItem& items(int index) const;
  ::F4BY::UserAwardItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserAwardItem >&
      items() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool open_page = 2;
  void clear_open_page();
  bool open_page() const;
  void set_open_page(bool value);
  private:
  bool _internal_open_page() const;
  void _internal_set_open_page(bool value);
  public:

  // bool status = 3;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pool_max = 5;
  void clear_pool_max();
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max() const;
  void set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool_max() const;
  void _internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserAwardItem > items_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool open_page_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserPoolStatus) */ {
 public:
  inline CSUserPoolStatus() : CSUserPoolStatus(nullptr) {}
  virtual ~CSUserPoolStatus();

  CSUserPoolStatus(const CSUserPoolStatus& from);
  CSUserPoolStatus(CSUserPoolStatus&& from) noexcept
    : CSUserPoolStatus() {
    *this = ::std::move(from);
  }

  inline CSUserPoolStatus& operator=(const CSUserPoolStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolStatus& operator=(CSUserPoolStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolStatus& default_instance();

  static inline const CSUserPoolStatus* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolStatus*>(
               &_CSUserPoolStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CSUserPoolStatus& a, CSUserPoolStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolStatus* New() const final {
    return CreateMaybeMessage<CSUserPoolStatus>(nullptr);
  }

  CSUserPoolStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolStatus& from);
  void MergeFrom(const CSUserPoolStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserPoolStatus";
  }
  protected:
  explicit CSUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
  };
  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserPoolStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolStatus) */ {
 public:
  inline SCUserPoolStatus() : SCUserPoolStatus(nullptr) {}
  virtual ~SCUserPoolStatus();

  SCUserPoolStatus(const SCUserPoolStatus& from);
  SCUserPoolStatus(SCUserPoolStatus&& from) noexcept
    : SCUserPoolStatus() {
    *this = ::std::move(from);
  }

  inline SCUserPoolStatus& operator=(const SCUserPoolStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolStatus& operator=(SCUserPoolStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolStatus& default_instance();

  static inline const SCUserPoolStatus* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolStatus*>(
               &_SCUserPoolStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SCUserPoolStatus& a, SCUserPoolStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolStatus* New() const final {
    return CreateMaybeMessage<SCUserPoolStatus>(nullptr);
  }

  SCUserPoolStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolStatus& from);
  void MergeFrom(const SCUserPoolStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolStatus";
  }
  protected:
  explicit SCUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
  };
  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolPreDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserPoolPreDraw) */ {
 public:
  inline CSUserPoolPreDraw() : CSUserPoolPreDraw(nullptr) {}
  virtual ~CSUserPoolPreDraw();

  CSUserPoolPreDraw(const CSUserPoolPreDraw& from);
  CSUserPoolPreDraw(CSUserPoolPreDraw&& from) noexcept
    : CSUserPoolPreDraw() {
    *this = ::std::move(from);
  }

  inline CSUserPoolPreDraw& operator=(const CSUserPoolPreDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolPreDraw& operator=(CSUserPoolPreDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolPreDraw& default_instance();

  static inline const CSUserPoolPreDraw* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolPreDraw*>(
               &_CSUserPoolPreDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CSUserPoolPreDraw& a, CSUserPoolPreDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolPreDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolPreDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolPreDraw* New() const final {
    return CreateMaybeMessage<CSUserPoolPreDraw>(nullptr);
  }

  CSUserPoolPreDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolPreDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolPreDraw& from);
  void MergeFrom(const CSUserPoolPreDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolPreDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserPoolPreDraw";
  }
  protected:
  explicit CSUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserPoolPreDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolPreDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolPreDraw) */ {
 public:
  inline SCUserPoolPreDraw() : SCUserPoolPreDraw(nullptr) {}
  virtual ~SCUserPoolPreDraw();

  SCUserPoolPreDraw(const SCUserPoolPreDraw& from);
  SCUserPoolPreDraw(SCUserPoolPreDraw&& from) noexcept
    : SCUserPoolPreDraw() {
    *this = ::std::move(from);
  }

  inline SCUserPoolPreDraw& operator=(const SCUserPoolPreDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolPreDraw& operator=(SCUserPoolPreDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolPreDraw& default_instance();

  static inline const SCUserPoolPreDraw* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolPreDraw*>(
               &_SCUserPoolPreDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SCUserPoolPreDraw& a, SCUserPoolPreDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolPreDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolPreDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolPreDraw* New() const final {
    return CreateMaybeMessage<SCUserPoolPreDraw>(nullptr);
  }

  SCUserPoolPreDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolPreDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolPreDraw& from);
  void MergeFrom(const SCUserPoolPreDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolPreDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolPreDraw";
  }
  protected:
  explicit SCUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolPreDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserPoolDraw) */ {
 public:
  inline CSUserPoolDraw() : CSUserPoolDraw(nullptr) {}
  virtual ~CSUserPoolDraw();

  CSUserPoolDraw(const CSUserPoolDraw& from);
  CSUserPoolDraw(CSUserPoolDraw&& from) noexcept
    : CSUserPoolDraw() {
    *this = ::std::move(from);
  }

  inline CSUserPoolDraw& operator=(const CSUserPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolDraw& operator=(CSUserPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolDraw& default_instance();

  static inline const CSUserPoolDraw* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolDraw*>(
               &_CSUserPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CSUserPoolDraw& a, CSUserPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolDraw* New() const final {
    return CreateMaybeMessage<CSUserPoolDraw>(nullptr);
  }

  CSUserPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolDraw& from);
  void MergeFrom(const CSUserPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserPoolDraw";
  }
  protected:
  explicit CSUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSUserPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolDraw) */ {
 public:
  inline SCUserPoolDraw() : SCUserPoolDraw(nullptr) {}
  virtual ~SCUserPoolDraw();

  SCUserPoolDraw(const SCUserPoolDraw& from);
  SCUserPoolDraw(SCUserPoolDraw&& from) noexcept
    : SCUserPoolDraw() {
    *this = ::std::move(from);
  }

  inline SCUserPoolDraw& operator=(const SCUserPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolDraw& operator=(SCUserPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolDraw& default_instance();

  static inline const SCUserPoolDraw* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolDraw*>(
               &_SCUserPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SCUserPoolDraw& a, SCUserPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolDraw* New() const final {
    return CreateMaybeMessage<SCUserPoolDraw>(nullptr);
  }

  SCUserPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolDraw& from);
  void MergeFrom(const SCUserPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolDraw";
  }
  protected:
  explicit SCUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 2,
    kAwardFieldNumber = 3,
    kAwardCntFieldNumber = 4,
    kChairIdxFieldNumber = 1,
  };
  // repeated .F4BY.Object2 goods = 2;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::F4BY::Object2* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >*
      mutable_goods();
  private:
  const ::F4BY::Object2& _internal_goods(int index) const;
  ::F4BY::Object2* _internal_add_goods();
  public:
  const ::F4BY::Object2& goods(int index) const;
  ::F4BY::Object2* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >&
      goods() const;

  // .F4BY.Object2 award = 3;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  const ::F4BY::Object2& award() const;
  ::F4BY::Object2* release_award();
  ::F4BY::Object2* mutable_award();
  void set_allocated_award(::F4BY::Object2* award);
  private:
  const ::F4BY::Object2& _internal_award() const;
  ::F4BY::Object2* _internal_mutable_award();
  public:
  void unsafe_arena_set_allocated_award(
      ::F4BY::Object2* award);
  ::F4BY::Object2* unsafe_arena_release_award();

  // .F4BY.Object award_cnt = 4;
  bool has_award_cnt() const;
  private:
  bool _internal_has_award_cnt() const;
  public:
  void clear_award_cnt();
  const ::F4BY::Object& award_cnt() const;
  ::F4BY::Object* release_award_cnt();
  ::F4BY::Object* mutable_award_cnt();
  void set_allocated_award_cnt(::F4BY::Object* award_cnt);
  private:
  const ::F4BY::Object& _internal_award_cnt() const;
  ::F4BY::Object* _internal_mutable_award_cnt();
  public:
  void unsafe_arena_set_allocated_award_cnt(
      ::F4BY::Object* award_cnt);
  ::F4BY::Object* unsafe_arena_release_award_cnt();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 > goods_;
  ::F4BY::Object2* award_;
  ::F4BY::Object* award_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolAdd) */ {
 public:
  inline SCUserPoolAdd() : SCUserPoolAdd(nullptr) {}
  virtual ~SCUserPoolAdd();

  SCUserPoolAdd(const SCUserPoolAdd& from);
  SCUserPoolAdd(SCUserPoolAdd&& from) noexcept
    : SCUserPoolAdd() {
    *this = ::std::move(from);
  }

  inline SCUserPoolAdd& operator=(const SCUserPoolAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolAdd& operator=(SCUserPoolAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolAdd& default_instance();

  static inline const SCUserPoolAdd* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolAdd*>(
               &_SCUserPoolAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SCUserPoolAdd& a, SCUserPoolAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolAdd* New() const final {
    return CreateMaybeMessage<SCUserPoolAdd>(nullptr);
  }

  SCUserPoolAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolAdd& from);
  void MergeFrom(const SCUserPoolAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolAdd";
  }
  protected:
  explicit SCUserPoolAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelNameFieldNumber = 6,
    kAddFieldNumber = 1,
    kCountFieldNumber = 2,
    kFirstMaxFieldNumber = 3,
    kPoolMaxFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string level_name = 6;
  void clear_level_name();
  const std::string& level_name() const;
  void set_level_name(const std::string& value);
  void set_level_name(std::string&& value);
  void set_level_name(const char* value);
  void set_level_name(const char* value, size_t size);
  std::string* mutable_level_name();
  std::string* release_level_name();
  void set_allocated_level_name(std::string* level_name);
  private:
  const std::string& _internal_level_name() const;
  void _internal_set_level_name(const std::string& value);
  std::string* _internal_mutable_level_name();
  public:

  // int32 add = 1;
  void clear_add();
  ::PROTOBUF_NAMESPACE_ID::int32 add() const;
  void set_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add() const;
  void _internal_set_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 first_max = 3;
  void clear_first_max();
  ::PROTOBUF_NAMESPACE_ID::int32 first_max() const;
  void set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_first_max() const;
  void _internal_set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pool_max = 4;
  void clear_pool_max();
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max() const;
  void set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool_max() const;
  void _internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 5;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolDoubleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserPoolDoubleInfo) */ {
 public:
  inline CSUserPoolDoubleInfo() : CSUserPoolDoubleInfo(nullptr) {}
  virtual ~CSUserPoolDoubleInfo();

  CSUserPoolDoubleInfo(const CSUserPoolDoubleInfo& from);
  CSUserPoolDoubleInfo(CSUserPoolDoubleInfo&& from) noexcept
    : CSUserPoolDoubleInfo() {
    *this = ::std::move(from);
  }

  inline CSUserPoolDoubleInfo& operator=(const CSUserPoolDoubleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolDoubleInfo& operator=(CSUserPoolDoubleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolDoubleInfo& default_instance();

  static inline const CSUserPoolDoubleInfo* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolDoubleInfo*>(
               &_CSUserPoolDoubleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CSUserPoolDoubleInfo& a, CSUserPoolDoubleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolDoubleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolDoubleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolDoubleInfo* New() const final {
    return CreateMaybeMessage<CSUserPoolDoubleInfo>(nullptr);
  }

  CSUserPoolDoubleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolDoubleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolDoubleInfo& from);
  void MergeFrom(const CSUserPoolDoubleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolDoubleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserPoolDoubleInfo";
  }
  protected:
  explicit CSUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSUserPoolDoubleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolDoubleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolDoubleInfo) */ {
 public:
  inline SCUserPoolDoubleInfo() : SCUserPoolDoubleInfo(nullptr) {}
  virtual ~SCUserPoolDoubleInfo();

  SCUserPoolDoubleInfo(const SCUserPoolDoubleInfo& from);
  SCUserPoolDoubleInfo(SCUserPoolDoubleInfo&& from) noexcept
    : SCUserPoolDoubleInfo() {
    *this = ::std::move(from);
  }

  inline SCUserPoolDoubleInfo& operator=(const SCUserPoolDoubleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolDoubleInfo& operator=(SCUserPoolDoubleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolDoubleInfo& default_instance();

  static inline const SCUserPoolDoubleInfo* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolDoubleInfo*>(
               &_SCUserPoolDoubleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SCUserPoolDoubleInfo& a, SCUserPoolDoubleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolDoubleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolDoubleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolDoubleInfo* New() const final {
    return CreateMaybeMessage<SCUserPoolDoubleInfo>(nullptr);
  }

  SCUserPoolDoubleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolDoubleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolDoubleInfo& from);
  void MergeFrom(const SCUserPoolDoubleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolDoubleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolDoubleInfo";
  }
  protected:
  explicit SCUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemBeforeFieldNumber = 2,
    kItemDoubleFieldNumber = 3,
    kCostFieldNumber = 1,
  };
  // .F4BY.Object2 item_before = 2;
  bool has_item_before() const;
  private:
  bool _internal_has_item_before() const;
  public:
  void clear_item_before();
  const ::F4BY::Object2& item_before() const;
  ::F4BY::Object2* release_item_before();
  ::F4BY::Object2* mutable_item_before();
  void set_allocated_item_before(::F4BY::Object2* item_before);
  private:
  const ::F4BY::Object2& _internal_item_before() const;
  ::F4BY::Object2* _internal_mutable_item_before();
  public:
  void unsafe_arena_set_allocated_item_before(
      ::F4BY::Object2* item_before);
  ::F4BY::Object2* unsafe_arena_release_item_before();

  // .F4BY.Object2 item_double = 3;
  bool has_item_double() const;
  private:
  bool _internal_has_item_double() const;
  public:
  void clear_item_double();
  const ::F4BY::Object2& item_double() const;
  ::F4BY::Object2* release_item_double();
  ::F4BY::Object2* mutable_item_double();
  void set_allocated_item_double(::F4BY::Object2* item_double);
  private:
  const ::F4BY::Object2& _internal_item_double() const;
  ::F4BY::Object2* _internal_mutable_item_double();
  public:
  void unsafe_arena_set_allocated_item_double(
      ::F4BY::Object2* item_double);
  ::F4BY::Object2* unsafe_arena_release_item_double();

  // int32 cost = 1;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolDoubleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Object2* item_before_;
  ::F4BY::Object2* item_double_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserPoolDouble) */ {
 public:
  inline CSUserPoolDouble() : CSUserPoolDouble(nullptr) {}
  virtual ~CSUserPoolDouble();

  CSUserPoolDouble(const CSUserPoolDouble& from);
  CSUserPoolDouble(CSUserPoolDouble&& from) noexcept
    : CSUserPoolDouble() {
    *this = ::std::move(from);
  }

  inline CSUserPoolDouble& operator=(const CSUserPoolDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolDouble& operator=(CSUserPoolDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolDouble& default_instance();

  static inline const CSUserPoolDouble* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolDouble*>(
               &_CSUserPoolDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CSUserPoolDouble& a, CSUserPoolDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolDouble* New() const final {
    return CreateMaybeMessage<CSUserPoolDouble>(nullptr);
  }

  CSUserPoolDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolDouble& from);
  void MergeFrom(const CSUserPoolDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserPoolDouble";
  }
  protected:
  explicit CSUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDoubleFieldNumber = 1,
  };
  // bool is_double = 1;
  void clear_is_double();
  bool is_double() const;
  void set_is_double(bool value);
  private:
  bool _internal_is_double() const;
  void _internal_set_is_double(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserPoolDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_double_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUserPoolDouble) */ {
 public:
  inline SCUserPoolDouble() : SCUserPoolDouble(nullptr) {}
  virtual ~SCUserPoolDouble();

  SCUserPoolDouble(const SCUserPoolDouble& from);
  SCUserPoolDouble(SCUserPoolDouble&& from) noexcept
    : SCUserPoolDouble() {
    *this = ::std::move(from);
  }

  inline SCUserPoolDouble& operator=(const SCUserPoolDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolDouble& operator=(SCUserPoolDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolDouble& default_instance();

  static inline const SCUserPoolDouble* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolDouble*>(
               &_SCUserPoolDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SCUserPoolDouble& a, SCUserPoolDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolDouble* New() const final {
    return CreateMaybeMessage<SCUserPoolDouble>(nullptr);
  }

  SCUserPoolDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolDouble& from);
  void MergeFrom(const SCUserPoolDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUserPoolDouble";
  }
  protected:
  explicit SCUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 4,
    kExtraItemFieldNumber = 5,
    kCodeFieldNumber = 1,
    kResultFieldNumber = 2,
    kChairIdxFieldNumber = 3,
  };
  // .F4BY.Object3 item = 4;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::F4BY::Object3& item() const;
  ::F4BY::Object3* release_item();
  ::F4BY::Object3* mutable_item();
  void set_allocated_item(::F4BY::Object3* item);
  private:
  const ::F4BY::Object3& _internal_item() const;
  ::F4BY::Object3* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::F4BY::Object3* item);
  ::F4BY::Object3* unsafe_arena_release_item();

  // .F4BY.Object3 extra_item = 5;
  bool has_extra_item() const;
  private:
  bool _internal_has_extra_item() const;
  public:
  void clear_extra_item();
  const ::F4BY::Object3& extra_item() const;
  ::F4BY::Object3* release_extra_item();
  ::F4BY::Object3* mutable_extra_item();
  void set_allocated_extra_item(::F4BY::Object3* extra_item);
  private:
  const ::F4BY::Object3& _internal_extra_item() const;
  ::F4BY::Object3* _internal_mutable_extra_item();
  public:
  void unsafe_arena_set_allocated_extra_item(
      ::F4BY::Object3* extra_item);
  ::F4BY::Object3* unsafe_arena_release_extra_item();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUserPoolDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Object3* item_;
  ::F4BY::Object3* extra_item_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLuckyPoolInfo) */ {
 public:
  inline CSLuckyPoolInfo() : CSLuckyPoolInfo(nullptr) {}
  virtual ~CSLuckyPoolInfo();

  CSLuckyPoolInfo(const CSLuckyPoolInfo& from);
  CSLuckyPoolInfo(CSLuckyPoolInfo&& from) noexcept
    : CSLuckyPoolInfo() {
    *this = ::std::move(from);
  }

  inline CSLuckyPoolInfo& operator=(const CSLuckyPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyPoolInfo& operator=(CSLuckyPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyPoolInfo& default_instance();

  static inline const CSLuckyPoolInfo* internal_default_instance() {
    return reinterpret_cast<const CSLuckyPoolInfo*>(
               &_CSLuckyPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CSLuckyPoolInfo& a, CSLuckyPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyPoolInfo* New() const final {
    return CreateMaybeMessage<CSLuckyPoolInfo>(nullptr);
  }

  CSLuckyPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyPoolInfo& from);
  void MergeFrom(const CSLuckyPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLuckyPoolInfo";
  }
  protected:
  explicit CSLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSLuckyPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLuckyPoolInfo) */ {
 public:
  inline SCLuckyPoolInfo() : SCLuckyPoolInfo(nullptr) {}
  virtual ~SCLuckyPoolInfo();

  SCLuckyPoolInfo(const SCLuckyPoolInfo& from);
  SCLuckyPoolInfo(SCLuckyPoolInfo&& from) noexcept
    : SCLuckyPoolInfo() {
    *this = ::std::move(from);
  }

  inline SCLuckyPoolInfo& operator=(const SCLuckyPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyPoolInfo& operator=(SCLuckyPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyPoolInfo& default_instance();

  static inline const SCLuckyPoolInfo* internal_default_instance() {
    return reinterpret_cast<const SCLuckyPoolInfo*>(
               &_SCLuckyPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SCLuckyPoolInfo& a, SCLuckyPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyPoolInfo* New() const final {
    return CreateMaybeMessage<SCLuckyPoolInfo>(nullptr);
  }

  SCLuckyPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyPoolInfo& from);
  void MergeFrom(const SCLuckyPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLuckyPoolInfo";
  }
  protected:
  explicit SCLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max = 2;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCLuckyPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLuckyPoolDraw) */ {
 public:
  inline CSLuckyPoolDraw() : CSLuckyPoolDraw(nullptr) {}
  virtual ~CSLuckyPoolDraw();

  CSLuckyPoolDraw(const CSLuckyPoolDraw& from);
  CSLuckyPoolDraw(CSLuckyPoolDraw&& from) noexcept
    : CSLuckyPoolDraw() {
    *this = ::std::move(from);
  }

  inline CSLuckyPoolDraw& operator=(const CSLuckyPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyPoolDraw& operator=(CSLuckyPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyPoolDraw& default_instance();

  static inline const CSLuckyPoolDraw* internal_default_instance() {
    return reinterpret_cast<const CSLuckyPoolDraw*>(
               &_CSLuckyPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CSLuckyPoolDraw& a, CSLuckyPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyPoolDraw* New() const final {
    return CreateMaybeMessage<CSLuckyPoolDraw>(nullptr);
  }

  CSLuckyPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyPoolDraw& from);
  void MergeFrom(const CSLuckyPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLuckyPoolDraw";
  }
  protected:
  explicit CSLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSLuckyPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLuckyPoolDraw) */ {
 public:
  inline SCLuckyPoolDraw() : SCLuckyPoolDraw(nullptr) {}
  virtual ~SCLuckyPoolDraw();

  SCLuckyPoolDraw(const SCLuckyPoolDraw& from);
  SCLuckyPoolDraw(SCLuckyPoolDraw&& from) noexcept
    : SCLuckyPoolDraw() {
    *this = ::std::move(from);
  }

  inline SCLuckyPoolDraw& operator=(const SCLuckyPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyPoolDraw& operator=(SCLuckyPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyPoolDraw& default_instance();

  static inline const SCLuckyPoolDraw* internal_default_instance() {
    return reinterpret_cast<const SCLuckyPoolDraw*>(
               &_SCLuckyPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SCLuckyPoolDraw& a, SCLuckyPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyPoolDraw* New() const final {
    return CreateMaybeMessage<SCLuckyPoolDraw>(nullptr);
  }

  SCLuckyPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyPoolDraw& from);
  void MergeFrom(const SCLuckyPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLuckyPoolDraw";
  }
  protected:
  explicit SCLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .F4BY.Object3 item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::F4BY::Object3& item() const;
  ::F4BY::Object3* release_item();
  ::F4BY::Object3* mutable_item();
  void set_allocated_item(::F4BY::Object3* item);
  private:
  const ::F4BY::Object3& _internal_item() const;
  ::F4BY::Object3* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::F4BY::Object3* item);
  ::F4BY::Object3* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:F4BY.SCLuckyPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Object3* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTorpedoPreShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTorpedoPreShoot) */ {
 public:
  inline CSTorpedoPreShoot() : CSTorpedoPreShoot(nullptr) {}
  virtual ~CSTorpedoPreShoot();

  CSTorpedoPreShoot(const CSTorpedoPreShoot& from);
  CSTorpedoPreShoot(CSTorpedoPreShoot&& from) noexcept
    : CSTorpedoPreShoot() {
    *this = ::std::move(from);
  }

  inline CSTorpedoPreShoot& operator=(const CSTorpedoPreShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTorpedoPreShoot& operator=(CSTorpedoPreShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTorpedoPreShoot& default_instance();

  static inline const CSTorpedoPreShoot* internal_default_instance() {
    return reinterpret_cast<const CSTorpedoPreShoot*>(
               &_CSTorpedoPreShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CSTorpedoPreShoot& a, CSTorpedoPreShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTorpedoPreShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTorpedoPreShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTorpedoPreShoot* New() const final {
    return CreateMaybeMessage<CSTorpedoPreShoot>(nullptr);
  }

  CSTorpedoPreShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTorpedoPreShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTorpedoPreShoot& from);
  void MergeFrom(const CSTorpedoPreShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTorpedoPreShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTorpedoPreShoot";
  }
  protected:
  explicit CSTorpedoPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
  };
  // int32 propId = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSTorpedoPreShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTorpedoPreShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTorpedoPreShoot) */ {
 public:
  inline SCTorpedoPreShoot() : SCTorpedoPreShoot(nullptr) {}
  virtual ~SCTorpedoPreShoot();

  SCTorpedoPreShoot(const SCTorpedoPreShoot& from);
  SCTorpedoPreShoot(SCTorpedoPreShoot&& from) noexcept
    : SCTorpedoPreShoot() {
    *this = ::std::move(from);
  }

  inline SCTorpedoPreShoot& operator=(const SCTorpedoPreShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTorpedoPreShoot& operator=(SCTorpedoPreShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTorpedoPreShoot& default_instance();

  static inline const SCTorpedoPreShoot* internal_default_instance() {
    return reinterpret_cast<const SCTorpedoPreShoot*>(
               &_SCTorpedoPreShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(SCTorpedoPreShoot& a, SCTorpedoPreShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTorpedoPreShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTorpedoPreShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTorpedoPreShoot* New() const final {
    return CreateMaybeMessage<SCTorpedoPreShoot>(nullptr);
  }

  SCTorpedoPreShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTorpedoPreShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTorpedoPreShoot& from);
  void MergeFrom(const SCTorpedoPreShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTorpedoPreShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTorpedoPreShoot";
  }
  protected:
  explicit SCTorpedoPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 4,
    kChairIdxFieldNumber = 1,
    kPropIdFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 propId = 2;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTorpedoPreShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTorpedoCancelShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTorpedoCancelShoot) */ {
 public:
  inline CSTorpedoCancelShoot() : CSTorpedoCancelShoot(nullptr) {}
  virtual ~CSTorpedoCancelShoot();

  CSTorpedoCancelShoot(const CSTorpedoCancelShoot& from);
  CSTorpedoCancelShoot(CSTorpedoCancelShoot&& from) noexcept
    : CSTorpedoCancelShoot() {
    *this = ::std::move(from);
  }

  inline CSTorpedoCancelShoot& operator=(const CSTorpedoCancelShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTorpedoCancelShoot& operator=(CSTorpedoCancelShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTorpedoCancelShoot& default_instance();

  static inline const CSTorpedoCancelShoot* internal_default_instance() {
    return reinterpret_cast<const CSTorpedoCancelShoot*>(
               &_CSTorpedoCancelShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CSTorpedoCancelShoot& a, CSTorpedoCancelShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTorpedoCancelShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTorpedoCancelShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTorpedoCancelShoot* New() const final {
    return CreateMaybeMessage<CSTorpedoCancelShoot>(nullptr);
  }

  CSTorpedoCancelShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTorpedoCancelShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTorpedoCancelShoot& from);
  void MergeFrom(const CSTorpedoCancelShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTorpedoCancelShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTorpedoCancelShoot";
  }
  protected:
  explicit CSTorpedoCancelShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSTorpedoCancelShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTorpedoCancelShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTorpedoCancelShoot) */ {
 public:
  inline SCTorpedoCancelShoot() : SCTorpedoCancelShoot(nullptr) {}
  virtual ~SCTorpedoCancelShoot();

  SCTorpedoCancelShoot(const SCTorpedoCancelShoot& from);
  SCTorpedoCancelShoot(SCTorpedoCancelShoot&& from) noexcept
    : SCTorpedoCancelShoot() {
    *this = ::std::move(from);
  }

  inline SCTorpedoCancelShoot& operator=(const SCTorpedoCancelShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTorpedoCancelShoot& operator=(SCTorpedoCancelShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTorpedoCancelShoot& default_instance();

  static inline const SCTorpedoCancelShoot* internal_default_instance() {
    return reinterpret_cast<const SCTorpedoCancelShoot*>(
               &_SCTorpedoCancelShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(SCTorpedoCancelShoot& a, SCTorpedoCancelShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTorpedoCancelShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTorpedoCancelShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTorpedoCancelShoot* New() const final {
    return CreateMaybeMessage<SCTorpedoCancelShoot>(nullptr);
  }

  SCTorpedoCancelShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTorpedoCancelShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTorpedoCancelShoot& from);
  void MergeFrom(const SCTorpedoCancelShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTorpedoCancelShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTorpedoCancelShoot";
  }
  protected:
  explicit SCTorpedoCancelShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTorpedoCancelShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTorpedoShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTorpedoShoot) */ {
 public:
  inline CSTorpedoShoot() : CSTorpedoShoot(nullptr) {}
  virtual ~CSTorpedoShoot();

  CSTorpedoShoot(const CSTorpedoShoot& from);
  CSTorpedoShoot(CSTorpedoShoot&& from) noexcept
    : CSTorpedoShoot() {
    *this = ::std::move(from);
  }

  inline CSTorpedoShoot& operator=(const CSTorpedoShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTorpedoShoot& operator=(CSTorpedoShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTorpedoShoot& default_instance();

  static inline const CSTorpedoShoot* internal_default_instance() {
    return reinterpret_cast<const CSTorpedoShoot*>(
               &_CSTorpedoShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CSTorpedoShoot& a, CSTorpedoShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTorpedoShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTorpedoShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTorpedoShoot* New() const final {
    return CreateMaybeMessage<CSTorpedoShoot>(nullptr);
  }

  CSTorpedoShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTorpedoShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTorpedoShoot& from);
  void MergeFrom(const CSTorpedoShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTorpedoShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTorpedoShoot";
  }
  protected:
  explicit CSTorpedoShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSTorpedoShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTorpedoShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTorpedoShoot) */ {
 public:
  inline SCTorpedoShoot() : SCTorpedoShoot(nullptr) {}
  virtual ~SCTorpedoShoot();

  SCTorpedoShoot(const SCTorpedoShoot& from);
  SCTorpedoShoot(SCTorpedoShoot&& from) noexcept
    : SCTorpedoShoot() {
    *this = ::std::move(from);
  }

  inline SCTorpedoShoot& operator=(const SCTorpedoShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTorpedoShoot& operator=(SCTorpedoShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTorpedoShoot& default_instance();

  static inline const SCTorpedoShoot* internal_default_instance() {
    return reinterpret_cast<const SCTorpedoShoot*>(
               &_SCTorpedoShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(SCTorpedoShoot& a, SCTorpedoShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTorpedoShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTorpedoShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTorpedoShoot* New() const final {
    return CreateMaybeMessage<SCTorpedoShoot>(nullptr);
  }

  SCTorpedoShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTorpedoShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTorpedoShoot& from);
  void MergeFrom(const SCTorpedoShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTorpedoShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTorpedoShoot";
  }
  protected:
  explicit SCTorpedoShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTorpedoShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTorpedoHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTorpedoHit) */ {
 public:
  inline CSTorpedoHit() : CSTorpedoHit(nullptr) {}
  virtual ~CSTorpedoHit();

  CSTorpedoHit(const CSTorpedoHit& from);
  CSTorpedoHit(CSTorpedoHit&& from) noexcept
    : CSTorpedoHit() {
    *this = ::std::move(from);
  }

  inline CSTorpedoHit& operator=(const CSTorpedoHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTorpedoHit& operator=(CSTorpedoHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTorpedoHit& default_instance();

  static inline const CSTorpedoHit* internal_default_instance() {
    return reinterpret_cast<const CSTorpedoHit*>(
               &_CSTorpedoHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CSTorpedoHit& a, CSTorpedoHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTorpedoHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTorpedoHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTorpedoHit* New() const final {
    return CreateMaybeMessage<CSTorpedoHit>(nullptr);
  }

  CSTorpedoHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTorpedoHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTorpedoHit& from);
  void MergeFrom(const CSTorpedoHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTorpedoHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTorpedoHit";
  }
  protected:
  explicit CSTorpedoHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSTorpedoHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTorpedoHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTorpedoHit) */ {
 public:
  inline SCTorpedoHit() : SCTorpedoHit(nullptr) {}
  virtual ~SCTorpedoHit();

  SCTorpedoHit(const SCTorpedoHit& from);
  SCTorpedoHit(SCTorpedoHit&& from) noexcept
    : SCTorpedoHit() {
    *this = ::std::move(from);
  }

  inline SCTorpedoHit& operator=(const SCTorpedoHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTorpedoHit& operator=(SCTorpedoHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTorpedoHit& default_instance();

  static inline const SCTorpedoHit* internal_default_instance() {
    return reinterpret_cast<const SCTorpedoHit*>(
               &_SCTorpedoHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SCTorpedoHit& a, SCTorpedoHit& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTorpedoHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTorpedoHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTorpedoHit* New() const final {
    return CreateMaybeMessage<SCTorpedoHit>(nullptr);
  }

  SCTorpedoHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTorpedoHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTorpedoHit& from);
  void MergeFrom(const SCTorpedoHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTorpedoHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTorpedoHit";
  }
  protected:
  explicit SCTorpedoHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kEarnFieldNumber = 2,
    kScoreFieldNumber = 3,
    kPropIdFieldNumber = 4,
    kRemainFieldNumber = 5,
    kFishUidFieldNumber = 6,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 2;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 propId = 4;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 5;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 6;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 7;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 8;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTorpedoHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSCallFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSCallFish) */ {
 public:
  inline CSCallFish() : CSCallFish(nullptr) {}
  virtual ~CSCallFish();

  CSCallFish(const CSCallFish& from);
  CSCallFish(CSCallFish&& from) noexcept
    : CSCallFish() {
    *this = ::std::move(from);
  }

  inline CSCallFish& operator=(const CSCallFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSCallFish& operator=(CSCallFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSCallFish& default_instance();

  static inline const CSCallFish* internal_default_instance() {
    return reinterpret_cast<const CSCallFish*>(
               &_CSCallFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CSCallFish& a, CSCallFish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSCallFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSCallFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSCallFish* New() const final {
    return CreateMaybeMessage<CSCallFish>(nullptr);
  }

  CSCallFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSCallFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSCallFish& from);
  void MergeFrom(const CSCallFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSCallFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSCallFish";
  }
  protected:
  explicit CSCallFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallTypeFieldNumber = 1,
  };
  // .F4BY.CallFishType call_type = 1;
  void clear_call_type();
  ::F4BY::CallFishType call_type() const;
  void set_call_type(::F4BY::CallFishType value);
  private:
  ::F4BY::CallFishType _internal_call_type() const;
  void _internal_set_call_type(::F4BY::CallFishType value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSCallFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int call_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCCallFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCCallFish) */ {
 public:
  inline SCCallFish() : SCCallFish(nullptr) {}
  virtual ~SCCallFish();

  SCCallFish(const SCCallFish& from);
  SCCallFish(SCCallFish&& from) noexcept
    : SCCallFish() {
    *this = ::std::move(from);
  }

  inline SCCallFish& operator=(const SCCallFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCCallFish& operator=(SCCallFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCCallFish& default_instance();

  static inline const SCCallFish* internal_default_instance() {
    return reinterpret_cast<const SCCallFish*>(
               &_SCCallFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SCCallFish& a, SCCallFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCCallFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCCallFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCCallFish* New() const final {
    return CreateMaybeMessage<SCCallFish>(nullptr);
  }

  SCCallFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCCallFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCCallFish& from);
  void MergeFrom(const SCCallFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCCallFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCCallFish";
  }
  protected:
  explicit SCCallFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 5,
    kChairIdxFieldNumber = 1,
    kPropIdFieldNumber = 2,
    kRemainFieldNumber = 3,
    kCodeFieldNumber = 4,
  };
  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 propId = 2;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 3;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCCallFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCComTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCComTask) */ {
 public:
  inline SCComTask() : SCComTask(nullptr) {}
  virtual ~SCComTask();

  SCComTask(const SCComTask& from);
  SCComTask(SCComTask&& from) noexcept
    : SCComTask() {
    *this = ::std::move(from);
  }

  inline SCComTask& operator=(const SCComTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCComTask& operator=(SCComTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCComTask& default_instance();

  static inline const SCComTask* internal_default_instance() {
    return reinterpret_cast<const SCComTask*>(
               &_SCComTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SCComTask& a, SCComTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SCComTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCComTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCComTask* New() const final {
    return CreateMaybeMessage<SCComTask>(nullptr);
  }

  SCComTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCComTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCComTask& from);
  void MergeFrom(const SCComTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCComTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCComTask";
  }
  protected:
  explicit SCComTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kAwardFieldNumber = 3,
    kTicketFieldNumber = 4,
  };
  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 3;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 4;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCComTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTaskInfo) */ {
 public:
  inline SCTaskInfo() : SCTaskInfo(nullptr) {}
  virtual ~SCTaskInfo();

  SCTaskInfo(const SCTaskInfo& from);
  SCTaskInfo(SCTaskInfo&& from) noexcept
    : SCTaskInfo() {
    *this = ::std::move(from);
  }

  inline SCTaskInfo& operator=(const SCTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTaskInfo& operator=(SCTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTaskInfo& default_instance();

  static inline const SCTaskInfo* internal_default_instance() {
    return reinterpret_cast<const SCTaskInfo*>(
               &_SCTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SCTaskInfo& a, SCTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTaskInfo* New() const final {
    return CreateMaybeMessage<SCTaskInfo>(nullptr);
  }

  SCTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTaskInfo& from);
  void MergeFrom(const SCTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTaskInfo";
  }
  protected:
  explicit SCTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kCurNumFieldNumber = 3,
    kTotalNumFieldNumber = 4,
    kVipLevelFieldNumber = 5,
    kAwardFieldNumber = 7,
    kIsUnlockFieldNumber = 6,
    kIsVipUnlockFieldNumber = 8,
    kTicketFieldNumber = 9,
  };
  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_num = 3;
  void clear_cur_num();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_num() const;
  void set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_num() const;
  void _internal_set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_num = 4;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 5;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 7;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_unlock = 6;
  void clear_is_unlock();
  bool is_unlock() const;
  void set_is_unlock(bool value);
  private:
  bool _internal_is_unlock() const;
  void _internal_set_is_unlock(bool value);
  public:

  // bool is_vip_unlock = 8;
  void clear_is_vip_unlock();
  bool is_vip_unlock() const;
  void set_is_vip_unlock(bool value);
  private:
  bool _internal_is_vip_unlock() const;
  void _internal_set_is_vip_unlock(bool value);
  public:

  // int32 ticket = 9;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  bool is_unlock_;
  bool is_vip_unlock_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSaveSkillTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSaveSkillTime) */ {
 public:
  inline CSSaveSkillTime() : CSSaveSkillTime(nullptr) {}
  virtual ~CSSaveSkillTime();

  CSSaveSkillTime(const CSSaveSkillTime& from);
  CSSaveSkillTime(CSSaveSkillTime&& from) noexcept
    : CSSaveSkillTime() {
    *this = ::std::move(from);
  }

  inline CSSaveSkillTime& operator=(const CSSaveSkillTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSaveSkillTime& operator=(CSSaveSkillTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSaveSkillTime& default_instance();

  static inline const CSSaveSkillTime* internal_default_instance() {
    return reinterpret_cast<const CSSaveSkillTime*>(
               &_CSSaveSkillTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CSSaveSkillTime& a, CSSaveSkillTime& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSaveSkillTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSaveSkillTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSaveSkillTime* New() const final {
    return CreateMaybeMessage<CSSaveSkillTime>(nullptr);
  }

  CSSaveSkillTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSaveSkillTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSaveSkillTime& from);
  void MergeFrom(const CSSaveSkillTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSaveSkillTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSaveSkillTime";
  }
  protected:
  explicit CSSaveSkillTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoFieldNumber = 1,
    kLockFieldNumber = 2,
    kAngryFieldNumber = 3,
    kTrebleFieldNumber = 4,
  };
  // int32 auto = 1;
  void clear_auto_();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_() const;
  void set_auto_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_() const;
  void _internal_set_auto_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lock = 2;
  void clear_lock();
  ::PROTOBUF_NAMESPACE_ID::int32 lock() const;
  void set_lock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lock() const;
  void _internal_set_lock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 angry = 3;
  void clear_angry();
  ::PROTOBUF_NAMESPACE_ID::int32 angry() const;
  void set_angry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angry() const;
  void _internal_set_angry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 treble = 4;
  void clear_treble();
  ::PROTOBUF_NAMESPACE_ID::int32 treble() const;
  void set_treble(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_treble() const;
  void _internal_set_treble(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSaveSkillTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 auto__;
  ::PROTOBUF_NAMESPACE_ID::int32 lock_;
  ::PROTOBUF_NAMESPACE_ID::int32 angry_;
  ::PROTOBUF_NAMESPACE_ID::int32 treble_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SevenDayTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SevenDayTask) */ {
 public:
  inline SevenDayTask() : SevenDayTask(nullptr) {}
  virtual ~SevenDayTask();

  SevenDayTask(const SevenDayTask& from);
  SevenDayTask(SevenDayTask&& from) noexcept
    : SevenDayTask() {
    *this = ::std::move(from);
  }

  inline SevenDayTask& operator=(const SevenDayTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SevenDayTask& operator=(SevenDayTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SevenDayTask& default_instance();

  static inline const SevenDayTask* internal_default_instance() {
    return reinterpret_cast<const SevenDayTask*>(
               &_SevenDayTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SevenDayTask& a, SevenDayTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SevenDayTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SevenDayTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SevenDayTask* New() const final {
    return CreateMaybeMessage<SevenDayTask>(nullptr);
  }

  SevenDayTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SevenDayTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SevenDayTask& from);
  void MergeFrom(const SevenDayTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SevenDayTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SevenDayTask";
  }
  protected:
  explicit SevenDayTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kFishIdFieldNumber = 2,
    kTotalNumFieldNumber = 3,
    kCurNumFieldNumber = 4,
    kStatusFieldNumber = 5,
    kAwardFieldNumber = 6,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_id = 2;
  void clear_fish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id() const;
  void set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id() const;
  void _internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_num = 3;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_num = 4;
  void clear_cur_num();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_num() const;
  void set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_num() const;
  void _internal_set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 6;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SevenDayTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SevenDayDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SevenDayDetail) */ {
 public:
  inline SevenDayDetail() : SevenDayDetail(nullptr) {}
  virtual ~SevenDayDetail();

  SevenDayDetail(const SevenDayDetail& from);
  SevenDayDetail(SevenDayDetail&& from) noexcept
    : SevenDayDetail() {
    *this = ::std::move(from);
  }

  inline SevenDayDetail& operator=(const SevenDayDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SevenDayDetail& operator=(SevenDayDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SevenDayDetail& default_instance();

  static inline const SevenDayDetail* internal_default_instance() {
    return reinterpret_cast<const SevenDayDetail*>(
               &_SevenDayDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SevenDayDetail& a, SevenDayDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SevenDayDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SevenDayDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SevenDayDetail* New() const final {
    return CreateMaybeMessage<SevenDayDetail>(nullptr);
  }

  SevenDayDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SevenDayDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SevenDayDetail& from);
  void MergeFrom(const SevenDayDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SevenDayDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SevenDayDetail";
  }
  protected:
  explicit SevenDayDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 3,
    kDayFieldNumber = 1,
    kBoxStatusFieldNumber = 2,
  };
  // .F4BY.SevenDayTask task = 3;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::F4BY::SevenDayTask& task() const;
  ::F4BY::SevenDayTask* release_task();
  ::F4BY::SevenDayTask* mutable_task();
  void set_allocated_task(::F4BY::SevenDayTask* task);
  private:
  const ::F4BY::SevenDayTask& _internal_task() const;
  ::F4BY::SevenDayTask* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::F4BY::SevenDayTask* task);
  ::F4BY::SevenDayTask* unsafe_arena_release_task();

  // int32 day = 1;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 box_status = 2;
  void clear_box_status();
  ::PROTOBUF_NAMESPACE_ID::int32 box_status() const;
  void set_box_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_box_status() const;
  void _internal_set_box_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SevenDayDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::SevenDayTask* task_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 box_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSevenDayInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSevenDayInfo) */ {
 public:
  inline CSSevenDayInfo() : CSSevenDayInfo(nullptr) {}
  virtual ~CSSevenDayInfo();

  CSSevenDayInfo(const CSSevenDayInfo& from);
  CSSevenDayInfo(CSSevenDayInfo&& from) noexcept
    : CSSevenDayInfo() {
    *this = ::std::move(from);
  }

  inline CSSevenDayInfo& operator=(const CSSevenDayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSevenDayInfo& operator=(CSSevenDayInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSevenDayInfo& default_instance();

  static inline const CSSevenDayInfo* internal_default_instance() {
    return reinterpret_cast<const CSSevenDayInfo*>(
               &_CSSevenDayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CSSevenDayInfo& a, CSSevenDayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSevenDayInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSevenDayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSevenDayInfo* New() const final {
    return CreateMaybeMessage<CSSevenDayInfo>(nullptr);
  }

  CSSevenDayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSevenDayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSevenDayInfo& from);
  void MergeFrom(const CSSevenDayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSevenDayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSevenDayInfo";
  }
  protected:
  explicit CSSevenDayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSSevenDayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSevenDayInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSevenDayInfo) */ {
 public:
  inline SCSevenDayInfo() : SCSevenDayInfo(nullptr) {}
  virtual ~SCSevenDayInfo();

  SCSevenDayInfo(const SCSevenDayInfo& from);
  SCSevenDayInfo(SCSevenDayInfo&& from) noexcept
    : SCSevenDayInfo() {
    *this = ::std::move(from);
  }

  inline SCSevenDayInfo& operator=(const SCSevenDayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSevenDayInfo& operator=(SCSevenDayInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSevenDayInfo& default_instance();

  static inline const SCSevenDayInfo* internal_default_instance() {
    return reinterpret_cast<const SCSevenDayInfo*>(
               &_SCSevenDayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SCSevenDayInfo& a, SCSevenDayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSevenDayInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSevenDayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSevenDayInfo* New() const final {
    return CreateMaybeMessage<SCSevenDayInfo>(nullptr);
  }

  SCSevenDayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSevenDayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSevenDayInfo& from);
  void MergeFrom(const SCSevenDayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSevenDayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSevenDayInfo";
  }
  protected:
  explicit SCSevenDayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kDetailFieldNumber = 7,
    kCurDayFieldNumber = 3,
    kGetRemainFieldNumber = 4,
    kRemainScoreFieldNumber = 5,
    kTicketFieldNumber = 6,
    kGunEnableFieldNumber = 8,
  };
  // string start_date = 1;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // .F4BY.SevenDayDetail detail = 7;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::F4BY::SevenDayDetail& detail() const;
  ::F4BY::SevenDayDetail* release_detail();
  ::F4BY::SevenDayDetail* mutable_detail();
  void set_allocated_detail(::F4BY::SevenDayDetail* detail);
  private:
  const ::F4BY::SevenDayDetail& _internal_detail() const;
  ::F4BY::SevenDayDetail* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::F4BY::SevenDayDetail* detail);
  ::F4BY::SevenDayDetail* unsafe_arena_release_detail();

  // int32 cur_day = 3;
  void clear_cur_day();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_day() const;
  void set_cur_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_day() const;
  void _internal_set_cur_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 get_remain = 4;
  void clear_get_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 get_remain() const;
  void set_get_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_get_remain() const;
  void _internal_set_get_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain_score = 5;
  void clear_remain_score();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_score() const;
  void set_remain_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_score() const;
  void _internal_set_remain_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 6;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_enable = 8;
  void clear_gun_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_enable() const;
  void set_gun_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_enable() const;
  void _internal_set_gun_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSevenDayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::F4BY::SevenDayDetail* detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 get_remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSevenDayAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSevenDayAward) */ {
 public:
  inline CSSevenDayAward() : CSSevenDayAward(nullptr) {}
  virtual ~CSSevenDayAward();

  CSSevenDayAward(const CSSevenDayAward& from);
  CSSevenDayAward(CSSevenDayAward&& from) noexcept
    : CSSevenDayAward() {
    *this = ::std::move(from);
  }

  inline CSSevenDayAward& operator=(const CSSevenDayAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSevenDayAward& operator=(CSSevenDayAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSevenDayAward& default_instance();

  static inline const CSSevenDayAward* internal_default_instance() {
    return reinterpret_cast<const CSSevenDayAward*>(
               &_CSSevenDayAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CSSevenDayAward& a, CSSevenDayAward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSevenDayAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSevenDayAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSevenDayAward* New() const final {
    return CreateMaybeMessage<CSSevenDayAward>(nullptr);
  }

  CSSevenDayAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSevenDayAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSevenDayAward& from);
  void MergeFrom(const CSSevenDayAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSevenDayAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSevenDayAward";
  }
  protected:
  explicit CSSevenDayAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kIndexFieldNumber = 2,
    kGetAwardTypeFieldNumber = 3,
  };
  // int32 day = 1;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 get_award_type = 3;
  void clear_get_award_type();
  ::PROTOBUF_NAMESPACE_ID::int32 get_award_type() const;
  void set_get_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_get_award_type() const;
  void _internal_set_get_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSevenDayAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 get_award_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSevenDayAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSevenDayAward) */ {
 public:
  inline SCSevenDayAward() : SCSevenDayAward(nullptr) {}
  virtual ~SCSevenDayAward();

  SCSevenDayAward(const SCSevenDayAward& from);
  SCSevenDayAward(SCSevenDayAward&& from) noexcept
    : SCSevenDayAward() {
    *this = ::std::move(from);
  }

  inline SCSevenDayAward& operator=(const SCSevenDayAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSevenDayAward& operator=(SCSevenDayAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSevenDayAward& default_instance();

  static inline const SCSevenDayAward* internal_default_instance() {
    return reinterpret_cast<const SCSevenDayAward*>(
               &_SCSevenDayAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SCSevenDayAward& a, SCSevenDayAward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSevenDayAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSevenDayAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSevenDayAward* New() const final {
    return CreateMaybeMessage<SCSevenDayAward>(nullptr);
  }

  SCSevenDayAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSevenDayAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSevenDayAward& from);
  void MergeFrom(const SCSevenDayAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSevenDayAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSevenDayAward";
  }
  protected:
  explicit SCSevenDayAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 3,
    kScoreFieldNumber = 1,
    kTicketFieldNumber = 2,
  };
  // .F4BY.SevenDayDetail task = 3;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::F4BY::SevenDayDetail& task() const;
  ::F4BY::SevenDayDetail* release_task();
  ::F4BY::SevenDayDetail* mutable_task();
  void set_allocated_task(::F4BY::SevenDayDetail* task);
  private:
  const ::F4BY::SevenDayDetail& _internal_task() const;
  ::F4BY::SevenDayDetail* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::F4BY::SevenDayDetail* task);
  ::F4BY::SevenDayDetail* unsafe_arena_release_task();

  // int32 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 2;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSevenDayAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::SevenDayDetail* task_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCVipChargeAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCVipChargeAward) */ {
 public:
  inline SCVipChargeAward() : SCVipChargeAward(nullptr) {}
  virtual ~SCVipChargeAward();

  SCVipChargeAward(const SCVipChargeAward& from);
  SCVipChargeAward(SCVipChargeAward&& from) noexcept
    : SCVipChargeAward() {
    *this = ::std::move(from);
  }

  inline SCVipChargeAward& operator=(const SCVipChargeAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCVipChargeAward& operator=(SCVipChargeAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCVipChargeAward& default_instance();

  static inline const SCVipChargeAward* internal_default_instance() {
    return reinterpret_cast<const SCVipChargeAward*>(
               &_SCVipChargeAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(SCVipChargeAward& a, SCVipChargeAward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCVipChargeAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCVipChargeAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCVipChargeAward* New() const final {
    return CreateMaybeMessage<SCVipChargeAward>(nullptr);
  }

  SCVipChargeAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCVipChargeAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCVipChargeAward& from);
  void MergeFrom(const SCVipChargeAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCVipChargeAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCVipChargeAward";
  }
  protected:
  explicit SCVipChargeAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kTicketFieldNumber = 2,
  };
  // int32 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 2;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCVipChargeAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSClickStatistic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSClickStatistic) */ {
 public:
  inline CSClickStatistic() : CSClickStatistic(nullptr) {}
  virtual ~CSClickStatistic();

  CSClickStatistic(const CSClickStatistic& from);
  CSClickStatistic(CSClickStatistic&& from) noexcept
    : CSClickStatistic() {
    *this = ::std::move(from);
  }

  inline CSClickStatistic& operator=(const CSClickStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSClickStatistic& operator=(CSClickStatistic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSClickStatistic& default_instance();

  static inline const CSClickStatistic* internal_default_instance() {
    return reinterpret_cast<const CSClickStatistic*>(
               &_CSClickStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CSClickStatistic& a, CSClickStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(CSClickStatistic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSClickStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSClickStatistic* New() const final {
    return CreateMaybeMessage<CSClickStatistic>(nullptr);
  }

  CSClickStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSClickStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSClickStatistic& from);
  void MergeFrom(const CSClickStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSClickStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSClickStatistic";
  }
  protected:
  explicit CSClickStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kNotRepeatFieldNumber = 2,
  };
  // string num = 1;
  void clear_num();
  const std::string& num() const;
  void set_num(const std::string& value);
  void set_num(std::string&& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  std::string* mutable_num();
  std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // bool not_repeat = 2;
  void clear_not_repeat();
  bool not_repeat() const;
  void set_not_repeat(bool value);
  private:
  bool _internal_not_repeat() const;
  void _internal_set_not_repeat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSClickStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  bool not_repeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSNewClickStatistic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSNewClickStatistic) */ {
 public:
  inline CSNewClickStatistic() : CSNewClickStatistic(nullptr) {}
  virtual ~CSNewClickStatistic();

  CSNewClickStatistic(const CSNewClickStatistic& from);
  CSNewClickStatistic(CSNewClickStatistic&& from) noexcept
    : CSNewClickStatistic() {
    *this = ::std::move(from);
  }

  inline CSNewClickStatistic& operator=(const CSNewClickStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNewClickStatistic& operator=(CSNewClickStatistic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSNewClickStatistic& default_instance();

  static inline const CSNewClickStatistic* internal_default_instance() {
    return reinterpret_cast<const CSNewClickStatistic*>(
               &_CSNewClickStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CSNewClickStatistic& a, CSNewClickStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNewClickStatistic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNewClickStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSNewClickStatistic* New() const final {
    return CreateMaybeMessage<CSNewClickStatistic>(nullptr);
  }

  CSNewClickStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSNewClickStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSNewClickStatistic& from);
  void MergeFrom(const CSNewClickStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNewClickStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSNewClickStatistic";
  }
  protected:
  explicit CSNewClickStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // string num = 1;
  void clear_num();
  const std::string& num() const;
  void set_num(const std::string& value);
  void set_num(std::string&& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  std::string* mutable_num();
  std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSNewClickStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserLog) */ {
 public:
  inline CSUserLog() : CSUserLog(nullptr) {}
  virtual ~CSUserLog();

  CSUserLog(const CSUserLog& from);
  CSUserLog(CSUserLog&& from) noexcept
    : CSUserLog() {
    *this = ::std::move(from);
  }

  inline CSUserLog& operator=(const CSUserLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserLog& operator=(CSUserLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserLog& default_instance();

  static inline const CSUserLog* internal_default_instance() {
    return reinterpret_cast<const CSUserLog*>(
               &_CSUserLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CSUserLog& a, CSUserLog& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserLog* New() const final {
    return CreateMaybeMessage<CSUserLog>(nullptr);
  }

  CSUserLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserLog& from);
  void MergeFrom(const CSUserLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserLog";
  }
  protected:
  explicit CSUserLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kContentFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string score = 2;
  void clear_score();
  const std::string& score() const;
  void set_score(const std::string& value);
  void set_score(std::string&& value);
  void set_score(const char* value);
  void set_score(const char* value, size_t size);
  std::string* mutable_score();
  std::string* release_score();
  void set_allocated_score(std::string* score);
  private:
  const std::string& _internal_score() const;
  void _internal_set_score(const std::string& value);
  std::string* _internal_mutable_score();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr score_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUserEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUserEvent) */ {
 public:
  inline CSUserEvent() : CSUserEvent(nullptr) {}
  virtual ~CSUserEvent();

  CSUserEvent(const CSUserEvent& from);
  CSUserEvent(CSUserEvent&& from) noexcept
    : CSUserEvent() {
    *this = ::std::move(from);
  }

  inline CSUserEvent& operator=(const CSUserEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserEvent& operator=(CSUserEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserEvent& default_instance();

  static inline const CSUserEvent* internal_default_instance() {
    return reinterpret_cast<const CSUserEvent*>(
               &_CSUserEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CSUserEvent& a, CSUserEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserEvent* New() const final {
    return CreateMaybeMessage<CSUserEvent>(nullptr);
  }

  CSUserEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserEvent& from);
  void MergeFrom(const CSUserEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUserEvent";
  }
  protected:
  explicit CSUserEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUserEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSGetAwardPoolRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSGetAwardPoolRecord) */ {
 public:
  inline CSGetAwardPoolRecord() : CSGetAwardPoolRecord(nullptr) {}
  virtual ~CSGetAwardPoolRecord();

  CSGetAwardPoolRecord(const CSGetAwardPoolRecord& from);
  CSGetAwardPoolRecord(CSGetAwardPoolRecord&& from) noexcept
    : CSGetAwardPoolRecord() {
    *this = ::std::move(from);
  }

  inline CSGetAwardPoolRecord& operator=(const CSGetAwardPoolRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetAwardPoolRecord& operator=(CSGetAwardPoolRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetAwardPoolRecord& default_instance();

  static inline const CSGetAwardPoolRecord* internal_default_instance() {
    return reinterpret_cast<const CSGetAwardPoolRecord*>(
               &_CSGetAwardPoolRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CSGetAwardPoolRecord& a, CSGetAwardPoolRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetAwardPoolRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetAwardPoolRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetAwardPoolRecord* New() const final {
    return CreateMaybeMessage<CSGetAwardPoolRecord>(nullptr);
  }

  CSGetAwardPoolRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetAwardPoolRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetAwardPoolRecord& from);
  void MergeFrom(const CSGetAwardPoolRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetAwardPoolRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSGetAwardPoolRecord";
  }
  protected:
  explicit CSGetAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSGetAwardPoolRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class AwardPoolRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.AwardPoolRecord) */ {
 public:
  inline AwardPoolRecord() : AwardPoolRecord(nullptr) {}
  virtual ~AwardPoolRecord();

  AwardPoolRecord(const AwardPoolRecord& from);
  AwardPoolRecord(AwardPoolRecord&& from) noexcept
    : AwardPoolRecord() {
    *this = ::std::move(from);
  }

  inline AwardPoolRecord& operator=(const AwardPoolRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardPoolRecord& operator=(AwardPoolRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardPoolRecord& default_instance();

  static inline const AwardPoolRecord* internal_default_instance() {
    return reinterpret_cast<const AwardPoolRecord*>(
               &_AwardPoolRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(AwardPoolRecord& a, AwardPoolRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardPoolRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardPoolRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardPoolRecord* New() const final {
    return CreateMaybeMessage<AwardPoolRecord>(nullptr);
  }

  AwardPoolRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardPoolRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardPoolRecord& from);
  void MergeFrom(const AwardPoolRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardPoolRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.AwardPoolRecord";
  }
  protected:
  explicit AwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNameFieldNumber = 2,
    kPoolIdFieldNumber = 3,
    kAwardFieldNumber = 4,
    kPlayerIdFieldNumber = 5,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 poolId = 3;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poolid() const;
  void _internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 4;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerId = 5;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.AwardPoolRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGetAwardPoolRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGetAwardPoolRecord) */ {
 public:
  inline SCGetAwardPoolRecord() : SCGetAwardPoolRecord(nullptr) {}
  virtual ~SCGetAwardPoolRecord();

  SCGetAwardPoolRecord(const SCGetAwardPoolRecord& from);
  SCGetAwardPoolRecord(SCGetAwardPoolRecord&& from) noexcept
    : SCGetAwardPoolRecord() {
    *this = ::std::move(from);
  }

  inline SCGetAwardPoolRecord& operator=(const SCGetAwardPoolRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetAwardPoolRecord& operator=(SCGetAwardPoolRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetAwardPoolRecord& default_instance();

  static inline const SCGetAwardPoolRecord* internal_default_instance() {
    return reinterpret_cast<const SCGetAwardPoolRecord*>(
               &_SCGetAwardPoolRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SCGetAwardPoolRecord& a, SCGetAwardPoolRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetAwardPoolRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetAwardPoolRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetAwardPoolRecord* New() const final {
    return CreateMaybeMessage<SCGetAwardPoolRecord>(nullptr);
  }

  SCGetAwardPoolRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetAwardPoolRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetAwardPoolRecord& from);
  void MergeFrom(const SCGetAwardPoolRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetAwardPoolRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGetAwardPoolRecord";
  }
  protected:
  explicit SCGetAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .F4BY.AwardPoolRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::F4BY::AwardPoolRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardPoolRecord >*
      mutable_records();
  private:
  const ::F4BY::AwardPoolRecord& _internal_records(int index) const;
  ::F4BY::AwardPoolRecord* _internal_add_records();
  public:
  const ::F4BY::AwardPoolRecord& records(int index) const;
  ::F4BY::AwardPoolRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardPoolRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCGetAwardPoolRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardPoolRecord > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCPropDropNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCPropDropNotify) */ {
 public:
  inline SCPropDropNotify() : SCPropDropNotify(nullptr) {}
  virtual ~SCPropDropNotify();

  SCPropDropNotify(const SCPropDropNotify& from);
  SCPropDropNotify(SCPropDropNotify&& from) noexcept
    : SCPropDropNotify() {
    *this = ::std::move(from);
  }

  inline SCPropDropNotify& operator=(const SCPropDropNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropDropNotify& operator=(SCPropDropNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropDropNotify& default_instance();

  static inline const SCPropDropNotify* internal_default_instance() {
    return reinterpret_cast<const SCPropDropNotify*>(
               &_SCPropDropNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SCPropDropNotify& a, SCPropDropNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropDropNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropDropNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropDropNotify* New() const final {
    return CreateMaybeMessage<SCPropDropNotify>(nullptr);
  }

  SCPropDropNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropDropNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropDropNotify& from);
  void MergeFrom(const SCPropDropNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropDropNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCPropDropNotify";
  }
  protected:
  explicit SCPropDropNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropPropsFieldNumber = 3,
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
  };
  // repeated .F4BY.Object drop_props = 3;
  int drop_props_size() const;
  private:
  int _internal_drop_props_size() const;
  public:
  void clear_drop_props();
  ::F4BY::Object* mutable_drop_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
      mutable_drop_props();
  private:
  const ::F4BY::Object& _internal_drop_props(int index) const;
  ::F4BY::Object* _internal_add_drop_props();
  public:
  const ::F4BY::Object& drop_props(int index) const;
  ::F4BY::Object* add_drop_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
      drop_props() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCPropDropNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object > drop_props_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSUseProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSUseProp) */ {
 public:
  inline CSUseProp() : CSUseProp(nullptr) {}
  virtual ~CSUseProp();

  CSUseProp(const CSUseProp& from);
  CSUseProp(CSUseProp&& from) noexcept
    : CSUseProp() {
    *this = ::std::move(from);
  }

  inline CSUseProp& operator=(const CSUseProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUseProp& operator=(CSUseProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUseProp& default_instance();

  static inline const CSUseProp* internal_default_instance() {
    return reinterpret_cast<const CSUseProp*>(
               &_CSUseProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CSUseProp& a, CSUseProp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUseProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUseProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUseProp* New() const final {
    return CreateMaybeMessage<CSUseProp>(nullptr);
  }

  CSUseProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUseProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUseProp& from);
  void MergeFrom(const CSUseProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUseProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSUseProp";
  }
  protected:
  explicit CSUseProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSUseProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUseProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUseProp) */ {
 public:
  inline SCUseProp() : SCUseProp(nullptr) {}
  virtual ~SCUseProp();

  SCUseProp(const SCUseProp& from);
  SCUseProp(SCUseProp&& from) noexcept
    : SCUseProp() {
    *this = ::std::move(from);
  }

  inline SCUseProp& operator=(const SCUseProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUseProp& operator=(SCUseProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUseProp& default_instance();

  static inline const SCUseProp* internal_default_instance() {
    return reinterpret_cast<const SCUseProp*>(
               &_SCUseProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(SCUseProp& a, SCUseProp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUseProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUseProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUseProp* New() const final {
    return CreateMaybeMessage<SCUseProp>(nullptr);
  }

  SCUseProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUseProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUseProp& from);
  void MergeFrom(const SCUseProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUseProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUseProp";
  }
  protected:
  explicit SCUseProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 5,
    kChairIdxFieldNumber = 1,
    kPropIdFieldNumber = 2,
    kRemainFieldNumber = 3,
    kCodeFieldNumber = 4,
  };
  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_id = 2;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 3;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUseProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCFrozenTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCFrozenTime) */ {
 public:
  inline SCFrozenTime() : SCFrozenTime(nullptr) {}
  virtual ~SCFrozenTime();

  SCFrozenTime(const SCFrozenTime& from);
  SCFrozenTime(SCFrozenTime&& from) noexcept
    : SCFrozenTime() {
    *this = ::std::move(from);
  }

  inline SCFrozenTime& operator=(const SCFrozenTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFrozenTime& operator=(SCFrozenTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFrozenTime& default_instance();

  static inline const SCFrozenTime* internal_default_instance() {
    return reinterpret_cast<const SCFrozenTime*>(
               &_SCFrozenTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(SCFrozenTime& a, SCFrozenTime& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFrozenTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFrozenTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFrozenTime* New() const final {
    return CreateMaybeMessage<SCFrozenTime>(nullptr);
  }

  SCFrozenTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFrozenTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFrozenTime& from);
  void MergeFrom(const SCFrozenTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFrozenTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCFrozenTime";
  }
  protected:
  explicit SCFrozenTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kIsFrozenFieldNumber = 2,
    kFrozenCdFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_frozen = 2;
  void clear_is_frozen();
  bool is_frozen() const;
  void set_is_frozen(bool value);
  private:
  bool _internal_is_frozen() const;
  void _internal_set_is_frozen(bool value);
  public:

  // float frozen_cd = 3;
  void clear_frozen_cd();
  float frozen_cd() const;
  void set_frozen_cd(float value);
  private:
  float _internal_frozen_cd() const;
  void _internal_set_frozen_cd(float value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCFrozenTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool is_frozen_;
  float frozen_cd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTreasureFishInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTreasureFishInfo) */ {
 public:
  inline SCTreasureFishInfo() : SCTreasureFishInfo(nullptr) {}
  virtual ~SCTreasureFishInfo();

  SCTreasureFishInfo(const SCTreasureFishInfo& from);
  SCTreasureFishInfo(SCTreasureFishInfo&& from) noexcept
    : SCTreasureFishInfo() {
    *this = ::std::move(from);
  }

  inline SCTreasureFishInfo& operator=(const SCTreasureFishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTreasureFishInfo& operator=(SCTreasureFishInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTreasureFishInfo& default_instance();

  static inline const SCTreasureFishInfo* internal_default_instance() {
    return reinterpret_cast<const SCTreasureFishInfo*>(
               &_SCTreasureFishInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(SCTreasureFishInfo& a, SCTreasureFishInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTreasureFishInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTreasureFishInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTreasureFishInfo* New() const final {
    return CreateMaybeMessage<SCTreasureFishInfo>(nullptr);
  }

  SCTreasureFishInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTreasureFishInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTreasureFishInfo& from);
  void MergeFrom(const SCTreasureFishInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTreasureFishInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTreasureFishInfo";
  }
  protected:
  explicit SCTreasureFishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
    kCurStageFieldNumber = 2,
    kAccumMoneyFieldNumber = 3,
    kFishValueFieldNumber = 4,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_stage = 2;
  void clear_cur_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_stage() const;
  void set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_stage() const;
  void _internal_set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accum_money = 3;
  void clear_accum_money();
  ::PROTOBUF_NAMESPACE_ID::int32 accum_money() const;
  void set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accum_money() const;
  void _internal_set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_value = 4;
  void clear_fish_value();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value() const;
  void set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_value() const;
  void _internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTreasureFishInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 accum_money_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTreasureFishCatched PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTreasureFishCatched) */ {
 public:
  inline SCTreasureFishCatched() : SCTreasureFishCatched(nullptr) {}
  virtual ~SCTreasureFishCatched();

  SCTreasureFishCatched(const SCTreasureFishCatched& from);
  SCTreasureFishCatched(SCTreasureFishCatched&& from) noexcept
    : SCTreasureFishCatched() {
    *this = ::std::move(from);
  }

  inline SCTreasureFishCatched& operator=(const SCTreasureFishCatched& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTreasureFishCatched& operator=(SCTreasureFishCatched&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTreasureFishCatched& default_instance();

  static inline const SCTreasureFishCatched* internal_default_instance() {
    return reinterpret_cast<const SCTreasureFishCatched*>(
               &_SCTreasureFishCatched_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(SCTreasureFishCatched& a, SCTreasureFishCatched& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTreasureFishCatched* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTreasureFishCatched* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTreasureFishCatched* New() const final {
    return CreateMaybeMessage<SCTreasureFishCatched>(nullptr);
  }

  SCTreasureFishCatched* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTreasureFishCatched>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTreasureFishCatched& from);
  void MergeFrom(const SCTreasureFishCatched& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTreasureFishCatched* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTreasureFishCatched";
  }
  protected:
  explicit SCTreasureFishCatched(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiListFieldNumber = 13,
    kChairIdxFieldNumber = 1,
    kRatioFieldNumber = 2,
    kFishUidFieldNumber = 3,
    kFishValueFieldNumber = 4,
    kAccumMoneyFieldNumber = 5,
    kMultipleFieldNumber = 6,
    kEarnFieldNumber = 8,
    kDeathFieldNumber = 7,
    kDisplayMultipleFieldNumber = 10,
    kUserScoreFieldNumber = 9,
    kCurStageFieldNumber = 11,
    kMagicCubeMultiFieldNumber = 12,
    kOriginUidFieldNumber = 14,
  };
  // repeated .F4BY.MultiInfo multi_list = 13;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 3;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_value = 4;
  void clear_fish_value();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value() const;
  void set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_value() const;
  void _internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accum_money = 5;
  void clear_accum_money();
  ::PROTOBUF_NAMESPACE_ID::int32 accum_money() const;
  void set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accum_money() const;
  void _internal_set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 6;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 8;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool death = 7;
  void clear_death();
  bool death() const;
  void set_death(bool value);
  private:
  bool _internal_death() const;
  void _internal_set_death(bool value);
  public:

  // bool display_multiple = 10;
  void clear_display_multiple();
  bool display_multiple() const;
  void set_display_multiple(bool value);
  private:
  bool _internal_display_multiple() const;
  void _internal_set_display_multiple(bool value);
  public:

  // int64 user_score = 9;
  void clear_user_score();
  ::PROTOBUF_NAMESPACE_ID::int64 user_score() const;
  void set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_score() const;
  void _internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 cur_stage = 11;
  void clear_cur_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_stage() const;
  void set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_stage() const;
  void _internal_set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magic_cube_multi = 12;
  void clear_magic_cube_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi() const;
  void set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magic_cube_multi() const;
  void _internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 origin_uid = 14;
  void clear_origin_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid() const;
  void set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_uid() const;
  void _internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTreasureFishCatched)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 accum_money_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  bool death_;
  bool display_multiple_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class MatchPackAddition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.MatchPackAddition) */ {
 public:
  inline MatchPackAddition() : MatchPackAddition(nullptr) {}
  virtual ~MatchPackAddition();

  MatchPackAddition(const MatchPackAddition& from);
  MatchPackAddition(MatchPackAddition&& from) noexcept
    : MatchPackAddition() {
    *this = ::std::move(from);
  }

  inline MatchPackAddition& operator=(const MatchPackAddition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPackAddition& operator=(MatchPackAddition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchPackAddition& default_instance();

  static inline const MatchPackAddition* internal_default_instance() {
    return reinterpret_cast<const MatchPackAddition*>(
               &_MatchPackAddition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(MatchPackAddition& a, MatchPackAddition& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPackAddition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPackAddition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchPackAddition* New() const final {
    return CreateMaybeMessage<MatchPackAddition>(nullptr);
  }

  MatchPackAddition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchPackAddition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchPackAddition& from);
  void MergeFrom(const MatchPackAddition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPackAddition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.MatchPackAddition";
  }
  protected:
  explicit MatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIsBuyFieldNumber = 2,
    kScoreAdditionFieldNumber = 3,
    kReawardAdditionFieldNumber = 4,
    kCardFieldNumber = 5,
    kSecFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool is_buy = 2;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // float score_addition = 3;
  void clear_score_addition();
  float score_addition() const;
  void set_score_addition(float value);
  private:
  float _internal_score_addition() const;
  void _internal_set_score_addition(float value);
  public:

  // float reaward_addition = 4;
  void clear_reaward_addition();
  float reaward_addition() const;
  void set_reaward_addition(float value);
  private:
  float _internal_reaward_addition() const;
  void _internal_set_reaward_addition(float value);
  public:

  // int32 card = 5;
  void clear_card();
  ::PROTOBUF_NAMESPACE_ID::int32 card() const;
  void set_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card() const;
  void _internal_set_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec = 6;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.MatchPackAddition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool is_buy_;
  float score_addition_;
  float reaward_addition_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSMatchPackAddition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSMatchPackAddition) */ {
 public:
  inline CSMatchPackAddition() : CSMatchPackAddition(nullptr) {}
  virtual ~CSMatchPackAddition();

  CSMatchPackAddition(const CSMatchPackAddition& from);
  CSMatchPackAddition(CSMatchPackAddition&& from) noexcept
    : CSMatchPackAddition() {
    *this = ::std::move(from);
  }

  inline CSMatchPackAddition& operator=(const CSMatchPackAddition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMatchPackAddition& operator=(CSMatchPackAddition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMatchPackAddition& default_instance();

  static inline const CSMatchPackAddition* internal_default_instance() {
    return reinterpret_cast<const CSMatchPackAddition*>(
               &_CSMatchPackAddition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CSMatchPackAddition& a, CSMatchPackAddition& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMatchPackAddition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMatchPackAddition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMatchPackAddition* New() const final {
    return CreateMaybeMessage<CSMatchPackAddition>(nullptr);
  }

  CSMatchPackAddition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMatchPackAddition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMatchPackAddition& from);
  void MergeFrom(const CSMatchPackAddition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMatchPackAddition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSMatchPackAddition";
  }
  protected:
  explicit CSMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSMatchPackAddition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCMatchPackAddition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCMatchPackAddition) */ {
 public:
  inline SCMatchPackAddition() : SCMatchPackAddition(nullptr) {}
  virtual ~SCMatchPackAddition();

  SCMatchPackAddition(const SCMatchPackAddition& from);
  SCMatchPackAddition(SCMatchPackAddition&& from) noexcept
    : SCMatchPackAddition() {
    *this = ::std::move(from);
  }

  inline SCMatchPackAddition& operator=(const SCMatchPackAddition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchPackAddition& operator=(SCMatchPackAddition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchPackAddition& default_instance();

  static inline const SCMatchPackAddition* internal_default_instance() {
    return reinterpret_cast<const SCMatchPackAddition*>(
               &_SCMatchPackAddition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(SCMatchPackAddition& a, SCMatchPackAddition& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchPackAddition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchPackAddition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchPackAddition* New() const final {
    return CreateMaybeMessage<SCMatchPackAddition>(nullptr);
  }

  SCMatchPackAddition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchPackAddition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchPackAddition& from);
  void MergeFrom(const SCMatchPackAddition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchPackAddition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCMatchPackAddition";
  }
  protected:
  explicit SCMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionFieldNumber = 1,
  };
  // repeated .F4BY.MatchPackAddition addition = 1;
  int addition_size() const;
  private:
  int _internal_addition_size() const;
  public:
  void clear_addition();
  ::F4BY::MatchPackAddition* mutable_addition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MatchPackAddition >*
      mutable_addition();
  private:
  const ::F4BY::MatchPackAddition& _internal_addition(int index) const;
  ::F4BY::MatchPackAddition* _internal_add_addition();
  public:
  const ::F4BY::MatchPackAddition& addition(int index) const;
  ::F4BY::MatchPackAddition* add_addition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MatchPackAddition >&
      addition() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCMatchPackAddition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MatchPackAddition > addition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCMatchPackInvail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCMatchPackInvail) */ {
 public:
  inline SCMatchPackInvail() : SCMatchPackInvail(nullptr) {}
  virtual ~SCMatchPackInvail();

  SCMatchPackInvail(const SCMatchPackInvail& from);
  SCMatchPackInvail(SCMatchPackInvail&& from) noexcept
    : SCMatchPackInvail() {
    *this = ::std::move(from);
  }

  inline SCMatchPackInvail& operator=(const SCMatchPackInvail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchPackInvail& operator=(SCMatchPackInvail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchPackInvail& default_instance();

  static inline const SCMatchPackInvail* internal_default_instance() {
    return reinterpret_cast<const SCMatchPackInvail*>(
               &_SCMatchPackInvail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(SCMatchPackInvail& a, SCMatchPackInvail& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchPackInvail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchPackInvail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchPackInvail* New() const final {
    return CreateMaybeMessage<SCMatchPackInvail>(nullptr);
  }

  SCMatchPackInvail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchPackInvail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchPackInvail& from);
  void MergeFrom(const SCMatchPackInvail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchPackInvail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCMatchPackInvail";
  }
  protected:
  explicit SCMatchPackInvail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // string packId = 1;
  void clear_packid();
  const std::string& packid() const;
  void set_packid(const std::string& value);
  void set_packid(std::string&& value);
  void set_packid(const char* value);
  void set_packid(const char* value, size_t size);
  std::string* mutable_packid();
  std::string* release_packid();
  void set_allocated_packid(std::string* packid);
  private:
  const std::string& _internal_packid() const;
  void _internal_set_packid(const std::string& value);
  std::string* _internal_mutable_packid();
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCMatchPackInvail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSMatchPackBuying PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSMatchPackBuying) */ {
 public:
  inline CSMatchPackBuying() : CSMatchPackBuying(nullptr) {}
  virtual ~CSMatchPackBuying();

  CSMatchPackBuying(const CSMatchPackBuying& from);
  CSMatchPackBuying(CSMatchPackBuying&& from) noexcept
    : CSMatchPackBuying() {
    *this = ::std::move(from);
  }

  inline CSMatchPackBuying& operator=(const CSMatchPackBuying& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMatchPackBuying& operator=(CSMatchPackBuying&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMatchPackBuying& default_instance();

  static inline const CSMatchPackBuying* internal_default_instance() {
    return reinterpret_cast<const CSMatchPackBuying*>(
               &_CSMatchPackBuying_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CSMatchPackBuying& a, CSMatchPackBuying& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMatchPackBuying* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMatchPackBuying* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMatchPackBuying* New() const final {
    return CreateMaybeMessage<CSMatchPackBuying>(nullptr);
  }

  CSMatchPackBuying* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMatchPackBuying>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMatchPackBuying& from);
  void MergeFrom(const CSMatchPackBuying& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMatchPackBuying* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSMatchPackBuying";
  }
  protected:
  explicit CSMatchPackBuying(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // string packId = 1;
  void clear_packid();
  const std::string& packid() const;
  void set_packid(const std::string& value);
  void set_packid(std::string&& value);
  void set_packid(const char* value);
  void set_packid(const char* value, size_t size);
  std::string* mutable_packid();
  std::string* release_packid();
  void set_allocated_packid(std::string* packid);
  private:
  const std::string& _internal_packid() const;
  void _internal_set_packid(const std::string& value);
  std::string* _internal_mutable_packid();
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSMatchPackBuying)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class AwardDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.AwardDetail) */ {
 public:
  inline AwardDetail() : AwardDetail(nullptr) {}
  virtual ~AwardDetail();

  AwardDetail(const AwardDetail& from);
  AwardDetail(AwardDetail&& from) noexcept
    : AwardDetail() {
    *this = ::std::move(from);
  }

  inline AwardDetail& operator=(const AwardDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardDetail& operator=(AwardDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardDetail& default_instance();

  static inline const AwardDetail* internal_default_instance() {
    return reinterpret_cast<const AwardDetail*>(
               &_AwardDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(AwardDetail& a, AwardDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardDetail* New() const final {
    return CreateMaybeMessage<AwardDetail>(nullptr);
  }

  AwardDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardDetail& from);
  void MergeFrom(const AwardDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.AwardDetail";
  }
  protected:
  explicit AwardDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 5,
    kPhotoFieldNumber = 6,
    kPlayerIdFieldNumber = 1,
    kNumsFieldNumber = 2,
    kPeriodFieldNumber = 3,
    kVipFieldNumber = 4,
  };
  // string nick = 5;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string photo = 6;
  void clear_photo();
  const std::string& photo() const;
  void set_photo(const std::string& value);
  void set_photo(std::string&& value);
  void set_photo(const char* value);
  void set_photo(const char* value, size_t size);
  std::string* mutable_photo();
  std::string* release_photo();
  void set_allocated_photo(std::string* photo);
  private:
  const std::string& _internal_photo() const;
  void _internal_set_photo(const std::string& value);
  std::string* _internal_mutable_photo();
  public:

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nums = 2;
  void clear_nums();
  ::PROTOBUF_NAMESPACE_ID::int32 nums() const;
  void set_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nums() const;
  void _internal_set_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 period = 3;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::int32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip = 4;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.AwardDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr photo_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nums_;
  ::PROTOBUF_NAMESPACE_ID::int32 period_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class LuckyAwardNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.LuckyAwardNotify) */ {
 public:
  inline LuckyAwardNotify() : LuckyAwardNotify(nullptr) {}
  virtual ~LuckyAwardNotify();

  LuckyAwardNotify(const LuckyAwardNotify& from);
  LuckyAwardNotify(LuckyAwardNotify&& from) noexcept
    : LuckyAwardNotify() {
    *this = ::std::move(from);
  }

  inline LuckyAwardNotify& operator=(const LuckyAwardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline LuckyAwardNotify& operator=(LuckyAwardNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LuckyAwardNotify& default_instance();

  static inline const LuckyAwardNotify* internal_default_instance() {
    return reinterpret_cast<const LuckyAwardNotify*>(
               &_LuckyAwardNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(LuckyAwardNotify& a, LuckyAwardNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(LuckyAwardNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LuckyAwardNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LuckyAwardNotify* New() const final {
    return CreateMaybeMessage<LuckyAwardNotify>(nullptr);
  }

  LuckyAwardNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LuckyAwardNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LuckyAwardNotify& from);
  void MergeFrom(const LuckyAwardNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LuckyAwardNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.LuckyAwardNotify";
  }
  protected:
  explicit LuckyAwardNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kAwardTypeFieldNumber = 1,
  };
  // repeated .F4BY.AwardDetail detail = 2;
  int detail_size() const;
  private:
  int _internal_detail_size() const;
  public:
  void clear_detail();
  ::F4BY::AwardDetail* mutable_detail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardDetail >*
      mutable_detail();
  private:
  const ::F4BY::AwardDetail& _internal_detail(int index) const;
  ::F4BY::AwardDetail* _internal_add_detail();
  public:
  const ::F4BY::AwardDetail& detail(int index) const;
  ::F4BY::AwardDetail* add_detail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardDetail >&
      detail() const;

  // int32 awardType = 1;
  void clear_awardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 awardtype() const;
  void set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_awardtype() const;
  void _internal_set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.LuckyAwardNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardDetail > detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 awardtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSGameItemSwitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSGameItemSwitch) */ {
 public:
  inline CSGameItemSwitch() : CSGameItemSwitch(nullptr) {}
  virtual ~CSGameItemSwitch();

  CSGameItemSwitch(const CSGameItemSwitch& from);
  CSGameItemSwitch(CSGameItemSwitch&& from) noexcept
    : CSGameItemSwitch() {
    *this = ::std::move(from);
  }

  inline CSGameItemSwitch& operator=(const CSGameItemSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGameItemSwitch& operator=(CSGameItemSwitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGameItemSwitch& default_instance();

  static inline const CSGameItemSwitch* internal_default_instance() {
    return reinterpret_cast<const CSGameItemSwitch*>(
               &_CSGameItemSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CSGameItemSwitch& a, CSGameItemSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGameItemSwitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGameItemSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGameItemSwitch* New() const final {
    return CreateMaybeMessage<CSGameItemSwitch>(nullptr);
  }

  CSGameItemSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGameItemSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGameItemSwitch& from);
  void MergeFrom(const CSGameItemSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGameItemSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSGameItemSwitch";
  }
  protected:
  explicit CSGameItemSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSGameItemSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGameItemSwitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGameItemSwitch) */ {
 public:
  inline SCGameItemSwitch() : SCGameItemSwitch(nullptr) {}
  virtual ~SCGameItemSwitch();

  SCGameItemSwitch(const SCGameItemSwitch& from);
  SCGameItemSwitch(SCGameItemSwitch&& from) noexcept
    : SCGameItemSwitch() {
    *this = ::std::move(from);
  }

  inline SCGameItemSwitch& operator=(const SCGameItemSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGameItemSwitch& operator=(SCGameItemSwitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGameItemSwitch& default_instance();

  static inline const SCGameItemSwitch* internal_default_instance() {
    return reinterpret_cast<const SCGameItemSwitch*>(
               &_SCGameItemSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(SCGameItemSwitch& a, SCGameItemSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGameItemSwitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGameItemSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGameItemSwitch* New() const final {
    return CreateMaybeMessage<SCGameItemSwitch>(nullptr);
  }

  SCGameItemSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGameItemSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGameItemSwitch& from);
  void MergeFrom(const SCGameItemSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGameItemSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGameItemSwitch";
  }
  protected:
  explicit SCGameItemSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLuckyTaskFieldNumber = 1,
  };
  // bool lucky_task = 1;
  void clear_lucky_task();
  bool lucky_task() const;
  void set_lucky_task(bool value);
  private:
  bool _internal_lucky_task() const;
  void _internal_set_lucky_task(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCGameItemSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool lucky_task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class AwardProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.AwardProp) */ {
 public:
  inline AwardProp() : AwardProp(nullptr) {}
  virtual ~AwardProp();

  AwardProp(const AwardProp& from);
  AwardProp(AwardProp&& from) noexcept
    : AwardProp() {
    *this = ::std::move(from);
  }

  inline AwardProp& operator=(const AwardProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardProp& operator=(AwardProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardProp& default_instance();

  static inline const AwardProp* internal_default_instance() {
    return reinterpret_cast<const AwardProp*>(
               &_AwardProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(AwardProp& a, AwardProp& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardProp* New() const final {
    return CreateMaybeMessage<AwardProp>(nullptr);
  }

  AwardProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardProp& from);
  void MergeFrom(const AwardProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.AwardProp";
  }
  protected:
  explicit AwardProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.AwardProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class LuckyTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.LuckyTaskInfo) */ {
 public:
  inline LuckyTaskInfo() : LuckyTaskInfo(nullptr) {}
  virtual ~LuckyTaskInfo();

  LuckyTaskInfo(const LuckyTaskInfo& from);
  LuckyTaskInfo(LuckyTaskInfo&& from) noexcept
    : LuckyTaskInfo() {
    *this = ::std::move(from);
  }

  inline LuckyTaskInfo& operator=(const LuckyTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LuckyTaskInfo& operator=(LuckyTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LuckyTaskInfo& default_instance();

  static inline const LuckyTaskInfo* internal_default_instance() {
    return reinterpret_cast<const LuckyTaskInfo*>(
               &_LuckyTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(LuckyTaskInfo& a, LuckyTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LuckyTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LuckyTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LuckyTaskInfo* New() const final {
    return CreateMaybeMessage<LuckyTaskInfo>(nullptr);
  }

  LuckyTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LuckyTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LuckyTaskInfo& from);
  void MergeFrom(const LuckyTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LuckyTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.LuckyTaskInfo";
  }
  protected:
  explicit LuckyTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 4,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kScoreFieldNumber = 3,
    kAmountFieldNumber = 5,
    kTargetFieldNumber = 6,
  };
  // string text = 4;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 amount = 5;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target = 6;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.LuckyTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyDrawInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLuckyDrawInfo) */ {
 public:
  inline CSLuckyDrawInfo() : CSLuckyDrawInfo(nullptr) {}
  virtual ~CSLuckyDrawInfo();

  CSLuckyDrawInfo(const CSLuckyDrawInfo& from);
  CSLuckyDrawInfo(CSLuckyDrawInfo&& from) noexcept
    : CSLuckyDrawInfo() {
    *this = ::std::move(from);
  }

  inline CSLuckyDrawInfo& operator=(const CSLuckyDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyDrawInfo& operator=(CSLuckyDrawInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyDrawInfo& default_instance();

  static inline const CSLuckyDrawInfo* internal_default_instance() {
    return reinterpret_cast<const CSLuckyDrawInfo*>(
               &_CSLuckyDrawInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CSLuckyDrawInfo& a, CSLuckyDrawInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyDrawInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyDrawInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyDrawInfo* New() const final {
    return CreateMaybeMessage<CSLuckyDrawInfo>(nullptr);
  }

  CSLuckyDrawInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyDrawInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyDrawInfo& from);
  void MergeFrom(const CSLuckyDrawInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyDrawInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLuckyDrawInfo";
  }
  protected:
  explicit CSLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSLuckyDrawInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyDrawInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLuckyDrawInfo) */ {
 public:
  inline SCLuckyDrawInfo() : SCLuckyDrawInfo(nullptr) {}
  virtual ~SCLuckyDrawInfo();

  SCLuckyDrawInfo(const SCLuckyDrawInfo& from);
  SCLuckyDrawInfo(SCLuckyDrawInfo&& from) noexcept
    : SCLuckyDrawInfo() {
    *this = ::std::move(from);
  }

  inline SCLuckyDrawInfo& operator=(const SCLuckyDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyDrawInfo& operator=(SCLuckyDrawInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyDrawInfo& default_instance();

  static inline const SCLuckyDrawInfo* internal_default_instance() {
    return reinterpret_cast<const SCLuckyDrawInfo*>(
               &_SCLuckyDrawInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(SCLuckyDrawInfo& a, SCLuckyDrawInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyDrawInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyDrawInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyDrawInfo* New() const final {
    return CreateMaybeMessage<SCLuckyDrawInfo>(nullptr);
  }

  SCLuckyDrawInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyDrawInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyDrawInfo& from);
  void MergeFrom(const SCLuckyDrawInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyDrawInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLuckyDrawInfo";
  }
  protected:
  explicit SCLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourRewardFieldNumber = 3,
    kDayRewardFieldNumber = 4,
    kDayLuckyNumsFieldNumber = 5,
    kTaskInfoFieldNumber = 12,
    kHourLuckyNumsFieldNumber = 15,
    kHourRemainSecFieldNumber = 1,
    kDayRemainSecFieldNumber = 2,
    kScoreFieldNumber = 6,
    kHourTotalFieldNumber = 7,
    kDayTotalFieldNumber = 8,
    kHourAwardNumFieldNumber = 9,
    kDayAwardNumFieldNumber = 10,
    kNextStartTickFieldNumber = 11,
    kExchangeScoreFieldNumber = 13,
    kNextRemainSecFieldNumber = 14,
  };
  // repeated .F4BY.AwardProp hour_reward = 3;
  int hour_reward_size() const;
  private:
  int _internal_hour_reward_size() const;
  public:
  void clear_hour_reward();
  ::F4BY::AwardProp* mutable_hour_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >*
      mutable_hour_reward();
  private:
  const ::F4BY::AwardProp& _internal_hour_reward(int index) const;
  ::F4BY::AwardProp* _internal_add_hour_reward();
  public:
  const ::F4BY::AwardProp& hour_reward(int index) const;
  ::F4BY::AwardProp* add_hour_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >&
      hour_reward() const;

  // repeated .F4BY.AwardProp day_reward = 4;
  int day_reward_size() const;
  private:
  int _internal_day_reward_size() const;
  public:
  void clear_day_reward();
  ::F4BY::AwardProp* mutable_day_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >*
      mutable_day_reward();
  private:
  const ::F4BY::AwardProp& _internal_day_reward(int index) const;
  ::F4BY::AwardProp* _internal_add_day_reward();
  public:
  const ::F4BY::AwardProp& day_reward(int index) const;
  ::F4BY::AwardProp* add_day_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >&
      day_reward() const;

  // repeated int32 day_lucky_nums = 5;
  int day_lucky_nums_size() const;
  private:
  int _internal_day_lucky_nums_size() const;
  public:
  void clear_day_lucky_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_lucky_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_day_lucky_nums() const;
  void _internal_add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_day_lucky_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 day_lucky_nums(int index) const;
  void set_day_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      day_lucky_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_day_lucky_nums();

  // repeated .F4BY.LuckyTaskInfo task_info = 12;
  int task_info_size() const;
  private:
  int _internal_task_info_size() const;
  public:
  void clear_task_info();
  ::F4BY::LuckyTaskInfo* mutable_task_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyTaskInfo >*
      mutable_task_info();
  private:
  const ::F4BY::LuckyTaskInfo& _internal_task_info(int index) const;
  ::F4BY::LuckyTaskInfo* _internal_add_task_info();
  public:
  const ::F4BY::LuckyTaskInfo& task_info(int index) const;
  ::F4BY::LuckyTaskInfo* add_task_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyTaskInfo >&
      task_info() const;

  // repeated int32 hour_lucky_nums = 15;
  int hour_lucky_nums_size() const;
  private:
  int _internal_hour_lucky_nums_size() const;
  public:
  void clear_hour_lucky_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_lucky_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hour_lucky_nums() const;
  void _internal_add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hour_lucky_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hour_lucky_nums(int index) const;
  void set_hour_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hour_lucky_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hour_lucky_nums();

  // int32 hour_remain_sec = 1;
  void clear_hour_remain_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 hour_remain_sec() const;
  void set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_remain_sec() const;
  void _internal_set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_remain_sec = 2;
  void clear_day_remain_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 day_remain_sec() const;
  void set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_remain_sec() const;
  void _internal_set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 6;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hour_total = 7;
  void clear_hour_total();
  ::PROTOBUF_NAMESPACE_ID::int32 hour_total() const;
  void set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_total() const;
  void _internal_set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_total = 8;
  void clear_day_total();
  ::PROTOBUF_NAMESPACE_ID::int32 day_total() const;
  void set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_total() const;
  void _internal_set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hour_award_num = 9;
  void clear_hour_award_num();
  ::PROTOBUF_NAMESPACE_ID::int32 hour_award_num() const;
  void set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_award_num() const;
  void _internal_set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_award_num = 10;
  void clear_day_award_num();
  ::PROTOBUF_NAMESPACE_ID::int32 day_award_num() const;
  void set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_award_num() const;
  void _internal_set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next_start_tick = 11;
  void clear_next_start_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 next_start_tick() const;
  void set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next_start_tick() const;
  void _internal_set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exchange_score = 13;
  void clear_exchange_score();
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_score() const;
  void set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exchange_score() const;
  void _internal_set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next_remain_sec = 14;
  void clear_next_remain_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 next_remain_sec() const;
  void set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next_remain_sec() const;
  void _internal_set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCLuckyDrawInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp > hour_reward_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp > day_reward_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > day_lucky_nums_;
  mutable std::atomic<int> _day_lucky_nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyTaskInfo > task_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hour_lucky_nums_;
  mutable std::atomic<int> _hour_lucky_nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_remain_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_remain_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_award_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_award_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_start_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_remain_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSGetLuckyTaskAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSGetLuckyTaskAward) */ {
 public:
  inline CSGetLuckyTaskAward() : CSGetLuckyTaskAward(nullptr) {}
  virtual ~CSGetLuckyTaskAward();

  CSGetLuckyTaskAward(const CSGetLuckyTaskAward& from);
  CSGetLuckyTaskAward(CSGetLuckyTaskAward&& from) noexcept
    : CSGetLuckyTaskAward() {
    *this = ::std::move(from);
  }

  inline CSGetLuckyTaskAward& operator=(const CSGetLuckyTaskAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetLuckyTaskAward& operator=(CSGetLuckyTaskAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetLuckyTaskAward& default_instance();

  static inline const CSGetLuckyTaskAward* internal_default_instance() {
    return reinterpret_cast<const CSGetLuckyTaskAward*>(
               &_CSGetLuckyTaskAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CSGetLuckyTaskAward& a, CSGetLuckyTaskAward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetLuckyTaskAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetLuckyTaskAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetLuckyTaskAward* New() const final {
    return CreateMaybeMessage<CSGetLuckyTaskAward>(nullptr);
  }

  CSGetLuckyTaskAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetLuckyTaskAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetLuckyTaskAward& from);
  void MergeFrom(const CSGetLuckyTaskAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetLuckyTaskAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSGetLuckyTaskAward";
  }
  protected:
  explicit CSGetLuckyTaskAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSGetLuckyTaskAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGetLuckyTaskAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGetLuckyTaskAward) */ {
 public:
  inline SCGetLuckyTaskAward() : SCGetLuckyTaskAward(nullptr) {}
  virtual ~SCGetLuckyTaskAward();

  SCGetLuckyTaskAward(const SCGetLuckyTaskAward& from);
  SCGetLuckyTaskAward(SCGetLuckyTaskAward&& from) noexcept
    : SCGetLuckyTaskAward() {
    *this = ::std::move(from);
  }

  inline SCGetLuckyTaskAward& operator=(const SCGetLuckyTaskAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetLuckyTaskAward& operator=(SCGetLuckyTaskAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetLuckyTaskAward& default_instance();

  static inline const SCGetLuckyTaskAward* internal_default_instance() {
    return reinterpret_cast<const SCGetLuckyTaskAward*>(
               &_SCGetLuckyTaskAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(SCGetLuckyTaskAward& a, SCGetLuckyTaskAward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetLuckyTaskAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetLuckyTaskAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetLuckyTaskAward* New() const final {
    return CreateMaybeMessage<SCGetLuckyTaskAward>(nullptr);
  }

  SCGetLuckyTaskAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetLuckyTaskAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetLuckyTaskAward& from);
  void MergeFrom(const SCGetLuckyTaskAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetLuckyTaskAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGetLuckyTaskAward";
  }
  protected:
  explicit SCGetLuckyTaskAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kScoreFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // .F4BY.LuckyTaskInfo task = 1;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::F4BY::LuckyTaskInfo& task() const;
  ::F4BY::LuckyTaskInfo* release_task();
  ::F4BY::LuckyTaskInfo* mutable_task();
  void set_allocated_task(::F4BY::LuckyTaskInfo* task);
  private:
  const ::F4BY::LuckyTaskInfo& _internal_task() const;
  ::F4BY::LuckyTaskInfo* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::F4BY::LuckyTaskInfo* task);
  ::F4BY::LuckyTaskInfo* unsafe_arena_release_task();

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCGetLuckyTaskAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::LuckyTaskInfo* task_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSGetLuckyNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSGetLuckyNum) */ {
 public:
  inline CSGetLuckyNum() : CSGetLuckyNum(nullptr) {}
  virtual ~CSGetLuckyNum();

  CSGetLuckyNum(const CSGetLuckyNum& from);
  CSGetLuckyNum(CSGetLuckyNum&& from) noexcept
    : CSGetLuckyNum() {
    *this = ::std::move(from);
  }

  inline CSGetLuckyNum& operator=(const CSGetLuckyNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetLuckyNum& operator=(CSGetLuckyNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetLuckyNum& default_instance();

  static inline const CSGetLuckyNum* internal_default_instance() {
    return reinterpret_cast<const CSGetLuckyNum*>(
               &_CSGetLuckyNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(CSGetLuckyNum& a, CSGetLuckyNum& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetLuckyNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetLuckyNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetLuckyNum* New() const final {
    return CreateMaybeMessage<CSGetLuckyNum>(nullptr);
  }

  CSGetLuckyNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetLuckyNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetLuckyNum& from);
  void MergeFrom(const CSGetLuckyNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetLuckyNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSGetLuckyNum";
  }
  protected:
  explicit CSGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimesFieldNumber = 1,
  };
  // int32 times = 1;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSGetLuckyNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGetLuckyNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGetLuckyNum) */ {
 public:
  inline SCGetLuckyNum() : SCGetLuckyNum(nullptr) {}
  virtual ~SCGetLuckyNum();

  SCGetLuckyNum(const SCGetLuckyNum& from);
  SCGetLuckyNum(SCGetLuckyNum&& from) noexcept
    : SCGetLuckyNum() {
    *this = ::std::move(from);
  }

  inline SCGetLuckyNum& operator=(const SCGetLuckyNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetLuckyNum& operator=(SCGetLuckyNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetLuckyNum& default_instance();

  static inline const SCGetLuckyNum* internal_default_instance() {
    return reinterpret_cast<const SCGetLuckyNum*>(
               &_SCGetLuckyNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(SCGetLuckyNum& a, SCGetLuckyNum& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetLuckyNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetLuckyNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetLuckyNum* New() const final {
    return CreateMaybeMessage<SCGetLuckyNum>(nullptr);
  }

  SCGetLuckyNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetLuckyNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetLuckyNum& from);
  void MergeFrom(const SCGetLuckyNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetLuckyNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGetLuckyNum";
  }
  protected:
  explicit SCGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLuckyNumsFieldNumber = 3,
    kScoreFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // repeated int32 lucky_nums = 3;
  int lucky_nums_size() const;
  private:
  int _internal_lucky_nums_size() const;
  public:
  void clear_lucky_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_lucky_nums() const;
  void _internal_add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_lucky_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_nums(int index) const;
  void set_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      lucky_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_lucky_nums();

  // int32 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 2;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCGetLuckyNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > lucky_nums_;
  mutable std::atomic<int> _lucky_nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyRedDot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLuckyRedDot) */ {
 public:
  inline CSLuckyRedDot() : CSLuckyRedDot(nullptr) {}
  virtual ~CSLuckyRedDot();

  CSLuckyRedDot(const CSLuckyRedDot& from);
  CSLuckyRedDot(CSLuckyRedDot&& from) noexcept
    : CSLuckyRedDot() {
    *this = ::std::move(from);
  }

  inline CSLuckyRedDot& operator=(const CSLuckyRedDot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyRedDot& operator=(CSLuckyRedDot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyRedDot& default_instance();

  static inline const CSLuckyRedDot* internal_default_instance() {
    return reinterpret_cast<const CSLuckyRedDot*>(
               &_CSLuckyRedDot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(CSLuckyRedDot& a, CSLuckyRedDot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyRedDot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyRedDot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyRedDot* New() const final {
    return CreateMaybeMessage<CSLuckyRedDot>(nullptr);
  }

  CSLuckyRedDot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyRedDot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyRedDot& from);
  void MergeFrom(const CSLuckyRedDot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyRedDot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLuckyRedDot";
  }
  protected:
  explicit CSLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSLuckyRedDot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyRedDot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLuckyRedDot) */ {
 public:
  inline SCLuckyRedDot() : SCLuckyRedDot(nullptr) {}
  virtual ~SCLuckyRedDot();

  SCLuckyRedDot(const SCLuckyRedDot& from);
  SCLuckyRedDot(SCLuckyRedDot&& from) noexcept
    : SCLuckyRedDot() {
    *this = ::std::move(from);
  }

  inline SCLuckyRedDot& operator=(const SCLuckyRedDot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyRedDot& operator=(SCLuckyRedDot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyRedDot& default_instance();

  static inline const SCLuckyRedDot* internal_default_instance() {
    return reinterpret_cast<const SCLuckyRedDot*>(
               &_SCLuckyRedDot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(SCLuckyRedDot& a, SCLuckyRedDot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyRedDot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyRedDot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyRedDot* New() const final {
    return CreateMaybeMessage<SCLuckyRedDot>(nullptr);
  }

  SCLuckyRedDot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyRedDot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyRedDot& from);
  void MergeFrom(const SCLuckyRedDot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyRedDot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLuckyRedDot";
  }
  protected:
  explicit SCLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // bool show = 1;
  void clear_show();
  bool show() const;
  void set_show(bool value);
  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCLuckyRedDot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class LuckyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.LuckyRecord) */ {
 public:
  inline LuckyRecord() : LuckyRecord(nullptr) {}
  virtual ~LuckyRecord();

  LuckyRecord(const LuckyRecord& from);
  LuckyRecord(LuckyRecord&& from) noexcept
    : LuckyRecord() {
    *this = ::std::move(from);
  }

  inline LuckyRecord& operator=(const LuckyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LuckyRecord& operator=(LuckyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LuckyRecord& default_instance();

  static inline const LuckyRecord* internal_default_instance() {
    return reinterpret_cast<const LuckyRecord*>(
               &_LuckyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(LuckyRecord& a, LuckyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LuckyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LuckyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LuckyRecord* New() const final {
    return CreateMaybeMessage<LuckyRecord>(nullptr);
  }

  LuckyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LuckyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LuckyRecord& from);
  void MergeFrom(const LuckyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LuckyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.LuckyRecord";
  }
  protected:
  explicit LuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 5,
    kVipFieldNumber = 1,
    kTimesFieldNumber = 2,
    kLuckyNumFieldNumber = 3,
    kTickFieldNumber = 4,
  };
  // string nick_name = 5;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int32 vip = 1;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lucky_num = 3;
  void clear_lucky_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num() const;
  void set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_num() const;
  void _internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tick = 4;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.LuckyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class OwnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.OwnRecord) */ {
 public:
  inline OwnRecord() : OwnRecord(nullptr) {}
  virtual ~OwnRecord();

  OwnRecord(const OwnRecord& from);
  OwnRecord(OwnRecord&& from) noexcept
    : OwnRecord() {
    *this = ::std::move(from);
  }

  inline OwnRecord& operator=(const OwnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnRecord& operator=(OwnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OwnRecord& default_instance();

  static inline const OwnRecord* internal_default_instance() {
    return reinterpret_cast<const OwnRecord*>(
               &_OwnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(OwnRecord& a, OwnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnRecord* New() const final {
    return CreateMaybeMessage<OwnRecord>(nullptr);
  }

  OwnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnRecord& from);
  void MergeFrom(const OwnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.OwnRecord";
  }
  protected:
  explicit OwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTickFieldNumber = 3,
    kLuckyNumFieldNumber = 4,
  };
  // repeated .F4BY.AwardProp reward = 1;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  ::F4BY::AwardProp* mutable_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >*
      mutable_reward();
  private:
  const ::F4BY::AwardProp& _internal_reward(int index) const;
  ::F4BY::AwardProp* _internal_add_reward();
  public:
  const ::F4BY::AwardProp& reward(int index) const;
  ::F4BY::AwardProp* add_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >&
      reward() const;

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lucky_num = 4;
  void clear_lucky_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num() const;
  void set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_num() const;
  void _internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.OwnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp > reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSLuckyRecord) */ {
 public:
  inline CSLuckyRecord() : CSLuckyRecord(nullptr) {}
  virtual ~CSLuckyRecord();

  CSLuckyRecord(const CSLuckyRecord& from);
  CSLuckyRecord(CSLuckyRecord&& from) noexcept
    : CSLuckyRecord() {
    *this = ::std::move(from);
  }

  inline CSLuckyRecord& operator=(const CSLuckyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyRecord& operator=(CSLuckyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyRecord& default_instance();

  static inline const CSLuckyRecord* internal_default_instance() {
    return reinterpret_cast<const CSLuckyRecord*>(
               &_CSLuckyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CSLuckyRecord& a, CSLuckyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyRecord* New() const final {
    return CreateMaybeMessage<CSLuckyRecord>(nullptr);
  }

  CSLuckyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyRecord& from);
  void MergeFrom(const CSLuckyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSLuckyRecord";
  }
  protected:
  explicit CSLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSLuckyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCLuckyRecord) */ {
 public:
  inline SCLuckyRecord() : SCLuckyRecord(nullptr) {}
  virtual ~SCLuckyRecord();

  SCLuckyRecord(const SCLuckyRecord& from);
  SCLuckyRecord(SCLuckyRecord&& from) noexcept
    : SCLuckyRecord() {
    *this = ::std::move(from);
  }

  inline SCLuckyRecord& operator=(const SCLuckyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyRecord& operator=(SCLuckyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyRecord& default_instance();

  static inline const SCLuckyRecord* internal_default_instance() {
    return reinterpret_cast<const SCLuckyRecord*>(
               &_SCLuckyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(SCLuckyRecord& a, SCLuckyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyRecord* New() const final {
    return CreateMaybeMessage<SCLuckyRecord>(nullptr);
  }

  SCLuckyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyRecord& from);
  void MergeFrom(const SCLuckyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCLuckyRecord";
  }
  protected:
  explicit SCLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .F4BY.LuckyRecord record = 2;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::F4BY::LuckyRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyRecord >*
      mutable_record();
  private:
  const ::F4BY::LuckyRecord& _internal_record(int index) const;
  ::F4BY::LuckyRecord* _internal_add_record();
  public:
  const ::F4BY::LuckyRecord& record(int index) const;
  ::F4BY::LuckyRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyRecord >&
      record() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCLuckyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyRecord > record_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCOwnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCOwnRecord) */ {
 public:
  inline SCOwnRecord() : SCOwnRecord(nullptr) {}
  virtual ~SCOwnRecord();

  SCOwnRecord(const SCOwnRecord& from);
  SCOwnRecord(SCOwnRecord&& from) noexcept
    : SCOwnRecord() {
    *this = ::std::move(from);
  }

  inline SCOwnRecord& operator=(const SCOwnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOwnRecord& operator=(SCOwnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOwnRecord& default_instance();

  static inline const SCOwnRecord* internal_default_instance() {
    return reinterpret_cast<const SCOwnRecord*>(
               &_SCOwnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(SCOwnRecord& a, SCOwnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOwnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOwnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOwnRecord* New() const final {
    return CreateMaybeMessage<SCOwnRecord>(nullptr);
  }

  SCOwnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOwnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOwnRecord& from);
  void MergeFrom(const SCOwnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOwnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCOwnRecord";
  }
  protected:
  explicit SCOwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // repeated .F4BY.OwnRecord record = 1;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::F4BY::OwnRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OwnRecord >*
      mutable_record();
  private:
  const ::F4BY::OwnRecord& _internal_record(int index) const;
  ::F4BY::OwnRecord* _internal_add_record();
  public:
  const ::F4BY::OwnRecord& record(int index) const;
  ::F4BY::OwnRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OwnRecord >&
      record() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCOwnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OwnRecord > record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSBombInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSBombInfo) */ {
 public:
  inline CSBombInfo() : CSBombInfo(nullptr) {}
  virtual ~CSBombInfo();

  CSBombInfo(const CSBombInfo& from);
  CSBombInfo(CSBombInfo&& from) noexcept
    : CSBombInfo() {
    *this = ::std::move(from);
  }

  inline CSBombInfo& operator=(const CSBombInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBombInfo& operator=(CSBombInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBombInfo& default_instance();

  static inline const CSBombInfo* internal_default_instance() {
    return reinterpret_cast<const CSBombInfo*>(
               &_CSBombInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(CSBombInfo& a, CSBombInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBombInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBombInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBombInfo* New() const final {
    return CreateMaybeMessage<CSBombInfo>(nullptr);
  }

  CSBombInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBombInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBombInfo& from);
  void MergeFrom(const CSBombInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBombInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSBombInfo";
  }
  protected:
  explicit CSBombInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kChairIdxFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSBombInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncBomb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncBomb) */ {
 public:
  inline SCSyncBomb() : SCSyncBomb(nullptr) {}
  virtual ~SCSyncBomb();

  SCSyncBomb(const SCSyncBomb& from);
  SCSyncBomb(SCSyncBomb&& from) noexcept
    : SCSyncBomb() {
    *this = ::std::move(from);
  }

  inline SCSyncBomb& operator=(const SCSyncBomb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncBomb& operator=(SCSyncBomb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncBomb& default_instance();

  static inline const SCSyncBomb* internal_default_instance() {
    return reinterpret_cast<const SCSyncBomb*>(
               &_SCSyncBomb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(SCSyncBomb& a, SCSyncBomb& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncBomb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncBomb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncBomb* New() const final {
    return CreateMaybeMessage<SCSyncBomb>(nullptr);
  }

  SCSyncBomb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncBomb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncBomb& from);
  void MergeFrom(const SCSyncBomb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncBomb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncBomb";
  }
  protected:
  explicit SCSyncBomb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kBombIdFieldNumber = 2,
    kCurStatusFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kNextXFieldNumber = 6,
    kNextYFieldNumber = 7,
    kScoreFieldNumber = 8,
    kIsFinishFieldNumber = 9,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bombId = 2;
  void clear_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 bombid() const;
  void set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bombid() const;
  void _internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curStatus = 3;
  void clear_curstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 curstatus() const;
  void set_curstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curstatus() const;
  void _internal_set_curstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float nextX = 6;
  void clear_nextx();
  float nextx() const;
  void set_nextx(float value);
  private:
  float _internal_nextx() const;
  void _internal_set_nextx(float value);
  public:

  // float nextY = 7;
  void clear_nexty();
  float nexty() const;
  void set_nexty(float value);
  private:
  float _internal_nexty() const;
  void _internal_set_nexty(float value);
  public:

  // int32 score = 8;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isFinish = 9;
  void clear_isfinish();
  bool isfinish() const;
  void set_isfinish(bool value);
  private:
  bool _internal_isfinish() const;
  void _internal_set_isfinish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncBomb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 curstatus_;
  float x_;
  float y_;
  float nextx_;
  float nexty_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  bool isfinish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncBombFinish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncBombFinish) */ {
 public:
  inline SCSyncBombFinish() : SCSyncBombFinish(nullptr) {}
  virtual ~SCSyncBombFinish();

  SCSyncBombFinish(const SCSyncBombFinish& from);
  SCSyncBombFinish(SCSyncBombFinish&& from) noexcept
    : SCSyncBombFinish() {
    *this = ::std::move(from);
  }

  inline SCSyncBombFinish& operator=(const SCSyncBombFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncBombFinish& operator=(SCSyncBombFinish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncBombFinish& default_instance();

  static inline const SCSyncBombFinish* internal_default_instance() {
    return reinterpret_cast<const SCSyncBombFinish*>(
               &_SCSyncBombFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(SCSyncBombFinish& a, SCSyncBombFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncBombFinish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncBombFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncBombFinish* New() const final {
    return CreateMaybeMessage<SCSyncBombFinish>(nullptr);
  }

  SCSyncBombFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncBombFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncBombFinish& from);
  void MergeFrom(const SCSyncBombFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncBombFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncBombFinish";
  }
  protected:
  explicit SCSyncBombFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kBombIdFieldNumber = 2,
    kReturnMoneyFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bombId = 2;
  void clear_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 bombid() const;
  void set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bombid() const;
  void _internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 returnMoney = 3;
  void clear_returnmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 returnmoney() const;
  void set_returnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_returnmoney() const;
  void _internal_set_returnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncBombFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 returnmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSBombHitFishInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSBombHitFishInfo) */ {
 public:
  inline CSBombHitFishInfo() : CSBombHitFishInfo(nullptr) {}
  virtual ~CSBombHitFishInfo();

  CSBombHitFishInfo(const CSBombHitFishInfo& from);
  CSBombHitFishInfo(CSBombHitFishInfo&& from) noexcept
    : CSBombHitFishInfo() {
    *this = ::std::move(from);
  }

  inline CSBombHitFishInfo& operator=(const CSBombHitFishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBombHitFishInfo& operator=(CSBombHitFishInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBombHitFishInfo& default_instance();

  static inline const CSBombHitFishInfo* internal_default_instance() {
    return reinterpret_cast<const CSBombHitFishInfo*>(
               &_CSBombHitFishInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(CSBombHitFishInfo& a, CSBombHitFishInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBombHitFishInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBombHitFishInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBombHitFishInfo* New() const final {
    return CreateMaybeMessage<CSBombHitFishInfo>(nullptr);
  }

  CSBombHitFishInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBombHitFishInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBombHitFishInfo& from);
  void MergeFrom(const CSBombHitFishInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBombHitFishInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSBombHitFishInfo";
  }
  protected:
  explicit CSBombHitFishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishIdFieldNumber = 2,
    kBombIdFieldNumber = 1,
    kChairIdxFieldNumber = 3,
  };
  // repeated int32 fishId = 2;
  int fishid_size() const;
  private:
  int _internal_fishid_size() const;
  public:
  void clear_fishid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fishid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fishid() const;
  void _internal_add_fishid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fishid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fishid(int index) const;
  void set_fishid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fishid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fishid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fishid();

  // int32 bombId = 1;
  void clear_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 bombid() const;
  void set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bombid() const;
  void _internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSBombHitFishInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fishid_;
  mutable std::atomic<int> _fishid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCGetMagicCube PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCGetMagicCube) */ {
 public:
  inline SCGetMagicCube() : SCGetMagicCube(nullptr) {}
  virtual ~SCGetMagicCube();

  SCGetMagicCube(const SCGetMagicCube& from);
  SCGetMagicCube(SCGetMagicCube&& from) noexcept
    : SCGetMagicCube() {
    *this = ::std::move(from);
  }

  inline SCGetMagicCube& operator=(const SCGetMagicCube& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetMagicCube& operator=(SCGetMagicCube&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetMagicCube& default_instance();

  static inline const SCGetMagicCube* internal_default_instance() {
    return reinterpret_cast<const SCGetMagicCube*>(
               &_SCGetMagicCube_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(SCGetMagicCube& a, SCGetMagicCube& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetMagicCube* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetMagicCube* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetMagicCube* New() const final {
    return CreateMaybeMessage<SCGetMagicCube>(nullptr);
  }

  SCGetMagicCube* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetMagicCube>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetMagicCube& from);
  void MergeFrom(const SCGetMagicCube& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetMagicCube* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCGetMagicCube";
  }
  protected:
  explicit SCGetMagicCube(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kBulletTypeFieldNumber = 2,
    kCreateWeaponFieldNumber = 3,
    kIsSyncInfoFieldNumber = 4,
    kIsFinishFieldNumber = 5,
    kGunRatioFieldNumber = 6,
    kMagicCubeMultiFieldNumber = 7,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 2;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool createWeapon = 3;
  void clear_createweapon();
  bool createweapon() const;
  void set_createweapon(bool value);
  private:
  bool _internal_createweapon() const;
  void _internal_set_createweapon(bool value);
  public:

  // bool isSyncInfo = 4;
  void clear_issyncinfo();
  bool issyncinfo() const;
  void set_issyncinfo(bool value);
  private:
  bool _internal_issyncinfo() const;
  void _internal_set_issyncinfo(bool value);
  public:

  // bool isFinish = 5;
  void clear_isfinish();
  bool isfinish() const;
  void set_isfinish(bool value);
  private:
  bool _internal_isfinish() const;
  void _internal_set_isfinish(bool value);
  public:

  // int32 gunRatio = 6;
  void clear_gunratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gunratio() const;
  void set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gunratio() const;
  void _internal_set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magic_cube_multi = 7;
  void clear_magic_cube_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi() const;
  void set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magic_cube_multi() const;
  void _internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCGetMagicCube)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  bool createweapon_;
  bool issyncinfo_;
  bool isfinish_;
  ::PROTOBUF_NAMESPACE_ID::int32 gunratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 magic_cube_multi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCMagicCubeBulletInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCMagicCubeBulletInfo) */ {
 public:
  inline SCMagicCubeBulletInfo() : SCMagicCubeBulletInfo(nullptr) {}
  virtual ~SCMagicCubeBulletInfo();

  SCMagicCubeBulletInfo(const SCMagicCubeBulletInfo& from);
  SCMagicCubeBulletInfo(SCMagicCubeBulletInfo&& from) noexcept
    : SCMagicCubeBulletInfo() {
    *this = ::std::move(from);
  }

  inline SCMagicCubeBulletInfo& operator=(const SCMagicCubeBulletInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMagicCubeBulletInfo& operator=(SCMagicCubeBulletInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMagicCubeBulletInfo& default_instance();

  static inline const SCMagicCubeBulletInfo* internal_default_instance() {
    return reinterpret_cast<const SCMagicCubeBulletInfo*>(
               &_SCMagicCubeBulletInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(SCMagicCubeBulletInfo& a, SCMagicCubeBulletInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMagicCubeBulletInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMagicCubeBulletInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMagicCubeBulletInfo* New() const final {
    return CreateMaybeMessage<SCMagicCubeBulletInfo>(nullptr);
  }

  SCMagicCubeBulletInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMagicCubeBulletInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMagicCubeBulletInfo& from);
  void MergeFrom(const SCMagicCubeBulletInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMagicCubeBulletInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCMagicCubeBulletInfo";
  }
  protected:
  explicit SCMagicCubeBulletInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kTotalNumFieldNumber = 2,
    kCurNumFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 totalNum = 2;
  void clear_totalnum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum() const;
  void set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalnum() const;
  void _internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curNum = 3;
  void clear_curnum();
  ::PROTOBUF_NAMESPACE_ID::int32 curnum() const;
  void set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curnum() const;
  void _internal_set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCMagicCubeBulletInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 curnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSPreHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSPreHit) */ {
 public:
  inline CSPreHit() : CSPreHit(nullptr) {}
  virtual ~CSPreHit();

  CSPreHit(const CSPreHit& from);
  CSPreHit(CSPreHit&& from) noexcept
    : CSPreHit() {
    *this = ::std::move(from);
  }

  inline CSPreHit& operator=(const CSPreHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPreHit& operator=(CSPreHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPreHit& default_instance();

  static inline const CSPreHit* internal_default_instance() {
    return reinterpret_cast<const CSPreHit*>(
               &_CSPreHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CSPreHit& a, CSPreHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPreHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPreHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPreHit* New() const final {
    return CreateMaybeMessage<CSPreHit>(nullptr);
  }

  CSPreHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPreHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPreHit& from);
  void MergeFrom(const CSPreHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPreHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSPreHit";
  }
  protected:
  explicit CSPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFishFieldNumber = 1,
  };
  // repeated int32 screen_fish = 1;
  int screen_fish_size() const;
  private:
  int _internal_screen_fish_size() const;
  public:
  void clear_screen_fish();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen_fish(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_screen_fish() const;
  void _internal_add_screen_fish(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_screen_fish();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 screen_fish(int index) const;
  void set_screen_fish(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_screen_fish(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      screen_fish() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_screen_fish();

  // @@protoc_insertion_point(class_scope:F4BY.CSPreHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > screen_fish_;
  mutable std::atomic<int> _screen_fish_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCPreHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCPreHit) */ {
 public:
  inline SCPreHit() : SCPreHit(nullptr) {}
  virtual ~SCPreHit();

  SCPreHit(const SCPreHit& from);
  SCPreHit(SCPreHit&& from) noexcept
    : SCPreHit() {
    *this = ::std::move(from);
  }

  inline SCPreHit& operator=(const SCPreHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPreHit& operator=(SCPreHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPreHit& default_instance();

  static inline const SCPreHit* internal_default_instance() {
    return reinterpret_cast<const SCPreHit*>(
               &_SCPreHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(SCPreHit& a, SCPreHit& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPreHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPreHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPreHit* New() const final {
    return CreateMaybeMessage<SCPreHit>(nullptr);
  }

  SCPreHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPreHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPreHit& from);
  void MergeFrom(const SCPreHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPreHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCPreHit";
  }
  protected:
  explicit SCPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kChairIdFieldNumber = 3,
  };
  // int32 err = 1;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::int32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_id = 3;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCPreHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSPreShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSPreShoot) */ {
 public:
  inline CSPreShoot() : CSPreShoot(nullptr) {}
  virtual ~CSPreShoot();

  CSPreShoot(const CSPreShoot& from);
  CSPreShoot(CSPreShoot&& from) noexcept
    : CSPreShoot() {
    *this = ::std::move(from);
  }

  inline CSPreShoot& operator=(const CSPreShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPreShoot& operator=(CSPreShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPreShoot& default_instance();

  static inline const CSPreShoot* internal_default_instance() {
    return reinterpret_cast<const CSPreShoot*>(
               &_CSPreShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(CSPreShoot& a, CSPreShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPreShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPreShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPreShoot* New() const final {
    return CreateMaybeMessage<CSPreShoot>(nullptr);
  }

  CSPreShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPreShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPreShoot& from);
  void MergeFrom(const CSPreShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPreShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSPreShoot";
  }
  protected:
  explicit CSPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kAngleFieldNumber = 2,
    kShootTypeFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 angle = 2;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shoot_type = 3;
  void clear_shoot_type();
  ::PROTOBUF_NAMESPACE_ID::int32 shoot_type() const;
  void set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shoot_type() const;
  void _internal_set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSPreShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 shoot_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCPreShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCPreShoot) */ {
 public:
  inline SCPreShoot() : SCPreShoot(nullptr) {}
  virtual ~SCPreShoot();

  SCPreShoot(const SCPreShoot& from);
  SCPreShoot(SCPreShoot&& from) noexcept
    : SCPreShoot() {
    *this = ::std::move(from);
  }

  inline SCPreShoot& operator=(const SCPreShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPreShoot& operator=(SCPreShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPreShoot& default_instance();

  static inline const SCPreShoot* internal_default_instance() {
    return reinterpret_cast<const SCPreShoot*>(
               &_SCPreShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(SCPreShoot& a, SCPreShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPreShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPreShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPreShoot* New() const final {
    return CreateMaybeMessage<SCPreShoot>(nullptr);
  }

  SCPreShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPreShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPreShoot& from);
  void MergeFrom(const SCPreShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPreShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCPreShoot";
  }
  protected:
  explicit SCPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kAngleFieldNumber = 2,
    kShootTypeFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 angle = 2;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shoot_type = 3;
  void clear_shoot_type();
  ::PROTOBUF_NAMESPACE_ID::int32 shoot_type() const;
  void set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shoot_type() const;
  void _internal_set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCPreShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 shoot_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class FrozenFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.FrozenFish) */ {
 public:
  inline FrozenFish() : FrozenFish(nullptr) {}
  virtual ~FrozenFish();

  FrozenFish(const FrozenFish& from);
  FrozenFish(FrozenFish&& from) noexcept
    : FrozenFish() {
    *this = ::std::move(from);
  }

  inline FrozenFish& operator=(const FrozenFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrozenFish& operator=(FrozenFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrozenFish& default_instance();

  static inline const FrozenFish* internal_default_instance() {
    return reinterpret_cast<const FrozenFish*>(
               &_FrozenFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(FrozenFish& a, FrozenFish& b) {
    a.Swap(&b);
  }
  inline void Swap(FrozenFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrozenFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrozenFish* New() const final {
    return CreateMaybeMessage<FrozenFish>(nullptr);
  }

  FrozenFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrozenFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrozenFish& from);
  void MergeFrom(const FrozenFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrozenFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.FrozenFish";
  }
  protected:
  explicit FrozenFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishIdFieldNumber = 1,
    kFrozenTimeFieldNumber = 2,
  };
  // int32 fish_id = 1;
  void clear_fish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id() const;
  void set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id() const;
  void _internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frozen_time = 2;
  void clear_frozen_time();
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_time() const;
  void set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frozen_time() const;
  void _internal_set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.FrozenFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCFrozenFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCFrozenFish) */ {
 public:
  inline SCFrozenFish() : SCFrozenFish(nullptr) {}
  virtual ~SCFrozenFish();

  SCFrozenFish(const SCFrozenFish& from);
  SCFrozenFish(SCFrozenFish&& from) noexcept
    : SCFrozenFish() {
    *this = ::std::move(from);
  }

  inline SCFrozenFish& operator=(const SCFrozenFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFrozenFish& operator=(SCFrozenFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFrozenFish& default_instance();

  static inline const SCFrozenFish* internal_default_instance() {
    return reinterpret_cast<const SCFrozenFish*>(
               &_SCFrozenFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(SCFrozenFish& a, SCFrozenFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFrozenFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFrozenFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFrozenFish* New() const final {
    return CreateMaybeMessage<SCFrozenFish>(nullptr);
  }

  SCFrozenFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFrozenFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFrozenFish& from);
  void MergeFrom(const SCFrozenFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFrozenFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCFrozenFish";
  }
  protected:
  explicit SCFrozenFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenFishFieldNumber = 1,
  };
  // repeated .F4BY.FrozenFish frozenFish = 1;
  int frozenfish_size() const;
  private:
  int _internal_frozenfish_size() const;
  public:
  void clear_frozenfish();
  ::F4BY::FrozenFish* mutable_frozenfish(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FrozenFish >*
      mutable_frozenfish();
  private:
  const ::F4BY::FrozenFish& _internal_frozenfish(int index) const;
  ::F4BY::FrozenFish* _internal_add_frozenfish();
  public:
  const ::F4BY::FrozenFish& frozenfish(int index) const;
  ::F4BY::FrozenFish* add_frozenfish();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FrozenFish >&
      frozenfish() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCFrozenFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FrozenFish > frozenfish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCValentineDayFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCValentineDayFish) */ {
 public:
  inline SCValentineDayFish() : SCValentineDayFish(nullptr) {}
  virtual ~SCValentineDayFish();

  SCValentineDayFish(const SCValentineDayFish& from);
  SCValentineDayFish(SCValentineDayFish&& from) noexcept
    : SCValentineDayFish() {
    *this = ::std::move(from);
  }

  inline SCValentineDayFish& operator=(const SCValentineDayFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCValentineDayFish& operator=(SCValentineDayFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCValentineDayFish& default_instance();

  static inline const SCValentineDayFish* internal_default_instance() {
    return reinterpret_cast<const SCValentineDayFish*>(
               &_SCValentineDayFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(SCValentineDayFish& a, SCValentineDayFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCValentineDayFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCValentineDayFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCValentineDayFish* New() const final {
    return CreateMaybeMessage<SCValentineDayFish>(nullptr);
  }

  SCValentineDayFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCValentineDayFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCValentineDayFish& from);
  void MergeFrom(const SCValentineDayFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCValentineDayFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCValentineDayFish";
  }
  protected:
  explicit SCValentineDayFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 5,
    kFishInfoFieldNumber = 1,
    kBtRatioFieldNumber = 2,
    kRandMultiFieldNumber = 3,
    kBallMultiFieldNumber = 4,
  };
  // repeated int32 uid_list = 5;
  int uid_list_size() const;
  private:
  int _internal_uid_list_size() const;
  public:
  void clear_uid_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uid_list() const;
  void _internal_add_uid_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uid_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uid_list(int index) const;
  void set_uid_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uid_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uid_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uid_list();

  // .F4BY.SCHitFish fish_info = 1;
  bool has_fish_info() const;
  private:
  bool _internal_has_fish_info() const;
  public:
  void clear_fish_info();
  const ::F4BY::SCHitFish& fish_info() const;
  ::F4BY::SCHitFish* release_fish_info();
  ::F4BY::SCHitFish* mutable_fish_info();
  void set_allocated_fish_info(::F4BY::SCHitFish* fish_info);
  private:
  const ::F4BY::SCHitFish& _internal_fish_info() const;
  ::F4BY::SCHitFish* _internal_mutable_fish_info();
  public:
  void unsafe_arena_set_allocated_fish_info(
      ::F4BY::SCHitFish* fish_info);
  ::F4BY::SCHitFish* unsafe_arena_release_fish_info();

  // int32 bt_ratio = 2;
  void clear_bt_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_ratio() const;
  void set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_ratio() const;
  void _internal_set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rand_multi = 3;
  void clear_rand_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 rand_multi() const;
  void set_rand_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rand_multi() const;
  void _internal_set_rand_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ball_multi = 4;
  void clear_ball_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 ball_multi() const;
  void set_ball_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ball_multi() const;
  void _internal_set_ball_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCValentineDayFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uid_list_;
  mutable std::atomic<int> _uid_list_cached_byte_size_;
  ::F4BY::SCHitFish* fish_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 rand_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 ball_multi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCKiRinFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCKiRinFish) */ {
 public:
  inline SCKiRinFish() : SCKiRinFish(nullptr) {}
  virtual ~SCKiRinFish();

  SCKiRinFish(const SCKiRinFish& from);
  SCKiRinFish(SCKiRinFish&& from) noexcept
    : SCKiRinFish() {
    *this = ::std::move(from);
  }

  inline SCKiRinFish& operator=(const SCKiRinFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCKiRinFish& operator=(SCKiRinFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCKiRinFish& default_instance();

  static inline const SCKiRinFish* internal_default_instance() {
    return reinterpret_cast<const SCKiRinFish*>(
               &_SCKiRinFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(SCKiRinFish& a, SCKiRinFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCKiRinFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCKiRinFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCKiRinFish* New() const final {
    return CreateMaybeMessage<SCKiRinFish>(nullptr);
  }

  SCKiRinFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCKiRinFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCKiRinFish& from);
  void MergeFrom(const SCKiRinFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCKiRinFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCKiRinFish";
  }
  protected:
  explicit SCKiRinFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishInfoFieldNumber = 1,
    kBtRatioFieldNumber = 2,
    kMultiFieldNumber = 3,
    kIsSeniorFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // .F4BY.SCHitFish fish_info = 1;
  bool has_fish_info() const;
  private:
  bool _internal_has_fish_info() const;
  public:
  void clear_fish_info();
  const ::F4BY::SCHitFish& fish_info() const;
  ::F4BY::SCHitFish* release_fish_info();
  ::F4BY::SCHitFish* mutable_fish_info();
  void set_allocated_fish_info(::F4BY::SCHitFish* fish_info);
  private:
  const ::F4BY::SCHitFish& _internal_fish_info() const;
  ::F4BY::SCHitFish* _internal_mutable_fish_info();
  public:
  void unsafe_arena_set_allocated_fish_info(
      ::F4BY::SCHitFish* fish_info);
  ::F4BY::SCHitFish* unsafe_arena_release_fish_info();

  // int32 bt_ratio = 2;
  void clear_bt_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_ratio() const;
  void set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_ratio() const;
  void _internal_set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multi = 3;
  void clear_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 multi() const;
  void set_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multi() const;
  void _internal_set_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_senior = 4;
  void clear_is_senior();
  bool is_senior() const;
  void set_is_senior(bool value);
  private:
  bool _internal_is_senior() const;
  void _internal_set_is_senior(bool value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCKiRinFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::SCHitFish* fish_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 multi_;
  bool is_senior_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCNvWaFishCapture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCNvWaFishCapture) */ {
 public:
  inline SCNvWaFishCapture() : SCNvWaFishCapture(nullptr) {}
  virtual ~SCNvWaFishCapture();

  SCNvWaFishCapture(const SCNvWaFishCapture& from);
  SCNvWaFishCapture(SCNvWaFishCapture&& from) noexcept
    : SCNvWaFishCapture() {
    *this = ::std::move(from);
  }

  inline SCNvWaFishCapture& operator=(const SCNvWaFishCapture& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNvWaFishCapture& operator=(SCNvWaFishCapture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNvWaFishCapture& default_instance();

  static inline const SCNvWaFishCapture* internal_default_instance() {
    return reinterpret_cast<const SCNvWaFishCapture*>(
               &_SCNvWaFishCapture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(SCNvWaFishCapture& a, SCNvWaFishCapture& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNvWaFishCapture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNvWaFishCapture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNvWaFishCapture* New() const final {
    return CreateMaybeMessage<SCNvWaFishCapture>(nullptr);
  }

  SCNvWaFishCapture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNvWaFishCapture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNvWaFishCapture& from);
  void MergeFrom(const SCNvWaFishCapture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNvWaFishCapture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCNvWaFishCapture";
  }
  protected:
  explicit SCNvWaFishCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiListFieldNumber = 6,
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kRatioFieldNumber = 3,
    kNvwaMultipleFieldNumber = 4,
    kBtKindFieldNumber = 5,
  };
  // repeated .F4BY.MultiInfo multi_list = 6;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nvwa_multiple = 4;
  void clear_nvwa_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 nvwa_multiple() const;
  void set_nvwa_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nvwa_multiple() const;
  void _internal_set_nvwa_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_kind = 5;
  void clear_bt_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_kind() const;
  void set_bt_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_kind() const;
  void _internal_set_bt_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCNvWaFishCapture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 nvwa_multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCBombGlobeFishInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCBombGlobeFishInfo) */ {
 public:
  inline SCBombGlobeFishInfo() : SCBombGlobeFishInfo(nullptr) {}
  virtual ~SCBombGlobeFishInfo();

  SCBombGlobeFishInfo(const SCBombGlobeFishInfo& from);
  SCBombGlobeFishInfo(SCBombGlobeFishInfo&& from) noexcept
    : SCBombGlobeFishInfo() {
    *this = ::std::move(from);
  }

  inline SCBombGlobeFishInfo& operator=(const SCBombGlobeFishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBombGlobeFishInfo& operator=(SCBombGlobeFishInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBombGlobeFishInfo& default_instance();

  static inline const SCBombGlobeFishInfo* internal_default_instance() {
    return reinterpret_cast<const SCBombGlobeFishInfo*>(
               &_SCBombGlobeFishInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(SCBombGlobeFishInfo& a, SCBombGlobeFishInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBombGlobeFishInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBombGlobeFishInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBombGlobeFishInfo* New() const final {
    return CreateMaybeMessage<SCBombGlobeFishInfo>(nullptr);
  }

  SCBombGlobeFishInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBombGlobeFishInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBombGlobeFishInfo& from);
  void MergeFrom(const SCBombGlobeFishInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBombGlobeFishInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCBombGlobeFishInfo";
  }
  protected:
  explicit SCBombGlobeFishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kRatioFieldNumber = 2,
    kFishUidFieldNumber = 3,
    kStageFieldNumber = 4,
    kBombIdFieldNumber = 5,
    kTotalEarnFieldNumber = 6,
    kSelfBombIdFieldNumber = 7,
    kOriginIdFieldNumber = 8,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 3;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 4;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bombId = 5;
  void clear_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 bombid() const;
  void set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bombid() const;
  void _internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_earn = 6;
  void clear_total_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 total_earn() const;
  void set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_earn() const;
  void _internal_set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 self_bombId = 7;
  void clear_self_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 self_bombid() const;
  void set_self_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_self_bombid() const;
  void _internal_set_self_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originId = 8;
  void clear_originid();
  ::PROTOBUF_NAMESPACE_ID::int32 originid() const;
  void set_originid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originid() const;
  void _internal_set_originid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCBombGlobeFishInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 self_bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSBombGlobeFishHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSBombGlobeFishHit) */ {
 public:
  inline CSBombGlobeFishHit() : CSBombGlobeFishHit(nullptr) {}
  virtual ~CSBombGlobeFishHit();

  CSBombGlobeFishHit(const CSBombGlobeFishHit& from);
  CSBombGlobeFishHit(CSBombGlobeFishHit&& from) noexcept
    : CSBombGlobeFishHit() {
    *this = ::std::move(from);
  }

  inline CSBombGlobeFishHit& operator=(const CSBombGlobeFishHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBombGlobeFishHit& operator=(CSBombGlobeFishHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBombGlobeFishHit& default_instance();

  static inline const CSBombGlobeFishHit* internal_default_instance() {
    return reinterpret_cast<const CSBombGlobeFishHit*>(
               &_CSBombGlobeFishHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(CSBombGlobeFishHit& a, CSBombGlobeFishHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBombGlobeFishHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBombGlobeFishHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBombGlobeFishHit* New() const final {
    return CreateMaybeMessage<CSBombGlobeFishHit>(nullptr);
  }

  CSBombGlobeFishHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBombGlobeFishHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBombGlobeFishHit& from);
  void MergeFrom(const CSBombGlobeFishHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBombGlobeFishHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSBombGlobeFishHit";
  }
  protected:
  explicit CSBombGlobeFishHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFishesFieldNumber = 3,
    kBombIdFieldNumber = 1,
    kBtTypeFieldNumber = 2,
  };
  // repeated int32 screen_fishes = 3;
  int screen_fishes_size() const;
  private:
  int _internal_screen_fishes_size() const;
  public:
  void clear_screen_fishes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen_fishes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_screen_fishes() const;
  void _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_screen_fishes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 screen_fishes(int index) const;
  void set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      screen_fishes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_screen_fishes();

  // int32 bombId = 1;
  void clear_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 bombid() const;
  void set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bombid() const;
  void _internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_type = 2;
  void clear_bt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_type() const;
  void set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_type() const;
  void _internal_set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSBombGlobeFishHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > screen_fishes_;
  mutable std::atomic<int> _screen_fishes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCAnniversaryShowSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCAnniversaryShowSelect) */ {
 public:
  inline SCAnniversaryShowSelect() : SCAnniversaryShowSelect(nullptr) {}
  virtual ~SCAnniversaryShowSelect();

  SCAnniversaryShowSelect(const SCAnniversaryShowSelect& from);
  SCAnniversaryShowSelect(SCAnniversaryShowSelect&& from) noexcept
    : SCAnniversaryShowSelect() {
    *this = ::std::move(from);
  }

  inline SCAnniversaryShowSelect& operator=(const SCAnniversaryShowSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAnniversaryShowSelect& operator=(SCAnniversaryShowSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAnniversaryShowSelect& default_instance();

  static inline const SCAnniversaryShowSelect* internal_default_instance() {
    return reinterpret_cast<const SCAnniversaryShowSelect*>(
               &_SCAnniversaryShowSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(SCAnniversaryShowSelect& a, SCAnniversaryShowSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAnniversaryShowSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAnniversaryShowSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAnniversaryShowSelect* New() const final {
    return CreateMaybeMessage<SCAnniversaryShowSelect>(nullptr);
  }

  SCAnniversaryShowSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAnniversaryShowSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAnniversaryShowSelect& from);
  void MergeFrom(const SCAnniversaryShowSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAnniversaryShowSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCAnniversaryShowSelect";
  }
  protected:
  explicit SCAnniversaryShowSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kShowSelectFieldNumber = 2,
    kRemainTimeFieldNumber = 3,
    kStageFieldNumber = 4,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool show_select = 2;
  void clear_show_select();
  bool show_select() const;
  void set_show_select(bool value);
  private:
  bool _internal_show_select() const;
  void _internal_set_show_select(bool value);
  public:

  // int32 remain_time = 3;
  void clear_remain_time();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_time() const;
  void set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_time() const;
  void _internal_set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 4;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCAnniversaryShowSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool show_select_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSAnniversarySelectReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSAnniversarySelectReq) */ {
 public:
  inline CSAnniversarySelectReq() : CSAnniversarySelectReq(nullptr) {}
  virtual ~CSAnniversarySelectReq();

  CSAnniversarySelectReq(const CSAnniversarySelectReq& from);
  CSAnniversarySelectReq(CSAnniversarySelectReq&& from) noexcept
    : CSAnniversarySelectReq() {
    *this = ::std::move(from);
  }

  inline CSAnniversarySelectReq& operator=(const CSAnniversarySelectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSAnniversarySelectReq& operator=(CSAnniversarySelectReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSAnniversarySelectReq& default_instance();

  static inline const CSAnniversarySelectReq* internal_default_instance() {
    return reinterpret_cast<const CSAnniversarySelectReq*>(
               &_CSAnniversarySelectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(CSAnniversarySelectReq& a, CSAnniversarySelectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSAnniversarySelectReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSAnniversarySelectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSAnniversarySelectReq* New() const final {
    return CreateMaybeMessage<CSAnniversarySelectReq>(nullptr);
  }

  CSAnniversarySelectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSAnniversarySelectReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSAnniversarySelectReq& from);
  void MergeFrom(const CSAnniversarySelectReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSAnniversarySelectReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSAnniversarySelectReq";
  }
  protected:
  explicit CSAnniversarySelectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
  };
  // int32 stage = 1;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSAnniversarySelectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class AnniversaryStage1Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.AnniversaryStage1Result) */ {
 public:
  inline AnniversaryStage1Result() : AnniversaryStage1Result(nullptr) {}
  virtual ~AnniversaryStage1Result();

  AnniversaryStage1Result(const AnniversaryStage1Result& from);
  AnniversaryStage1Result(AnniversaryStage1Result&& from) noexcept
    : AnniversaryStage1Result() {
    *this = ::std::move(from);
  }

  inline AnniversaryStage1Result& operator=(const AnniversaryStage1Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnniversaryStage1Result& operator=(AnniversaryStage1Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnniversaryStage1Result& default_instance();

  static inline const AnniversaryStage1Result* internal_default_instance() {
    return reinterpret_cast<const AnniversaryStage1Result*>(
               &_AnniversaryStage1Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(AnniversaryStage1Result& a, AnniversaryStage1Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AnniversaryStage1Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnniversaryStage1Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnniversaryStage1Result* New() const final {
    return CreateMaybeMessage<AnniversaryStage1Result>(nullptr);
  }

  AnniversaryStage1Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnniversaryStage1Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnniversaryStage1Result& from);
  void MergeFrom(const AnniversaryStage1Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnniversaryStage1Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.AnniversaryStage1Result";
  }
  protected:
  explicit AnniversaryStage1Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kFishUidFieldNumber = 2,
  };
  // int32 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.AnniversaryStage1Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class AnniversaryStage2Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.AnniversaryStage2Result) */ {
 public:
  inline AnniversaryStage2Result() : AnniversaryStage2Result(nullptr) {}
  virtual ~AnniversaryStage2Result();

  AnniversaryStage2Result(const AnniversaryStage2Result& from);
  AnniversaryStage2Result(AnniversaryStage2Result&& from) noexcept
    : AnniversaryStage2Result() {
    *this = ::std::move(from);
  }

  inline AnniversaryStage2Result& operator=(const AnniversaryStage2Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnniversaryStage2Result& operator=(AnniversaryStage2Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnniversaryStage2Result& default_instance();

  static inline const AnniversaryStage2Result* internal_default_instance() {
    return reinterpret_cast<const AnniversaryStage2Result*>(
               &_AnniversaryStage2Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(AnniversaryStage2Result& a, AnniversaryStage2Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AnniversaryStage2Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnniversaryStage2Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnniversaryStage2Result* New() const final {
    return CreateMaybeMessage<AnniversaryStage2Result>(nullptr);
  }

  AnniversaryStage2Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnniversaryStage2Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnniversaryStage2Result& from);
  void MergeFrom(const AnniversaryStage2Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnniversaryStage2Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.AnniversaryStage2Result";
  }
  protected:
  explicit AnniversaryStage2Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreListFieldNumber = 1,
    kDropTimesFieldNumber = 2,
    kMultipleFieldNumber = 3,
  };
  // repeated int32 score_list = 1;
  int score_list_size() const;
  private:
  int _internal_score_list_size() const;
  public:
  void clear_score_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_score_list() const;
  void _internal_add_score_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_score_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 score_list(int index) const;
  void set_score_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_score_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      score_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_score_list();

  // int32 drop_times = 2;
  void clear_drop_times();
  ::PROTOBUF_NAMESPACE_ID::int32 drop_times() const;
  void set_drop_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drop_times() const;
  void _internal_set_drop_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 3;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.AnniversaryStage2Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > score_list_;
  mutable std::atomic<int> _score_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 drop_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class AnniversaryStage3Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.AnniversaryStage3Result) */ {
 public:
  inline AnniversaryStage3Result() : AnniversaryStage3Result(nullptr) {}
  virtual ~AnniversaryStage3Result();

  AnniversaryStage3Result(const AnniversaryStage3Result& from);
  AnniversaryStage3Result(AnniversaryStage3Result&& from) noexcept
    : AnniversaryStage3Result() {
    *this = ::std::move(from);
  }

  inline AnniversaryStage3Result& operator=(const AnniversaryStage3Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnniversaryStage3Result& operator=(AnniversaryStage3Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnniversaryStage3Result& default_instance();

  static inline const AnniversaryStage3Result* internal_default_instance() {
    return reinterpret_cast<const AnniversaryStage3Result*>(
               &_AnniversaryStage3Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(AnniversaryStage3Result& a, AnniversaryStage3Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AnniversaryStage3Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnniversaryStage3Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnniversaryStage3Result* New() const final {
    return CreateMaybeMessage<AnniversaryStage3Result>(nullptr);
  }

  AnniversaryStage3Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnniversaryStage3Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnniversaryStage3Result& from);
  void MergeFrom(const AnniversaryStage3Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnniversaryStage3Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.AnniversaryStage3Result";
  }
  protected:
  explicit AnniversaryStage3Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginIdFieldNumber = 1,
    kSelfIdFieldNumber = 2,
  };
  // int32 origin_id = 1;
  void clear_origin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_id() const;
  void set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_id() const;
  void _internal_set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 self_id = 2;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int32 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.AnniversaryStage3Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 self_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCAnniversarySelectResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCAnniversarySelectResult) */ {
 public:
  inline SCAnniversarySelectResult() : SCAnniversarySelectResult(nullptr) {}
  virtual ~SCAnniversarySelectResult();

  SCAnniversarySelectResult(const SCAnniversarySelectResult& from);
  SCAnniversarySelectResult(SCAnniversarySelectResult&& from) noexcept
    : SCAnniversarySelectResult() {
    *this = ::std::move(from);
  }

  inline SCAnniversarySelectResult& operator=(const SCAnniversarySelectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAnniversarySelectResult& operator=(SCAnniversarySelectResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAnniversarySelectResult& default_instance();

  static inline const SCAnniversarySelectResult* internal_default_instance() {
    return reinterpret_cast<const SCAnniversarySelectResult*>(
               &_SCAnniversarySelectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(SCAnniversarySelectResult& a, SCAnniversarySelectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAnniversarySelectResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAnniversarySelectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAnniversarySelectResult* New() const final {
    return CreateMaybeMessage<SCAnniversarySelectResult>(nullptr);
  }

  SCAnniversarySelectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAnniversarySelectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAnniversarySelectResult& from);
  void MergeFrom(const SCAnniversarySelectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAnniversarySelectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCAnniversarySelectResult";
  }
  protected:
  explicit SCAnniversarySelectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiListFieldNumber = 4,
    kResult1FieldNumber = 7,
    kResult2FieldNumber = 8,
    kResult3FieldNumber = 9,
    kChairIdxFieldNumber = 1,
    kStageFieldNumber = 2,
    kBtRatioFieldNumber = 3,
    kTotalEarnFieldNumber = 5,
    kDeathFieldNumber = 6,
  };
  // repeated .F4BY.MultiInfo multi_list = 4;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // .F4BY.AnniversaryStage1Result result1 = 7;
  bool has_result1() const;
  private:
  bool _internal_has_result1() const;
  public:
  void clear_result1();
  const ::F4BY::AnniversaryStage1Result& result1() const;
  ::F4BY::AnniversaryStage1Result* release_result1();
  ::F4BY::AnniversaryStage1Result* mutable_result1();
  void set_allocated_result1(::F4BY::AnniversaryStage1Result* result1);
  private:
  const ::F4BY::AnniversaryStage1Result& _internal_result1() const;
  ::F4BY::AnniversaryStage1Result* _internal_mutable_result1();
  public:
  void unsafe_arena_set_allocated_result1(
      ::F4BY::AnniversaryStage1Result* result1);
  ::F4BY::AnniversaryStage1Result* unsafe_arena_release_result1();

  // .F4BY.AnniversaryStage2Result result2 = 8;
  bool has_result2() const;
  private:
  bool _internal_has_result2() const;
  public:
  void clear_result2();
  const ::F4BY::AnniversaryStage2Result& result2() const;
  ::F4BY::AnniversaryStage2Result* release_result2();
  ::F4BY::AnniversaryStage2Result* mutable_result2();
  void set_allocated_result2(::F4BY::AnniversaryStage2Result* result2);
  private:
  const ::F4BY::AnniversaryStage2Result& _internal_result2() const;
  ::F4BY::AnniversaryStage2Result* _internal_mutable_result2();
  public:
  void unsafe_arena_set_allocated_result2(
      ::F4BY::AnniversaryStage2Result* result2);
  ::F4BY::AnniversaryStage2Result* unsafe_arena_release_result2();

  // .F4BY.AnniversaryStage3Result result3 = 9;
  bool has_result3() const;
  private:
  bool _internal_has_result3() const;
  public:
  void clear_result3();
  const ::F4BY::AnniversaryStage3Result& result3() const;
  ::F4BY::AnniversaryStage3Result* release_result3();
  ::F4BY::AnniversaryStage3Result* mutable_result3();
  void set_allocated_result3(::F4BY::AnniversaryStage3Result* result3);
  private:
  const ::F4BY::AnniversaryStage3Result& _internal_result3() const;
  ::F4BY::AnniversaryStage3Result* _internal_mutable_result3();
  public:
  void unsafe_arena_set_allocated_result3(
      ::F4BY::AnniversaryStage3Result* result3);
  ::F4BY::AnniversaryStage3Result* unsafe_arena_release_result3();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 2;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_ratio = 3;
  void clear_bt_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_ratio() const;
  void set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_ratio() const;
  void _internal_set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_earn = 5;
  void clear_total_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 total_earn() const;
  void set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_earn() const;
  void _internal_set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool death = 6;
  void clear_death();
  bool death() const;
  void set_death(bool value);
  private:
  bool _internal_death() const;
  void _internal_set_death(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCAnniversarySelectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::F4BY::AnniversaryStage1Result* result1_;
  ::F4BY::AnniversaryStage2Result* result2_;
  ::F4BY::AnniversaryStage3Result* result3_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_earn_;
  bool death_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSAnniversaryHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSAnniversaryHit) */ {
 public:
  inline CSAnniversaryHit() : CSAnniversaryHit(nullptr) {}
  virtual ~CSAnniversaryHit();

  CSAnniversaryHit(const CSAnniversaryHit& from);
  CSAnniversaryHit(CSAnniversaryHit&& from) noexcept
    : CSAnniversaryHit() {
    *this = ::std::move(from);
  }

  inline CSAnniversaryHit& operator=(const CSAnniversaryHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSAnniversaryHit& operator=(CSAnniversaryHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSAnniversaryHit& default_instance();

  static inline const CSAnniversaryHit* internal_default_instance() {
    return reinterpret_cast<const CSAnniversaryHit*>(
               &_CSAnniversaryHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(CSAnniversaryHit& a, CSAnniversaryHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSAnniversaryHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSAnniversaryHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSAnniversaryHit* New() const final {
    return CreateMaybeMessage<CSAnniversaryHit>(nullptr);
  }

  CSAnniversaryHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSAnniversaryHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSAnniversaryHit& from);
  void MergeFrom(const CSAnniversaryHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSAnniversaryHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSAnniversaryHit";
  }
  protected:
  explicit CSAnniversaryHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFishesFieldNumber = 3,
    kBombIdFieldNumber = 1,
    kBtTypeFieldNumber = 2,
  };
  // repeated int32 screen_fishes = 3;
  int screen_fishes_size() const;
  private:
  int _internal_screen_fishes_size() const;
  public:
  void clear_screen_fishes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen_fishes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_screen_fishes() const;
  void _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_screen_fishes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 screen_fishes(int index) const;
  void set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      screen_fishes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_screen_fishes();

  // int32 bombId = 1;
  void clear_bombid();
  ::PROTOBUF_NAMESPACE_ID::int32 bombid() const;
  void set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bombid() const;
  void _internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bt_type = 2;
  void clear_bt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bt_type() const;
  void set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bt_type() const;
  void _internal_set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSAnniversaryHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > screen_fishes_;
  mutable std::atomic<int> _screen_fishes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncAnniversaryHitStage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncAnniversaryHitStage) */ {
 public:
  inline SCSyncAnniversaryHitStage() : SCSyncAnniversaryHitStage(nullptr) {}
  virtual ~SCSyncAnniversaryHitStage();

  SCSyncAnniversaryHitStage(const SCSyncAnniversaryHitStage& from);
  SCSyncAnniversaryHitStage(SCSyncAnniversaryHitStage&& from) noexcept
    : SCSyncAnniversaryHitStage() {
    *this = ::std::move(from);
  }

  inline SCSyncAnniversaryHitStage& operator=(const SCSyncAnniversaryHitStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncAnniversaryHitStage& operator=(SCSyncAnniversaryHitStage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncAnniversaryHitStage& default_instance();

  static inline const SCSyncAnniversaryHitStage* internal_default_instance() {
    return reinterpret_cast<const SCSyncAnniversaryHitStage*>(
               &_SCSyncAnniversaryHitStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(SCSyncAnniversaryHitStage& a, SCSyncAnniversaryHitStage& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncAnniversaryHitStage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncAnniversaryHitStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncAnniversaryHitStage* New() const final {
    return CreateMaybeMessage<SCSyncAnniversaryHitStage>(nullptr);
  }

  SCSyncAnniversaryHitStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncAnniversaryHitStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncAnniversaryHitStage& from);
  void MergeFrom(const SCSyncAnniversaryHitStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncAnniversaryHitStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncAnniversaryHitStage";
  }
  protected:
  explicit SCSyncAnniversaryHitStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kOriginIdFieldNumber = 2,
    kSelfIdFieldNumber = 3,
    kStageFieldNumber = 4,
    kTotalEarnFieldNumber = 5,
    kInvalidEarnFieldNumber = 6,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 origin_id = 2;
  void clear_origin_id();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_id() const;
  void set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_id() const;
  void _internal_set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 self_id = 3;
  void clear_self_id();
  ::PROTOBUF_NAMESPACE_ID::int32 self_id() const;
  void set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_self_id() const;
  void _internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 4;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_earn = 5;
  void clear_total_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 total_earn() const;
  void set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_earn() const;
  void _internal_set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 invalid_earn = 6;
  void clear_invalid_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_earn() const;
  void set_invalid_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid_earn() const;
  void _internal_set_invalid_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncAnniversaryHitStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 self_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_earn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class ScallopLottery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.ScallopLottery) */ {
 public:
  inline ScallopLottery() : ScallopLottery(nullptr) {}
  virtual ~ScallopLottery();

  ScallopLottery(const ScallopLottery& from);
  ScallopLottery(ScallopLottery&& from) noexcept
    : ScallopLottery() {
    *this = ::std::move(from);
  }

  inline ScallopLottery& operator=(const ScallopLottery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScallopLottery& operator=(ScallopLottery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScallopLottery& default_instance();

  static inline const ScallopLottery* internal_default_instance() {
    return reinterpret_cast<const ScallopLottery*>(
               &_ScallopLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(ScallopLottery& a, ScallopLottery& b) {
    a.Swap(&b);
  }
  inline void Swap(ScallopLottery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScallopLottery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScallopLottery* New() const final {
    return CreateMaybeMessage<ScallopLottery>(nullptr);
  }

  ScallopLottery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScallopLottery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScallopLottery& from);
  void MergeFrom(const ScallopLottery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScallopLottery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.ScallopLottery";
  }
  protected:
  explicit ScallopLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .F4BY.Obj reward = 4;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::F4BY::Obj& reward() const;
  ::F4BY::Obj* release_reward();
  ::F4BY::Obj* mutable_reward();
  void set_allocated_reward(::F4BY::Obj* reward);
  private:
  const ::F4BY::Obj& _internal_reward() const;
  ::F4BY::Obj* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::F4BY::Obj* reward);
  ::F4BY::Obj* unsafe_arena_release_reward();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.ScallopLottery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Obj* reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCCaptureScallop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCCaptureScallop) */ {
 public:
  inline SCCaptureScallop() : SCCaptureScallop(nullptr) {}
  virtual ~SCCaptureScallop();

  SCCaptureScallop(const SCCaptureScallop& from);
  SCCaptureScallop(SCCaptureScallop&& from) noexcept
    : SCCaptureScallop() {
    *this = ::std::move(from);
  }

  inline SCCaptureScallop& operator=(const SCCaptureScallop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCCaptureScallop& operator=(SCCaptureScallop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCCaptureScallop& default_instance();

  static inline const SCCaptureScallop* internal_default_instance() {
    return reinterpret_cast<const SCCaptureScallop*>(
               &_SCCaptureScallop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(SCCaptureScallop& a, SCCaptureScallop& b) {
    a.Swap(&b);
  }
  inline void Swap(SCCaptureScallop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCCaptureScallop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCCaptureScallop* New() const final {
    return CreateMaybeMessage<SCCaptureScallop>(nullptr);
  }

  SCCaptureScallop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCCaptureScallop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCCaptureScallop& from);
  void MergeFrom(const SCCaptureScallop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCCaptureScallop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCCaptureScallop";
  }
  protected:
  explicit SCCaptureScallop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLotteryListFieldNumber = 5,
    kRewardConfigFieldNumber = 6,
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kRatioFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // repeated .F4BY.ScallopLottery lottery_list = 5;
  int lottery_list_size() const;
  private:
  int _internal_lottery_list_size() const;
  public:
  void clear_lottery_list();
  ::F4BY::ScallopLottery* mutable_lottery_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >*
      mutable_lottery_list();
  private:
  const ::F4BY::ScallopLottery& _internal_lottery_list(int index) const;
  ::F4BY::ScallopLottery* _internal_add_lottery_list();
  public:
  const ::F4BY::ScallopLottery& lottery_list(int index) const;
  ::F4BY::ScallopLottery* add_lottery_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >&
      lottery_list() const;

  // repeated .F4BY.Obj reward_config = 6;
  int reward_config_size() const;
  private:
  int _internal_reward_config_size() const;
  public:
  void clear_reward_config();
  ::F4BY::Obj* mutable_reward_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >*
      mutable_reward_config();
  private:
  const ::F4BY::Obj& _internal_reward_config(int index) const;
  ::F4BY::Obj* _internal_add_reward_config();
  public:
  const ::F4BY::Obj& reward_config(int index) const;
  ::F4BY::Obj* add_reward_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >&
      reward_config() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCCaptureScallop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery > lottery_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj > reward_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSOpenScallop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSOpenScallop) */ {
 public:
  inline CSOpenScallop() : CSOpenScallop(nullptr) {}
  virtual ~CSOpenScallop();

  CSOpenScallop(const CSOpenScallop& from);
  CSOpenScallop(CSOpenScallop&& from) noexcept
    : CSOpenScallop() {
    *this = ::std::move(from);
  }

  inline CSOpenScallop& operator=(const CSOpenScallop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenScallop& operator=(CSOpenScallop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenScallop& default_instance();

  static inline const CSOpenScallop* internal_default_instance() {
    return reinterpret_cast<const CSOpenScallop*>(
               &_CSOpenScallop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(CSOpenScallop& a, CSOpenScallop& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenScallop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenScallop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenScallop* New() const final {
    return CreateMaybeMessage<CSOpenScallop>(nullptr);
  }

  CSOpenScallop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenScallop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenScallop& from);
  void MergeFrom(const CSOpenScallop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenScallop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSOpenScallop";
  }
  protected:
  explicit CSOpenScallop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSOpenScallop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCOpenScallop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCOpenScallop) */ {
 public:
  inline SCOpenScallop() : SCOpenScallop(nullptr) {}
  virtual ~SCOpenScallop();

  SCOpenScallop(const SCOpenScallop& from);
  SCOpenScallop(SCOpenScallop&& from) noexcept
    : SCOpenScallop() {
    *this = ::std::move(from);
  }

  inline SCOpenScallop& operator=(const SCOpenScallop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenScallop& operator=(SCOpenScallop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenScallop& default_instance();

  static inline const SCOpenScallop* internal_default_instance() {
    return reinterpret_cast<const SCOpenScallop*>(
               &_SCOpenScallop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(SCOpenScallop& a, SCOpenScallop& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenScallop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenScallop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenScallop* New() const final {
    return CreateMaybeMessage<SCOpenScallop>(nullptr);
  }

  SCOpenScallop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenScallop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenScallop& from);
  void MergeFrom(const SCOpenScallop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenScallop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCOpenScallop";
  }
  protected:
  explicit SCOpenScallop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScallopFieldNumber = 2,
    kChairIdxFieldNumber = 1,
  };
  // .F4BY.ScallopLottery scallop = 2;
  bool has_scallop() const;
  private:
  bool _internal_has_scallop() const;
  public:
  void clear_scallop();
  const ::F4BY::ScallopLottery& scallop() const;
  ::F4BY::ScallopLottery* release_scallop();
  ::F4BY::ScallopLottery* mutable_scallop();
  void set_allocated_scallop(::F4BY::ScallopLottery* scallop);
  private:
  const ::F4BY::ScallopLottery& _internal_scallop() const;
  ::F4BY::ScallopLottery* _internal_mutable_scallop();
  public:
  void unsafe_arena_set_allocated_scallop(
      ::F4BY::ScallopLottery* scallop);
  ::F4BY::ScallopLottery* unsafe_arena_release_scallop();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCOpenScallop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::ScallopLottery* scallop_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSettleScallopLottery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSettleScallopLottery) */ {
 public:
  inline SCSettleScallopLottery() : SCSettleScallopLottery(nullptr) {}
  virtual ~SCSettleScallopLottery();

  SCSettleScallopLottery(const SCSettleScallopLottery& from);
  SCSettleScallopLottery(SCSettleScallopLottery&& from) noexcept
    : SCSettleScallopLottery() {
    *this = ::std::move(from);
  }

  inline SCSettleScallopLottery& operator=(const SCSettleScallopLottery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSettleScallopLottery& operator=(SCSettleScallopLottery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSettleScallopLottery& default_instance();

  static inline const SCSettleScallopLottery* internal_default_instance() {
    return reinterpret_cast<const SCSettleScallopLottery*>(
               &_SCSettleScallopLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(SCSettleScallopLottery& a, SCSettleScallopLottery& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSettleScallopLottery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSettleScallopLottery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSettleScallopLottery* New() const final {
    return CreateMaybeMessage<SCSettleScallopLottery>(nullptr);
  }

  SCSettleScallopLottery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSettleScallopLottery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSettleScallopLottery& from);
  void MergeFrom(const SCSettleScallopLottery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSettleScallopLottery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSettleScallopLottery";
  }
  protected:
  explicit SCSettleScallopLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLotteryListFieldNumber = 3,
    kMultiListFieldNumber = 4,
    kChairIdxFieldNumber = 1,
    kEarnFieldNumber = 2,
  };
  // repeated .F4BY.ScallopLottery lottery_list = 3;
  int lottery_list_size() const;
  private:
  int _internal_lottery_list_size() const;
  public:
  void clear_lottery_list();
  ::F4BY::ScallopLottery* mutable_lottery_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >*
      mutable_lottery_list();
  private:
  const ::F4BY::ScallopLottery& _internal_lottery_list(int index) const;
  ::F4BY::ScallopLottery* _internal_add_lottery_list();
  public:
  const ::F4BY::ScallopLottery& lottery_list(int index) const;
  ::F4BY::ScallopLottery* add_lottery_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >&
      lottery_list() const;

  // repeated .F4BY.MultiInfo multi_list = 4;
  int multi_list_size() const;
  private:
  int _internal_multi_list_size() const;
  public:
  void clear_multi_list();
  ::F4BY::MultiInfo* mutable_multi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
      mutable_multi_list();
  private:
  const ::F4BY::MultiInfo& _internal_multi_list(int index) const;
  ::F4BY::MultiInfo* _internal_add_multi_list();
  public:
  const ::F4BY::MultiInfo& multi_list(int index) const;
  ::F4BY::MultiInfo* add_multi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
      multi_list() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 2;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSettleScallopLottery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery > lottery_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo > multi_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncScallopLottery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncScallopLottery) */ {
 public:
  inline SCSyncScallopLottery() : SCSyncScallopLottery(nullptr) {}
  virtual ~SCSyncScallopLottery();

  SCSyncScallopLottery(const SCSyncScallopLottery& from);
  SCSyncScallopLottery(SCSyncScallopLottery&& from) noexcept
    : SCSyncScallopLottery() {
    *this = ::std::move(from);
  }

  inline SCSyncScallopLottery& operator=(const SCSyncScallopLottery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncScallopLottery& operator=(SCSyncScallopLottery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncScallopLottery& default_instance();

  static inline const SCSyncScallopLottery* internal_default_instance() {
    return reinterpret_cast<const SCSyncScallopLottery*>(
               &_SCSyncScallopLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(SCSyncScallopLottery& a, SCSyncScallopLottery& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncScallopLottery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncScallopLottery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncScallopLottery* New() const final {
    return CreateMaybeMessage<SCSyncScallopLottery>(nullptr);
  }

  SCSyncScallopLottery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncScallopLottery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncScallopLottery& from);
  void MergeFrom(const SCSyncScallopLottery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncScallopLottery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncScallopLottery";
  }
  protected:
  explicit SCSyncScallopLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLotteryListFieldNumber = 4,
    kRewardConfigFieldNumber = 5,
    kChairIdxFieldNumber = 1,
    kRatioFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // repeated .F4BY.ScallopLottery lottery_list = 4;
  int lottery_list_size() const;
  private:
  int _internal_lottery_list_size() const;
  public:
  void clear_lottery_list();
  ::F4BY::ScallopLottery* mutable_lottery_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >*
      mutable_lottery_list();
  private:
  const ::F4BY::ScallopLottery& _internal_lottery_list(int index) const;
  ::F4BY::ScallopLottery* _internal_add_lottery_list();
  public:
  const ::F4BY::ScallopLottery& lottery_list(int index) const;
  ::F4BY::ScallopLottery* add_lottery_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >&
      lottery_list() const;

  // repeated .F4BY.Obj reward_config = 5;
  int reward_config_size() const;
  private:
  int _internal_reward_config_size() const;
  public:
  void clear_reward_config();
  ::F4BY::Obj* mutable_reward_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >*
      mutable_reward_config();
  private:
  const ::F4BY::Obj& _internal_reward_config(int index) const;
  ::F4BY::Obj* _internal_add_reward_config();
  public:
  const ::F4BY::Obj& reward_config(int index) const;
  ::F4BY::Obj* add_reward_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >&
      reward_config() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncScallopLottery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery > lottery_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj > reward_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class OpenChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.OpenChestReward) */ {
 public:
  inline OpenChestReward() : OpenChestReward(nullptr) {}
  virtual ~OpenChestReward();

  OpenChestReward(const OpenChestReward& from);
  OpenChestReward(OpenChestReward&& from) noexcept
    : OpenChestReward() {
    *this = ::std::move(from);
  }

  inline OpenChestReward& operator=(const OpenChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenChestReward& operator=(OpenChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenChestReward& default_instance();

  static inline const OpenChestReward* internal_default_instance() {
    return reinterpret_cast<const OpenChestReward*>(
               &_OpenChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(OpenChestReward& a, OpenChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenChestReward* New() const final {
    return CreateMaybeMessage<OpenChestReward>(nullptr);
  }

  OpenChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenChestReward& from);
  void MergeFrom(const OpenChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.OpenChestReward";
  }
  protected:
  explicit OpenChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .F4BY.Decimal num = 2;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const ::F4BY::Decimal& num() const;
  ::F4BY::Decimal* release_num();
  ::F4BY::Decimal* mutable_num();
  void set_allocated_num(::F4BY::Decimal* num);
  private:
  const ::F4BY::Decimal& _internal_num() const;
  ::F4BY::Decimal* _internal_mutable_num();
  public:
  void unsafe_arena_set_allocated_num(
      ::F4BY::Decimal* num);
  ::F4BY::Decimal* unsafe_arena_release_num();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.OpenChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Decimal* num_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCUpdateChestStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCUpdateChestStatus) */ {
 public:
  inline SCUpdateChestStatus() : SCUpdateChestStatus(nullptr) {}
  virtual ~SCUpdateChestStatus();

  SCUpdateChestStatus(const SCUpdateChestStatus& from);
  SCUpdateChestStatus(SCUpdateChestStatus&& from) noexcept
    : SCUpdateChestStatus() {
    *this = ::std::move(from);
  }

  inline SCUpdateChestStatus& operator=(const SCUpdateChestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUpdateChestStatus& operator=(SCUpdateChestStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUpdateChestStatus& default_instance();

  static inline const SCUpdateChestStatus* internal_default_instance() {
    return reinterpret_cast<const SCUpdateChestStatus*>(
               &_SCUpdateChestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(SCUpdateChestStatus& a, SCUpdateChestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUpdateChestStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUpdateChestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUpdateChestStatus* New() const final {
    return CreateMaybeMessage<SCUpdateChestStatus>(nullptr);
  }

  SCUpdateChestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUpdateChestStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUpdateChestStatus& from);
  void MergeFrom(const SCUpdateChestStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUpdateChestStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCUpdateChestStatus";
  }
  protected:
  explicit SCUpdateChestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChestTypeFieldNumber = 2,
    kTotalProgressFieldNumber = 3,
    kIsActiveFieldNumber = 1,
    kGuideFieldNumber = 5,
    kRemainProgressFieldNumber = 4,
    kAvailableRewardFieldNumber = 6,
  };
  // .F4BY.ChestType chest_type = 2;
  void clear_chest_type();
  ::F4BY::ChestType chest_type() const;
  void set_chest_type(::F4BY::ChestType value);
  private:
  ::F4BY::ChestType _internal_chest_type() const;
  void _internal_set_chest_type(::F4BY::ChestType value);
  public:

  // int32 total_progress = 3;
  void clear_total_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 total_progress() const;
  void set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_progress() const;
  void _internal_set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool guide = 5;
  void clear_guide();
  bool guide() const;
  void set_guide(bool value);
  private:
  bool _internal_guide() const;
  void _internal_set_guide(bool value);
  public:

  // int32 remain_progress = 4;
  void clear_remain_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_progress() const;
  void set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_progress() const;
  void _internal_set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 available_reward = 6;
  void clear_available_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 available_reward() const;
  void set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available_reward() const;
  void _internal_set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCUpdateChestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int chest_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_progress_;
  bool is_active_;
  bool guide_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSChestConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSChestConfig) */ {
 public:
  inline CSChestConfig() : CSChestConfig(nullptr) {}
  virtual ~CSChestConfig();

  CSChestConfig(const CSChestConfig& from);
  CSChestConfig(CSChestConfig&& from) noexcept
    : CSChestConfig() {
    *this = ::std::move(from);
  }

  inline CSChestConfig& operator=(const CSChestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestConfig& operator=(CSChestConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestConfig& default_instance();

  static inline const CSChestConfig* internal_default_instance() {
    return reinterpret_cast<const CSChestConfig*>(
               &_CSChestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(CSChestConfig& a, CSChestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestConfig* New() const final {
    return CreateMaybeMessage<CSChestConfig>(nullptr);
  }

  CSChestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestConfig& from);
  void MergeFrom(const CSChestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSChestConfig";
  }
  protected:
  explicit CSChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSChestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class ChestBrief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.ChestBrief) */ {
 public:
  inline ChestBrief() : ChestBrief(nullptr) {}
  virtual ~ChestBrief();

  ChestBrief(const ChestBrief& from);
  ChestBrief(ChestBrief&& from) noexcept
    : ChestBrief() {
    *this = ::std::move(from);
  }

  inline ChestBrief& operator=(const ChestBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestBrief& operator=(ChestBrief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChestBrief& default_instance();

  static inline const ChestBrief* internal_default_instance() {
    return reinterpret_cast<const ChestBrief*>(
               &_ChestBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(ChestBrief& a, ChestBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestBrief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChestBrief* New() const final {
    return CreateMaybeMessage<ChestBrief>(nullptr);
  }

  ChestBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChestBrief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChestBrief& from);
  void MergeFrom(const ChestBrief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestBrief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.ChestBrief";
  }
  protected:
  explicit ChestBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 2,
    kChestTypeFieldNumber = 1,
  };
  // repeated .F4BY.OpenChestReward reward = 2;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  ::F4BY::OpenChestReward* mutable_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >*
      mutable_reward();
  private:
  const ::F4BY::OpenChestReward& _internal_reward(int index) const;
  ::F4BY::OpenChestReward* _internal_add_reward();
  public:
  const ::F4BY::OpenChestReward& reward(int index) const;
  ::F4BY::OpenChestReward* add_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >&
      reward() const;

  // .F4BY.ChestType chest_type = 1;
  void clear_chest_type();
  ::F4BY::ChestType chest_type() const;
  void set_chest_type(::F4BY::ChestType value);
  private:
  ::F4BY::ChestType _internal_chest_type() const;
  void _internal_set_chest_type(::F4BY::ChestType value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.ChestBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward > reward_;
  int chest_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCChestConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCChestConfig) */ {
 public:
  inline SCChestConfig() : SCChestConfig(nullptr) {}
  virtual ~SCChestConfig();

  SCChestConfig(const SCChestConfig& from);
  SCChestConfig(SCChestConfig&& from) noexcept
    : SCChestConfig() {
    *this = ::std::move(from);
  }

  inline SCChestConfig& operator=(const SCChestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestConfig& operator=(SCChestConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestConfig& default_instance();

  static inline const SCChestConfig* internal_default_instance() {
    return reinterpret_cast<const SCChestConfig*>(
               &_SCChestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(SCChestConfig& a, SCChestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestConfig* New() const final {
    return CreateMaybeMessage<SCChestConfig>(nullptr);
  }

  SCChestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestConfig& from);
  void MergeFrom(const SCChestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCChestConfig";
  }
  protected:
  explicit SCChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChestBriefListFieldNumber = 2,
    kEndTimeFieldNumber = 1,
    kMinRatioFieldNumber = 3,
    kAutoOptionFieldNumber = 5,
    kAutoOpenFieldNumber = 4,
    kIsEnableFieldNumber = 6,
  };
  // repeated .F4BY.ChestBrief chest_brief_list = 2;
  int chest_brief_list_size() const;
  private:
  int _internal_chest_brief_list_size() const;
  public:
  void clear_chest_brief_list();
  ::F4BY::ChestBrief* mutable_chest_brief_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ChestBrief >*
      mutable_chest_brief_list();
  private:
  const ::F4BY::ChestBrief& _internal_chest_brief_list(int index) const;
  ::F4BY::ChestBrief* _internal_add_chest_brief_list();
  public:
  const ::F4BY::ChestBrief& chest_brief_list(int index) const;
  ::F4BY::ChestBrief* add_chest_brief_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ChestBrief >&
      chest_brief_list() const;

  // int32 end_time = 1;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_ratio = 3;
  void clear_min_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 min_ratio() const;
  void set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_ratio() const;
  void _internal_set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .F4BY.ChestAutoSelectOption auto_option = 5;
  void clear_auto_option();
  ::F4BY::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::F4BY::ChestAutoSelectOption value);
  private:
  ::F4BY::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::F4BY::ChestAutoSelectOption value);
  public:

  // bool auto_open = 4;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // bool is_enable = 6;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCChestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ChestBrief > chest_brief_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_ratio_;
  int auto_option_;
  bool auto_open_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCOpenChest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCOpenChest) */ {
 public:
  inline SCOpenChest() : SCOpenChest(nullptr) {}
  virtual ~SCOpenChest();

  SCOpenChest(const SCOpenChest& from);
  SCOpenChest(SCOpenChest&& from) noexcept
    : SCOpenChest() {
    *this = ::std::move(from);
  }

  inline SCOpenChest& operator=(const SCOpenChest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenChest& operator=(SCOpenChest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenChest& default_instance();

  static inline const SCOpenChest* internal_default_instance() {
    return reinterpret_cast<const SCOpenChest*>(
               &_SCOpenChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(SCOpenChest& a, SCOpenChest& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenChest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenChest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenChest* New() const final {
    return CreateMaybeMessage<SCOpenChest>(nullptr);
  }

  SCOpenChest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenChest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenChest& from);
  void MergeFrom(const SCOpenChest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenChest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCOpenChest";
  }
  protected:
  explicit SCOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 1,
    kAutoOptionFieldNumber = 2,
  };
  // repeated .F4BY.OpenChestReward reward_list = 1;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::OpenChestReward* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >*
      mutable_reward_list();
  private:
  const ::F4BY::OpenChestReward& _internal_reward_list(int index) const;
  ::F4BY::OpenChestReward* _internal_add_reward_list();
  public:
  const ::F4BY::OpenChestReward& reward_list(int index) const;
  ::F4BY::OpenChestReward* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >&
      reward_list() const;

  // .F4BY.ChestAutoSelectOption auto_option = 2;
  void clear_auto_option();
  ::F4BY::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::F4BY::ChestAutoSelectOption value);
  private:
  ::F4BY::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::F4BY::ChestAutoSelectOption value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCOpenChest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward > reward_list_;
  int auto_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSelectChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSelectChestReward) */ {
 public:
  inline CSSelectChestReward() : CSSelectChestReward(nullptr) {}
  virtual ~CSSelectChestReward();

  CSSelectChestReward(const CSSelectChestReward& from);
  CSSelectChestReward(CSSelectChestReward&& from) noexcept
    : CSSelectChestReward() {
    *this = ::std::move(from);
  }

  inline CSSelectChestReward& operator=(const CSSelectChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSelectChestReward& operator=(CSSelectChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSelectChestReward& default_instance();

  static inline const CSSelectChestReward* internal_default_instance() {
    return reinterpret_cast<const CSSelectChestReward*>(
               &_CSSelectChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(CSSelectChestReward& a, CSSelectChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSelectChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSelectChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSelectChestReward* New() const final {
    return CreateMaybeMessage<CSSelectChestReward>(nullptr);
  }

  CSSelectChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSelectChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSelectChestReward& from);
  void MergeFrom(const CSSelectChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSelectChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSelectChestReward";
  }
  protected:
  explicit CSSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectIndexFieldNumber = 1,
  };
  // int32 select_index = 1;
  void clear_select_index();
  ::PROTOBUF_NAMESPACE_ID::int32 select_index() const;
  void set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_select_index() const;
  void _internal_set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSelectChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 select_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSelectChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSelectChestReward) */ {
 public:
  inline SCSelectChestReward() : SCSelectChestReward(nullptr) {}
  virtual ~SCSelectChestReward();

  SCSelectChestReward(const SCSelectChestReward& from);
  SCSelectChestReward(SCSelectChestReward&& from) noexcept
    : SCSelectChestReward() {
    *this = ::std::move(from);
  }

  inline SCSelectChestReward& operator=(const SCSelectChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSelectChestReward& operator=(SCSelectChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSelectChestReward& default_instance();

  static inline const SCSelectChestReward* internal_default_instance() {
    return reinterpret_cast<const SCSelectChestReward*>(
               &_SCSelectChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(SCSelectChestReward& a, SCSelectChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSelectChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSelectChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSelectChestReward* New() const final {
    return CreateMaybeMessage<SCSelectChestReward>(nullptr);
  }

  SCSelectChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSelectChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSelectChestReward& from);
  void MergeFrom(const SCSelectChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSelectChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSelectChestReward";
  }
  protected:
  explicit SCSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 1,
  };
  // .F4BY.OpenChestReward reward = 1;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::F4BY::OpenChestReward& reward() const;
  ::F4BY::OpenChestReward* release_reward();
  ::F4BY::OpenChestReward* mutable_reward();
  void set_allocated_reward(::F4BY::OpenChestReward* reward);
  private:
  const ::F4BY::OpenChestReward& _internal_reward() const;
  ::F4BY::OpenChestReward* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::F4BY::OpenChestReward* reward);
  ::F4BY::OpenChestReward* unsafe_arena_release_reward();

  // @@protoc_insertion_point(class_scope:F4BY.SCSelectChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::OpenChestReward* reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSChestSetAutoSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSChestSetAutoSelect) */ {
 public:
  inline CSChestSetAutoSelect() : CSChestSetAutoSelect(nullptr) {}
  virtual ~CSChestSetAutoSelect();

  CSChestSetAutoSelect(const CSChestSetAutoSelect& from);
  CSChestSetAutoSelect(CSChestSetAutoSelect&& from) noexcept
    : CSChestSetAutoSelect() {
    *this = ::std::move(from);
  }

  inline CSChestSetAutoSelect& operator=(const CSChestSetAutoSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestSetAutoSelect& operator=(CSChestSetAutoSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestSetAutoSelect& default_instance();

  static inline const CSChestSetAutoSelect* internal_default_instance() {
    return reinterpret_cast<const CSChestSetAutoSelect*>(
               &_CSChestSetAutoSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(CSChestSetAutoSelect& a, CSChestSetAutoSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestSetAutoSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestSetAutoSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestSetAutoSelect* New() const final {
    return CreateMaybeMessage<CSChestSetAutoSelect>(nullptr);
  }

  CSChestSetAutoSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestSetAutoSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestSetAutoSelect& from);
  void MergeFrom(const CSChestSetAutoSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestSetAutoSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSChestSetAutoSelect";
  }
  protected:
  explicit CSChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoOptionFieldNumber = 1,
    kAutoOpenFieldNumber = 2,
  };
  // .F4BY.ChestAutoSelectOption auto_option = 1;
  void clear_auto_option();
  ::F4BY::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::F4BY::ChestAutoSelectOption value);
  private:
  ::F4BY::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::F4BY::ChestAutoSelectOption value);
  public:

  // bool auto_open = 2;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSChestSetAutoSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int auto_option_;
  bool auto_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCChestSetAutoSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCChestSetAutoSelect) */ {
 public:
  inline SCChestSetAutoSelect() : SCChestSetAutoSelect(nullptr) {}
  virtual ~SCChestSetAutoSelect();

  SCChestSetAutoSelect(const SCChestSetAutoSelect& from);
  SCChestSetAutoSelect(SCChestSetAutoSelect&& from) noexcept
    : SCChestSetAutoSelect() {
    *this = ::std::move(from);
  }

  inline SCChestSetAutoSelect& operator=(const SCChestSetAutoSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestSetAutoSelect& operator=(SCChestSetAutoSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestSetAutoSelect& default_instance();

  static inline const SCChestSetAutoSelect* internal_default_instance() {
    return reinterpret_cast<const SCChestSetAutoSelect*>(
               &_SCChestSetAutoSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(SCChestSetAutoSelect& a, SCChestSetAutoSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestSetAutoSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestSetAutoSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestSetAutoSelect* New() const final {
    return CreateMaybeMessage<SCChestSetAutoSelect>(nullptr);
  }

  SCChestSetAutoSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestSetAutoSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestSetAutoSelect& from);
  void MergeFrom(const SCChestSetAutoSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestSetAutoSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCChestSetAutoSelect";
  }
  protected:
  explicit SCChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoOptionFieldNumber = 1,
    kAutoOpenFieldNumber = 2,
  };
  // .F4BY.ChestAutoSelectOption auto_option = 1;
  void clear_auto_option();
  ::F4BY::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::F4BY::ChestAutoSelectOption value);
  private:
  ::F4BY::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::F4BY::ChestAutoSelectOption value);
  public:

  // bool auto_open = 2;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCChestSetAutoSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int auto_option_;
  bool auto_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSChestSetEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSChestSetEnable) */ {
 public:
  inline CSChestSetEnable() : CSChestSetEnable(nullptr) {}
  virtual ~CSChestSetEnable();

  CSChestSetEnable(const CSChestSetEnable& from);
  CSChestSetEnable(CSChestSetEnable&& from) noexcept
    : CSChestSetEnable() {
    *this = ::std::move(from);
  }

  inline CSChestSetEnable& operator=(const CSChestSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestSetEnable& operator=(CSChestSetEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestSetEnable& default_instance();

  static inline const CSChestSetEnable* internal_default_instance() {
    return reinterpret_cast<const CSChestSetEnable*>(
               &_CSChestSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(CSChestSetEnable& a, CSChestSetEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestSetEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestSetEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestSetEnable* New() const final {
    return CreateMaybeMessage<CSChestSetEnable>(nullptr);
  }

  CSChestSetEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestSetEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestSetEnable& from);
  void MergeFrom(const CSChestSetEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestSetEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSChestSetEnable";
  }
  protected:
  explicit CSChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableFieldNumber = 1,
  };
  // bool is_enable = 1;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSChestSetEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCChestSetEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCChestSetEnable) */ {
 public:
  inline SCChestSetEnable() : SCChestSetEnable(nullptr) {}
  virtual ~SCChestSetEnable();

  SCChestSetEnable(const SCChestSetEnable& from);
  SCChestSetEnable(SCChestSetEnable&& from) noexcept
    : SCChestSetEnable() {
    *this = ::std::move(from);
  }

  inline SCChestSetEnable& operator=(const SCChestSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestSetEnable& operator=(SCChestSetEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestSetEnable& default_instance();

  static inline const SCChestSetEnable* internal_default_instance() {
    return reinterpret_cast<const SCChestSetEnable*>(
               &_SCChestSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(SCChestSetEnable& a, SCChestSetEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestSetEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestSetEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestSetEnable* New() const final {
    return CreateMaybeMessage<SCChestSetEnable>(nullptr);
  }

  SCChestSetEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestSetEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestSetEnable& from);
  void MergeFrom(const SCChestSetEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestSetEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCChestSetEnable";
  }
  protected:
  explicit SCChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableFieldNumber = 1,
  };
  // bool is_enable = 1;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCChestSetEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSpecEffect) */ {
 public:
  inline SCSpecEffect() : SCSpecEffect(nullptr) {}
  virtual ~SCSpecEffect();

  SCSpecEffect(const SCSpecEffect& from);
  SCSpecEffect(SCSpecEffect&& from) noexcept
    : SCSpecEffect() {
    *this = ::std::move(from);
  }

  inline SCSpecEffect& operator=(const SCSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSpecEffect& operator=(SCSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSpecEffect& default_instance();

  static inline const SCSpecEffect* internal_default_instance() {
    return reinterpret_cast<const SCSpecEffect*>(
               &_SCSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(SCSpecEffect& a, SCSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSpecEffect* New() const final {
    return CreateMaybeMessage<SCSpecEffect>(nullptr);
  }

  SCSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSpecEffect& from);
  void MergeFrom(const SCSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSpecEffect";
  }
  protected:
  explicit SCSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostMoneyFieldNumber = 1,
    kEarnMoneyFieldNumber = 2,
  };
  // int32 costMoney = 1;
  void clear_costmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 costmoney() const;
  void set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costmoney() const;
  void _internal_set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earnMoney = 2;
  void clear_earnmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 earnmoney() const;
  void set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earnmoney() const;
  void _internal_set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 costmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 earnmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTortoiseExplode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTortoiseExplode) */ {
 public:
  inline SCTortoiseExplode() : SCTortoiseExplode(nullptr) {}
  virtual ~SCTortoiseExplode();

  SCTortoiseExplode(const SCTortoiseExplode& from);
  SCTortoiseExplode(SCTortoiseExplode&& from) noexcept
    : SCTortoiseExplode() {
    *this = ::std::move(from);
  }

  inline SCTortoiseExplode& operator=(const SCTortoiseExplode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTortoiseExplode& operator=(SCTortoiseExplode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTortoiseExplode& default_instance();

  static inline const SCTortoiseExplode* internal_default_instance() {
    return reinterpret_cast<const SCTortoiseExplode*>(
               &_SCTortoiseExplode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(SCTortoiseExplode& a, SCTortoiseExplode& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTortoiseExplode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTortoiseExplode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTortoiseExplode* New() const final {
    return CreateMaybeMessage<SCTortoiseExplode>(nullptr);
  }

  SCTortoiseExplode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTortoiseExplode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTortoiseExplode& from);
  void MergeFrom(const SCTortoiseExplode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTortoiseExplode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTortoiseExplode";
  }
  protected:
  explicit SCTortoiseExplode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kBulletIdFieldNumber = 3,
    kRatioFieldNumber = 4,
    kMaxEffectFieldNumber = 5,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_id = 3;
  void clear_bullet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id() const;
  void set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id() const;
  void _internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_effect = 5;
  void clear_max_effect();
  ::PROTOBUF_NAMESPACE_ID::int32 max_effect() const;
  void set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_effect() const;
  void _internal_set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTortoiseExplode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_effect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class RewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.RewardInfo) */ {
 public:
  inline RewardInfo() : RewardInfo(nullptr) {}
  virtual ~RewardInfo();

  RewardInfo(const RewardInfo& from);
  RewardInfo(RewardInfo&& from) noexcept
    : RewardInfo() {
    *this = ::std::move(from);
  }

  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardInfo& operator=(RewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardInfo& default_instance();

  static inline const RewardInfo* internal_default_instance() {
    return reinterpret_cast<const RewardInfo*>(
               &_RewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(RewardInfo& a, RewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardInfo* New() const final {
    return CreateMaybeMessage<RewardInfo>(nullptr);
  }

  RewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.RewardInfo";
  }
  protected:
  explicit RewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kPropNumFieldNumber = 2,
    kQualityFieldNumber = 3,
    kSpecShowFieldNumber = 4,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_num = 2;
  void clear_prop_num();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_num() const;
  void set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_num() const;
  void _internal_set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 quality = 3;
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool spec_show = 4;
  void clear_spec_show();
  bool spec_show() const;
  void set_spec_show(bool value);
  private:
  bool _internal_spec_show() const;
  void _internal_set_spec_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.RewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  bool spec_show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class MissionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.MissionInfo) */ {
 public:
  inline MissionInfo() : MissionInfo(nullptr) {}
  virtual ~MissionInfo();

  MissionInfo(const MissionInfo& from);
  MissionInfo(MissionInfo&& from) noexcept
    : MissionInfo() {
    *this = ::std::move(from);
  }

  inline MissionInfo& operator=(const MissionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionInfo& operator=(MissionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionInfo& default_instance();

  static inline const MissionInfo* internal_default_instance() {
    return reinterpret_cast<const MissionInfo*>(
               &_MissionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(MissionInfo& a, MissionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionInfo* New() const final {
    return CreateMaybeMessage<MissionInfo>(nullptr);
  }

  MissionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionInfo& from);
  void MergeFrom(const MissionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.MissionInfo";
  }
  protected:
  explicit MissionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kDrawTimesFieldNumber = 1,
    kCompleteFieldNumber = 3,
    kReceiveFieldNumber = 4,
    kMissionIdFieldNumber = 5,
  };
  // repeated .F4BY.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_reward_list();
  private:
  const ::F4BY::RewardInfo& _internal_reward_list(int index) const;
  ::F4BY::RewardInfo* _internal_add_reward_list();
  public:
  const ::F4BY::RewardInfo& reward_list(int index) const;
  ::F4BY::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      reward_list() const;

  // int32 draw_times = 1;
  void clear_draw_times();
  ::PROTOBUF_NAMESPACE_ID::int32 draw_times() const;
  void set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_draw_times() const;
  void _internal_set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool complete = 3;
  void clear_complete();
  bool complete() const;
  void set_complete(bool value);
  private:
  bool _internal_complete() const;
  void _internal_set_complete(bool value);
  public:

  // bool receive = 4;
  void clear_receive();
  bool receive() const;
  void set_receive(bool value);
  private:
  bool _internal_receive() const;
  void _internal_set_receive(bool value);
  public:

  // int32 mission_id = 5;
  void clear_mission_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_id() const;
  void set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_id() const;
  void _internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.MissionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > reward_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 draw_times_;
  bool complete_;
  bool receive_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class BigRewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.BigRewardInfo) */ {
 public:
  inline BigRewardInfo() : BigRewardInfo(nullptr) {}
  virtual ~BigRewardInfo();

  BigRewardInfo(const BigRewardInfo& from);
  BigRewardInfo(BigRewardInfo&& from) noexcept
    : BigRewardInfo() {
    *this = ::std::move(from);
  }

  inline BigRewardInfo& operator=(const BigRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigRewardInfo& operator=(BigRewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BigRewardInfo& default_instance();

  static inline const BigRewardInfo* internal_default_instance() {
    return reinterpret_cast<const BigRewardInfo*>(
               &_BigRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(BigRewardInfo& a, BigRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BigRewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BigRewardInfo* New() const final {
    return CreateMaybeMessage<BigRewardInfo>(nullptr);
  }

  BigRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BigRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BigRewardInfo& from);
  void MergeFrom(const BigRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.BigRewardInfo";
  }
  protected:
  explicit BigRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawRewardListFieldNumber = 2,
    kBigRewardTimesFieldNumber = 1,
  };
  // repeated .F4BY.RewardInfo draw_rewardList = 2;
  int draw_rewardlist_size() const;
  private:
  int _internal_draw_rewardlist_size() const;
  public:
  void clear_draw_rewardlist();
  ::F4BY::RewardInfo* mutable_draw_rewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_draw_rewardlist();
  private:
  const ::F4BY::RewardInfo& _internal_draw_rewardlist(int index) const;
  ::F4BY::RewardInfo* _internal_add_draw_rewardlist();
  public:
  const ::F4BY::RewardInfo& draw_rewardlist(int index) const;
  ::F4BY::RewardInfo* add_draw_rewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      draw_rewardlist() const;

  // int32 big_reward_times = 1;
  void clear_big_reward_times();
  ::PROTOBUF_NAMESPACE_ID::int32 big_reward_times() const;
  void set_big_reward_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_reward_times() const;
  void _internal_set_big_reward_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.BigRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > draw_rewardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_reward_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class TreasureHuntConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.TreasureHuntConfig) */ {
 public:
  inline TreasureHuntConfig() : TreasureHuntConfig(nullptr) {}
  virtual ~TreasureHuntConfig();

  TreasureHuntConfig(const TreasureHuntConfig& from);
  TreasureHuntConfig(TreasureHuntConfig&& from) noexcept
    : TreasureHuntConfig() {
    *this = ::std::move(from);
  }

  inline TreasureHuntConfig& operator=(const TreasureHuntConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreasureHuntConfig& operator=(TreasureHuntConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TreasureHuntConfig& default_instance();

  static inline const TreasureHuntConfig* internal_default_instance() {
    return reinterpret_cast<const TreasureHuntConfig*>(
               &_TreasureHuntConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(TreasureHuntConfig& a, TreasureHuntConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TreasureHuntConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreasureHuntConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreasureHuntConfig* New() const final {
    return CreateMaybeMessage<TreasureHuntConfig>(nullptr);
  }

  TreasureHuntConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreasureHuntConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreasureHuntConfig& from);
  void MergeFrom(const TreasureHuntConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasureHuntConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.TreasureHuntConfig";
  }
  protected:
  explicit TreasureHuntConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 6,
    kBigRewardInfoFieldNumber = 5,
    kTermFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kEnableFieldNumber = 4,
    kMinDrawFieldNumber = 7,
    kMaxDrawFieldNumber = 8,
    kTopicFieldNumber = 9,
  };
  // repeated .F4BY.RewardInfo reward_list = 6;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_reward_list();
  private:
  const ::F4BY::RewardInfo& _internal_reward_list(int index) const;
  ::F4BY::RewardInfo* _internal_add_reward_list();
  public:
  const ::F4BY::RewardInfo& reward_list(int index) const;
  ::F4BY::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      reward_list() const;

  // .F4BY.BigRewardInfo big_reward_info = 5;
  bool has_big_reward_info() const;
  private:
  bool _internal_has_big_reward_info() const;
  public:
  void clear_big_reward_info();
  const ::F4BY::BigRewardInfo& big_reward_info() const;
  ::F4BY::BigRewardInfo* release_big_reward_info();
  ::F4BY::BigRewardInfo* mutable_big_reward_info();
  void set_allocated_big_reward_info(::F4BY::BigRewardInfo* big_reward_info);
  private:
  const ::F4BY::BigRewardInfo& _internal_big_reward_info() const;
  ::F4BY::BigRewardInfo* _internal_mutable_big_reward_info();
  public:
  void unsafe_arena_set_allocated_big_reward_info(
      ::F4BY::BigRewardInfo* big_reward_info);
  ::F4BY::BigRewardInfo* unsafe_arena_release_big_reward_info();

  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_time = 2;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_time = 3;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 4;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 min_draw = 7;
  void clear_min_draw();
  ::PROTOBUF_NAMESPACE_ID::int32 min_draw() const;
  void set_min_draw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_draw() const;
  void _internal_set_min_draw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_draw = 8;
  void clear_max_draw();
  ::PROTOBUF_NAMESPACE_ID::int32 max_draw() const;
  void set_max_draw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_draw() const;
  void _internal_set_max_draw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 topic = 9;
  void clear_topic();
  ::PROTOBUF_NAMESPACE_ID::int32 topic() const;
  void set_topic(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topic() const;
  void _internal_set_topic(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.TreasureHuntConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > reward_list_;
  ::F4BY::BigRewardInfo* big_reward_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_draw_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_draw_;
  ::PROTOBUF_NAMESPACE_ID::int32 topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSyncConfigs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSyncConfigs) */ {
 public:
  inline CSSyncConfigs() : CSSyncConfigs(nullptr) {}
  virtual ~CSSyncConfigs();

  CSSyncConfigs(const CSSyncConfigs& from);
  CSSyncConfigs(CSSyncConfigs&& from) noexcept
    : CSSyncConfigs() {
    *this = ::std::move(from);
  }

  inline CSSyncConfigs& operator=(const CSSyncConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncConfigs& operator=(CSSyncConfigs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncConfigs& default_instance();

  static inline const CSSyncConfigs* internal_default_instance() {
    return reinterpret_cast<const CSSyncConfigs*>(
               &_CSSyncConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(CSSyncConfigs& a, CSSyncConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncConfigs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncConfigs* New() const final {
    return CreateMaybeMessage<CSSyncConfigs>(nullptr);
  }

  CSSyncConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncConfigs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncConfigs& from);
  void MergeFrom(const CSSyncConfigs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncConfigs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSyncConfigs";
  }
  protected:
  explicit CSSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigTypeFieldNumber = 1,
  };
  // int32 config_type = 1;
  void clear_config_type();
  ::PROTOBUF_NAMESPACE_ID::int32 config_type() const;
  void set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_config_type() const;
  void _internal_set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSyncConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 config_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncConfigs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCSyncConfigs) */ {
 public:
  inline SCSyncConfigs() : SCSyncConfigs(nullptr) {}
  virtual ~SCSyncConfigs();

  SCSyncConfigs(const SCSyncConfigs& from);
  SCSyncConfigs(SCSyncConfigs&& from) noexcept
    : SCSyncConfigs() {
    *this = ::std::move(from);
  }

  inline SCSyncConfigs& operator=(const SCSyncConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncConfigs& operator=(SCSyncConfigs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncConfigs& default_instance();

  static inline const SCSyncConfigs* internal_default_instance() {
    return reinterpret_cast<const SCSyncConfigs*>(
               &_SCSyncConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(SCSyncConfigs& a, SCSyncConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncConfigs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncConfigs* New() const final {
    return CreateMaybeMessage<SCSyncConfigs>(nullptr);
  }

  SCSyncConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncConfigs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncConfigs& from);
  void MergeFrom(const SCSyncConfigs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncConfigs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCSyncConfigs";
  }
  protected:
  explicit SCSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreasureConfigFieldNumber = 1,
  };
  // .F4BY.TreasureHuntConfig treasure_config = 1;
  bool has_treasure_config() const;
  private:
  bool _internal_has_treasure_config() const;
  public:
  void clear_treasure_config();
  const ::F4BY::TreasureHuntConfig& treasure_config() const;
  ::F4BY::TreasureHuntConfig* release_treasure_config();
  ::F4BY::TreasureHuntConfig* mutable_treasure_config();
  void set_allocated_treasure_config(::F4BY::TreasureHuntConfig* treasure_config);
  private:
  const ::F4BY::TreasureHuntConfig& _internal_treasure_config() const;
  ::F4BY::TreasureHuntConfig* _internal_mutable_treasure_config();
  public:
  void unsafe_arena_set_allocated_treasure_config(
      ::F4BY::TreasureHuntConfig* treasure_config);
  ::F4BY::TreasureHuntConfig* unsafe_arena_release_treasure_config();

  // @@protoc_insertion_point(class_scope:F4BY.SCSyncConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::TreasureHuntConfig* treasure_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSDrawReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSDrawReward) */ {
 public:
  inline CSDrawReward() : CSDrawReward(nullptr) {}
  virtual ~CSDrawReward();

  CSDrawReward(const CSDrawReward& from);
  CSDrawReward(CSDrawReward&& from) noexcept
    : CSDrawReward() {
    *this = ::std::move(from);
  }

  inline CSDrawReward& operator=(const CSDrawReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDrawReward& operator=(CSDrawReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDrawReward& default_instance();

  static inline const CSDrawReward* internal_default_instance() {
    return reinterpret_cast<const CSDrawReward*>(
               &_CSDrawReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(CSDrawReward& a, CSDrawReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDrawReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDrawReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDrawReward* New() const final {
    return CreateMaybeMessage<CSDrawReward>(nullptr);
  }

  CSDrawReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDrawReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDrawReward& from);
  void MergeFrom(const CSDrawReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDrawReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSDrawReward";
  }
  protected:
  explicit CSDrawReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kDrawTypeFieldNumber = 2,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 draw_type = 2;
  void clear_draw_type();
  ::PROTOBUF_NAMESPACE_ID::int32 draw_type() const;
  void set_draw_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_draw_type() const;
  void _internal_set_draw_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSDrawReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 draw_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCDrawReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCDrawReward) */ {
 public:
  inline SCDrawReward() : SCDrawReward(nullptr) {}
  virtual ~SCDrawReward();

  SCDrawReward(const SCDrawReward& from);
  SCDrawReward(SCDrawReward&& from) noexcept
    : SCDrawReward() {
    *this = ::std::move(from);
  }

  inline SCDrawReward& operator=(const SCDrawReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDrawReward& operator=(SCDrawReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDrawReward& default_instance();

  static inline const SCDrawReward* internal_default_instance() {
    return reinterpret_cast<const SCDrawReward*>(
               &_SCDrawReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(SCDrawReward& a, SCDrawReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDrawReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDrawReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDrawReward* New() const final {
    return CreateMaybeMessage<SCDrawReward>(nullptr);
  }

  SCDrawReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDrawReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDrawReward& from);
  void MergeFrom(const SCDrawReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDrawReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCDrawReward";
  }
  protected:
  explicit SCDrawReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 1,
  };
  // repeated .F4BY.RewardInfo reward_list = 1;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_reward_list();
  private:
  const ::F4BY::RewardInfo& _internal_reward_list(int index) const;
  ::F4BY::RewardInfo* _internal_add_reward_list();
  public:
  const ::F4BY::RewardInfo& reward_list(int index) const;
  ::F4BY::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      reward_list() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCDrawReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > reward_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTreasureHuntMission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTreasureHuntMission) */ {
 public:
  inline CSTreasureHuntMission() : CSTreasureHuntMission(nullptr) {}
  virtual ~CSTreasureHuntMission();

  CSTreasureHuntMission(const CSTreasureHuntMission& from);
  CSTreasureHuntMission(CSTreasureHuntMission&& from) noexcept
    : CSTreasureHuntMission() {
    *this = ::std::move(from);
  }

  inline CSTreasureHuntMission& operator=(const CSTreasureHuntMission& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTreasureHuntMission& operator=(CSTreasureHuntMission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTreasureHuntMission& default_instance();

  static inline const CSTreasureHuntMission* internal_default_instance() {
    return reinterpret_cast<const CSTreasureHuntMission*>(
               &_CSTreasureHuntMission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(CSTreasureHuntMission& a, CSTreasureHuntMission& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTreasureHuntMission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTreasureHuntMission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTreasureHuntMission* New() const final {
    return CreateMaybeMessage<CSTreasureHuntMission>(nullptr);
  }

  CSTreasureHuntMission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTreasureHuntMission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTreasureHuntMission& from);
  void MergeFrom(const CSTreasureHuntMission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTreasureHuntMission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTreasureHuntMission";
  }
  protected:
  explicit CSTreasureHuntMission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSTreasureHuntMission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTreasureHuntMission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTreasureHuntMission) */ {
 public:
  inline SCTreasureHuntMission() : SCTreasureHuntMission(nullptr) {}
  virtual ~SCTreasureHuntMission();

  SCTreasureHuntMission(const SCTreasureHuntMission& from);
  SCTreasureHuntMission(SCTreasureHuntMission&& from) noexcept
    : SCTreasureHuntMission() {
    *this = ::std::move(from);
  }

  inline SCTreasureHuntMission& operator=(const SCTreasureHuntMission& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTreasureHuntMission& operator=(SCTreasureHuntMission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTreasureHuntMission& default_instance();

  static inline const SCTreasureHuntMission* internal_default_instance() {
    return reinterpret_cast<const SCTreasureHuntMission*>(
               &_SCTreasureHuntMission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(SCTreasureHuntMission& a, SCTreasureHuntMission& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTreasureHuntMission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTreasureHuntMission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTreasureHuntMission* New() const final {
    return CreateMaybeMessage<SCTreasureHuntMission>(nullptr);
  }

  SCTreasureHuntMission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTreasureHuntMission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTreasureHuntMission& from);
  void MergeFrom(const SCTreasureHuntMission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTreasureHuntMission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTreasureHuntMission";
  }
  protected:
  explicit SCTreasureHuntMission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionListFieldNumber = 1,
    kDrawTimesFieldNumber = 2,
  };
  // repeated .F4BY.MissionInfo mission_list = 1;
  int mission_list_size() const;
  private:
  int _internal_mission_list_size() const;
  public:
  void clear_mission_list();
  ::F4BY::MissionInfo* mutable_mission_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MissionInfo >*
      mutable_mission_list();
  private:
  const ::F4BY::MissionInfo& _internal_mission_list(int index) const;
  ::F4BY::MissionInfo* _internal_add_mission_list();
  public:
  const ::F4BY::MissionInfo& mission_list(int index) const;
  ::F4BY::MissionInfo* add_mission_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MissionInfo >&
      mission_list() const;

  // int32 draw_times = 2;
  void clear_draw_times();
  ::PROTOBUF_NAMESPACE_ID::int32 draw_times() const;
  void set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_draw_times() const;
  void _internal_set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTreasureHuntMission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MissionInfo > mission_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 draw_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSReceiveMissionReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSReceiveMissionReward) */ {
 public:
  inline CSReceiveMissionReward() : CSReceiveMissionReward(nullptr) {}
  virtual ~CSReceiveMissionReward();

  CSReceiveMissionReward(const CSReceiveMissionReward& from);
  CSReceiveMissionReward(CSReceiveMissionReward&& from) noexcept
    : CSReceiveMissionReward() {
    *this = ::std::move(from);
  }

  inline CSReceiveMissionReward& operator=(const CSReceiveMissionReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReceiveMissionReward& operator=(CSReceiveMissionReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSReceiveMissionReward& default_instance();

  static inline const CSReceiveMissionReward* internal_default_instance() {
    return reinterpret_cast<const CSReceiveMissionReward*>(
               &_CSReceiveMissionReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(CSReceiveMissionReward& a, CSReceiveMissionReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReceiveMissionReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReceiveMissionReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSReceiveMissionReward* New() const final {
    return CreateMaybeMessage<CSReceiveMissionReward>(nullptr);
  }

  CSReceiveMissionReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSReceiveMissionReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSReceiveMissionReward& from);
  void MergeFrom(const CSReceiveMissionReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReceiveMissionReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSReceiveMissionReward";
  }
  protected:
  explicit CSReceiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionIdFieldNumber = 1,
  };
  // int32 mission_id = 1;
  void clear_mission_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_id() const;
  void set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_id() const;
  void _internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSReceiveMissionReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCReceiveMissionReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCReceiveMissionReward) */ {
 public:
  inline SCReceiveMissionReward() : SCReceiveMissionReward(nullptr) {}
  virtual ~SCReceiveMissionReward();

  SCReceiveMissionReward(const SCReceiveMissionReward& from);
  SCReceiveMissionReward(SCReceiveMissionReward&& from) noexcept
    : SCReceiveMissionReward() {
    *this = ::std::move(from);
  }

  inline SCReceiveMissionReward& operator=(const SCReceiveMissionReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCReceiveMissionReward& operator=(SCReceiveMissionReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCReceiveMissionReward& default_instance();

  static inline const SCReceiveMissionReward* internal_default_instance() {
    return reinterpret_cast<const SCReceiveMissionReward*>(
               &_SCReceiveMissionReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(SCReceiveMissionReward& a, SCReceiveMissionReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCReceiveMissionReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCReceiveMissionReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCReceiveMissionReward* New() const final {
    return CreateMaybeMessage<SCReceiveMissionReward>(nullptr);
  }

  SCReceiveMissionReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCReceiveMissionReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCReceiveMissionReward& from);
  void MergeFrom(const SCReceiveMissionReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCReceiveMissionReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCReceiveMissionReward";
  }
  protected:
  explicit SCReceiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 1,
  };
  // repeated .F4BY.RewardInfo reward_list = 1;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_reward_list();
  private:
  const ::F4BY::RewardInfo& _internal_reward_list(int index) const;
  ::F4BY::RewardInfo* _internal_add_reward_list();
  public:
  const ::F4BY::RewardInfo& reward_list(int index) const;
  ::F4BY::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      reward_list() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCReceiveMissionReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > reward_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSDrawTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSDrawTimes) */ {
 public:
  inline CSDrawTimes() : CSDrawTimes(nullptr) {}
  virtual ~CSDrawTimes();

  CSDrawTimes(const CSDrawTimes& from);
  CSDrawTimes(CSDrawTimes&& from) noexcept
    : CSDrawTimes() {
    *this = ::std::move(from);
  }

  inline CSDrawTimes& operator=(const CSDrawTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDrawTimes& operator=(CSDrawTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDrawTimes& default_instance();

  static inline const CSDrawTimes* internal_default_instance() {
    return reinterpret_cast<const CSDrawTimes*>(
               &_CSDrawTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(CSDrawTimes& a, CSDrawTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDrawTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDrawTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDrawTimes* New() const final {
    return CreateMaybeMessage<CSDrawTimes>(nullptr);
  }

  CSDrawTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDrawTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDrawTimes& from);
  void MergeFrom(const CSDrawTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDrawTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSDrawTimes";
  }
  protected:
  explicit CSDrawTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSDrawTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCDrawTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCDrawTimes) */ {
 public:
  inline SCDrawTimes() : SCDrawTimes(nullptr) {}
  virtual ~SCDrawTimes();

  SCDrawTimes(const SCDrawTimes& from);
  SCDrawTimes(SCDrawTimes&& from) noexcept
    : SCDrawTimes() {
    *this = ::std::move(from);
  }

  inline SCDrawTimes& operator=(const SCDrawTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDrawTimes& operator=(SCDrawTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDrawTimes& default_instance();

  static inline const SCDrawTimes* internal_default_instance() {
    return reinterpret_cast<const SCDrawTimes*>(
               &_SCDrawTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(SCDrawTimes& a, SCDrawTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDrawTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDrawTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDrawTimes* New() const final {
    return CreateMaybeMessage<SCDrawTimes>(nullptr);
  }

  SCDrawTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDrawTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDrawTimes& from);
  void MergeFrom(const SCDrawTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDrawTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCDrawTimes";
  }
  protected:
  explicit SCDrawTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalDrawTimesFieldNumber = 1,
    kBigRewardProcessFieldNumber = 2,
    kFreeDrawTimesFieldNumber = 3,
    kDrawTickersNumFieldNumber = 4,
  };
  // int32 total_draw_times = 1;
  void clear_total_draw_times();
  ::PROTOBUF_NAMESPACE_ID::int32 total_draw_times() const;
  void set_total_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_draw_times() const;
  void _internal_set_total_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 big_reward_process = 2;
  void clear_big_reward_process();
  ::PROTOBUF_NAMESPACE_ID::int32 big_reward_process() const;
  void set_big_reward_process(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_reward_process() const;
  void _internal_set_big_reward_process(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_draw_times = 3;
  void clear_free_draw_times();
  ::PROTOBUF_NAMESPACE_ID::int32 free_draw_times() const;
  void set_free_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_draw_times() const;
  void _internal_set_free_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 draw_tickers_num = 4;
  void clear_draw_tickers_num();
  ::PROTOBUF_NAMESPACE_ID::int32 draw_tickers_num() const;
  void set_draw_tickers_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_draw_tickers_num() const;
  void _internal_set_draw_tickers_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCDrawTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_draw_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_reward_process_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_draw_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 draw_tickers_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSVerifyActivity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSVerifyActivity) */ {
 public:
  inline CSVerifyActivity() : CSVerifyActivity(nullptr) {}
  virtual ~CSVerifyActivity();

  CSVerifyActivity(const CSVerifyActivity& from);
  CSVerifyActivity(CSVerifyActivity&& from) noexcept
    : CSVerifyActivity() {
    *this = ::std::move(from);
  }

  inline CSVerifyActivity& operator=(const CSVerifyActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVerifyActivity& operator=(CSVerifyActivity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVerifyActivity& default_instance();

  static inline const CSVerifyActivity* internal_default_instance() {
    return reinterpret_cast<const CSVerifyActivity*>(
               &_CSVerifyActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(CSVerifyActivity& a, CSVerifyActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVerifyActivity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVerifyActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVerifyActivity* New() const final {
    return CreateMaybeMessage<CSVerifyActivity>(nullptr);
  }

  CSVerifyActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVerifyActivity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVerifyActivity& from);
  void MergeFrom(const CSVerifyActivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVerifyActivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSVerifyActivity";
  }
  protected:
  explicit CSVerifyActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityIdFieldNumber = 1,
  };
  // int32 activity_id = 1;
  void clear_activity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id() const;
  void set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activity_id() const;
  void _internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSVerifyActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCVerifyActivity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCVerifyActivity) */ {
 public:
  inline SCVerifyActivity() : SCVerifyActivity(nullptr) {}
  virtual ~SCVerifyActivity();

  SCVerifyActivity(const SCVerifyActivity& from);
  SCVerifyActivity(SCVerifyActivity&& from) noexcept
    : SCVerifyActivity() {
    *this = ::std::move(from);
  }

  inline SCVerifyActivity& operator=(const SCVerifyActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCVerifyActivity& operator=(SCVerifyActivity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCVerifyActivity& default_instance();

  static inline const SCVerifyActivity* internal_default_instance() {
    return reinterpret_cast<const SCVerifyActivity*>(
               &_SCVerifyActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(SCVerifyActivity& a, SCVerifyActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(SCVerifyActivity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCVerifyActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCVerifyActivity* New() const final {
    return CreateMaybeMessage<SCVerifyActivity>(nullptr);
  }

  SCVerifyActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCVerifyActivity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCVerifyActivity& from);
  void MergeFrom(const SCVerifyActivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCVerifyActivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCVerifyActivity";
  }
  protected:
  explicit SCVerifyActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
    kActivityIdFieldNumber = 2,
  };
  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // int32 activity_id = 2;
  void clear_activity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id() const;
  void set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activity_id() const;
  void _internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCVerifyActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class Package PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  virtual ~Package();

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Package& default_instance();

  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Package* New() const final {
    return CreateMaybeMessage<Package>(nullptr);
  }

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 7,
    kPackageIdFieldNumber = 1,
    kLimitFieldNumber = 2,
    kConsumePriceFieldNumber = 3,
    kLimitTypeFieldNumber = 4,
    kConsumePropsFieldNumber = 5,
    kPurchaseTimesFieldNumber = 6,
    kLockFieldNumber = 8,
    kVipLimitFieldNumber = 9,
  };
  // repeated .F4BY.RewardInfo reward_list = 7;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_reward_list();
  private:
  const ::F4BY::RewardInfo& _internal_reward_list(int index) const;
  ::F4BY::RewardInfo* _internal_add_reward_list();
  public:
  const ::F4BY::RewardInfo& reward_list(int index) const;
  ::F4BY::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      reward_list() const;

  // int32 package_id = 1;
  void clear_package_id();
  ::PROTOBUF_NAMESPACE_ID::int32 package_id() const;
  void set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_package_id() const;
  void _internal_set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 consume_price = 3;
  void clear_consume_price();
  ::PROTOBUF_NAMESPACE_ID::int32 consume_price() const;
  void set_consume_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_consume_price() const;
  void _internal_set_consume_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit_type = 4;
  void clear_limit_type();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_type() const;
  void set_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_type() const;
  void _internal_set_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 consume_props = 5;
  void clear_consume_props();
  ::PROTOBUF_NAMESPACE_ID::int32 consume_props() const;
  void set_consume_props(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_consume_props() const;
  void _internal_set_consume_props(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 purchase_times = 6;
  void clear_purchase_times();
  ::PROTOBUF_NAMESPACE_ID::int32 purchase_times() const;
  void set_purchase_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_purchase_times() const;
  void _internal_set_purchase_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool lock = 8;
  void clear_lock();
  bool lock() const;
  void set_lock(bool value);
  private:
  bool _internal_lock() const;
  void _internal_set_lock(bool value);
  public:

  // int32 vip_limit = 9;
  void clear_vip_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_limit() const;
  void set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_limit() const;
  void _internal_set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > reward_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 consume_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 consume_props_;
  ::PROTOBUF_NAMESPACE_ID::int32 purchase_times_;
  bool lock_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSTreasureHuntPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSTreasureHuntPackage) */ {
 public:
  inline CSTreasureHuntPackage() : CSTreasureHuntPackage(nullptr) {}
  virtual ~CSTreasureHuntPackage();

  CSTreasureHuntPackage(const CSTreasureHuntPackage& from);
  CSTreasureHuntPackage(CSTreasureHuntPackage&& from) noexcept
    : CSTreasureHuntPackage() {
    *this = ::std::move(from);
  }

  inline CSTreasureHuntPackage& operator=(const CSTreasureHuntPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTreasureHuntPackage& operator=(CSTreasureHuntPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTreasureHuntPackage& default_instance();

  static inline const CSTreasureHuntPackage* internal_default_instance() {
    return reinterpret_cast<const CSTreasureHuntPackage*>(
               &_CSTreasureHuntPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(CSTreasureHuntPackage& a, CSTreasureHuntPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTreasureHuntPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTreasureHuntPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTreasureHuntPackage* New() const final {
    return CreateMaybeMessage<CSTreasureHuntPackage>(nullptr);
  }

  CSTreasureHuntPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTreasureHuntPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTreasureHuntPackage& from);
  void MergeFrom(const CSTreasureHuntPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTreasureHuntPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSTreasureHuntPackage";
  }
  protected:
  explicit CSTreasureHuntPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageTypeFieldNumber = 1,
  };
  // int32 package_type = 1;
  void clear_package_type();
  ::PROTOBUF_NAMESPACE_ID::int32 package_type() const;
  void set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_package_type() const;
  void _internal_set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSTreasureHuntPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCTreasureHuntPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCTreasureHuntPackage) */ {
 public:
  inline SCTreasureHuntPackage() : SCTreasureHuntPackage(nullptr) {}
  virtual ~SCTreasureHuntPackage();

  SCTreasureHuntPackage(const SCTreasureHuntPackage& from);
  SCTreasureHuntPackage(SCTreasureHuntPackage&& from) noexcept
    : SCTreasureHuntPackage() {
    *this = ::std::move(from);
  }

  inline SCTreasureHuntPackage& operator=(const SCTreasureHuntPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTreasureHuntPackage& operator=(SCTreasureHuntPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTreasureHuntPackage& default_instance();

  static inline const SCTreasureHuntPackage* internal_default_instance() {
    return reinterpret_cast<const SCTreasureHuntPackage*>(
               &_SCTreasureHuntPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(SCTreasureHuntPackage& a, SCTreasureHuntPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTreasureHuntPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTreasureHuntPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTreasureHuntPackage* New() const final {
    return CreateMaybeMessage<SCTreasureHuntPackage>(nullptr);
  }

  SCTreasureHuntPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTreasureHuntPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTreasureHuntPackage& from);
  void MergeFrom(const SCTreasureHuntPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTreasureHuntPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCTreasureHuntPackage";
  }
  protected:
  explicit SCTreasureHuntPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageListFieldNumber = 1,
    kPackageTypeFieldNumber = 2,
  };
  // repeated .F4BY.Package package_list = 1;
  int package_list_size() const;
  private:
  int _internal_package_list_size() const;
  public:
  void clear_package_list();
  ::F4BY::Package* mutable_package_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >*
      mutable_package_list();
  private:
  const ::F4BY::Package& _internal_package_list(int index) const;
  ::F4BY::Package* _internal_add_package_list();
  public:
  const ::F4BY::Package& package_list(int index) const;
  ::F4BY::Package* add_package_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >&
      package_list() const;

  // int32 package_type = 2;
  void clear_package_type();
  ::PROTOBUF_NAMESPACE_ID::int32 package_type() const;
  void set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_package_type() const;
  void _internal_set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCTreasureHuntPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package > package_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class ExchangeShopInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.ExchangeShopInfo) */ {
 public:
  inline ExchangeShopInfo() : ExchangeShopInfo(nullptr) {}
  virtual ~ExchangeShopInfo();

  ExchangeShopInfo(const ExchangeShopInfo& from);
  ExchangeShopInfo(ExchangeShopInfo&& from) noexcept
    : ExchangeShopInfo() {
    *this = ::std::move(from);
  }

  inline ExchangeShopInfo& operator=(const ExchangeShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeShopInfo& operator=(ExchangeShopInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeShopInfo& default_instance();

  static inline const ExchangeShopInfo* internal_default_instance() {
    return reinterpret_cast<const ExchangeShopInfo*>(
               &_ExchangeShopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(ExchangeShopInfo& a, ExchangeShopInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeShopInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeShopInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeShopInfo* New() const final {
    return CreateMaybeMessage<ExchangeShopInfo>(nullptr);
  }

  ExchangeShopInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeShopInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeShopInfo& from);
  void MergeFrom(const ExchangeShopInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeShopInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.ExchangeShopInfo";
  }
  protected:
  explicit ExchangeShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageListFieldNumber = 2,
    kLevelFieldNumber = 1,
    kUnlockFieldNumber = 3,
  };
  // repeated .F4BY.Package package_list = 2;
  int package_list_size() const;
  private:
  int _internal_package_list_size() const;
  public:
  void clear_package_list();
  ::F4BY::Package* mutable_package_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >*
      mutable_package_list();
  private:
  const ::F4BY::Package& _internal_package_list(int index) const;
  ::F4BY::Package* _internal_add_package_list();
  public:
  const ::F4BY::Package& package_list(int index) const;
  ::F4BY::Package* add_package_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >&
      package_list() const;

  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool unlock = 3;
  void clear_unlock();
  bool unlock() const;
  void set_unlock(bool value);
  private:
  bool _internal_unlock() const;
  void _internal_set_unlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.ExchangeShopInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package > package_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  bool unlock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSExchangeShop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSExchangeShop) */ {
 public:
  inline CSExchangeShop() : CSExchangeShop(nullptr) {}
  virtual ~CSExchangeShop();

  CSExchangeShop(const CSExchangeShop& from);
  CSExchangeShop(CSExchangeShop&& from) noexcept
    : CSExchangeShop() {
    *this = ::std::move(from);
  }

  inline CSExchangeShop& operator=(const CSExchangeShop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSExchangeShop& operator=(CSExchangeShop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSExchangeShop& default_instance();

  static inline const CSExchangeShop* internal_default_instance() {
    return reinterpret_cast<const CSExchangeShop*>(
               &_CSExchangeShop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(CSExchangeShop& a, CSExchangeShop& b) {
    a.Swap(&b);
  }
  inline void Swap(CSExchangeShop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSExchangeShop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSExchangeShop* New() const final {
    return CreateMaybeMessage<CSExchangeShop>(nullptr);
  }

  CSExchangeShop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSExchangeShop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSExchangeShop& from);
  void MergeFrom(const CSExchangeShop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSExchangeShop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSExchangeShop";
  }
  protected:
  explicit CSExchangeShop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSExchangeShop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCExchangeShop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCExchangeShop) */ {
 public:
  inline SCExchangeShop() : SCExchangeShop(nullptr) {}
  virtual ~SCExchangeShop();

  SCExchangeShop(const SCExchangeShop& from);
  SCExchangeShop(SCExchangeShop&& from) noexcept
    : SCExchangeShop() {
    *this = ::std::move(from);
  }

  inline SCExchangeShop& operator=(const SCExchangeShop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCExchangeShop& operator=(SCExchangeShop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCExchangeShop& default_instance();

  static inline const SCExchangeShop* internal_default_instance() {
    return reinterpret_cast<const SCExchangeShop*>(
               &_SCExchangeShop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(SCExchangeShop& a, SCExchangeShop& b) {
    a.Swap(&b);
  }
  inline void Swap(SCExchangeShop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCExchangeShop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCExchangeShop* New() const final {
    return CreateMaybeMessage<SCExchangeShop>(nullptr);
  }

  SCExchangeShop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCExchangeShop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCExchangeShop& from);
  void MergeFrom(const SCExchangeShop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCExchangeShop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCExchangeShop";
  }
  protected:
  explicit SCExchangeShop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeShopListFieldNumber = 1,
  };
  // repeated .F4BY.ExchangeShopInfo exchangeShopList = 1;
  int exchangeshoplist_size() const;
  private:
  int _internal_exchangeshoplist_size() const;
  public:
  void clear_exchangeshoplist();
  ::F4BY::ExchangeShopInfo* mutable_exchangeshoplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ExchangeShopInfo >*
      mutable_exchangeshoplist();
  private:
  const ::F4BY::ExchangeShopInfo& _internal_exchangeshoplist(int index) const;
  ::F4BY::ExchangeShopInfo* _internal_add_exchangeshoplist();
  public:
  const ::F4BY::ExchangeShopInfo& exchangeshoplist(int index) const;
  ::F4BY::ExchangeShopInfo* add_exchangeshoplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ExchangeShopInfo >&
      exchangeshoplist() const;

  // @@protoc_insertion_point(class_scope:F4BY.SCExchangeShop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ExchangeShopInfo > exchangeshoplist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSPurchasePackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSPurchasePackage) */ {
 public:
  inline CSPurchasePackage() : CSPurchasePackage(nullptr) {}
  virtual ~CSPurchasePackage();

  CSPurchasePackage(const CSPurchasePackage& from);
  CSPurchasePackage(CSPurchasePackage&& from) noexcept
    : CSPurchasePackage() {
    *this = ::std::move(from);
  }

  inline CSPurchasePackage& operator=(const CSPurchasePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPurchasePackage& operator=(CSPurchasePackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPurchasePackage& default_instance();

  static inline const CSPurchasePackage* internal_default_instance() {
    return reinterpret_cast<const CSPurchasePackage*>(
               &_CSPurchasePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(CSPurchasePackage& a, CSPurchasePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPurchasePackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPurchasePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPurchasePackage* New() const final {
    return CreateMaybeMessage<CSPurchasePackage>(nullptr);
  }

  CSPurchasePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPurchasePackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPurchasePackage& from);
  void MergeFrom(const CSPurchasePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPurchasePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSPurchasePackage";
  }
  protected:
  explicit CSPurchasePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageIdFieldNumber = 1,
  };
  // int32 package_id = 1;
  void clear_package_id();
  ::PROTOBUF_NAMESPACE_ID::int32 package_id() const;
  void set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_package_id() const;
  void _internal_set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSPurchasePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCPurchasePackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCPurchasePackage) */ {
 public:
  inline SCPurchasePackage() : SCPurchasePackage(nullptr) {}
  virtual ~SCPurchasePackage();

  SCPurchasePackage(const SCPurchasePackage& from);
  SCPurchasePackage(SCPurchasePackage&& from) noexcept
    : SCPurchasePackage() {
    *this = ::std::move(from);
  }

  inline SCPurchasePackage& operator=(const SCPurchasePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPurchasePackage& operator=(SCPurchasePackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPurchasePackage& default_instance();

  static inline const SCPurchasePackage* internal_default_instance() {
    return reinterpret_cast<const SCPurchasePackage*>(
               &_SCPurchasePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(SCPurchasePackage& a, SCPurchasePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPurchasePackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPurchasePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPurchasePackage* New() const final {
    return CreateMaybeMessage<SCPurchasePackage>(nullptr);
  }

  SCPurchasePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPurchasePackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPurchasePackage& from);
  void MergeFrom(const SCPurchasePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPurchasePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCPurchasePackage";
  }
  protected:
  explicit SCPurchasePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .F4BY.Package package = 1;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::F4BY::Package& package() const;
  ::F4BY::Package* release_package();
  ::F4BY::Package* mutable_package();
  void set_allocated_package(::F4BY::Package* package);
  private:
  const ::F4BY::Package& _internal_package() const;
  ::F4BY::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::F4BY::Package* package);
  ::F4BY::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:F4BY.SCPurchasePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::F4BY::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSVerifyTermChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSVerifyTermChange) */ {
 public:
  inline CSVerifyTermChange() : CSVerifyTermChange(nullptr) {}
  virtual ~CSVerifyTermChange();

  CSVerifyTermChange(const CSVerifyTermChange& from);
  CSVerifyTermChange(CSVerifyTermChange&& from) noexcept
    : CSVerifyTermChange() {
    *this = ::std::move(from);
  }

  inline CSVerifyTermChange& operator=(const CSVerifyTermChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVerifyTermChange& operator=(CSVerifyTermChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVerifyTermChange& default_instance();

  static inline const CSVerifyTermChange* internal_default_instance() {
    return reinterpret_cast<const CSVerifyTermChange*>(
               &_CSVerifyTermChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(CSVerifyTermChange& a, CSVerifyTermChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVerifyTermChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVerifyTermChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVerifyTermChange* New() const final {
    return CreateMaybeMessage<CSVerifyTermChange>(nullptr);
  }

  CSVerifyTermChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVerifyTermChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVerifyTermChange& from);
  void MergeFrom(const CSVerifyTermChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVerifyTermChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSVerifyTermChange";
  }
  protected:
  explicit CSVerifyTermChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:F4BY.CSVerifyTermChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCVerifyTermChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCVerifyTermChange) */ {
 public:
  inline SCVerifyTermChange() : SCVerifyTermChange(nullptr) {}
  virtual ~SCVerifyTermChange();

  SCVerifyTermChange(const SCVerifyTermChange& from);
  SCVerifyTermChange(SCVerifyTermChange&& from) noexcept
    : SCVerifyTermChange() {
    *this = ::std::move(from);
  }

  inline SCVerifyTermChange& operator=(const SCVerifyTermChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCVerifyTermChange& operator=(SCVerifyTermChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCVerifyTermChange& default_instance();

  static inline const SCVerifyTermChange* internal_default_instance() {
    return reinterpret_cast<const SCVerifyTermChange*>(
               &_SCVerifyTermChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(SCVerifyTermChange& a, SCVerifyTermChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SCVerifyTermChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCVerifyTermChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCVerifyTermChange* New() const final {
    return CreateMaybeMessage<SCVerifyTermChange>(nullptr);
  }

  SCVerifyTermChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCVerifyTermChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCVerifyTermChange& from);
  void MergeFrom(const SCVerifyTermChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCVerifyTermChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCVerifyTermChange";
  }
  protected:
  explicit SCVerifyTermChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kChangeFieldNumber = 1,
  };
  // repeated .F4BY.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::F4BY::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
      mutable_reward_list();
  private:
  const ::F4BY::RewardInfo& _internal_reward_list(int index) const;
  ::F4BY::RewardInfo* _internal_add_reward_list();
  public:
  const ::F4BY::RewardInfo& reward_list(int index) const;
  ::F4BY::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
      reward_list() const;

  // bool change = 1;
  void clear_change();
  bool change() const;
  void set_change(bool value);
  private:
  bool _internal_change() const;
  void _internal_set_change(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCVerifyTermChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo > reward_list_;
  bool change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCWaterDropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCWaterDropInfo) */ {
 public:
  inline SCWaterDropInfo() : SCWaterDropInfo(nullptr) {}
  virtual ~SCWaterDropInfo();

  SCWaterDropInfo(const SCWaterDropInfo& from);
  SCWaterDropInfo(SCWaterDropInfo&& from) noexcept
    : SCWaterDropInfo() {
    *this = ::std::move(from);
  }

  inline SCWaterDropInfo& operator=(const SCWaterDropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCWaterDropInfo& operator=(SCWaterDropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCWaterDropInfo& default_instance();

  static inline const SCWaterDropInfo* internal_default_instance() {
    return reinterpret_cast<const SCWaterDropInfo*>(
               &_SCWaterDropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(SCWaterDropInfo& a, SCWaterDropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCWaterDropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCWaterDropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCWaterDropInfo* New() const final {
    return CreateMaybeMessage<SCWaterDropInfo>(nullptr);
  }

  SCWaterDropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCWaterDropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCWaterDropInfo& from);
  void MergeFrom(const SCWaterDropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCWaterDropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCWaterDropInfo";
  }
  protected:
  explicit SCWaterDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kDropCountFieldNumber = 2,
    kFragmentCountFieldNumber = 3,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 drop_count = 2;
  void clear_drop_count();
  ::PROTOBUF_NAMESPACE_ID::int32 drop_count() const;
  void set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drop_count() const;
  void _internal_set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fragment_count = 3;
  void clear_fragment_count();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_count() const;
  void set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment_count() const;
  void _internal_set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCWaterDropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 drop_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSBuyGun PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSBuyGun) */ {
 public:
  inline CSBuyGun() : CSBuyGun(nullptr) {}
  virtual ~CSBuyGun();

  CSBuyGun(const CSBuyGun& from);
  CSBuyGun(CSBuyGun&& from) noexcept
    : CSBuyGun() {
    *this = ::std::move(from);
  }

  inline CSBuyGun& operator=(const CSBuyGun& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyGun& operator=(CSBuyGun&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyGun& default_instance();

  static inline const CSBuyGun* internal_default_instance() {
    return reinterpret_cast<const CSBuyGun*>(
               &_CSBuyGun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(CSBuyGun& a, CSBuyGun& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyGun* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyGun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyGun* New() const final {
    return CreateMaybeMessage<CSBuyGun>(nullptr);
  }

  CSBuyGun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyGun>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyGun& from);
  void MergeFrom(const CSBuyGun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyGun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSBuyGun";
  }
  protected:
  explicit CSBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunLevelFieldNumber = 1,
  };
  // int32 gun_level = 1;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSBuyGun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCBuyGun PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCBuyGun) */ {
 public:
  inline SCBuyGun() : SCBuyGun(nullptr) {}
  virtual ~SCBuyGun();

  SCBuyGun(const SCBuyGun& from);
  SCBuyGun(SCBuyGun&& from) noexcept
    : SCBuyGun() {
    *this = ::std::move(from);
  }

  inline SCBuyGun& operator=(const SCBuyGun& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyGun& operator=(SCBuyGun&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyGun& default_instance();

  static inline const SCBuyGun* internal_default_instance() {
    return reinterpret_cast<const SCBuyGun*>(
               &_SCBuyGun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(SCBuyGun& a, SCBuyGun& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyGun* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyGun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyGun* New() const final {
    return CreateMaybeMessage<SCBuyGun>(nullptr);
  }

  SCBuyGun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyGun>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyGun& from);
  void MergeFrom(const SCBuyGun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyGun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCBuyGun";
  }
  protected:
  explicit SCBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunLevelFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int32 gun_level = 1;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 2;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCBuyGun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSBuyWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSBuyWings) */ {
 public:
  inline CSBuyWings() : CSBuyWings(nullptr) {}
  virtual ~CSBuyWings();

  CSBuyWings(const CSBuyWings& from);
  CSBuyWings(CSBuyWings&& from) noexcept
    : CSBuyWings() {
    *this = ::std::move(from);
  }

  inline CSBuyWings& operator=(const CSBuyWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyWings& operator=(CSBuyWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyWings& default_instance();

  static inline const CSBuyWings* internal_default_instance() {
    return reinterpret_cast<const CSBuyWings*>(
               &_CSBuyWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(CSBuyWings& a, CSBuyWings& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyWings* New() const final {
    return CreateMaybeMessage<CSBuyWings>(nullptr);
  }

  CSBuyWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyWings& from);
  void MergeFrom(const CSBuyWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSBuyWings";
  }
  protected:
  explicit CSBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsIdFieldNumber = 1,
  };
  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSBuyWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCBuyWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCBuyWings) */ {
 public:
  inline SCBuyWings() : SCBuyWings(nullptr) {}
  virtual ~SCBuyWings();

  SCBuyWings(const SCBuyWings& from);
  SCBuyWings(SCBuyWings&& from) noexcept
    : SCBuyWings() {
    *this = ::std::move(from);
  }

  inline SCBuyWings& operator=(const SCBuyWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyWings& operator=(SCBuyWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyWings& default_instance();

  static inline const SCBuyWings* internal_default_instance() {
    return reinterpret_cast<const SCBuyWings*>(
               &_SCBuyWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(SCBuyWings& a, SCBuyWings& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyWings* New() const final {
    return CreateMaybeMessage<SCBuyWings>(nullptr);
  }

  SCBuyWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyWings& from);
  void MergeFrom(const SCBuyWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCBuyWings";
  }
  protected:
  explicit SCBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsIdFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 2;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCBuyWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class SCNotifyActStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.SCNotifyActStatus) */ {
 public:
  inline SCNotifyActStatus() : SCNotifyActStatus(nullptr) {}
  virtual ~SCNotifyActStatus();

  SCNotifyActStatus(const SCNotifyActStatus& from);
  SCNotifyActStatus(SCNotifyActStatus&& from) noexcept
    : SCNotifyActStatus() {
    *this = ::std::move(from);
  }

  inline SCNotifyActStatus& operator=(const SCNotifyActStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNotifyActStatus& operator=(SCNotifyActStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNotifyActStatus& default_instance();

  static inline const SCNotifyActStatus* internal_default_instance() {
    return reinterpret_cast<const SCNotifyActStatus*>(
               &_SCNotifyActStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(SCNotifyActStatus& a, SCNotifyActStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNotifyActStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNotifyActStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNotifyActStatus* New() const final {
    return CreateMaybeMessage<SCNotifyActStatus>(nullptr);
  }

  SCNotifyActStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNotifyActStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNotifyActStatus& from);
  void MergeFrom(const SCNotifyActStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNotifyActStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.SCNotifyActStatus";
  }
  protected:
  explicit SCNotifyActStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActTypeFieldNumber = 1,
    kActStatusFieldNumber = 2,
  };
  // int32 act_type = 1;
  void clear_act_type();
  ::PROTOBUF_NAMESPACE_ID::int32 act_type() const;
  void set_act_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_act_type() const;
  void _internal_set_act_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 act_status = 2;
  void clear_act_status();
  ::PROTOBUF_NAMESPACE_ID::int32 act_status() const;
  void set_act_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_act_status() const;
  void _internal_set_act_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.SCNotifyActStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 act_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 act_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSSetDoubleShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSSetDoubleShoot) */ {
 public:
  inline CSSetDoubleShoot() : CSSetDoubleShoot(nullptr) {}
  virtual ~CSSetDoubleShoot();

  CSSetDoubleShoot(const CSSetDoubleShoot& from);
  CSSetDoubleShoot(CSSetDoubleShoot&& from) noexcept
    : CSSetDoubleShoot() {
    *this = ::std::move(from);
  }

  inline CSSetDoubleShoot& operator=(const CSSetDoubleShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetDoubleShoot& operator=(CSSetDoubleShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetDoubleShoot& default_instance();

  static inline const CSSetDoubleShoot* internal_default_instance() {
    return reinterpret_cast<const CSSetDoubleShoot*>(
               &_CSSetDoubleShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(CSSetDoubleShoot& a, CSSetDoubleShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetDoubleShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetDoubleShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetDoubleShoot* New() const final {
    return CreateMaybeMessage<CSSetDoubleShoot>(nullptr);
  }

  CSSetDoubleShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetDoubleShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetDoubleShoot& from);
  void MergeFrom(const CSSetDoubleShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetDoubleShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSSetDoubleShoot";
  }
  protected:
  explicit CSSetDoubleShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraMulFieldNumber = 1,
  };
  // int32 extra_mul = 1;
  void clear_extra_mul();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_mul() const;
  void set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_mul() const;
  void _internal_set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSSetDoubleShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_mul_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSFreePoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSFreePoolInfo) */ {
 public:
  inline CSFreePoolInfo() : CSFreePoolInfo(nullptr) {}
  virtual ~CSFreePoolInfo();

  CSFreePoolInfo(const CSFreePoolInfo& from);
  CSFreePoolInfo(CSFreePoolInfo&& from) noexcept
    : CSFreePoolInfo() {
    *this = ::std::move(from);
  }

  inline CSFreePoolInfo& operator=(const CSFreePoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFreePoolInfo& operator=(CSFreePoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFreePoolInfo& default_instance();

  static inline const CSFreePoolInfo* internal_default_instance() {
    return reinterpret_cast<const CSFreePoolInfo*>(
               &_CSFreePoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(CSFreePoolInfo& a, CSFreePoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFreePoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFreePoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFreePoolInfo* New() const final {
    return CreateMaybeMessage<CSFreePoolInfo>(nullptr);
  }

  CSFreePoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFreePoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFreePoolInfo& from);
  void MergeFrom(const CSFreePoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFreePoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSFreePoolInfo";
  }
  protected:
  explicit CSFreePoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrepareLotteryFieldNumber = 1,
  };
  // bool prepareLottery = 1;
  void clear_preparelottery();
  bool preparelottery() const;
  void set_preparelottery(bool value);
  private:
  bool _internal_preparelottery() const;
  void _internal_set_preparelottery(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSFreePoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool preparelottery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSFreePoolLottery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSFreePoolLottery) */ {
 public:
  inline CSFreePoolLottery() : CSFreePoolLottery(nullptr) {}
  virtual ~CSFreePoolLottery();

  CSFreePoolLottery(const CSFreePoolLottery& from);
  CSFreePoolLottery(CSFreePoolLottery&& from) noexcept
    : CSFreePoolLottery() {
    *this = ::std::move(from);
  }

  inline CSFreePoolLottery& operator=(const CSFreePoolLottery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFreePoolLottery& operator=(CSFreePoolLottery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFreePoolLottery& default_instance();

  static inline const CSFreePoolLottery* internal_default_instance() {
    return reinterpret_cast<const CSFreePoolLottery*>(
               &_CSFreePoolLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(CSFreePoolLottery& a, CSFreePoolLottery& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFreePoolLottery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFreePoolLottery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFreePoolLottery* New() const final {
    return CreateMaybeMessage<CSFreePoolLottery>(nullptr);
  }

  CSFreePoolLottery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFreePoolLottery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFreePoolLottery& from);
  void MergeFrom(const CSFreePoolLottery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFreePoolLottery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSFreePoolLottery";
  }
  protected:
  explicit CSFreePoolLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSFreePoolLottery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// -------------------------------------------------------------------

class CSFreePoolOpen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F4BY.CSFreePoolOpen) */ {
 public:
  inline CSFreePoolOpen() : CSFreePoolOpen(nullptr) {}
  virtual ~CSFreePoolOpen();

  CSFreePoolOpen(const CSFreePoolOpen& from);
  CSFreePoolOpen(CSFreePoolOpen&& from) noexcept
    : CSFreePoolOpen() {
    *this = ::std::move(from);
  }

  inline CSFreePoolOpen& operator=(const CSFreePoolOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFreePoolOpen& operator=(CSFreePoolOpen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFreePoolOpen& default_instance();

  static inline const CSFreePoolOpen* internal_default_instance() {
    return reinterpret_cast<const CSFreePoolOpen*>(
               &_CSFreePoolOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(CSFreePoolOpen& a, CSFreePoolOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFreePoolOpen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFreePoolOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFreePoolOpen* New() const final {
    return CreateMaybeMessage<CSFreePoolOpen>(nullptr);
  }

  CSFreePoolOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFreePoolOpen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFreePoolOpen& from);
  void MergeFrom(const CSFreePoolOpen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFreePoolOpen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F4BY.CSFreePoolOpen";
  }
  protected:
  explicit CSFreePoolOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_F4BY_2eproto);
    return ::descriptor_table_F4BY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFreePoolFieldNumber = 1,
  };
  // bool openFreePool = 1;
  void clear_openfreepool();
  bool openfreepool() const;
  void set_openfreepool(bool value);
  private:
  bool _internal_openfreepool() const;
  void _internal_set_openfreepool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:F4BY.CSFreePoolOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool openfreepool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_F4BY_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_SceneInfo

// repeated .F4BY.StationBase station_base_list = 1;
inline int SC_SceneInfo::_internal_station_base_list_size() const {
  return station_base_list_.size();
}
inline int SC_SceneInfo::station_base_list_size() const {
  return _internal_station_base_list_size();
}
inline void SC_SceneInfo::clear_station_base_list() {
  station_base_list_.Clear();
}
inline ::F4BY::StationBase* SC_SceneInfo::mutable_station_base_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SC_SceneInfo.station_base_list)
  return station_base_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >*
SC_SceneInfo::mutable_station_base_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SC_SceneInfo.station_base_list)
  return &station_base_list_;
}
inline const ::F4BY::StationBase& SC_SceneInfo::_internal_station_base_list(int index) const {
  return station_base_list_.Get(index);
}
inline const ::F4BY::StationBase& SC_SceneInfo::station_base_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SC_SceneInfo.station_base_list)
  return _internal_station_base_list(index);
}
inline ::F4BY::StationBase* SC_SceneInfo::_internal_add_station_base_list() {
  return station_base_list_.Add();
}
inline ::F4BY::StationBase* SC_SceneInfo::add_station_base_list() {
  // @@protoc_insertion_point(field_add:F4BY.SC_SceneInfo.station_base_list)
  return _internal_add_station_base_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >&
SC_SceneInfo::station_base_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SC_SceneInfo.station_base_list)
  return station_base_list_;
}

// repeated .F4BY.GunInfo gun_info = 2;
inline int SC_SceneInfo::_internal_gun_info_size() const {
  return gun_info_.size();
}
inline int SC_SceneInfo::gun_info_size() const {
  return _internal_gun_info_size();
}
inline void SC_SceneInfo::clear_gun_info() {
  gun_info_.Clear();
}
inline ::F4BY::GunInfo* SC_SceneInfo::mutable_gun_info(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SC_SceneInfo.gun_info)
  return gun_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >*
SC_SceneInfo::mutable_gun_info() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SC_SceneInfo.gun_info)
  return &gun_info_;
}
inline const ::F4BY::GunInfo& SC_SceneInfo::_internal_gun_info(int index) const {
  return gun_info_.Get(index);
}
inline const ::F4BY::GunInfo& SC_SceneInfo::gun_info(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SC_SceneInfo.gun_info)
  return _internal_gun_info(index);
}
inline ::F4BY::GunInfo* SC_SceneInfo::_internal_add_gun_info() {
  return gun_info_.Add();
}
inline ::F4BY::GunInfo* SC_SceneInfo::add_gun_info() {
  // @@protoc_insertion_point(field_add:F4BY.SC_SceneInfo.gun_info)
  return _internal_add_gun_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >&
SC_SceneInfo::gun_info() const {
  // @@protoc_insertion_point(field_list:F4BY.SC_SceneInfo.gun_info)
  return gun_info_;
}

// int32 gun_ratio_num = 3;
inline void SC_SceneInfo::clear_gun_ratio_num() {
  gun_ratio_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_gun_ratio_num() const {
  return gun_ratio_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::gun_ratio_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SC_SceneInfo.gun_ratio_num)
  return _internal_gun_ratio_num();
}
inline void SC_SceneInfo::_internal_set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_num_ = value;
}
inline void SC_SceneInfo::set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SC_SceneInfo.gun_ratio_num)
}

// int32 gun_level_num = 4;
inline void SC_SceneInfo::clear_gun_level_num() {
  gun_level_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_gun_level_num() const {
  return gun_level_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::gun_level_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SC_SceneInfo.gun_level_num)
  return _internal_gun_level_num();
}
inline void SC_SceneInfo::_internal_set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_num_ = value;
}
inline void SC_SceneInfo::set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SC_SceneInfo.gun_level_num)
}

// repeated int32 ratio_list = 5;
inline int SC_SceneInfo::_internal_ratio_list_size() const {
  return ratio_list_.size();
}
inline int SC_SceneInfo::ratio_list_size() const {
  return _internal_ratio_list_size();
}
inline void SC_SceneInfo::clear_ratio_list() {
  ratio_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_ratio_list(int index) const {
  return ratio_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::ratio_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SC_SceneInfo.ratio_list)
  return _internal_ratio_list(index);
}
inline void SC_SceneInfo::set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.SC_SceneInfo.ratio_list)
}
inline void SC_SceneInfo::_internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Add(value);
}
inline void SC_SceneInfo::add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratio_list(value);
  // @@protoc_insertion_point(field_add:F4BY.SC_SceneInfo.ratio_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_ratio_list() const {
  return ratio_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::ratio_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SC_SceneInfo.ratio_list)
  return _internal_ratio_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_ratio_list() {
  return &ratio_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_ratio_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SC_SceneInfo.ratio_list)
  return _internal_mutable_ratio_list();
}

// -------------------------------------------------------------------

// CommonResp

// int32 code = 1;
inline void CommonResp::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonResp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonResp::code() const {
  // @@protoc_insertion_point(field_get:F4BY.CommonResp.code)
  return _internal_code();
}
inline void CommonResp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CommonResp::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.CommonResp.code)
}

// string message = 2;
inline void CommonResp::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CommonResp::message() const {
  // @@protoc_insertion_point(field_get:F4BY.CommonResp.message)
  return _internal_message();
}
inline void CommonResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:F4BY.CommonResp.message)
}
inline std::string* CommonResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:F4BY.CommonResp.message)
  return _internal_mutable_message();
}
inline const std::string& CommonResp::_internal_message() const {
  return message_.Get();
}
inline void CommonResp::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonResp::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CommonResp.message)
}
inline void CommonResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CommonResp.message)
}
inline void CommonResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CommonResp.message)
}
inline std::string* CommonResp::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonResp::release_message() {
  // @@protoc_insertion_point(field_release:F4BY.CommonResp.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CommonResp.message)
}

// -------------------------------------------------------------------

// Object

// int32 id = 1;
inline void Object::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.id)
}

// int32 count = 2;
inline void Object::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::count() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.count)
  return _internal_count();
}
inline void Object::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Object::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.count)
}

// int32 ratio = 3;
inline void Object::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.ratio)
  return _internal_ratio();
}
inline void Object::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void Object::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.ratio)
}

// float time = 4;
inline void Object::clear_time() {
  time_ = 0;
}
inline float Object::_internal_time() const {
  return time_;
}
inline float Object::time() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.time)
  return _internal_time();
}
inline void Object::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Object::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.time)
}

// int32 multiple = 5;
inline void Object::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.multiple)
  return _internal_multiple();
}
inline void Object::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void Object::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.multiple)
}

// int32 uid = 6;
inline void Object::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::uid() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.uid)
  return _internal_uid();
}
inline void Object::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void Object::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.uid)
}

// int32 originId = 7;
inline void Object::clear_originid() {
  originid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_originid() const {
  return originid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::originid() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.originId)
  return _internal_originid();
}
inline void Object::_internal_set_originid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originid_ = value;
}
inline void Object::set_originid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originid(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.originId)
}

// repeated .F4BY.MultiInfo multi_list = 8;
inline int Object::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int Object::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void Object::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* Object::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.Object.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
Object::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.Object.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& Object::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& Object::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.Object.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* Object::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* Object::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.Object.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
Object::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.Object.multi_list)
  return multi_list_;
}

// int32 origin_uid = 9;
inline void Object::clear_origin_uid() {
  origin_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_origin_uid() const {
  return origin_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::origin_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.Object.origin_uid)
  return _internal_origin_uid();
}
inline void Object::_internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origin_uid_ = value;
}
inline void Object::set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.Object.origin_uid)
}

// -------------------------------------------------------------------

// Obj

// int32 id = 1;
inline void Obj::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obj::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obj::id() const {
  // @@protoc_insertion_point(field_get:F4BY.Obj.id)
  return _internal_id();
}
inline void Obj::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Obj::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.Obj.id)
}

// int32 value = 2;
inline void Obj::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obj::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obj::value() const {
  // @@protoc_insertion_point(field_get:F4BY.Obj.value)
  return _internal_value();
}
inline void Obj::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Obj::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:F4BY.Obj.value)
}

// -------------------------------------------------------------------

// Object1

// string key = 1;
inline void Object1::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Object1::key() const {
  // @@protoc_insertion_point(field_get:F4BY.Object1.key)
  return _internal_key();
}
inline void Object1::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:F4BY.Object1.key)
}
inline std::string* Object1::mutable_key() {
  // @@protoc_insertion_point(field_mutable:F4BY.Object1.key)
  return _internal_mutable_key();
}
inline const std::string& Object1::_internal_key() const {
  return key_.Get();
}
inline void Object1::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object1::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.Object1.key)
}
inline void Object1::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.Object1.key)
}
inline void Object1::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.Object1.key)
}
inline std::string* Object1::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object1::release_key() {
  // @@protoc_insertion_point(field_release:F4BY.Object1.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object1::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.Object1.key)
}

// int32 value = 2;
inline void Object1::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object1::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object1::value() const {
  // @@protoc_insertion_point(field_get:F4BY.Object1.value)
  return _internal_value();
}
inline void Object1::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Object1::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:F4BY.Object1.value)
}

// -------------------------------------------------------------------

// Object2

// string key = 1;
inline void Object2::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Object2::key() const {
  // @@protoc_insertion_point(field_get:F4BY.Object2.key)
  return _internal_key();
}
inline void Object2::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:F4BY.Object2.key)
}
inline std::string* Object2::mutable_key() {
  // @@protoc_insertion_point(field_mutable:F4BY.Object2.key)
  return _internal_mutable_key();
}
inline const std::string& Object2::_internal_key() const {
  return key_.Get();
}
inline void Object2::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object2::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.Object2.key)
}
inline void Object2::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.Object2.key)
}
inline void Object2::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.Object2.key)
}
inline std::string* Object2::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object2::release_key() {
  // @@protoc_insertion_point(field_release:F4BY.Object2.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object2::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.Object2.key)
}

// string value = 2;
inline void Object2::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Object2::value() const {
  // @@protoc_insertion_point(field_get:F4BY.Object2.value)
  return _internal_value();
}
inline void Object2::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:F4BY.Object2.value)
}
inline std::string* Object2::mutable_value() {
  // @@protoc_insertion_point(field_mutable:F4BY.Object2.value)
  return _internal_mutable_value();
}
inline const std::string& Object2::_internal_value() const {
  return value_.Get();
}
inline void Object2::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object2::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.Object2.value)
}
inline void Object2::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.Object2.value)
}
inline void Object2::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.Object2.value)
}
inline std::string* Object2::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object2::release_value() {
  // @@protoc_insertion_point(field_release:F4BY.Object2.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object2::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.Object2.value)
}

// -------------------------------------------------------------------

// Object3

// int32 key = 1;
inline void Object3::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::key() const {
  // @@protoc_insertion_point(field_get:F4BY.Object3.key)
  return _internal_key();
}
inline void Object3::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void Object3::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:F4BY.Object3.key)
}

// int32 value = 2;
inline void Object3::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::value() const {
  // @@protoc_insertion_point(field_get:F4BY.Object3.value)
  return _internal_value();
}
inline void Object3::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Object3::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:F4BY.Object3.value)
}

// -------------------------------------------------------------------

// WheelObject

// repeated .F4BY.Object3 wheels = 1;
inline int WheelObject::_internal_wheels_size() const {
  return wheels_.size();
}
inline int WheelObject::wheels_size() const {
  return _internal_wheels_size();
}
inline void WheelObject::clear_wheels() {
  wheels_.Clear();
}
inline ::F4BY::Object3* WheelObject::mutable_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.WheelObject.wheels)
  return wheels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >*
WheelObject::mutable_wheels() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.WheelObject.wheels)
  return &wheels_;
}
inline const ::F4BY::Object3& WheelObject::_internal_wheels(int index) const {
  return wheels_.Get(index);
}
inline const ::F4BY::Object3& WheelObject::wheels(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.WheelObject.wheels)
  return _internal_wheels(index);
}
inline ::F4BY::Object3* WheelObject::_internal_add_wheels() {
  return wheels_.Add();
}
inline ::F4BY::Object3* WheelObject::add_wheels() {
  // @@protoc_insertion_point(field_add:F4BY.WheelObject.wheels)
  return _internal_add_wheels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >&
WheelObject::wheels() const {
  // @@protoc_insertion_point(field_list:F4BY.WheelObject.wheels)
  return wheels_;
}

// int32 ratio = 2;
inline void WheelObject::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelObject::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WheelObject::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.WheelObject.ratio)
  return _internal_ratio();
}
inline void WheelObject::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void WheelObject::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.WheelObject.ratio)
}

// -------------------------------------------------------------------

// Decimal

// int32 num = 1;
inline void Decimal::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::num() const {
  // @@protoc_insertion_point(field_get:F4BY.Decimal.num)
  return _internal_num();
}
inline void Decimal::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void Decimal::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:F4BY.Decimal.num)
}

// int32 denom = 2;
inline void Decimal::clear_denom() {
  denom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_denom() const {
  return denom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::denom() const {
  // @@protoc_insertion_point(field_get:F4BY.Decimal.denom)
  return _internal_denom();
}
inline void Decimal::_internal_set_denom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  denom_ = value;
}
inline void Decimal::set_denom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_denom(value);
  // @@protoc_insertion_point(field_set:F4BY.Decimal.denom)
}

// -------------------------------------------------------------------

// CSLoginGameWithToken

// int32 playerId = 1;
inline void CSLoginGameWithToken::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::playerid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLoginGameWithToken.playerId)
  return _internal_playerid();
}
inline void CSLoginGameWithToken::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSLoginGameWithToken::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLoginGameWithToken.playerId)
}

// string token = 2;
inline void CSLoginGameWithToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CSLoginGameWithToken::token() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLoginGameWithToken.token)
  return _internal_token();
}
inline void CSLoginGameWithToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLoginGameWithToken.token)
}
inline std::string* CSLoginGameWithToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSLoginGameWithToken.token)
  return _internal_mutable_token();
}
inline const std::string& CSLoginGameWithToken::_internal_token() const {
  return token_.Get();
}
inline void CSLoginGameWithToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSLoginGameWithToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CSLoginGameWithToken.token)
}
inline void CSLoginGameWithToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CSLoginGameWithToken.token)
}
inline void CSLoginGameWithToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CSLoginGameWithToken.token)
}
inline std::string* CSLoginGameWithToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSLoginGameWithToken::release_token() {
  // @@protoc_insertion_point(field_release:F4BY.CSLoginGameWithToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSLoginGameWithToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSLoginGameWithToken.token)
}

// int32 oSType = 3;
inline void CSLoginGameWithToken::clear_ostype() {
  ostype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_ostype() const {
  return ostype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::ostype() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLoginGameWithToken.oSType)
  return _internal_ostype();
}
inline void CSLoginGameWithToken::_internal_set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ostype_ = value;
}
inline void CSLoginGameWithToken::set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ostype(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLoginGameWithToken.oSType)
}

// int32 tableId = 4;
inline void CSLoginGameWithToken::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::tableid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLoginGameWithToken.tableId)
  return _internal_tableid();
}
inline void CSLoginGameWithToken::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void CSLoginGameWithToken::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLoginGameWithToken.tableId)
}

// int32 last_tableId = 5;
inline void CSLoginGameWithToken::clear_last_tableid() {
  last_tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_last_tableid() const {
  return last_tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::last_tableid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLoginGameWithToken.last_tableId)
  return _internal_last_tableid();
}
inline void CSLoginGameWithToken::_internal_set_last_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_tableid_ = value;
}
inline void CSLoginGameWithToken::set_last_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_tableid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLoginGameWithToken.last_tableId)
}

// -------------------------------------------------------------------

// SCLoginGameWithToken

// int32 scene_index = 1;
inline void SCLoginGameWithToken::clear_scene_index() {
  scene_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_scene_index() const {
  return scene_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::scene_index() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLoginGameWithToken.scene_index)
  return _internal_scene_index();
}
inline void SCLoginGameWithToken::_internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_index_ = value;
}
inline void SCLoginGameWithToken::set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_index(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLoginGameWithToken.scene_index)
}

// int32 tableId = 2;
inline void SCLoginGameWithToken::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::tableid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLoginGameWithToken.tableId)
  return _internal_tableid();
}
inline void SCLoginGameWithToken::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCLoginGameWithToken::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLoginGameWithToken.tableId)
}

// -------------------------------------------------------------------

// CSUserReady

// int32 playerId = 1;
inline void CSUserReady::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserReady::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserReady::playerid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserReady.playerId)
  return _internal_playerid();
}
inline void CSUserReady::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSUserReady::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserReady.playerId)
}

// -------------------------------------------------------------------

// EffectInfo

// int32 effect_id = 1;
inline void EffectInfo::clear_effect_id() {
  effect_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectInfo::_internal_effect_id() const {
  return effect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectInfo::effect_id() const {
  // @@protoc_insertion_point(field_get:F4BY.EffectInfo.effect_id)
  return _internal_effect_id();
}
inline void EffectInfo::_internal_set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effect_id_ = value;
}
inline void EffectInfo::set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect_id(value);
  // @@protoc_insertion_point(field_set:F4BY.EffectInfo.effect_id)
}

// bool is_global = 2;
inline void EffectInfo::clear_is_global() {
  is_global_ = false;
}
inline bool EffectInfo::_internal_is_global() const {
  return is_global_;
}
inline bool EffectInfo::is_global() const {
  // @@protoc_insertion_point(field_get:F4BY.EffectInfo.is_global)
  return _internal_is_global();
}
inline void EffectInfo::_internal_set_is_global(bool value) {
  
  is_global_ = value;
}
inline void EffectInfo::set_is_global(bool value) {
  _internal_set_is_global(value);
  // @@protoc_insertion_point(field_set:F4BY.EffectInfo.is_global)
}

// -------------------------------------------------------------------

// StationBase

// int32 gun_ratio = 1;
inline void StationBase::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::gun_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.gun_ratio)
  return _internal_gun_ratio();
}
inline void StationBase::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void StationBase::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.gun_ratio)
}

// int32 gun_level = 2;
inline void StationBase::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.gun_level)
  return _internal_gun_level();
}
inline void StationBase::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void StationBase::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.gun_level)
}

// int64 user_score = 3;
inline void StationBase::clear_user_score() {
  user_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StationBase::_internal_user_score() const {
  return user_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StationBase::user_score() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.user_score)
  return _internal_user_score();
}
inline void StationBase::_internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_score_ = value;
}
inline void StationBase::set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_score(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.user_score)
}

// int32 chair_idx = 4;
inline void StationBase::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.chair_idx)
  return _internal_chair_idx();
}
inline void StationBase::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void StationBase::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.chair_idx)
}

// string player_name = 5;
inline void StationBase::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& StationBase::player_name() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.player_name)
  return _internal_player_name();
}
inline void StationBase::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.player_name)
}
inline std::string* StationBase::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:F4BY.StationBase.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& StationBase::_internal_player_name() const {
  return player_name_.Get();
}
inline void StationBase::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StationBase::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.StationBase.player_name)
}
inline void StationBase::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.StationBase.player_name)
}
inline void StationBase::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.StationBase.player_name)
}
inline std::string* StationBase::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StationBase::release_player_name() {
  // @@protoc_insertion_point(field_release:F4BY.StationBase.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StationBase::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.StationBase.player_name)
}

// int32 player_id = 6;
inline void StationBase::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::player_id() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.player_id)
  return _internal_player_id();
}
inline void StationBase::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void StationBase::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.player_id)
}

// int32 vip = 7;
inline void StationBase::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::vip() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.vip)
  return _internal_vip();
}
inline void StationBase::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void StationBase::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.vip)
}

// int32 status = 8;
inline void StationBase::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::status() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.status)
  return _internal_status();
}
inline void StationBase::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void StationBase::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.status)
}

// bool crazy_skill_open = 9;
inline void StationBase::clear_crazy_skill_open() {
  crazy_skill_open_ = false;
}
inline bool StationBase::_internal_crazy_skill_open() const {
  return crazy_skill_open_;
}
inline bool StationBase::crazy_skill_open() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.crazy_skill_open)
  return _internal_crazy_skill_open();
}
inline void StationBase::_internal_set_crazy_skill_open(bool value) {
  
  crazy_skill_open_ = value;
}
inline void StationBase::set_crazy_skill_open(bool value) {
  _internal_set_crazy_skill_open(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.crazy_skill_open)
}

// int32 user_ticket = 10;
inline void StationBase::clear_user_ticket() {
  user_ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_user_ticket() const {
  return user_ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::user_ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.user_ticket)
  return _internal_user_ticket();
}
inline void StationBase::_internal_set_user_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_ticket_ = value;
}
inline void StationBase::set_user_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.user_ticket)
}

// int32 effect = 11;
inline void StationBase::clear_effect() {
  effect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_effect() const {
  return effect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::effect() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.effect)
  return _internal_effect();
}
inline void StationBase::_internal_set_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effect_ = value;
}
inline void StationBase::set_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.effect)
}

// int32 extra_data = 12;
inline void StationBase::clear_extra_data() {
  extra_data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_extra_data() const {
  return extra_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::extra_data() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.extra_data)
  return _internal_extra_data();
}
inline void StationBase::_internal_set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_data_ = value;
}
inline void StationBase::set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_data(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.extra_data)
}

// .F4BY.Decimal red_packet_ticket = 13;
inline bool StationBase::_internal_has_red_packet_ticket() const {
  return this != internal_default_instance() && red_packet_ticket_ != nullptr;
}
inline bool StationBase::has_red_packet_ticket() const {
  return _internal_has_red_packet_ticket();
}
inline void StationBase::clear_red_packet_ticket() {
  if (GetArena() == nullptr && red_packet_ticket_ != nullptr) {
    delete red_packet_ticket_;
  }
  red_packet_ticket_ = nullptr;
}
inline const ::F4BY::Decimal& StationBase::_internal_red_packet_ticket() const {
  const ::F4BY::Decimal* p = red_packet_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Decimal&>(
      ::F4BY::_Decimal_default_instance_);
}
inline const ::F4BY::Decimal& StationBase::red_packet_ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.red_packet_ticket)
  return _internal_red_packet_ticket();
}
inline void StationBase::unsafe_arena_set_allocated_red_packet_ticket(
    ::F4BY::Decimal* red_packet_ticket) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(red_packet_ticket_);
  }
  red_packet_ticket_ = red_packet_ticket;
  if (red_packet_ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.StationBase.red_packet_ticket)
}
inline ::F4BY::Decimal* StationBase::release_red_packet_ticket() {
  
  ::F4BY::Decimal* temp = red_packet_ticket_;
  red_packet_ticket_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Decimal* StationBase::unsafe_arena_release_red_packet_ticket() {
  // @@protoc_insertion_point(field_release:F4BY.StationBase.red_packet_ticket)
  
  ::F4BY::Decimal* temp = red_packet_ticket_;
  red_packet_ticket_ = nullptr;
  return temp;
}
inline ::F4BY::Decimal* StationBase::_internal_mutable_red_packet_ticket() {
  
  if (red_packet_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Decimal>(GetArena());
    red_packet_ticket_ = p;
  }
  return red_packet_ticket_;
}
inline ::F4BY::Decimal* StationBase::mutable_red_packet_ticket() {
  // @@protoc_insertion_point(field_mutable:F4BY.StationBase.red_packet_ticket)
  return _internal_mutable_red_packet_ticket();
}
inline void StationBase::set_allocated_red_packet_ticket(::F4BY::Decimal* red_packet_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete red_packet_ticket_;
  }
  if (red_packet_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(red_packet_ticket);
    if (message_arena != submessage_arena) {
      red_packet_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, red_packet_ticket, submessage_arena);
    }
    
  } else {
    
  }
  red_packet_ticket_ = red_packet_ticket;
  // @@protoc_insertion_point(field_set_allocated:F4BY.StationBase.red_packet_ticket)
}

// .F4BY.EffectInfo effect_info = 14;
inline bool StationBase::_internal_has_effect_info() const {
  return this != internal_default_instance() && effect_info_ != nullptr;
}
inline bool StationBase::has_effect_info() const {
  return _internal_has_effect_info();
}
inline void StationBase::clear_effect_info() {
  if (GetArena() == nullptr && effect_info_ != nullptr) {
    delete effect_info_;
  }
  effect_info_ = nullptr;
}
inline const ::F4BY::EffectInfo& StationBase::_internal_effect_info() const {
  const ::F4BY::EffectInfo* p = effect_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::EffectInfo&>(
      ::F4BY::_EffectInfo_default_instance_);
}
inline const ::F4BY::EffectInfo& StationBase::effect_info() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.effect_info)
  return _internal_effect_info();
}
inline void StationBase::unsafe_arena_set_allocated_effect_info(
    ::F4BY::EffectInfo* effect_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_info_);
  }
  effect_info_ = effect_info;
  if (effect_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.StationBase.effect_info)
}
inline ::F4BY::EffectInfo* StationBase::release_effect_info() {
  
  ::F4BY::EffectInfo* temp = effect_info_;
  effect_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::EffectInfo* StationBase::unsafe_arena_release_effect_info() {
  // @@protoc_insertion_point(field_release:F4BY.StationBase.effect_info)
  
  ::F4BY::EffectInfo* temp = effect_info_;
  effect_info_ = nullptr;
  return temp;
}
inline ::F4BY::EffectInfo* StationBase::_internal_mutable_effect_info() {
  
  if (effect_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::EffectInfo>(GetArena());
    effect_info_ = p;
  }
  return effect_info_;
}
inline ::F4BY::EffectInfo* StationBase::mutable_effect_info() {
  // @@protoc_insertion_point(field_mutable:F4BY.StationBase.effect_info)
  return _internal_mutable_effect_info();
}
inline void StationBase::set_allocated_effect_info(::F4BY::EffectInfo* effect_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_info_;
  }
  if (effect_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_info);
    if (message_arena != submessage_arena) {
      effect_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_info, submessage_arena);
    }
    
  } else {
    
  }
  effect_info_ = effect_info;
  // @@protoc_insertion_point(field_set_allocated:F4BY.StationBase.effect_info)
}

// int32 wings_props_id = 15;
inline void StationBase::clear_wings_props_id() {
  wings_props_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_wings_props_id() const {
  return wings_props_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::wings_props_id() const {
  // @@protoc_insertion_point(field_get:F4BY.StationBase.wings_props_id)
  return _internal_wings_props_id();
}
inline void StationBase::_internal_set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_props_id_ = value;
}
inline void StationBase::set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_props_id(value);
  // @@protoc_insertion_point(field_set:F4BY.StationBase.wings_props_id)
}

// -------------------------------------------------------------------

// SCUserReady

// repeated .F4BY.StationBase station_base_list = 1;
inline int SCUserReady::_internal_station_base_list_size() const {
  return station_base_list_.size();
}
inline int SCUserReady::station_base_list_size() const {
  return _internal_station_base_list_size();
}
inline void SCUserReady::clear_station_base_list() {
  station_base_list_.Clear();
}
inline ::F4BY::StationBase* SCUserReady::mutable_station_base_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserReady.station_base_list)
  return station_base_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >*
SCUserReady::mutable_station_base_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCUserReady.station_base_list)
  return &station_base_list_;
}
inline const ::F4BY::StationBase& SCUserReady::_internal_station_base_list(int index) const {
  return station_base_list_.Get(index);
}
inline const ::F4BY::StationBase& SCUserReady::station_base_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserReady.station_base_list)
  return _internal_station_base_list(index);
}
inline ::F4BY::StationBase* SCUserReady::_internal_add_station_base_list() {
  return station_base_list_.Add();
}
inline ::F4BY::StationBase* SCUserReady::add_station_base_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCUserReady.station_base_list)
  return _internal_add_station_base_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::StationBase >&
SCUserReady::station_base_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCUserReady.station_base_list)
  return station_base_list_;
}

// -------------------------------------------------------------------

// SCNotifyLogin

// .F4BY.StationBase station_base_list = 1;
inline bool SCNotifyLogin::_internal_has_station_base_list() const {
  return this != internal_default_instance() && station_base_list_ != nullptr;
}
inline bool SCNotifyLogin::has_station_base_list() const {
  return _internal_has_station_base_list();
}
inline void SCNotifyLogin::clear_station_base_list() {
  if (GetArena() == nullptr && station_base_list_ != nullptr) {
    delete station_base_list_;
  }
  station_base_list_ = nullptr;
}
inline const ::F4BY::StationBase& SCNotifyLogin::_internal_station_base_list() const {
  const ::F4BY::StationBase* p = station_base_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::StationBase&>(
      ::F4BY::_StationBase_default_instance_);
}
inline const ::F4BY::StationBase& SCNotifyLogin::station_base_list() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNotifyLogin.station_base_list)
  return _internal_station_base_list();
}
inline void SCNotifyLogin::unsafe_arena_set_allocated_station_base_list(
    ::F4BY::StationBase* station_base_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_base_list_);
  }
  station_base_list_ = station_base_list;
  if (station_base_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCNotifyLogin.station_base_list)
}
inline ::F4BY::StationBase* SCNotifyLogin::release_station_base_list() {
  
  ::F4BY::StationBase* temp = station_base_list_;
  station_base_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::StationBase* SCNotifyLogin::unsafe_arena_release_station_base_list() {
  // @@protoc_insertion_point(field_release:F4BY.SCNotifyLogin.station_base_list)
  
  ::F4BY::StationBase* temp = station_base_list_;
  station_base_list_ = nullptr;
  return temp;
}
inline ::F4BY::StationBase* SCNotifyLogin::_internal_mutable_station_base_list() {
  
  if (station_base_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::StationBase>(GetArena());
    station_base_list_ = p;
  }
  return station_base_list_;
}
inline ::F4BY::StationBase* SCNotifyLogin::mutable_station_base_list() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCNotifyLogin.station_base_list)
  return _internal_mutable_station_base_list();
}
inline void SCNotifyLogin::set_allocated_station_base_list(::F4BY::StationBase* station_base_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete station_base_list_;
  }
  if (station_base_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(station_base_list);
    if (message_arena != submessage_arena) {
      station_base_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, station_base_list, submessage_arena);
    }
    
  } else {
    
  }
  station_base_list_ = station_base_list;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCNotifyLogin.station_base_list)
}

// -------------------------------------------------------------------

// CSNotifyLogout

// -------------------------------------------------------------------

// SCNotifyLogout

// int32 chair_idx = 1;
inline void SCNotifyLogout::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyLogout::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyLogout::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNotifyLogout.chair_idx)
  return _internal_chair_idx();
}
inline void SCNotifyLogout::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCNotifyLogout::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNotifyLogout.chair_idx)
}

// -------------------------------------------------------------------

// CSSetProbability

// int32 gun_ratio = 1;
inline void CSSetProbability::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::gun_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSetProbability.gun_ratio)
  return _internal_gun_ratio();
}
inline void CSSetProbability::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void CSSetProbability::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSetProbability.gun_ratio)
}

// int32 gun_level = 2;
inline void CSSetProbability::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSetProbability.gun_level)
  return _internal_gun_level();
}
inline void CSSetProbability::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void CSSetProbability::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSetProbability.gun_level)
}

// bool is_use_auto = 3;
inline void CSSetProbability::clear_is_use_auto() {
  is_use_auto_ = false;
}
inline bool CSSetProbability::_internal_is_use_auto() const {
  return is_use_auto_;
}
inline bool CSSetProbability::is_use_auto() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSetProbability.is_use_auto)
  return _internal_is_use_auto();
}
inline void CSSetProbability::_internal_set_is_use_auto(bool value) {
  
  is_use_auto_ = value;
}
inline void CSSetProbability::set_is_use_auto(bool value) {
  _internal_set_is_use_auto(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSetProbability.is_use_auto)
}

// -------------------------------------------------------------------

// SCSetProbability

// int32 code = 1;
inline void SCSetProbability::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.code)
  return _internal_code();
}
inline void SCSetProbability::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCSetProbability::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.code)
}

// int32 chair_idx = 2;
inline void SCSetProbability::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.chair_idx)
  return _internal_chair_idx();
}
inline void SCSetProbability::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSetProbability::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.chair_idx)
}

// int32 gun_ratio = 3;
inline void SCSetProbability::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::gun_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.gun_ratio)
  return _internal_gun_ratio();
}
inline void SCSetProbability::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void SCSetProbability::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.gun_ratio)
}

// int32 gun_level = 4;
inline void SCSetProbability::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.gun_level)
  return _internal_gun_level();
}
inline void SCSetProbability::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCSetProbability::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.gun_level)
}

// string msg = 5;
inline void SCSetProbability::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCSetProbability::msg() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.msg)
  return _internal_msg();
}
inline void SCSetProbability::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.msg)
}
inline std::string* SCSetProbability::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSetProbability.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCSetProbability::_internal_msg() const {
  return msg_.Get();
}
inline void SCSetProbability::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCSetProbability::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCSetProbability.msg)
}
inline void SCSetProbability::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCSetProbability.msg)
}
inline void SCSetProbability::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCSetProbability.msg)
}
inline std::string* SCSetProbability::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCSetProbability::release_msg() {
  // @@protoc_insertion_point(field_release:F4BY.SCSetProbability.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCSetProbability::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSetProbability.msg)
}

// bool is_unlock = 6;
inline void SCSetProbability::clear_is_unlock() {
  is_unlock_ = false;
}
inline bool SCSetProbability::_internal_is_unlock() const {
  return is_unlock_;
}
inline bool SCSetProbability::is_unlock() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.is_unlock)
  return _internal_is_unlock();
}
inline void SCSetProbability::_internal_set_is_unlock(bool value) {
  
  is_unlock_ = value;
}
inline void SCSetProbability::set_is_unlock(bool value) {
  _internal_set_is_unlock(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.is_unlock)
}

// int32 extra_data = 7;
inline void SCSetProbability::clear_extra_data() {
  extra_data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_extra_data() const {
  return extra_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::extra_data() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetProbability.extra_data)
  return _internal_extra_data();
}
inline void SCSetProbability::_internal_set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_data_ = value;
}
inline void SCSetProbability::set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_data(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetProbability.extra_data)
}

// -------------------------------------------------------------------

// CSSetWings

// int32 wings_prop_id = 1;
inline void CSSetWings::clear_wings_prop_id() {
  wings_prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetWings::_internal_wings_prop_id() const {
  return wings_prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetWings::wings_prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSetWings.wings_prop_id)
  return _internal_wings_prop_id();
}
inline void CSSetWings::_internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_prop_id_ = value;
}
inline void CSSetWings::set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSetWings.wings_prop_id)
}

// -------------------------------------------------------------------

// SCSetWings

// int32 chair_idx = 1;
inline void SCSetWings::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetWings.chair_idx)
  return _internal_chair_idx();
}
inline void SCSetWings::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSetWings::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetWings.chair_idx)
}

// int32 wings_prop_id = 2;
inline void SCSetWings::clear_wings_prop_id() {
  wings_prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_wings_prop_id() const {
  return wings_prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::wings_prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetWings.wings_prop_id)
  return _internal_wings_prop_id();
}
inline void SCSetWings::_internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_prop_id_ = value;
}
inline void SCSetWings::set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetWings.wings_prop_id)
}

// int32 code = 3;
inline void SCSetWings::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSetWings.code)
  return _internal_code();
}
inline void SCSetWings::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCSetWings::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSetWings.code)
}

// -------------------------------------------------------------------

// CSUserShoot

// int32 angle = 1;
inline void CSUserShoot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::angle() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.angle)
  return _internal_angle();
}
inline void CSUserShoot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void CSUserShoot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.angle)
}

// repeated int32 bullet_id = 2;
inline int CSUserShoot::_internal_bullet_id_size() const {
  return bullet_id_.size();
}
inline int CSUserShoot::bullet_id_size() const {
  return _internal_bullet_id_size();
}
inline void CSUserShoot::clear_bullet_id() {
  bullet_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::_internal_bullet_id(int index) const {
  return bullet_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::bullet_id(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.bullet_id)
  return _internal_bullet_id(index);
}
inline void CSUserShoot::set_bullet_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bullet_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.bullet_id)
}
inline void CSUserShoot::_internal_add_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bullet_id_.Add(value);
}
inline void CSUserShoot::add_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bullet_id(value);
  // @@protoc_insertion_point(field_add:F4BY.CSUserShoot.bullet_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSUserShoot::_internal_bullet_id() const {
  return bullet_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSUserShoot::bullet_id() const {
  // @@protoc_insertion_point(field_list:F4BY.CSUserShoot.bullet_id)
  return _internal_bullet_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSUserShoot::_internal_mutable_bullet_id() {
  return &bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSUserShoot::mutable_bullet_id() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSUserShoot.bullet_id)
  return _internal_mutable_bullet_id();
}

// int32 ratio = 3;
inline void CSUserShoot::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.ratio)
  return _internal_ratio();
}
inline void CSUserShoot::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSUserShoot::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.ratio)
}

// int32 bullet_type = 4;
inline void CSUserShoot::clear_bullet_type() {
  bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::_internal_bullet_type() const {
  return bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::bullet_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.bullet_type)
  return _internal_bullet_type();
}
inline void CSUserShoot::_internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_type_ = value;
}
inline void CSUserShoot::set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.bullet_type)
}

// bool is_offset = 5;
inline void CSUserShoot::clear_is_offset() {
  is_offset_ = false;
}
inline bool CSUserShoot::_internal_is_offset() const {
  return is_offset_;
}
inline bool CSUserShoot::is_offset() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.is_offset)
  return _internal_is_offset();
}
inline void CSUserShoot::_internal_set_is_offset(bool value) {
  
  is_offset_ = value;
}
inline void CSUserShoot::set_is_offset(bool value) {
  _internal_set_is_offset(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.is_offset)
}

// int32 chair_id = 6;
inline void CSUserShoot::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::chair_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.chair_id)
  return _internal_chair_id();
}
inline void CSUserShoot::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CSUserShoot::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.chair_id)
}

// int32 extra_mul = 7;
inline void CSUserShoot::clear_extra_mul() {
  extra_mul_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::_internal_extra_mul() const {
  return extra_mul_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserShoot::extra_mul() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserShoot.extra_mul)
  return _internal_extra_mul();
}
inline void CSUserShoot::_internal_set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_mul_ = value;
}
inline void CSUserShoot::set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_mul(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserShoot.extra_mul)
}

// -------------------------------------------------------------------

// SCUserShoot

// int32 chair_idx = 1;
inline void SCUserShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserShoot.chair_idx)
}

// int32 angle = 2;
inline void SCUserShoot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::angle() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserShoot.angle)
  return _internal_angle();
}
inline void SCUserShoot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void SCUserShoot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserShoot.angle)
}

// int32 score = 3;
inline void SCUserShoot::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserShoot.score)
  return _internal_score();
}
inline void SCUserShoot::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCUserShoot::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserShoot.score)
}

// int32 bullet_type = 4;
inline void SCUserShoot::clear_bullet_type() {
  bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::_internal_bullet_type() const {
  return bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShoot::bullet_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserShoot.bullet_type)
  return _internal_bullet_type();
}
inline void SCUserShoot::_internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_type_ = value;
}
inline void SCUserShoot::set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserShoot.bullet_type)
}

// bool bullet_offset = 5;
inline void SCUserShoot::clear_bullet_offset() {
  bullet_offset_ = false;
}
inline bool SCUserShoot::_internal_bullet_offset() const {
  return bullet_offset_;
}
inline bool SCUserShoot::bullet_offset() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserShoot.bullet_offset)
  return _internal_bullet_offset();
}
inline void SCUserShoot::_internal_set_bullet_offset(bool value) {
  
  bullet_offset_ = value;
}
inline void SCUserShoot::set_bullet_offset(bool value) {
  _internal_set_bullet_offset(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserShoot.bullet_offset)
}

// -------------------------------------------------------------------

// CSHitFish

// int32 fish_uid = 1;
inline void CSHitFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSHitFish.fish_uid)
  return _internal_fish_uid();
}
inline void CSHitFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void CSHitFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSHitFish.fish_uid)
}

// int32 bullet_id = 2;
inline void CSHitFish::clear_bullet_id() {
  bullet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::_internal_bullet_id() const {
  return bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::bullet_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSHitFish.bullet_id)
  return _internal_bullet_id();
}
inline void CSHitFish::_internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_id_ = value;
}
inline void CSHitFish::set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSHitFish.bullet_id)
}

// repeated int32 screen_fishes = 3;
inline int CSHitFish::_internal_screen_fishes_size() const {
  return screen_fishes_.size();
}
inline int CSHitFish::screen_fishes_size() const {
  return _internal_screen_fishes_size();
}
inline void CSHitFish::clear_screen_fishes() {
  screen_fishes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::_internal_screen_fishes(int index) const {
  return screen_fishes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::screen_fishes(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSHitFish.screen_fishes)
  return _internal_screen_fishes(index);
}
inline void CSHitFish::set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.CSHitFish.screen_fishes)
}
inline void CSHitFish::_internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Add(value);
}
inline void CSHitFish::add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_screen_fishes(value);
  // @@protoc_insertion_point(field_add:F4BY.CSHitFish.screen_fishes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSHitFish::_internal_screen_fishes() const {
  return screen_fishes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSHitFish::screen_fishes() const {
  // @@protoc_insertion_point(field_list:F4BY.CSHitFish.screen_fishes)
  return _internal_screen_fishes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSHitFish::_internal_mutable_screen_fishes() {
  return &screen_fishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSHitFish::mutable_screen_fishes() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSHitFish.screen_fishes)
  return _internal_mutable_screen_fishes();
}

// int32 chair_id = 4;
inline void CSHitFish::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::chair_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSHitFish.chair_id)
  return _internal_chair_id();
}
inline void CSHitFish::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CSHitFish::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSHitFish.chair_id)
}

// int32 ratio = 5;
inline void CSHitFish::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.CSHitFish.ratio)
  return _internal_ratio();
}
inline void CSHitFish::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSHitFish::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.CSHitFish.ratio)
}

// int32 bullet_type = 6;
inline void CSHitFish::clear_bullet_type() {
  bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::_internal_bullet_type() const {
  return bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHitFish::bullet_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSHitFish.bullet_type)
  return _internal_bullet_type();
}
inline void CSHitFish::_internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_type_ = value;
}
inline void CSHitFish::set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSHitFish.bullet_type)
}

// -------------------------------------------------------------------

// MultiInfo

// int32 bt_type = 1;
inline void MultiInfo::clear_bt_type() {
  bt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiInfo::_internal_bt_type() const {
  return bt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiInfo::bt_type() const {
  // @@protoc_insertion_point(field_get:F4BY.MultiInfo.bt_type)
  return _internal_bt_type();
}
inline void MultiInfo::_internal_set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_type_ = value;
}
inline void MultiInfo::set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_type(value);
  // @@protoc_insertion_point(field_set:F4BY.MultiInfo.bt_type)
}

// int32 bt_multi = 2;
inline void MultiInfo::clear_bt_multi() {
  bt_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiInfo::_internal_bt_multi() const {
  return bt_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiInfo::bt_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.MultiInfo.bt_multi)
  return _internal_bt_multi();
}
inline void MultiInfo::_internal_set_bt_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_multi_ = value;
}
inline void MultiInfo::set_bt_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.MultiInfo.bt_multi)
}

// int32 bt_base = 3;
inline void MultiInfo::clear_bt_base() {
  bt_base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiInfo::_internal_bt_base() const {
  return bt_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiInfo::bt_base() const {
  // @@protoc_insertion_point(field_get:F4BY.MultiInfo.bt_base)
  return _internal_bt_base();
}
inline void MultiInfo::_internal_set_bt_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_base_ = value;
}
inline void MultiInfo::set_bt_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_base(value);
  // @@protoc_insertion_point(field_set:F4BY.MultiInfo.bt_base)
}

// -------------------------------------------------------------------

// SCHitFish

// int32 chair_idx = 1;
inline void SCHitFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.chair_idx)
  return _internal_chair_idx();
}
inline void SCHitFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCHitFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.chair_idx)
}

// int32 fish_uid = 2;
inline void SCHitFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.fish_uid)
  return _internal_fish_uid();
}
inline void SCHitFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCHitFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.fish_uid)
}

// int32 earn = 3;
inline void SCHitFish::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.earn)
  return _internal_earn();
}
inline void SCHitFish::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCHitFish::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.earn)
}

// int64 user_score = 4;
inline void SCHitFish::clear_user_score() {
  user_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHitFish::_internal_user_score() const {
  return user_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHitFish::user_score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.user_score)
  return _internal_user_score();
}
inline void SCHitFish::_internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_score_ = value;
}
inline void SCHitFish::set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.user_score)
}

// int32 fish_value = 5;
inline void SCHitFish::clear_fish_value() {
  fish_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_fish_value() const {
  return fish_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::fish_value() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.fish_value)
  return _internal_fish_value();
}
inline void SCHitFish::_internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_value_ = value;
}
inline void SCHitFish::set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_value(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.fish_value)
}

// int32 multiple = 6;
inline void SCHitFish::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.multiple)
  return _internal_multiple();
}
inline void SCHitFish::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SCHitFish::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.multiple)
}

// int32 hit_bullet_type = 7;
inline void SCHitFish::clear_hit_bullet_type() {
  hit_bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_hit_bullet_type() const {
  return hit_bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::hit_bullet_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.hit_bullet_type)
  return _internal_hit_bullet_type();
}
inline void SCHitFish::_internal_set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hit_bullet_type_ = value;
}
inline void SCHitFish::set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hit_bullet_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.hit_bullet_type)
}

// int32 magic_cube_multi = 8;
inline void SCHitFish::clear_magic_cube_multi() {
  magic_cube_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_magic_cube_multi() const {
  return magic_cube_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::magic_cube_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.magic_cube_multi)
  return _internal_magic_cube_multi();
}
inline void SCHitFish::_internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magic_cube_multi_ = value;
}
inline void SCHitFish::set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magic_cube_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.magic_cube_multi)
}

// repeated .F4BY.MultiInfo multi_list = 9;
inline int SCHitFish::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int SCHitFish::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void SCHitFish::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* SCHitFish::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCHitFish.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
SCHitFish::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCHitFish.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& SCHitFish::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& SCHitFish::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* SCHitFish::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* SCHitFish::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCHitFish.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
SCHitFish::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCHitFish.multi_list)
  return multi_list_;
}

// int32 origin_uid = 10;
inline void SCHitFish::clear_origin_uid() {
  origin_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::_internal_origin_uid() const {
  return origin_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitFish::origin_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.origin_uid)
  return _internal_origin_uid();
}
inline void SCHitFish::_internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origin_uid_ = value;
}
inline void SCHitFish::set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.origin_uid)
}

// repeated .F4BY.Object drop_props = 11;
inline int SCHitFish::_internal_drop_props_size() const {
  return drop_props_.size();
}
inline int SCHitFish::drop_props_size() const {
  return _internal_drop_props_size();
}
inline void SCHitFish::clear_drop_props() {
  drop_props_.Clear();
}
inline ::F4BY::Object* SCHitFish::mutable_drop_props(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCHitFish.drop_props)
  return drop_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
SCHitFish::mutable_drop_props() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCHitFish.drop_props)
  return &drop_props_;
}
inline const ::F4BY::Object& SCHitFish::_internal_drop_props(int index) const {
  return drop_props_.Get(index);
}
inline const ::F4BY::Object& SCHitFish::drop_props(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.drop_props)
  return _internal_drop_props(index);
}
inline ::F4BY::Object* SCHitFish::_internal_add_drop_props() {
  return drop_props_.Add();
}
inline ::F4BY::Object* SCHitFish::add_drop_props() {
  // @@protoc_insertion_point(field_add:F4BY.SCHitFish.drop_props)
  return _internal_add_drop_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
SCHitFish::drop_props() const {
  // @@protoc_insertion_point(field_list:F4BY.SCHitFish.drop_props)
  return drop_props_;
}

// bool death = 12;
inline void SCHitFish::clear_death() {
  death_ = false;
}
inline bool SCHitFish::_internal_death() const {
  return death_;
}
inline bool SCHitFish::death() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitFish.death)
  return _internal_death();
}
inline void SCHitFish::_internal_set_death(bool value) {
  
  death_ = value;
}
inline void SCHitFish::set_death(bool value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitFish.death)
}

// -------------------------------------------------------------------

// SCHitSpecialFish

// int32 chair_idx = 1;
inline void SCHitSpecialFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.chair_idx)
  return _internal_chair_idx();
}
inline void SCHitSpecialFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCHitSpecialFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.chair_idx)
}

// int32 fish_uid = 2;
inline void SCHitSpecialFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.fish_uid)
  return _internal_fish_uid();
}
inline void SCHitSpecialFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCHitSpecialFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.fish_uid)
}

// int32 earn = 3;
inline void SCHitSpecialFish::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.earn)
  return _internal_earn();
}
inline void SCHitSpecialFish::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCHitSpecialFish::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.earn)
}

// int32 fish_value = 4;
inline void SCHitSpecialFish::clear_fish_value() {
  fish_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_fish_value() const {
  return fish_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::fish_value() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.fish_value)
  return _internal_fish_value();
}
inline void SCHitSpecialFish::_internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_value_ = value;
}
inline void SCHitSpecialFish::set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_value(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.fish_value)
}

// int64 user_score = 5;
inline void SCHitSpecialFish::clear_user_score() {
  user_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHitSpecialFish::_internal_user_score() const {
  return user_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHitSpecialFish::user_score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.user_score)
  return _internal_user_score();
}
inline void SCHitSpecialFish::_internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_score_ = value;
}
inline void SCHitSpecialFish::set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.user_score)
}

// bool death = 6;
inline void SCHitSpecialFish::clear_death() {
  death_ = false;
}
inline bool SCHitSpecialFish::_internal_death() const {
  return death_;
}
inline bool SCHitSpecialFish::death() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.death)
  return _internal_death();
}
inline void SCHitSpecialFish::_internal_set_death(bool value) {
  
  death_ = value;
}
inline void SCHitSpecialFish::set_death(bool value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.death)
}

// int32 grow_stage = 7;
inline void SCHitSpecialFish::clear_grow_stage() {
  grow_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_grow_stage() const {
  return grow_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::grow_stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.grow_stage)
  return _internal_grow_stage();
}
inline void SCHitSpecialFish::_internal_set_grow_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grow_stage_ = value;
}
inline void SCHitSpecialFish::set_grow_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grow_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.grow_stage)
}

// int32 multiple = 8;
inline void SCHitSpecialFish::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.multiple)
  return _internal_multiple();
}
inline void SCHitSpecialFish::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SCHitSpecialFish::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.multiple)
}

// repeated .F4BY.Object shock_fishes = 9;
inline int SCHitSpecialFish::_internal_shock_fishes_size() const {
  return shock_fishes_.size();
}
inline int SCHitSpecialFish::shock_fishes_size() const {
  return _internal_shock_fishes_size();
}
inline void SCHitSpecialFish::clear_shock_fishes() {
  shock_fishes_.Clear();
}
inline ::F4BY::Object* SCHitSpecialFish::mutable_shock_fishes(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCHitSpecialFish.shock_fishes)
  return shock_fishes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
SCHitSpecialFish::mutable_shock_fishes() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCHitSpecialFish.shock_fishes)
  return &shock_fishes_;
}
inline const ::F4BY::Object& SCHitSpecialFish::_internal_shock_fishes(int index) const {
  return shock_fishes_.Get(index);
}
inline const ::F4BY::Object& SCHitSpecialFish::shock_fishes(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.shock_fishes)
  return _internal_shock_fishes(index);
}
inline ::F4BY::Object* SCHitSpecialFish::_internal_add_shock_fishes() {
  return shock_fishes_.Add();
}
inline ::F4BY::Object* SCHitSpecialFish::add_shock_fishes() {
  // @@protoc_insertion_point(field_add:F4BY.SCHitSpecialFish.shock_fishes)
  return _internal_add_shock_fishes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
SCHitSpecialFish::shock_fishes() const {
  // @@protoc_insertion_point(field_list:F4BY.SCHitSpecialFish.shock_fishes)
  return shock_fishes_;
}

// repeated .F4BY.Object drop_props = 10;
inline int SCHitSpecialFish::_internal_drop_props_size() const {
  return drop_props_.size();
}
inline int SCHitSpecialFish::drop_props_size() const {
  return _internal_drop_props_size();
}
inline void SCHitSpecialFish::clear_drop_props() {
  drop_props_.Clear();
}
inline ::F4BY::Object* SCHitSpecialFish::mutable_drop_props(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCHitSpecialFish.drop_props)
  return drop_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
SCHitSpecialFish::mutable_drop_props() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCHitSpecialFish.drop_props)
  return &drop_props_;
}
inline const ::F4BY::Object& SCHitSpecialFish::_internal_drop_props(int index) const {
  return drop_props_.Get(index);
}
inline const ::F4BY::Object& SCHitSpecialFish::drop_props(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.drop_props)
  return _internal_drop_props(index);
}
inline ::F4BY::Object* SCHitSpecialFish::_internal_add_drop_props() {
  return drop_props_.Add();
}
inline ::F4BY::Object* SCHitSpecialFish::add_drop_props() {
  // @@protoc_insertion_point(field_add:F4BY.SCHitSpecialFish.drop_props)
  return _internal_add_drop_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
SCHitSpecialFish::drop_props() const {
  // @@protoc_insertion_point(field_list:F4BY.SCHitSpecialFish.drop_props)
  return drop_props_;
}

// .F4BY.WheelObject wheel = 11;
inline bool SCHitSpecialFish::_internal_has_wheel() const {
  return this != internal_default_instance() && wheel_ != nullptr;
}
inline bool SCHitSpecialFish::has_wheel() const {
  return _internal_has_wheel();
}
inline void SCHitSpecialFish::clear_wheel() {
  if (GetArena() == nullptr && wheel_ != nullptr) {
    delete wheel_;
  }
  wheel_ = nullptr;
}
inline const ::F4BY::WheelObject& SCHitSpecialFish::_internal_wheel() const {
  const ::F4BY::WheelObject* p = wheel_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::WheelObject&>(
      ::F4BY::_WheelObject_default_instance_);
}
inline const ::F4BY::WheelObject& SCHitSpecialFish::wheel() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.wheel)
  return _internal_wheel();
}
inline void SCHitSpecialFish::unsafe_arena_set_allocated_wheel(
    ::F4BY::WheelObject* wheel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheel_);
  }
  wheel_ = wheel;
  if (wheel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCHitSpecialFish.wheel)
}
inline ::F4BY::WheelObject* SCHitSpecialFish::release_wheel() {
  
  ::F4BY::WheelObject* temp = wheel_;
  wheel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::WheelObject* SCHitSpecialFish::unsafe_arena_release_wheel() {
  // @@protoc_insertion_point(field_release:F4BY.SCHitSpecialFish.wheel)
  
  ::F4BY::WheelObject* temp = wheel_;
  wheel_ = nullptr;
  return temp;
}
inline ::F4BY::WheelObject* SCHitSpecialFish::_internal_mutable_wheel() {
  
  if (wheel_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::WheelObject>(GetArena());
    wheel_ = p;
  }
  return wheel_;
}
inline ::F4BY::WheelObject* SCHitSpecialFish::mutable_wheel() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCHitSpecialFish.wheel)
  return _internal_mutable_wheel();
}
inline void SCHitSpecialFish::set_allocated_wheel(::F4BY::WheelObject* wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wheel_;
  }
  if (wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wheel);
    if (message_arena != submessage_arena) {
      wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel, submessage_arena);
    }
    
  } else {
    
  }
  wheel_ = wheel;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCHitSpecialFish.wheel)
}

// int32 hit_bullet_type = 12;
inline void SCHitSpecialFish::clear_hit_bullet_type() {
  hit_bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_hit_bullet_type() const {
  return hit_bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::hit_bullet_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.hit_bullet_type)
  return _internal_hit_bullet_type();
}
inline void SCHitSpecialFish::_internal_set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hit_bullet_type_ = value;
}
inline void SCHitSpecialFish::set_hit_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hit_bullet_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.hit_bullet_type)
}

// int32 prop_no = 13;
inline void SCHitSpecialFish::clear_prop_no() {
  prop_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_prop_no() const {
  return prop_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::prop_no() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.prop_no)
  return _internal_prop_no();
}
inline void SCHitSpecialFish::_internal_set_prop_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_no_ = value;
}
inline void SCHitSpecialFish::set_prop_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_no(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.prop_no)
}

// int32 magic_cube_multi = 14;
inline void SCHitSpecialFish::clear_magic_cube_multi() {
  magic_cube_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_magic_cube_multi() const {
  return magic_cube_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::magic_cube_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.magic_cube_multi)
  return _internal_magic_cube_multi();
}
inline void SCHitSpecialFish::_internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magic_cube_multi_ = value;
}
inline void SCHitSpecialFish::set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magic_cube_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.magic_cube_multi)
}

// repeated .F4BY.MultiInfo multi_list = 15;
inline int SCHitSpecialFish::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int SCHitSpecialFish::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void SCHitSpecialFish::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* SCHitSpecialFish::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCHitSpecialFish.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
SCHitSpecialFish::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCHitSpecialFish.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& SCHitSpecialFish::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& SCHitSpecialFish::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* SCHitSpecialFish::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* SCHitSpecialFish::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCHitSpecialFish.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
SCHitSpecialFish::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCHitSpecialFish.multi_list)
  return multi_list_;
}

// int32 origin_uid = 16;
inline void SCHitSpecialFish::clear_origin_uid() {
  origin_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_origin_uid() const {
  return origin_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::origin_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.origin_uid)
  return _internal_origin_uid();
}
inline void SCHitSpecialFish::_internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origin_uid_ = value;
}
inline void SCHitSpecialFish::set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.origin_uid)
}

// int32 dragon_score = 17;
inline void SCHitSpecialFish::clear_dragon_score() {
  dragon_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::_internal_dragon_score() const {
  return dragon_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitSpecialFish::dragon_score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCHitSpecialFish.dragon_score)
  return _internal_dragon_score();
}
inline void SCHitSpecialFish::_internal_set_dragon_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dragon_score_ = value;
}
inline void SCHitSpecialFish::set_dragon_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dragon_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCHitSpecialFish.dragon_score)
}

// -------------------------------------------------------------------

// SyncPropInfoX

// .F4BY.Object prop = 1;
inline bool SyncPropInfoX::_internal_has_prop() const {
  return this != internal_default_instance() && prop_ != nullptr;
}
inline bool SyncPropInfoX::has_prop() const {
  return _internal_has_prop();
}
inline void SyncPropInfoX::clear_prop() {
  if (GetArena() == nullptr && prop_ != nullptr) {
    delete prop_;
  }
  prop_ = nullptr;
}
inline const ::F4BY::Object& SyncPropInfoX::_internal_prop() const {
  const ::F4BY::Object* p = prop_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object&>(
      ::F4BY::_Object_default_instance_);
}
inline const ::F4BY::Object& SyncPropInfoX::prop() const {
  // @@protoc_insertion_point(field_get:F4BY.SyncPropInfoX.prop)
  return _internal_prop();
}
inline void SyncPropInfoX::unsafe_arena_set_allocated_prop(
    ::F4BY::Object* prop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prop_);
  }
  prop_ = prop;
  if (prop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SyncPropInfoX.prop)
}
inline ::F4BY::Object* SyncPropInfoX::release_prop() {
  
  ::F4BY::Object* temp = prop_;
  prop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object* SyncPropInfoX::unsafe_arena_release_prop() {
  // @@protoc_insertion_point(field_release:F4BY.SyncPropInfoX.prop)
  
  ::F4BY::Object* temp = prop_;
  prop_ = nullptr;
  return temp;
}
inline ::F4BY::Object* SyncPropInfoX::_internal_mutable_prop() {
  
  if (prop_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object>(GetArena());
    prop_ = p;
  }
  return prop_;
}
inline ::F4BY::Object* SyncPropInfoX::mutable_prop() {
  // @@protoc_insertion_point(field_mutable:F4BY.SyncPropInfoX.prop)
  return _internal_mutable_prop();
}
inline void SyncPropInfoX::set_allocated_prop(::F4BY::Object* prop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prop_;
  }
  if (prop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prop);
    if (message_arena != submessage_arena) {
      prop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prop, submessage_arena);
    }
    
  } else {
    
  }
  prop_ = prop;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SyncPropInfoX.prop)
}

// float x = 2;
inline void SyncPropInfoX::clear_x() {
  x_ = 0;
}
inline float SyncPropInfoX::_internal_x() const {
  return x_;
}
inline float SyncPropInfoX::x() const {
  // @@protoc_insertion_point(field_get:F4BY.SyncPropInfoX.x)
  return _internal_x();
}
inline void SyncPropInfoX::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SyncPropInfoX::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F4BY.SyncPropInfoX.x)
}

// float y = 3;
inline void SyncPropInfoX::clear_y() {
  y_ = 0;
}
inline float SyncPropInfoX::_internal_y() const {
  return y_;
}
inline float SyncPropInfoX::y() const {
  // @@protoc_insertion_point(field_get:F4BY.SyncPropInfoX.y)
  return _internal_y();
}
inline void SyncPropInfoX::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SyncPropInfoX::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F4BY.SyncPropInfoX.y)
}

// float angle = 4;
inline void SyncPropInfoX::clear_angle() {
  angle_ = 0;
}
inline float SyncPropInfoX::_internal_angle() const {
  return angle_;
}
inline float SyncPropInfoX::angle() const {
  // @@protoc_insertion_point(field_get:F4BY.SyncPropInfoX.angle)
  return _internal_angle();
}
inline void SyncPropInfoX::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void SyncPropInfoX::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:F4BY.SyncPropInfoX.angle)
}

// int32 status = 5;
inline void SyncPropInfoX::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPropInfoX::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPropInfoX::status() const {
  // @@protoc_insertion_point(field_get:F4BY.SyncPropInfoX.status)
  return _internal_status();
}
inline void SyncPropInfoX::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SyncPropInfoX::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SyncPropInfoX.status)
}

// -------------------------------------------------------------------

// UserSyncPropInfo

// int32 chair_idx = 1;
inline void UserSyncPropInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSyncPropInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSyncPropInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.UserSyncPropInfo.chair_idx)
  return _internal_chair_idx();
}
inline void UserSyncPropInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void UserSyncPropInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.UserSyncPropInfo.chair_idx)
}

// repeated .F4BY.SyncPropInfoX props = 2;
inline int UserSyncPropInfo::_internal_props_size() const {
  return props_.size();
}
inline int UserSyncPropInfo::props_size() const {
  return _internal_props_size();
}
inline void UserSyncPropInfo::clear_props() {
  props_.Clear();
}
inline ::F4BY::SyncPropInfoX* UserSyncPropInfo::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.UserSyncPropInfo.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::SyncPropInfoX >*
UserSyncPropInfo::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.UserSyncPropInfo.props)
  return &props_;
}
inline const ::F4BY::SyncPropInfoX& UserSyncPropInfo::_internal_props(int index) const {
  return props_.Get(index);
}
inline const ::F4BY::SyncPropInfoX& UserSyncPropInfo::props(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.UserSyncPropInfo.props)
  return _internal_props(index);
}
inline ::F4BY::SyncPropInfoX* UserSyncPropInfo::_internal_add_props() {
  return props_.Add();
}
inline ::F4BY::SyncPropInfoX* UserSyncPropInfo::add_props() {
  // @@protoc_insertion_point(field_add:F4BY.UserSyncPropInfo.props)
  return _internal_add_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::SyncPropInfoX >&
UserSyncPropInfo::props() const {
  // @@protoc_insertion_point(field_list:F4BY.UserSyncPropInfo.props)
  return props_;
}

// -------------------------------------------------------------------

// CSSyncPropInfo

// .F4BY.SyncPropInfoX info = 1;
inline bool CSSyncPropInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CSSyncPropInfo::has_info() const {
  return _internal_has_info();
}
inline void CSSyncPropInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::F4BY::SyncPropInfoX& CSSyncPropInfo::_internal_info() const {
  const ::F4BY::SyncPropInfoX* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::SyncPropInfoX&>(
      ::F4BY::_SyncPropInfoX_default_instance_);
}
inline const ::F4BY::SyncPropInfoX& CSSyncPropInfo::info() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncPropInfo.info)
  return _internal_info();
}
inline void CSSyncPropInfo::unsafe_arena_set_allocated_info(
    ::F4BY::SyncPropInfoX* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.CSSyncPropInfo.info)
}
inline ::F4BY::SyncPropInfoX* CSSyncPropInfo::release_info() {
  
  ::F4BY::SyncPropInfoX* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::SyncPropInfoX* CSSyncPropInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:F4BY.CSSyncPropInfo.info)
  
  ::F4BY::SyncPropInfoX* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::F4BY::SyncPropInfoX* CSSyncPropInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::SyncPropInfoX>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::F4BY::SyncPropInfoX* CSSyncPropInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSSyncPropInfo.info)
  return _internal_mutable_info();
}
inline void CSSyncPropInfo::set_allocated_info(::F4BY::SyncPropInfoX* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSSyncPropInfo.info)
}

// int32 chair_idx = 2;
inline void CSSyncPropInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncPropInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncPropInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncPropInfo.chair_idx)
  return _internal_chair_idx();
}
inline void CSSyncPropInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSSyncPropInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncPropInfo.chair_idx)
}

// -------------------------------------------------------------------

// SCSyncPropInfo

// repeated .F4BY.UserSyncPropInfo users = 1;
inline int SCSyncPropInfo::_internal_users_size() const {
  return users_.size();
}
inline int SCSyncPropInfo::users_size() const {
  return _internal_users_size();
}
inline void SCSyncPropInfo::clear_users() {
  users_.Clear();
}
inline ::F4BY::UserSyncPropInfo* SCSyncPropInfo::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSyncPropInfo.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserSyncPropInfo >*
SCSyncPropInfo::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCSyncPropInfo.users)
  return &users_;
}
inline const ::F4BY::UserSyncPropInfo& SCSyncPropInfo::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::F4BY::UserSyncPropInfo& SCSyncPropInfo::users(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncPropInfo.users)
  return _internal_users(index);
}
inline ::F4BY::UserSyncPropInfo* SCSyncPropInfo::_internal_add_users() {
  return users_.Add();
}
inline ::F4BY::UserSyncPropInfo* SCSyncPropInfo::add_users() {
  // @@protoc_insertion_point(field_add:F4BY.SCSyncPropInfo.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserSyncPropInfo >&
SCSyncPropInfo::users() const {
  // @@protoc_insertion_point(field_list:F4BY.SCSyncPropInfo.users)
  return users_;
}

// -------------------------------------------------------------------

// CSSyncMoney

// int32 type = 1;
inline void CSSyncMoney::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncMoney::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncMoney::type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncMoney.type)
  return _internal_type();
}
inline void CSSyncMoney::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSSyncMoney::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncMoney.type)
}

// -------------------------------------------------------------------

// SCSyncMoney

// int32 chair_idx = 1;
inline void SCSyncMoney::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncMoney.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncMoney::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncMoney::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncMoney.chair_idx)
}

// int32 score = 2;
inline void SCSyncMoney::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncMoney.score)
  return _internal_score();
}
inline void SCSyncMoney::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCSyncMoney::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncMoney.score)
}

// int32 type = 3;
inline void SCSyncMoney::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncMoney.type)
  return _internal_type();
}
inline void SCSyncMoney::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCSyncMoney::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncMoney.type)
}

// int32 delta = 4;
inline void SCSyncMoney::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_delta() const {
  return delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::delta() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncMoney.delta)
  return _internal_delta();
}
inline void SCSyncMoney::_internal_set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
}
inline void SCSyncMoney::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncMoney.delta)
}

// int32 ticket = 5;
inline void SCSyncMoney::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncMoney.ticket)
  return _internal_ticket();
}
inline void SCSyncMoney::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCSyncMoney::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncMoney.ticket)
}

// int32 vip = 6;
inline void SCSyncMoney::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::vip() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncMoney.vip)
  return _internal_vip();
}
inline void SCSyncMoney::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void SCSyncMoney::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncMoney.vip)
}

// -------------------------------------------------------------------

// FishTrace

// int32 fish_uid = 1;
inline void FishTrace::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.fish_uid)
  return _internal_fish_uid();
}
inline void FishTrace::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void FishTrace::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.fish_uid)
}

// int32 fish_type = 2;
inline void FishTrace::clear_fish_type() {
  fish_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_fish_type() const {
  return fish_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::fish_type() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.fish_type)
  return _internal_fish_type();
}
inline void FishTrace::_internal_set_fish_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_type_ = value;
}
inline void FishTrace::set_fish_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_type(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.fish_type)
}

// int32 fish_layer = 3;
inline void FishTrace::clear_fish_layer() {
  fish_layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_fish_layer() const {
  return fish_layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::fish_layer() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.fish_layer)
  return _internal_fish_layer();
}
inline void FishTrace::_internal_set_fish_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_layer_ = value;
}
inline void FishTrace::set_fish_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_layer(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.fish_layer)
}

// int32 fish_stage = 4;
inline void FishTrace::clear_fish_stage() {
  fish_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_fish_stage() const {
  return fish_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::fish_stage() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.fish_stage)
  return _internal_fish_stage();
}
inline void FishTrace::_internal_set_fish_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_stage_ = value;
}
inline void FishTrace::set_fish_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.fish_stage)
}

// bool is_aced = 5;
inline void FishTrace::clear_is_aced() {
  is_aced_ = false;
}
inline bool FishTrace::_internal_is_aced() const {
  return is_aced_;
}
inline bool FishTrace::is_aced() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.is_aced)
  return _internal_is_aced();
}
inline void FishTrace::_internal_set_is_aced(bool value) {
  
  is_aced_ = value;
}
inline void FishTrace::set_is_aced(bool value) {
  _internal_set_is_aced(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.is_aced)
}

// int32 alive_time = 6;
inline void FishTrace::clear_alive_time() {
  alive_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_alive_time() const {
  return alive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::alive_time() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.alive_time)
  return _internal_alive_time();
}
inline void FishTrace::_internal_set_alive_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alive_time_ = value;
}
inline void FishTrace::set_alive_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alive_time(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.alive_time)
}

// repeated int32 beads_list = 7;
inline int FishTrace::_internal_beads_list_size() const {
  return beads_list_.size();
}
inline int FishTrace::beads_list_size() const {
  return _internal_beads_list_size();
}
inline void FishTrace::clear_beads_list() {
  beads_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_beads_list(int index) const {
  return beads_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::beads_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.beads_list)
  return _internal_beads_list(index);
}
inline void FishTrace::set_beads_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  beads_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.beads_list)
}
inline void FishTrace::_internal_add_beads_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  beads_list_.Add(value);
}
inline void FishTrace::add_beads_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_beads_list(value);
  // @@protoc_insertion_point(field_add:F4BY.FishTrace.beads_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FishTrace::_internal_beads_list() const {
  return beads_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FishTrace::beads_list() const {
  // @@protoc_insertion_point(field_list:F4BY.FishTrace.beads_list)
  return _internal_beads_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FishTrace::_internal_mutable_beads_list() {
  return &beads_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FishTrace::mutable_beads_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.FishTrace.beads_list)
  return _internal_mutable_beads_list();
}

// int32 fish_torpedoId = 8;
inline void FishTrace::clear_fish_torpedoid() {
  fish_torpedoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_fish_torpedoid() const {
  return fish_torpedoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::fish_torpedoid() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.fish_torpedoId)
  return _internal_fish_torpedoid();
}
inline void FishTrace::_internal_set_fish_torpedoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_torpedoid_ = value;
}
inline void FishTrace::set_fish_torpedoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_torpedoid(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.fish_torpedoId)
}

// int32 fish_road = 9;
inline void FishTrace::clear_fish_road() {
  fish_road_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::_internal_fish_road() const {
  return fish_road_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTrace::fish_road() const {
  // @@protoc_insertion_point(field_get:F4BY.FishTrace.fish_road)
  return _internal_fish_road();
}
inline void FishTrace::_internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_road_ = value;
}
inline void FishTrace::set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_road(value);
  // @@protoc_insertion_point(field_set:F4BY.FishTrace.fish_road)
}

// -------------------------------------------------------------------

// SCFishTracesList

// repeated .F4BY.FishTrace fish_traces = 1;
inline int SCFishTracesList::_internal_fish_traces_size() const {
  return fish_traces_.size();
}
inline int SCFishTracesList::fish_traces_size() const {
  return _internal_fish_traces_size();
}
inline void SCFishTracesList::clear_fish_traces() {
  fish_traces_.Clear();
}
inline ::F4BY::FishTrace* SCFishTracesList::mutable_fish_traces(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCFishTracesList.fish_traces)
  return fish_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >*
SCFishTracesList::mutable_fish_traces() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCFishTracesList.fish_traces)
  return &fish_traces_;
}
inline const ::F4BY::FishTrace& SCFishTracesList::_internal_fish_traces(int index) const {
  return fish_traces_.Get(index);
}
inline const ::F4BY::FishTrace& SCFishTracesList::fish_traces(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.fish_traces)
  return _internal_fish_traces(index);
}
inline ::F4BY::FishTrace* SCFishTracesList::_internal_add_fish_traces() {
  return fish_traces_.Add();
}
inline ::F4BY::FishTrace* SCFishTracesList::add_fish_traces() {
  // @@protoc_insertion_point(field_add:F4BY.SCFishTracesList.fish_traces)
  return _internal_add_fish_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >&
SCFishTracesList::fish_traces() const {
  // @@protoc_insertion_point(field_list:F4BY.SCFishTracesList.fish_traces)
  return fish_traces_;
}

// int32 fish_road = 2;
inline void SCFishTracesList::clear_fish_road() {
  fish_road_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::_internal_fish_road() const {
  return fish_road_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::fish_road() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.fish_road)
  return _internal_fish_road();
}
inline void SCFishTracesList::_internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_road_ = value;
}
inline void SCFishTracesList::set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_road(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.fish_road)
}

// int32 fish_array = 3;
inline void SCFishTracesList::clear_fish_array() {
  fish_array_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::_internal_fish_array() const {
  return fish_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::fish_array() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.fish_array)
  return _internal_fish_array();
}
inline void SCFishTracesList::_internal_set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_array_ = value;
}
inline void SCFishTracesList::set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_array(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.fish_array)
}

// int32 create_interval = 4;
inline void SCFishTracesList::clear_create_interval() {
  create_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::_internal_create_interval() const {
  return create_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::create_interval() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.create_interval)
  return _internal_create_interval();
}
inline void SCFishTracesList::_internal_set_create_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_interval_ = value;
}
inline void SCFishTracesList::set_create_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_interval(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.create_interval)
}

// bool is_called = 5;
inline void SCFishTracesList::clear_is_called() {
  is_called_ = false;
}
inline bool SCFishTracesList::_internal_is_called() const {
  return is_called_;
}
inline bool SCFishTracesList::is_called() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.is_called)
  return _internal_is_called();
}
inline void SCFishTracesList::_internal_set_is_called(bool value) {
  
  is_called_ = value;
}
inline void SCFishTracesList::set_is_called(bool value) {
  _internal_set_is_called(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.is_called)
}

// bool after_tide_first = 6;
inline void SCFishTracesList::clear_after_tide_first() {
  after_tide_first_ = false;
}
inline bool SCFishTracesList::_internal_after_tide_first() const {
  return after_tide_first_;
}
inline bool SCFishTracesList::after_tide_first() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.after_tide_first)
  return _internal_after_tide_first();
}
inline void SCFishTracesList::_internal_set_after_tide_first(bool value) {
  
  after_tide_first_ = value;
}
inline void SCFishTracesList::set_after_tide_first(bool value) {
  _internal_set_after_tide_first(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.after_tide_first)
}

// .F4BY.CallFishType call_type = 7;
inline void SCFishTracesList::clear_call_type() {
  call_type_ = 0;
}
inline ::F4BY::CallFishType SCFishTracesList::_internal_call_type() const {
  return static_cast< ::F4BY::CallFishType >(call_type_);
}
inline ::F4BY::CallFishType SCFishTracesList::call_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.call_type)
  return _internal_call_type();
}
inline void SCFishTracesList::_internal_set_call_type(::F4BY::CallFishType value) {
  
  call_type_ = value;
}
inline void SCFishTracesList::set_call_type(::F4BY::CallFishType value) {
  _internal_set_call_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.call_type)
}

// float move_delay = 8;
inline void SCFishTracesList::clear_move_delay() {
  move_delay_ = 0;
}
inline float SCFishTracesList::_internal_move_delay() const {
  return move_delay_;
}
inline float SCFishTracesList::move_delay() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.move_delay)
  return _internal_move_delay();
}
inline void SCFishTracesList::_internal_set_move_delay(float value) {
  
  move_delay_ = value;
}
inline void SCFishTracesList::set_move_delay(float value) {
  _internal_set_move_delay(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.move_delay)
}

// int32 road_idx = 9;
inline void SCFishTracesList::clear_road_idx() {
  road_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::_internal_road_idx() const {
  return road_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFishTracesList::road_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.road_idx)
  return _internal_road_idx();
}
inline void SCFishTracesList::_internal_set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  road_idx_ = value;
}
inline void SCFishTracesList::set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.road_idx)
}

// float move_t = 10;
inline void SCFishTracesList::clear_move_t() {
  move_t_ = 0;
}
inline float SCFishTracesList::_internal_move_t() const {
  return move_t_;
}
inline float SCFishTracesList::move_t() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFishTracesList.move_t)
  return _internal_move_t();
}
inline void SCFishTracesList::_internal_set_move_t(float value) {
  
  move_t_ = value;
}
inline void SCFishTracesList::set_move_t(float value) {
  _internal_set_move_t(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFishTracesList.move_t)
}

// -------------------------------------------------------------------

// CSSyncFishReq

// int32 chair_id = 1;
inline void CSSyncFishReq::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishReq::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishReq::chair_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishReq.chair_id)
  return _internal_chair_id();
}
inline void CSSyncFishReq::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CSSyncFishReq::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishReq.chair_id)
}

// -------------------------------------------------------------------

// SCSyncFishReq

// int32 req_player_id = 1;
inline void SCSyncFishReq::clear_req_player_id() {
  req_player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishReq::_internal_req_player_id() const {
  return req_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishReq::req_player_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishReq.req_player_id)
  return _internal_req_player_id();
}
inline void SCSyncFishReq::_internal_set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_player_id_ = value;
}
inline void SCSyncFishReq::set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_player_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishReq.req_player_id)
}

// -------------------------------------------------------------------

// CSSyncFishRsp

// repeated .F4BY.FishTrace fish_traces = 1;
inline int CSSyncFishRsp::_internal_fish_traces_size() const {
  return fish_traces_.size();
}
inline int CSSyncFishRsp::fish_traces_size() const {
  return _internal_fish_traces_size();
}
inline void CSSyncFishRsp::clear_fish_traces() {
  fish_traces_.Clear();
}
inline ::F4BY::FishTrace* CSSyncFishRsp::mutable_fish_traces(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.CSSyncFishRsp.fish_traces)
  return fish_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >*
CSSyncFishRsp::mutable_fish_traces() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSSyncFishRsp.fish_traces)
  return &fish_traces_;
}
inline const ::F4BY::FishTrace& CSSyncFishRsp::_internal_fish_traces(int index) const {
  return fish_traces_.Get(index);
}
inline const ::F4BY::FishTrace& CSSyncFishRsp::fish_traces(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.fish_traces)
  return _internal_fish_traces(index);
}
inline ::F4BY::FishTrace* CSSyncFishRsp::_internal_add_fish_traces() {
  return fish_traces_.Add();
}
inline ::F4BY::FishTrace* CSSyncFishRsp::add_fish_traces() {
  // @@protoc_insertion_point(field_add:F4BY.CSSyncFishRsp.fish_traces)
  return _internal_add_fish_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >&
CSSyncFishRsp::fish_traces() const {
  // @@protoc_insertion_point(field_list:F4BY.CSSyncFishRsp.fish_traces)
  return fish_traces_;
}

// int32 fish_road = 2;
inline void CSSyncFishRsp::clear_fish_road() {
  fish_road_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::_internal_fish_road() const {
  return fish_road_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::fish_road() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.fish_road)
  return _internal_fish_road();
}
inline void CSSyncFishRsp::_internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_road_ = value;
}
inline void CSSyncFishRsp::set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_road(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.fish_road)
}

// int32 fish_array = 3;
inline void CSSyncFishRsp::clear_fish_array() {
  fish_array_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::_internal_fish_array() const {
  return fish_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::fish_array() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.fish_array)
  return _internal_fish_array();
}
inline void CSSyncFishRsp::_internal_set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_array_ = value;
}
inline void CSSyncFishRsp::set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_array(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.fish_array)
}

// float move_delay = 4;
inline void CSSyncFishRsp::clear_move_delay() {
  move_delay_ = 0;
}
inline float CSSyncFishRsp::_internal_move_delay() const {
  return move_delay_;
}
inline float CSSyncFishRsp::move_delay() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.move_delay)
  return _internal_move_delay();
}
inline void CSSyncFishRsp::_internal_set_move_delay(float value) {
  
  move_delay_ = value;
}
inline void CSSyncFishRsp::set_move_delay(float value) {
  _internal_set_move_delay(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.move_delay)
}

// int32 road_idx = 5;
inline void CSSyncFishRsp::clear_road_idx() {
  road_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::_internal_road_idx() const {
  return road_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::road_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.road_idx)
  return _internal_road_idx();
}
inline void CSSyncFishRsp::_internal_set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  road_idx_ = value;
}
inline void CSSyncFishRsp::set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.road_idx)
}

// float move_t = 6;
inline void CSSyncFishRsp::clear_move_t() {
  move_t_ = 0;
}
inline float CSSyncFishRsp::_internal_move_t() const {
  return move_t_;
}
inline float CSSyncFishRsp::move_t() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.move_t)
  return _internal_move_t();
}
inline void CSSyncFishRsp::_internal_set_move_t(float value) {
  
  move_t_ = value;
}
inline void CSSyncFishRsp::set_move_t(float value) {
  _internal_set_move_t(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.move_t)
}

// bool finish = 7;
inline void CSSyncFishRsp::clear_finish() {
  finish_ = false;
}
inline bool CSSyncFishRsp::_internal_finish() const {
  return finish_;
}
inline bool CSSyncFishRsp::finish() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.finish)
  return _internal_finish();
}
inline void CSSyncFishRsp::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void CSSyncFishRsp::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.finish)
}

// int32 req_player_id = 8;
inline void CSSyncFishRsp::clear_req_player_id() {
  req_player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::_internal_req_player_id() const {
  return req_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishRsp::req_player_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncFishRsp.req_player_id)
  return _internal_req_player_id();
}
inline void CSSyncFishRsp::_internal_set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_player_id_ = value;
}
inline void CSSyncFishRsp::set_req_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_player_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncFishRsp.req_player_id)
}

// -------------------------------------------------------------------

// SCSyncFishRsp

// repeated .F4BY.FishTrace fish_traces = 1;
inline int SCSyncFishRsp::_internal_fish_traces_size() const {
  return fish_traces_.size();
}
inline int SCSyncFishRsp::fish_traces_size() const {
  return _internal_fish_traces_size();
}
inline void SCSyncFishRsp::clear_fish_traces() {
  fish_traces_.Clear();
}
inline ::F4BY::FishTrace* SCSyncFishRsp::mutable_fish_traces(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSyncFishRsp.fish_traces)
  return fish_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >*
SCSyncFishRsp::mutable_fish_traces() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCSyncFishRsp.fish_traces)
  return &fish_traces_;
}
inline const ::F4BY::FishTrace& SCSyncFishRsp::_internal_fish_traces(int index) const {
  return fish_traces_.Get(index);
}
inline const ::F4BY::FishTrace& SCSyncFishRsp::fish_traces(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.fish_traces)
  return _internal_fish_traces(index);
}
inline ::F4BY::FishTrace* SCSyncFishRsp::_internal_add_fish_traces() {
  return fish_traces_.Add();
}
inline ::F4BY::FishTrace* SCSyncFishRsp::add_fish_traces() {
  // @@protoc_insertion_point(field_add:F4BY.SCSyncFishRsp.fish_traces)
  return _internal_add_fish_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FishTrace >&
SCSyncFishRsp::fish_traces() const {
  // @@protoc_insertion_point(field_list:F4BY.SCSyncFishRsp.fish_traces)
  return fish_traces_;
}

// int32 fish_road = 2;
inline void SCSyncFishRsp::clear_fish_road() {
  fish_road_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishRsp::_internal_fish_road() const {
  return fish_road_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishRsp::fish_road() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.fish_road)
  return _internal_fish_road();
}
inline void SCSyncFishRsp::_internal_set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_road_ = value;
}
inline void SCSyncFishRsp::set_fish_road(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_road(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.fish_road)
}

// int32 fish_array = 3;
inline void SCSyncFishRsp::clear_fish_array() {
  fish_array_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishRsp::_internal_fish_array() const {
  return fish_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishRsp::fish_array() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.fish_array)
  return _internal_fish_array();
}
inline void SCSyncFishRsp::_internal_set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_array_ = value;
}
inline void SCSyncFishRsp::set_fish_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_array(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.fish_array)
}

// float move_delay = 4;
inline void SCSyncFishRsp::clear_move_delay() {
  move_delay_ = 0;
}
inline float SCSyncFishRsp::_internal_move_delay() const {
  return move_delay_;
}
inline float SCSyncFishRsp::move_delay() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.move_delay)
  return _internal_move_delay();
}
inline void SCSyncFishRsp::_internal_set_move_delay(float value) {
  
  move_delay_ = value;
}
inline void SCSyncFishRsp::set_move_delay(float value) {
  _internal_set_move_delay(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.move_delay)
}

// int32 road_idx = 5;
inline void SCSyncFishRsp::clear_road_idx() {
  road_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishRsp::_internal_road_idx() const {
  return road_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishRsp::road_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.road_idx)
  return _internal_road_idx();
}
inline void SCSyncFishRsp::_internal_set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  road_idx_ = value;
}
inline void SCSyncFishRsp::set_road_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.road_idx)
}

// float move_t = 6;
inline void SCSyncFishRsp::clear_move_t() {
  move_t_ = 0;
}
inline float SCSyncFishRsp::_internal_move_t() const {
  return move_t_;
}
inline float SCSyncFishRsp::move_t() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.move_t)
  return _internal_move_t();
}
inline void SCSyncFishRsp::_internal_set_move_t(float value) {
  
  move_t_ = value;
}
inline void SCSyncFishRsp::set_move_t(float value) {
  _internal_set_move_t(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.move_t)
}

// float create_interval = 7;
inline void SCSyncFishRsp::clear_create_interval() {
  create_interval_ = 0;
}
inline float SCSyncFishRsp::_internal_create_interval() const {
  return create_interval_;
}
inline float SCSyncFishRsp::create_interval() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.create_interval)
  return _internal_create_interval();
}
inline void SCSyncFishRsp::_internal_set_create_interval(float value) {
  
  create_interval_ = value;
}
inline void SCSyncFishRsp::set_create_interval(float value) {
  _internal_set_create_interval(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.create_interval)
}

// bool is_called = 8;
inline void SCSyncFishRsp::clear_is_called() {
  is_called_ = false;
}
inline bool SCSyncFishRsp::_internal_is_called() const {
  return is_called_;
}
inline bool SCSyncFishRsp::is_called() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.is_called)
  return _internal_is_called();
}
inline void SCSyncFishRsp::_internal_set_is_called(bool value) {
  
  is_called_ = value;
}
inline void SCSyncFishRsp::set_is_called(bool value) {
  _internal_set_is_called(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.is_called)
}

// .F4BY.CallFishType call_type = 9;
inline void SCSyncFishRsp::clear_call_type() {
  call_type_ = 0;
}
inline ::F4BY::CallFishType SCSyncFishRsp::_internal_call_type() const {
  return static_cast< ::F4BY::CallFishType >(call_type_);
}
inline ::F4BY::CallFishType SCSyncFishRsp::call_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncFishRsp.call_type)
  return _internal_call_type();
}
inline void SCSyncFishRsp::_internal_set_call_type(::F4BY::CallFishType value) {
  
  call_type_ = value;
}
inline void SCSyncFishRsp::set_call_type(::F4BY::CallFishType value) {
  _internal_set_call_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncFishRsp.call_type)
}

// -------------------------------------------------------------------

// SCChangeScene

// int32 scene_index = 1;
inline void SCChangeScene::clear_scene_index() {
  scene_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChangeScene::_internal_scene_index() const {
  return scene_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChangeScene::scene_index() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChangeScene.scene_index)
  return _internal_scene_index();
}
inline void SCChangeScene::_internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_index_ = value;
}
inline void SCChangeScene::set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_index(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChangeScene.scene_index)
}

// -------------------------------------------------------------------

// CSFishOutsideScreen

// int32 fish_uid = 1;
inline void CSFishOutsideScreen::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFishOutsideScreen::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFishOutsideScreen::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSFishOutsideScreen.fish_uid)
  return _internal_fish_uid();
}
inline void CSFishOutsideScreen::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void CSFishOutsideScreen::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSFishOutsideScreen.fish_uid)
}

// -------------------------------------------------------------------

// CSLockFish

// int32 fish_uid = 1;
inline void CSLockFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLockFish.fish_uid)
  return _internal_fish_uid();
}
inline void CSLockFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void CSLockFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLockFish.fish_uid)
}

// bool is_open = 2;
inline void CSLockFish::clear_is_open() {
  is_open_ = false;
}
inline bool CSLockFish::_internal_is_open() const {
  return is_open_;
}
inline bool CSLockFish::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLockFish.is_open)
  return _internal_is_open();
}
inline void CSLockFish::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void CSLockFish::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLockFish.is_open)
}

// int32 chair_idx = 3;
inline void CSLockFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLockFish.chair_idx)
  return _internal_chair_idx();
}
inline void CSLockFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSLockFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLockFish.chair_idx)
}

// -------------------------------------------------------------------

// SCLockFish

// int32 chair_idx = 1;
inline void SCLockFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLockFish.chair_idx)
  return _internal_chair_idx();
}
inline void SCLockFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCLockFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLockFish.chair_idx)
}

// int32 fish_uid = 2;
inline void SCLockFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLockFish.fish_uid)
  return _internal_fish_uid();
}
inline void SCLockFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCLockFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLockFish.fish_uid)
}

// bool is_open = 3;
inline void SCLockFish::clear_is_open() {
  is_open_ = false;
}
inline bool SCLockFish::_internal_is_open() const {
  return is_open_;
}
inline bool SCLockFish::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLockFish.is_open)
  return _internal_is_open();
}
inline void SCLockFish::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void SCLockFish::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLockFish.is_open)
}

// -------------------------------------------------------------------

// CSCrazySkill

// bool is_open = 1;
inline void CSCrazySkill::clear_is_open() {
  is_open_ = false;
}
inline bool CSCrazySkill::_internal_is_open() const {
  return is_open_;
}
inline bool CSCrazySkill::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.CSCrazySkill.is_open)
  return _internal_is_open();
}
inline void CSCrazySkill::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void CSCrazySkill::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.CSCrazySkill.is_open)
}

// -------------------------------------------------------------------

// SCCrazySkill

// int32 chair_idx = 1;
inline void SCCrazySkill::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCrazySkill::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCrazySkill::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCrazySkill.chair_idx)
  return _internal_chair_idx();
}
inline void SCCrazySkill::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCCrazySkill::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCrazySkill.chair_idx)
}

// bool is_open = 2;
inline void SCCrazySkill::clear_is_open() {
  is_open_ = false;
}
inline bool SCCrazySkill::_internal_is_open() const {
  return is_open_;
}
inline bool SCCrazySkill::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCrazySkill.is_open)
  return _internal_is_open();
}
inline void SCCrazySkill::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void SCCrazySkill::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCrazySkill.is_open)
}

// -------------------------------------------------------------------

// CSTrebleSkill

// bool is_open = 1;
inline void CSTrebleSkill::clear_is_open() {
  is_open_ = false;
}
inline bool CSTrebleSkill::_internal_is_open() const {
  return is_open_;
}
inline bool CSTrebleSkill::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.CSTrebleSkill.is_open)
  return _internal_is_open();
}
inline void CSTrebleSkill::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void CSTrebleSkill::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.CSTrebleSkill.is_open)
}

// -------------------------------------------------------------------

// SCTrebleSkill

// int32 chair_idx = 1;
inline void SCTrebleSkill::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTrebleSkill::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTrebleSkill::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTrebleSkill.chair_idx)
  return _internal_chair_idx();
}
inline void SCTrebleSkill::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTrebleSkill::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTrebleSkill.chair_idx)
}

// bool is_open = 2;
inline void SCTrebleSkill::clear_is_open() {
  is_open_ = false;
}
inline bool SCTrebleSkill::_internal_is_open() const {
  return is_open_;
}
inline bool SCTrebleSkill::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTrebleSkill.is_open)
  return _internal_is_open();
}
inline void SCTrebleSkill::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void SCTrebleSkill::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTrebleSkill.is_open)
}

// -------------------------------------------------------------------

// CSUserRunBackground

// bool background = 1;
inline void CSUserRunBackground::clear_background() {
  background_ = false;
}
inline bool CSUserRunBackground::_internal_background() const {
  return background_;
}
inline bool CSUserRunBackground::background() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserRunBackground.background)
  return _internal_background();
}
inline void CSUserRunBackground::_internal_set_background(bool value) {
  
  background_ = value;
}
inline void CSUserRunBackground::set_background(bool value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserRunBackground.background)
}

// -------------------------------------------------------------------

// SCUserRunBackground

// int32 chair_idx = 1;
inline void SCUserRunBackground::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserRunBackground::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserRunBackground::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserRunBackground.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserRunBackground::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserRunBackground::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserRunBackground.chair_idx)
}

// bool background = 2;
inline void SCUserRunBackground::clear_background() {
  background_ = false;
}
inline bool SCUserRunBackground::_internal_background() const {
  return background_;
}
inline bool SCUserRunBackground::background() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserRunBackground.background)
  return _internal_background();
}
inline void SCUserRunBackground::_internal_set_background(bool value) {
  
  background_ = value;
}
inline void SCUserRunBackground::set_background(bool value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserRunBackground.background)
}

// -------------------------------------------------------------------

// CSHeartBeat

// -------------------------------------------------------------------

// SCHeartBeat

// -------------------------------------------------------------------

// GunSpecEffect

// int32 ratioLimit = 1;
inline void GunSpecEffect::clear_ratiolimit() {
  ratiolimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunSpecEffect::_internal_ratiolimit() const {
  return ratiolimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunSpecEffect::ratiolimit() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.ratioLimit)
  return _internal_ratiolimit();
}
inline void GunSpecEffect::_internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiolimit_ = value;
}
inline void GunSpecEffect::set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiolimit(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.ratioLimit)
}

// float hitChangeRate = 2;
inline void GunSpecEffect::clear_hitchangerate() {
  hitchangerate_ = 0;
}
inline float GunSpecEffect::_internal_hitchangerate() const {
  return hitchangerate_;
}
inline float GunSpecEffect::hitchangerate() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.hitChangeRate)
  return _internal_hitchangerate();
}
inline void GunSpecEffect::_internal_set_hitchangerate(float value) {
  
  hitchangerate_ = value;
}
inline void GunSpecEffect::set_hitchangerate(float value) {
  _internal_set_hitchangerate(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.hitChangeRate)
}

// float moneyChangeRate = 3;
inline void GunSpecEffect::clear_moneychangerate() {
  moneychangerate_ = 0;
}
inline float GunSpecEffect::_internal_moneychangerate() const {
  return moneychangerate_;
}
inline float GunSpecEffect::moneychangerate() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.moneyChangeRate)
  return _internal_moneychangerate();
}
inline void GunSpecEffect::_internal_set_moneychangerate(float value) {
  
  moneychangerate_ = value;
}
inline void GunSpecEffect::set_moneychangerate(float value) {
  _internal_set_moneychangerate(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.moneyChangeRate)
}

// float violenceRate = 4;
inline void GunSpecEffect::clear_violencerate() {
  violencerate_ = 0;
}
inline float GunSpecEffect::_internal_violencerate() const {
  return violencerate_;
}
inline float GunSpecEffect::violencerate() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.violenceRate)
  return _internal_violencerate();
}
inline void GunSpecEffect::_internal_set_violencerate(float value) {
  
  violencerate_ = value;
}
inline void GunSpecEffect::set_violencerate(float value) {
  _internal_set_violencerate(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.violenceRate)
}

// float speedRate = 5;
inline void GunSpecEffect::clear_speedrate() {
  speedrate_ = 0;
}
inline float GunSpecEffect::_internal_speedrate() const {
  return speedrate_;
}
inline float GunSpecEffect::speedrate() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.speedRate)
  return _internal_speedrate();
}
inline void GunSpecEffect::_internal_set_speedrate(float value) {
  
  speedrate_ = value;
}
inline void GunSpecEffect::set_speedrate(float value) {
  _internal_set_speedrate(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.speedRate)
}

// bool advanced = 6;
inline void GunSpecEffect::clear_advanced() {
  advanced_ = false;
}
inline bool GunSpecEffect::_internal_advanced() const {
  return advanced_;
}
inline bool GunSpecEffect::advanced() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.advanced)
  return _internal_advanced();
}
inline void GunSpecEffect::_internal_set_advanced(bool value) {
  
  advanced_ = value;
}
inline void GunSpecEffect::set_advanced(bool value) {
  _internal_set_advanced(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.advanced)
}

// bool double_tag = 7;
inline void GunSpecEffect::clear_double_tag() {
  double_tag_ = false;
}
inline bool GunSpecEffect::_internal_double_tag() const {
  return double_tag_;
}
inline bool GunSpecEffect::double_tag() const {
  // @@protoc_insertion_point(field_get:F4BY.GunSpecEffect.double_tag)
  return _internal_double_tag();
}
inline void GunSpecEffect::_internal_set_double_tag(bool value) {
  
  double_tag_ = value;
}
inline void GunSpecEffect::set_double_tag(bool value) {
  _internal_set_double_tag(value);
  // @@protoc_insertion_point(field_set:F4BY.GunSpecEffect.double_tag)
}

// -------------------------------------------------------------------

// WingsSpecEffect

// float speedRate = 1;
inline void WingsSpecEffect::clear_speedrate() {
  speedrate_ = 0;
}
inline float WingsSpecEffect::_internal_speedrate() const {
  return speedrate_;
}
inline float WingsSpecEffect::speedrate() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsSpecEffect.speedRate)
  return _internal_speedrate();
}
inline void WingsSpecEffect::_internal_set_speedrate(float value) {
  
  speedrate_ = value;
}
inline void WingsSpecEffect::set_speedrate(float value) {
  _internal_set_speedrate(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsSpecEffect.speedRate)
}

// int32 ratioLimit = 2;
inline void WingsSpecEffect::clear_ratiolimit() {
  ratiolimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::_internal_ratiolimit() const {
  return ratiolimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::ratiolimit() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsSpecEffect.ratioLimit)
  return _internal_ratiolimit();
}
inline void WingsSpecEffect::_internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiolimit_ = value;
}
inline void WingsSpecEffect::set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiolimit(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsSpecEffect.ratioLimit)
}

// float hitChangeRate = 3;
inline void WingsSpecEffect::clear_hitchangerate() {
  hitchangerate_ = 0;
}
inline float WingsSpecEffect::_internal_hitchangerate() const {
  return hitchangerate_;
}
inline float WingsSpecEffect::hitchangerate() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsSpecEffect.hitChangeRate)
  return _internal_hitchangerate();
}
inline void WingsSpecEffect::_internal_set_hitchangerate(float value) {
  
  hitchangerate_ = value;
}
inline void WingsSpecEffect::set_hitchangerate(float value) {
  _internal_set_hitchangerate(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsSpecEffect.hitChangeRate)
}

// float moneyChangeRate = 4;
inline void WingsSpecEffect::clear_moneychangerate() {
  moneychangerate_ = 0;
}
inline float WingsSpecEffect::_internal_moneychangerate() const {
  return moneychangerate_;
}
inline float WingsSpecEffect::moneychangerate() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsSpecEffect.moneyChangeRate)
  return _internal_moneychangerate();
}
inline void WingsSpecEffect::_internal_set_moneychangerate(float value) {
  
  moneychangerate_ = value;
}
inline void WingsSpecEffect::set_moneychangerate(float value) {
  _internal_set_moneychangerate(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsSpecEffect.moneyChangeRate)
}

// bool advanced = 5;
inline void WingsSpecEffect::clear_advanced() {
  advanced_ = false;
}
inline bool WingsSpecEffect::_internal_advanced() const {
  return advanced_;
}
inline bool WingsSpecEffect::advanced() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsSpecEffect.advanced)
  return _internal_advanced();
}
inline void WingsSpecEffect::_internal_set_advanced(bool value) {
  
  advanced_ = value;
}
inline void WingsSpecEffect::set_advanced(bool value) {
  _internal_set_advanced(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsSpecEffect.advanced)
}

// bool double_tag = 6;
inline void WingsSpecEffect::clear_double_tag() {
  double_tag_ = false;
}
inline bool WingsSpecEffect::_internal_double_tag() const {
  return double_tag_;
}
inline bool WingsSpecEffect::double_tag() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsSpecEffect.double_tag)
  return _internal_double_tag();
}
inline void WingsSpecEffect::_internal_set_double_tag(bool value) {
  
  double_tag_ = value;
}
inline void WingsSpecEffect::set_double_tag(bool value) {
  _internal_set_double_tag(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsSpecEffect.double_tag)
}

// -------------------------------------------------------------------

// WingsInfo

// int32 wings_id = 1;
inline void WingsInfo::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::wings_id() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.wings_id)
  return _internal_wings_id();
}
inline void WingsInfo::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void WingsInfo::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.wings_id)
}

// bool enable = 2;
inline void WingsInfo::clear_enable() {
  enable_ = false;
}
inline bool WingsInfo::_internal_enable() const {
  return enable_;
}
inline bool WingsInfo::enable() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.enable)
  return _internal_enable();
}
inline void WingsInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void WingsInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.enable)
}

// .F4BY.WingsSpecEffect wings_spec_effect = 3;
inline bool WingsInfo::_internal_has_wings_spec_effect() const {
  return this != internal_default_instance() && wings_spec_effect_ != nullptr;
}
inline bool WingsInfo::has_wings_spec_effect() const {
  return _internal_has_wings_spec_effect();
}
inline void WingsInfo::clear_wings_spec_effect() {
  if (GetArena() == nullptr && wings_spec_effect_ != nullptr) {
    delete wings_spec_effect_;
  }
  wings_spec_effect_ = nullptr;
}
inline const ::F4BY::WingsSpecEffect& WingsInfo::_internal_wings_spec_effect() const {
  const ::F4BY::WingsSpecEffect* p = wings_spec_effect_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::WingsSpecEffect&>(
      ::F4BY::_WingsSpecEffect_default_instance_);
}
inline const ::F4BY::WingsSpecEffect& WingsInfo::wings_spec_effect() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.wings_spec_effect)
  return _internal_wings_spec_effect();
}
inline void WingsInfo::unsafe_arena_set_allocated_wings_spec_effect(
    ::F4BY::WingsSpecEffect* wings_spec_effect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wings_spec_effect_);
  }
  wings_spec_effect_ = wings_spec_effect;
  if (wings_spec_effect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.WingsInfo.wings_spec_effect)
}
inline ::F4BY::WingsSpecEffect* WingsInfo::release_wings_spec_effect() {
  
  ::F4BY::WingsSpecEffect* temp = wings_spec_effect_;
  wings_spec_effect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::WingsSpecEffect* WingsInfo::unsafe_arena_release_wings_spec_effect() {
  // @@protoc_insertion_point(field_release:F4BY.WingsInfo.wings_spec_effect)
  
  ::F4BY::WingsSpecEffect* temp = wings_spec_effect_;
  wings_spec_effect_ = nullptr;
  return temp;
}
inline ::F4BY::WingsSpecEffect* WingsInfo::_internal_mutable_wings_spec_effect() {
  
  if (wings_spec_effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::WingsSpecEffect>(GetArena());
    wings_spec_effect_ = p;
  }
  return wings_spec_effect_;
}
inline ::F4BY::WingsSpecEffect* WingsInfo::mutable_wings_spec_effect() {
  // @@protoc_insertion_point(field_mutable:F4BY.WingsInfo.wings_spec_effect)
  return _internal_mutable_wings_spec_effect();
}
inline void WingsInfo::set_allocated_wings_spec_effect(::F4BY::WingsSpecEffect* wings_spec_effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wings_spec_effect_;
  }
  if (wings_spec_effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wings_spec_effect);
    if (message_arena != submessage_arena) {
      wings_spec_effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wings_spec_effect, submessage_arena);
    }
    
  } else {
    
  }
  wings_spec_effect_ = wings_spec_effect;
  // @@protoc_insertion_point(field_set_allocated:F4BY.WingsInfo.wings_spec_effect)
}

// int32 receive_type = 4;
inline void WingsInfo::clear_receive_type() {
  receive_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_receive_type() const {
  return receive_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::receive_type() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.receive_type)
  return _internal_receive_type();
}
inline void WingsInfo::_internal_set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_type_ = value;
}
inline void WingsInfo::set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_type(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.receive_type)
}

// int32 activity_id = 5;
inline void WingsInfo::clear_activity_id() {
  activity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_activity_id() const {
  return activity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.activity_id)
  return _internal_activity_id();
}
inline void WingsInfo::_internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activity_id_ = value;
}
inline void WingsInfo::set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activity_id(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.activity_id)
}

// int32 price = 6;
inline void WingsInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::price() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.price)
  return _internal_price();
}
inline void WingsInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void WingsInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.price)
}

// bool new_enable = 7;
inline void WingsInfo::clear_new_enable() {
  new_enable_ = false;
}
inline bool WingsInfo::_internal_new_enable() const {
  return new_enable_;
}
inline bool WingsInfo::new_enable() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.new_enable)
  return _internal_new_enable();
}
inline void WingsInfo::_internal_set_new_enable(bool value) {
  
  new_enable_ = value;
}
inline void WingsInfo::set_new_enable(bool value) {
  _internal_set_new_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.new_enable)
}

// bool double_tag = 8;
inline void WingsInfo::clear_double_tag() {
  double_tag_ = false;
}
inline bool WingsInfo::_internal_double_tag() const {
  return double_tag_;
}
inline bool WingsInfo::double_tag() const {
  // @@protoc_insertion_point(field_get:F4BY.WingsInfo.double_tag)
  return _internal_double_tag();
}
inline void WingsInfo::_internal_set_double_tag(bool value) {
  
  double_tag_ = value;
}
inline void WingsInfo::set_double_tag(bool value) {
  _internal_set_double_tag(value);
  // @@protoc_insertion_point(field_set:F4BY.WingsInfo.double_tag)
}

// -------------------------------------------------------------------

// GunInfo

// int32 gun_level = 1;
inline void GunInfo::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.gun_level)
  return _internal_gun_level();
}
inline void GunInfo::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void GunInfo::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.gun_level)
}

// int32 ratio_min = 2;
inline void GunInfo::clear_ratio_min() {
  ratio_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_ratio_min() const {
  return ratio_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::ratio_min() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.ratio_min)
  return _internal_ratio_min();
}
inline void GunInfo::_internal_set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_min_ = value;
}
inline void GunInfo::set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio_min(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.ratio_min)
}

// int32 ratio_max = 3;
inline void GunInfo::clear_ratio_max() {
  ratio_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_ratio_max() const {
  return ratio_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::ratio_max() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.ratio_max)
  return _internal_ratio_max();
}
inline void GunInfo::_internal_set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_max_ = value;
}
inline void GunInfo::set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio_max(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.ratio_max)
}

// bool enable = 4;
inline void GunInfo::clear_enable() {
  enable_ = false;
}
inline bool GunInfo::_internal_enable() const {
  return enable_;
}
inline bool GunInfo::enable() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.enable)
  return _internal_enable();
}
inline void GunInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void GunInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.enable)
}

// bool new_enable = 5;
inline void GunInfo::clear_new_enable() {
  new_enable_ = false;
}
inline bool GunInfo::_internal_new_enable() const {
  return new_enable_;
}
inline bool GunInfo::new_enable() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.new_enable)
  return _internal_new_enable();
}
inline void GunInfo::_internal_set_new_enable(bool value) {
  
  new_enable_ = value;
}
inline void GunInfo::set_new_enable(bool value) {
  _internal_set_new_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.new_enable)
}

// bool is_vip = 6;
inline void GunInfo::clear_is_vip() {
  is_vip_ = false;
}
inline bool GunInfo::_internal_is_vip() const {
  return is_vip_;
}
inline bool GunInfo::is_vip() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.is_vip)
  return _internal_is_vip();
}
inline void GunInfo::_internal_set_is_vip(bool value) {
  
  is_vip_ = value;
}
inline void GunInfo::set_is_vip(bool value) {
  _internal_set_is_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.is_vip)
}

// int32 vip_limit = 7;
inline void GunInfo::clear_vip_limit() {
  vip_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_vip_limit() const {
  return vip_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::vip_limit() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.vip_limit)
  return _internal_vip_limit();
}
inline void GunInfo::_internal_set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_limit_ = value;
}
inline void GunInfo::set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_limit(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.vip_limit)
}

// bool is_member = 8;
inline void GunInfo::clear_is_member() {
  is_member_ = false;
}
inline bool GunInfo::_internal_is_member() const {
  return is_member_;
}
inline bool GunInfo::is_member() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.is_member)
  return _internal_is_member();
}
inline void GunInfo::_internal_set_is_member(bool value) {
  
  is_member_ = value;
}
inline void GunInfo::set_is_member(bool value) {
  _internal_set_is_member(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.is_member)
}

// int32 member_sec = 9;
inline void GunInfo::clear_member_sec() {
  member_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_member_sec() const {
  return member_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::member_sec() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.member_sec)
  return _internal_member_sec();
}
inline void GunInfo::_internal_set_member_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  member_sec_ = value;
}
inline void GunInfo::set_member_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_member_sec(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.member_sec)
}

// int32 extra_data = 10;
inline void GunInfo::clear_extra_data() {
  extra_data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_extra_data() const {
  return extra_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::extra_data() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.extra_data)
  return _internal_extra_data();
}
inline void GunInfo::_internal_set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_data_ = value;
}
inline void GunInfo::set_extra_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_data(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.extra_data)
}

// .F4BY.GunSpecEffect gunSpecEffect = 11;
inline bool GunInfo::_internal_has_gunspeceffect() const {
  return this != internal_default_instance() && gunspeceffect_ != nullptr;
}
inline bool GunInfo::has_gunspeceffect() const {
  return _internal_has_gunspeceffect();
}
inline void GunInfo::clear_gunspeceffect() {
  if (GetArena() == nullptr && gunspeceffect_ != nullptr) {
    delete gunspeceffect_;
  }
  gunspeceffect_ = nullptr;
}
inline const ::F4BY::GunSpecEffect& GunInfo::_internal_gunspeceffect() const {
  const ::F4BY::GunSpecEffect* p = gunspeceffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::GunSpecEffect&>(
      ::F4BY::_GunSpecEffect_default_instance_);
}
inline const ::F4BY::GunSpecEffect& GunInfo::gunspeceffect() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.gunSpecEffect)
  return _internal_gunspeceffect();
}
inline void GunInfo::unsafe_arena_set_allocated_gunspeceffect(
    ::F4BY::GunSpecEffect* gunspeceffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gunspeceffect_);
  }
  gunspeceffect_ = gunspeceffect;
  if (gunspeceffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.GunInfo.gunSpecEffect)
}
inline ::F4BY::GunSpecEffect* GunInfo::release_gunspeceffect() {
  
  ::F4BY::GunSpecEffect* temp = gunspeceffect_;
  gunspeceffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::GunSpecEffect* GunInfo::unsafe_arena_release_gunspeceffect() {
  // @@protoc_insertion_point(field_release:F4BY.GunInfo.gunSpecEffect)
  
  ::F4BY::GunSpecEffect* temp = gunspeceffect_;
  gunspeceffect_ = nullptr;
  return temp;
}
inline ::F4BY::GunSpecEffect* GunInfo::_internal_mutable_gunspeceffect() {
  
  if (gunspeceffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::GunSpecEffect>(GetArena());
    gunspeceffect_ = p;
  }
  return gunspeceffect_;
}
inline ::F4BY::GunSpecEffect* GunInfo::mutable_gunspeceffect() {
  // @@protoc_insertion_point(field_mutable:F4BY.GunInfo.gunSpecEffect)
  return _internal_mutable_gunspeceffect();
}
inline void GunInfo::set_allocated_gunspeceffect(::F4BY::GunSpecEffect* gunspeceffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gunspeceffect_;
  }
  if (gunspeceffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gunspeceffect);
    if (message_arena != submessage_arena) {
      gunspeceffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gunspeceffect, submessage_arena);
    }
    
  } else {
    
  }
  gunspeceffect_ = gunspeceffect;
  // @@protoc_insertion_point(field_set_allocated:F4BY.GunInfo.gunSpecEffect)
}

// int32 price = 12;
inline void GunInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::price() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.price)
  return _internal_price();
}
inline void GunInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void GunInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.price)
}

// float attack_speed = 13;
inline void GunInfo::clear_attack_speed() {
  attack_speed_ = 0;
}
inline float GunInfo::_internal_attack_speed() const {
  return attack_speed_;
}
inline float GunInfo::attack_speed() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.attack_speed)
  return _internal_attack_speed();
}
inline void GunInfo::_internal_set_attack_speed(float value) {
  
  attack_speed_ = value;
}
inline void GunInfo::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.attack_speed)
}

// float rage = 14;
inline void GunInfo::clear_rage() {
  rage_ = 0;
}
inline float GunInfo::_internal_rage() const {
  return rage_;
}
inline float GunInfo::rage() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.rage)
  return _internal_rage();
}
inline void GunInfo::_internal_set_rage(float value) {
  
  rage_ = value;
}
inline void GunInfo::set_rage(float value) {
  _internal_set_rage(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.rage)
}

// int32 activity_id = 15;
inline void GunInfo::clear_activity_id() {
  activity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_activity_id() const {
  return activity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.activity_id)
  return _internal_activity_id();
}
inline void GunInfo::_internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activity_id_ = value;
}
inline void GunInfo::set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activity_id(value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.activity_id)
}

// repeated int32 ratio_list = 16;
inline int GunInfo::_internal_ratio_list_size() const {
  return ratio_list_.size();
}
inline int GunInfo::ratio_list_size() const {
  return _internal_ratio_list_size();
}
inline void GunInfo::clear_ratio_list() {
  ratio_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::_internal_ratio_list(int index) const {
  return ratio_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfo::ratio_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.GunInfo.ratio_list)
  return _internal_ratio_list(index);
}
inline void GunInfo::set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.GunInfo.ratio_list)
}
inline void GunInfo::_internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Add(value);
}
inline void GunInfo::add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratio_list(value);
  // @@protoc_insertion_point(field_add:F4BY.GunInfo.ratio_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GunInfo::_internal_ratio_list() const {
  return ratio_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GunInfo::ratio_list() const {
  // @@protoc_insertion_point(field_list:F4BY.GunInfo.ratio_list)
  return _internal_ratio_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GunInfo::_internal_mutable_ratio_list() {
  return &ratio_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GunInfo::mutable_ratio_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.GunInfo.ratio_list)
  return _internal_mutable_ratio_list();
}

// -------------------------------------------------------------------

// VipInfo

// int32 old_vip = 1;
inline void VipInfo::clear_old_vip() {
  old_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VipInfo::_internal_old_vip() const {
  return old_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VipInfo::old_vip() const {
  // @@protoc_insertion_point(field_get:F4BY.VipInfo.old_vip)
  return _internal_old_vip();
}
inline void VipInfo::_internal_set_old_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  old_vip_ = value;
}
inline void VipInfo::set_old_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_old_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.VipInfo.old_vip)
}

// int32 cur_vip = 2;
inline void VipInfo::clear_cur_vip() {
  cur_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VipInfo::_internal_cur_vip() const {
  return cur_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VipInfo::cur_vip() const {
  // @@protoc_insertion_point(field_get:F4BY.VipInfo.cur_vip)
  return _internal_cur_vip();
}
inline void VipInfo::_internal_set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_vip_ = value;
}
inline void VipInfo::set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.VipInfo.cur_vip)
}

// -------------------------------------------------------------------

// PropInfo

// bool enable = 1;
inline void PropInfo::clear_enable() {
  enable_ = false;
}
inline bool PropInfo::_internal_enable() const {
  return enable_;
}
inline bool PropInfo::enable() const {
  // @@protoc_insertion_point(field_get:F4BY.PropInfo.enable)
  return _internal_enable();
}
inline void PropInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void PropInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.PropInfo.enable)
}

// .F4BY.Object prop = 2;
inline bool PropInfo::_internal_has_prop() const {
  return this != internal_default_instance() && prop_ != nullptr;
}
inline bool PropInfo::has_prop() const {
  return _internal_has_prop();
}
inline void PropInfo::clear_prop() {
  if (GetArena() == nullptr && prop_ != nullptr) {
    delete prop_;
  }
  prop_ = nullptr;
}
inline const ::F4BY::Object& PropInfo::_internal_prop() const {
  const ::F4BY::Object* p = prop_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object&>(
      ::F4BY::_Object_default_instance_);
}
inline const ::F4BY::Object& PropInfo::prop() const {
  // @@protoc_insertion_point(field_get:F4BY.PropInfo.prop)
  return _internal_prop();
}
inline void PropInfo::unsafe_arena_set_allocated_prop(
    ::F4BY::Object* prop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prop_);
  }
  prop_ = prop;
  if (prop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.PropInfo.prop)
}
inline ::F4BY::Object* PropInfo::release_prop() {
  
  ::F4BY::Object* temp = prop_;
  prop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object* PropInfo::unsafe_arena_release_prop() {
  // @@protoc_insertion_point(field_release:F4BY.PropInfo.prop)
  
  ::F4BY::Object* temp = prop_;
  prop_ = nullptr;
  return temp;
}
inline ::F4BY::Object* PropInfo::_internal_mutable_prop() {
  
  if (prop_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object>(GetArena());
    prop_ = p;
  }
  return prop_;
}
inline ::F4BY::Object* PropInfo::mutable_prop() {
  // @@protoc_insertion_point(field_mutable:F4BY.PropInfo.prop)
  return _internal_mutable_prop();
}
inline void PropInfo::set_allocated_prop(::F4BY::Object* prop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prop_;
  }
  if (prop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prop);
    if (message_arena != submessage_arena) {
      prop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prop, submessage_arena);
    }
    
  } else {
    
  }
  prop_ = prop;
  // @@protoc_insertion_point(field_set_allocated:F4BY.PropInfo.prop)
}

// -------------------------------------------------------------------

// CSUserInfoNotify

// bool broadcast = 1;
inline void CSUserInfoNotify::clear_broadcast() {
  broadcast_ = false;
}
inline bool CSUserInfoNotify::_internal_broadcast() const {
  return broadcast_;
}
inline bool CSUserInfoNotify::broadcast() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserInfoNotify.broadcast)
  return _internal_broadcast();
}
inline void CSUserInfoNotify::_internal_set_broadcast(bool value) {
  
  broadcast_ = value;
}
inline void CSUserInfoNotify::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserInfoNotify.broadcast)
}

// -------------------------------------------------------------------

// SCUserInfoNotify

// int32 chair_idx = 1;
inline void SCUserInfoNotify::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserInfoNotify::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserInfoNotify::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserInfoNotify.chair_idx)
}

// repeated .F4BY.GunInfo gun_info = 2;
inline int SCUserInfoNotify::_internal_gun_info_size() const {
  return gun_info_.size();
}
inline int SCUserInfoNotify::gun_info_size() const {
  return _internal_gun_info_size();
}
inline void SCUserInfoNotify::clear_gun_info() {
  gun_info_.Clear();
}
inline ::F4BY::GunInfo* SCUserInfoNotify::mutable_gun_info(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserInfoNotify.gun_info)
  return gun_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >*
SCUserInfoNotify::mutable_gun_info() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCUserInfoNotify.gun_info)
  return &gun_info_;
}
inline const ::F4BY::GunInfo& SCUserInfoNotify::_internal_gun_info(int index) const {
  return gun_info_.Get(index);
}
inline const ::F4BY::GunInfo& SCUserInfoNotify::gun_info(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.gun_info)
  return _internal_gun_info(index);
}
inline ::F4BY::GunInfo* SCUserInfoNotify::_internal_add_gun_info() {
  return gun_info_.Add();
}
inline ::F4BY::GunInfo* SCUserInfoNotify::add_gun_info() {
  // @@protoc_insertion_point(field_add:F4BY.SCUserInfoNotify.gun_info)
  return _internal_add_gun_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::GunInfo >&
SCUserInfoNotify::gun_info() const {
  // @@protoc_insertion_point(field_list:F4BY.SCUserInfoNotify.gun_info)
  return gun_info_;
}

// repeated .F4BY.WingsInfo wings_info = 3;
inline int SCUserInfoNotify::_internal_wings_info_size() const {
  return wings_info_.size();
}
inline int SCUserInfoNotify::wings_info_size() const {
  return _internal_wings_info_size();
}
inline void SCUserInfoNotify::clear_wings_info() {
  wings_info_.Clear();
}
inline ::F4BY::WingsInfo* SCUserInfoNotify::mutable_wings_info(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserInfoNotify.wings_info)
  return wings_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::WingsInfo >*
SCUserInfoNotify::mutable_wings_info() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCUserInfoNotify.wings_info)
  return &wings_info_;
}
inline const ::F4BY::WingsInfo& SCUserInfoNotify::_internal_wings_info(int index) const {
  return wings_info_.Get(index);
}
inline const ::F4BY::WingsInfo& SCUserInfoNotify::wings_info(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.wings_info)
  return _internal_wings_info(index);
}
inline ::F4BY::WingsInfo* SCUserInfoNotify::_internal_add_wings_info() {
  return wings_info_.Add();
}
inline ::F4BY::WingsInfo* SCUserInfoNotify::add_wings_info() {
  // @@protoc_insertion_point(field_add:F4BY.SCUserInfoNotify.wings_info)
  return _internal_add_wings_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::WingsInfo >&
SCUserInfoNotify::wings_info() const {
  // @@protoc_insertion_point(field_list:F4BY.SCUserInfoNotify.wings_info)
  return wings_info_;
}

// .F4BY.VipInfo vip_info = 4;
inline bool SCUserInfoNotify::_internal_has_vip_info() const {
  return this != internal_default_instance() && vip_info_ != nullptr;
}
inline bool SCUserInfoNotify::has_vip_info() const {
  return _internal_has_vip_info();
}
inline void SCUserInfoNotify::clear_vip_info() {
  if (GetArena() == nullptr && vip_info_ != nullptr) {
    delete vip_info_;
  }
  vip_info_ = nullptr;
}
inline const ::F4BY::VipInfo& SCUserInfoNotify::_internal_vip_info() const {
  const ::F4BY::VipInfo* p = vip_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::VipInfo&>(
      ::F4BY::_VipInfo_default_instance_);
}
inline const ::F4BY::VipInfo& SCUserInfoNotify::vip_info() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.vip_info)
  return _internal_vip_info();
}
inline void SCUserInfoNotify::unsafe_arena_set_allocated_vip_info(
    ::F4BY::VipInfo* vip_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vip_info_);
  }
  vip_info_ = vip_info;
  if (vip_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserInfoNotify.vip_info)
}
inline ::F4BY::VipInfo* SCUserInfoNotify::release_vip_info() {
  
  ::F4BY::VipInfo* temp = vip_info_;
  vip_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::VipInfo* SCUserInfoNotify::unsafe_arena_release_vip_info() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserInfoNotify.vip_info)
  
  ::F4BY::VipInfo* temp = vip_info_;
  vip_info_ = nullptr;
  return temp;
}
inline ::F4BY::VipInfo* SCUserInfoNotify::_internal_mutable_vip_info() {
  
  if (vip_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::VipInfo>(GetArena());
    vip_info_ = p;
  }
  return vip_info_;
}
inline ::F4BY::VipInfo* SCUserInfoNotify::mutable_vip_info() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserInfoNotify.vip_info)
  return _internal_mutable_vip_info();
}
inline void SCUserInfoNotify::set_allocated_vip_info(::F4BY::VipInfo* vip_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vip_info_;
  }
  if (vip_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vip_info);
    if (message_arena != submessage_arena) {
      vip_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vip_info, submessage_arena);
    }
    
  } else {
    
  }
  vip_info_ = vip_info;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserInfoNotify.vip_info)
}

// repeated .F4BY.PropInfo prop_info = 5;
inline int SCUserInfoNotify::_internal_prop_info_size() const {
  return prop_info_.size();
}
inline int SCUserInfoNotify::prop_info_size() const {
  return _internal_prop_info_size();
}
inline void SCUserInfoNotify::clear_prop_info() {
  prop_info_.Clear();
}
inline ::F4BY::PropInfo* SCUserInfoNotify::mutable_prop_info(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserInfoNotify.prop_info)
  return prop_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::PropInfo >*
SCUserInfoNotify::mutable_prop_info() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCUserInfoNotify.prop_info)
  return &prop_info_;
}
inline const ::F4BY::PropInfo& SCUserInfoNotify::_internal_prop_info(int index) const {
  return prop_info_.Get(index);
}
inline const ::F4BY::PropInfo& SCUserInfoNotify::prop_info(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.prop_info)
  return _internal_prop_info(index);
}
inline ::F4BY::PropInfo* SCUserInfoNotify::_internal_add_prop_info() {
  return prop_info_.Add();
}
inline ::F4BY::PropInfo* SCUserInfoNotify::add_prop_info() {
  // @@protoc_insertion_point(field_add:F4BY.SCUserInfoNotify.prop_info)
  return _internal_add_prop_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::PropInfo >&
SCUserInfoNotify::prop_info() const {
  // @@protoc_insertion_point(field_list:F4BY.SCUserInfoNotify.prop_info)
  return prop_info_;
}

// int32 last_gun_level = 6;
inline void SCUserInfoNotify::clear_last_gun_level() {
  last_gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::_internal_last_gun_level() const {
  return last_gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::last_gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.last_gun_level)
  return _internal_last_gun_level();
}
inline void SCUserInfoNotify::_internal_set_last_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_gun_level_ = value;
}
inline void SCUserInfoNotify::set_last_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserInfoNotify.last_gun_level)
}

// int32 last_ratio = 7;
inline void SCUserInfoNotify::clear_last_ratio() {
  last_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::_internal_last_ratio() const {
  return last_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::last_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.last_ratio)
  return _internal_last_ratio();
}
inline void SCUserInfoNotify::_internal_set_last_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_ratio_ = value;
}
inline void SCUserInfoNotify::set_last_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserInfoNotify.last_ratio)
}

// int32 last_wings_propId = 8;
inline void SCUserInfoNotify::clear_last_wings_propid() {
  last_wings_propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::_internal_last_wings_propid() const {
  return last_wings_propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserInfoNotify::last_wings_propid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserInfoNotify.last_wings_propId)
  return _internal_last_wings_propid();
}
inline void SCUserInfoNotify::_internal_set_last_wings_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_wings_propid_ = value;
}
inline void SCUserInfoNotify::set_last_wings_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_wings_propid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserInfoNotify.last_wings_propId)
}

// -------------------------------------------------------------------

// SCGameInfoNotify

// bool user_pool = 1;
inline void SCGameInfoNotify::clear_user_pool() {
  user_pool_ = false;
}
inline bool SCGameInfoNotify::_internal_user_pool() const {
  return user_pool_;
}
inline bool SCGameInfoNotify::user_pool() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGameInfoNotify.user_pool)
  return _internal_user_pool();
}
inline void SCGameInfoNotify::_internal_set_user_pool(bool value) {
  
  user_pool_ = value;
}
inline void SCGameInfoNotify::set_user_pool(bool value) {
  _internal_set_user_pool(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGameInfoNotify.user_pool)
}

// repeated int32 award_fish = 2;
inline int SCGameInfoNotify::_internal_award_fish_size() const {
  return award_fish_.size();
}
inline int SCGameInfoNotify::award_fish_size() const {
  return _internal_award_fish_size();
}
inline void SCGameInfoNotify::clear_award_fish() {
  award_fish_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGameInfoNotify::_internal_award_fish(int index) const {
  return award_fish_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGameInfoNotify::award_fish(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCGameInfoNotify.award_fish)
  return _internal_award_fish(index);
}
inline void SCGameInfoNotify::set_award_fish(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  award_fish_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.SCGameInfoNotify.award_fish)
}
inline void SCGameInfoNotify::_internal_add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  award_fish_.Add(value);
}
inline void SCGameInfoNotify::add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_award_fish(value);
  // @@protoc_insertion_point(field_add:F4BY.SCGameInfoNotify.award_fish)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGameInfoNotify::_internal_award_fish() const {
  return award_fish_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGameInfoNotify::award_fish() const {
  // @@protoc_insertion_point(field_list:F4BY.SCGameInfoNotify.award_fish)
  return _internal_award_fish();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGameInfoNotify::_internal_mutable_award_fish() {
  return &award_fish_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGameInfoNotify::mutable_award_fish() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCGameInfoNotify.award_fish)
  return _internal_mutable_award_fish();
}

// repeated .F4BY.Object3 user_pool_limit = 3;
inline int SCGameInfoNotify::_internal_user_pool_limit_size() const {
  return user_pool_limit_.size();
}
inline int SCGameInfoNotify::user_pool_limit_size() const {
  return _internal_user_pool_limit_size();
}
inline void SCGameInfoNotify::clear_user_pool_limit() {
  user_pool_limit_.Clear();
}
inline ::F4BY::Object3* SCGameInfoNotify::mutable_user_pool_limit(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCGameInfoNotify.user_pool_limit)
  return user_pool_limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >*
SCGameInfoNotify::mutable_user_pool_limit() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCGameInfoNotify.user_pool_limit)
  return &user_pool_limit_;
}
inline const ::F4BY::Object3& SCGameInfoNotify::_internal_user_pool_limit(int index) const {
  return user_pool_limit_.Get(index);
}
inline const ::F4BY::Object3& SCGameInfoNotify::user_pool_limit(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCGameInfoNotify.user_pool_limit)
  return _internal_user_pool_limit(index);
}
inline ::F4BY::Object3* SCGameInfoNotify::_internal_add_user_pool_limit() {
  return user_pool_limit_.Add();
}
inline ::F4BY::Object3* SCGameInfoNotify::add_user_pool_limit() {
  // @@protoc_insertion_point(field_add:F4BY.SCGameInfoNotify.user_pool_limit)
  return _internal_add_user_pool_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >&
SCGameInfoNotify::user_pool_limit() const {
  // @@protoc_insertion_point(field_list:F4BY.SCGameInfoNotify.user_pool_limit)
  return user_pool_limit_;
}

// -------------------------------------------------------------------

// SCInfoRedDot

// bool seven_day = 1;
inline void SCInfoRedDot::clear_seven_day() {
  seven_day_ = false;
}
inline bool SCInfoRedDot::_internal_seven_day() const {
  return seven_day_;
}
inline bool SCInfoRedDot::seven_day() const {
  // @@protoc_insertion_point(field_get:F4BY.SCInfoRedDot.seven_day)
  return _internal_seven_day();
}
inline void SCInfoRedDot::_internal_set_seven_day(bool value) {
  
  seven_day_ = value;
}
inline void SCInfoRedDot::set_seven_day(bool value) {
  _internal_set_seven_day(value);
  // @@protoc_insertion_point(field_set:F4BY.SCInfoRedDot.seven_day)
}

// bool red_dot = 2;
inline void SCInfoRedDot::clear_red_dot() {
  red_dot_ = false;
}
inline bool SCInfoRedDot::_internal_red_dot() const {
  return red_dot_;
}
inline bool SCInfoRedDot::red_dot() const {
  // @@protoc_insertion_point(field_get:F4BY.SCInfoRedDot.red_dot)
  return _internal_red_dot();
}
inline void SCInfoRedDot::_internal_set_red_dot(bool value) {
  
  red_dot_ = value;
}
inline void SCInfoRedDot::set_red_dot(bool value) {
  _internal_set_red_dot(value);
  // @@protoc_insertion_point(field_set:F4BY.SCInfoRedDot.red_dot)
}

// -------------------------------------------------------------------

// JumpHighArena

// bool is_open = 1;
inline void JumpHighArena::clear_is_open() {
  is_open_ = false;
}
inline bool JumpHighArena::_internal_is_open() const {
  return is_open_;
}
inline bool JumpHighArena::is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.JumpHighArena.is_open)
  return _internal_is_open();
}
inline void JumpHighArena::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void JumpHighArena::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.JumpHighArena.is_open)
}

// int32 vip = 2;
inline void JumpHighArena::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::vip() const {
  // @@protoc_insertion_point(field_get:F4BY.JumpHighArena.vip)
  return _internal_vip();
}
inline void JumpHighArena::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void JumpHighArena::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.JumpHighArena.vip)
}

// int32 coin = 3;
inline void JumpHighArena::clear_coin() {
  coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::coin() const {
  // @@protoc_insertion_point(field_get:F4BY.JumpHighArena.coin)
  return _internal_coin();
}
inline void JumpHighArena::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_ = value;
}
inline void JumpHighArena::set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:F4BY.JumpHighArena.coin)
}

// int32 game_time = 4;
inline void JumpHighArena::clear_game_time() {
  game_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_game_time() const {
  return game_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::game_time() const {
  // @@protoc_insertion_point(field_get:F4BY.JumpHighArena.game_time)
  return _internal_game_time();
}
inline void JumpHighArena::_internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_time_ = value;
}
inline void JumpHighArena::set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:F4BY.JumpHighArena.game_time)
}

// string tips = 5;
inline void JumpHighArena::clear_tips() {
  tips_.ClearToEmpty();
}
inline const std::string& JumpHighArena::tips() const {
  // @@protoc_insertion_point(field_get:F4BY.JumpHighArena.tips)
  return _internal_tips();
}
inline void JumpHighArena::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:F4BY.JumpHighArena.tips)
}
inline std::string* JumpHighArena::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:F4BY.JumpHighArena.tips)
  return _internal_mutable_tips();
}
inline const std::string& JumpHighArena::_internal_tips() const {
  return tips_.Get();
}
inline void JumpHighArena::_internal_set_tips(const std::string& value) {
  
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JumpHighArena::set_tips(std::string&& value) {
  
  tips_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.JumpHighArena.tips)
}
inline void JumpHighArena::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.JumpHighArena.tips)
}
inline void JumpHighArena::set_tips(const char* value,
    size_t size) {
  
  tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.JumpHighArena.tips)
}
inline std::string* JumpHighArena::_internal_mutable_tips() {
  
  return tips_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JumpHighArena::release_tips() {
  // @@protoc_insertion_point(field_release:F4BY.JumpHighArena.tips)
  return tips_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JumpHighArena::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    
  } else {
    
  }
  tips_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.JumpHighArena.tips)
}

// -------------------------------------------------------------------

// SCActivityInfo

// .F4BY.JumpHighArena jump = 1;
inline bool SCActivityInfo::_internal_has_jump() const {
  return this != internal_default_instance() && jump_ != nullptr;
}
inline bool SCActivityInfo::has_jump() const {
  return _internal_has_jump();
}
inline void SCActivityInfo::clear_jump() {
  if (GetArena() == nullptr && jump_ != nullptr) {
    delete jump_;
  }
  jump_ = nullptr;
}
inline const ::F4BY::JumpHighArena& SCActivityInfo::_internal_jump() const {
  const ::F4BY::JumpHighArena* p = jump_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::JumpHighArena&>(
      ::F4BY::_JumpHighArena_default_instance_);
}
inline const ::F4BY::JumpHighArena& SCActivityInfo::jump() const {
  // @@protoc_insertion_point(field_get:F4BY.SCActivityInfo.jump)
  return _internal_jump();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_jump(
    ::F4BY::JumpHighArena* jump) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jump_);
  }
  jump_ = jump;
  if (jump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCActivityInfo.jump)
}
inline ::F4BY::JumpHighArena* SCActivityInfo::release_jump() {
  
  ::F4BY::JumpHighArena* temp = jump_;
  jump_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::JumpHighArena* SCActivityInfo::unsafe_arena_release_jump() {
  // @@protoc_insertion_point(field_release:F4BY.SCActivityInfo.jump)
  
  ::F4BY::JumpHighArena* temp = jump_;
  jump_ = nullptr;
  return temp;
}
inline ::F4BY::JumpHighArena* SCActivityInfo::_internal_mutable_jump() {
  
  if (jump_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::JumpHighArena>(GetArena());
    jump_ = p;
  }
  return jump_;
}
inline ::F4BY::JumpHighArena* SCActivityInfo::mutable_jump() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCActivityInfo.jump)
  return _internal_mutable_jump();
}
inline void SCActivityInfo::set_allocated_jump(::F4BY::JumpHighArena* jump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete jump_;
  }
  if (jump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jump);
    if (message_arena != submessage_arena) {
      jump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jump, submessage_arena);
    }
    
  } else {
    
  }
  jump_ = jump;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCActivityInfo.jump)
}

// int32 limit = 2;
inline void SCActivityInfo::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::limit() const {
  // @@protoc_insertion_point(field_get:F4BY.SCActivityInfo.limit)
  return _internal_limit();
}
inline void SCActivityInfo::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void SCActivityInfo::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:F4BY.SCActivityInfo.limit)
}

// bool pool_is_open = 3;
inline void SCActivityInfo::clear_pool_is_open() {
  pool_is_open_ = false;
}
inline bool SCActivityInfo::_internal_pool_is_open() const {
  return pool_is_open_;
}
inline bool SCActivityInfo::pool_is_open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCActivityInfo.pool_is_open)
  return _internal_pool_is_open();
}
inline void SCActivityInfo::_internal_set_pool_is_open(bool value) {
  
  pool_is_open_ = value;
}
inline void SCActivityInfo::set_pool_is_open(bool value) {
  _internal_set_pool_is_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCActivityInfo.pool_is_open)
}

// -------------------------------------------------------------------

// CSChat

// int32 msg_type = 1;
inline void CSChat::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChat::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChat::msg_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSChat.msg_type)
  return _internal_msg_type();
}
inline void CSChat::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void CSChat::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSChat.msg_type)
}

// int32 msg_idx = 2;
inline void CSChat::clear_msg_idx() {
  msg_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChat::_internal_msg_idx() const {
  return msg_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChat::msg_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSChat.msg_idx)
  return _internal_msg_idx();
}
inline void CSChat::_internal_set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_idx_ = value;
}
inline void CSChat::set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSChat.msg_idx)
}

// int32 chair_idx = 3;
inline void CSChat::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChat::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChat::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSChat.chair_idx)
  return _internal_chair_idx();
}
inline void CSChat::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSChat::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSChat.chair_idx)
}

// -------------------------------------------------------------------

// SCChat

// int32 chair_idx = 1;
inline void SCChat::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChat::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChat::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChat.chair_idx)
  return _internal_chair_idx();
}
inline void SCChat::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCChat::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChat.chair_idx)
}

// int32 msg_type = 2;
inline void SCChat::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChat::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChat::msg_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChat.msg_type)
  return _internal_msg_type();
}
inline void SCChat::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void SCChat::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChat.msg_type)
}

// int32 msg_idx = 3;
inline void SCChat::clear_msg_idx() {
  msg_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChat::_internal_msg_idx() const {
  return msg_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChat::msg_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChat.msg_idx)
  return _internal_msg_idx();
}
inline void SCChat::_internal_set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_idx_ = value;
}
inline void SCChat::set_msg_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChat.msg_idx)
}

// -------------------------------------------------------------------

// SCGainAward

// int32 chair_idx = 1;
inline void SCGainAward::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainAward::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainAward::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGainAward.chair_idx)
  return _internal_chair_idx();
}
inline void SCGainAward::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCGainAward::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGainAward.chair_idx)
}

// int32 score = 2;
inline void SCGainAward::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainAward::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGainAward::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGainAward.score)
  return _internal_score();
}
inline void SCGainAward::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCGainAward::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGainAward.score)
}

// .F4BY.Object award = 3;
inline bool SCGainAward::_internal_has_award() const {
  return this != internal_default_instance() && award_ != nullptr;
}
inline bool SCGainAward::has_award() const {
  return _internal_has_award();
}
inline void SCGainAward::clear_award() {
  if (GetArena() == nullptr && award_ != nullptr) {
    delete award_;
  }
  award_ = nullptr;
}
inline const ::F4BY::Object& SCGainAward::_internal_award() const {
  const ::F4BY::Object* p = award_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object&>(
      ::F4BY::_Object_default_instance_);
}
inline const ::F4BY::Object& SCGainAward::award() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGainAward.award)
  return _internal_award();
}
inline void SCGainAward::unsafe_arena_set_allocated_award(
    ::F4BY::Object* award) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_);
  }
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCGainAward.award)
}
inline ::F4BY::Object* SCGainAward::release_award() {
  
  ::F4BY::Object* temp = award_;
  award_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object* SCGainAward::unsafe_arena_release_award() {
  // @@protoc_insertion_point(field_release:F4BY.SCGainAward.award)
  
  ::F4BY::Object* temp = award_;
  award_ = nullptr;
  return temp;
}
inline ::F4BY::Object* SCGainAward::_internal_mutable_award() {
  
  if (award_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object>(GetArena());
    award_ = p;
  }
  return award_;
}
inline ::F4BY::Object* SCGainAward::mutable_award() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCGainAward.award)
  return _internal_mutable_award();
}
inline void SCGainAward::set_allocated_award(::F4BY::Object* award) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_;
  }
  if (award) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award);
    if (message_arena != submessage_arena) {
      award = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award, submessage_arena);
    }
    
  } else {
    
  }
  award_ = award;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCGainAward.award)
}

// -------------------------------------------------------------------

// CSAwardPool

// -------------------------------------------------------------------

// SCAwardPool

// repeated .F4BY.Object3 pool = 1;
inline int SCAwardPool::_internal_pool_size() const {
  return pool_.size();
}
inline int SCAwardPool::pool_size() const {
  return _internal_pool_size();
}
inline void SCAwardPool::clear_pool() {
  pool_.Clear();
}
inline ::F4BY::Object3* SCAwardPool::mutable_pool(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCAwardPool.pool)
  return pool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >*
SCAwardPool::mutable_pool() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCAwardPool.pool)
  return &pool_;
}
inline const ::F4BY::Object3& SCAwardPool::_internal_pool(int index) const {
  return pool_.Get(index);
}
inline const ::F4BY::Object3& SCAwardPool::pool(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCAwardPool.pool)
  return _internal_pool(index);
}
inline ::F4BY::Object3* SCAwardPool::_internal_add_pool() {
  return pool_.Add();
}
inline ::F4BY::Object3* SCAwardPool::add_pool() {
  // @@protoc_insertion_point(field_add:F4BY.SCAwardPool.pool)
  return _internal_add_pool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object3 >&
SCAwardPool::pool() const {
  // @@protoc_insertion_point(field_list:F4BY.SCAwardPool.pool)
  return pool_;
}

// -------------------------------------------------------------------

// CSPropStatus

// int32 prop_id = 1;
inline void CSPropStatus::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPropStatus::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPropStatus::prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSPropStatus.prop_id)
  return _internal_prop_id();
}
inline void CSPropStatus::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void CSPropStatus::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSPropStatus.prop_id)
}

// int32 status = 2;
inline void CSPropStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPropStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPropStatus::status() const {
  // @@protoc_insertion_point(field_get:F4BY.CSPropStatus.status)
  return _internal_status();
}
inline void CSPropStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void CSPropStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.CSPropStatus.status)
}

// -------------------------------------------------------------------

// SCPropStatus

// int32 chair_idx = 1;
inline void SCPropStatus::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropStatus.chair_idx)
  return _internal_chair_idx();
}
inline void SCPropStatus::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCPropStatus::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPropStatus.chair_idx)
}

// int32 prop_id = 2;
inline void SCPropStatus::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropStatus.prop_id)
  return _internal_prop_id();
}
inline void SCPropStatus::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void SCPropStatus::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPropStatus.prop_id)
}

// int32 status = 3;
inline void SCPropStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::status() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropStatus.status)
  return _internal_status();
}
inline void SCPropStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCPropStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPropStatus.status)
}

// int32 bt_id = 4;
inline void SCPropStatus::clear_bt_id() {
  bt_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::_internal_bt_id() const {
  return bt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropStatus::bt_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropStatus.bt_id)
  return _internal_bt_id();
}
inline void SCPropStatus::_internal_set_bt_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_id_ = value;
}
inline void SCPropStatus::set_bt_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPropStatus.bt_id)
}

// -------------------------------------------------------------------

// GivenCardAward

// int32 card_idx = 1;
inline void GivenCardAward::clear_card_idx() {
  card_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GivenCardAward::_internal_card_idx() const {
  return card_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GivenCardAward::card_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.GivenCardAward.card_idx)
  return _internal_card_idx();
}
inline void GivenCardAward::_internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_idx_ = value;
}
inline void GivenCardAward::set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.GivenCardAward.card_idx)
}

// int32 base = 2;
inline void GivenCardAward::clear_base() {
  base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GivenCardAward::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GivenCardAward::base() const {
  // @@protoc_insertion_point(field_get:F4BY.GivenCardAward.base)
  return _internal_base();
}
inline void GivenCardAward::_internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ = value;
}
inline void GivenCardAward::set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:F4BY.GivenCardAward.base)
}

// int32 multiple = 3;
inline void GivenCardAward::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GivenCardAward::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GivenCardAward::multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.GivenCardAward.multiple)
  return _internal_multiple();
}
inline void GivenCardAward::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void GivenCardAward::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.GivenCardAward.multiple)
}

// -------------------------------------------------------------------

// UserAwardItem

// int32 index = 1;
inline void UserAwardItem::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::index() const {
  // @@protoc_insertion_point(field_get:F4BY.UserAwardItem.index)
  return _internal_index();
}
inline void UserAwardItem::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void UserAwardItem::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:F4BY.UserAwardItem.index)
}

// int32 item_max = 2;
inline void UserAwardItem::clear_item_max() {
  item_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::_internal_item_max() const {
  return item_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::item_max() const {
  // @@protoc_insertion_point(field_get:F4BY.UserAwardItem.item_max)
  return _internal_item_max();
}
inline void UserAwardItem::_internal_set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_max_ = value;
}
inline void UserAwardItem::set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_max(value);
  // @@protoc_insertion_point(field_set:F4BY.UserAwardItem.item_max)
}

// string name = 3;
inline void UserAwardItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserAwardItem::name() const {
  // @@protoc_insertion_point(field_get:F4BY.UserAwardItem.name)
  return _internal_name();
}
inline void UserAwardItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:F4BY.UserAwardItem.name)
}
inline std::string* UserAwardItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:F4BY.UserAwardItem.name)
  return _internal_mutable_name();
}
inline const std::string& UserAwardItem::_internal_name() const {
  return name_.Get();
}
inline void UserAwardItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAwardItem::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.UserAwardItem.name)
}
inline void UserAwardItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.UserAwardItem.name)
}
inline void UserAwardItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.UserAwardItem.name)
}
inline std::string* UserAwardItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAwardItem::release_name() {
  // @@protoc_insertion_point(field_release:F4BY.UserAwardItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAwardItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.UserAwardItem.name)
}

// repeated .F4BY.Object2 goods = 4;
inline int UserAwardItem::_internal_goods_size() const {
  return goods_.size();
}
inline int UserAwardItem::goods_size() const {
  return _internal_goods_size();
}
inline void UserAwardItem::clear_goods() {
  goods_.Clear();
}
inline ::F4BY::Object2* UserAwardItem::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.UserAwardItem.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >*
UserAwardItem::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.UserAwardItem.goods)
  return &goods_;
}
inline const ::F4BY::Object2& UserAwardItem::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::F4BY::Object2& UserAwardItem::goods(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.UserAwardItem.goods)
  return _internal_goods(index);
}
inline ::F4BY::Object2* UserAwardItem::_internal_add_goods() {
  return goods_.Add();
}
inline ::F4BY::Object2* UserAwardItem::add_goods() {
  // @@protoc_insertion_point(field_add:F4BY.UserAwardItem.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >&
UserAwardItem::goods() const {
  // @@protoc_insertion_point(field_list:F4BY.UserAwardItem.goods)
  return goods_;
}

// -------------------------------------------------------------------

// CSUserPoolInfo

// bool open_page = 1;
inline void CSUserPoolInfo::clear_open_page() {
  open_page_ = false;
}
inline bool CSUserPoolInfo::_internal_open_page() const {
  return open_page_;
}
inline bool CSUserPoolInfo::open_page() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserPoolInfo.open_page)
  return _internal_open_page();
}
inline void CSUserPoolInfo::_internal_set_open_page(bool value) {
  
  open_page_ = value;
}
inline void CSUserPoolInfo::set_open_page(bool value) {
  _internal_set_open_page(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserPoolInfo.open_page)
}

// -------------------------------------------------------------------

// SCUserPoolInfo

// int32 chair_idx = 1;
inline void SCUserPoolInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolInfo.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserPoolInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserPoolInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolInfo.chair_idx)
}

// bool open_page = 2;
inline void SCUserPoolInfo::clear_open_page() {
  open_page_ = false;
}
inline bool SCUserPoolInfo::_internal_open_page() const {
  return open_page_;
}
inline bool SCUserPoolInfo::open_page() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolInfo.open_page)
  return _internal_open_page();
}
inline void SCUserPoolInfo::_internal_set_open_page(bool value) {
  
  open_page_ = value;
}
inline void SCUserPoolInfo::set_open_page(bool value) {
  _internal_set_open_page(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolInfo.open_page)
}

// bool status = 3;
inline void SCUserPoolInfo::clear_status() {
  status_ = false;
}
inline bool SCUserPoolInfo::_internal_status() const {
  return status_;
}
inline bool SCUserPoolInfo::status() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolInfo.status)
  return _internal_status();
}
inline void SCUserPoolInfo::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SCUserPoolInfo::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolInfo.status)
}

// int32 count = 4;
inline void SCUserPoolInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::count() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolInfo.count)
  return _internal_count();
}
inline void SCUserPoolInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCUserPoolInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolInfo.count)
}

// int32 pool_max = 5;
inline void SCUserPoolInfo::clear_pool_max() {
  pool_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::_internal_pool_max() const {
  return pool_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::pool_max() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolInfo.pool_max)
  return _internal_pool_max();
}
inline void SCUserPoolInfo::_internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pool_max_ = value;
}
inline void SCUserPoolInfo::set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pool_max(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolInfo.pool_max)
}

// repeated .F4BY.UserAwardItem items = 6;
inline int SCUserPoolInfo::_internal_items_size() const {
  return items_.size();
}
inline int SCUserPoolInfo::items_size() const {
  return _internal_items_size();
}
inline void SCUserPoolInfo::clear_items() {
  items_.Clear();
}
inline ::F4BY::UserAwardItem* SCUserPoolInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolInfo.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserAwardItem >*
SCUserPoolInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCUserPoolInfo.items)
  return &items_;
}
inline const ::F4BY::UserAwardItem& SCUserPoolInfo::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::F4BY::UserAwardItem& SCUserPoolInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolInfo.items)
  return _internal_items(index);
}
inline ::F4BY::UserAwardItem* SCUserPoolInfo::_internal_add_items() {
  return items_.Add();
}
inline ::F4BY::UserAwardItem* SCUserPoolInfo::add_items() {
  // @@protoc_insertion_point(field_add:F4BY.SCUserPoolInfo.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::UserAwardItem >&
SCUserPoolInfo::items() const {
  // @@protoc_insertion_point(field_list:F4BY.SCUserPoolInfo.items)
  return items_;
}

// -------------------------------------------------------------------

// CSUserPoolStatus

// bool open = 1;
inline void CSUserPoolStatus::clear_open() {
  open_ = false;
}
inline bool CSUserPoolStatus::_internal_open() const {
  return open_;
}
inline bool CSUserPoolStatus::open() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserPoolStatus.open)
  return _internal_open();
}
inline void CSUserPoolStatus::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void CSUserPoolStatus::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserPoolStatus.open)
}

// -------------------------------------------------------------------

// SCUserPoolStatus

// bool open = 1;
inline void SCUserPoolStatus::clear_open() {
  open_ = false;
}
inline bool SCUserPoolStatus::_internal_open() const {
  return open_;
}
inline bool SCUserPoolStatus::open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolStatus.open)
  return _internal_open();
}
inline void SCUserPoolStatus::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void SCUserPoolStatus::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolStatus.open)
}

// -------------------------------------------------------------------

// CSUserPoolPreDraw

// int32 level = 1;
inline void CSUserPoolPreDraw::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserPoolPreDraw::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserPoolPreDraw::level() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserPoolPreDraw.level)
  return _internal_level();
}
inline void CSUserPoolPreDraw::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CSUserPoolPreDraw::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserPoolPreDraw.level)
}

// -------------------------------------------------------------------

// SCUserPoolPreDraw

// int32 code = 1;
inline void SCUserPoolPreDraw::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolPreDraw.code)
  return _internal_code();
}
inline void SCUserPoolPreDraw::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCUserPoolPreDraw::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolPreDraw.code)
}

// int32 level = 2;
inline void SCUserPoolPreDraw::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolPreDraw.level)
  return _internal_level();
}
inline void SCUserPoolPreDraw::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SCUserPoolPreDraw::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolPreDraw.level)
}

// string msg = 3;
inline void SCUserPoolPreDraw::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCUserPoolPreDraw::msg() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolPreDraw.msg)
  return _internal_msg();
}
inline void SCUserPoolPreDraw::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolPreDraw.msg)
}
inline std::string* SCUserPoolPreDraw::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolPreDraw.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCUserPoolPreDraw::_internal_msg() const {
  return msg_.Get();
}
inline void SCUserPoolPreDraw::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCUserPoolPreDraw::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCUserPoolPreDraw.msg)
}
inline void SCUserPoolPreDraw::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCUserPoolPreDraw.msg)
}
inline void SCUserPoolPreDraw::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCUserPoolPreDraw.msg)
}
inline std::string* SCUserPoolPreDraw::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCUserPoolPreDraw::release_msg() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolPreDraw.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCUserPoolPreDraw::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolPreDraw.msg)
}

// -------------------------------------------------------------------

// CSUserPoolDraw

// -------------------------------------------------------------------

// SCUserPoolDraw

// int32 chair_idx = 1;
inline void SCUserPoolDraw::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDraw::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDraw::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDraw.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserPoolDraw::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserPoolDraw::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolDraw.chair_idx)
}

// repeated .F4BY.Object2 goods = 2;
inline int SCUserPoolDraw::_internal_goods_size() const {
  return goods_.size();
}
inline int SCUserPoolDraw::goods_size() const {
  return _internal_goods_size();
}
inline void SCUserPoolDraw::clear_goods() {
  goods_.Clear();
}
inline ::F4BY::Object2* SCUserPoolDraw::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDraw.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >*
SCUserPoolDraw::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCUserPoolDraw.goods)
  return &goods_;
}
inline const ::F4BY::Object2& SCUserPoolDraw::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::F4BY::Object2& SCUserPoolDraw::goods(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDraw.goods)
  return _internal_goods(index);
}
inline ::F4BY::Object2* SCUserPoolDraw::_internal_add_goods() {
  return goods_.Add();
}
inline ::F4BY::Object2* SCUserPoolDraw::add_goods() {
  // @@protoc_insertion_point(field_add:F4BY.SCUserPoolDraw.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object2 >&
SCUserPoolDraw::goods() const {
  // @@protoc_insertion_point(field_list:F4BY.SCUserPoolDraw.goods)
  return goods_;
}

// .F4BY.Object2 award = 3;
inline bool SCUserPoolDraw::_internal_has_award() const {
  return this != internal_default_instance() && award_ != nullptr;
}
inline bool SCUserPoolDraw::has_award() const {
  return _internal_has_award();
}
inline void SCUserPoolDraw::clear_award() {
  if (GetArena() == nullptr && award_ != nullptr) {
    delete award_;
  }
  award_ = nullptr;
}
inline const ::F4BY::Object2& SCUserPoolDraw::_internal_award() const {
  const ::F4BY::Object2* p = award_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object2&>(
      ::F4BY::_Object2_default_instance_);
}
inline const ::F4BY::Object2& SCUserPoolDraw::award() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDraw.award)
  return _internal_award();
}
inline void SCUserPoolDraw::unsafe_arena_set_allocated_award(
    ::F4BY::Object2* award) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_);
  }
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserPoolDraw.award)
}
inline ::F4BY::Object2* SCUserPoolDraw::release_award() {
  
  ::F4BY::Object2* temp = award_;
  award_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object2* SCUserPoolDraw::unsafe_arena_release_award() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolDraw.award)
  
  ::F4BY::Object2* temp = award_;
  award_ = nullptr;
  return temp;
}
inline ::F4BY::Object2* SCUserPoolDraw::_internal_mutable_award() {
  
  if (award_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object2>(GetArena());
    award_ = p;
  }
  return award_;
}
inline ::F4BY::Object2* SCUserPoolDraw::mutable_award() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDraw.award)
  return _internal_mutable_award();
}
inline void SCUserPoolDraw::set_allocated_award(::F4BY::Object2* award) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_;
  }
  if (award) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award);
    if (message_arena != submessage_arena) {
      award = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award, submessage_arena);
    }
    
  } else {
    
  }
  award_ = award;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolDraw.award)
}

// .F4BY.Object award_cnt = 4;
inline bool SCUserPoolDraw::_internal_has_award_cnt() const {
  return this != internal_default_instance() && award_cnt_ != nullptr;
}
inline bool SCUserPoolDraw::has_award_cnt() const {
  return _internal_has_award_cnt();
}
inline void SCUserPoolDraw::clear_award_cnt() {
  if (GetArena() == nullptr && award_cnt_ != nullptr) {
    delete award_cnt_;
  }
  award_cnt_ = nullptr;
}
inline const ::F4BY::Object& SCUserPoolDraw::_internal_award_cnt() const {
  const ::F4BY::Object* p = award_cnt_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object&>(
      ::F4BY::_Object_default_instance_);
}
inline const ::F4BY::Object& SCUserPoolDraw::award_cnt() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDraw.award_cnt)
  return _internal_award_cnt();
}
inline void SCUserPoolDraw::unsafe_arena_set_allocated_award_cnt(
    ::F4BY::Object* award_cnt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_cnt_);
  }
  award_cnt_ = award_cnt;
  if (award_cnt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserPoolDraw.award_cnt)
}
inline ::F4BY::Object* SCUserPoolDraw::release_award_cnt() {
  
  ::F4BY::Object* temp = award_cnt_;
  award_cnt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object* SCUserPoolDraw::unsafe_arena_release_award_cnt() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolDraw.award_cnt)
  
  ::F4BY::Object* temp = award_cnt_;
  award_cnt_ = nullptr;
  return temp;
}
inline ::F4BY::Object* SCUserPoolDraw::_internal_mutable_award_cnt() {
  
  if (award_cnt_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object>(GetArena());
    award_cnt_ = p;
  }
  return award_cnt_;
}
inline ::F4BY::Object* SCUserPoolDraw::mutable_award_cnt() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDraw.award_cnt)
  return _internal_mutable_award_cnt();
}
inline void SCUserPoolDraw::set_allocated_award_cnt(::F4BY::Object* award_cnt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_cnt_;
  }
  if (award_cnt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award_cnt);
    if (message_arena != submessage_arena) {
      award_cnt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award_cnt, submessage_arena);
    }
    
  } else {
    
  }
  award_cnt_ = award_cnt;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolDraw.award_cnt)
}

// -------------------------------------------------------------------

// SCUserPoolAdd

// int32 add = 1;
inline void SCUserPoolAdd::clear_add() {
  add_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_add() const {
  return add_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::add() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolAdd.add)
  return _internal_add();
}
inline void SCUserPoolAdd::_internal_set_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_ = value;
}
inline void SCUserPoolAdd::set_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolAdd.add)
}

// int32 count = 2;
inline void SCUserPoolAdd::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::count() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolAdd.count)
  return _internal_count();
}
inline void SCUserPoolAdd::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCUserPoolAdd::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolAdd.count)
}

// int32 first_max = 3;
inline void SCUserPoolAdd::clear_first_max() {
  first_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_first_max() const {
  return first_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::first_max() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolAdd.first_max)
  return _internal_first_max();
}
inline void SCUserPoolAdd::_internal_set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  first_max_ = value;
}
inline void SCUserPoolAdd::set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_first_max(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolAdd.first_max)
}

// int32 pool_max = 4;
inline void SCUserPoolAdd::clear_pool_max() {
  pool_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_pool_max() const {
  return pool_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::pool_max() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolAdd.pool_max)
  return _internal_pool_max();
}
inline void SCUserPoolAdd::_internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pool_max_ = value;
}
inline void SCUserPoolAdd::set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pool_max(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolAdd.pool_max)
}

// bool status = 5;
inline void SCUserPoolAdd::clear_status() {
  status_ = false;
}
inline bool SCUserPoolAdd::_internal_status() const {
  return status_;
}
inline bool SCUserPoolAdd::status() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolAdd.status)
  return _internal_status();
}
inline void SCUserPoolAdd::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SCUserPoolAdd::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolAdd.status)
}

// string level_name = 6;
inline void SCUserPoolAdd::clear_level_name() {
  level_name_.ClearToEmpty();
}
inline const std::string& SCUserPoolAdd::level_name() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolAdd.level_name)
  return _internal_level_name();
}
inline void SCUserPoolAdd::set_level_name(const std::string& value) {
  _internal_set_level_name(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolAdd.level_name)
}
inline std::string* SCUserPoolAdd::mutable_level_name() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolAdd.level_name)
  return _internal_mutable_level_name();
}
inline const std::string& SCUserPoolAdd::_internal_level_name() const {
  return level_name_.Get();
}
inline void SCUserPoolAdd::_internal_set_level_name(const std::string& value) {
  
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCUserPoolAdd::set_level_name(std::string&& value) {
  
  level_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCUserPoolAdd.level_name)
}
inline void SCUserPoolAdd::set_level_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCUserPoolAdd.level_name)
}
inline void SCUserPoolAdd::set_level_name(const char* value,
    size_t size) {
  
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCUserPoolAdd.level_name)
}
inline std::string* SCUserPoolAdd::_internal_mutable_level_name() {
  
  return level_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCUserPoolAdd::release_level_name() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolAdd.level_name)
  return level_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCUserPoolAdd::set_allocated_level_name(std::string* level_name) {
  if (level_name != nullptr) {
    
  } else {
    
  }
  level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolAdd.level_name)
}

// -------------------------------------------------------------------

// CSUserPoolDoubleInfo

// -------------------------------------------------------------------

// SCUserPoolDoubleInfo

// int32 cost = 1;
inline void SCUserPoolDoubleInfo::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDoubleInfo::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDoubleInfo::cost() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDoubleInfo.cost)
  return _internal_cost();
}
inline void SCUserPoolDoubleInfo::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void SCUserPoolDoubleInfo::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolDoubleInfo.cost)
}

// .F4BY.Object2 item_before = 2;
inline bool SCUserPoolDoubleInfo::_internal_has_item_before() const {
  return this != internal_default_instance() && item_before_ != nullptr;
}
inline bool SCUserPoolDoubleInfo::has_item_before() const {
  return _internal_has_item_before();
}
inline void SCUserPoolDoubleInfo::clear_item_before() {
  if (GetArena() == nullptr && item_before_ != nullptr) {
    delete item_before_;
  }
  item_before_ = nullptr;
}
inline const ::F4BY::Object2& SCUserPoolDoubleInfo::_internal_item_before() const {
  const ::F4BY::Object2* p = item_before_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object2&>(
      ::F4BY::_Object2_default_instance_);
}
inline const ::F4BY::Object2& SCUserPoolDoubleInfo::item_before() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDoubleInfo.item_before)
  return _internal_item_before();
}
inline void SCUserPoolDoubleInfo::unsafe_arena_set_allocated_item_before(
    ::F4BY::Object2* item_before) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_before_);
  }
  item_before_ = item_before;
  if (item_before) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserPoolDoubleInfo.item_before)
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::release_item_before() {
  
  ::F4BY::Object2* temp = item_before_;
  item_before_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::unsafe_arena_release_item_before() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolDoubleInfo.item_before)
  
  ::F4BY::Object2* temp = item_before_;
  item_before_ = nullptr;
  return temp;
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::_internal_mutable_item_before() {
  
  if (item_before_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object2>(GetArena());
    item_before_ = p;
  }
  return item_before_;
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::mutable_item_before() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDoubleInfo.item_before)
  return _internal_mutable_item_before();
}
inline void SCUserPoolDoubleInfo::set_allocated_item_before(::F4BY::Object2* item_before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_before_;
  }
  if (item_before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_before);
    if (message_arena != submessage_arena) {
      item_before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_before, submessage_arena);
    }
    
  } else {
    
  }
  item_before_ = item_before;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolDoubleInfo.item_before)
}

// .F4BY.Object2 item_double = 3;
inline bool SCUserPoolDoubleInfo::_internal_has_item_double() const {
  return this != internal_default_instance() && item_double_ != nullptr;
}
inline bool SCUserPoolDoubleInfo::has_item_double() const {
  return _internal_has_item_double();
}
inline void SCUserPoolDoubleInfo::clear_item_double() {
  if (GetArena() == nullptr && item_double_ != nullptr) {
    delete item_double_;
  }
  item_double_ = nullptr;
}
inline const ::F4BY::Object2& SCUserPoolDoubleInfo::_internal_item_double() const {
  const ::F4BY::Object2* p = item_double_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object2&>(
      ::F4BY::_Object2_default_instance_);
}
inline const ::F4BY::Object2& SCUserPoolDoubleInfo::item_double() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDoubleInfo.item_double)
  return _internal_item_double();
}
inline void SCUserPoolDoubleInfo::unsafe_arena_set_allocated_item_double(
    ::F4BY::Object2* item_double) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_double_);
  }
  item_double_ = item_double;
  if (item_double) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserPoolDoubleInfo.item_double)
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::release_item_double() {
  
  ::F4BY::Object2* temp = item_double_;
  item_double_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::unsafe_arena_release_item_double() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolDoubleInfo.item_double)
  
  ::F4BY::Object2* temp = item_double_;
  item_double_ = nullptr;
  return temp;
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::_internal_mutable_item_double() {
  
  if (item_double_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object2>(GetArena());
    item_double_ = p;
  }
  return item_double_;
}
inline ::F4BY::Object2* SCUserPoolDoubleInfo::mutable_item_double() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDoubleInfo.item_double)
  return _internal_mutable_item_double();
}
inline void SCUserPoolDoubleInfo::set_allocated_item_double(::F4BY::Object2* item_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_double_;
  }
  if (item_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_double);
    if (message_arena != submessage_arena) {
      item_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_double, submessage_arena);
    }
    
  } else {
    
  }
  item_double_ = item_double;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolDoubleInfo.item_double)
}

// -------------------------------------------------------------------

// CSUserPoolDouble

// bool is_double = 1;
inline void CSUserPoolDouble::clear_is_double() {
  is_double_ = false;
}
inline bool CSUserPoolDouble::_internal_is_double() const {
  return is_double_;
}
inline bool CSUserPoolDouble::is_double() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserPoolDouble.is_double)
  return _internal_is_double();
}
inline void CSUserPoolDouble::_internal_set_is_double(bool value) {
  
  is_double_ = value;
}
inline void CSUserPoolDouble::set_is_double(bool value) {
  _internal_set_is_double(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserPoolDouble.is_double)
}

// -------------------------------------------------------------------

// SCUserPoolDouble

// int32 code = 1;
inline void SCUserPoolDouble::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDouble.code)
  return _internal_code();
}
inline void SCUserPoolDouble::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCUserPoolDouble::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolDouble.code)
}

// int32 result = 2;
inline void SCUserPoolDouble::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::result() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDouble.result)
  return _internal_result();
}
inline void SCUserPoolDouble::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCUserPoolDouble::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolDouble.result)
}

// int32 chair_idx = 3;
inline void SCUserPoolDouble::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDouble.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserPoolDouble::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserPoolDouble::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUserPoolDouble.chair_idx)
}

// .F4BY.Object3 item = 4;
inline bool SCUserPoolDouble::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool SCUserPoolDouble::has_item() const {
  return _internal_has_item();
}
inline void SCUserPoolDouble::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::F4BY::Object3& SCUserPoolDouble::_internal_item() const {
  const ::F4BY::Object3* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object3&>(
      ::F4BY::_Object3_default_instance_);
}
inline const ::F4BY::Object3& SCUserPoolDouble::item() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDouble.item)
  return _internal_item();
}
inline void SCUserPoolDouble::unsafe_arena_set_allocated_item(
    ::F4BY::Object3* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserPoolDouble.item)
}
inline ::F4BY::Object3* SCUserPoolDouble::release_item() {
  
  ::F4BY::Object3* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object3* SCUserPoolDouble::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolDouble.item)
  
  ::F4BY::Object3* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::F4BY::Object3* SCUserPoolDouble::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object3>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::F4BY::Object3* SCUserPoolDouble::mutable_item() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDouble.item)
  return _internal_mutable_item();
}
inline void SCUserPoolDouble::set_allocated_item(::F4BY::Object3* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolDouble.item)
}

// .F4BY.Object3 extra_item = 5;
inline bool SCUserPoolDouble::_internal_has_extra_item() const {
  return this != internal_default_instance() && extra_item_ != nullptr;
}
inline bool SCUserPoolDouble::has_extra_item() const {
  return _internal_has_extra_item();
}
inline void SCUserPoolDouble::clear_extra_item() {
  if (GetArena() == nullptr && extra_item_ != nullptr) {
    delete extra_item_;
  }
  extra_item_ = nullptr;
}
inline const ::F4BY::Object3& SCUserPoolDouble::_internal_extra_item() const {
  const ::F4BY::Object3* p = extra_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object3&>(
      ::F4BY::_Object3_default_instance_);
}
inline const ::F4BY::Object3& SCUserPoolDouble::extra_item() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUserPoolDouble.extra_item)
  return _internal_extra_item();
}
inline void SCUserPoolDouble::unsafe_arena_set_allocated_extra_item(
    ::F4BY::Object3* extra_item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_item_);
  }
  extra_item_ = extra_item;
  if (extra_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCUserPoolDouble.extra_item)
}
inline ::F4BY::Object3* SCUserPoolDouble::release_extra_item() {
  
  ::F4BY::Object3* temp = extra_item_;
  extra_item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object3* SCUserPoolDouble::unsafe_arena_release_extra_item() {
  // @@protoc_insertion_point(field_release:F4BY.SCUserPoolDouble.extra_item)
  
  ::F4BY::Object3* temp = extra_item_;
  extra_item_ = nullptr;
  return temp;
}
inline ::F4BY::Object3* SCUserPoolDouble::_internal_mutable_extra_item() {
  
  if (extra_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object3>(GetArena());
    extra_item_ = p;
  }
  return extra_item_;
}
inline ::F4BY::Object3* SCUserPoolDouble::mutable_extra_item() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUserPoolDouble.extra_item)
  return _internal_mutable_extra_item();
}
inline void SCUserPoolDouble::set_allocated_extra_item(::F4BY::Object3* extra_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extra_item_;
  }
  if (extra_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extra_item);
    if (message_arena != submessage_arena) {
      extra_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_item, submessage_arena);
    }
    
  } else {
    
  }
  extra_item_ = extra_item;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUserPoolDouble.extra_item)
}

// -------------------------------------------------------------------

// CSLuckyPoolInfo

// -------------------------------------------------------------------

// SCLuckyPoolInfo

// int32 count = 1;
inline void SCLuckyPoolInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::count() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyPoolInfo.count)
  return _internal_count();
}
inline void SCLuckyPoolInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCLuckyPoolInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyPoolInfo.count)
}

// int32 max = 2;
inline void SCLuckyPoolInfo::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::max() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyPoolInfo.max)
  return _internal_max();
}
inline void SCLuckyPoolInfo::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void SCLuckyPoolInfo::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyPoolInfo.max)
}

// -------------------------------------------------------------------

// CSLuckyPoolDraw

// -------------------------------------------------------------------

// SCLuckyPoolDraw

// .F4BY.Object3 item = 1;
inline bool SCLuckyPoolDraw::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool SCLuckyPoolDraw::has_item() const {
  return _internal_has_item();
}
inline void SCLuckyPoolDraw::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::F4BY::Object3& SCLuckyPoolDraw::_internal_item() const {
  const ::F4BY::Object3* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Object3&>(
      ::F4BY::_Object3_default_instance_);
}
inline const ::F4BY::Object3& SCLuckyPoolDraw::item() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyPoolDraw.item)
  return _internal_item();
}
inline void SCLuckyPoolDraw::unsafe_arena_set_allocated_item(
    ::F4BY::Object3* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCLuckyPoolDraw.item)
}
inline ::F4BY::Object3* SCLuckyPoolDraw::release_item() {
  
  ::F4BY::Object3* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Object3* SCLuckyPoolDraw::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:F4BY.SCLuckyPoolDraw.item)
  
  ::F4BY::Object3* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::F4BY::Object3* SCLuckyPoolDraw::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Object3>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::F4BY::Object3* SCLuckyPoolDraw::mutable_item() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCLuckyPoolDraw.item)
  return _internal_mutable_item();
}
inline void SCLuckyPoolDraw::set_allocated_item(::F4BY::Object3* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCLuckyPoolDraw.item)
}

// -------------------------------------------------------------------

// CSTorpedoPreShoot

// int32 propId = 1;
inline void CSTorpedoPreShoot::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTorpedoPreShoot::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTorpedoPreShoot::propid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSTorpedoPreShoot.propId)
  return _internal_propid();
}
inline void CSTorpedoPreShoot::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void CSTorpedoPreShoot::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSTorpedoPreShoot.propId)
}

// -------------------------------------------------------------------

// SCTorpedoPreShoot

// int32 chair_idx = 1;
inline void SCTorpedoPreShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoPreShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoPreShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoPreShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCTorpedoPreShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTorpedoPreShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoPreShoot.chair_idx)
}

// int32 propId = 2;
inline void SCTorpedoPreShoot::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoPreShoot::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoPreShoot::propid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoPreShoot.propId)
  return _internal_propid();
}
inline void SCTorpedoPreShoot::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void SCTorpedoPreShoot::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoPreShoot.propId)
}

// int32 code = 3;
inline void SCTorpedoPreShoot::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoPreShoot::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoPreShoot::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoPreShoot.code)
  return _internal_code();
}
inline void SCTorpedoPreShoot::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCTorpedoPreShoot::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoPreShoot.code)
}

// string msg = 4;
inline void SCTorpedoPreShoot::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCTorpedoPreShoot::msg() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoPreShoot.msg)
  return _internal_msg();
}
inline void SCTorpedoPreShoot::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoPreShoot.msg)
}
inline std::string* SCTorpedoPreShoot::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCTorpedoPreShoot.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCTorpedoPreShoot::_internal_msg() const {
  return msg_.Get();
}
inline void SCTorpedoPreShoot::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCTorpedoPreShoot::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCTorpedoPreShoot.msg)
}
inline void SCTorpedoPreShoot::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCTorpedoPreShoot.msg)
}
inline void SCTorpedoPreShoot::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCTorpedoPreShoot.msg)
}
inline std::string* SCTorpedoPreShoot::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCTorpedoPreShoot::release_msg() {
  // @@protoc_insertion_point(field_release:F4BY.SCTorpedoPreShoot.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCTorpedoPreShoot::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCTorpedoPreShoot.msg)
}

// -------------------------------------------------------------------

// CSTorpedoCancelShoot

// -------------------------------------------------------------------

// SCTorpedoCancelShoot

// int32 chair_idx = 1;
inline void SCTorpedoCancelShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoCancelShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoCancelShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoCancelShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCTorpedoCancelShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTorpedoCancelShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoCancelShoot.chair_idx)
}

// -------------------------------------------------------------------

// CSTorpedoShoot

// int32 fish_uid = 1;
inline void CSTorpedoShoot::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTorpedoShoot::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTorpedoShoot::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSTorpedoShoot.fish_uid)
  return _internal_fish_uid();
}
inline void CSTorpedoShoot::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void CSTorpedoShoot::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSTorpedoShoot.fish_uid)
}

// float x = 2;
inline void CSTorpedoShoot::clear_x() {
  x_ = 0;
}
inline float CSTorpedoShoot::_internal_x() const {
  return x_;
}
inline float CSTorpedoShoot::x() const {
  // @@protoc_insertion_point(field_get:F4BY.CSTorpedoShoot.x)
  return _internal_x();
}
inline void CSTorpedoShoot::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CSTorpedoShoot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F4BY.CSTorpedoShoot.x)
}

// float y = 3;
inline void CSTorpedoShoot::clear_y() {
  y_ = 0;
}
inline float CSTorpedoShoot::_internal_y() const {
  return y_;
}
inline float CSTorpedoShoot::y() const {
  // @@protoc_insertion_point(field_get:F4BY.CSTorpedoShoot.y)
  return _internal_y();
}
inline void CSTorpedoShoot::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CSTorpedoShoot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F4BY.CSTorpedoShoot.y)
}

// -------------------------------------------------------------------

// SCTorpedoShoot

// int32 chair_idx = 1;
inline void SCTorpedoShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCTorpedoShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTorpedoShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoShoot.chair_idx)
}

// int32 fish_uid = 2;
inline void SCTorpedoShoot::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoShoot::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoShoot::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoShoot.fish_uid)
  return _internal_fish_uid();
}
inline void SCTorpedoShoot::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCTorpedoShoot::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoShoot.fish_uid)
}

// float x = 3;
inline void SCTorpedoShoot::clear_x() {
  x_ = 0;
}
inline float SCTorpedoShoot::_internal_x() const {
  return x_;
}
inline float SCTorpedoShoot::x() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoShoot.x)
  return _internal_x();
}
inline void SCTorpedoShoot::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SCTorpedoShoot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoShoot.x)
}

// float y = 4;
inline void SCTorpedoShoot::clear_y() {
  y_ = 0;
}
inline float SCTorpedoShoot::_internal_y() const {
  return y_;
}
inline float SCTorpedoShoot::y() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoShoot.y)
  return _internal_y();
}
inline void SCTorpedoShoot::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SCTorpedoShoot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoShoot.y)
}

// -------------------------------------------------------------------

// CSTorpedoHit

// -------------------------------------------------------------------

// SCTorpedoHit

// int32 chair_idx = 1;
inline void SCTorpedoHit::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.chair_idx)
  return _internal_chair_idx();
}
inline void SCTorpedoHit::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTorpedoHit::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.chair_idx)
}

// int32 earn = 2;
inline void SCTorpedoHit::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.earn)
  return _internal_earn();
}
inline void SCTorpedoHit::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCTorpedoHit::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.earn)
}

// int32 score = 3;
inline void SCTorpedoHit::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.score)
  return _internal_score();
}
inline void SCTorpedoHit::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCTorpedoHit::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.score)
}

// int32 propId = 4;
inline void SCTorpedoHit::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::propid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.propId)
  return _internal_propid();
}
inline void SCTorpedoHit::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void SCTorpedoHit::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.propId)
}

// int32 remain = 5;
inline void SCTorpedoHit::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::remain() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.remain)
  return _internal_remain();
}
inline void SCTorpedoHit::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void SCTorpedoHit::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.remain)
}

// int32 fish_uid = 6;
inline void SCTorpedoHit::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTorpedoHit::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.fish_uid)
  return _internal_fish_uid();
}
inline void SCTorpedoHit::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCTorpedoHit::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.fish_uid)
}

// float x = 7;
inline void SCTorpedoHit::clear_x() {
  x_ = 0;
}
inline float SCTorpedoHit::_internal_x() const {
  return x_;
}
inline float SCTorpedoHit::x() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.x)
  return _internal_x();
}
inline void SCTorpedoHit::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SCTorpedoHit::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.x)
}

// float y = 8;
inline void SCTorpedoHit::clear_y() {
  y_ = 0;
}
inline float SCTorpedoHit::_internal_y() const {
  return y_;
}
inline float SCTorpedoHit::y() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTorpedoHit.y)
  return _internal_y();
}
inline void SCTorpedoHit::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SCTorpedoHit::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTorpedoHit.y)
}

// -------------------------------------------------------------------

// CSCallFish

// .F4BY.CallFishType call_type = 1;
inline void CSCallFish::clear_call_type() {
  call_type_ = 0;
}
inline ::F4BY::CallFishType CSCallFish::_internal_call_type() const {
  return static_cast< ::F4BY::CallFishType >(call_type_);
}
inline ::F4BY::CallFishType CSCallFish::call_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSCallFish.call_type)
  return _internal_call_type();
}
inline void CSCallFish::_internal_set_call_type(::F4BY::CallFishType value) {
  
  call_type_ = value;
}
inline void CSCallFish::set_call_type(::F4BY::CallFishType value) {
  _internal_set_call_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSCallFish.call_type)
}

// -------------------------------------------------------------------

// SCCallFish

// int32 chair_idx = 1;
inline void SCCallFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCallFish.chair_idx)
  return _internal_chair_idx();
}
inline void SCCallFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCCallFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCallFish.chair_idx)
}

// int32 propId = 2;
inline void SCCallFish::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::propid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCallFish.propId)
  return _internal_propid();
}
inline void SCCallFish::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void SCCallFish::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCallFish.propId)
}

// int32 remain = 3;
inline void SCCallFish::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::remain() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCallFish.remain)
  return _internal_remain();
}
inline void SCCallFish::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void SCCallFish::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCallFish.remain)
}

// int32 code = 4;
inline void SCCallFish::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCallFish::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCallFish.code)
  return _internal_code();
}
inline void SCCallFish::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCCallFish::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCallFish.code)
}

// string msg = 5;
inline void SCCallFish::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCCallFish::msg() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCallFish.msg)
  return _internal_msg();
}
inline void SCCallFish::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCallFish.msg)
}
inline std::string* SCCallFish::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCCallFish.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCCallFish::_internal_msg() const {
  return msg_.Get();
}
inline void SCCallFish::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCCallFish::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCCallFish.msg)
}
inline void SCCallFish::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCCallFish.msg)
}
inline void SCCallFish::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCCallFish.msg)
}
inline std::string* SCCallFish::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCCallFish::release_msg() {
  // @@protoc_insertion_point(field_release:F4BY.SCCallFish.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCCallFish::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCCallFish.msg)
}

// -------------------------------------------------------------------

// SCComTask

// int32 gun_ratio = 1;
inline void SCComTask::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::gun_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCComTask.gun_ratio)
  return _internal_gun_ratio();
}
inline void SCComTask::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void SCComTask::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCComTask.gun_ratio)
}

// int32 gun_level = 2;
inline void SCComTask::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCComTask.gun_level)
  return _internal_gun_level();
}
inline void SCComTask::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCComTask::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCComTask.gun_level)
}

// int32 award = 3;
inline void SCComTask::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::award() const {
  // @@protoc_insertion_point(field_get:F4BY.SCComTask.award)
  return _internal_award();
}
inline void SCComTask::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCComTask::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:F4BY.SCComTask.award)
}

// int32 ticket = 4;
inline void SCComTask::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.SCComTask.ticket)
  return _internal_ticket();
}
inline void SCComTask::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCComTask::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.SCComTask.ticket)
}

// -------------------------------------------------------------------

// SCTaskInfo

// int32 gun_ratio = 1;
inline void SCTaskInfo::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::gun_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.gun_ratio)
  return _internal_gun_ratio();
}
inline void SCTaskInfo::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void SCTaskInfo::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.gun_ratio)
}

// int32 gun_level = 2;
inline void SCTaskInfo::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.gun_level)
  return _internal_gun_level();
}
inline void SCTaskInfo::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCTaskInfo::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.gun_level)
}

// int32 cur_num = 3;
inline void SCTaskInfo::clear_cur_num() {
  cur_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_cur_num() const {
  return cur_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::cur_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.cur_num)
  return _internal_cur_num();
}
inline void SCTaskInfo::_internal_set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_num_ = value;
}
inline void SCTaskInfo::set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.cur_num)
}

// int32 total_num = 4;
inline void SCTaskInfo::clear_total_num() {
  total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::total_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.total_num)
  return _internal_total_num();
}
inline void SCTaskInfo::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_num_ = value;
}
inline void SCTaskInfo::set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.total_num)
}

// int32 vip_level = 5;
inline void SCTaskInfo::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::vip_level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.vip_level)
  return _internal_vip_level();
}
inline void SCTaskInfo::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void SCTaskInfo::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.vip_level)
}

// bool is_unlock = 6;
inline void SCTaskInfo::clear_is_unlock() {
  is_unlock_ = false;
}
inline bool SCTaskInfo::_internal_is_unlock() const {
  return is_unlock_;
}
inline bool SCTaskInfo::is_unlock() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.is_unlock)
  return _internal_is_unlock();
}
inline void SCTaskInfo::_internal_set_is_unlock(bool value) {
  
  is_unlock_ = value;
}
inline void SCTaskInfo::set_is_unlock(bool value) {
  _internal_set_is_unlock(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.is_unlock)
}

// int32 award = 7;
inline void SCTaskInfo::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::award() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.award)
  return _internal_award();
}
inline void SCTaskInfo::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCTaskInfo::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.award)
}

// bool is_vip_unlock = 8;
inline void SCTaskInfo::clear_is_vip_unlock() {
  is_vip_unlock_ = false;
}
inline bool SCTaskInfo::_internal_is_vip_unlock() const {
  return is_vip_unlock_;
}
inline bool SCTaskInfo::is_vip_unlock() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.is_vip_unlock)
  return _internal_is_vip_unlock();
}
inline void SCTaskInfo::_internal_set_is_vip_unlock(bool value) {
  
  is_vip_unlock_ = value;
}
inline void SCTaskInfo::set_is_vip_unlock(bool value) {
  _internal_set_is_vip_unlock(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.is_vip_unlock)
}

// int32 ticket = 9;
inline void SCTaskInfo::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTaskInfo.ticket)
  return _internal_ticket();
}
inline void SCTaskInfo::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCTaskInfo::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTaskInfo.ticket)
}

// -------------------------------------------------------------------

// CSSaveSkillTime

// int32 auto = 1;
inline void CSSaveSkillTime::clear_auto_() {
  auto__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::_internal_auto_() const {
  return auto__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::auto_() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSaveSkillTime.auto)
  return _internal_auto_();
}
inline void CSSaveSkillTime::_internal_set_auto_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auto__ = value;
}
inline void CSSaveSkillTime::set_auto_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSaveSkillTime.auto)
}

// int32 lock = 2;
inline void CSSaveSkillTime::clear_lock() {
  lock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::_internal_lock() const {
  return lock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::lock() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSaveSkillTime.lock)
  return _internal_lock();
}
inline void CSSaveSkillTime::_internal_set_lock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lock_ = value;
}
inline void CSSaveSkillTime::set_lock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSaveSkillTime.lock)
}

// int32 angry = 3;
inline void CSSaveSkillTime::clear_angry() {
  angry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::_internal_angry() const {
  return angry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::angry() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSaveSkillTime.angry)
  return _internal_angry();
}
inline void CSSaveSkillTime::_internal_set_angry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angry_ = value;
}
inline void CSSaveSkillTime::set_angry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angry(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSaveSkillTime.angry)
}

// int32 treble = 4;
inline void CSSaveSkillTime::clear_treble() {
  treble_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::_internal_treble() const {
  return treble_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSaveSkillTime::treble() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSaveSkillTime.treble)
  return _internal_treble();
}
inline void CSSaveSkillTime::_internal_set_treble(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  treble_ = value;
}
inline void CSSaveSkillTime::set_treble(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_treble(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSaveSkillTime.treble)
}

// -------------------------------------------------------------------

// SevenDayTask

// int32 index = 1;
inline void SevenDayTask::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::index() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayTask.index)
  return _internal_index();
}
inline void SevenDayTask::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SevenDayTask::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayTask.index)
}

// int32 fish_id = 2;
inline void SevenDayTask::clear_fish_id() {
  fish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::_internal_fish_id() const {
  return fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::fish_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayTask.fish_id)
  return _internal_fish_id();
}
inline void SevenDayTask::_internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_id_ = value;
}
inline void SevenDayTask::set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayTask.fish_id)
}

// int32 total_num = 3;
inline void SevenDayTask::clear_total_num() {
  total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::total_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayTask.total_num)
  return _internal_total_num();
}
inline void SevenDayTask::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_num_ = value;
}
inline void SevenDayTask::set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayTask.total_num)
}

// int32 cur_num = 4;
inline void SevenDayTask::clear_cur_num() {
  cur_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::_internal_cur_num() const {
  return cur_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::cur_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayTask.cur_num)
  return _internal_cur_num();
}
inline void SevenDayTask::_internal_set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_num_ = value;
}
inline void SevenDayTask::set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayTask.cur_num)
}

// int32 status = 5;
inline void SevenDayTask::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::status() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayTask.status)
  return _internal_status();
}
inline void SevenDayTask::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SevenDayTask::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayTask.status)
}

// int32 award = 6;
inline void SevenDayTask::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayTask::award() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayTask.award)
  return _internal_award();
}
inline void SevenDayTask::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SevenDayTask::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayTask.award)
}

// -------------------------------------------------------------------

// SevenDayDetail

// int32 day = 1;
inline void SevenDayDetail::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayDetail::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayDetail::day() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayDetail.day)
  return _internal_day();
}
inline void SevenDayDetail::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void SevenDayDetail::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayDetail.day)
}

// int32 box_status = 2;
inline void SevenDayDetail::clear_box_status() {
  box_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayDetail::_internal_box_status() const {
  return box_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SevenDayDetail::box_status() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayDetail.box_status)
  return _internal_box_status();
}
inline void SevenDayDetail::_internal_set_box_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  box_status_ = value;
}
inline void SevenDayDetail::set_box_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_box_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SevenDayDetail.box_status)
}

// .F4BY.SevenDayTask task = 3;
inline bool SevenDayDetail::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool SevenDayDetail::has_task() const {
  return _internal_has_task();
}
inline void SevenDayDetail::clear_task() {
  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::F4BY::SevenDayTask& SevenDayDetail::_internal_task() const {
  const ::F4BY::SevenDayTask* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::SevenDayTask&>(
      ::F4BY::_SevenDayTask_default_instance_);
}
inline const ::F4BY::SevenDayTask& SevenDayDetail::task() const {
  // @@protoc_insertion_point(field_get:F4BY.SevenDayDetail.task)
  return _internal_task();
}
inline void SevenDayDetail::unsafe_arena_set_allocated_task(
    ::F4BY::SevenDayTask* task) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SevenDayDetail.task)
}
inline ::F4BY::SevenDayTask* SevenDayDetail::release_task() {
  
  ::F4BY::SevenDayTask* temp = task_;
  task_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::SevenDayTask* SevenDayDetail::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:F4BY.SevenDayDetail.task)
  
  ::F4BY::SevenDayTask* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::F4BY::SevenDayTask* SevenDayDetail::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::SevenDayTask>(GetArena());
    task_ = p;
  }
  return task_;
}
inline ::F4BY::SevenDayTask* SevenDayDetail::mutable_task() {
  // @@protoc_insertion_point(field_mutable:F4BY.SevenDayDetail.task)
  return _internal_mutable_task();
}
inline void SevenDayDetail::set_allocated_task(::F4BY::SevenDayTask* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SevenDayDetail.task)
}

// -------------------------------------------------------------------

// CSSevenDayInfo

// -------------------------------------------------------------------

// SCSevenDayInfo

// string start_date = 1;
inline void SCSevenDayInfo::clear_start_date() {
  start_date_.ClearToEmpty();
}
inline const std::string& SCSevenDayInfo::start_date() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.start_date)
  return _internal_start_date();
}
inline void SCSevenDayInfo::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.start_date)
}
inline std::string* SCSevenDayInfo::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSevenDayInfo.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& SCSevenDayInfo::_internal_start_date() const {
  return start_date_.Get();
}
inline void SCSevenDayInfo::_internal_set_start_date(const std::string& value) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCSevenDayInfo::set_start_date(std::string&& value) {
  
  start_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCSevenDayInfo.start_date)
}
inline void SCSevenDayInfo::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCSevenDayInfo.start_date)
}
inline void SCSevenDayInfo::set_start_date(const char* value,
    size_t size) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCSevenDayInfo.start_date)
}
inline std::string* SCSevenDayInfo::_internal_mutable_start_date() {
  
  return start_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCSevenDayInfo::release_start_date() {
  // @@protoc_insertion_point(field_release:F4BY.SCSevenDayInfo.start_date)
  return start_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCSevenDayInfo::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSevenDayInfo.start_date)
}

// string end_date = 2;
inline void SCSevenDayInfo::clear_end_date() {
  end_date_.ClearToEmpty();
}
inline const std::string& SCSevenDayInfo::end_date() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.end_date)
  return _internal_end_date();
}
inline void SCSevenDayInfo::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.end_date)
}
inline std::string* SCSevenDayInfo::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSevenDayInfo.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& SCSevenDayInfo::_internal_end_date() const {
  return end_date_.Get();
}
inline void SCSevenDayInfo::_internal_set_end_date(const std::string& value) {
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCSevenDayInfo::set_end_date(std::string&& value) {
  
  end_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCSevenDayInfo.end_date)
}
inline void SCSevenDayInfo::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCSevenDayInfo.end_date)
}
inline void SCSevenDayInfo::set_end_date(const char* value,
    size_t size) {
  
  end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCSevenDayInfo.end_date)
}
inline std::string* SCSevenDayInfo::_internal_mutable_end_date() {
  
  return end_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCSevenDayInfo::release_end_date() {
  // @@protoc_insertion_point(field_release:F4BY.SCSevenDayInfo.end_date)
  return end_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCSevenDayInfo::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSevenDayInfo.end_date)
}

// int32 cur_day = 3;
inline void SCSevenDayInfo::clear_cur_day() {
  cur_day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::_internal_cur_day() const {
  return cur_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::cur_day() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.cur_day)
  return _internal_cur_day();
}
inline void SCSevenDayInfo::_internal_set_cur_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_day_ = value;
}
inline void SCSevenDayInfo::set_cur_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_day(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.cur_day)
}

// int32 get_remain = 4;
inline void SCSevenDayInfo::clear_get_remain() {
  get_remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::_internal_get_remain() const {
  return get_remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::get_remain() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.get_remain)
  return _internal_get_remain();
}
inline void SCSevenDayInfo::_internal_set_get_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  get_remain_ = value;
}
inline void SCSevenDayInfo::set_get_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_get_remain(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.get_remain)
}

// int32 remain_score = 5;
inline void SCSevenDayInfo::clear_remain_score() {
  remain_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::_internal_remain_score() const {
  return remain_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::remain_score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.remain_score)
  return _internal_remain_score();
}
inline void SCSevenDayInfo::_internal_set_remain_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_score_ = value;
}
inline void SCSevenDayInfo::set_remain_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.remain_score)
}

// int32 ticket = 6;
inline void SCSevenDayInfo::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.ticket)
  return _internal_ticket();
}
inline void SCSevenDayInfo::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCSevenDayInfo::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.ticket)
}

// .F4BY.SevenDayDetail detail = 7;
inline bool SCSevenDayInfo::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool SCSevenDayInfo::has_detail() const {
  return _internal_has_detail();
}
inline void SCSevenDayInfo::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
inline const ::F4BY::SevenDayDetail& SCSevenDayInfo::_internal_detail() const {
  const ::F4BY::SevenDayDetail* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::SevenDayDetail&>(
      ::F4BY::_SevenDayDetail_default_instance_);
}
inline const ::F4BY::SevenDayDetail& SCSevenDayInfo::detail() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.detail)
  return _internal_detail();
}
inline void SCSevenDayInfo::unsafe_arena_set_allocated_detail(
    ::F4BY::SevenDayDetail* detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCSevenDayInfo.detail)
}
inline ::F4BY::SevenDayDetail* SCSevenDayInfo::release_detail() {
  
  ::F4BY::SevenDayDetail* temp = detail_;
  detail_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::SevenDayDetail* SCSevenDayInfo::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:F4BY.SCSevenDayInfo.detail)
  
  ::F4BY::SevenDayDetail* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::F4BY::SevenDayDetail* SCSevenDayInfo::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::SevenDayDetail>(GetArena());
    detail_ = p;
  }
  return detail_;
}
inline ::F4BY::SevenDayDetail* SCSevenDayInfo::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSevenDayInfo.detail)
  return _internal_mutable_detail();
}
inline void SCSevenDayInfo::set_allocated_detail(::F4BY::SevenDayDetail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSevenDayInfo.detail)
}

// int32 gun_enable = 8;
inline void SCSevenDayInfo::clear_gun_enable() {
  gun_enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::_internal_gun_enable() const {
  return gun_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayInfo::gun_enable() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayInfo.gun_enable)
  return _internal_gun_enable();
}
inline void SCSevenDayInfo::_internal_set_gun_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_enable_ = value;
}
inline void SCSevenDayInfo::set_gun_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayInfo.gun_enable)
}

// -------------------------------------------------------------------

// CSSevenDayAward

// int32 day = 1;
inline void CSSevenDayAward::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSevenDayAward::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSevenDayAward::day() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSevenDayAward.day)
  return _internal_day();
}
inline void CSSevenDayAward::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void CSSevenDayAward::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSevenDayAward.day)
}

// int32 index = 2;
inline void CSSevenDayAward::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSevenDayAward::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSevenDayAward::index() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSevenDayAward.index)
  return _internal_index();
}
inline void CSSevenDayAward::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CSSevenDayAward::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSevenDayAward.index)
}

// int32 get_award_type = 3;
inline void CSSevenDayAward::clear_get_award_type() {
  get_award_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSevenDayAward::_internal_get_award_type() const {
  return get_award_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSevenDayAward::get_award_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSevenDayAward.get_award_type)
  return _internal_get_award_type();
}
inline void CSSevenDayAward::_internal_set_get_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  get_award_type_ = value;
}
inline void CSSevenDayAward::set_get_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_get_award_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSevenDayAward.get_award_type)
}

// -------------------------------------------------------------------

// SCSevenDayAward

// int32 score = 1;
inline void SCSevenDayAward::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayAward::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayAward::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayAward.score)
  return _internal_score();
}
inline void SCSevenDayAward::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCSevenDayAward::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayAward.score)
}

// int32 ticket = 2;
inline void SCSevenDayAward::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayAward::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSevenDayAward::ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayAward.ticket)
  return _internal_ticket();
}
inline void SCSevenDayAward::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCSevenDayAward::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSevenDayAward.ticket)
}

// .F4BY.SevenDayDetail task = 3;
inline bool SCSevenDayAward::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool SCSevenDayAward::has_task() const {
  return _internal_has_task();
}
inline void SCSevenDayAward::clear_task() {
  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::F4BY::SevenDayDetail& SCSevenDayAward::_internal_task() const {
  const ::F4BY::SevenDayDetail* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::SevenDayDetail&>(
      ::F4BY::_SevenDayDetail_default_instance_);
}
inline const ::F4BY::SevenDayDetail& SCSevenDayAward::task() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSevenDayAward.task)
  return _internal_task();
}
inline void SCSevenDayAward::unsafe_arena_set_allocated_task(
    ::F4BY::SevenDayDetail* task) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCSevenDayAward.task)
}
inline ::F4BY::SevenDayDetail* SCSevenDayAward::release_task() {
  
  ::F4BY::SevenDayDetail* temp = task_;
  task_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::SevenDayDetail* SCSevenDayAward::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:F4BY.SCSevenDayAward.task)
  
  ::F4BY::SevenDayDetail* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::F4BY::SevenDayDetail* SCSevenDayAward::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::SevenDayDetail>(GetArena());
    task_ = p;
  }
  return task_;
}
inline ::F4BY::SevenDayDetail* SCSevenDayAward::mutable_task() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSevenDayAward.task)
  return _internal_mutable_task();
}
inline void SCSevenDayAward::set_allocated_task(::F4BY::SevenDayDetail* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSevenDayAward.task)
}

// -------------------------------------------------------------------

// SCVipChargeAward

// int32 score = 1;
inline void SCVipChargeAward::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipChargeAward::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipChargeAward::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCVipChargeAward.score)
  return _internal_score();
}
inline void SCVipChargeAward::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCVipChargeAward::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCVipChargeAward.score)
}

// int32 ticket = 2;
inline void SCVipChargeAward::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipChargeAward::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipChargeAward::ticket() const {
  // @@protoc_insertion_point(field_get:F4BY.SCVipChargeAward.ticket)
  return _internal_ticket();
}
inline void SCVipChargeAward::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCVipChargeAward::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:F4BY.SCVipChargeAward.ticket)
}

// -------------------------------------------------------------------

// CSClickStatistic

// string num = 1;
inline void CSClickStatistic::clear_num() {
  num_.ClearToEmpty();
}
inline const std::string& CSClickStatistic::num() const {
  // @@protoc_insertion_point(field_get:F4BY.CSClickStatistic.num)
  return _internal_num();
}
inline void CSClickStatistic::set_num(const std::string& value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:F4BY.CSClickStatistic.num)
}
inline std::string* CSClickStatistic::mutable_num() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSClickStatistic.num)
  return _internal_mutable_num();
}
inline const std::string& CSClickStatistic::_internal_num() const {
  return num_.Get();
}
inline void CSClickStatistic::_internal_set_num(const std::string& value) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSClickStatistic::set_num(std::string&& value) {
  
  num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CSClickStatistic.num)
}
inline void CSClickStatistic::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CSClickStatistic.num)
}
inline void CSClickStatistic::set_num(const char* value,
    size_t size) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CSClickStatistic.num)
}
inline std::string* CSClickStatistic::_internal_mutable_num() {
  
  return num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSClickStatistic::release_num() {
  // @@protoc_insertion_point(field_release:F4BY.CSClickStatistic.num)
  return num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSClickStatistic::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    
  } else {
    
  }
  num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSClickStatistic.num)
}

// bool not_repeat = 2;
inline void CSClickStatistic::clear_not_repeat() {
  not_repeat_ = false;
}
inline bool CSClickStatistic::_internal_not_repeat() const {
  return not_repeat_;
}
inline bool CSClickStatistic::not_repeat() const {
  // @@protoc_insertion_point(field_get:F4BY.CSClickStatistic.not_repeat)
  return _internal_not_repeat();
}
inline void CSClickStatistic::_internal_set_not_repeat(bool value) {
  
  not_repeat_ = value;
}
inline void CSClickStatistic::set_not_repeat(bool value) {
  _internal_set_not_repeat(value);
  // @@protoc_insertion_point(field_set:F4BY.CSClickStatistic.not_repeat)
}

// -------------------------------------------------------------------

// CSNewClickStatistic

// string num = 1;
inline void CSNewClickStatistic::clear_num() {
  num_.ClearToEmpty();
}
inline const std::string& CSNewClickStatistic::num() const {
  // @@protoc_insertion_point(field_get:F4BY.CSNewClickStatistic.num)
  return _internal_num();
}
inline void CSNewClickStatistic::set_num(const std::string& value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:F4BY.CSNewClickStatistic.num)
}
inline std::string* CSNewClickStatistic::mutable_num() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSNewClickStatistic.num)
  return _internal_mutable_num();
}
inline const std::string& CSNewClickStatistic::_internal_num() const {
  return num_.Get();
}
inline void CSNewClickStatistic::_internal_set_num(const std::string& value) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSNewClickStatistic::set_num(std::string&& value) {
  
  num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CSNewClickStatistic.num)
}
inline void CSNewClickStatistic::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CSNewClickStatistic.num)
}
inline void CSNewClickStatistic::set_num(const char* value,
    size_t size) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CSNewClickStatistic.num)
}
inline std::string* CSNewClickStatistic::_internal_mutable_num() {
  
  return num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSNewClickStatistic::release_num() {
  // @@protoc_insertion_point(field_release:F4BY.CSNewClickStatistic.num)
  return num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSNewClickStatistic::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    
  } else {
    
  }
  num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSNewClickStatistic.num)
}

// -------------------------------------------------------------------

// CSUserLog

// int32 type = 1;
inline void CSUserLog::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserLog::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserLog::type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserLog.type)
  return _internal_type();
}
inline void CSUserLog::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSUserLog::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserLog.type)
}

// string score = 2;
inline void CSUserLog::clear_score() {
  score_.ClearToEmpty();
}
inline const std::string& CSUserLog::score() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserLog.score)
  return _internal_score();
}
inline void CSUserLog::set_score(const std::string& value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserLog.score)
}
inline std::string* CSUserLog::mutable_score() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSUserLog.score)
  return _internal_mutable_score();
}
inline const std::string& CSUserLog::_internal_score() const {
  return score_.Get();
}
inline void CSUserLog::_internal_set_score(const std::string& value) {
  
  score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSUserLog::set_score(std::string&& value) {
  
  score_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CSUserLog.score)
}
inline void CSUserLog::set_score(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CSUserLog.score)
}
inline void CSUserLog::set_score(const char* value,
    size_t size) {
  
  score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CSUserLog.score)
}
inline std::string* CSUserLog::_internal_mutable_score() {
  
  return score_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSUserLog::release_score() {
  // @@protoc_insertion_point(field_release:F4BY.CSUserLog.score)
  return score_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSUserLog::set_allocated_score(std::string* score) {
  if (score != nullptr) {
    
  } else {
    
  }
  score_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), score,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSUserLog.score)
}

// string content = 3;
inline void CSUserLog::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& CSUserLog::content() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserLog.content)
  return _internal_content();
}
inline void CSUserLog::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserLog.content)
}
inline std::string* CSUserLog::mutable_content() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSUserLog.content)
  return _internal_mutable_content();
}
inline const std::string& CSUserLog::_internal_content() const {
  return content_.Get();
}
inline void CSUserLog::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSUserLog::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CSUserLog.content)
}
inline void CSUserLog::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CSUserLog.content)
}
inline void CSUserLog::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CSUserLog.content)
}
inline std::string* CSUserLog::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSUserLog::release_content() {
  // @@protoc_insertion_point(field_release:F4BY.CSUserLog.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSUserLog::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSUserLog.content)
}

// -------------------------------------------------------------------

// CSUserEvent

// int32 id = 1;
inline void CSUserEvent::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserEvent::id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserEvent.id)
  return _internal_id();
}
inline void CSUserEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSUserEvent::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserEvent.id)
}

// int32 status = 2;
inline void CSUserEvent::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserEvent::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserEvent::status() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUserEvent.status)
  return _internal_status();
}
inline void CSUserEvent::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void CSUserEvent::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUserEvent.status)
}

// -------------------------------------------------------------------

// CSGetAwardPoolRecord

// -------------------------------------------------------------------

// AwardPoolRecord

// string time = 1;
inline void AwardPoolRecord::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& AwardPoolRecord::time() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardPoolRecord.time)
  return _internal_time();
}
inline void AwardPoolRecord::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardPoolRecord.time)
}
inline std::string* AwardPoolRecord::mutable_time() {
  // @@protoc_insertion_point(field_mutable:F4BY.AwardPoolRecord.time)
  return _internal_mutable_time();
}
inline const std::string& AwardPoolRecord::_internal_time() const {
  return time_.Get();
}
inline void AwardPoolRecord::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardPoolRecord::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.AwardPoolRecord.time)
}
inline void AwardPoolRecord::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.AwardPoolRecord.time)
}
inline void AwardPoolRecord::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.AwardPoolRecord.time)
}
inline std::string* AwardPoolRecord::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardPoolRecord::release_time() {
  // @@protoc_insertion_point(field_release:F4BY.AwardPoolRecord.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardPoolRecord::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.AwardPoolRecord.time)
}

// string name = 2;
inline void AwardPoolRecord::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AwardPoolRecord::name() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardPoolRecord.name)
  return _internal_name();
}
inline void AwardPoolRecord::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardPoolRecord.name)
}
inline std::string* AwardPoolRecord::mutable_name() {
  // @@protoc_insertion_point(field_mutable:F4BY.AwardPoolRecord.name)
  return _internal_mutable_name();
}
inline const std::string& AwardPoolRecord::_internal_name() const {
  return name_.Get();
}
inline void AwardPoolRecord::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardPoolRecord::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.AwardPoolRecord.name)
}
inline void AwardPoolRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.AwardPoolRecord.name)
}
inline void AwardPoolRecord::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.AwardPoolRecord.name)
}
inline std::string* AwardPoolRecord::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardPoolRecord::release_name() {
  // @@protoc_insertion_point(field_release:F4BY.AwardPoolRecord.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardPoolRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.AwardPoolRecord.name)
}

// int32 poolId = 3;
inline void AwardPoolRecord::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::_internal_poolid() const {
  return poolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::poolid() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardPoolRecord.poolId)
  return _internal_poolid();
}
inline void AwardPoolRecord::_internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
}
inline void AwardPoolRecord::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardPoolRecord.poolId)
}

// int32 award = 4;
inline void AwardPoolRecord::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::award() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardPoolRecord.award)
  return _internal_award();
}
inline void AwardPoolRecord::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void AwardPoolRecord::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardPoolRecord.award)
}

// int32 playerId = 5;
inline void AwardPoolRecord::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::playerid() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardPoolRecord.playerId)
  return _internal_playerid();
}
inline void AwardPoolRecord::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void AwardPoolRecord::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardPoolRecord.playerId)
}

// -------------------------------------------------------------------

// SCGetAwardPoolRecord

// repeated .F4BY.AwardPoolRecord records = 1;
inline int SCGetAwardPoolRecord::_internal_records_size() const {
  return records_.size();
}
inline int SCGetAwardPoolRecord::records_size() const {
  return _internal_records_size();
}
inline void SCGetAwardPoolRecord::clear_records() {
  records_.Clear();
}
inline ::F4BY::AwardPoolRecord* SCGetAwardPoolRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCGetAwardPoolRecord.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardPoolRecord >*
SCGetAwardPoolRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCGetAwardPoolRecord.records)
  return &records_;
}
inline const ::F4BY::AwardPoolRecord& SCGetAwardPoolRecord::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::F4BY::AwardPoolRecord& SCGetAwardPoolRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetAwardPoolRecord.records)
  return _internal_records(index);
}
inline ::F4BY::AwardPoolRecord* SCGetAwardPoolRecord::_internal_add_records() {
  return records_.Add();
}
inline ::F4BY::AwardPoolRecord* SCGetAwardPoolRecord::add_records() {
  // @@protoc_insertion_point(field_add:F4BY.SCGetAwardPoolRecord.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardPoolRecord >&
SCGetAwardPoolRecord::records() const {
  // @@protoc_insertion_point(field_list:F4BY.SCGetAwardPoolRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// SCPropDropNotify

// int32 chair_idx = 1;
inline void SCPropDropNotify::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropDropNotify.chair_idx)
  return _internal_chair_idx();
}
inline void SCPropDropNotify::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCPropDropNotify::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPropDropNotify.chair_idx)
}

// int32 fish_uid = 2;
inline void SCPropDropNotify::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropDropNotify.fish_uid)
  return _internal_fish_uid();
}
inline void SCPropDropNotify::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCPropDropNotify::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPropDropNotify.fish_uid)
}

// repeated .F4BY.Object drop_props = 3;
inline int SCPropDropNotify::_internal_drop_props_size() const {
  return drop_props_.size();
}
inline int SCPropDropNotify::drop_props_size() const {
  return _internal_drop_props_size();
}
inline void SCPropDropNotify::clear_drop_props() {
  drop_props_.Clear();
}
inline ::F4BY::Object* SCPropDropNotify::mutable_drop_props(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCPropDropNotify.drop_props)
  return drop_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >*
SCPropDropNotify::mutable_drop_props() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCPropDropNotify.drop_props)
  return &drop_props_;
}
inline const ::F4BY::Object& SCPropDropNotify::_internal_drop_props(int index) const {
  return drop_props_.Get(index);
}
inline const ::F4BY::Object& SCPropDropNotify::drop_props(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCPropDropNotify.drop_props)
  return _internal_drop_props(index);
}
inline ::F4BY::Object* SCPropDropNotify::_internal_add_drop_props() {
  return drop_props_.Add();
}
inline ::F4BY::Object* SCPropDropNotify::add_drop_props() {
  // @@protoc_insertion_point(field_add:F4BY.SCPropDropNotify.drop_props)
  return _internal_add_drop_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Object >&
SCPropDropNotify::drop_props() const {
  // @@protoc_insertion_point(field_list:F4BY.SCPropDropNotify.drop_props)
  return drop_props_;
}

// -------------------------------------------------------------------

// CSUseProp

// int32 prop_id = 1;
inline void CSUseProp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseProp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUseProp::prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSUseProp.prop_id)
  return _internal_prop_id();
}
inline void CSUseProp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void CSUseProp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSUseProp.prop_id)
}

// -------------------------------------------------------------------

// SCUseProp

// int32 chair_idx = 1;
inline void SCUseProp::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUseProp.chair_idx)
  return _internal_chair_idx();
}
inline void SCUseProp::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUseProp::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUseProp.chair_idx)
}

// int32 prop_id = 2;
inline void SCUseProp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUseProp.prop_id)
  return _internal_prop_id();
}
inline void SCUseProp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void SCUseProp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUseProp.prop_id)
}

// int32 remain = 3;
inline void SCUseProp::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::remain() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUseProp.remain)
  return _internal_remain();
}
inline void SCUseProp::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void SCUseProp::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUseProp.remain)
}

// int32 code = 4;
inline void SCUseProp::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUseProp::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUseProp.code)
  return _internal_code();
}
inline void SCUseProp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCUseProp::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUseProp.code)
}

// string msg = 5;
inline void SCUseProp::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCUseProp::msg() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUseProp.msg)
  return _internal_msg();
}
inline void SCUseProp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUseProp.msg)
}
inline std::string* SCUseProp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCUseProp.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCUseProp::_internal_msg() const {
  return msg_.Get();
}
inline void SCUseProp::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCUseProp::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCUseProp.msg)
}
inline void SCUseProp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCUseProp.msg)
}
inline void SCUseProp::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCUseProp.msg)
}
inline std::string* SCUseProp::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCUseProp::release_msg() {
  // @@protoc_insertion_point(field_release:F4BY.SCUseProp.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCUseProp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCUseProp.msg)
}

// -------------------------------------------------------------------

// SCFrozenTime

// int32 chair_idx = 1;
inline void SCFrozenTime::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFrozenTime::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFrozenTime::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFrozenTime.chair_idx)
  return _internal_chair_idx();
}
inline void SCFrozenTime::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCFrozenTime::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFrozenTime.chair_idx)
}

// bool is_frozen = 2;
inline void SCFrozenTime::clear_is_frozen() {
  is_frozen_ = false;
}
inline bool SCFrozenTime::_internal_is_frozen() const {
  return is_frozen_;
}
inline bool SCFrozenTime::is_frozen() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFrozenTime.is_frozen)
  return _internal_is_frozen();
}
inline void SCFrozenTime::_internal_set_is_frozen(bool value) {
  
  is_frozen_ = value;
}
inline void SCFrozenTime::set_is_frozen(bool value) {
  _internal_set_is_frozen(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFrozenTime.is_frozen)
}

// float frozen_cd = 3;
inline void SCFrozenTime::clear_frozen_cd() {
  frozen_cd_ = 0;
}
inline float SCFrozenTime::_internal_frozen_cd() const {
  return frozen_cd_;
}
inline float SCFrozenTime::frozen_cd() const {
  // @@protoc_insertion_point(field_get:F4BY.SCFrozenTime.frozen_cd)
  return _internal_frozen_cd();
}
inline void SCFrozenTime::_internal_set_frozen_cd(float value) {
  
  frozen_cd_ = value;
}
inline void SCFrozenTime::set_frozen_cd(float value) {
  _internal_set_frozen_cd(value);
  // @@protoc_insertion_point(field_set:F4BY.SCFrozenTime.frozen_cd)
}

// -------------------------------------------------------------------

// SCTreasureFishInfo

// int32 fish_uid = 1;
inline void SCTreasureFishInfo::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishInfo.fish_uid)
  return _internal_fish_uid();
}
inline void SCTreasureFishInfo::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCTreasureFishInfo::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishInfo.fish_uid)
}

// int32 cur_stage = 2;
inline void SCTreasureFishInfo::clear_cur_stage() {
  cur_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::_internal_cur_stage() const {
  return cur_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::cur_stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishInfo.cur_stage)
  return _internal_cur_stage();
}
inline void SCTreasureFishInfo::_internal_set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_stage_ = value;
}
inline void SCTreasureFishInfo::set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishInfo.cur_stage)
}

// int32 accum_money = 3;
inline void SCTreasureFishInfo::clear_accum_money() {
  accum_money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::_internal_accum_money() const {
  return accum_money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::accum_money() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishInfo.accum_money)
  return _internal_accum_money();
}
inline void SCTreasureFishInfo::_internal_set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accum_money_ = value;
}
inline void SCTreasureFishInfo::set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accum_money(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishInfo.accum_money)
}

// int32 fish_value = 4;
inline void SCTreasureFishInfo::clear_fish_value() {
  fish_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::_internal_fish_value() const {
  return fish_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishInfo::fish_value() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishInfo.fish_value)
  return _internal_fish_value();
}
inline void SCTreasureFishInfo::_internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_value_ = value;
}
inline void SCTreasureFishInfo::set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_value(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishInfo.fish_value)
}

// -------------------------------------------------------------------

// SCTreasureFishCatched

// int32 chair_idx = 1;
inline void SCTreasureFishCatched::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.chair_idx)
  return _internal_chair_idx();
}
inline void SCTreasureFishCatched::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTreasureFishCatched::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.chair_idx)
}

// int32 ratio = 2;
inline void SCTreasureFishCatched::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.ratio)
  return _internal_ratio();
}
inline void SCTreasureFishCatched::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCTreasureFishCatched::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.ratio)
}

// int32 fish_uid = 3;
inline void SCTreasureFishCatched::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.fish_uid)
  return _internal_fish_uid();
}
inline void SCTreasureFishCatched::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCTreasureFishCatched::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.fish_uid)
}

// int32 fish_value = 4;
inline void SCTreasureFishCatched::clear_fish_value() {
  fish_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_fish_value() const {
  return fish_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::fish_value() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.fish_value)
  return _internal_fish_value();
}
inline void SCTreasureFishCatched::_internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_value_ = value;
}
inline void SCTreasureFishCatched::set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_value(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.fish_value)
}

// int32 accum_money = 5;
inline void SCTreasureFishCatched::clear_accum_money() {
  accum_money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_accum_money() const {
  return accum_money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::accum_money() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.accum_money)
  return _internal_accum_money();
}
inline void SCTreasureFishCatched::_internal_set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accum_money_ = value;
}
inline void SCTreasureFishCatched::set_accum_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accum_money(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.accum_money)
}

// int32 multiple = 6;
inline void SCTreasureFishCatched::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.multiple)
  return _internal_multiple();
}
inline void SCTreasureFishCatched::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SCTreasureFishCatched::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.multiple)
}

// bool death = 7;
inline void SCTreasureFishCatched::clear_death() {
  death_ = false;
}
inline bool SCTreasureFishCatched::_internal_death() const {
  return death_;
}
inline bool SCTreasureFishCatched::death() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.death)
  return _internal_death();
}
inline void SCTreasureFishCatched::_internal_set_death(bool value) {
  
  death_ = value;
}
inline void SCTreasureFishCatched::set_death(bool value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.death)
}

// int32 earn = 8;
inline void SCTreasureFishCatched::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.earn)
  return _internal_earn();
}
inline void SCTreasureFishCatched::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCTreasureFishCatched::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.earn)
}

// int64 user_score = 9;
inline void SCTreasureFishCatched::clear_user_score() {
  user_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCTreasureFishCatched::_internal_user_score() const {
  return user_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCTreasureFishCatched::user_score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.user_score)
  return _internal_user_score();
}
inline void SCTreasureFishCatched::_internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_score_ = value;
}
inline void SCTreasureFishCatched::set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.user_score)
}

// bool display_multiple = 10;
inline void SCTreasureFishCatched::clear_display_multiple() {
  display_multiple_ = false;
}
inline bool SCTreasureFishCatched::_internal_display_multiple() const {
  return display_multiple_;
}
inline bool SCTreasureFishCatched::display_multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.display_multiple)
  return _internal_display_multiple();
}
inline void SCTreasureFishCatched::_internal_set_display_multiple(bool value) {
  
  display_multiple_ = value;
}
inline void SCTreasureFishCatched::set_display_multiple(bool value) {
  _internal_set_display_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.display_multiple)
}

// int32 cur_stage = 11;
inline void SCTreasureFishCatched::clear_cur_stage() {
  cur_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_cur_stage() const {
  return cur_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::cur_stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.cur_stage)
  return _internal_cur_stage();
}
inline void SCTreasureFishCatched::_internal_set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_stage_ = value;
}
inline void SCTreasureFishCatched::set_cur_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.cur_stage)
}

// int32 magic_cube_multi = 12;
inline void SCTreasureFishCatched::clear_magic_cube_multi() {
  magic_cube_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_magic_cube_multi() const {
  return magic_cube_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::magic_cube_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.magic_cube_multi)
  return _internal_magic_cube_multi();
}
inline void SCTreasureFishCatched::_internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magic_cube_multi_ = value;
}
inline void SCTreasureFishCatched::set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magic_cube_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.magic_cube_multi)
}

// repeated .F4BY.MultiInfo multi_list = 13;
inline int SCTreasureFishCatched::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int SCTreasureFishCatched::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void SCTreasureFishCatched::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* SCTreasureFishCatched::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCTreasureFishCatched.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
SCTreasureFishCatched::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCTreasureFishCatched.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& SCTreasureFishCatched::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& SCTreasureFishCatched::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* SCTreasureFishCatched::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* SCTreasureFishCatched::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCTreasureFishCatched.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
SCTreasureFishCatched::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCTreasureFishCatched.multi_list)
  return multi_list_;
}

// int32 origin_uid = 14;
inline void SCTreasureFishCatched::clear_origin_uid() {
  origin_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::_internal_origin_uid() const {
  return origin_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureFishCatched::origin_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureFishCatched.origin_uid)
  return _internal_origin_uid();
}
inline void SCTreasureFishCatched::_internal_set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origin_uid_ = value;
}
inline void SCTreasureFishCatched::set_origin_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureFishCatched.origin_uid)
}

// -------------------------------------------------------------------

// MatchPackAddition

// string id = 1;
inline void MatchPackAddition::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MatchPackAddition::id() const {
  // @@protoc_insertion_point(field_get:F4BY.MatchPackAddition.id)
  return _internal_id();
}
inline void MatchPackAddition::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.MatchPackAddition.id)
}
inline std::string* MatchPackAddition::mutable_id() {
  // @@protoc_insertion_point(field_mutable:F4BY.MatchPackAddition.id)
  return _internal_mutable_id();
}
inline const std::string& MatchPackAddition::_internal_id() const {
  return id_.Get();
}
inline void MatchPackAddition::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchPackAddition::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.MatchPackAddition.id)
}
inline void MatchPackAddition::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.MatchPackAddition.id)
}
inline void MatchPackAddition::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.MatchPackAddition.id)
}
inline std::string* MatchPackAddition::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchPackAddition::release_id() {
  // @@protoc_insertion_point(field_release:F4BY.MatchPackAddition.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchPackAddition::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.MatchPackAddition.id)
}

// bool is_buy = 2;
inline void MatchPackAddition::clear_is_buy() {
  is_buy_ = false;
}
inline bool MatchPackAddition::_internal_is_buy() const {
  return is_buy_;
}
inline bool MatchPackAddition::is_buy() const {
  // @@protoc_insertion_point(field_get:F4BY.MatchPackAddition.is_buy)
  return _internal_is_buy();
}
inline void MatchPackAddition::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void MatchPackAddition::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:F4BY.MatchPackAddition.is_buy)
}

// float score_addition = 3;
inline void MatchPackAddition::clear_score_addition() {
  score_addition_ = 0;
}
inline float MatchPackAddition::_internal_score_addition() const {
  return score_addition_;
}
inline float MatchPackAddition::score_addition() const {
  // @@protoc_insertion_point(field_get:F4BY.MatchPackAddition.score_addition)
  return _internal_score_addition();
}
inline void MatchPackAddition::_internal_set_score_addition(float value) {
  
  score_addition_ = value;
}
inline void MatchPackAddition::set_score_addition(float value) {
  _internal_set_score_addition(value);
  // @@protoc_insertion_point(field_set:F4BY.MatchPackAddition.score_addition)
}

// float reaward_addition = 4;
inline void MatchPackAddition::clear_reaward_addition() {
  reaward_addition_ = 0;
}
inline float MatchPackAddition::_internal_reaward_addition() const {
  return reaward_addition_;
}
inline float MatchPackAddition::reaward_addition() const {
  // @@protoc_insertion_point(field_get:F4BY.MatchPackAddition.reaward_addition)
  return _internal_reaward_addition();
}
inline void MatchPackAddition::_internal_set_reaward_addition(float value) {
  
  reaward_addition_ = value;
}
inline void MatchPackAddition::set_reaward_addition(float value) {
  _internal_set_reaward_addition(value);
  // @@protoc_insertion_point(field_set:F4BY.MatchPackAddition.reaward_addition)
}

// int32 card = 5;
inline void MatchPackAddition::clear_card() {
  card_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::_internal_card() const {
  return card_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::card() const {
  // @@protoc_insertion_point(field_get:F4BY.MatchPackAddition.card)
  return _internal_card();
}
inline void MatchPackAddition::_internal_set_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_ = value;
}
inline void MatchPackAddition::set_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:F4BY.MatchPackAddition.card)
}

// int32 sec = 6;
inline void MatchPackAddition::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::sec() const {
  // @@protoc_insertion_point(field_get:F4BY.MatchPackAddition.sec)
  return _internal_sec();
}
inline void MatchPackAddition::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
}
inline void MatchPackAddition::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:F4BY.MatchPackAddition.sec)
}

// -------------------------------------------------------------------

// CSMatchPackAddition

// -------------------------------------------------------------------

// SCMatchPackAddition

// repeated .F4BY.MatchPackAddition addition = 1;
inline int SCMatchPackAddition::_internal_addition_size() const {
  return addition_.size();
}
inline int SCMatchPackAddition::addition_size() const {
  return _internal_addition_size();
}
inline void SCMatchPackAddition::clear_addition() {
  addition_.Clear();
}
inline ::F4BY::MatchPackAddition* SCMatchPackAddition::mutable_addition(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCMatchPackAddition.addition)
  return addition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MatchPackAddition >*
SCMatchPackAddition::mutable_addition() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCMatchPackAddition.addition)
  return &addition_;
}
inline const ::F4BY::MatchPackAddition& SCMatchPackAddition::_internal_addition(int index) const {
  return addition_.Get(index);
}
inline const ::F4BY::MatchPackAddition& SCMatchPackAddition::addition(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCMatchPackAddition.addition)
  return _internal_addition(index);
}
inline ::F4BY::MatchPackAddition* SCMatchPackAddition::_internal_add_addition() {
  return addition_.Add();
}
inline ::F4BY::MatchPackAddition* SCMatchPackAddition::add_addition() {
  // @@protoc_insertion_point(field_add:F4BY.SCMatchPackAddition.addition)
  return _internal_add_addition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MatchPackAddition >&
SCMatchPackAddition::addition() const {
  // @@protoc_insertion_point(field_list:F4BY.SCMatchPackAddition.addition)
  return addition_;
}

// -------------------------------------------------------------------

// SCMatchPackInvail

// string packId = 1;
inline void SCMatchPackInvail::clear_packid() {
  packid_.ClearToEmpty();
}
inline const std::string& SCMatchPackInvail::packid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCMatchPackInvail.packId)
  return _internal_packid();
}
inline void SCMatchPackInvail::set_packid(const std::string& value) {
  _internal_set_packid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCMatchPackInvail.packId)
}
inline std::string* SCMatchPackInvail::mutable_packid() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCMatchPackInvail.packId)
  return _internal_mutable_packid();
}
inline const std::string& SCMatchPackInvail::_internal_packid() const {
  return packid_.Get();
}
inline void SCMatchPackInvail::_internal_set_packid(const std::string& value) {
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCMatchPackInvail::set_packid(std::string&& value) {
  
  packid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.SCMatchPackInvail.packId)
}
inline void SCMatchPackInvail::set_packid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.SCMatchPackInvail.packId)
}
inline void SCMatchPackInvail::set_packid(const char* value,
    size_t size) {
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.SCMatchPackInvail.packId)
}
inline std::string* SCMatchPackInvail::_internal_mutable_packid() {
  
  return packid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCMatchPackInvail::release_packid() {
  // @@protoc_insertion_point(field_release:F4BY.SCMatchPackInvail.packId)
  return packid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCMatchPackInvail::set_allocated_packid(std::string* packid) {
  if (packid != nullptr) {
    
  } else {
    
  }
  packid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCMatchPackInvail.packId)
}

// -------------------------------------------------------------------

// CSMatchPackBuying

// string packId = 1;
inline void CSMatchPackBuying::clear_packid() {
  packid_.ClearToEmpty();
}
inline const std::string& CSMatchPackBuying::packid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSMatchPackBuying.packId)
  return _internal_packid();
}
inline void CSMatchPackBuying::set_packid(const std::string& value) {
  _internal_set_packid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSMatchPackBuying.packId)
}
inline std::string* CSMatchPackBuying::mutable_packid() {
  // @@protoc_insertion_point(field_mutable:F4BY.CSMatchPackBuying.packId)
  return _internal_mutable_packid();
}
inline const std::string& CSMatchPackBuying::_internal_packid() const {
  return packid_.Get();
}
inline void CSMatchPackBuying::_internal_set_packid(const std::string& value) {
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSMatchPackBuying::set_packid(std::string&& value) {
  
  packid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.CSMatchPackBuying.packId)
}
inline void CSMatchPackBuying::set_packid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.CSMatchPackBuying.packId)
}
inline void CSMatchPackBuying::set_packid(const char* value,
    size_t size) {
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.CSMatchPackBuying.packId)
}
inline std::string* CSMatchPackBuying::_internal_mutable_packid() {
  
  return packid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSMatchPackBuying::release_packid() {
  // @@protoc_insertion_point(field_release:F4BY.CSMatchPackBuying.packId)
  return packid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSMatchPackBuying::set_allocated_packid(std::string* packid) {
  if (packid != nullptr) {
    
  } else {
    
  }
  packid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.CSMatchPackBuying.packId)
}

// -------------------------------------------------------------------

// AwardDetail

// int32 playerId = 1;
inline void AwardDetail::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::playerid() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardDetail.playerId)
  return _internal_playerid();
}
inline void AwardDetail::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void AwardDetail::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardDetail.playerId)
}

// int32 nums = 2;
inline void AwardDetail::clear_nums() {
  nums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_nums() const {
  return nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::nums() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardDetail.nums)
  return _internal_nums();
}
inline void AwardDetail::_internal_set_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nums_ = value;
}
inline void AwardDetail::set_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nums(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardDetail.nums)
}

// int32 period = 3;
inline void AwardDetail::clear_period() {
  period_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::period() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardDetail.period)
  return _internal_period();
}
inline void AwardDetail::_internal_set_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  period_ = value;
}
inline void AwardDetail::set_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardDetail.period)
}

// int32 vip = 4;
inline void AwardDetail::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::vip() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardDetail.vip)
  return _internal_vip();
}
inline void AwardDetail::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void AwardDetail::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardDetail.vip)
}

// string nick = 5;
inline void AwardDetail::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& AwardDetail::nick() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardDetail.nick)
  return _internal_nick();
}
inline void AwardDetail::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardDetail.nick)
}
inline std::string* AwardDetail::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:F4BY.AwardDetail.nick)
  return _internal_mutable_nick();
}
inline const std::string& AwardDetail::_internal_nick() const {
  return nick_.Get();
}
inline void AwardDetail::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardDetail::set_nick(std::string&& value) {
  
  nick_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.AwardDetail.nick)
}
inline void AwardDetail::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.AwardDetail.nick)
}
inline void AwardDetail::set_nick(const char* value,
    size_t size) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.AwardDetail.nick)
}
inline std::string* AwardDetail::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardDetail::release_nick() {
  // @@protoc_insertion_point(field_release:F4BY.AwardDetail.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardDetail::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.AwardDetail.nick)
}

// string photo = 6;
inline void AwardDetail::clear_photo() {
  photo_.ClearToEmpty();
}
inline const std::string& AwardDetail::photo() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardDetail.photo)
  return _internal_photo();
}
inline void AwardDetail::set_photo(const std::string& value) {
  _internal_set_photo(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardDetail.photo)
}
inline std::string* AwardDetail::mutable_photo() {
  // @@protoc_insertion_point(field_mutable:F4BY.AwardDetail.photo)
  return _internal_mutable_photo();
}
inline const std::string& AwardDetail::_internal_photo() const {
  return photo_.Get();
}
inline void AwardDetail::_internal_set_photo(const std::string& value) {
  
  photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardDetail::set_photo(std::string&& value) {
  
  photo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.AwardDetail.photo)
}
inline void AwardDetail::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.AwardDetail.photo)
}
inline void AwardDetail::set_photo(const char* value,
    size_t size) {
  
  photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.AwardDetail.photo)
}
inline std::string* AwardDetail::_internal_mutable_photo() {
  
  return photo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardDetail::release_photo() {
  // @@protoc_insertion_point(field_release:F4BY.AwardDetail.photo)
  return photo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardDetail::set_allocated_photo(std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), photo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.AwardDetail.photo)
}

// -------------------------------------------------------------------

// LuckyAwardNotify

// int32 awardType = 1;
inline void LuckyAwardNotify::clear_awardtype() {
  awardtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyAwardNotify::_internal_awardtype() const {
  return awardtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyAwardNotify::awardtype() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyAwardNotify.awardType)
  return _internal_awardtype();
}
inline void LuckyAwardNotify::_internal_set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  awardtype_ = value;
}
inline void LuckyAwardNotify::set_awardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_awardtype(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyAwardNotify.awardType)
}

// repeated .F4BY.AwardDetail detail = 2;
inline int LuckyAwardNotify::_internal_detail_size() const {
  return detail_.size();
}
inline int LuckyAwardNotify::detail_size() const {
  return _internal_detail_size();
}
inline void LuckyAwardNotify::clear_detail() {
  detail_.Clear();
}
inline ::F4BY::AwardDetail* LuckyAwardNotify::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.LuckyAwardNotify.detail)
  return detail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardDetail >*
LuckyAwardNotify::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.LuckyAwardNotify.detail)
  return &detail_;
}
inline const ::F4BY::AwardDetail& LuckyAwardNotify::_internal_detail(int index) const {
  return detail_.Get(index);
}
inline const ::F4BY::AwardDetail& LuckyAwardNotify::detail(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyAwardNotify.detail)
  return _internal_detail(index);
}
inline ::F4BY::AwardDetail* LuckyAwardNotify::_internal_add_detail() {
  return detail_.Add();
}
inline ::F4BY::AwardDetail* LuckyAwardNotify::add_detail() {
  // @@protoc_insertion_point(field_add:F4BY.LuckyAwardNotify.detail)
  return _internal_add_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardDetail >&
LuckyAwardNotify::detail() const {
  // @@protoc_insertion_point(field_list:F4BY.LuckyAwardNotify.detail)
  return detail_;
}

// -------------------------------------------------------------------

// CSGameItemSwitch

// -------------------------------------------------------------------

// SCGameItemSwitch

// bool lucky_task = 1;
inline void SCGameItemSwitch::clear_lucky_task() {
  lucky_task_ = false;
}
inline bool SCGameItemSwitch::_internal_lucky_task() const {
  return lucky_task_;
}
inline bool SCGameItemSwitch::lucky_task() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGameItemSwitch.lucky_task)
  return _internal_lucky_task();
}
inline void SCGameItemSwitch::_internal_set_lucky_task(bool value) {
  
  lucky_task_ = value;
}
inline void SCGameItemSwitch::set_lucky_task(bool value) {
  _internal_set_lucky_task(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGameItemSwitch.lucky_task)
}

// -------------------------------------------------------------------

// AwardProp

// int32 prop_id = 1;
inline void AwardProp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardProp.prop_id)
  return _internal_prop_id();
}
inline void AwardProp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void AwardProp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardProp.prop_id)
}

// int32 num = 2;
inline void AwardProp::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::num() const {
  // @@protoc_insertion_point(field_get:F4BY.AwardProp.num)
  return _internal_num();
}
inline void AwardProp::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void AwardProp::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:F4BY.AwardProp.num)
}

// -------------------------------------------------------------------

// LuckyTaskInfo

// int32 id = 1;
inline void LuckyTaskInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::id() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyTaskInfo.id)
  return _internal_id();
}
inline void LuckyTaskInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void LuckyTaskInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyTaskInfo.id)
}

// int32 status = 2;
inline void LuckyTaskInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::status() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyTaskInfo.status)
  return _internal_status();
}
inline void LuckyTaskInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void LuckyTaskInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyTaskInfo.status)
}

// int32 score = 3;
inline void LuckyTaskInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::score() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyTaskInfo.score)
  return _internal_score();
}
inline void LuckyTaskInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void LuckyTaskInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyTaskInfo.score)
}

// string text = 4;
inline void LuckyTaskInfo::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& LuckyTaskInfo::text() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyTaskInfo.text)
  return _internal_text();
}
inline void LuckyTaskInfo::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyTaskInfo.text)
}
inline std::string* LuckyTaskInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable:F4BY.LuckyTaskInfo.text)
  return _internal_mutable_text();
}
inline const std::string& LuckyTaskInfo::_internal_text() const {
  return text_.Get();
}
inline void LuckyTaskInfo::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LuckyTaskInfo::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.LuckyTaskInfo.text)
}
inline void LuckyTaskInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.LuckyTaskInfo.text)
}
inline void LuckyTaskInfo::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.LuckyTaskInfo.text)
}
inline std::string* LuckyTaskInfo::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LuckyTaskInfo::release_text() {
  // @@protoc_insertion_point(field_release:F4BY.LuckyTaskInfo.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LuckyTaskInfo::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.LuckyTaskInfo.text)
}

// int32 amount = 5;
inline void LuckyTaskInfo::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::amount() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyTaskInfo.amount)
  return _internal_amount();
}
inline void LuckyTaskInfo::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void LuckyTaskInfo::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyTaskInfo.amount)
}

// int32 target = 6;
inline void LuckyTaskInfo::clear_target() {
  target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::target() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyTaskInfo.target)
  return _internal_target();
}
inline void LuckyTaskInfo::_internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_ = value;
}
inline void LuckyTaskInfo::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyTaskInfo.target)
}

// -------------------------------------------------------------------

// CSLuckyDrawInfo

// -------------------------------------------------------------------

// SCLuckyDrawInfo

// int32 hour_remain_sec = 1;
inline void SCLuckyDrawInfo::clear_hour_remain_sec() {
  hour_remain_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_remain_sec() const {
  return hour_remain_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_remain_sec() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.hour_remain_sec)
  return _internal_hour_remain_sec();
}
inline void SCLuckyDrawInfo::_internal_set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_remain_sec_ = value;
}
inline void SCLuckyDrawInfo::set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour_remain_sec(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.hour_remain_sec)
}

// int32 day_remain_sec = 2;
inline void SCLuckyDrawInfo::clear_day_remain_sec() {
  day_remain_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_remain_sec() const {
  return day_remain_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_remain_sec() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.day_remain_sec)
  return _internal_day_remain_sec();
}
inline void SCLuckyDrawInfo::_internal_set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_remain_sec_ = value;
}
inline void SCLuckyDrawInfo::set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_remain_sec(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.day_remain_sec)
}

// repeated .F4BY.AwardProp hour_reward = 3;
inline int SCLuckyDrawInfo::_internal_hour_reward_size() const {
  return hour_reward_.size();
}
inline int SCLuckyDrawInfo::hour_reward_size() const {
  return _internal_hour_reward_size();
}
inline void SCLuckyDrawInfo::clear_hour_reward() {
  hour_reward_.Clear();
}
inline ::F4BY::AwardProp* SCLuckyDrawInfo::mutable_hour_reward(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCLuckyDrawInfo.hour_reward)
  return hour_reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >*
SCLuckyDrawInfo::mutable_hour_reward() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCLuckyDrawInfo.hour_reward)
  return &hour_reward_;
}
inline const ::F4BY::AwardProp& SCLuckyDrawInfo::_internal_hour_reward(int index) const {
  return hour_reward_.Get(index);
}
inline const ::F4BY::AwardProp& SCLuckyDrawInfo::hour_reward(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.hour_reward)
  return _internal_hour_reward(index);
}
inline ::F4BY::AwardProp* SCLuckyDrawInfo::_internal_add_hour_reward() {
  return hour_reward_.Add();
}
inline ::F4BY::AwardProp* SCLuckyDrawInfo::add_hour_reward() {
  // @@protoc_insertion_point(field_add:F4BY.SCLuckyDrawInfo.hour_reward)
  return _internal_add_hour_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >&
SCLuckyDrawInfo::hour_reward() const {
  // @@protoc_insertion_point(field_list:F4BY.SCLuckyDrawInfo.hour_reward)
  return hour_reward_;
}

// repeated .F4BY.AwardProp day_reward = 4;
inline int SCLuckyDrawInfo::_internal_day_reward_size() const {
  return day_reward_.size();
}
inline int SCLuckyDrawInfo::day_reward_size() const {
  return _internal_day_reward_size();
}
inline void SCLuckyDrawInfo::clear_day_reward() {
  day_reward_.Clear();
}
inline ::F4BY::AwardProp* SCLuckyDrawInfo::mutable_day_reward(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCLuckyDrawInfo.day_reward)
  return day_reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >*
SCLuckyDrawInfo::mutable_day_reward() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCLuckyDrawInfo.day_reward)
  return &day_reward_;
}
inline const ::F4BY::AwardProp& SCLuckyDrawInfo::_internal_day_reward(int index) const {
  return day_reward_.Get(index);
}
inline const ::F4BY::AwardProp& SCLuckyDrawInfo::day_reward(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.day_reward)
  return _internal_day_reward(index);
}
inline ::F4BY::AwardProp* SCLuckyDrawInfo::_internal_add_day_reward() {
  return day_reward_.Add();
}
inline ::F4BY::AwardProp* SCLuckyDrawInfo::add_day_reward() {
  // @@protoc_insertion_point(field_add:F4BY.SCLuckyDrawInfo.day_reward)
  return _internal_add_day_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >&
SCLuckyDrawInfo::day_reward() const {
  // @@protoc_insertion_point(field_list:F4BY.SCLuckyDrawInfo.day_reward)
  return day_reward_;
}

// repeated int32 day_lucky_nums = 5;
inline int SCLuckyDrawInfo::_internal_day_lucky_nums_size() const {
  return day_lucky_nums_.size();
}
inline int SCLuckyDrawInfo::day_lucky_nums_size() const {
  return _internal_day_lucky_nums_size();
}
inline void SCLuckyDrawInfo::clear_day_lucky_nums() {
  day_lucky_nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_lucky_nums(int index) const {
  return day_lucky_nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_lucky_nums(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.day_lucky_nums)
  return _internal_day_lucky_nums(index);
}
inline void SCLuckyDrawInfo::set_day_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_lucky_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.day_lucky_nums)
}
inline void SCLuckyDrawInfo::_internal_add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_lucky_nums_.Add(value);
}
inline void SCLuckyDrawInfo::add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_day_lucky_nums(value);
  // @@protoc_insertion_point(field_add:F4BY.SCLuckyDrawInfo.day_lucky_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::_internal_day_lucky_nums() const {
  return day_lucky_nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::day_lucky_nums() const {
  // @@protoc_insertion_point(field_list:F4BY.SCLuckyDrawInfo.day_lucky_nums)
  return _internal_day_lucky_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::_internal_mutable_day_lucky_nums() {
  return &day_lucky_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::mutable_day_lucky_nums() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCLuckyDrawInfo.day_lucky_nums)
  return _internal_mutable_day_lucky_nums();
}

// int32 score = 6;
inline void SCLuckyDrawInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.score)
  return _internal_score();
}
inline void SCLuckyDrawInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCLuckyDrawInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.score)
}

// int32 hour_total = 7;
inline void SCLuckyDrawInfo::clear_hour_total() {
  hour_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_total() const {
  return hour_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_total() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.hour_total)
  return _internal_hour_total();
}
inline void SCLuckyDrawInfo::_internal_set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_total_ = value;
}
inline void SCLuckyDrawInfo::set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour_total(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.hour_total)
}

// int32 day_total = 8;
inline void SCLuckyDrawInfo::clear_day_total() {
  day_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_total() const {
  return day_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_total() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.day_total)
  return _internal_day_total();
}
inline void SCLuckyDrawInfo::_internal_set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_total_ = value;
}
inline void SCLuckyDrawInfo::set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_total(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.day_total)
}

// int32 hour_award_num = 9;
inline void SCLuckyDrawInfo::clear_hour_award_num() {
  hour_award_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_award_num() const {
  return hour_award_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_award_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.hour_award_num)
  return _internal_hour_award_num();
}
inline void SCLuckyDrawInfo::_internal_set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_award_num_ = value;
}
inline void SCLuckyDrawInfo::set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour_award_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.hour_award_num)
}

// int32 day_award_num = 10;
inline void SCLuckyDrawInfo::clear_day_award_num() {
  day_award_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_award_num() const {
  return day_award_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_award_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.day_award_num)
  return _internal_day_award_num();
}
inline void SCLuckyDrawInfo::_internal_set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_award_num_ = value;
}
inline void SCLuckyDrawInfo::set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_award_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.day_award_num)
}

// int32 next_start_tick = 11;
inline void SCLuckyDrawInfo::clear_next_start_tick() {
  next_start_tick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_next_start_tick() const {
  return next_start_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::next_start_tick() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.next_start_tick)
  return _internal_next_start_tick();
}
inline void SCLuckyDrawInfo::_internal_set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_start_tick_ = value;
}
inline void SCLuckyDrawInfo::set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next_start_tick(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.next_start_tick)
}

// repeated .F4BY.LuckyTaskInfo task_info = 12;
inline int SCLuckyDrawInfo::_internal_task_info_size() const {
  return task_info_.size();
}
inline int SCLuckyDrawInfo::task_info_size() const {
  return _internal_task_info_size();
}
inline void SCLuckyDrawInfo::clear_task_info() {
  task_info_.Clear();
}
inline ::F4BY::LuckyTaskInfo* SCLuckyDrawInfo::mutable_task_info(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCLuckyDrawInfo.task_info)
  return task_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyTaskInfo >*
SCLuckyDrawInfo::mutable_task_info() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCLuckyDrawInfo.task_info)
  return &task_info_;
}
inline const ::F4BY::LuckyTaskInfo& SCLuckyDrawInfo::_internal_task_info(int index) const {
  return task_info_.Get(index);
}
inline const ::F4BY::LuckyTaskInfo& SCLuckyDrawInfo::task_info(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.task_info)
  return _internal_task_info(index);
}
inline ::F4BY::LuckyTaskInfo* SCLuckyDrawInfo::_internal_add_task_info() {
  return task_info_.Add();
}
inline ::F4BY::LuckyTaskInfo* SCLuckyDrawInfo::add_task_info() {
  // @@protoc_insertion_point(field_add:F4BY.SCLuckyDrawInfo.task_info)
  return _internal_add_task_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyTaskInfo >&
SCLuckyDrawInfo::task_info() const {
  // @@protoc_insertion_point(field_list:F4BY.SCLuckyDrawInfo.task_info)
  return task_info_;
}

// int32 exchange_score = 13;
inline void SCLuckyDrawInfo::clear_exchange_score() {
  exchange_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_exchange_score() const {
  return exchange_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::exchange_score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.exchange_score)
  return _internal_exchange_score();
}
inline void SCLuckyDrawInfo::_internal_set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_score_ = value;
}
inline void SCLuckyDrawInfo::set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exchange_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.exchange_score)
}

// int32 next_remain_sec = 14;
inline void SCLuckyDrawInfo::clear_next_remain_sec() {
  next_remain_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_next_remain_sec() const {
  return next_remain_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::next_remain_sec() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.next_remain_sec)
  return _internal_next_remain_sec();
}
inline void SCLuckyDrawInfo::_internal_set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_remain_sec_ = value;
}
inline void SCLuckyDrawInfo::set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next_remain_sec(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.next_remain_sec)
}

// repeated int32 hour_lucky_nums = 15;
inline int SCLuckyDrawInfo::_internal_hour_lucky_nums_size() const {
  return hour_lucky_nums_.size();
}
inline int SCLuckyDrawInfo::hour_lucky_nums_size() const {
  return _internal_hour_lucky_nums_size();
}
inline void SCLuckyDrawInfo::clear_hour_lucky_nums() {
  hour_lucky_nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_lucky_nums(int index) const {
  return hour_lucky_nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_lucky_nums(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyDrawInfo.hour_lucky_nums)
  return _internal_hour_lucky_nums(index);
}
inline void SCLuckyDrawInfo::set_hour_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hour_lucky_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyDrawInfo.hour_lucky_nums)
}
inline void SCLuckyDrawInfo::_internal_add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hour_lucky_nums_.Add(value);
}
inline void SCLuckyDrawInfo::add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hour_lucky_nums(value);
  // @@protoc_insertion_point(field_add:F4BY.SCLuckyDrawInfo.hour_lucky_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::_internal_hour_lucky_nums() const {
  return hour_lucky_nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::hour_lucky_nums() const {
  // @@protoc_insertion_point(field_list:F4BY.SCLuckyDrawInfo.hour_lucky_nums)
  return _internal_hour_lucky_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::_internal_mutable_hour_lucky_nums() {
  return &hour_lucky_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::mutable_hour_lucky_nums() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCLuckyDrawInfo.hour_lucky_nums)
  return _internal_mutable_hour_lucky_nums();
}

// -------------------------------------------------------------------

// CSGetLuckyTaskAward

// int32 task_id = 1;
inline void CSGetLuckyTaskAward::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyTaskAward::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyTaskAward::task_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSGetLuckyTaskAward.task_id)
  return _internal_task_id();
}
inline void CSGetLuckyTaskAward::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
}
inline void CSGetLuckyTaskAward::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSGetLuckyTaskAward.task_id)
}

// -------------------------------------------------------------------

// SCGetLuckyTaskAward

// .F4BY.LuckyTaskInfo task = 1;
inline bool SCGetLuckyTaskAward::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool SCGetLuckyTaskAward::has_task() const {
  return _internal_has_task();
}
inline void SCGetLuckyTaskAward::clear_task() {
  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::F4BY::LuckyTaskInfo& SCGetLuckyTaskAward::_internal_task() const {
  const ::F4BY::LuckyTaskInfo* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::LuckyTaskInfo&>(
      ::F4BY::_LuckyTaskInfo_default_instance_);
}
inline const ::F4BY::LuckyTaskInfo& SCGetLuckyTaskAward::task() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetLuckyTaskAward.task)
  return _internal_task();
}
inline void SCGetLuckyTaskAward::unsafe_arena_set_allocated_task(
    ::F4BY::LuckyTaskInfo* task) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCGetLuckyTaskAward.task)
}
inline ::F4BY::LuckyTaskInfo* SCGetLuckyTaskAward::release_task() {
  
  ::F4BY::LuckyTaskInfo* temp = task_;
  task_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::LuckyTaskInfo* SCGetLuckyTaskAward::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:F4BY.SCGetLuckyTaskAward.task)
  
  ::F4BY::LuckyTaskInfo* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::F4BY::LuckyTaskInfo* SCGetLuckyTaskAward::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::LuckyTaskInfo>(GetArena());
    task_ = p;
  }
  return task_;
}
inline ::F4BY::LuckyTaskInfo* SCGetLuckyTaskAward::mutable_task() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCGetLuckyTaskAward.task)
  return _internal_mutable_task();
}
inline void SCGetLuckyTaskAward::set_allocated_task(::F4BY::LuckyTaskInfo* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCGetLuckyTaskAward.task)
}

// int32 score = 2;
inline void SCGetLuckyTaskAward::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyTaskAward::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyTaskAward::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetLuckyTaskAward.score)
  return _internal_score();
}
inline void SCGetLuckyTaskAward::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCGetLuckyTaskAward::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetLuckyTaskAward.score)
}

// int32 code = 3;
inline void SCGetLuckyTaskAward::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyTaskAward::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyTaskAward::code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetLuckyTaskAward.code)
  return _internal_code();
}
inline void SCGetLuckyTaskAward::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCGetLuckyTaskAward::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetLuckyTaskAward.code)
}

// -------------------------------------------------------------------

// CSGetLuckyNum

// int32 times = 1;
inline void CSGetLuckyNum::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyNum::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyNum::times() const {
  // @@protoc_insertion_point(field_get:F4BY.CSGetLuckyNum.times)
  return _internal_times();
}
inline void CSGetLuckyNum::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void CSGetLuckyNum::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:F4BY.CSGetLuckyNum.times)
}

// -------------------------------------------------------------------

// SCGetLuckyNum

// int32 score = 1;
inline void SCGetLuckyNum::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetLuckyNum.score)
  return _internal_score();
}
inline void SCGetLuckyNum::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCGetLuckyNum::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetLuckyNum.score)
}

// int32 error_code = 2;
inline void SCGetLuckyNum::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::error_code() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetLuckyNum.error_code)
  return _internal_error_code();
}
inline void SCGetLuckyNum::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void SCGetLuckyNum::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetLuckyNum.error_code)
}

// repeated int32 lucky_nums = 3;
inline int SCGetLuckyNum::_internal_lucky_nums_size() const {
  return lucky_nums_.size();
}
inline int SCGetLuckyNum::lucky_nums_size() const {
  return _internal_lucky_nums_size();
}
inline void SCGetLuckyNum::clear_lucky_nums() {
  lucky_nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::_internal_lucky_nums(int index) const {
  return lucky_nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::lucky_nums(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetLuckyNum.lucky_nums)
  return _internal_lucky_nums(index);
}
inline void SCGetLuckyNum::set_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  lucky_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetLuckyNum.lucky_nums)
}
inline void SCGetLuckyNum::_internal_add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  lucky_nums_.Add(value);
}
inline void SCGetLuckyNum::add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_lucky_nums(value);
  // @@protoc_insertion_point(field_add:F4BY.SCGetLuckyNum.lucky_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGetLuckyNum::_internal_lucky_nums() const {
  return lucky_nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGetLuckyNum::lucky_nums() const {
  // @@protoc_insertion_point(field_list:F4BY.SCGetLuckyNum.lucky_nums)
  return _internal_lucky_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGetLuckyNum::_internal_mutable_lucky_nums() {
  return &lucky_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGetLuckyNum::mutable_lucky_nums() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCGetLuckyNum.lucky_nums)
  return _internal_mutable_lucky_nums();
}

// -------------------------------------------------------------------

// CSLuckyRedDot

// -------------------------------------------------------------------

// SCLuckyRedDot

// bool show = 1;
inline void SCLuckyRedDot::clear_show() {
  show_ = false;
}
inline bool SCLuckyRedDot::_internal_show() const {
  return show_;
}
inline bool SCLuckyRedDot::show() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyRedDot.show)
  return _internal_show();
}
inline void SCLuckyRedDot::_internal_set_show(bool value) {
  
  show_ = value;
}
inline void SCLuckyRedDot::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyRedDot.show)
}

// -------------------------------------------------------------------

// LuckyRecord

// int32 vip = 1;
inline void LuckyRecord::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::vip() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyRecord.vip)
  return _internal_vip();
}
inline void LuckyRecord::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void LuckyRecord::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyRecord.vip)
}

// int32 times = 2;
inline void LuckyRecord::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::times() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyRecord.times)
  return _internal_times();
}
inline void LuckyRecord::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void LuckyRecord::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyRecord.times)
}

// int32 lucky_num = 3;
inline void LuckyRecord::clear_lucky_num() {
  lucky_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_lucky_num() const {
  return lucky_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::lucky_num() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyRecord.lucky_num)
  return _internal_lucky_num();
}
inline void LuckyRecord::_internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lucky_num_ = value;
}
inline void LuckyRecord::set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lucky_num(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyRecord.lucky_num)
}

// int32 tick = 4;
inline void LuckyRecord::clear_tick() {
  tick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::tick() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyRecord.tick)
  return _internal_tick();
}
inline void LuckyRecord::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tick_ = value;
}
inline void LuckyRecord::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyRecord.tick)
}

// string nick_name = 5;
inline void LuckyRecord::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& LuckyRecord::nick_name() const {
  // @@protoc_insertion_point(field_get:F4BY.LuckyRecord.nick_name)
  return _internal_nick_name();
}
inline void LuckyRecord::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:F4BY.LuckyRecord.nick_name)
}
inline std::string* LuckyRecord::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:F4BY.LuckyRecord.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& LuckyRecord::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void LuckyRecord::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LuckyRecord::set_nick_name(std::string&& value) {
  
  nick_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:F4BY.LuckyRecord.nick_name)
}
inline void LuckyRecord::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:F4BY.LuckyRecord.nick_name)
}
inline void LuckyRecord::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:F4BY.LuckyRecord.nick_name)
}
inline std::string* LuckyRecord::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LuckyRecord::release_nick_name() {
  // @@protoc_insertion_point(field_release:F4BY.LuckyRecord.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LuckyRecord::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:F4BY.LuckyRecord.nick_name)
}

// -------------------------------------------------------------------

// OwnRecord

// repeated .F4BY.AwardProp reward = 1;
inline int OwnRecord::_internal_reward_size() const {
  return reward_.size();
}
inline int OwnRecord::reward_size() const {
  return _internal_reward_size();
}
inline void OwnRecord::clear_reward() {
  reward_.Clear();
}
inline ::F4BY::AwardProp* OwnRecord::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.OwnRecord.reward)
  return reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >*
OwnRecord::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.OwnRecord.reward)
  return &reward_;
}
inline const ::F4BY::AwardProp& OwnRecord::_internal_reward(int index) const {
  return reward_.Get(index);
}
inline const ::F4BY::AwardProp& OwnRecord::reward(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.OwnRecord.reward)
  return _internal_reward(index);
}
inline ::F4BY::AwardProp* OwnRecord::_internal_add_reward() {
  return reward_.Add();
}
inline ::F4BY::AwardProp* OwnRecord::add_reward() {
  // @@protoc_insertion_point(field_add:F4BY.OwnRecord.reward)
  return _internal_add_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::AwardProp >&
OwnRecord::reward() const {
  // @@protoc_insertion_point(field_list:F4BY.OwnRecord.reward)
  return reward_;
}

// int32 status = 2;
inline void OwnRecord::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::status() const {
  // @@protoc_insertion_point(field_get:F4BY.OwnRecord.status)
  return _internal_status();
}
inline void OwnRecord::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void OwnRecord::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.OwnRecord.status)
}

// int32 tick = 3;
inline void OwnRecord::clear_tick() {
  tick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::tick() const {
  // @@protoc_insertion_point(field_get:F4BY.OwnRecord.tick)
  return _internal_tick();
}
inline void OwnRecord::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tick_ = value;
}
inline void OwnRecord::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:F4BY.OwnRecord.tick)
}

// int32 lucky_num = 4;
inline void OwnRecord::clear_lucky_num() {
  lucky_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::_internal_lucky_num() const {
  return lucky_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::lucky_num() const {
  // @@protoc_insertion_point(field_get:F4BY.OwnRecord.lucky_num)
  return _internal_lucky_num();
}
inline void OwnRecord::_internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lucky_num_ = value;
}
inline void OwnRecord::set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lucky_num(value);
  // @@protoc_insertion_point(field_set:F4BY.OwnRecord.lucky_num)
}

// -------------------------------------------------------------------

// CSLuckyRecord

// int32 type = 1;
inline void CSLuckyRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLuckyRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLuckyRecord::type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSLuckyRecord.type)
  return _internal_type();
}
inline void CSLuckyRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSLuckyRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSLuckyRecord.type)
}

// -------------------------------------------------------------------

// SCLuckyRecord

// int32 type = 1;
inline void SCLuckyRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyRecord::type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyRecord.type)
  return _internal_type();
}
inline void SCLuckyRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCLuckyRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCLuckyRecord.type)
}

// repeated .F4BY.LuckyRecord record = 2;
inline int SCLuckyRecord::_internal_record_size() const {
  return record_.size();
}
inline int SCLuckyRecord::record_size() const {
  return _internal_record_size();
}
inline void SCLuckyRecord::clear_record() {
  record_.Clear();
}
inline ::F4BY::LuckyRecord* SCLuckyRecord::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCLuckyRecord.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyRecord >*
SCLuckyRecord::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCLuckyRecord.record)
  return &record_;
}
inline const ::F4BY::LuckyRecord& SCLuckyRecord::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::F4BY::LuckyRecord& SCLuckyRecord::record(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCLuckyRecord.record)
  return _internal_record(index);
}
inline ::F4BY::LuckyRecord* SCLuckyRecord::_internal_add_record() {
  return record_.Add();
}
inline ::F4BY::LuckyRecord* SCLuckyRecord::add_record() {
  // @@protoc_insertion_point(field_add:F4BY.SCLuckyRecord.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::LuckyRecord >&
SCLuckyRecord::record() const {
  // @@protoc_insertion_point(field_list:F4BY.SCLuckyRecord.record)
  return record_;
}

// -------------------------------------------------------------------

// SCOwnRecord

// repeated .F4BY.OwnRecord record = 1;
inline int SCOwnRecord::_internal_record_size() const {
  return record_.size();
}
inline int SCOwnRecord::record_size() const {
  return _internal_record_size();
}
inline void SCOwnRecord::clear_record() {
  record_.Clear();
}
inline ::F4BY::OwnRecord* SCOwnRecord::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCOwnRecord.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OwnRecord >*
SCOwnRecord::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCOwnRecord.record)
  return &record_;
}
inline const ::F4BY::OwnRecord& SCOwnRecord::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::F4BY::OwnRecord& SCOwnRecord::record(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCOwnRecord.record)
  return _internal_record(index);
}
inline ::F4BY::OwnRecord* SCOwnRecord::_internal_add_record() {
  return record_.Add();
}
inline ::F4BY::OwnRecord* SCOwnRecord::add_record() {
  // @@protoc_insertion_point(field_add:F4BY.SCOwnRecord.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OwnRecord >&
SCOwnRecord::record() const {
  // @@protoc_insertion_point(field_list:F4BY.SCOwnRecord.record)
  return record_;
}

// -------------------------------------------------------------------

// CSBombInfo

// float x = 1;
inline void CSBombInfo::clear_x() {
  x_ = 0;
}
inline float CSBombInfo::_internal_x() const {
  return x_;
}
inline float CSBombInfo::x() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombInfo.x)
  return _internal_x();
}
inline void CSBombInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CSBombInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombInfo.x)
}

// float y = 2;
inline void CSBombInfo::clear_y() {
  y_ = 0;
}
inline float CSBombInfo::_internal_y() const {
  return y_;
}
inline float CSBombInfo::y() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombInfo.y)
  return _internal_y();
}
inline void CSBombInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CSBombInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombInfo.y)
}

// int32 chair_idx = 3;
inline void CSBombInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombInfo.chair_idx)
  return _internal_chair_idx();
}
inline void CSBombInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSBombInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombInfo.chair_idx)
}

// -------------------------------------------------------------------

// SCSyncBomb

// int32 chair_idx = 1;
inline void SCSyncBomb::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncBomb::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncBomb::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.chair_idx)
}

// int32 bombId = 2;
inline void SCSyncBomb::clear_bombid() {
  bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::_internal_bombid() const {
  return bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.bombId)
  return _internal_bombid();
}
inline void SCSyncBomb::_internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bombid_ = value;
}
inline void SCSyncBomb::set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.bombId)
}

// int32 curStatus = 3;
inline void SCSyncBomb::clear_curstatus() {
  curstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::_internal_curstatus() const {
  return curstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::curstatus() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.curStatus)
  return _internal_curstatus();
}
inline void SCSyncBomb::_internal_set_curstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curstatus_ = value;
}
inline void SCSyncBomb::set_curstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curstatus(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.curStatus)
}

// float x = 4;
inline void SCSyncBomb::clear_x() {
  x_ = 0;
}
inline float SCSyncBomb::_internal_x() const {
  return x_;
}
inline float SCSyncBomb::x() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.x)
  return _internal_x();
}
inline void SCSyncBomb::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SCSyncBomb::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.x)
}

// float y = 5;
inline void SCSyncBomb::clear_y() {
  y_ = 0;
}
inline float SCSyncBomb::_internal_y() const {
  return y_;
}
inline float SCSyncBomb::y() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.y)
  return _internal_y();
}
inline void SCSyncBomb::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SCSyncBomb::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.y)
}

// float nextX = 6;
inline void SCSyncBomb::clear_nextx() {
  nextx_ = 0;
}
inline float SCSyncBomb::_internal_nextx() const {
  return nextx_;
}
inline float SCSyncBomb::nextx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.nextX)
  return _internal_nextx();
}
inline void SCSyncBomb::_internal_set_nextx(float value) {
  
  nextx_ = value;
}
inline void SCSyncBomb::set_nextx(float value) {
  _internal_set_nextx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.nextX)
}

// float nextY = 7;
inline void SCSyncBomb::clear_nexty() {
  nexty_ = 0;
}
inline float SCSyncBomb::_internal_nexty() const {
  return nexty_;
}
inline float SCSyncBomb::nexty() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.nextY)
  return _internal_nexty();
}
inline void SCSyncBomb::_internal_set_nexty(float value) {
  
  nexty_ = value;
}
inline void SCSyncBomb::set_nexty(float value) {
  _internal_set_nexty(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.nextY)
}

// int32 score = 8;
inline void SCSyncBomb::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBomb::score() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.score)
  return _internal_score();
}
inline void SCSyncBomb::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCSyncBomb::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.score)
}

// bool isFinish = 9;
inline void SCSyncBomb::clear_isfinish() {
  isfinish_ = false;
}
inline bool SCSyncBomb::_internal_isfinish() const {
  return isfinish_;
}
inline bool SCSyncBomb::isfinish() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBomb.isFinish)
  return _internal_isfinish();
}
inline void SCSyncBomb::_internal_set_isfinish(bool value) {
  
  isfinish_ = value;
}
inline void SCSyncBomb::set_isfinish(bool value) {
  _internal_set_isfinish(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBomb.isFinish)
}

// -------------------------------------------------------------------

// SCSyncBombFinish

// int32 chair_idx = 1;
inline void SCSyncBombFinish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBombFinish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBombFinish::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBombFinish.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncBombFinish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncBombFinish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBombFinish.chair_idx)
}

// int32 bombId = 2;
inline void SCSyncBombFinish::clear_bombid() {
  bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBombFinish::_internal_bombid() const {
  return bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBombFinish::bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBombFinish.bombId)
  return _internal_bombid();
}
inline void SCSyncBombFinish::_internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bombid_ = value;
}
inline void SCSyncBombFinish::set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBombFinish.bombId)
}

// int32 returnMoney = 3;
inline void SCSyncBombFinish::clear_returnmoney() {
  returnmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBombFinish::_internal_returnmoney() const {
  return returnmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncBombFinish::returnmoney() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncBombFinish.returnMoney)
  return _internal_returnmoney();
}
inline void SCSyncBombFinish::_internal_set_returnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  returnmoney_ = value;
}
inline void SCSyncBombFinish::set_returnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_returnmoney(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncBombFinish.returnMoney)
}

// -------------------------------------------------------------------

// CSBombHitFishInfo

// int32 bombId = 1;
inline void CSBombHitFishInfo::clear_bombid() {
  bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombHitFishInfo::_internal_bombid() const {
  return bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombHitFishInfo::bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombHitFishInfo.bombId)
  return _internal_bombid();
}
inline void CSBombHitFishInfo::_internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bombid_ = value;
}
inline void CSBombHitFishInfo::set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombHitFishInfo.bombId)
}

// repeated int32 fishId = 2;
inline int CSBombHitFishInfo::_internal_fishid_size() const {
  return fishid_.size();
}
inline int CSBombHitFishInfo::fishid_size() const {
  return _internal_fishid_size();
}
inline void CSBombHitFishInfo::clear_fishid() {
  fishid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombHitFishInfo::_internal_fishid(int index) const {
  return fishid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombHitFishInfo::fishid(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombHitFishInfo.fishId)
  return _internal_fishid(index);
}
inline void CSBombHitFishInfo::set_fishid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fishid_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombHitFishInfo.fishId)
}
inline void CSBombHitFishInfo::_internal_add_fishid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fishid_.Add(value);
}
inline void CSBombHitFishInfo::add_fishid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fishid(value);
  // @@protoc_insertion_point(field_add:F4BY.CSBombHitFishInfo.fishId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSBombHitFishInfo::_internal_fishid() const {
  return fishid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSBombHitFishInfo::fishid() const {
  // @@protoc_insertion_point(field_list:F4BY.CSBombHitFishInfo.fishId)
  return _internal_fishid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSBombHitFishInfo::_internal_mutable_fishid() {
  return &fishid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSBombHitFishInfo::mutable_fishid() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSBombHitFishInfo.fishId)
  return _internal_mutable_fishid();
}

// int32 chair_idx = 3;
inline void CSBombHitFishInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombHitFishInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombHitFishInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombHitFishInfo.chair_idx)
  return _internal_chair_idx();
}
inline void CSBombHitFishInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSBombHitFishInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombHitFishInfo.chair_idx)
}

// -------------------------------------------------------------------

// SCGetMagicCube

// int32 chair_idx = 1;
inline void SCGetMagicCube::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.chair_idx)
  return _internal_chair_idx();
}
inline void SCGetMagicCube::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCGetMagicCube::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.chair_idx)
}

// int32 bulletType = 2;
inline void SCGetMagicCube::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::bullettype() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.bulletType)
  return _internal_bullettype();
}
inline void SCGetMagicCube::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void SCGetMagicCube::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.bulletType)
}

// bool createWeapon = 3;
inline void SCGetMagicCube::clear_createweapon() {
  createweapon_ = false;
}
inline bool SCGetMagicCube::_internal_createweapon() const {
  return createweapon_;
}
inline bool SCGetMagicCube::createweapon() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.createWeapon)
  return _internal_createweapon();
}
inline void SCGetMagicCube::_internal_set_createweapon(bool value) {
  
  createweapon_ = value;
}
inline void SCGetMagicCube::set_createweapon(bool value) {
  _internal_set_createweapon(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.createWeapon)
}

// bool isSyncInfo = 4;
inline void SCGetMagicCube::clear_issyncinfo() {
  issyncinfo_ = false;
}
inline bool SCGetMagicCube::_internal_issyncinfo() const {
  return issyncinfo_;
}
inline bool SCGetMagicCube::issyncinfo() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.isSyncInfo)
  return _internal_issyncinfo();
}
inline void SCGetMagicCube::_internal_set_issyncinfo(bool value) {
  
  issyncinfo_ = value;
}
inline void SCGetMagicCube::set_issyncinfo(bool value) {
  _internal_set_issyncinfo(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.isSyncInfo)
}

// bool isFinish = 5;
inline void SCGetMagicCube::clear_isfinish() {
  isfinish_ = false;
}
inline bool SCGetMagicCube::_internal_isfinish() const {
  return isfinish_;
}
inline bool SCGetMagicCube::isfinish() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.isFinish)
  return _internal_isfinish();
}
inline void SCGetMagicCube::_internal_set_isfinish(bool value) {
  
  isfinish_ = value;
}
inline void SCGetMagicCube::set_isfinish(bool value) {
  _internal_set_isfinish(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.isFinish)
}

// int32 gunRatio = 6;
inline void SCGetMagicCube::clear_gunratio() {
  gunratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::_internal_gunratio() const {
  return gunratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::gunratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.gunRatio)
  return _internal_gunratio();
}
inline void SCGetMagicCube::_internal_set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gunratio_ = value;
}
inline void SCGetMagicCube::set_gunratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gunratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.gunRatio)
}

// int32 magic_cube_multi = 7;
inline void SCGetMagicCube::clear_magic_cube_multi() {
  magic_cube_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::_internal_magic_cube_multi() const {
  return magic_cube_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetMagicCube::magic_cube_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCGetMagicCube.magic_cube_multi)
  return _internal_magic_cube_multi();
}
inline void SCGetMagicCube::_internal_set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magic_cube_multi_ = value;
}
inline void SCGetMagicCube::set_magic_cube_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magic_cube_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCGetMagicCube.magic_cube_multi)
}

// -------------------------------------------------------------------

// SCMagicCubeBulletInfo

// int32 chair_idx = 1;
inline void SCMagicCubeBulletInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMagicCubeBulletInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMagicCubeBulletInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCMagicCubeBulletInfo.chair_idx)
  return _internal_chair_idx();
}
inline void SCMagicCubeBulletInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCMagicCubeBulletInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCMagicCubeBulletInfo.chair_idx)
}

// int32 totalNum = 2;
inline void SCMagicCubeBulletInfo::clear_totalnum() {
  totalnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMagicCubeBulletInfo::_internal_totalnum() const {
  return totalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMagicCubeBulletInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:F4BY.SCMagicCubeBulletInfo.totalNum)
  return _internal_totalnum();
}
inline void SCMagicCubeBulletInfo::_internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnum_ = value;
}
inline void SCMagicCubeBulletInfo::set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalnum(value);
  // @@protoc_insertion_point(field_set:F4BY.SCMagicCubeBulletInfo.totalNum)
}

// int32 curNum = 3;
inline void SCMagicCubeBulletInfo::clear_curnum() {
  curnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMagicCubeBulletInfo::_internal_curnum() const {
  return curnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMagicCubeBulletInfo::curnum() const {
  // @@protoc_insertion_point(field_get:F4BY.SCMagicCubeBulletInfo.curNum)
  return _internal_curnum();
}
inline void SCMagicCubeBulletInfo::_internal_set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curnum_ = value;
}
inline void SCMagicCubeBulletInfo::set_curnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curnum(value);
  // @@protoc_insertion_point(field_set:F4BY.SCMagicCubeBulletInfo.curNum)
}

// -------------------------------------------------------------------

// CSPreHit

// repeated int32 screen_fish = 1;
inline int CSPreHit::_internal_screen_fish_size() const {
  return screen_fish_.size();
}
inline int CSPreHit::screen_fish_size() const {
  return _internal_screen_fish_size();
}
inline void CSPreHit::clear_screen_fish() {
  screen_fish_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::_internal_screen_fish(int index) const {
  return screen_fish_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreHit::screen_fish(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSPreHit.screen_fish)
  return _internal_screen_fish(index);
}
inline void CSPreHit::set_screen_fish(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fish_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.CSPreHit.screen_fish)
}
inline void CSPreHit::_internal_add_screen_fish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fish_.Add(value);
}
inline void CSPreHit::add_screen_fish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_screen_fish(value);
  // @@protoc_insertion_point(field_add:F4BY.CSPreHit.screen_fish)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSPreHit::_internal_screen_fish() const {
  return screen_fish_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSPreHit::screen_fish() const {
  // @@protoc_insertion_point(field_list:F4BY.CSPreHit.screen_fish)
  return _internal_screen_fish();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSPreHit::_internal_mutable_screen_fish() {
  return &screen_fish_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSPreHit::mutable_screen_fish() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSPreHit.screen_fish)
  return _internal_mutable_screen_fish();
}

// -------------------------------------------------------------------

// SCPreHit

// int32 err = 1;
inline void SCPreHit::clear_err() {
  err_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::err() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPreHit.err)
  return _internal_err();
}
inline void SCPreHit::_internal_set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_ = value;
}
inline void SCPreHit::set_err(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPreHit.err)
}

// int32 fish_uid = 2;
inline void SCPreHit::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPreHit.fish_uid)
  return _internal_fish_uid();
}
inline void SCPreHit::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCPreHit::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPreHit.fish_uid)
}

// int32 chair_id = 3;
inline void SCPreHit::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreHit::chair_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPreHit.chair_id)
  return _internal_chair_id();
}
inline void SCPreHit::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCPreHit::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPreHit.chair_id)
}

// -------------------------------------------------------------------

// CSPreShoot

// int32 chair_idx = 1;
inline void CSPreShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.CSPreShoot.chair_idx)
  return _internal_chair_idx();
}
inline void CSPreShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSPreShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.CSPreShoot.chair_idx)
}

// int32 angle = 2;
inline void CSPreShoot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreShoot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreShoot::angle() const {
  // @@protoc_insertion_point(field_get:F4BY.CSPreShoot.angle)
  return _internal_angle();
}
inline void CSPreShoot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void CSPreShoot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:F4BY.CSPreShoot.angle)
}

// int32 shoot_type = 3;
inline void CSPreShoot::clear_shoot_type() {
  shoot_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreShoot::_internal_shoot_type() const {
  return shoot_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPreShoot::shoot_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSPreShoot.shoot_type)
  return _internal_shoot_type();
}
inline void CSPreShoot::_internal_set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shoot_type_ = value;
}
inline void CSPreShoot::set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shoot_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSPreShoot.shoot_type)
}

// -------------------------------------------------------------------

// SCPreShoot

// int32 chair_idx = 1;
inline void SCPreShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPreShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCPreShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCPreShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPreShoot.chair_idx)
}

// int32 angle = 2;
inline void SCPreShoot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreShoot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreShoot::angle() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPreShoot.angle)
  return _internal_angle();
}
inline void SCPreShoot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void SCPreShoot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPreShoot.angle)
}

// int32 shoot_type = 3;
inline void SCPreShoot::clear_shoot_type() {
  shoot_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreShoot::_internal_shoot_type() const {
  return shoot_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPreShoot::shoot_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPreShoot.shoot_type)
  return _internal_shoot_type();
}
inline void SCPreShoot::_internal_set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shoot_type_ = value;
}
inline void SCPreShoot::set_shoot_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shoot_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCPreShoot.shoot_type)
}

// -------------------------------------------------------------------

// FrozenFish

// int32 fish_id = 1;
inline void FrozenFish::clear_fish_id() {
  fish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrozenFish::_internal_fish_id() const {
  return fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrozenFish::fish_id() const {
  // @@protoc_insertion_point(field_get:F4BY.FrozenFish.fish_id)
  return _internal_fish_id();
}
inline void FrozenFish::_internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_id_ = value;
}
inline void FrozenFish::set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_id(value);
  // @@protoc_insertion_point(field_set:F4BY.FrozenFish.fish_id)
}

// int32 frozen_time = 2;
inline void FrozenFish::clear_frozen_time() {
  frozen_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrozenFish::_internal_frozen_time() const {
  return frozen_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrozenFish::frozen_time() const {
  // @@protoc_insertion_point(field_get:F4BY.FrozenFish.frozen_time)
  return _internal_frozen_time();
}
inline void FrozenFish::_internal_set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frozen_time_ = value;
}
inline void FrozenFish::set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frozen_time(value);
  // @@protoc_insertion_point(field_set:F4BY.FrozenFish.frozen_time)
}

// -------------------------------------------------------------------

// SCFrozenFish

// repeated .F4BY.FrozenFish frozenFish = 1;
inline int SCFrozenFish::_internal_frozenfish_size() const {
  return frozenfish_.size();
}
inline int SCFrozenFish::frozenfish_size() const {
  return _internal_frozenfish_size();
}
inline void SCFrozenFish::clear_frozenfish() {
  frozenfish_.Clear();
}
inline ::F4BY::FrozenFish* SCFrozenFish::mutable_frozenfish(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCFrozenFish.frozenFish)
  return frozenfish_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FrozenFish >*
SCFrozenFish::mutable_frozenfish() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCFrozenFish.frozenFish)
  return &frozenfish_;
}
inline const ::F4BY::FrozenFish& SCFrozenFish::_internal_frozenfish(int index) const {
  return frozenfish_.Get(index);
}
inline const ::F4BY::FrozenFish& SCFrozenFish::frozenfish(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCFrozenFish.frozenFish)
  return _internal_frozenfish(index);
}
inline ::F4BY::FrozenFish* SCFrozenFish::_internal_add_frozenfish() {
  return frozenfish_.Add();
}
inline ::F4BY::FrozenFish* SCFrozenFish::add_frozenfish() {
  // @@protoc_insertion_point(field_add:F4BY.SCFrozenFish.frozenFish)
  return _internal_add_frozenfish();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::FrozenFish >&
SCFrozenFish::frozenfish() const {
  // @@protoc_insertion_point(field_list:F4BY.SCFrozenFish.frozenFish)
  return frozenfish_;
}

// -------------------------------------------------------------------

// SCValentineDayFish

// .F4BY.SCHitFish fish_info = 1;
inline bool SCValentineDayFish::_internal_has_fish_info() const {
  return this != internal_default_instance() && fish_info_ != nullptr;
}
inline bool SCValentineDayFish::has_fish_info() const {
  return _internal_has_fish_info();
}
inline void SCValentineDayFish::clear_fish_info() {
  if (GetArena() == nullptr && fish_info_ != nullptr) {
    delete fish_info_;
  }
  fish_info_ = nullptr;
}
inline const ::F4BY::SCHitFish& SCValentineDayFish::_internal_fish_info() const {
  const ::F4BY::SCHitFish* p = fish_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::SCHitFish&>(
      ::F4BY::_SCHitFish_default_instance_);
}
inline const ::F4BY::SCHitFish& SCValentineDayFish::fish_info() const {
  // @@protoc_insertion_point(field_get:F4BY.SCValentineDayFish.fish_info)
  return _internal_fish_info();
}
inline void SCValentineDayFish::unsafe_arena_set_allocated_fish_info(
    ::F4BY::SCHitFish* fish_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fish_info_);
  }
  fish_info_ = fish_info;
  if (fish_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCValentineDayFish.fish_info)
}
inline ::F4BY::SCHitFish* SCValentineDayFish::release_fish_info() {
  
  ::F4BY::SCHitFish* temp = fish_info_;
  fish_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::SCHitFish* SCValentineDayFish::unsafe_arena_release_fish_info() {
  // @@protoc_insertion_point(field_release:F4BY.SCValentineDayFish.fish_info)
  
  ::F4BY::SCHitFish* temp = fish_info_;
  fish_info_ = nullptr;
  return temp;
}
inline ::F4BY::SCHitFish* SCValentineDayFish::_internal_mutable_fish_info() {
  
  if (fish_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::SCHitFish>(GetArena());
    fish_info_ = p;
  }
  return fish_info_;
}
inline ::F4BY::SCHitFish* SCValentineDayFish::mutable_fish_info() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCValentineDayFish.fish_info)
  return _internal_mutable_fish_info();
}
inline void SCValentineDayFish::set_allocated_fish_info(::F4BY::SCHitFish* fish_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fish_info_;
  }
  if (fish_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fish_info);
    if (message_arena != submessage_arena) {
      fish_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fish_info, submessage_arena);
    }
    
  } else {
    
  }
  fish_info_ = fish_info;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCValentineDayFish.fish_info)
}

// int32 bt_ratio = 2;
inline void SCValentineDayFish::clear_bt_ratio() {
  bt_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::_internal_bt_ratio() const {
  return bt_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::bt_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCValentineDayFish.bt_ratio)
  return _internal_bt_ratio();
}
inline void SCValentineDayFish::_internal_set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_ratio_ = value;
}
inline void SCValentineDayFish::set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCValentineDayFish.bt_ratio)
}

// int32 rand_multi = 3;
inline void SCValentineDayFish::clear_rand_multi() {
  rand_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::_internal_rand_multi() const {
  return rand_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::rand_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCValentineDayFish.rand_multi)
  return _internal_rand_multi();
}
inline void SCValentineDayFish::_internal_set_rand_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rand_multi_ = value;
}
inline void SCValentineDayFish::set_rand_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rand_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCValentineDayFish.rand_multi)
}

// int32 ball_multi = 4;
inline void SCValentineDayFish::clear_ball_multi() {
  ball_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::_internal_ball_multi() const {
  return ball_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::ball_multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCValentineDayFish.ball_multi)
  return _internal_ball_multi();
}
inline void SCValentineDayFish::_internal_set_ball_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ball_multi_ = value;
}
inline void SCValentineDayFish::set_ball_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ball_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCValentineDayFish.ball_multi)
}

// repeated int32 uid_list = 5;
inline int SCValentineDayFish::_internal_uid_list_size() const {
  return uid_list_.size();
}
inline int SCValentineDayFish::uid_list_size() const {
  return _internal_uid_list_size();
}
inline void SCValentineDayFish::clear_uid_list() {
  uid_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::_internal_uid_list(int index) const {
  return uid_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCValentineDayFish::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCValentineDayFish.uid_list)
  return _internal_uid_list(index);
}
inline void SCValentineDayFish::set_uid_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.SCValentineDayFish.uid_list)
}
inline void SCValentineDayFish::_internal_add_uid_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uid_list_.Add(value);
}
inline void SCValentineDayFish::add_uid_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uid_list(value);
  // @@protoc_insertion_point(field_add:F4BY.SCValentineDayFish.uid_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCValentineDayFish::_internal_uid_list() const {
  return uid_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCValentineDayFish::uid_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCValentineDayFish.uid_list)
  return _internal_uid_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCValentineDayFish::_internal_mutable_uid_list() {
  return &uid_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCValentineDayFish::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCValentineDayFish.uid_list)
  return _internal_mutable_uid_list();
}

// -------------------------------------------------------------------

// SCKiRinFish

// .F4BY.SCHitFish fish_info = 1;
inline bool SCKiRinFish::_internal_has_fish_info() const {
  return this != internal_default_instance() && fish_info_ != nullptr;
}
inline bool SCKiRinFish::has_fish_info() const {
  return _internal_has_fish_info();
}
inline void SCKiRinFish::clear_fish_info() {
  if (GetArena() == nullptr && fish_info_ != nullptr) {
    delete fish_info_;
  }
  fish_info_ = nullptr;
}
inline const ::F4BY::SCHitFish& SCKiRinFish::_internal_fish_info() const {
  const ::F4BY::SCHitFish* p = fish_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::SCHitFish&>(
      ::F4BY::_SCHitFish_default_instance_);
}
inline const ::F4BY::SCHitFish& SCKiRinFish::fish_info() const {
  // @@protoc_insertion_point(field_get:F4BY.SCKiRinFish.fish_info)
  return _internal_fish_info();
}
inline void SCKiRinFish::unsafe_arena_set_allocated_fish_info(
    ::F4BY::SCHitFish* fish_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fish_info_);
  }
  fish_info_ = fish_info;
  if (fish_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCKiRinFish.fish_info)
}
inline ::F4BY::SCHitFish* SCKiRinFish::release_fish_info() {
  
  ::F4BY::SCHitFish* temp = fish_info_;
  fish_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::SCHitFish* SCKiRinFish::unsafe_arena_release_fish_info() {
  // @@protoc_insertion_point(field_release:F4BY.SCKiRinFish.fish_info)
  
  ::F4BY::SCHitFish* temp = fish_info_;
  fish_info_ = nullptr;
  return temp;
}
inline ::F4BY::SCHitFish* SCKiRinFish::_internal_mutable_fish_info() {
  
  if (fish_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::SCHitFish>(GetArena());
    fish_info_ = p;
  }
  return fish_info_;
}
inline ::F4BY::SCHitFish* SCKiRinFish::mutable_fish_info() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCKiRinFish.fish_info)
  return _internal_mutable_fish_info();
}
inline void SCKiRinFish::set_allocated_fish_info(::F4BY::SCHitFish* fish_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fish_info_;
  }
  if (fish_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fish_info);
    if (message_arena != submessage_arena) {
      fish_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fish_info, submessage_arena);
    }
    
  } else {
    
  }
  fish_info_ = fish_info;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCKiRinFish.fish_info)
}

// int32 bt_ratio = 2;
inline void SCKiRinFish::clear_bt_ratio() {
  bt_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCKiRinFish::_internal_bt_ratio() const {
  return bt_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCKiRinFish::bt_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCKiRinFish.bt_ratio)
  return _internal_bt_ratio();
}
inline void SCKiRinFish::_internal_set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_ratio_ = value;
}
inline void SCKiRinFish::set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCKiRinFish.bt_ratio)
}

// int32 multi = 3;
inline void SCKiRinFish::clear_multi() {
  multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCKiRinFish::_internal_multi() const {
  return multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCKiRinFish::multi() const {
  // @@protoc_insertion_point(field_get:F4BY.SCKiRinFish.multi)
  return _internal_multi();
}
inline void SCKiRinFish::_internal_set_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multi_ = value;
}
inline void SCKiRinFish::set_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multi(value);
  // @@protoc_insertion_point(field_set:F4BY.SCKiRinFish.multi)
}

// bool is_senior = 4;
inline void SCKiRinFish::clear_is_senior() {
  is_senior_ = false;
}
inline bool SCKiRinFish::_internal_is_senior() const {
  return is_senior_;
}
inline bool SCKiRinFish::is_senior() const {
  // @@protoc_insertion_point(field_get:F4BY.SCKiRinFish.is_senior)
  return _internal_is_senior();
}
inline void SCKiRinFish::_internal_set_is_senior(bool value) {
  
  is_senior_ = value;
}
inline void SCKiRinFish::set_is_senior(bool value) {
  _internal_set_is_senior(value);
  // @@protoc_insertion_point(field_set:F4BY.SCKiRinFish.is_senior)
}

// int32 level = 5;
inline void SCKiRinFish::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCKiRinFish::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCKiRinFish::level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCKiRinFish.level)
  return _internal_level();
}
inline void SCKiRinFish::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SCKiRinFish::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCKiRinFish.level)
}

// -------------------------------------------------------------------

// SCNvWaFishCapture

// int32 chair_idx = 1;
inline void SCNvWaFishCapture::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNvWaFishCapture.chair_idx)
  return _internal_chair_idx();
}
inline void SCNvWaFishCapture::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCNvWaFishCapture::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNvWaFishCapture.chair_idx)
}

// int32 fish_uid = 2;
inline void SCNvWaFishCapture::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNvWaFishCapture.fish_uid)
  return _internal_fish_uid();
}
inline void SCNvWaFishCapture::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCNvWaFishCapture::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNvWaFishCapture.fish_uid)
}

// int32 ratio = 3;
inline void SCNvWaFishCapture::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNvWaFishCapture.ratio)
  return _internal_ratio();
}
inline void SCNvWaFishCapture::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCNvWaFishCapture::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNvWaFishCapture.ratio)
}

// int32 nvwa_multiple = 4;
inline void SCNvWaFishCapture::clear_nvwa_multiple() {
  nvwa_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::_internal_nvwa_multiple() const {
  return nvwa_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::nvwa_multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNvWaFishCapture.nvwa_multiple)
  return _internal_nvwa_multiple();
}
inline void SCNvWaFishCapture::_internal_set_nvwa_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nvwa_multiple_ = value;
}
inline void SCNvWaFishCapture::set_nvwa_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nvwa_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNvWaFishCapture.nvwa_multiple)
}

// int32 bt_kind = 5;
inline void SCNvWaFishCapture::clear_bt_kind() {
  bt_kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::_internal_bt_kind() const {
  return bt_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNvWaFishCapture::bt_kind() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNvWaFishCapture.bt_kind)
  return _internal_bt_kind();
}
inline void SCNvWaFishCapture::_internal_set_bt_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_kind_ = value;
}
inline void SCNvWaFishCapture::set_bt_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_kind(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNvWaFishCapture.bt_kind)
}

// repeated .F4BY.MultiInfo multi_list = 6;
inline int SCNvWaFishCapture::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int SCNvWaFishCapture::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void SCNvWaFishCapture::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* SCNvWaFishCapture::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCNvWaFishCapture.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
SCNvWaFishCapture::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCNvWaFishCapture.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& SCNvWaFishCapture::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& SCNvWaFishCapture::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCNvWaFishCapture.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* SCNvWaFishCapture::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* SCNvWaFishCapture::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCNvWaFishCapture.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
SCNvWaFishCapture::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCNvWaFishCapture.multi_list)
  return multi_list_;
}

// -------------------------------------------------------------------

// SCBombGlobeFishInfo

// int32 chair_idx = 1;
inline void SCBombGlobeFishInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.chair_idx)
  return _internal_chair_idx();
}
inline void SCBombGlobeFishInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCBombGlobeFishInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.chair_idx)
}

// int32 ratio = 2;
inline void SCBombGlobeFishInfo::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.ratio)
  return _internal_ratio();
}
inline void SCBombGlobeFishInfo::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCBombGlobeFishInfo::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.ratio)
}

// int32 fish_uid = 3;
inline void SCBombGlobeFishInfo::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.fish_uid)
  return _internal_fish_uid();
}
inline void SCBombGlobeFishInfo::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCBombGlobeFishInfo::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.fish_uid)
}

// int32 stage = 4;
inline void SCBombGlobeFishInfo::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.stage)
  return _internal_stage();
}
inline void SCBombGlobeFishInfo::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SCBombGlobeFishInfo::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.stage)
}

// int32 bombId = 5;
inline void SCBombGlobeFishInfo::clear_bombid() {
  bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_bombid() const {
  return bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.bombId)
  return _internal_bombid();
}
inline void SCBombGlobeFishInfo::_internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bombid_ = value;
}
inline void SCBombGlobeFishInfo::set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.bombId)
}

// int32 total_earn = 6;
inline void SCBombGlobeFishInfo::clear_total_earn() {
  total_earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_total_earn() const {
  return total_earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::total_earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.total_earn)
  return _internal_total_earn();
}
inline void SCBombGlobeFishInfo::_internal_set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_earn_ = value;
}
inline void SCBombGlobeFishInfo::set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.total_earn)
}

// int32 self_bombId = 7;
inline void SCBombGlobeFishInfo::clear_self_bombid() {
  self_bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_self_bombid() const {
  return self_bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::self_bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.self_bombId)
  return _internal_self_bombid();
}
inline void SCBombGlobeFishInfo::_internal_set_self_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  self_bombid_ = value;
}
inline void SCBombGlobeFishInfo::set_self_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_self_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.self_bombId)
}

// int32 originId = 8;
inline void SCBombGlobeFishInfo::clear_originid() {
  originid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::_internal_originid() const {
  return originid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBombGlobeFishInfo::originid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBombGlobeFishInfo.originId)
  return _internal_originid();
}
inline void SCBombGlobeFishInfo::_internal_set_originid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originid_ = value;
}
inline void SCBombGlobeFishInfo::set_originid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBombGlobeFishInfo.originId)
}

// -------------------------------------------------------------------

// CSBombGlobeFishHit

// int32 bombId = 1;
inline void CSBombGlobeFishHit::clear_bombid() {
  bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombGlobeFishHit::_internal_bombid() const {
  return bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombGlobeFishHit::bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombGlobeFishHit.bombId)
  return _internal_bombid();
}
inline void CSBombGlobeFishHit::_internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bombid_ = value;
}
inline void CSBombGlobeFishHit::set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombGlobeFishHit.bombId)
}

// int32 bt_type = 2;
inline void CSBombGlobeFishHit::clear_bt_type() {
  bt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombGlobeFishHit::_internal_bt_type() const {
  return bt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombGlobeFishHit::bt_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombGlobeFishHit.bt_type)
  return _internal_bt_type();
}
inline void CSBombGlobeFishHit::_internal_set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_type_ = value;
}
inline void CSBombGlobeFishHit::set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombGlobeFishHit.bt_type)
}

// repeated int32 screen_fishes = 3;
inline int CSBombGlobeFishHit::_internal_screen_fishes_size() const {
  return screen_fishes_.size();
}
inline int CSBombGlobeFishHit::screen_fishes_size() const {
  return _internal_screen_fishes_size();
}
inline void CSBombGlobeFishHit::clear_screen_fishes() {
  screen_fishes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombGlobeFishHit::_internal_screen_fishes(int index) const {
  return screen_fishes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBombGlobeFishHit::screen_fishes(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSBombGlobeFishHit.screen_fishes)
  return _internal_screen_fishes(index);
}
inline void CSBombGlobeFishHit::set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.CSBombGlobeFishHit.screen_fishes)
}
inline void CSBombGlobeFishHit::_internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Add(value);
}
inline void CSBombGlobeFishHit::add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_screen_fishes(value);
  // @@protoc_insertion_point(field_add:F4BY.CSBombGlobeFishHit.screen_fishes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSBombGlobeFishHit::_internal_screen_fishes() const {
  return screen_fishes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSBombGlobeFishHit::screen_fishes() const {
  // @@protoc_insertion_point(field_list:F4BY.CSBombGlobeFishHit.screen_fishes)
  return _internal_screen_fishes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSBombGlobeFishHit::_internal_mutable_screen_fishes() {
  return &screen_fishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSBombGlobeFishHit::mutable_screen_fishes() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSBombGlobeFishHit.screen_fishes)
  return _internal_mutable_screen_fishes();
}

// -------------------------------------------------------------------

// SCAnniversaryShowSelect

// int32 chair_idx = 1;
inline void SCAnniversaryShowSelect::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversaryShowSelect::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversaryShowSelect::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversaryShowSelect.chair_idx)
  return _internal_chair_idx();
}
inline void SCAnniversaryShowSelect::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCAnniversaryShowSelect::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversaryShowSelect.chair_idx)
}

// bool show_select = 2;
inline void SCAnniversaryShowSelect::clear_show_select() {
  show_select_ = false;
}
inline bool SCAnniversaryShowSelect::_internal_show_select() const {
  return show_select_;
}
inline bool SCAnniversaryShowSelect::show_select() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversaryShowSelect.show_select)
  return _internal_show_select();
}
inline void SCAnniversaryShowSelect::_internal_set_show_select(bool value) {
  
  show_select_ = value;
}
inline void SCAnniversaryShowSelect::set_show_select(bool value) {
  _internal_set_show_select(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversaryShowSelect.show_select)
}

// int32 remain_time = 3;
inline void SCAnniversaryShowSelect::clear_remain_time() {
  remain_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversaryShowSelect::_internal_remain_time() const {
  return remain_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversaryShowSelect::remain_time() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversaryShowSelect.remain_time)
  return _internal_remain_time();
}
inline void SCAnniversaryShowSelect::_internal_set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_time_ = value;
}
inline void SCAnniversaryShowSelect::set_remain_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_time(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversaryShowSelect.remain_time)
}

// int32 stage = 4;
inline void SCAnniversaryShowSelect::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversaryShowSelect::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversaryShowSelect::stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversaryShowSelect.stage)
  return _internal_stage();
}
inline void SCAnniversaryShowSelect::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SCAnniversaryShowSelect::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversaryShowSelect.stage)
}

// -------------------------------------------------------------------

// CSAnniversarySelectReq

// int32 stage = 1;
inline void CSAnniversarySelectReq::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversarySelectReq::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversarySelectReq::stage() const {
  // @@protoc_insertion_point(field_get:F4BY.CSAnniversarySelectReq.stage)
  return _internal_stage();
}
inline void CSAnniversarySelectReq::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void CSAnniversarySelectReq::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.CSAnniversarySelectReq.stage)
}

// -------------------------------------------------------------------

// AnniversaryStage1Result

// int32 score = 1;
inline void AnniversaryStage1Result::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage1Result::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage1Result::score() const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage1Result.score)
  return _internal_score();
}
inline void AnniversaryStage1Result::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void AnniversaryStage1Result::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage1Result.score)
}

// int32 fish_uid = 2;
inline void AnniversaryStage1Result::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage1Result::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage1Result::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage1Result.fish_uid)
  return _internal_fish_uid();
}
inline void AnniversaryStage1Result::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void AnniversaryStage1Result::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage1Result.fish_uid)
}

// -------------------------------------------------------------------

// AnniversaryStage2Result

// repeated int32 score_list = 1;
inline int AnniversaryStage2Result::_internal_score_list_size() const {
  return score_list_.size();
}
inline int AnniversaryStage2Result::score_list_size() const {
  return _internal_score_list_size();
}
inline void AnniversaryStage2Result::clear_score_list() {
  score_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage2Result::_internal_score_list(int index) const {
  return score_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage2Result::score_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage2Result.score_list)
  return _internal_score_list(index);
}
inline void AnniversaryStage2Result::set_score_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  score_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage2Result.score_list)
}
inline void AnniversaryStage2Result::_internal_add_score_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  score_list_.Add(value);
}
inline void AnniversaryStage2Result::add_score_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_score_list(value);
  // @@protoc_insertion_point(field_add:F4BY.AnniversaryStage2Result.score_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AnniversaryStage2Result::_internal_score_list() const {
  return score_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AnniversaryStage2Result::score_list() const {
  // @@protoc_insertion_point(field_list:F4BY.AnniversaryStage2Result.score_list)
  return _internal_score_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AnniversaryStage2Result::_internal_mutable_score_list() {
  return &score_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AnniversaryStage2Result::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.AnniversaryStage2Result.score_list)
  return _internal_mutable_score_list();
}

// int32 drop_times = 2;
inline void AnniversaryStage2Result::clear_drop_times() {
  drop_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage2Result::_internal_drop_times() const {
  return drop_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage2Result::drop_times() const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage2Result.drop_times)
  return _internal_drop_times();
}
inline void AnniversaryStage2Result::_internal_set_drop_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drop_times_ = value;
}
inline void AnniversaryStage2Result::set_drop_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drop_times(value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage2Result.drop_times)
}

// int32 multiple = 3;
inline void AnniversaryStage2Result::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage2Result::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage2Result::multiple() const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage2Result.multiple)
  return _internal_multiple();
}
inline void AnniversaryStage2Result::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void AnniversaryStage2Result::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage2Result.multiple)
}

// -------------------------------------------------------------------

// AnniversaryStage3Result

// int32 origin_id = 1;
inline void AnniversaryStage3Result::clear_origin_id() {
  origin_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage3Result::_internal_origin_id() const {
  return origin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage3Result::origin_id() const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage3Result.origin_id)
  return _internal_origin_id();
}
inline void AnniversaryStage3Result::_internal_set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origin_id_ = value;
}
inline void AnniversaryStage3Result::set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_id(value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage3Result.origin_id)
}

// int32 self_id = 2;
inline void AnniversaryStage3Result::clear_self_id() {
  self_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage3Result::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnniversaryStage3Result::self_id() const {
  // @@protoc_insertion_point(field_get:F4BY.AnniversaryStage3Result.self_id)
  return _internal_self_id();
}
inline void AnniversaryStage3Result::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  self_id_ = value;
}
inline void AnniversaryStage3Result::set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:F4BY.AnniversaryStage3Result.self_id)
}

// -------------------------------------------------------------------

// SCAnniversarySelectResult

// int32 chair_idx = 1;
inline void SCAnniversarySelectResult::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.chair_idx)
  return _internal_chair_idx();
}
inline void SCAnniversarySelectResult::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCAnniversarySelectResult::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversarySelectResult.chair_idx)
}

// int32 stage = 2;
inline void SCAnniversarySelectResult::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.stage)
  return _internal_stage();
}
inline void SCAnniversarySelectResult::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SCAnniversarySelectResult::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversarySelectResult.stage)
}

// int32 bt_ratio = 3;
inline void SCAnniversarySelectResult::clear_bt_ratio() {
  bt_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::_internal_bt_ratio() const {
  return bt_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::bt_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.bt_ratio)
  return _internal_bt_ratio();
}
inline void SCAnniversarySelectResult::_internal_set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_ratio_ = value;
}
inline void SCAnniversarySelectResult::set_bt_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversarySelectResult.bt_ratio)
}

// repeated .F4BY.MultiInfo multi_list = 4;
inline int SCAnniversarySelectResult::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int SCAnniversarySelectResult::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void SCAnniversarySelectResult::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* SCAnniversarySelectResult::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCAnniversarySelectResult.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
SCAnniversarySelectResult::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCAnniversarySelectResult.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& SCAnniversarySelectResult::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& SCAnniversarySelectResult::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* SCAnniversarySelectResult::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* SCAnniversarySelectResult::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCAnniversarySelectResult.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
SCAnniversarySelectResult::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCAnniversarySelectResult.multi_list)
  return multi_list_;
}

// int32 total_earn = 5;
inline void SCAnniversarySelectResult::clear_total_earn() {
  total_earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::_internal_total_earn() const {
  return total_earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAnniversarySelectResult::total_earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.total_earn)
  return _internal_total_earn();
}
inline void SCAnniversarySelectResult::_internal_set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_earn_ = value;
}
inline void SCAnniversarySelectResult::set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversarySelectResult.total_earn)
}

// bool death = 6;
inline void SCAnniversarySelectResult::clear_death() {
  death_ = false;
}
inline bool SCAnniversarySelectResult::_internal_death() const {
  return death_;
}
inline bool SCAnniversarySelectResult::death() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.death)
  return _internal_death();
}
inline void SCAnniversarySelectResult::_internal_set_death(bool value) {
  
  death_ = value;
}
inline void SCAnniversarySelectResult::set_death(bool value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:F4BY.SCAnniversarySelectResult.death)
}

// .F4BY.AnniversaryStage1Result result1 = 7;
inline bool SCAnniversarySelectResult::_internal_has_result1() const {
  return this != internal_default_instance() && result1_ != nullptr;
}
inline bool SCAnniversarySelectResult::has_result1() const {
  return _internal_has_result1();
}
inline void SCAnniversarySelectResult::clear_result1() {
  if (GetArena() == nullptr && result1_ != nullptr) {
    delete result1_;
  }
  result1_ = nullptr;
}
inline const ::F4BY::AnniversaryStage1Result& SCAnniversarySelectResult::_internal_result1() const {
  const ::F4BY::AnniversaryStage1Result* p = result1_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::AnniversaryStage1Result&>(
      ::F4BY::_AnniversaryStage1Result_default_instance_);
}
inline const ::F4BY::AnniversaryStage1Result& SCAnniversarySelectResult::result1() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.result1)
  return _internal_result1();
}
inline void SCAnniversarySelectResult::unsafe_arena_set_allocated_result1(
    ::F4BY::AnniversaryStage1Result* result1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result1_);
  }
  result1_ = result1;
  if (result1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCAnniversarySelectResult.result1)
}
inline ::F4BY::AnniversaryStage1Result* SCAnniversarySelectResult::release_result1() {
  
  ::F4BY::AnniversaryStage1Result* temp = result1_;
  result1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::AnniversaryStage1Result* SCAnniversarySelectResult::unsafe_arena_release_result1() {
  // @@protoc_insertion_point(field_release:F4BY.SCAnniversarySelectResult.result1)
  
  ::F4BY::AnniversaryStage1Result* temp = result1_;
  result1_ = nullptr;
  return temp;
}
inline ::F4BY::AnniversaryStage1Result* SCAnniversarySelectResult::_internal_mutable_result1() {
  
  if (result1_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::AnniversaryStage1Result>(GetArena());
    result1_ = p;
  }
  return result1_;
}
inline ::F4BY::AnniversaryStage1Result* SCAnniversarySelectResult::mutable_result1() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCAnniversarySelectResult.result1)
  return _internal_mutable_result1();
}
inline void SCAnniversarySelectResult::set_allocated_result1(::F4BY::AnniversaryStage1Result* result1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result1_;
  }
  if (result1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result1);
    if (message_arena != submessage_arena) {
      result1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result1, submessage_arena);
    }
    
  } else {
    
  }
  result1_ = result1;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCAnniversarySelectResult.result1)
}

// .F4BY.AnniversaryStage2Result result2 = 8;
inline bool SCAnniversarySelectResult::_internal_has_result2() const {
  return this != internal_default_instance() && result2_ != nullptr;
}
inline bool SCAnniversarySelectResult::has_result2() const {
  return _internal_has_result2();
}
inline void SCAnniversarySelectResult::clear_result2() {
  if (GetArena() == nullptr && result2_ != nullptr) {
    delete result2_;
  }
  result2_ = nullptr;
}
inline const ::F4BY::AnniversaryStage2Result& SCAnniversarySelectResult::_internal_result2() const {
  const ::F4BY::AnniversaryStage2Result* p = result2_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::AnniversaryStage2Result&>(
      ::F4BY::_AnniversaryStage2Result_default_instance_);
}
inline const ::F4BY::AnniversaryStage2Result& SCAnniversarySelectResult::result2() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.result2)
  return _internal_result2();
}
inline void SCAnniversarySelectResult::unsafe_arena_set_allocated_result2(
    ::F4BY::AnniversaryStage2Result* result2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result2_);
  }
  result2_ = result2;
  if (result2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCAnniversarySelectResult.result2)
}
inline ::F4BY::AnniversaryStage2Result* SCAnniversarySelectResult::release_result2() {
  
  ::F4BY::AnniversaryStage2Result* temp = result2_;
  result2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::AnniversaryStage2Result* SCAnniversarySelectResult::unsafe_arena_release_result2() {
  // @@protoc_insertion_point(field_release:F4BY.SCAnniversarySelectResult.result2)
  
  ::F4BY::AnniversaryStage2Result* temp = result2_;
  result2_ = nullptr;
  return temp;
}
inline ::F4BY::AnniversaryStage2Result* SCAnniversarySelectResult::_internal_mutable_result2() {
  
  if (result2_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::AnniversaryStage2Result>(GetArena());
    result2_ = p;
  }
  return result2_;
}
inline ::F4BY::AnniversaryStage2Result* SCAnniversarySelectResult::mutable_result2() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCAnniversarySelectResult.result2)
  return _internal_mutable_result2();
}
inline void SCAnniversarySelectResult::set_allocated_result2(::F4BY::AnniversaryStage2Result* result2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result2_;
  }
  if (result2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result2);
    if (message_arena != submessage_arena) {
      result2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result2, submessage_arena);
    }
    
  } else {
    
  }
  result2_ = result2;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCAnniversarySelectResult.result2)
}

// .F4BY.AnniversaryStage3Result result3 = 9;
inline bool SCAnniversarySelectResult::_internal_has_result3() const {
  return this != internal_default_instance() && result3_ != nullptr;
}
inline bool SCAnniversarySelectResult::has_result3() const {
  return _internal_has_result3();
}
inline void SCAnniversarySelectResult::clear_result3() {
  if (GetArena() == nullptr && result3_ != nullptr) {
    delete result3_;
  }
  result3_ = nullptr;
}
inline const ::F4BY::AnniversaryStage3Result& SCAnniversarySelectResult::_internal_result3() const {
  const ::F4BY::AnniversaryStage3Result* p = result3_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::AnniversaryStage3Result&>(
      ::F4BY::_AnniversaryStage3Result_default_instance_);
}
inline const ::F4BY::AnniversaryStage3Result& SCAnniversarySelectResult::result3() const {
  // @@protoc_insertion_point(field_get:F4BY.SCAnniversarySelectResult.result3)
  return _internal_result3();
}
inline void SCAnniversarySelectResult::unsafe_arena_set_allocated_result3(
    ::F4BY::AnniversaryStage3Result* result3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result3_);
  }
  result3_ = result3;
  if (result3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCAnniversarySelectResult.result3)
}
inline ::F4BY::AnniversaryStage3Result* SCAnniversarySelectResult::release_result3() {
  
  ::F4BY::AnniversaryStage3Result* temp = result3_;
  result3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::AnniversaryStage3Result* SCAnniversarySelectResult::unsafe_arena_release_result3() {
  // @@protoc_insertion_point(field_release:F4BY.SCAnniversarySelectResult.result3)
  
  ::F4BY::AnniversaryStage3Result* temp = result3_;
  result3_ = nullptr;
  return temp;
}
inline ::F4BY::AnniversaryStage3Result* SCAnniversarySelectResult::_internal_mutable_result3() {
  
  if (result3_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::AnniversaryStage3Result>(GetArena());
    result3_ = p;
  }
  return result3_;
}
inline ::F4BY::AnniversaryStage3Result* SCAnniversarySelectResult::mutable_result3() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCAnniversarySelectResult.result3)
  return _internal_mutable_result3();
}
inline void SCAnniversarySelectResult::set_allocated_result3(::F4BY::AnniversaryStage3Result* result3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result3_;
  }
  if (result3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result3);
    if (message_arena != submessage_arena) {
      result3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result3, submessage_arena);
    }
    
  } else {
    
  }
  result3_ = result3;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCAnniversarySelectResult.result3)
}

// -------------------------------------------------------------------

// CSAnniversaryHit

// int32 bombId = 1;
inline void CSAnniversaryHit::clear_bombid() {
  bombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversaryHit::_internal_bombid() const {
  return bombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversaryHit::bombid() const {
  // @@protoc_insertion_point(field_get:F4BY.CSAnniversaryHit.bombId)
  return _internal_bombid();
}
inline void CSAnniversaryHit::_internal_set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bombid_ = value;
}
inline void CSAnniversaryHit::set_bombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bombid(value);
  // @@protoc_insertion_point(field_set:F4BY.CSAnniversaryHit.bombId)
}

// int32 bt_type = 2;
inline void CSAnniversaryHit::clear_bt_type() {
  bt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversaryHit::_internal_bt_type() const {
  return bt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversaryHit::bt_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSAnniversaryHit.bt_type)
  return _internal_bt_type();
}
inline void CSAnniversaryHit::_internal_set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bt_type_ = value;
}
inline void CSAnniversaryHit::set_bt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bt_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSAnniversaryHit.bt_type)
}

// repeated int32 screen_fishes = 3;
inline int CSAnniversaryHit::_internal_screen_fishes_size() const {
  return screen_fishes_.size();
}
inline int CSAnniversaryHit::screen_fishes_size() const {
  return _internal_screen_fishes_size();
}
inline void CSAnniversaryHit::clear_screen_fishes() {
  screen_fishes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversaryHit::_internal_screen_fishes(int index) const {
  return screen_fishes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSAnniversaryHit::screen_fishes(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.CSAnniversaryHit.screen_fishes)
  return _internal_screen_fishes(index);
}
inline void CSAnniversaryHit::set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Set(index, value);
  // @@protoc_insertion_point(field_set:F4BY.CSAnniversaryHit.screen_fishes)
}
inline void CSAnniversaryHit::_internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Add(value);
}
inline void CSAnniversaryHit::add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_screen_fishes(value);
  // @@protoc_insertion_point(field_add:F4BY.CSAnniversaryHit.screen_fishes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSAnniversaryHit::_internal_screen_fishes() const {
  return screen_fishes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSAnniversaryHit::screen_fishes() const {
  // @@protoc_insertion_point(field_list:F4BY.CSAnniversaryHit.screen_fishes)
  return _internal_screen_fishes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSAnniversaryHit::_internal_mutable_screen_fishes() {
  return &screen_fishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSAnniversaryHit::mutable_screen_fishes() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.CSAnniversaryHit.screen_fishes)
  return _internal_mutable_screen_fishes();
}

// -------------------------------------------------------------------

// SCSyncAnniversaryHitStage

// int32 chair_idx = 1;
inline void SCSyncAnniversaryHitStage::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncAnniversaryHitStage.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncAnniversaryHitStage::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncAnniversaryHitStage::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncAnniversaryHitStage.chair_idx)
}

// int32 origin_id = 2;
inline void SCSyncAnniversaryHitStage::clear_origin_id() {
  origin_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::_internal_origin_id() const {
  return origin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::origin_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncAnniversaryHitStage.origin_id)
  return _internal_origin_id();
}
inline void SCSyncAnniversaryHitStage::_internal_set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origin_id_ = value;
}
inline void SCSyncAnniversaryHitStage::set_origin_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncAnniversaryHitStage.origin_id)
}

// int32 self_id = 3;
inline void SCSyncAnniversaryHitStage::clear_self_id() {
  self_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::_internal_self_id() const {
  return self_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::self_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncAnniversaryHitStage.self_id)
  return _internal_self_id();
}
inline void SCSyncAnniversaryHitStage::_internal_set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  self_id_ = value;
}
inline void SCSyncAnniversaryHitStage::set_self_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_self_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncAnniversaryHitStage.self_id)
}

// int32 stage = 4;
inline void SCSyncAnniversaryHitStage::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::stage() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncAnniversaryHitStage.stage)
  return _internal_stage();
}
inline void SCSyncAnniversaryHitStage::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SCSyncAnniversaryHitStage::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncAnniversaryHitStage.stage)
}

// int32 total_earn = 5;
inline void SCSyncAnniversaryHitStage::clear_total_earn() {
  total_earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::_internal_total_earn() const {
  return total_earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::total_earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncAnniversaryHitStage.total_earn)
  return _internal_total_earn();
}
inline void SCSyncAnniversaryHitStage::_internal_set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_earn_ = value;
}
inline void SCSyncAnniversaryHitStage::set_total_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncAnniversaryHitStage.total_earn)
}

// int32 invalid_earn = 6;
inline void SCSyncAnniversaryHitStage::clear_invalid_earn() {
  invalid_earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::_internal_invalid_earn() const {
  return invalid_earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnniversaryHitStage::invalid_earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncAnniversaryHitStage.invalid_earn)
  return _internal_invalid_earn();
}
inline void SCSyncAnniversaryHitStage::_internal_set_invalid_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_earn_ = value;
}
inline void SCSyncAnniversaryHitStage::set_invalid_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncAnniversaryHitStage.invalid_earn)
}

// -------------------------------------------------------------------

// ScallopLottery

// int32 id = 1;
inline void ScallopLottery::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScallopLottery::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScallopLottery::id() const {
  // @@protoc_insertion_point(field_get:F4BY.ScallopLottery.id)
  return _internal_id();
}
inline void ScallopLottery::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ScallopLottery::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.ScallopLottery.id)
}

// int32 type = 2;
inline void ScallopLottery::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScallopLottery::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScallopLottery::type() const {
  // @@protoc_insertion_point(field_get:F4BY.ScallopLottery.type)
  return _internal_type();
}
inline void ScallopLottery::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ScallopLottery::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:F4BY.ScallopLottery.type)
}

// int32 status = 3;
inline void ScallopLottery::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScallopLottery::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScallopLottery::status() const {
  // @@protoc_insertion_point(field_get:F4BY.ScallopLottery.status)
  return _internal_status();
}
inline void ScallopLottery::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ScallopLottery::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:F4BY.ScallopLottery.status)
}

// .F4BY.Obj reward = 4;
inline bool ScallopLottery::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool ScallopLottery::has_reward() const {
  return _internal_has_reward();
}
inline void ScallopLottery::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::F4BY::Obj& ScallopLottery::_internal_reward() const {
  const ::F4BY::Obj* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Obj&>(
      ::F4BY::_Obj_default_instance_);
}
inline const ::F4BY::Obj& ScallopLottery::reward() const {
  // @@protoc_insertion_point(field_get:F4BY.ScallopLottery.reward)
  return _internal_reward();
}
inline void ScallopLottery::unsafe_arena_set_allocated_reward(
    ::F4BY::Obj* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.ScallopLottery.reward)
}
inline ::F4BY::Obj* ScallopLottery::release_reward() {
  
  ::F4BY::Obj* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Obj* ScallopLottery::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:F4BY.ScallopLottery.reward)
  
  ::F4BY::Obj* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::F4BY::Obj* ScallopLottery::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Obj>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::F4BY::Obj* ScallopLottery::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:F4BY.ScallopLottery.reward)
  return _internal_mutable_reward();
}
inline void ScallopLottery::set_allocated_reward(::F4BY::Obj* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:F4BY.ScallopLottery.reward)
}

// -------------------------------------------------------------------

// SCCaptureScallop

// int32 chair_idx = 1;
inline void SCCaptureScallop::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCaptureScallop.chair_idx)
  return _internal_chair_idx();
}
inline void SCCaptureScallop::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCCaptureScallop::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCaptureScallop.chair_idx)
}

// int32 fish_uid = 2;
inline void SCCaptureScallop::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCaptureScallop.fish_uid)
  return _internal_fish_uid();
}
inline void SCCaptureScallop::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCCaptureScallop::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCaptureScallop.fish_uid)
}

// int32 ratio = 3;
inline void SCCaptureScallop::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCaptureScallop.ratio)
  return _internal_ratio();
}
inline void SCCaptureScallop::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCCaptureScallop::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCaptureScallop.ratio)
}

// int32 time = 4;
inline void SCCaptureScallop::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCaptureScallop::time() const {
  // @@protoc_insertion_point(field_get:F4BY.SCCaptureScallop.time)
  return _internal_time();
}
inline void SCCaptureScallop::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void SCCaptureScallop::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:F4BY.SCCaptureScallop.time)
}

// repeated .F4BY.ScallopLottery lottery_list = 5;
inline int SCCaptureScallop::_internal_lottery_list_size() const {
  return lottery_list_.size();
}
inline int SCCaptureScallop::lottery_list_size() const {
  return _internal_lottery_list_size();
}
inline void SCCaptureScallop::clear_lottery_list() {
  lottery_list_.Clear();
}
inline ::F4BY::ScallopLottery* SCCaptureScallop::mutable_lottery_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCCaptureScallop.lottery_list)
  return lottery_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >*
SCCaptureScallop::mutable_lottery_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCCaptureScallop.lottery_list)
  return &lottery_list_;
}
inline const ::F4BY::ScallopLottery& SCCaptureScallop::_internal_lottery_list(int index) const {
  return lottery_list_.Get(index);
}
inline const ::F4BY::ScallopLottery& SCCaptureScallop::lottery_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCCaptureScallop.lottery_list)
  return _internal_lottery_list(index);
}
inline ::F4BY::ScallopLottery* SCCaptureScallop::_internal_add_lottery_list() {
  return lottery_list_.Add();
}
inline ::F4BY::ScallopLottery* SCCaptureScallop::add_lottery_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCCaptureScallop.lottery_list)
  return _internal_add_lottery_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >&
SCCaptureScallop::lottery_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCCaptureScallop.lottery_list)
  return lottery_list_;
}

// repeated .F4BY.Obj reward_config = 6;
inline int SCCaptureScallop::_internal_reward_config_size() const {
  return reward_config_.size();
}
inline int SCCaptureScallop::reward_config_size() const {
  return _internal_reward_config_size();
}
inline void SCCaptureScallop::clear_reward_config() {
  reward_config_.Clear();
}
inline ::F4BY::Obj* SCCaptureScallop::mutable_reward_config(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCCaptureScallop.reward_config)
  return reward_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >*
SCCaptureScallop::mutable_reward_config() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCCaptureScallop.reward_config)
  return &reward_config_;
}
inline const ::F4BY::Obj& SCCaptureScallop::_internal_reward_config(int index) const {
  return reward_config_.Get(index);
}
inline const ::F4BY::Obj& SCCaptureScallop::reward_config(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCCaptureScallop.reward_config)
  return _internal_reward_config(index);
}
inline ::F4BY::Obj* SCCaptureScallop::_internal_add_reward_config() {
  return reward_config_.Add();
}
inline ::F4BY::Obj* SCCaptureScallop::add_reward_config() {
  // @@protoc_insertion_point(field_add:F4BY.SCCaptureScallop.reward_config)
  return _internal_add_reward_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >&
SCCaptureScallop::reward_config() const {
  // @@protoc_insertion_point(field_list:F4BY.SCCaptureScallop.reward_config)
  return reward_config_;
}

// -------------------------------------------------------------------

// CSOpenScallop

// int32 id = 1;
inline void CSOpenScallop::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenScallop::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOpenScallop::id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSOpenScallop.id)
  return _internal_id();
}
inline void CSOpenScallop::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSOpenScallop::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSOpenScallop.id)
}

// -------------------------------------------------------------------

// SCOpenScallop

// int32 chair_idx = 1;
inline void SCOpenScallop::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenScallop::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOpenScallop::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCOpenScallop.chair_idx)
  return _internal_chair_idx();
}
inline void SCOpenScallop::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCOpenScallop::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCOpenScallop.chair_idx)
}

// .F4BY.ScallopLottery scallop = 2;
inline bool SCOpenScallop::_internal_has_scallop() const {
  return this != internal_default_instance() && scallop_ != nullptr;
}
inline bool SCOpenScallop::has_scallop() const {
  return _internal_has_scallop();
}
inline void SCOpenScallop::clear_scallop() {
  if (GetArena() == nullptr && scallop_ != nullptr) {
    delete scallop_;
  }
  scallop_ = nullptr;
}
inline const ::F4BY::ScallopLottery& SCOpenScallop::_internal_scallop() const {
  const ::F4BY::ScallopLottery* p = scallop_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::ScallopLottery&>(
      ::F4BY::_ScallopLottery_default_instance_);
}
inline const ::F4BY::ScallopLottery& SCOpenScallop::scallop() const {
  // @@protoc_insertion_point(field_get:F4BY.SCOpenScallop.scallop)
  return _internal_scallop();
}
inline void SCOpenScallop::unsafe_arena_set_allocated_scallop(
    ::F4BY::ScallopLottery* scallop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scallop_);
  }
  scallop_ = scallop;
  if (scallop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCOpenScallop.scallop)
}
inline ::F4BY::ScallopLottery* SCOpenScallop::release_scallop() {
  
  ::F4BY::ScallopLottery* temp = scallop_;
  scallop_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::ScallopLottery* SCOpenScallop::unsafe_arena_release_scallop() {
  // @@protoc_insertion_point(field_release:F4BY.SCOpenScallop.scallop)
  
  ::F4BY::ScallopLottery* temp = scallop_;
  scallop_ = nullptr;
  return temp;
}
inline ::F4BY::ScallopLottery* SCOpenScallop::_internal_mutable_scallop() {
  
  if (scallop_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::ScallopLottery>(GetArena());
    scallop_ = p;
  }
  return scallop_;
}
inline ::F4BY::ScallopLottery* SCOpenScallop::mutable_scallop() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCOpenScallop.scallop)
  return _internal_mutable_scallop();
}
inline void SCOpenScallop::set_allocated_scallop(::F4BY::ScallopLottery* scallop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scallop_;
  }
  if (scallop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scallop);
    if (message_arena != submessage_arena) {
      scallop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scallop, submessage_arena);
    }
    
  } else {
    
  }
  scallop_ = scallop;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCOpenScallop.scallop)
}

// -------------------------------------------------------------------

// SCSettleScallopLottery

// int32 chair_idx = 1;
inline void SCSettleScallopLottery::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSettleScallopLottery::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSettleScallopLottery::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSettleScallopLottery.chair_idx)
  return _internal_chair_idx();
}
inline void SCSettleScallopLottery::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSettleScallopLottery::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSettleScallopLottery.chair_idx)
}

// int32 earn = 2;
inline void SCSettleScallopLottery::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSettleScallopLottery::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSettleScallopLottery::earn() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSettleScallopLottery.earn)
  return _internal_earn();
}
inline void SCSettleScallopLottery::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCSettleScallopLottery::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSettleScallopLottery.earn)
}

// repeated .F4BY.ScallopLottery lottery_list = 3;
inline int SCSettleScallopLottery::_internal_lottery_list_size() const {
  return lottery_list_.size();
}
inline int SCSettleScallopLottery::lottery_list_size() const {
  return _internal_lottery_list_size();
}
inline void SCSettleScallopLottery::clear_lottery_list() {
  lottery_list_.Clear();
}
inline ::F4BY::ScallopLottery* SCSettleScallopLottery::mutable_lottery_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSettleScallopLottery.lottery_list)
  return lottery_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >*
SCSettleScallopLottery::mutable_lottery_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCSettleScallopLottery.lottery_list)
  return &lottery_list_;
}
inline const ::F4BY::ScallopLottery& SCSettleScallopLottery::_internal_lottery_list(int index) const {
  return lottery_list_.Get(index);
}
inline const ::F4BY::ScallopLottery& SCSettleScallopLottery::lottery_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCSettleScallopLottery.lottery_list)
  return _internal_lottery_list(index);
}
inline ::F4BY::ScallopLottery* SCSettleScallopLottery::_internal_add_lottery_list() {
  return lottery_list_.Add();
}
inline ::F4BY::ScallopLottery* SCSettleScallopLottery::add_lottery_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCSettleScallopLottery.lottery_list)
  return _internal_add_lottery_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >&
SCSettleScallopLottery::lottery_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCSettleScallopLottery.lottery_list)
  return lottery_list_;
}

// repeated .F4BY.MultiInfo multi_list = 4;
inline int SCSettleScallopLottery::_internal_multi_list_size() const {
  return multi_list_.size();
}
inline int SCSettleScallopLottery::multi_list_size() const {
  return _internal_multi_list_size();
}
inline void SCSettleScallopLottery::clear_multi_list() {
  multi_list_.Clear();
}
inline ::F4BY::MultiInfo* SCSettleScallopLottery::mutable_multi_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSettleScallopLottery.multi_list)
  return multi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >*
SCSettleScallopLottery::mutable_multi_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCSettleScallopLottery.multi_list)
  return &multi_list_;
}
inline const ::F4BY::MultiInfo& SCSettleScallopLottery::_internal_multi_list(int index) const {
  return multi_list_.Get(index);
}
inline const ::F4BY::MultiInfo& SCSettleScallopLottery::multi_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCSettleScallopLottery.multi_list)
  return _internal_multi_list(index);
}
inline ::F4BY::MultiInfo* SCSettleScallopLottery::_internal_add_multi_list() {
  return multi_list_.Add();
}
inline ::F4BY::MultiInfo* SCSettleScallopLottery::add_multi_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCSettleScallopLottery.multi_list)
  return _internal_add_multi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MultiInfo >&
SCSettleScallopLottery::multi_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCSettleScallopLottery.multi_list)
  return multi_list_;
}

// -------------------------------------------------------------------

// SCSyncScallopLottery

// int32 chair_idx = 1;
inline void SCSyncScallopLottery::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncScallopLottery::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncScallopLottery::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncScallopLottery.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncScallopLottery::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncScallopLottery::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncScallopLottery.chair_idx)
}

// int32 ratio = 2;
inline void SCSyncScallopLottery::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncScallopLottery::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncScallopLottery::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncScallopLottery.ratio)
  return _internal_ratio();
}
inline void SCSyncScallopLottery::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCSyncScallopLottery::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncScallopLottery.ratio)
}

// int32 time = 3;
inline void SCSyncScallopLottery::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncScallopLottery::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncScallopLottery::time() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncScallopLottery.time)
  return _internal_time();
}
inline void SCSyncScallopLottery::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void SCSyncScallopLottery::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSyncScallopLottery.time)
}

// repeated .F4BY.ScallopLottery lottery_list = 4;
inline int SCSyncScallopLottery::_internal_lottery_list_size() const {
  return lottery_list_.size();
}
inline int SCSyncScallopLottery::lottery_list_size() const {
  return _internal_lottery_list_size();
}
inline void SCSyncScallopLottery::clear_lottery_list() {
  lottery_list_.Clear();
}
inline ::F4BY::ScallopLottery* SCSyncScallopLottery::mutable_lottery_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSyncScallopLottery.lottery_list)
  return lottery_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >*
SCSyncScallopLottery::mutable_lottery_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCSyncScallopLottery.lottery_list)
  return &lottery_list_;
}
inline const ::F4BY::ScallopLottery& SCSyncScallopLottery::_internal_lottery_list(int index) const {
  return lottery_list_.Get(index);
}
inline const ::F4BY::ScallopLottery& SCSyncScallopLottery::lottery_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncScallopLottery.lottery_list)
  return _internal_lottery_list(index);
}
inline ::F4BY::ScallopLottery* SCSyncScallopLottery::_internal_add_lottery_list() {
  return lottery_list_.Add();
}
inline ::F4BY::ScallopLottery* SCSyncScallopLottery::add_lottery_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCSyncScallopLottery.lottery_list)
  return _internal_add_lottery_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ScallopLottery >&
SCSyncScallopLottery::lottery_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCSyncScallopLottery.lottery_list)
  return lottery_list_;
}

// repeated .F4BY.Obj reward_config = 5;
inline int SCSyncScallopLottery::_internal_reward_config_size() const {
  return reward_config_.size();
}
inline int SCSyncScallopLottery::reward_config_size() const {
  return _internal_reward_config_size();
}
inline void SCSyncScallopLottery::clear_reward_config() {
  reward_config_.Clear();
}
inline ::F4BY::Obj* SCSyncScallopLottery::mutable_reward_config(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSyncScallopLottery.reward_config)
  return reward_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >*
SCSyncScallopLottery::mutable_reward_config() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCSyncScallopLottery.reward_config)
  return &reward_config_;
}
inline const ::F4BY::Obj& SCSyncScallopLottery::_internal_reward_config(int index) const {
  return reward_config_.Get(index);
}
inline const ::F4BY::Obj& SCSyncScallopLottery::reward_config(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncScallopLottery.reward_config)
  return _internal_reward_config(index);
}
inline ::F4BY::Obj* SCSyncScallopLottery::_internal_add_reward_config() {
  return reward_config_.Add();
}
inline ::F4BY::Obj* SCSyncScallopLottery::add_reward_config() {
  // @@protoc_insertion_point(field_add:F4BY.SCSyncScallopLottery.reward_config)
  return _internal_add_reward_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Obj >&
SCSyncScallopLottery::reward_config() const {
  // @@protoc_insertion_point(field_list:F4BY.SCSyncScallopLottery.reward_config)
  return reward_config_;
}

// -------------------------------------------------------------------

// OpenChestReward

// int32 id = 1;
inline void OpenChestReward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChestReward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChestReward::id() const {
  // @@protoc_insertion_point(field_get:F4BY.OpenChestReward.id)
  return _internal_id();
}
inline void OpenChestReward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void OpenChestReward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:F4BY.OpenChestReward.id)
}

// .F4BY.Decimal num = 2;
inline bool OpenChestReward::_internal_has_num() const {
  return this != internal_default_instance() && num_ != nullptr;
}
inline bool OpenChestReward::has_num() const {
  return _internal_has_num();
}
inline void OpenChestReward::clear_num() {
  if (GetArena() == nullptr && num_ != nullptr) {
    delete num_;
  }
  num_ = nullptr;
}
inline const ::F4BY::Decimal& OpenChestReward::_internal_num() const {
  const ::F4BY::Decimal* p = num_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Decimal&>(
      ::F4BY::_Decimal_default_instance_);
}
inline const ::F4BY::Decimal& OpenChestReward::num() const {
  // @@protoc_insertion_point(field_get:F4BY.OpenChestReward.num)
  return _internal_num();
}
inline void OpenChestReward::unsafe_arena_set_allocated_num(
    ::F4BY::Decimal* num) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_);
  }
  num_ = num;
  if (num) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.OpenChestReward.num)
}
inline ::F4BY::Decimal* OpenChestReward::release_num() {
  
  ::F4BY::Decimal* temp = num_;
  num_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Decimal* OpenChestReward::unsafe_arena_release_num() {
  // @@protoc_insertion_point(field_release:F4BY.OpenChestReward.num)
  
  ::F4BY::Decimal* temp = num_;
  num_ = nullptr;
  return temp;
}
inline ::F4BY::Decimal* OpenChestReward::_internal_mutable_num() {
  
  if (num_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Decimal>(GetArena());
    num_ = p;
  }
  return num_;
}
inline ::F4BY::Decimal* OpenChestReward::mutable_num() {
  // @@protoc_insertion_point(field_mutable:F4BY.OpenChestReward.num)
  return _internal_mutable_num();
}
inline void OpenChestReward::set_allocated_num(::F4BY::Decimal* num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete num_;
  }
  if (num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(num);
    if (message_arena != submessage_arena) {
      num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    
  } else {
    
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:F4BY.OpenChestReward.num)
}

// -------------------------------------------------------------------

// SCUpdateChestStatus

// bool is_active = 1;
inline void SCUpdateChestStatus::clear_is_active() {
  is_active_ = false;
}
inline bool SCUpdateChestStatus::_internal_is_active() const {
  return is_active_;
}
inline bool SCUpdateChestStatus::is_active() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUpdateChestStatus.is_active)
  return _internal_is_active();
}
inline void SCUpdateChestStatus::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void SCUpdateChestStatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUpdateChestStatus.is_active)
}

// .F4BY.ChestType chest_type = 2;
inline void SCUpdateChestStatus::clear_chest_type() {
  chest_type_ = 0;
}
inline ::F4BY::ChestType SCUpdateChestStatus::_internal_chest_type() const {
  return static_cast< ::F4BY::ChestType >(chest_type_);
}
inline ::F4BY::ChestType SCUpdateChestStatus::chest_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUpdateChestStatus.chest_type)
  return _internal_chest_type();
}
inline void SCUpdateChestStatus::_internal_set_chest_type(::F4BY::ChestType value) {
  
  chest_type_ = value;
}
inline void SCUpdateChestStatus::set_chest_type(::F4BY::ChestType value) {
  _internal_set_chest_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUpdateChestStatus.chest_type)
}

// int32 total_progress = 3;
inline void SCUpdateChestStatus::clear_total_progress() {
  total_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_total_progress() const {
  return total_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::total_progress() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUpdateChestStatus.total_progress)
  return _internal_total_progress();
}
inline void SCUpdateChestStatus::_internal_set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_progress_ = value;
}
inline void SCUpdateChestStatus::set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_progress(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUpdateChestStatus.total_progress)
}

// int32 remain_progress = 4;
inline void SCUpdateChestStatus::clear_remain_progress() {
  remain_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_remain_progress() const {
  return remain_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::remain_progress() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUpdateChestStatus.remain_progress)
  return _internal_remain_progress();
}
inline void SCUpdateChestStatus::_internal_set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_progress_ = value;
}
inline void SCUpdateChestStatus::set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_progress(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUpdateChestStatus.remain_progress)
}

// bool guide = 5;
inline void SCUpdateChestStatus::clear_guide() {
  guide_ = false;
}
inline bool SCUpdateChestStatus::_internal_guide() const {
  return guide_;
}
inline bool SCUpdateChestStatus::guide() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUpdateChestStatus.guide)
  return _internal_guide();
}
inline void SCUpdateChestStatus::_internal_set_guide(bool value) {
  
  guide_ = value;
}
inline void SCUpdateChestStatus::set_guide(bool value) {
  _internal_set_guide(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUpdateChestStatus.guide)
}

// int32 available_reward = 6;
inline void SCUpdateChestStatus::clear_available_reward() {
  available_reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_available_reward() const {
  return available_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::available_reward() const {
  // @@protoc_insertion_point(field_get:F4BY.SCUpdateChestStatus.available_reward)
  return _internal_available_reward();
}
inline void SCUpdateChestStatus::_internal_set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_reward_ = value;
}
inline void SCUpdateChestStatus::set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available_reward(value);
  // @@protoc_insertion_point(field_set:F4BY.SCUpdateChestStatus.available_reward)
}

// -------------------------------------------------------------------

// CSChestConfig

// -------------------------------------------------------------------

// ChestBrief

// .F4BY.ChestType chest_type = 1;
inline void ChestBrief::clear_chest_type() {
  chest_type_ = 0;
}
inline ::F4BY::ChestType ChestBrief::_internal_chest_type() const {
  return static_cast< ::F4BY::ChestType >(chest_type_);
}
inline ::F4BY::ChestType ChestBrief::chest_type() const {
  // @@protoc_insertion_point(field_get:F4BY.ChestBrief.chest_type)
  return _internal_chest_type();
}
inline void ChestBrief::_internal_set_chest_type(::F4BY::ChestType value) {
  
  chest_type_ = value;
}
inline void ChestBrief::set_chest_type(::F4BY::ChestType value) {
  _internal_set_chest_type(value);
  // @@protoc_insertion_point(field_set:F4BY.ChestBrief.chest_type)
}

// repeated .F4BY.OpenChestReward reward = 2;
inline int ChestBrief::_internal_reward_size() const {
  return reward_.size();
}
inline int ChestBrief::reward_size() const {
  return _internal_reward_size();
}
inline void ChestBrief::clear_reward() {
  reward_.Clear();
}
inline ::F4BY::OpenChestReward* ChestBrief::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.ChestBrief.reward)
  return reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >*
ChestBrief::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.ChestBrief.reward)
  return &reward_;
}
inline const ::F4BY::OpenChestReward& ChestBrief::_internal_reward(int index) const {
  return reward_.Get(index);
}
inline const ::F4BY::OpenChestReward& ChestBrief::reward(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.ChestBrief.reward)
  return _internal_reward(index);
}
inline ::F4BY::OpenChestReward* ChestBrief::_internal_add_reward() {
  return reward_.Add();
}
inline ::F4BY::OpenChestReward* ChestBrief::add_reward() {
  // @@protoc_insertion_point(field_add:F4BY.ChestBrief.reward)
  return _internal_add_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >&
ChestBrief::reward() const {
  // @@protoc_insertion_point(field_list:F4BY.ChestBrief.reward)
  return reward_;
}

// -------------------------------------------------------------------

// SCChestConfig

// int32 end_time = 1;
inline void SCChestConfig::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::end_time() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestConfig.end_time)
  return _internal_end_time();
}
inline void SCChestConfig::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void SCChestConfig::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestConfig.end_time)
}

// repeated .F4BY.ChestBrief chest_brief_list = 2;
inline int SCChestConfig::_internal_chest_brief_list_size() const {
  return chest_brief_list_.size();
}
inline int SCChestConfig::chest_brief_list_size() const {
  return _internal_chest_brief_list_size();
}
inline void SCChestConfig::clear_chest_brief_list() {
  chest_brief_list_.Clear();
}
inline ::F4BY::ChestBrief* SCChestConfig::mutable_chest_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCChestConfig.chest_brief_list)
  return chest_brief_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ChestBrief >*
SCChestConfig::mutable_chest_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCChestConfig.chest_brief_list)
  return &chest_brief_list_;
}
inline const ::F4BY::ChestBrief& SCChestConfig::_internal_chest_brief_list(int index) const {
  return chest_brief_list_.Get(index);
}
inline const ::F4BY::ChestBrief& SCChestConfig::chest_brief_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestConfig.chest_brief_list)
  return _internal_chest_brief_list(index);
}
inline ::F4BY::ChestBrief* SCChestConfig::_internal_add_chest_brief_list() {
  return chest_brief_list_.Add();
}
inline ::F4BY::ChestBrief* SCChestConfig::add_chest_brief_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCChestConfig.chest_brief_list)
  return _internal_add_chest_brief_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ChestBrief >&
SCChestConfig::chest_brief_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCChestConfig.chest_brief_list)
  return chest_brief_list_;
}

// int32 min_ratio = 3;
inline void SCChestConfig::clear_min_ratio() {
  min_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::_internal_min_ratio() const {
  return min_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::min_ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestConfig.min_ratio)
  return _internal_min_ratio();
}
inline void SCChestConfig::_internal_set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ratio_ = value;
}
inline void SCChestConfig::set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestConfig.min_ratio)
}

// bool auto_open = 4;
inline void SCChestConfig::clear_auto_open() {
  auto_open_ = false;
}
inline bool SCChestConfig::_internal_auto_open() const {
  return auto_open_;
}
inline bool SCChestConfig::auto_open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestConfig.auto_open)
  return _internal_auto_open();
}
inline void SCChestConfig::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void SCChestConfig::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestConfig.auto_open)
}

// .F4BY.ChestAutoSelectOption auto_option = 5;
inline void SCChestConfig::clear_auto_option() {
  auto_option_ = 0;
}
inline ::F4BY::ChestAutoSelectOption SCChestConfig::_internal_auto_option() const {
  return static_cast< ::F4BY::ChestAutoSelectOption >(auto_option_);
}
inline ::F4BY::ChestAutoSelectOption SCChestConfig::auto_option() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestConfig.auto_option)
  return _internal_auto_option();
}
inline void SCChestConfig::_internal_set_auto_option(::F4BY::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCChestConfig::set_auto_option(::F4BY::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestConfig.auto_option)
}

// bool is_enable = 6;
inline void SCChestConfig::clear_is_enable() {
  is_enable_ = false;
}
inline bool SCChestConfig::_internal_is_enable() const {
  return is_enable_;
}
inline bool SCChestConfig::is_enable() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestConfig.is_enable)
  return _internal_is_enable();
}
inline void SCChestConfig::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void SCChestConfig::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestConfig.is_enable)
}

// -------------------------------------------------------------------

// SCOpenChest

// repeated .F4BY.OpenChestReward reward_list = 1;
inline int SCOpenChest::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SCOpenChest::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SCOpenChest::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::OpenChestReward* SCOpenChest::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCOpenChest.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >*
SCOpenChest::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCOpenChest.reward_list)
  return &reward_list_;
}
inline const ::F4BY::OpenChestReward& SCOpenChest::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::OpenChestReward& SCOpenChest::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCOpenChest.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::OpenChestReward* SCOpenChest::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::OpenChestReward* SCOpenChest::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCOpenChest.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::OpenChestReward >&
SCOpenChest::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCOpenChest.reward_list)
  return reward_list_;
}

// .F4BY.ChestAutoSelectOption auto_option = 2;
inline void SCOpenChest::clear_auto_option() {
  auto_option_ = 0;
}
inline ::F4BY::ChestAutoSelectOption SCOpenChest::_internal_auto_option() const {
  return static_cast< ::F4BY::ChestAutoSelectOption >(auto_option_);
}
inline ::F4BY::ChestAutoSelectOption SCOpenChest::auto_option() const {
  // @@protoc_insertion_point(field_get:F4BY.SCOpenChest.auto_option)
  return _internal_auto_option();
}
inline void SCOpenChest::_internal_set_auto_option(::F4BY::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCOpenChest::set_auto_option(::F4BY::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:F4BY.SCOpenChest.auto_option)
}

// -------------------------------------------------------------------

// CSSelectChestReward

// int32 select_index = 1;
inline void CSSelectChestReward::clear_select_index() {
  select_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectChestReward::_internal_select_index() const {
  return select_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectChestReward::select_index() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSelectChestReward.select_index)
  return _internal_select_index();
}
inline void CSSelectChestReward::_internal_set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  select_index_ = value;
}
inline void CSSelectChestReward::set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_select_index(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSelectChestReward.select_index)
}

// -------------------------------------------------------------------

// SCSelectChestReward

// .F4BY.OpenChestReward reward = 1;
inline bool SCSelectChestReward::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool SCSelectChestReward::has_reward() const {
  return _internal_has_reward();
}
inline void SCSelectChestReward::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::F4BY::OpenChestReward& SCSelectChestReward::_internal_reward() const {
  const ::F4BY::OpenChestReward* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::OpenChestReward&>(
      ::F4BY::_OpenChestReward_default_instance_);
}
inline const ::F4BY::OpenChestReward& SCSelectChestReward::reward() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSelectChestReward.reward)
  return _internal_reward();
}
inline void SCSelectChestReward::unsafe_arena_set_allocated_reward(
    ::F4BY::OpenChestReward* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCSelectChestReward.reward)
}
inline ::F4BY::OpenChestReward* SCSelectChestReward::release_reward() {
  
  ::F4BY::OpenChestReward* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::OpenChestReward* SCSelectChestReward::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:F4BY.SCSelectChestReward.reward)
  
  ::F4BY::OpenChestReward* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::F4BY::OpenChestReward* SCSelectChestReward::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::OpenChestReward>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::F4BY::OpenChestReward* SCSelectChestReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSelectChestReward.reward)
  return _internal_mutable_reward();
}
inline void SCSelectChestReward::set_allocated_reward(::F4BY::OpenChestReward* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSelectChestReward.reward)
}

// -------------------------------------------------------------------

// CSChestSetAutoSelect

// .F4BY.ChestAutoSelectOption auto_option = 1;
inline void CSChestSetAutoSelect::clear_auto_option() {
  auto_option_ = 0;
}
inline ::F4BY::ChestAutoSelectOption CSChestSetAutoSelect::_internal_auto_option() const {
  return static_cast< ::F4BY::ChestAutoSelectOption >(auto_option_);
}
inline ::F4BY::ChestAutoSelectOption CSChestSetAutoSelect::auto_option() const {
  // @@protoc_insertion_point(field_get:F4BY.CSChestSetAutoSelect.auto_option)
  return _internal_auto_option();
}
inline void CSChestSetAutoSelect::_internal_set_auto_option(::F4BY::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void CSChestSetAutoSelect::set_auto_option(::F4BY::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:F4BY.CSChestSetAutoSelect.auto_option)
}

// bool auto_open = 2;
inline void CSChestSetAutoSelect::clear_auto_open() {
  auto_open_ = false;
}
inline bool CSChestSetAutoSelect::_internal_auto_open() const {
  return auto_open_;
}
inline bool CSChestSetAutoSelect::auto_open() const {
  // @@protoc_insertion_point(field_get:F4BY.CSChestSetAutoSelect.auto_open)
  return _internal_auto_open();
}
inline void CSChestSetAutoSelect::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void CSChestSetAutoSelect::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:F4BY.CSChestSetAutoSelect.auto_open)
}

// -------------------------------------------------------------------

// SCChestSetAutoSelect

// .F4BY.ChestAutoSelectOption auto_option = 1;
inline void SCChestSetAutoSelect::clear_auto_option() {
  auto_option_ = 0;
}
inline ::F4BY::ChestAutoSelectOption SCChestSetAutoSelect::_internal_auto_option() const {
  return static_cast< ::F4BY::ChestAutoSelectOption >(auto_option_);
}
inline ::F4BY::ChestAutoSelectOption SCChestSetAutoSelect::auto_option() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestSetAutoSelect.auto_option)
  return _internal_auto_option();
}
inline void SCChestSetAutoSelect::_internal_set_auto_option(::F4BY::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCChestSetAutoSelect::set_auto_option(::F4BY::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestSetAutoSelect.auto_option)
}

// bool auto_open = 2;
inline void SCChestSetAutoSelect::clear_auto_open() {
  auto_open_ = false;
}
inline bool SCChestSetAutoSelect::_internal_auto_open() const {
  return auto_open_;
}
inline bool SCChestSetAutoSelect::auto_open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestSetAutoSelect.auto_open)
  return _internal_auto_open();
}
inline void SCChestSetAutoSelect::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void SCChestSetAutoSelect::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestSetAutoSelect.auto_open)
}

// -------------------------------------------------------------------

// CSChestSetEnable

// bool is_enable = 1;
inline void CSChestSetEnable::clear_is_enable() {
  is_enable_ = false;
}
inline bool CSChestSetEnable::_internal_is_enable() const {
  return is_enable_;
}
inline bool CSChestSetEnable::is_enable() const {
  // @@protoc_insertion_point(field_get:F4BY.CSChestSetEnable.is_enable)
  return _internal_is_enable();
}
inline void CSChestSetEnable::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void CSChestSetEnable::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.CSChestSetEnable.is_enable)
}

// -------------------------------------------------------------------

// SCChestSetEnable

// bool is_enable = 1;
inline void SCChestSetEnable::clear_is_enable() {
  is_enable_ = false;
}
inline bool SCChestSetEnable::_internal_is_enable() const {
  return is_enable_;
}
inline bool SCChestSetEnable::is_enable() const {
  // @@protoc_insertion_point(field_get:F4BY.SCChestSetEnable.is_enable)
  return _internal_is_enable();
}
inline void SCChestSetEnable::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void SCChestSetEnable::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.SCChestSetEnable.is_enable)
}

// -------------------------------------------------------------------

// SCSpecEffect

// int32 costMoney = 1;
inline void SCSpecEffect::clear_costmoney() {
  costmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSpecEffect::_internal_costmoney() const {
  return costmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSpecEffect::costmoney() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSpecEffect.costMoney)
  return _internal_costmoney();
}
inline void SCSpecEffect::_internal_set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costmoney_ = value;
}
inline void SCSpecEffect::set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costmoney(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSpecEffect.costMoney)
}

// int32 earnMoney = 2;
inline void SCSpecEffect::clear_earnmoney() {
  earnmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSpecEffect::_internal_earnmoney() const {
  return earnmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSpecEffect::earnmoney() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSpecEffect.earnMoney)
  return _internal_earnmoney();
}
inline void SCSpecEffect::_internal_set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earnmoney_ = value;
}
inline void SCSpecEffect::set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earnmoney(value);
  // @@protoc_insertion_point(field_set:F4BY.SCSpecEffect.earnMoney)
}

// -------------------------------------------------------------------

// SCTortoiseExplode

// int32 chair_idx = 1;
inline void SCTortoiseExplode::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::chair_idx() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTortoiseExplode.chair_idx)
  return _internal_chair_idx();
}
inline void SCTortoiseExplode::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTortoiseExplode::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTortoiseExplode.chair_idx)
}

// int32 fish_uid = 2;
inline void SCTortoiseExplode::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::fish_uid() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTortoiseExplode.fish_uid)
  return _internal_fish_uid();
}
inline void SCTortoiseExplode::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCTortoiseExplode::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTortoiseExplode.fish_uid)
}

// int32 bullet_id = 3;
inline void SCTortoiseExplode::clear_bullet_id() {
  bullet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_bullet_id() const {
  return bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::bullet_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTortoiseExplode.bullet_id)
  return _internal_bullet_id();
}
inline void SCTortoiseExplode::_internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_id_ = value;
}
inline void SCTortoiseExplode::set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTortoiseExplode.bullet_id)
}

// int32 ratio = 4;
inline void SCTortoiseExplode::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::ratio() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTortoiseExplode.ratio)
  return _internal_ratio();
}
inline void SCTortoiseExplode::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCTortoiseExplode::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTortoiseExplode.ratio)
}

// int32 max_effect = 5;
inline void SCTortoiseExplode::clear_max_effect() {
  max_effect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_max_effect() const {
  return max_effect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::max_effect() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTortoiseExplode.max_effect)
  return _internal_max_effect();
}
inline void SCTortoiseExplode::_internal_set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_effect_ = value;
}
inline void SCTortoiseExplode::set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_effect(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTortoiseExplode.max_effect)
}

// -------------------------------------------------------------------

// RewardInfo

// int32 prop_id = 1;
inline void RewardInfo::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::prop_id() const {
  // @@protoc_insertion_point(field_get:F4BY.RewardInfo.prop_id)
  return _internal_prop_id();
}
inline void RewardInfo::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void RewardInfo::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:F4BY.RewardInfo.prop_id)
}

// int32 prop_num = 2;
inline void RewardInfo::clear_prop_num() {
  prop_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::_internal_prop_num() const {
  return prop_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::prop_num() const {
  // @@protoc_insertion_point(field_get:F4BY.RewardInfo.prop_num)
  return _internal_prop_num();
}
inline void RewardInfo::_internal_set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_num_ = value;
}
inline void RewardInfo::set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_num(value);
  // @@protoc_insertion_point(field_set:F4BY.RewardInfo.prop_num)
}

// int32 quality = 3;
inline void RewardInfo::clear_quality() {
  quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::quality() const {
  // @@protoc_insertion_point(field_get:F4BY.RewardInfo.quality)
  return _internal_quality();
}
inline void RewardInfo::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quality_ = value;
}
inline void RewardInfo::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:F4BY.RewardInfo.quality)
}

// bool spec_show = 4;
inline void RewardInfo::clear_spec_show() {
  spec_show_ = false;
}
inline bool RewardInfo::_internal_spec_show() const {
  return spec_show_;
}
inline bool RewardInfo::spec_show() const {
  // @@protoc_insertion_point(field_get:F4BY.RewardInfo.spec_show)
  return _internal_spec_show();
}
inline void RewardInfo::_internal_set_spec_show(bool value) {
  
  spec_show_ = value;
}
inline void RewardInfo::set_spec_show(bool value) {
  _internal_set_spec_show(value);
  // @@protoc_insertion_point(field_set:F4BY.RewardInfo.spec_show)
}

// -------------------------------------------------------------------

// MissionInfo

// int32 draw_times = 1;
inline void MissionInfo::clear_draw_times() {
  draw_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionInfo::_internal_draw_times() const {
  return draw_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionInfo::draw_times() const {
  // @@protoc_insertion_point(field_get:F4BY.MissionInfo.draw_times)
  return _internal_draw_times();
}
inline void MissionInfo::_internal_set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  draw_times_ = value;
}
inline void MissionInfo::set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_draw_times(value);
  // @@protoc_insertion_point(field_set:F4BY.MissionInfo.draw_times)
}

// repeated .F4BY.RewardInfo reward_list = 2;
inline int MissionInfo::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int MissionInfo::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void MissionInfo::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::RewardInfo* MissionInfo::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.MissionInfo.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
MissionInfo::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.MissionInfo.reward_list)
  return &reward_list_;
}
inline const ::F4BY::RewardInfo& MissionInfo::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::RewardInfo& MissionInfo::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.MissionInfo.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::RewardInfo* MissionInfo::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::RewardInfo* MissionInfo::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.MissionInfo.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
MissionInfo::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.MissionInfo.reward_list)
  return reward_list_;
}

// bool complete = 3;
inline void MissionInfo::clear_complete() {
  complete_ = false;
}
inline bool MissionInfo::_internal_complete() const {
  return complete_;
}
inline bool MissionInfo::complete() const {
  // @@protoc_insertion_point(field_get:F4BY.MissionInfo.complete)
  return _internal_complete();
}
inline void MissionInfo::_internal_set_complete(bool value) {
  
  complete_ = value;
}
inline void MissionInfo::set_complete(bool value) {
  _internal_set_complete(value);
  // @@protoc_insertion_point(field_set:F4BY.MissionInfo.complete)
}

// bool receive = 4;
inline void MissionInfo::clear_receive() {
  receive_ = false;
}
inline bool MissionInfo::_internal_receive() const {
  return receive_;
}
inline bool MissionInfo::receive() const {
  // @@protoc_insertion_point(field_get:F4BY.MissionInfo.receive)
  return _internal_receive();
}
inline void MissionInfo::_internal_set_receive(bool value) {
  
  receive_ = value;
}
inline void MissionInfo::set_receive(bool value) {
  _internal_set_receive(value);
  // @@protoc_insertion_point(field_set:F4BY.MissionInfo.receive)
}

// int32 mission_id = 5;
inline void MissionInfo::clear_mission_id() {
  mission_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionInfo::_internal_mission_id() const {
  return mission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionInfo::mission_id() const {
  // @@protoc_insertion_point(field_get:F4BY.MissionInfo.mission_id)
  return _internal_mission_id();
}
inline void MissionInfo::_internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mission_id_ = value;
}
inline void MissionInfo::set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_id(value);
  // @@protoc_insertion_point(field_set:F4BY.MissionInfo.mission_id)
}

// -------------------------------------------------------------------

// BigRewardInfo

// int32 big_reward_times = 1;
inline void BigRewardInfo::clear_big_reward_times() {
  big_reward_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BigRewardInfo::_internal_big_reward_times() const {
  return big_reward_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BigRewardInfo::big_reward_times() const {
  // @@protoc_insertion_point(field_get:F4BY.BigRewardInfo.big_reward_times)
  return _internal_big_reward_times();
}
inline void BigRewardInfo::_internal_set_big_reward_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_reward_times_ = value;
}
inline void BigRewardInfo::set_big_reward_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_reward_times(value);
  // @@protoc_insertion_point(field_set:F4BY.BigRewardInfo.big_reward_times)
}

// repeated .F4BY.RewardInfo draw_rewardList = 2;
inline int BigRewardInfo::_internal_draw_rewardlist_size() const {
  return draw_rewardlist_.size();
}
inline int BigRewardInfo::draw_rewardlist_size() const {
  return _internal_draw_rewardlist_size();
}
inline void BigRewardInfo::clear_draw_rewardlist() {
  draw_rewardlist_.Clear();
}
inline ::F4BY::RewardInfo* BigRewardInfo::mutable_draw_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.BigRewardInfo.draw_rewardList)
  return draw_rewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
BigRewardInfo::mutable_draw_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.BigRewardInfo.draw_rewardList)
  return &draw_rewardlist_;
}
inline const ::F4BY::RewardInfo& BigRewardInfo::_internal_draw_rewardlist(int index) const {
  return draw_rewardlist_.Get(index);
}
inline const ::F4BY::RewardInfo& BigRewardInfo::draw_rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.BigRewardInfo.draw_rewardList)
  return _internal_draw_rewardlist(index);
}
inline ::F4BY::RewardInfo* BigRewardInfo::_internal_add_draw_rewardlist() {
  return draw_rewardlist_.Add();
}
inline ::F4BY::RewardInfo* BigRewardInfo::add_draw_rewardlist() {
  // @@protoc_insertion_point(field_add:F4BY.BigRewardInfo.draw_rewardList)
  return _internal_add_draw_rewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
BigRewardInfo::draw_rewardlist() const {
  // @@protoc_insertion_point(field_list:F4BY.BigRewardInfo.draw_rewardList)
  return draw_rewardlist_;
}

// -------------------------------------------------------------------

// TreasureHuntConfig

// int32 term = 1;
inline void TreasureHuntConfig::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::term() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.term)
  return _internal_term();
}
inline void TreasureHuntConfig::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void TreasureHuntConfig::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.term)
}

// int32 start_time = 2;
inline void TreasureHuntConfig::clear_start_time() {
  start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::start_time() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.start_time)
  return _internal_start_time();
}
inline void TreasureHuntConfig::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_time_ = value;
}
inline void TreasureHuntConfig::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.start_time)
}

// int32 end_time = 3;
inline void TreasureHuntConfig::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::end_time() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.end_time)
  return _internal_end_time();
}
inline void TreasureHuntConfig::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void TreasureHuntConfig::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.end_time)
}

// bool enable = 4;
inline void TreasureHuntConfig::clear_enable() {
  enable_ = false;
}
inline bool TreasureHuntConfig::_internal_enable() const {
  return enable_;
}
inline bool TreasureHuntConfig::enable() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.enable)
  return _internal_enable();
}
inline void TreasureHuntConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void TreasureHuntConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.enable)
}

// .F4BY.BigRewardInfo big_reward_info = 5;
inline bool TreasureHuntConfig::_internal_has_big_reward_info() const {
  return this != internal_default_instance() && big_reward_info_ != nullptr;
}
inline bool TreasureHuntConfig::has_big_reward_info() const {
  return _internal_has_big_reward_info();
}
inline void TreasureHuntConfig::clear_big_reward_info() {
  if (GetArena() == nullptr && big_reward_info_ != nullptr) {
    delete big_reward_info_;
  }
  big_reward_info_ = nullptr;
}
inline const ::F4BY::BigRewardInfo& TreasureHuntConfig::_internal_big_reward_info() const {
  const ::F4BY::BigRewardInfo* p = big_reward_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::BigRewardInfo&>(
      ::F4BY::_BigRewardInfo_default_instance_);
}
inline const ::F4BY::BigRewardInfo& TreasureHuntConfig::big_reward_info() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.big_reward_info)
  return _internal_big_reward_info();
}
inline void TreasureHuntConfig::unsafe_arena_set_allocated_big_reward_info(
    ::F4BY::BigRewardInfo* big_reward_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(big_reward_info_);
  }
  big_reward_info_ = big_reward_info;
  if (big_reward_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.TreasureHuntConfig.big_reward_info)
}
inline ::F4BY::BigRewardInfo* TreasureHuntConfig::release_big_reward_info() {
  
  ::F4BY::BigRewardInfo* temp = big_reward_info_;
  big_reward_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::BigRewardInfo* TreasureHuntConfig::unsafe_arena_release_big_reward_info() {
  // @@protoc_insertion_point(field_release:F4BY.TreasureHuntConfig.big_reward_info)
  
  ::F4BY::BigRewardInfo* temp = big_reward_info_;
  big_reward_info_ = nullptr;
  return temp;
}
inline ::F4BY::BigRewardInfo* TreasureHuntConfig::_internal_mutable_big_reward_info() {
  
  if (big_reward_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::BigRewardInfo>(GetArena());
    big_reward_info_ = p;
  }
  return big_reward_info_;
}
inline ::F4BY::BigRewardInfo* TreasureHuntConfig::mutable_big_reward_info() {
  // @@protoc_insertion_point(field_mutable:F4BY.TreasureHuntConfig.big_reward_info)
  return _internal_mutable_big_reward_info();
}
inline void TreasureHuntConfig::set_allocated_big_reward_info(::F4BY::BigRewardInfo* big_reward_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete big_reward_info_;
  }
  if (big_reward_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(big_reward_info);
    if (message_arena != submessage_arena) {
      big_reward_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, big_reward_info, submessage_arena);
    }
    
  } else {
    
  }
  big_reward_info_ = big_reward_info;
  // @@protoc_insertion_point(field_set_allocated:F4BY.TreasureHuntConfig.big_reward_info)
}

// repeated .F4BY.RewardInfo reward_list = 6;
inline int TreasureHuntConfig::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int TreasureHuntConfig::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void TreasureHuntConfig::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::RewardInfo* TreasureHuntConfig::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.TreasureHuntConfig.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
TreasureHuntConfig::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.TreasureHuntConfig.reward_list)
  return &reward_list_;
}
inline const ::F4BY::RewardInfo& TreasureHuntConfig::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::RewardInfo& TreasureHuntConfig::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::RewardInfo* TreasureHuntConfig::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::RewardInfo* TreasureHuntConfig::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.TreasureHuntConfig.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
TreasureHuntConfig::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.TreasureHuntConfig.reward_list)
  return reward_list_;
}

// int32 min_draw = 7;
inline void TreasureHuntConfig::clear_min_draw() {
  min_draw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::_internal_min_draw() const {
  return min_draw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::min_draw() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.min_draw)
  return _internal_min_draw();
}
inline void TreasureHuntConfig::_internal_set_min_draw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_draw_ = value;
}
inline void TreasureHuntConfig::set_min_draw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_draw(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.min_draw)
}

// int32 max_draw = 8;
inline void TreasureHuntConfig::clear_max_draw() {
  max_draw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::_internal_max_draw() const {
  return max_draw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::max_draw() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.max_draw)
  return _internal_max_draw();
}
inline void TreasureHuntConfig::_internal_set_max_draw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_draw_ = value;
}
inline void TreasureHuntConfig::set_max_draw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_draw(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.max_draw)
}

// int32 topic = 9;
inline void TreasureHuntConfig::clear_topic() {
  topic_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::_internal_topic() const {
  return topic_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreasureHuntConfig::topic() const {
  // @@protoc_insertion_point(field_get:F4BY.TreasureHuntConfig.topic)
  return _internal_topic();
}
inline void TreasureHuntConfig::_internal_set_topic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topic_ = value;
}
inline void TreasureHuntConfig::set_topic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:F4BY.TreasureHuntConfig.topic)
}

// -------------------------------------------------------------------

// CSSyncConfigs

// int32 config_type = 1;
inline void CSSyncConfigs::clear_config_type() {
  config_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncConfigs::_internal_config_type() const {
  return config_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncConfigs::config_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSyncConfigs.config_type)
  return _internal_config_type();
}
inline void CSSyncConfigs::_internal_set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  config_type_ = value;
}
inline void CSSyncConfigs::set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_config_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSyncConfigs.config_type)
}

// -------------------------------------------------------------------

// SCSyncConfigs

// .F4BY.TreasureHuntConfig treasure_config = 1;
inline bool SCSyncConfigs::_internal_has_treasure_config() const {
  return this != internal_default_instance() && treasure_config_ != nullptr;
}
inline bool SCSyncConfigs::has_treasure_config() const {
  return _internal_has_treasure_config();
}
inline void SCSyncConfigs::clear_treasure_config() {
  if (GetArena() == nullptr && treasure_config_ != nullptr) {
    delete treasure_config_;
  }
  treasure_config_ = nullptr;
}
inline const ::F4BY::TreasureHuntConfig& SCSyncConfigs::_internal_treasure_config() const {
  const ::F4BY::TreasureHuntConfig* p = treasure_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::TreasureHuntConfig&>(
      ::F4BY::_TreasureHuntConfig_default_instance_);
}
inline const ::F4BY::TreasureHuntConfig& SCSyncConfigs::treasure_config() const {
  // @@protoc_insertion_point(field_get:F4BY.SCSyncConfigs.treasure_config)
  return _internal_treasure_config();
}
inline void SCSyncConfigs::unsafe_arena_set_allocated_treasure_config(
    ::F4BY::TreasureHuntConfig* treasure_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(treasure_config_);
  }
  treasure_config_ = treasure_config;
  if (treasure_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCSyncConfigs.treasure_config)
}
inline ::F4BY::TreasureHuntConfig* SCSyncConfigs::release_treasure_config() {
  
  ::F4BY::TreasureHuntConfig* temp = treasure_config_;
  treasure_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::TreasureHuntConfig* SCSyncConfigs::unsafe_arena_release_treasure_config() {
  // @@protoc_insertion_point(field_release:F4BY.SCSyncConfigs.treasure_config)
  
  ::F4BY::TreasureHuntConfig* temp = treasure_config_;
  treasure_config_ = nullptr;
  return temp;
}
inline ::F4BY::TreasureHuntConfig* SCSyncConfigs::_internal_mutable_treasure_config() {
  
  if (treasure_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::TreasureHuntConfig>(GetArena());
    treasure_config_ = p;
  }
  return treasure_config_;
}
inline ::F4BY::TreasureHuntConfig* SCSyncConfigs::mutable_treasure_config() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCSyncConfigs.treasure_config)
  return _internal_mutable_treasure_config();
}
inline void SCSyncConfigs::set_allocated_treasure_config(::F4BY::TreasureHuntConfig* treasure_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete treasure_config_;
  }
  if (treasure_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(treasure_config);
    if (message_arena != submessage_arena) {
      treasure_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasure_config, submessage_arena);
    }
    
  } else {
    
  }
  treasure_config_ = treasure_config;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCSyncConfigs.treasure_config)
}

// -------------------------------------------------------------------

// CSDrawReward

// int32 num = 1;
inline void CSDrawReward::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawReward::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawReward::num() const {
  // @@protoc_insertion_point(field_get:F4BY.CSDrawReward.num)
  return _internal_num();
}
inline void CSDrawReward::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void CSDrawReward::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:F4BY.CSDrawReward.num)
}

// int32 draw_type = 2;
inline void CSDrawReward::clear_draw_type() {
  draw_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawReward::_internal_draw_type() const {
  return draw_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDrawReward::draw_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSDrawReward.draw_type)
  return _internal_draw_type();
}
inline void CSDrawReward::_internal_set_draw_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  draw_type_ = value;
}
inline void CSDrawReward::set_draw_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_draw_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSDrawReward.draw_type)
}

// -------------------------------------------------------------------

// SCDrawReward

// repeated .F4BY.RewardInfo reward_list = 1;
inline int SCDrawReward::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SCDrawReward::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SCDrawReward::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::RewardInfo* SCDrawReward::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCDrawReward.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
SCDrawReward::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCDrawReward.reward_list)
  return &reward_list_;
}
inline const ::F4BY::RewardInfo& SCDrawReward::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::RewardInfo& SCDrawReward::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCDrawReward.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::RewardInfo* SCDrawReward::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::RewardInfo* SCDrawReward::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCDrawReward.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
SCDrawReward::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCDrawReward.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// CSTreasureHuntMission

// -------------------------------------------------------------------

// SCTreasureHuntMission

// repeated .F4BY.MissionInfo mission_list = 1;
inline int SCTreasureHuntMission::_internal_mission_list_size() const {
  return mission_list_.size();
}
inline int SCTreasureHuntMission::mission_list_size() const {
  return _internal_mission_list_size();
}
inline void SCTreasureHuntMission::clear_mission_list() {
  mission_list_.Clear();
}
inline ::F4BY::MissionInfo* SCTreasureHuntMission::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCTreasureHuntMission.mission_list)
  return mission_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MissionInfo >*
SCTreasureHuntMission::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCTreasureHuntMission.mission_list)
  return &mission_list_;
}
inline const ::F4BY::MissionInfo& SCTreasureHuntMission::_internal_mission_list(int index) const {
  return mission_list_.Get(index);
}
inline const ::F4BY::MissionInfo& SCTreasureHuntMission::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureHuntMission.mission_list)
  return _internal_mission_list(index);
}
inline ::F4BY::MissionInfo* SCTreasureHuntMission::_internal_add_mission_list() {
  return mission_list_.Add();
}
inline ::F4BY::MissionInfo* SCTreasureHuntMission::add_mission_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCTreasureHuntMission.mission_list)
  return _internal_add_mission_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::MissionInfo >&
SCTreasureHuntMission::mission_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCTreasureHuntMission.mission_list)
  return mission_list_;
}

// int32 draw_times = 2;
inline void SCTreasureHuntMission::clear_draw_times() {
  draw_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureHuntMission::_internal_draw_times() const {
  return draw_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureHuntMission::draw_times() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureHuntMission.draw_times)
  return _internal_draw_times();
}
inline void SCTreasureHuntMission::_internal_set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  draw_times_ = value;
}
inline void SCTreasureHuntMission::set_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_draw_times(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureHuntMission.draw_times)
}

// -------------------------------------------------------------------

// CSReceiveMissionReward

// int32 mission_id = 1;
inline void CSReceiveMissionReward::clear_mission_id() {
  mission_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReceiveMissionReward::_internal_mission_id() const {
  return mission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReceiveMissionReward::mission_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSReceiveMissionReward.mission_id)
  return _internal_mission_id();
}
inline void CSReceiveMissionReward::_internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mission_id_ = value;
}
inline void CSReceiveMissionReward::set_mission_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSReceiveMissionReward.mission_id)
}

// -------------------------------------------------------------------

// SCReceiveMissionReward

// repeated .F4BY.RewardInfo reward_list = 1;
inline int SCReceiveMissionReward::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SCReceiveMissionReward::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SCReceiveMissionReward::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::RewardInfo* SCReceiveMissionReward::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCReceiveMissionReward.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
SCReceiveMissionReward::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCReceiveMissionReward.reward_list)
  return &reward_list_;
}
inline const ::F4BY::RewardInfo& SCReceiveMissionReward::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::RewardInfo& SCReceiveMissionReward::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCReceiveMissionReward.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::RewardInfo* SCReceiveMissionReward::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::RewardInfo* SCReceiveMissionReward::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCReceiveMissionReward.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
SCReceiveMissionReward::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCReceiveMissionReward.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// CSDrawTimes

// -------------------------------------------------------------------

// SCDrawTimes

// int32 total_draw_times = 1;
inline void SCDrawTimes::clear_total_draw_times() {
  total_draw_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::_internal_total_draw_times() const {
  return total_draw_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::total_draw_times() const {
  // @@protoc_insertion_point(field_get:F4BY.SCDrawTimes.total_draw_times)
  return _internal_total_draw_times();
}
inline void SCDrawTimes::_internal_set_total_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_draw_times_ = value;
}
inline void SCDrawTimes::set_total_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_draw_times(value);
  // @@protoc_insertion_point(field_set:F4BY.SCDrawTimes.total_draw_times)
}

// int32 big_reward_process = 2;
inline void SCDrawTimes::clear_big_reward_process() {
  big_reward_process_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::_internal_big_reward_process() const {
  return big_reward_process_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::big_reward_process() const {
  // @@protoc_insertion_point(field_get:F4BY.SCDrawTimes.big_reward_process)
  return _internal_big_reward_process();
}
inline void SCDrawTimes::_internal_set_big_reward_process(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_reward_process_ = value;
}
inline void SCDrawTimes::set_big_reward_process(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_reward_process(value);
  // @@protoc_insertion_point(field_set:F4BY.SCDrawTimes.big_reward_process)
}

// int32 free_draw_times = 3;
inline void SCDrawTimes::clear_free_draw_times() {
  free_draw_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::_internal_free_draw_times() const {
  return free_draw_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::free_draw_times() const {
  // @@protoc_insertion_point(field_get:F4BY.SCDrawTimes.free_draw_times)
  return _internal_free_draw_times();
}
inline void SCDrawTimes::_internal_set_free_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_draw_times_ = value;
}
inline void SCDrawTimes::set_free_draw_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_draw_times(value);
  // @@protoc_insertion_point(field_set:F4BY.SCDrawTimes.free_draw_times)
}

// int32 draw_tickers_num = 4;
inline void SCDrawTimes::clear_draw_tickers_num() {
  draw_tickers_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::_internal_draw_tickers_num() const {
  return draw_tickers_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDrawTimes::draw_tickers_num() const {
  // @@protoc_insertion_point(field_get:F4BY.SCDrawTimes.draw_tickers_num)
  return _internal_draw_tickers_num();
}
inline void SCDrawTimes::_internal_set_draw_tickers_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  draw_tickers_num_ = value;
}
inline void SCDrawTimes::set_draw_tickers_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_draw_tickers_num(value);
  // @@protoc_insertion_point(field_set:F4BY.SCDrawTimes.draw_tickers_num)
}

// -------------------------------------------------------------------

// CSVerifyActivity

// int32 activity_id = 1;
inline void CSVerifyActivity::clear_activity_id() {
  activity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVerifyActivity::_internal_activity_id() const {
  return activity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVerifyActivity::activity_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSVerifyActivity.activity_id)
  return _internal_activity_id();
}
inline void CSVerifyActivity::_internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activity_id_ = value;
}
inline void CSVerifyActivity::set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activity_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSVerifyActivity.activity_id)
}

// -------------------------------------------------------------------

// SCVerifyActivity

// bool open = 1;
inline void SCVerifyActivity::clear_open() {
  open_ = false;
}
inline bool SCVerifyActivity::_internal_open() const {
  return open_;
}
inline bool SCVerifyActivity::open() const {
  // @@protoc_insertion_point(field_get:F4BY.SCVerifyActivity.open)
  return _internal_open();
}
inline void SCVerifyActivity::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void SCVerifyActivity::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:F4BY.SCVerifyActivity.open)
}

// int32 activity_id = 2;
inline void SCVerifyActivity::clear_activity_id() {
  activity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVerifyActivity::_internal_activity_id() const {
  return activity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVerifyActivity::activity_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCVerifyActivity.activity_id)
  return _internal_activity_id();
}
inline void SCVerifyActivity::_internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activity_id_ = value;
}
inline void SCVerifyActivity::set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activity_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCVerifyActivity.activity_id)
}

// -------------------------------------------------------------------

// Package

// int32 package_id = 1;
inline void Package::clear_package_id() {
  package_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_package_id() const {
  return package_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::package_id() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.package_id)
  return _internal_package_id();
}
inline void Package::_internal_set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  package_id_ = value;
}
inline void Package::set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_package_id(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.package_id)
}

// int32 limit = 2;
inline void Package::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::limit() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.limit)
  return _internal_limit();
}
inline void Package::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void Package::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.limit)
}

// int32 consume_price = 3;
inline void Package::clear_consume_price() {
  consume_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_consume_price() const {
  return consume_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::consume_price() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.consume_price)
  return _internal_consume_price();
}
inline void Package::_internal_set_consume_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  consume_price_ = value;
}
inline void Package::set_consume_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_consume_price(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.consume_price)
}

// int32 limit_type = 4;
inline void Package::clear_limit_type() {
  limit_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_limit_type() const {
  return limit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::limit_type() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.limit_type)
  return _internal_limit_type();
}
inline void Package::_internal_set_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_type_ = value;
}
inline void Package::set_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_type(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.limit_type)
}

// int32 consume_props = 5;
inline void Package::clear_consume_props() {
  consume_props_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_consume_props() const {
  return consume_props_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::consume_props() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.consume_props)
  return _internal_consume_props();
}
inline void Package::_internal_set_consume_props(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  consume_props_ = value;
}
inline void Package::set_consume_props(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_consume_props(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.consume_props)
}

// int32 purchase_times = 6;
inline void Package::clear_purchase_times() {
  purchase_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_purchase_times() const {
  return purchase_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::purchase_times() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.purchase_times)
  return _internal_purchase_times();
}
inline void Package::_internal_set_purchase_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  purchase_times_ = value;
}
inline void Package::set_purchase_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_purchase_times(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.purchase_times)
}

// repeated .F4BY.RewardInfo reward_list = 7;
inline int Package::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int Package::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void Package::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::RewardInfo* Package::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.Package.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
Package::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.Package.reward_list)
  return &reward_list_;
}
inline const ::F4BY::RewardInfo& Package::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::RewardInfo& Package::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.Package.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::RewardInfo* Package::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::RewardInfo* Package::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.Package.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
Package::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.Package.reward_list)
  return reward_list_;
}

// bool lock = 8;
inline void Package::clear_lock() {
  lock_ = false;
}
inline bool Package::_internal_lock() const {
  return lock_;
}
inline bool Package::lock() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.lock)
  return _internal_lock();
}
inline void Package::_internal_set_lock(bool value) {
  
  lock_ = value;
}
inline void Package::set_lock(bool value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.lock)
}

// int32 vip_limit = 9;
inline void Package::clear_vip_limit() {
  vip_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::_internal_vip_limit() const {
  return vip_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Package::vip_limit() const {
  // @@protoc_insertion_point(field_get:F4BY.Package.vip_limit)
  return _internal_vip_limit();
}
inline void Package::_internal_set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_limit_ = value;
}
inline void Package::set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_limit(value);
  // @@protoc_insertion_point(field_set:F4BY.Package.vip_limit)
}

// -------------------------------------------------------------------

// CSTreasureHuntPackage

// int32 package_type = 1;
inline void CSTreasureHuntPackage::clear_package_type() {
  package_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTreasureHuntPackage::_internal_package_type() const {
  return package_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTreasureHuntPackage::package_type() const {
  // @@protoc_insertion_point(field_get:F4BY.CSTreasureHuntPackage.package_type)
  return _internal_package_type();
}
inline void CSTreasureHuntPackage::_internal_set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  package_type_ = value;
}
inline void CSTreasureHuntPackage::set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_package_type(value);
  // @@protoc_insertion_point(field_set:F4BY.CSTreasureHuntPackage.package_type)
}

// -------------------------------------------------------------------

// SCTreasureHuntPackage

// repeated .F4BY.Package package_list = 1;
inline int SCTreasureHuntPackage::_internal_package_list_size() const {
  return package_list_.size();
}
inline int SCTreasureHuntPackage::package_list_size() const {
  return _internal_package_list_size();
}
inline void SCTreasureHuntPackage::clear_package_list() {
  package_list_.Clear();
}
inline ::F4BY::Package* SCTreasureHuntPackage::mutable_package_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCTreasureHuntPackage.package_list)
  return package_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >*
SCTreasureHuntPackage::mutable_package_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCTreasureHuntPackage.package_list)
  return &package_list_;
}
inline const ::F4BY::Package& SCTreasureHuntPackage::_internal_package_list(int index) const {
  return package_list_.Get(index);
}
inline const ::F4BY::Package& SCTreasureHuntPackage::package_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureHuntPackage.package_list)
  return _internal_package_list(index);
}
inline ::F4BY::Package* SCTreasureHuntPackage::_internal_add_package_list() {
  return package_list_.Add();
}
inline ::F4BY::Package* SCTreasureHuntPackage::add_package_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCTreasureHuntPackage.package_list)
  return _internal_add_package_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >&
SCTreasureHuntPackage::package_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCTreasureHuntPackage.package_list)
  return package_list_;
}

// int32 package_type = 2;
inline void SCTreasureHuntPackage::clear_package_type() {
  package_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureHuntPackage::_internal_package_type() const {
  return package_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTreasureHuntPackage::package_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCTreasureHuntPackage.package_type)
  return _internal_package_type();
}
inline void SCTreasureHuntPackage::_internal_set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  package_type_ = value;
}
inline void SCTreasureHuntPackage::set_package_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_package_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCTreasureHuntPackage.package_type)
}

// -------------------------------------------------------------------

// ExchangeShopInfo

// int32 level = 1;
inline void ExchangeShopInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExchangeShopInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExchangeShopInfo::level() const {
  // @@protoc_insertion_point(field_get:F4BY.ExchangeShopInfo.level)
  return _internal_level();
}
inline void ExchangeShopInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void ExchangeShopInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:F4BY.ExchangeShopInfo.level)
}

// repeated .F4BY.Package package_list = 2;
inline int ExchangeShopInfo::_internal_package_list_size() const {
  return package_list_.size();
}
inline int ExchangeShopInfo::package_list_size() const {
  return _internal_package_list_size();
}
inline void ExchangeShopInfo::clear_package_list() {
  package_list_.Clear();
}
inline ::F4BY::Package* ExchangeShopInfo::mutable_package_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.ExchangeShopInfo.package_list)
  return package_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >*
ExchangeShopInfo::mutable_package_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.ExchangeShopInfo.package_list)
  return &package_list_;
}
inline const ::F4BY::Package& ExchangeShopInfo::_internal_package_list(int index) const {
  return package_list_.Get(index);
}
inline const ::F4BY::Package& ExchangeShopInfo::package_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.ExchangeShopInfo.package_list)
  return _internal_package_list(index);
}
inline ::F4BY::Package* ExchangeShopInfo::_internal_add_package_list() {
  return package_list_.Add();
}
inline ::F4BY::Package* ExchangeShopInfo::add_package_list() {
  // @@protoc_insertion_point(field_add:F4BY.ExchangeShopInfo.package_list)
  return _internal_add_package_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::Package >&
ExchangeShopInfo::package_list() const {
  // @@protoc_insertion_point(field_list:F4BY.ExchangeShopInfo.package_list)
  return package_list_;
}

// bool unlock = 3;
inline void ExchangeShopInfo::clear_unlock() {
  unlock_ = false;
}
inline bool ExchangeShopInfo::_internal_unlock() const {
  return unlock_;
}
inline bool ExchangeShopInfo::unlock() const {
  // @@protoc_insertion_point(field_get:F4BY.ExchangeShopInfo.unlock)
  return _internal_unlock();
}
inline void ExchangeShopInfo::_internal_set_unlock(bool value) {
  
  unlock_ = value;
}
inline void ExchangeShopInfo::set_unlock(bool value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:F4BY.ExchangeShopInfo.unlock)
}

// -------------------------------------------------------------------

// CSExchangeShop

// -------------------------------------------------------------------

// SCExchangeShop

// repeated .F4BY.ExchangeShopInfo exchangeShopList = 1;
inline int SCExchangeShop::_internal_exchangeshoplist_size() const {
  return exchangeshoplist_.size();
}
inline int SCExchangeShop::exchangeshoplist_size() const {
  return _internal_exchangeshoplist_size();
}
inline void SCExchangeShop::clear_exchangeshoplist() {
  exchangeshoplist_.Clear();
}
inline ::F4BY::ExchangeShopInfo* SCExchangeShop::mutable_exchangeshoplist(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCExchangeShop.exchangeShopList)
  return exchangeshoplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ExchangeShopInfo >*
SCExchangeShop::mutable_exchangeshoplist() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCExchangeShop.exchangeShopList)
  return &exchangeshoplist_;
}
inline const ::F4BY::ExchangeShopInfo& SCExchangeShop::_internal_exchangeshoplist(int index) const {
  return exchangeshoplist_.Get(index);
}
inline const ::F4BY::ExchangeShopInfo& SCExchangeShop::exchangeshoplist(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCExchangeShop.exchangeShopList)
  return _internal_exchangeshoplist(index);
}
inline ::F4BY::ExchangeShopInfo* SCExchangeShop::_internal_add_exchangeshoplist() {
  return exchangeshoplist_.Add();
}
inline ::F4BY::ExchangeShopInfo* SCExchangeShop::add_exchangeshoplist() {
  // @@protoc_insertion_point(field_add:F4BY.SCExchangeShop.exchangeShopList)
  return _internal_add_exchangeshoplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::ExchangeShopInfo >&
SCExchangeShop::exchangeshoplist() const {
  // @@protoc_insertion_point(field_list:F4BY.SCExchangeShop.exchangeShopList)
  return exchangeshoplist_;
}

// -------------------------------------------------------------------

// CSPurchasePackage

// int32 package_id = 1;
inline void CSPurchasePackage::clear_package_id() {
  package_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPurchasePackage::_internal_package_id() const {
  return package_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSPurchasePackage::package_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSPurchasePackage.package_id)
  return _internal_package_id();
}
inline void CSPurchasePackage::_internal_set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  package_id_ = value;
}
inline void CSPurchasePackage::set_package_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_package_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSPurchasePackage.package_id)
}

// -------------------------------------------------------------------

// SCPurchasePackage

// .F4BY.Package package = 1;
inline bool SCPurchasePackage::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool SCPurchasePackage::has_package() const {
  return _internal_has_package();
}
inline void SCPurchasePackage::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::F4BY::Package& SCPurchasePackage::_internal_package() const {
  const ::F4BY::Package* p = package_;
  return p != nullptr ? *p : reinterpret_cast<const ::F4BY::Package&>(
      ::F4BY::_Package_default_instance_);
}
inline const ::F4BY::Package& SCPurchasePackage::package() const {
  // @@protoc_insertion_point(field_get:F4BY.SCPurchasePackage.package)
  return _internal_package();
}
inline void SCPurchasePackage::unsafe_arena_set_allocated_package(
    ::F4BY::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:F4BY.SCPurchasePackage.package)
}
inline ::F4BY::Package* SCPurchasePackage::release_package() {
  
  ::F4BY::Package* temp = package_;
  package_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::F4BY::Package* SCPurchasePackage::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:F4BY.SCPurchasePackage.package)
  
  ::F4BY::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::F4BY::Package* SCPurchasePackage::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::F4BY::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::F4BY::Package* SCPurchasePackage::mutable_package() {
  // @@protoc_insertion_point(field_mutable:F4BY.SCPurchasePackage.package)
  return _internal_mutable_package();
}
inline void SCPurchasePackage::set_allocated_package(::F4BY::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:F4BY.SCPurchasePackage.package)
}

// -------------------------------------------------------------------

// CSVerifyTermChange

// -------------------------------------------------------------------

// SCVerifyTermChange

// bool change = 1;
inline void SCVerifyTermChange::clear_change() {
  change_ = false;
}
inline bool SCVerifyTermChange::_internal_change() const {
  return change_;
}
inline bool SCVerifyTermChange::change() const {
  // @@protoc_insertion_point(field_get:F4BY.SCVerifyTermChange.change)
  return _internal_change();
}
inline void SCVerifyTermChange::_internal_set_change(bool value) {
  
  change_ = value;
}
inline void SCVerifyTermChange::set_change(bool value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:F4BY.SCVerifyTermChange.change)
}

// repeated .F4BY.RewardInfo reward_list = 2;
inline int SCVerifyTermChange::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SCVerifyTermChange::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SCVerifyTermChange::clear_reward_list() {
  reward_list_.Clear();
}
inline ::F4BY::RewardInfo* SCVerifyTermChange::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:F4BY.SCVerifyTermChange.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >*
SCVerifyTermChange::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:F4BY.SCVerifyTermChange.reward_list)
  return &reward_list_;
}
inline const ::F4BY::RewardInfo& SCVerifyTermChange::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::F4BY::RewardInfo& SCVerifyTermChange::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:F4BY.SCVerifyTermChange.reward_list)
  return _internal_reward_list(index);
}
inline ::F4BY::RewardInfo* SCVerifyTermChange::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::F4BY::RewardInfo* SCVerifyTermChange::add_reward_list() {
  // @@protoc_insertion_point(field_add:F4BY.SCVerifyTermChange.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::F4BY::RewardInfo >&
SCVerifyTermChange::reward_list() const {
  // @@protoc_insertion_point(field_list:F4BY.SCVerifyTermChange.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// SCWaterDropInfo

// bool enable = 1;
inline void SCWaterDropInfo::clear_enable() {
  enable_ = false;
}
inline bool SCWaterDropInfo::_internal_enable() const {
  return enable_;
}
inline bool SCWaterDropInfo::enable() const {
  // @@protoc_insertion_point(field_get:F4BY.SCWaterDropInfo.enable)
  return _internal_enable();
}
inline void SCWaterDropInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCWaterDropInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:F4BY.SCWaterDropInfo.enable)
}

// int32 drop_count = 2;
inline void SCWaterDropInfo::clear_drop_count() {
  drop_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::_internal_drop_count() const {
  return drop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::drop_count() const {
  // @@protoc_insertion_point(field_get:F4BY.SCWaterDropInfo.drop_count)
  return _internal_drop_count();
}
inline void SCWaterDropInfo::_internal_set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drop_count_ = value;
}
inline void SCWaterDropInfo::set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drop_count(value);
  // @@protoc_insertion_point(field_set:F4BY.SCWaterDropInfo.drop_count)
}

// int32 fragment_count = 3;
inline void SCWaterDropInfo::clear_fragment_count() {
  fragment_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::_internal_fragment_count() const {
  return fragment_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::fragment_count() const {
  // @@protoc_insertion_point(field_get:F4BY.SCWaterDropInfo.fragment_count)
  return _internal_fragment_count();
}
inline void SCWaterDropInfo::_internal_set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fragment_count_ = value;
}
inline void SCWaterDropInfo::set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment_count(value);
  // @@protoc_insertion_point(field_set:F4BY.SCWaterDropInfo.fragment_count)
}

// -------------------------------------------------------------------

// CSBuyGun

// int32 gun_level = 1;
inline void CSBuyGun::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyGun::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyGun::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBuyGun.gun_level)
  return _internal_gun_level();
}
inline void CSBuyGun::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void CSBuyGun::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBuyGun.gun_level)
}

// -------------------------------------------------------------------

// SCBuyGun

// int32 gun_level = 1;
inline void SCBuyGun::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyGun::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyGun::gun_level() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBuyGun.gun_level)
  return _internal_gun_level();
}
inline void SCBuyGun::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCBuyGun::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBuyGun.gun_level)
}

// int32 price = 2;
inline void SCBuyGun::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyGun::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyGun::price() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBuyGun.price)
  return _internal_price();
}
inline void SCBuyGun::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void SCBuyGun::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBuyGun.price)
}

// -------------------------------------------------------------------

// CSBuyWings

// int32 wings_id = 1;
inline void CSBuyWings::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyWings::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyWings::wings_id() const {
  // @@protoc_insertion_point(field_get:F4BY.CSBuyWings.wings_id)
  return _internal_wings_id();
}
inline void CSBuyWings::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void CSBuyWings::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:F4BY.CSBuyWings.wings_id)
}

// -------------------------------------------------------------------

// SCBuyWings

// int32 wings_id = 1;
inline void SCBuyWings::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::wings_id() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBuyWings.wings_id)
  return _internal_wings_id();
}
inline void SCBuyWings::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void SCBuyWings::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBuyWings.wings_id)
}

// int32 price = 2;
inline void SCBuyWings::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::price() const {
  // @@protoc_insertion_point(field_get:F4BY.SCBuyWings.price)
  return _internal_price();
}
inline void SCBuyWings::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void SCBuyWings::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:F4BY.SCBuyWings.price)
}

// -------------------------------------------------------------------

// SCNotifyActStatus

// int32 act_type = 1;
inline void SCNotifyActStatus::clear_act_type() {
  act_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyActStatus::_internal_act_type() const {
  return act_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyActStatus::act_type() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNotifyActStatus.act_type)
  return _internal_act_type();
}
inline void SCNotifyActStatus::_internal_set_act_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  act_type_ = value;
}
inline void SCNotifyActStatus::set_act_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_act_type(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNotifyActStatus.act_type)
}

// int32 act_status = 2;
inline void SCNotifyActStatus::clear_act_status() {
  act_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyActStatus::_internal_act_status() const {
  return act_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyActStatus::act_status() const {
  // @@protoc_insertion_point(field_get:F4BY.SCNotifyActStatus.act_status)
  return _internal_act_status();
}
inline void SCNotifyActStatus::_internal_set_act_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  act_status_ = value;
}
inline void SCNotifyActStatus::set_act_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_act_status(value);
  // @@protoc_insertion_point(field_set:F4BY.SCNotifyActStatus.act_status)
}

// -------------------------------------------------------------------

// CSSetDoubleShoot

// int32 extra_mul = 1;
inline void CSSetDoubleShoot::clear_extra_mul() {
  extra_mul_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetDoubleShoot::_internal_extra_mul() const {
  return extra_mul_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetDoubleShoot::extra_mul() const {
  // @@protoc_insertion_point(field_get:F4BY.CSSetDoubleShoot.extra_mul)
  return _internal_extra_mul();
}
inline void CSSetDoubleShoot::_internal_set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_mul_ = value;
}
inline void CSSetDoubleShoot::set_extra_mul(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_mul(value);
  // @@protoc_insertion_point(field_set:F4BY.CSSetDoubleShoot.extra_mul)
}

// -------------------------------------------------------------------

// CSFreePoolInfo

// bool prepareLottery = 1;
inline void CSFreePoolInfo::clear_preparelottery() {
  preparelottery_ = false;
}
inline bool CSFreePoolInfo::_internal_preparelottery() const {
  return preparelottery_;
}
inline bool CSFreePoolInfo::preparelottery() const {
  // @@protoc_insertion_point(field_get:F4BY.CSFreePoolInfo.prepareLottery)
  return _internal_preparelottery();
}
inline void CSFreePoolInfo::_internal_set_preparelottery(bool value) {
  
  preparelottery_ = value;
}
inline void CSFreePoolInfo::set_preparelottery(bool value) {
  _internal_set_preparelottery(value);
  // @@protoc_insertion_point(field_set:F4BY.CSFreePoolInfo.prepareLottery)
}

// -------------------------------------------------------------------

// CSFreePoolLottery

// int32 level = 1;
inline void CSFreePoolLottery::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFreePoolLottery::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFreePoolLottery::level() const {
  // @@protoc_insertion_point(field_get:F4BY.CSFreePoolLottery.level)
  return _internal_level();
}
inline void CSFreePoolLottery::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CSFreePoolLottery::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:F4BY.CSFreePoolLottery.level)
}

// -------------------------------------------------------------------

// CSFreePoolOpen

// bool openFreePool = 1;
inline void CSFreePoolOpen::clear_openfreepool() {
  openfreepool_ = false;
}
inline bool CSFreePoolOpen::_internal_openfreepool() const {
  return openfreepool_;
}
inline bool CSFreePoolOpen::openfreepool() const {
  // @@protoc_insertion_point(field_get:F4BY.CSFreePoolOpen.openFreePool)
  return _internal_openfreepool();
}
inline void CSFreePoolOpen::_internal_set_openfreepool(bool value) {
  
  openfreepool_ = value;
}
inline void CSFreePoolOpen::set_openfreepool(bool value) {
  _internal_set_openfreepool(value);
  // @@protoc_insertion_point(field_set:F4BY.CSFreePoolOpen.openFreePool)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace F4BY

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::F4BY::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::F4BY::EMsgIDSubGame>() {
  return ::F4BY::EMsgIDSubGame_descriptor();
}
template <> struct is_proto_enum< ::F4BY::ErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::F4BY::ErrCode>() {
  return ::F4BY::ErrCode_descriptor();
}
template <> struct is_proto_enum< ::F4BY::UserEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::F4BY::UserEventType>() {
  return ::F4BY::UserEventType_descriptor();
}
template <> struct is_proto_enum< ::F4BY::CallFishType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::F4BY::CallFishType>() {
  return ::F4BY::CallFishType_descriptor();
}
template <> struct is_proto_enum< ::F4BY::ChestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::F4BY::ChestType>() {
  return ::F4BY::ChestType_descriptor();
}
template <> struct is_proto_enum< ::F4BY::ChestAutoSelectOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::F4BY::ChestAutoSelectOption>() {
  return ::F4BY::ChestAutoSelectOption_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_F4BY_2eproto
