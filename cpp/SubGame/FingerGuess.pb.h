// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FingerGuess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FingerGuess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FingerGuess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FingerGuess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FingerGuess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FingerGuess_2eproto;
namespace FingerGuess {
class MsgDayData;
class MsgDayDataDefaultTypeInternal;
extern MsgDayDataDefaultTypeInternal _MsgDayData_default_instance_;
class MsgQueryRecord;
class MsgQueryRecordDefaultTypeInternal;
extern MsgQueryRecordDefaultTypeInternal _MsgQueryRecord_default_instance_;
class MsgResult;
class MsgResultDefaultTypeInternal;
extern MsgResultDefaultTypeInternal _MsgResult_default_instance_;
class MsgRoundData;
class MsgRoundDataDefaultTypeInternal;
extern MsgRoundDataDefaultTypeInternal _MsgRoundData_default_instance_;
class MsgSceneInfo;
class MsgSceneInfoDefaultTypeInternal;
extern MsgSceneInfoDefaultTypeInternal _MsgSceneInfo_default_instance_;
class MsgTotalDayData;
class MsgTotalDayDataDefaultTypeInternal;
extern MsgTotalDayDataDefaultTypeInternal _MsgTotalDayData_default_instance_;
class MsgTotalRoundData;
class MsgTotalRoundDataDefaultTypeInternal;
extern MsgTotalRoundDataDefaultTypeInternal _MsgTotalRoundData_default_instance_;
}  // namespace FingerGuess
PROTOBUF_NAMESPACE_OPEN
template<> ::FingerGuess::MsgDayData* Arena::CreateMaybeMessage<::FingerGuess::MsgDayData>(Arena*);
template<> ::FingerGuess::MsgQueryRecord* Arena::CreateMaybeMessage<::FingerGuess::MsgQueryRecord>(Arena*);
template<> ::FingerGuess::MsgResult* Arena::CreateMaybeMessage<::FingerGuess::MsgResult>(Arena*);
template<> ::FingerGuess::MsgRoundData* Arena::CreateMaybeMessage<::FingerGuess::MsgRoundData>(Arena*);
template<> ::FingerGuess::MsgSceneInfo* Arena::CreateMaybeMessage<::FingerGuess::MsgSceneInfo>(Arena*);
template<> ::FingerGuess::MsgTotalDayData* Arena::CreateMaybeMessage<::FingerGuess::MsgTotalDayData>(Arena*);
template<> ::FingerGuess::MsgTotalRoundData* Arena::CreateMaybeMessage<::FingerGuess::MsgTotalRoundData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FingerGuess {

enum EMsgIDSubGame : int {
  MsgIDSubGame_Null = 0,
  MsgIDSubGame_PlayerReady = 1,
  MsgIDSubGame_PlayerReadyResp = 2,
  MsgIDSubGame_BankerChangeBet = 3,
  MsgIDSubGame_BankerChangeBetResp = 4,
  MsgIDSubGame_PlayerConfirmBet = 5,
  MsgIDSubGame_PlayerConfirmBetResp = 6,
  MsgIDSubGame_StartGame = 7,
  MsgIDSubGame_ResultResp = 8,
  MsgIDSubGame_QueryRecord = 9,
  MsgIDSubGame_QueryRoundRecordResp = 10,
  MsgIDSubGame_QueryDayRecordResp = 11,
  MsgIDSubGame_KickPlayer = 12,
  MsgIDSubGame_AddOneRecord = 13,
  MsgIDSubGame_CancelReady = 14,
  MsgIDSubGame_CancelReadyResp = 15,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = MsgIDSubGame_Null;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = MsgIDSubGame_CancelReadyResp;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
// ===================================================================

class MsgSceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgSceneInfo) */ {
 public:
  inline MsgSceneInfo() : MsgSceneInfo(nullptr) {}
  virtual ~MsgSceneInfo();

  MsgSceneInfo(const MsgSceneInfo& from);
  MsgSceneInfo(MsgSceneInfo&& from) noexcept
    : MsgSceneInfo() {
    *this = ::std::move(from);
  }

  inline MsgSceneInfo& operator=(const MsgSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSceneInfo& operator=(MsgSceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSceneInfo& default_instance();

  static inline const MsgSceneInfo* internal_default_instance() {
    return reinterpret_cast<const MsgSceneInfo*>(
               &_MsgSceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSceneInfo& a, MsgSceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSceneInfo* New() const final {
    return CreateMaybeMessage<MsgSceneInfo>(nullptr);
  }

  MsgSceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSceneInfo& from);
  void MergeFrom(const MsgSceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgSceneInfo";
  }
  protected:
  explicit MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetFieldNumber = 2,
    kPasswordFieldNumber = 4,
    kRoomIdFieldNumber = 1,
    kCurBetFieldNumber = 3,
    kMaxBetFieldNumber = 6,
    kMinBetFieldNumber = 5,
    kHouseOwnerFieldNumber = 7,
  };
  // repeated int32 bet = 2;
  int bet_size() const;
  private:
  int _internal_bet_size() const;
  public:
  void clear_bet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet() const;
  void _internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet(int index) const;
  void set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet();

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_bet = 3;
  void clear_cur_bet();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_bet() const;
  void set_cur_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_bet() const;
  void _internal_set_cur_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 max_bet = 6;
  void clear_max_bet();
  ::PROTOBUF_NAMESPACE_ID::int64 max_bet() const;
  void set_max_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_bet() const;
  void _internal_set_max_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 min_bet = 5;
  void clear_min_bet();
  ::PROTOBUF_NAMESPACE_ID::int32 min_bet() const;
  void set_min_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_bet() const;
  void _internal_set_min_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool house_owner = 7;
  void clear_house_owner();
  bool house_owner() const;
  void set_house_owner(bool value);
  private:
  bool _internal_house_owner() const;
  void _internal_set_house_owner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgSceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_;
  mutable std::atomic<int> _bet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_bet_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_bet_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_bet_;
  bool house_owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// -------------------------------------------------------------------

class MsgResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgResult) */ {
 public:
  inline MsgResult() : MsgResult(nullptr) {}
  virtual ~MsgResult();

  MsgResult(const MsgResult& from);
  MsgResult(MsgResult&& from) noexcept
    : MsgResult() {
    *this = ::std::move(from);
  }

  inline MsgResult& operator=(const MsgResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgResult& operator=(MsgResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgResult& default_instance();

  static inline const MsgResult* internal_default_instance() {
    return reinterpret_cast<const MsgResult*>(
               &_MsgResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgResult& a, MsgResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgResult* New() const final {
    return CreateMaybeMessage<MsgResult>(nullptr);
  }

  MsgResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgResult& from);
  void MergeFrom(const MsgResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgResult";
  }
  protected:
  explicit MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// -------------------------------------------------------------------

class MsgRoundData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgRoundData) */ {
 public:
  inline MsgRoundData() : MsgRoundData(nullptr) {}
  virtual ~MsgRoundData();

  MsgRoundData(const MsgRoundData& from);
  MsgRoundData(MsgRoundData&& from) noexcept
    : MsgRoundData() {
    *this = ::std::move(from);
  }

  inline MsgRoundData& operator=(const MsgRoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRoundData& operator=(MsgRoundData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRoundData& default_instance();

  static inline const MsgRoundData* internal_default_instance() {
    return reinterpret_cast<const MsgRoundData*>(
               &_MsgRoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgRoundData& a, MsgRoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRoundData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRoundData* New() const final {
    return CreateMaybeMessage<MsgRoundData>(nullptr);
  }

  MsgRoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRoundData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRoundData& from);
  void MergeFrom(const MsgRoundData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRoundData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgRoundData";
  }
  protected:
  explicit MsgRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kWinUserIdFieldNumber = 2,
    kGoldFieldNumber = 4,
    kLoseUserIdFieldNumber = 3,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 win_user_id = 2;
  void clear_win_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 win_user_id() const;
  void set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_user_id() const;
  void _internal_set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 gold = 4;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 lose_user_id = 3;
  void clear_lose_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lose_user_id() const;
  void set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose_user_id() const;
  void _internal_set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgRoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 lose_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// -------------------------------------------------------------------

class MsgTotalRoundData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgTotalRoundData) */ {
 public:
  inline MsgTotalRoundData() : MsgTotalRoundData(nullptr) {}
  virtual ~MsgTotalRoundData();

  MsgTotalRoundData(const MsgTotalRoundData& from);
  MsgTotalRoundData(MsgTotalRoundData&& from) noexcept
    : MsgTotalRoundData() {
    *this = ::std::move(from);
  }

  inline MsgTotalRoundData& operator=(const MsgTotalRoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTotalRoundData& operator=(MsgTotalRoundData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgTotalRoundData& default_instance();

  static inline const MsgTotalRoundData* internal_default_instance() {
    return reinterpret_cast<const MsgTotalRoundData*>(
               &_MsgTotalRoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgTotalRoundData& a, MsgTotalRoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTotalRoundData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTotalRoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgTotalRoundData* New() const final {
    return CreateMaybeMessage<MsgTotalRoundData>(nullptr);
  }

  MsgTotalRoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgTotalRoundData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgTotalRoundData& from);
  void MergeFrom(const MsgTotalRoundData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTotalRoundData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgTotalRoundData";
  }
  protected:
  explicit MsgTotalRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundDataFieldNumber = 1,
  };
  // repeated .FingerGuess.MsgRoundData round_data = 1;
  int round_data_size() const;
  private:
  int _internal_round_data_size() const;
  public:
  void clear_round_data();
  ::FingerGuess::MsgRoundData* mutable_round_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgRoundData >*
      mutable_round_data();
  private:
  const ::FingerGuess::MsgRoundData& _internal_round_data(int index) const;
  ::FingerGuess::MsgRoundData* _internal_add_round_data();
  public:
  const ::FingerGuess::MsgRoundData& round_data(int index) const;
  ::FingerGuess::MsgRoundData* add_round_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgRoundData >&
      round_data() const;

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgTotalRoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgRoundData > round_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// -------------------------------------------------------------------

class MsgDayData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgDayData) */ {
 public:
  inline MsgDayData() : MsgDayData(nullptr) {}
  virtual ~MsgDayData();

  MsgDayData(const MsgDayData& from);
  MsgDayData(MsgDayData&& from) noexcept
    : MsgDayData() {
    *this = ::std::move(from);
  }

  inline MsgDayData& operator=(const MsgDayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDayData& operator=(MsgDayData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDayData& default_instance();

  static inline const MsgDayData* internal_default_instance() {
    return reinterpret_cast<const MsgDayData*>(
               &_MsgDayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgDayData& a, MsgDayData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDayData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDayData* New() const final {
    return CreateMaybeMessage<MsgDayData>(nullptr);
  }

  MsgDayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDayData& from);
  void MergeFrom(const MsgDayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgDayData";
  }
  protected:
  explicit MsgDayData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTotalPlayCountFieldNumber = 2,
    kLoseCountFieldNumber = 3,
    kLoseGoldFieldNumber = 4,
    kWinGoldFieldNumber = 6,
    kTotalGoldFieldNumber = 7,
    kSurplusGoldFieldNumber = 8,
    kWinCountFieldNumber = 5,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int32 total_play_count = 2;
  void clear_total_play_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_play_count() const;
  void set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_play_count() const;
  void _internal_set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lose_count = 3;
  void clear_lose_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count() const;
  void set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose_count() const;
  void _internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 lose_gold = 4;
  void clear_lose_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 lose_gold() const;
  void set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lose_gold() const;
  void _internal_set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 win_gold = 6;
  void clear_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 win_gold() const;
  void set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_win_gold() const;
  void _internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_gold = 7;
  void clear_total_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 total_gold() const;
  void set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_gold() const;
  void _internal_set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 surplus_gold = 8;
  void clear_surplus_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 surplus_gold() const;
  void set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_surplus_gold() const;
  void _internal_set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 win_count = 5;
  void clear_win_count();
  ::PROTOBUF_NAMESPACE_ID::int32 win_count() const;
  void set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_count() const;
  void _internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgDayData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_play_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 lose_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 win_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 surplus_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// -------------------------------------------------------------------

class MsgTotalDayData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgTotalDayData) */ {
 public:
  inline MsgTotalDayData() : MsgTotalDayData(nullptr) {}
  virtual ~MsgTotalDayData();

  MsgTotalDayData(const MsgTotalDayData& from);
  MsgTotalDayData(MsgTotalDayData&& from) noexcept
    : MsgTotalDayData() {
    *this = ::std::move(from);
  }

  inline MsgTotalDayData& operator=(const MsgTotalDayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTotalDayData& operator=(MsgTotalDayData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgTotalDayData& default_instance();

  static inline const MsgTotalDayData* internal_default_instance() {
    return reinterpret_cast<const MsgTotalDayData*>(
               &_MsgTotalDayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgTotalDayData& a, MsgTotalDayData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTotalDayData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTotalDayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgTotalDayData* New() const final {
    return CreateMaybeMessage<MsgTotalDayData>(nullptr);
  }

  MsgTotalDayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgTotalDayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgTotalDayData& from);
  void MergeFrom(const MsgTotalDayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTotalDayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgTotalDayData";
  }
  protected:
  explicit MsgTotalDayData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyDataFieldNumber = 1,
  };
  // repeated .FingerGuess.MsgDayData daily_data = 1;
  int daily_data_size() const;
  private:
  int _internal_daily_data_size() const;
  public:
  void clear_daily_data();
  ::FingerGuess::MsgDayData* mutable_daily_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgDayData >*
      mutable_daily_data();
  private:
  const ::FingerGuess::MsgDayData& _internal_daily_data(int index) const;
  ::FingerGuess::MsgDayData* _internal_add_daily_data();
  public:
  const ::FingerGuess::MsgDayData& daily_data(int index) const;
  ::FingerGuess::MsgDayData* add_daily_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgDayData >&
      daily_data() const;

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgTotalDayData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgDayData > daily_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// -------------------------------------------------------------------

class MsgQueryRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FingerGuess.MsgQueryRecord) */ {
 public:
  inline MsgQueryRecord() : MsgQueryRecord(nullptr) {}
  virtual ~MsgQueryRecord();

  MsgQueryRecord(const MsgQueryRecord& from);
  MsgQueryRecord(MsgQueryRecord&& from) noexcept
    : MsgQueryRecord() {
    *this = ::std::move(from);
  }

  inline MsgQueryRecord& operator=(const MsgQueryRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgQueryRecord& operator=(MsgQueryRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgQueryRecord& default_instance();

  static inline const MsgQueryRecord* internal_default_instance() {
    return reinterpret_cast<const MsgQueryRecord*>(
               &_MsgQueryRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgQueryRecord& a, MsgQueryRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgQueryRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgQueryRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgQueryRecord* New() const final {
    return CreateMaybeMessage<MsgQueryRecord>(nullptr);
  }

  MsgQueryRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgQueryRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgQueryRecord& from);
  void MergeFrom(const MsgQueryRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgQueryRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FingerGuess.MsgQueryRecord";
  }
  protected:
  explicit MsgQueryRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FingerGuess_2eproto);
    return ::descriptor_table_FingerGuess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kNumFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FingerGuess.MsgQueryRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FingerGuess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSceneInfo

// int32 room_id = 1;
inline void MsgSceneInfo::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::room_id() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.room_id)
  return _internal_room_id();
}
inline void MsgSceneInfo::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
}
inline void MsgSceneInfo::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.room_id)
}

// repeated int32 bet = 2;
inline int MsgSceneInfo::_internal_bet_size() const {
  return bet_.size();
}
inline int MsgSceneInfo::bet_size() const {
  return _internal_bet_size();
}
inline void MsgSceneInfo::clear_bet() {
  bet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_bet(int index) const {
  return bet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::bet(int index) const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.bet)
  return _internal_bet(index);
}
inline void MsgSceneInfo::set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Set(index, value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.bet)
}
inline void MsgSceneInfo::_internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Add(value);
}
inline void MsgSceneInfo::add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet(value);
  // @@protoc_insertion_point(field_add:FingerGuess.MsgSceneInfo.bet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_bet() const {
  return bet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::bet() const {
  // @@protoc_insertion_point(field_list:FingerGuess.MsgSceneInfo.bet)
  return _internal_bet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_bet() {
  return &bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_bet() {
  // @@protoc_insertion_point(field_mutable_list:FingerGuess.MsgSceneInfo.bet)
  return _internal_mutable_bet();
}

// int32 cur_bet = 3;
inline void MsgSceneInfo::clear_cur_bet() {
  cur_bet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_cur_bet() const {
  return cur_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::cur_bet() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.cur_bet)
  return _internal_cur_bet();
}
inline void MsgSceneInfo::_internal_set_cur_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_bet_ = value;
}
inline void MsgSceneInfo::set_cur_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_bet(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.cur_bet)
}

// string password = 4;
inline void MsgSceneInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgSceneInfo::password() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.password)
  return _internal_password();
}
inline void MsgSceneInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.password)
}
inline std::string* MsgSceneInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:FingerGuess.MsgSceneInfo.password)
  return _internal_mutable_password();
}
inline const std::string& MsgSceneInfo::_internal_password() const {
  return password_.Get();
}
inline void MsgSceneInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgSceneInfo::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FingerGuess.MsgSceneInfo.password)
}
inline void MsgSceneInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FingerGuess.MsgSceneInfo.password)
}
inline void MsgSceneInfo::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FingerGuess.MsgSceneInfo.password)
}
inline std::string* MsgSceneInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgSceneInfo::release_password() {
  // @@protoc_insertion_point(field_release:FingerGuess.MsgSceneInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgSceneInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FingerGuess.MsgSceneInfo.password)
}

// int32 min_bet = 5;
inline void MsgSceneInfo::clear_min_bet() {
  min_bet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_min_bet() const {
  return min_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::min_bet() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.min_bet)
  return _internal_min_bet();
}
inline void MsgSceneInfo::_internal_set_min_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_bet_ = value;
}
inline void MsgSceneInfo::set_min_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_bet(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.min_bet)
}

// int64 max_bet = 6;
inline void MsgSceneInfo::clear_max_bet() {
  max_bet_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgSceneInfo::_internal_max_bet() const {
  return max_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgSceneInfo::max_bet() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.max_bet)
  return _internal_max_bet();
}
inline void MsgSceneInfo::_internal_set_max_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_bet_ = value;
}
inline void MsgSceneInfo::set_max_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_bet(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.max_bet)
}

// bool house_owner = 7;
inline void MsgSceneInfo::clear_house_owner() {
  house_owner_ = false;
}
inline bool MsgSceneInfo::_internal_house_owner() const {
  return house_owner_;
}
inline bool MsgSceneInfo::house_owner() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgSceneInfo.house_owner)
  return _internal_house_owner();
}
inline void MsgSceneInfo::_internal_set_house_owner(bool value) {
  
  house_owner_ = value;
}
inline void MsgSceneInfo::set_house_owner(bool value) {
  _internal_set_house_owner(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgSceneInfo.house_owner)
}

// -------------------------------------------------------------------

// MsgResult

// int32 result = 1;
inline void MsgResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::result() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgResult.result)
  return _internal_result();
}
inline void MsgResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void MsgResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgResult.result)
}

// int64 gold = 2;
inline void MsgResult::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgResult::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgResult::gold() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgResult.gold)
  return _internal_gold();
}
inline void MsgResult::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgResult::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgResult.gold)
}

// -------------------------------------------------------------------

// MsgRoundData

// int32 time = 1;
inline void MsgRoundData::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::time() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgRoundData.time)
  return _internal_time();
}
inline void MsgRoundData::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void MsgRoundData::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgRoundData.time)
}

// int32 win_user_id = 2;
inline void MsgRoundData::clear_win_user_id() {
  win_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::_internal_win_user_id() const {
  return win_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::win_user_id() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgRoundData.win_user_id)
  return _internal_win_user_id();
}
inline void MsgRoundData::_internal_set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_user_id_ = value;
}
inline void MsgRoundData::set_win_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_user_id(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgRoundData.win_user_id)
}

// int32 lose_user_id = 3;
inline void MsgRoundData::clear_lose_user_id() {
  lose_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::_internal_lose_user_id() const {
  return lose_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRoundData::lose_user_id() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgRoundData.lose_user_id)
  return _internal_lose_user_id();
}
inline void MsgRoundData::_internal_set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lose_user_id_ = value;
}
inline void MsgRoundData::set_lose_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lose_user_id(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgRoundData.lose_user_id)
}

// int64 gold = 4;
inline void MsgRoundData::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgRoundData::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgRoundData::gold() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgRoundData.gold)
  return _internal_gold();
}
inline void MsgRoundData::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgRoundData::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgRoundData.gold)
}

// -------------------------------------------------------------------

// MsgTotalRoundData

// repeated .FingerGuess.MsgRoundData round_data = 1;
inline int MsgTotalRoundData::_internal_round_data_size() const {
  return round_data_.size();
}
inline int MsgTotalRoundData::round_data_size() const {
  return _internal_round_data_size();
}
inline void MsgTotalRoundData::clear_round_data() {
  round_data_.Clear();
}
inline ::FingerGuess::MsgRoundData* MsgTotalRoundData::mutable_round_data(int index) {
  // @@protoc_insertion_point(field_mutable:FingerGuess.MsgTotalRoundData.round_data)
  return round_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgRoundData >*
MsgTotalRoundData::mutable_round_data() {
  // @@protoc_insertion_point(field_mutable_list:FingerGuess.MsgTotalRoundData.round_data)
  return &round_data_;
}
inline const ::FingerGuess::MsgRoundData& MsgTotalRoundData::_internal_round_data(int index) const {
  return round_data_.Get(index);
}
inline const ::FingerGuess::MsgRoundData& MsgTotalRoundData::round_data(int index) const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgTotalRoundData.round_data)
  return _internal_round_data(index);
}
inline ::FingerGuess::MsgRoundData* MsgTotalRoundData::_internal_add_round_data() {
  return round_data_.Add();
}
inline ::FingerGuess::MsgRoundData* MsgTotalRoundData::add_round_data() {
  // @@protoc_insertion_point(field_add:FingerGuess.MsgTotalRoundData.round_data)
  return _internal_add_round_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgRoundData >&
MsgTotalRoundData::round_data() const {
  // @@protoc_insertion_point(field_list:FingerGuess.MsgTotalRoundData.round_data)
  return round_data_;
}

// -------------------------------------------------------------------

// MsgDayData

// string time = 1;
inline void MsgDayData::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& MsgDayData::time() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.time)
  return _internal_time();
}
inline void MsgDayData::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.time)
}
inline std::string* MsgDayData::mutable_time() {
  // @@protoc_insertion_point(field_mutable:FingerGuess.MsgDayData.time)
  return _internal_mutable_time();
}
inline const std::string& MsgDayData::_internal_time() const {
  return time_.Get();
}
inline void MsgDayData::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDayData::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FingerGuess.MsgDayData.time)
}
inline void MsgDayData::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FingerGuess.MsgDayData.time)
}
inline void MsgDayData::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FingerGuess.MsgDayData.time)
}
inline std::string* MsgDayData::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDayData::release_time() {
  // @@protoc_insertion_point(field_release:FingerGuess.MsgDayData.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDayData::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FingerGuess.MsgDayData.time)
}

// int32 total_play_count = 2;
inline void MsgDayData::clear_total_play_count() {
  total_play_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::_internal_total_play_count() const {
  return total_play_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::total_play_count() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.total_play_count)
  return _internal_total_play_count();
}
inline void MsgDayData::_internal_set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_play_count_ = value;
}
inline void MsgDayData::set_total_play_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_play_count(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.total_play_count)
}

// int32 lose_count = 3;
inline void MsgDayData::clear_lose_count() {
  lose_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::_internal_lose_count() const {
  return lose_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::lose_count() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.lose_count)
  return _internal_lose_count();
}
inline void MsgDayData::_internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lose_count_ = value;
}
inline void MsgDayData::set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lose_count(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.lose_count)
}

// int64 lose_gold = 4;
inline void MsgDayData::clear_lose_gold() {
  lose_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_lose_gold() const {
  return lose_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::lose_gold() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.lose_gold)
  return _internal_lose_gold();
}
inline void MsgDayData::_internal_set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lose_gold_ = value;
}
inline void MsgDayData::set_lose_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lose_gold(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.lose_gold)
}

// int32 win_count = 5;
inline void MsgDayData::clear_win_count() {
  win_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::_internal_win_count() const {
  return win_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDayData::win_count() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.win_count)
  return _internal_win_count();
}
inline void MsgDayData::_internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_count_ = value;
}
inline void MsgDayData::set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.win_count)
}

// int64 win_gold = 6;
inline void MsgDayData::clear_win_gold() {
  win_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_win_gold() const {
  return win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::win_gold() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.win_gold)
  return _internal_win_gold();
}
inline void MsgDayData::_internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  win_gold_ = value;
}
inline void MsgDayData::set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_win_gold(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.win_gold)
}

// int64 total_gold = 7;
inline void MsgDayData::clear_total_gold() {
  total_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_total_gold() const {
  return total_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::total_gold() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.total_gold)
  return _internal_total_gold();
}
inline void MsgDayData::_internal_set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_gold_ = value;
}
inline void MsgDayData::set_total_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_gold(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.total_gold)
}

// int64 surplus_gold = 8;
inline void MsgDayData::clear_surplus_gold() {
  surplus_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::_internal_surplus_gold() const {
  return surplus_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDayData::surplus_gold() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgDayData.surplus_gold)
  return _internal_surplus_gold();
}
inline void MsgDayData::_internal_set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  surplus_gold_ = value;
}
inline void MsgDayData::set_surplus_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_surplus_gold(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgDayData.surplus_gold)
}

// -------------------------------------------------------------------

// MsgTotalDayData

// repeated .FingerGuess.MsgDayData daily_data = 1;
inline int MsgTotalDayData::_internal_daily_data_size() const {
  return daily_data_.size();
}
inline int MsgTotalDayData::daily_data_size() const {
  return _internal_daily_data_size();
}
inline void MsgTotalDayData::clear_daily_data() {
  daily_data_.Clear();
}
inline ::FingerGuess::MsgDayData* MsgTotalDayData::mutable_daily_data(int index) {
  // @@protoc_insertion_point(field_mutable:FingerGuess.MsgTotalDayData.daily_data)
  return daily_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgDayData >*
MsgTotalDayData::mutable_daily_data() {
  // @@protoc_insertion_point(field_mutable_list:FingerGuess.MsgTotalDayData.daily_data)
  return &daily_data_;
}
inline const ::FingerGuess::MsgDayData& MsgTotalDayData::_internal_daily_data(int index) const {
  return daily_data_.Get(index);
}
inline const ::FingerGuess::MsgDayData& MsgTotalDayData::daily_data(int index) const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgTotalDayData.daily_data)
  return _internal_daily_data(index);
}
inline ::FingerGuess::MsgDayData* MsgTotalDayData::_internal_add_daily_data() {
  return daily_data_.Add();
}
inline ::FingerGuess::MsgDayData* MsgTotalDayData::add_daily_data() {
  // @@protoc_insertion_point(field_add:FingerGuess.MsgTotalDayData.daily_data)
  return _internal_add_daily_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FingerGuess::MsgDayData >&
MsgTotalDayData::daily_data() const {
  // @@protoc_insertion_point(field_list:FingerGuess.MsgTotalDayData.daily_data)
  return daily_data_;
}

// -------------------------------------------------------------------

// MsgQueryRecord

// int32 page = 1;
inline void MsgQueryRecord::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::page() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgQueryRecord.page)
  return _internal_page();
}
inline void MsgQueryRecord::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void MsgQueryRecord::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgQueryRecord.page)
}

// int32 num = 2;
inline void MsgQueryRecord::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::num() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgQueryRecord.num)
  return _internal_num();
}
inline void MsgQueryRecord::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void MsgQueryRecord::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgQueryRecord.num)
}

// int32 type = 3;
inline void MsgQueryRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgQueryRecord::type() const {
  // @@protoc_insertion_point(field_get:FingerGuess.MsgQueryRecord.type)
  return _internal_type();
}
inline void MsgQueryRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void MsgQueryRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:FingerGuess.MsgQueryRecord.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FingerGuess

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FingerGuess::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FingerGuess::EMsgIDSubGame>() {
  return ::FingerGuess::EMsgIDSubGame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FingerGuess_2eproto
