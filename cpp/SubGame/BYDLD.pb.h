// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BYDLD.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BYDLD_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BYDLD_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BYDLD_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BYDLD_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[264]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BYDLD_2eproto;
namespace BYDLD {
class AwardDetail;
class AwardDetailDefaultTypeInternal;
extern AwardDetailDefaultTypeInternal _AwardDetail_default_instance_;
class AwardPoolData;
class AwardPoolDataDefaultTypeInternal;
extern AwardPoolDataDefaultTypeInternal _AwardPoolData_default_instance_;
class AwardPoolRecord;
class AwardPoolRecordDefaultTypeInternal;
extern AwardPoolRecordDefaultTypeInternal _AwardPoolRecord_default_instance_;
class AwardProp;
class AwardPropDefaultTypeInternal;
extern AwardPropDefaultTypeInternal _AwardProp_default_instance_;
class AztecClearReward;
class AztecClearRewardDefaultTypeInternal;
extern AztecClearRewardDefaultTypeInternal _AztecClearReward_default_instance_;
class AztecDataInfo;
class AztecDataInfoDefaultTypeInternal;
extern AztecDataInfoDefaultTypeInternal _AztecDataInfo_default_instance_;
class AztecGemConfig;
class AztecGemConfigDefaultTypeInternal;
extern AztecGemConfigDefaultTypeInternal _AztecGemConfig_default_instance_;
class AztecGemConfigItem;
class AztecGemConfigItemDefaultTypeInternal;
extern AztecGemConfigItemDefaultTypeInternal _AztecGemConfigItem_default_instance_;
class AztecStep;
class AztecStepDefaultTypeInternal;
extern AztecStepDefaultTypeInternal _AztecStep_default_instance_;
class AztecTable;
class AztecTableDefaultTypeInternal;
extern AztecTableDefaultTypeInternal _AztecTable_default_instance_;
class BigSmallRecord;
class BigSmallRecordDefaultTypeInternal;
extern BigSmallRecordDefaultTypeInternal _BigSmallRecord_default_instance_;
class CSAwardPoolRecord;
class CSAwardPoolRecordDefaultTypeInternal;
extern CSAwardPoolRecordDefaultTypeInternal _CSAwardPoolRecord_default_instance_;
class CSAztecGemConfig;
class CSAztecGemConfigDefaultTypeInternal;
extern CSAztecGemConfigDefaultTypeInternal _CSAztecGemConfig_default_instance_;
class CSBigSmallBet;
class CSBigSmallBetDefaultTypeInternal;
extern CSBigSmallBetDefaultTypeInternal _CSBigSmallBet_default_instance_;
class CSBigSmallChoose;
class CSBigSmallChooseDefaultTypeInternal;
extern CSBigSmallChooseDefaultTypeInternal _CSBigSmallChoose_default_instance_;
class CSBigSmallRecord;
class CSBigSmallRecordDefaultTypeInternal;
extern CSBigSmallRecordDefaultTypeInternal _CSBigSmallRecord_default_instance_;
class CSBigSmallWinInfo;
class CSBigSmallWinInfoDefaultTypeInternal;
extern CSBigSmallWinInfoDefaultTypeInternal _CSBigSmallWinInfo_default_instance_;
class CSBuyGun;
class CSBuyGunDefaultTypeInternal;
extern CSBuyGunDefaultTypeInternal _CSBuyGun_default_instance_;
class CSBuyNewYearCard;
class CSBuyNewYearCardDefaultTypeInternal;
extern CSBuyNewYearCardDefaultTypeInternal _CSBuyNewYearCard_default_instance_;
class CSBuyWings;
class CSBuyWingsDefaultTypeInternal;
extern CSBuyWingsDefaultTypeInternal _CSBuyWings_default_instance_;
class CSChangeTable;
class CSChangeTableDefaultTypeInternal;
extern CSChangeTableDefaultTypeInternal _CSChangeTable_default_instance_;
class CSCheckDragonWheelProp;
class CSCheckDragonWheelPropDefaultTypeInternal;
extern CSCheckDragonWheelPropDefaultTypeInternal _CSCheckDragonWheelProp_default_instance_;
class CSChestConfig;
class CSChestConfigDefaultTypeInternal;
extern CSChestConfigDefaultTypeInternal _CSChestConfig_default_instance_;
class CSChestSetAutoSelect;
class CSChestSetAutoSelectDefaultTypeInternal;
extern CSChestSetAutoSelectDefaultTypeInternal _CSChestSetAutoSelect_default_instance_;
class CSChestSetEnable;
class CSChestSetEnableDefaultTypeInternal;
extern CSChestSetEnableDefaultTypeInternal _CSChestSetEnable_default_instance_;
class CSClickStatistic;
class CSClickStatisticDefaultTypeInternal;
extern CSClickStatisticDefaultTypeInternal _CSClickStatistic_default_instance_;
class CSClientTimeValidate;
class CSClientTimeValidateDefaultTypeInternal;
extern CSClientTimeValidateDefaultTypeInternal _CSClientTimeValidate_default_instance_;
class CSDevourHit;
class CSDevourHitDefaultTypeInternal;
extern CSDevourHitDefaultTypeInternal _CSDevourHit_default_instance_;
class CSDragonBallEnd;
class CSDragonBallEndDefaultTypeInternal;
extern CSDragonBallEndDefaultTypeInternal _CSDragonBallEnd_default_instance_;
class CSDragonWheelStart;
class CSDragonWheelStartDefaultTypeInternal;
extern CSDragonWheelStartDefaultTypeInternal _CSDragonWheelStart_default_instance_;
class CSFishOutsideScreen;
class CSFishOutsideScreenDefaultTypeInternal;
extern CSFishOutsideScreenDefaultTypeInternal _CSFishOutsideScreen_default_instance_;
class CSFortuneShoot;
class CSFortuneShootDefaultTypeInternal;
extern CSFortuneShootDefaultTypeInternal _CSFortuneShoot_default_instance_;
class CSFreeTimeEnd;
class CSFreeTimeEndDefaultTypeInternal;
extern CSFreeTimeEndDefaultTypeInternal _CSFreeTimeEnd_default_instance_;
class CSGetLuckyNum;
class CSGetLuckyNumDefaultTypeInternal;
extern CSGetLuckyNumDefaultTypeInternal _CSGetLuckyNum_default_instance_;
class CSGetLuckyTaskAward;
class CSGetLuckyTaskAwardDefaultTypeInternal;
extern CSGetLuckyTaskAwardDefaultTypeInternal _CSGetLuckyTaskAward_default_instance_;
class CSHBonusPool;
class CSHBonusPoolDefaultTypeInternal;
extern CSHBonusPoolDefaultTypeInternal _CSHBonusPool_default_instance_;
class CSHHistoryRank;
class CSHHistoryRankDefaultTypeInternal;
extern CSHHistoryRankDefaultTypeInternal _CSHHistoryRank_default_instance_;
class CSHLuckyInfo;
class CSHLuckyInfoDefaultTypeInternal;
extern CSHLuckyInfoDefaultTypeInternal _CSHLuckyInfo_default_instance_;
class CSHMatchInfo;
class CSHMatchInfoDefaultTypeInternal;
extern CSHMatchInfoDefaultTypeInternal _CSHMatchInfo_default_instance_;
class CSHMatchInfoTip;
class CSHMatchInfoTipDefaultTypeInternal;
extern CSHMatchInfoTipDefaultTypeInternal _CSHMatchInfoTip_default_instance_;
class CSHRankBar;
class CSHRankBarDefaultTypeInternal;
extern CSHRankBarDefaultTypeInternal _CSHRankBar_default_instance_;
class CSHRealRank;
class CSHRealRankDefaultTypeInternal;
extern CSHRealRankDefaultTypeInternal _CSHRealRank_default_instance_;
class CSHReward;
class CSHRewardDefaultTypeInternal;
extern CSHRewardDefaultTypeInternal _CSHReward_default_instance_;
class CSHeartBeat;
class CSHeartBeatDefaultTypeInternal;
extern CSHeartBeatDefaultTypeInternal _CSHeartBeat_default_instance_;
class CSHitMultiFish;
class CSHitMultiFishDefaultTypeInternal;
extern CSHitMultiFishDefaultTypeInternal _CSHitMultiFish_default_instance_;
class CSJadeAwardInfo;
class CSJadeAwardInfoDefaultTypeInternal;
extern CSJadeAwardInfoDefaultTypeInternal _CSJadeAwardInfo_default_instance_;
class CSLockFish;
class CSLockFishDefaultTypeInternal;
extern CSLockFishDefaultTypeInternal _CSLockFish_default_instance_;
class CSLoginGameWithToken;
class CSLoginGameWithTokenDefaultTypeInternal;
extern CSLoginGameWithTokenDefaultTypeInternal _CSLoginGameWithToken_default_instance_;
class CSLuckyDrawInfo;
class CSLuckyDrawInfoDefaultTypeInternal;
extern CSLuckyDrawInfoDefaultTypeInternal _CSLuckyDrawInfo_default_instance_;
class CSLuckyPoolDraw;
class CSLuckyPoolDrawDefaultTypeInternal;
extern CSLuckyPoolDrawDefaultTypeInternal _CSLuckyPoolDraw_default_instance_;
class CSLuckyPoolInfo;
class CSLuckyPoolInfoDefaultTypeInternal;
extern CSLuckyPoolInfoDefaultTypeInternal _CSLuckyPoolInfo_default_instance_;
class CSLuckyRecord;
class CSLuckyRecordDefaultTypeInternal;
extern CSLuckyRecordDefaultTypeInternal _CSLuckyRecord_default_instance_;
class CSLuckyRedDot;
class CSLuckyRedDotDefaultTypeInternal;
extern CSLuckyRedDotDefaultTypeInternal _CSLuckyRedDot_default_instance_;
class CSMagicCardList;
class CSMagicCardListDefaultTypeInternal;
extern CSMagicCardListDefaultTypeInternal _CSMagicCardList_default_instance_;
class CSMatchPackAddition;
class CSMatchPackAdditionDefaultTypeInternal;
extern CSMatchPackAdditionDefaultTypeInternal _CSMatchPackAddition_default_instance_;
class CSNewYearCardAwardRecord;
class CSNewYearCardAwardRecordDefaultTypeInternal;
extern CSNewYearCardAwardRecordDefaultTypeInternal _CSNewYearCardAwardRecord_default_instance_;
class CSNewYearCardExchange;
class CSNewYearCardExchangeDefaultTypeInternal;
extern CSNewYearCardExchangeDefaultTypeInternal _CSNewYearCardExchange_default_instance_;
class CSNotifyLogout;
class CSNotifyLogoutDefaultTypeInternal;
extern CSNotifyLogoutDefaultTypeInternal _CSNotifyLogout_default_instance_;
class CSOpenChest;
class CSOpenChestDefaultTypeInternal;
extern CSOpenChestDefaultTypeInternal _CSOpenChest_default_instance_;
class CSReqRewardAddTask;
class CSReqRewardAddTaskDefaultTypeInternal;
extern CSReqRewardAddTaskDefaultTypeInternal _CSReqRewardAddTask_default_instance_;
class CSReqRewardRecord;
class CSReqRewardRecordDefaultTypeInternal;
extern CSReqRewardRecordDefaultTypeInternal _CSReqRewardRecord_default_instance_;
class CSRewardChangeAuto;
class CSRewardChangeAutoDefaultTypeInternal;
extern CSRewardChangeAutoDefaultTypeInternal _CSRewardChangeAuto_default_instance_;
class CSSaveSkillTime;
class CSSaveSkillTimeDefaultTypeInternal;
extern CSSaveSkillTimeDefaultTypeInternal _CSSaveSkillTime_default_instance_;
class CSScratchNewYearCard;
class CSScratchNewYearCardDefaultTypeInternal;
extern CSScratchNewYearCardDefaultTypeInternal _CSScratchNewYearCard_default_instance_;
class CSSelectChestReward;
class CSSelectChestRewardDefaultTypeInternal;
extern CSSelectChestRewardDefaultTypeInternal _CSSelectChestReward_default_instance_;
class CSSetProbability;
class CSSetProbabilityDefaultTypeInternal;
extern CSSetProbabilityDefaultTypeInternal _CSSetProbability_default_instance_;
class CSSetSkill;
class CSSetSkillDefaultTypeInternal;
extern CSSetSkillDefaultTypeInternal _CSSetSkill_default_instance_;
class CSSetWings;
class CSSetWingsDefaultTypeInternal;
extern CSSetWingsDefaultTypeInternal _CSSetWings_default_instance_;
class CSShootTorpedo;
class CSShootTorpedoDefaultTypeInternal;
extern CSShootTorpedoDefaultTypeInternal _CSShootTorpedo_default_instance_;
class CSSuperTridentAttack;
class CSSuperTridentAttackDefaultTypeInternal;
extern CSSuperTridentAttackDefaultTypeInternal _CSSuperTridentAttack_default_instance_;
class CSSuperTridentShoot;
class CSSuperTridentShootDefaultTypeInternal;
extern CSSuperTridentShootDefaultTypeInternal _CSSuperTridentShoot_default_instance_;
class CSSyncAnimation;
class CSSyncAnimationDefaultTypeInternal;
extern CSSyncAnimationDefaultTypeInternal _CSSyncAnimation_default_instance_;
class CSSyncCrabStatus;
class CSSyncCrabStatusDefaultTypeInternal;
extern CSSyncCrabStatusDefaultTypeInternal _CSSyncCrabStatus_default_instance_;
class CSSyncFishReq;
class CSSyncFishReqDefaultTypeInternal;
extern CSSyncFishReqDefaultTypeInternal _CSSyncFishReq_default_instance_;
class CSSyncFishRsp;
class CSSyncFishRspDefaultTypeInternal;
extern CSSyncFishRspDefaultTypeInternal _CSSyncFishRsp_default_instance_;
class CSSyncMoney;
class CSSyncMoneyDefaultTypeInternal;
extern CSSyncMoneyDefaultTypeInternal _CSSyncMoney_default_instance_;
class CSTaskInfo;
class CSTaskInfoDefaultTypeInternal;
extern CSTaskInfoDefaultTypeInternal _CSTaskInfo_default_instance_;
class CSTridentBet;
class CSTridentBetDefaultTypeInternal;
extern CSTridentBetDefaultTypeInternal _CSTridentBet_default_instance_;
class CSTridentInfo;
class CSTridentInfoDefaultTypeInternal;
extern CSTridentInfoDefaultTypeInternal _CSTridentInfo_default_instance_;
class CSUpdateHallProp;
class CSUpdateHallPropDefaultTypeInternal;
extern CSUpdateHallPropDefaultTypeInternal _CSUpdateHallProp_default_instance_;
class CSUserPoolDouble;
class CSUserPoolDoubleDefaultTypeInternal;
extern CSUserPoolDoubleDefaultTypeInternal _CSUserPoolDouble_default_instance_;
class CSUserPoolDoubleInfo;
class CSUserPoolDoubleInfoDefaultTypeInternal;
extern CSUserPoolDoubleInfoDefaultTypeInternal _CSUserPoolDoubleInfo_default_instance_;
class CSUserPoolDraw;
class CSUserPoolDrawDefaultTypeInternal;
extern CSUserPoolDrawDefaultTypeInternal _CSUserPoolDraw_default_instance_;
class CSUserPoolInfo;
class CSUserPoolInfoDefaultTypeInternal;
extern CSUserPoolInfoDefaultTypeInternal _CSUserPoolInfo_default_instance_;
class CSUserPoolPreDraw;
class CSUserPoolPreDrawDefaultTypeInternal;
extern CSUserPoolPreDrawDefaultTypeInternal _CSUserPoolPreDraw_default_instance_;
class CSUserPoolStatus;
class CSUserPoolStatusDefaultTypeInternal;
extern CSUserPoolStatusDefaultTypeInternal _CSUserPoolStatus_default_instance_;
class CSUserReady;
class CSUserReadyDefaultTypeInternal;
extern CSUserReadyDefaultTypeInternal _CSUserReady_default_instance_;
class CSUserRunBackground;
class CSUserRunBackgroundDefaultTypeInternal;
extern CSUserRunBackgroundDefaultTypeInternal _CSUserRunBackground_default_instance_;
class CSUserShootMulti;
class CSUserShootMultiDefaultTypeInternal;
extern CSUserShootMultiDefaultTypeInternal _CSUserShootMulti_default_instance_;
class Capturefish;
class CapturefishDefaultTypeInternal;
extern CapturefishDefaultTypeInternal _Capturefish_default_instance_;
class ChestBrief;
class ChestBriefDefaultTypeInternal;
extern ChestBriefDefaultTypeInternal _ChestBrief_default_instance_;
class CommonResp;
class CommonRespDefaultTypeInternal;
extern CommonRespDefaultTypeInternal _CommonResp_default_instance_;
class CritWheel;
class CritWheelDefaultTypeInternal;
extern CritWheelDefaultTypeInternal _CritWheel_default_instance_;
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class DevouredFish;
class DevouredFishDefaultTypeInternal;
extern DevouredFishDefaultTypeInternal _DevouredFish_default_instance_;
class DragonBallConfig;
class DragonBallConfigDefaultTypeInternal;
extern DragonBallConfigDefaultTypeInternal _DragonBallConfig_default_instance_;
class DragonBallInfo;
class DragonBallInfoDefaultTypeInternal;
extern DragonBallInfoDefaultTypeInternal _DragonBallInfo_default_instance_;
class DragonBallWheelInfo;
class DragonBallWheelInfoDefaultTypeInternal;
extern DragonBallWheelInfoDefaultTypeInternal _DragonBallWheelInfo_default_instance_;
class EffectFish;
class EffectFishDefaultTypeInternal;
extern EffectFishDefaultTypeInternal _EffectFish_default_instance_;
class EffectInfo;
class EffectInfoDefaultTypeInternal;
extern EffectInfoDefaultTypeInternal _EffectInfo_default_instance_;
class FishTrace;
class FishTraceDefaultTypeInternal;
extern FishTraceDefaultTypeInternal _FishTrace_default_instance_;
class FishTraces;
class FishTracesDefaultTypeInternal;
extern FishTracesDefaultTypeInternal _FishTraces_default_instance_;
class GemConfig;
class GemConfigDefaultTypeInternal;
extern GemConfigDefaultTypeInternal _GemConfig_default_instance_;
class GiftBag;
class GiftBagDefaultTypeInternal;
extern GiftBagDefaultTypeInternal _GiftBag_default_instance_;
class GoldenJadeInfo;
class GoldenJadeInfoDefaultTypeInternal;
extern GoldenJadeInfoDefaultTypeInternal _GoldenJadeInfo_default_instance_;
class GoodsInfo;
class GoodsInfoDefaultTypeInternal;
extern GoodsInfoDefaultTypeInternal _GoodsInfo_default_instance_;
class GunDetail;
class GunDetailDefaultTypeInternal;
extern GunDetailDefaultTypeInternal _GunDetail_default_instance_;
class GunSpecEffect;
class GunSpecEffectDefaultTypeInternal;
extern GunSpecEffectDefaultTypeInternal _GunSpecEffect_default_instance_;
class HBonusPool;
class HBonusPoolDefaultTypeInternal;
extern HBonusPoolDefaultTypeInternal _HBonusPool_default_instance_;
class HistoryRank;
class HistoryRankDefaultTypeInternal;
extern HistoryRankDefaultTypeInternal _HistoryRank_default_instance_;
class HitFish;
class HitFishDefaultTypeInternal;
extern HitFishDefaultTypeInternal _HitFish_default_instance_;
class HttpResult;
class HttpResultDefaultTypeInternal;
extern HttpResultDefaultTypeInternal _HttpResult_default_instance_;
class IngotInfo;
class IngotInfoDefaultTypeInternal;
extern IngotInfoDefaultTypeInternal _IngotInfo_default_instance_;
class ItemEnableInfo;
class ItemEnableInfoDefaultTypeInternal;
extern ItemEnableInfoDefaultTypeInternal _ItemEnableInfo_default_instance_;
class ItemEnableNotice;
class ItemEnableNoticeDefaultTypeInternal;
extern ItemEnableNoticeDefaultTypeInternal _ItemEnableNotice_default_instance_;
class ItemWheel;
class ItemWheelDefaultTypeInternal;
extern ItemWheelDefaultTypeInternal _ItemWheel_default_instance_;
class JadeAwardInfo;
class JadeAwardInfoDefaultTypeInternal;
extern JadeAwardInfoDefaultTypeInternal _JadeAwardInfo_default_instance_;
class JumpHighArena;
class JumpHighArenaDefaultTypeInternal;
extern JumpHighArenaDefaultTypeInternal _JumpHighArena_default_instance_;
class LuckyInfo;
class LuckyInfoDefaultTypeInternal;
extern LuckyInfoDefaultTypeInternal _LuckyInfo_default_instance_;
class LuckyRecord;
class LuckyRecordDefaultTypeInternal;
extern LuckyRecordDefaultTypeInternal _LuckyRecord_default_instance_;
class LuckyTaskInfo;
class LuckyTaskInfoDefaultTypeInternal;
extern LuckyTaskInfoDefaultTypeInternal _LuckyTaskInfo_default_instance_;
class MagicCardInfo;
class MagicCardInfoDefaultTypeInternal;
extern MagicCardInfoDefaultTypeInternal _MagicCardInfo_default_instance_;
class MagicInfo;
class MagicInfoDefaultTypeInternal;
extern MagicInfoDefaultTypeInternal _MagicInfo_default_instance_;
class MatchInfoTip;
class MatchInfoTipDefaultTypeInternal;
extern MatchInfoTipDefaultTypeInternal _MatchInfoTip_default_instance_;
class MatchPackAddition;
class MatchPackAdditionDefaultTypeInternal;
extern MatchPackAdditionDefaultTypeInternal _MatchPackAddition_default_instance_;
class NewYearCardActivityInfo;
class NewYearCardActivityInfoDefaultTypeInternal;
extern NewYearCardActivityInfoDefaultTypeInternal _NewYearCardActivityInfo_default_instance_;
class NewYearCardAward;
class NewYearCardAwardDefaultTypeInternal;
extern NewYearCardAwardDefaultTypeInternal _NewYearCardAward_default_instance_;
class NewYearCardAwardRecord;
class NewYearCardAwardRecordDefaultTypeInternal;
extern NewYearCardAwardRecordDefaultTypeInternal _NewYearCardAwardRecord_default_instance_;
class NewYearCardMultiple;
class NewYearCardMultipleDefaultTypeInternal;
extern NewYearCardMultipleDefaultTypeInternal _NewYearCardMultiple_default_instance_;
class Object2;
class Object2DefaultTypeInternal;
extern Object2DefaultTypeInternal _Object2_default_instance_;
class Object3;
class Object3DefaultTypeInternal;
extern Object3DefaultTypeInternal _Object3_default_instance_;
class Object4;
class Object4DefaultTypeInternal;
extern Object4DefaultTypeInternal _Object4_default_instance_;
class ObjectData;
class ObjectDataDefaultTypeInternal;
extern ObjectDataDefaultTypeInternal _ObjectData_default_instance_;
class OctopusKingInfo;
class OctopusKingInfoDefaultTypeInternal;
extern OctopusKingInfoDefaultTypeInternal _OctopusKingInfo_default_instance_;
class OctopusKingItem;
class OctopusKingItemDefaultTypeInternal;
extern OctopusKingItemDefaultTypeInternal _OctopusKingItem_default_instance_;
class OpenChestReward;
class OpenChestRewardDefaultTypeInternal;
extern OpenChestRewardDefaultTypeInternal _OpenChestReward_default_instance_;
class OwnRecord;
class OwnRecordDefaultTypeInternal;
extern OwnRecordDefaultTypeInternal _OwnRecord_default_instance_;
class Prop;
class PropDefaultTypeInternal;
extern PropDefaultTypeInternal _Prop_default_instance_;
class PurchaseGun;
class PurchaseGunDefaultTypeInternal;
extern PurchaseGunDefaultTypeInternal _PurchaseGun_default_instance_;
class RealRank;
class RealRankDefaultTypeInternal;
extern RealRankDefaultTypeInternal _RealRank_default_instance_;
class ResultRank;
class ResultRankDefaultTypeInternal;
extern ResultRankDefaultTypeInternal _ResultRank_default_instance_;
class Reward;
class RewardDefaultTypeInternal;
extern RewardDefaultTypeInternal _Reward_default_instance_;
class RewardConf;
class RewardConfDefaultTypeInternal;
extern RewardConfDefaultTypeInternal _RewardConf_default_instance_;
class RewardTask;
class RewardTaskDefaultTypeInternal;
extern RewardTaskDefaultTypeInternal _RewardTask_default_instance_;
class SCActivityInfo;
class SCActivityInfoDefaultTypeInternal;
extern SCActivityInfoDefaultTypeInternal _SCActivityInfo_default_instance_;
class SCAwardPoolRecord;
class SCAwardPoolRecordDefaultTypeInternal;
extern SCAwardPoolRecordDefaultTypeInternal _SCAwardPoolRecord_default_instance_;
class SCAztecGemConfig;
class SCAztecGemConfigDefaultTypeInternal;
extern SCAztecGemConfigDefaultTypeInternal _SCAztecGemConfig_default_instance_;
class SCBeKicked;
class SCBeKickedDefaultTypeInternal;
extern SCBeKickedDefaultTypeInternal _SCBeKicked_default_instance_;
class SCBigSmallBet;
class SCBigSmallBetDefaultTypeInternal;
extern SCBigSmallBetDefaultTypeInternal _SCBigSmallBet_default_instance_;
class SCBigSmallChoose;
class SCBigSmallChooseDefaultTypeInternal;
extern SCBigSmallChooseDefaultTypeInternal _SCBigSmallChoose_default_instance_;
class SCBigSmallRecord;
class SCBigSmallRecordDefaultTypeInternal;
extern SCBigSmallRecordDefaultTypeInternal _SCBigSmallRecord_default_instance_;
class SCBigSmallWinInfo;
class SCBigSmallWinInfoDefaultTypeInternal;
extern SCBigSmallWinInfoDefaultTypeInternal _SCBigSmallWinInfo_default_instance_;
class SCBuyGun;
class SCBuyGunDefaultTypeInternal;
extern SCBuyGunDefaultTypeInternal _SCBuyGun_default_instance_;
class SCBuyWings;
class SCBuyWingsDefaultTypeInternal;
extern SCBuyWingsDefaultTypeInternal _SCBuyWings_default_instance_;
class SCChangeScene;
class SCChangeSceneDefaultTypeInternal;
extern SCChangeSceneDefaultTypeInternal _SCChangeScene_default_instance_;
class SCChangeTable;
class SCChangeTableDefaultTypeInternal;
extern SCChangeTableDefaultTypeInternal _SCChangeTable_default_instance_;
class SCCheckDragonWheelProp;
class SCCheckDragonWheelPropDefaultTypeInternal;
extern SCCheckDragonWheelPropDefaultTypeInternal _SCCheckDragonWheelProp_default_instance_;
class SCChestConfig;
class SCChestConfigDefaultTypeInternal;
extern SCChestConfigDefaultTypeInternal _SCChestConfig_default_instance_;
class SCChestSetAutoSelect;
class SCChestSetAutoSelectDefaultTypeInternal;
extern SCChestSetAutoSelectDefaultTypeInternal _SCChestSetAutoSelect_default_instance_;
class SCChestSetEnable;
class SCChestSetEnableDefaultTypeInternal;
extern SCChestSetEnableDefaultTypeInternal _SCChestSetEnable_default_instance_;
class SCClientTimeValidate;
class SCClientTimeValidateDefaultTypeInternal;
extern SCClientTimeValidateDefaultTypeInternal _SCClientTimeValidate_default_instance_;
class SCComTask;
class SCComTaskDefaultTypeInternal;
extern SCComTaskDefaultTypeInternal _SCComTask_default_instance_;
class SCDevourHit;
class SCDevourHitDefaultTypeInternal;
extern SCDevourHitDefaultTypeInternal _SCDevourHit_default_instance_;
class SCDragonBallRes;
class SCDragonBallResDefaultTypeInternal;
extern SCDragonBallResDefaultTypeInternal _SCDragonBallRes_default_instance_;
class SCDragonWheelStop;
class SCDragonWheelStopDefaultTypeInternal;
extern SCDragonWheelStopDefaultTypeInternal _SCDragonWheelStop_default_instance_;
class SCFishTracesList;
class SCFishTracesListDefaultTypeInternal;
extern SCFishTracesListDefaultTypeInternal _SCFishTracesList_default_instance_;
class SCFortuneShoot;
class SCFortuneShootDefaultTypeInternal;
extern SCFortuneShootDefaultTypeInternal _SCFortuneShoot_default_instance_;
class SCGemConfigList;
class SCGemConfigListDefaultTypeInternal;
extern SCGemConfigListDefaultTypeInternal _SCGemConfigList_default_instance_;
class SCGetLuckyNum;
class SCGetLuckyNumDefaultTypeInternal;
extern SCGetLuckyNumDefaultTypeInternal _SCGetLuckyNum_default_instance_;
class SCGunInfo;
class SCGunInfoDefaultTypeInternal;
extern SCGunInfoDefaultTypeInternal _SCGunInfo_default_instance_;
class SCHBonusPool;
class SCHBonusPoolDefaultTypeInternal;
extern SCHBonusPoolDefaultTypeInternal _SCHBonusPool_default_instance_;
class SCHHistoryRank;
class SCHHistoryRankDefaultTypeInternal;
extern SCHHistoryRankDefaultTypeInternal _SCHHistoryRank_default_instance_;
class SCHLuckyInfo;
class SCHLuckyInfoDefaultTypeInternal;
extern SCHLuckyInfoDefaultTypeInternal _SCHLuckyInfo_default_instance_;
class SCHMatchInfo;
class SCHMatchInfoDefaultTypeInternal;
extern SCHMatchInfoDefaultTypeInternal _SCHMatchInfo_default_instance_;
class SCHMatchInfoTip;
class SCHMatchInfoTipDefaultTypeInternal;
extern SCHMatchInfoTipDefaultTypeInternal _SCHMatchInfoTip_default_instance_;
class SCHRankBar;
class SCHRankBarDefaultTypeInternal;
extern SCHRankBarDefaultTypeInternal _SCHRankBar_default_instance_;
class SCHRealRank;
class SCHRealRankDefaultTypeInternal;
extern SCHRealRankDefaultTypeInternal _SCHRealRank_default_instance_;
class SCHReward;
class SCHRewardDefaultTypeInternal;
extern SCHRewardDefaultTypeInternal _SCHReward_default_instance_;
class SCHeartBeat;
class SCHeartBeatDefaultTypeInternal;
extern SCHeartBeatDefaultTypeInternal _SCHeartBeat_default_instance_;
class SCHitMultiFish;
class SCHitMultiFishDefaultTypeInternal;
extern SCHitMultiFishDefaultTypeInternal _SCHitMultiFish_default_instance_;
class SCJadeAwardInfo;
class SCJadeAwardInfoDefaultTypeInternal;
extern SCJadeAwardInfoDefaultTypeInternal _SCJadeAwardInfo_default_instance_;
class SCLockFish;
class SCLockFishDefaultTypeInternal;
extern SCLockFishDefaultTypeInternal _SCLockFish_default_instance_;
class SCLoginGameWithToken;
class SCLoginGameWithTokenDefaultTypeInternal;
extern SCLoginGameWithTokenDefaultTypeInternal _SCLoginGameWithToken_default_instance_;
class SCLuckyAwardNotify;
class SCLuckyAwardNotifyDefaultTypeInternal;
extern SCLuckyAwardNotifyDefaultTypeInternal _SCLuckyAwardNotify_default_instance_;
class SCLuckyDrawInfo;
class SCLuckyDrawInfoDefaultTypeInternal;
extern SCLuckyDrawInfoDefaultTypeInternal _SCLuckyDrawInfo_default_instance_;
class SCLuckyPoolDraw;
class SCLuckyPoolDrawDefaultTypeInternal;
extern SCLuckyPoolDrawDefaultTypeInternal _SCLuckyPoolDraw_default_instance_;
class SCLuckyPoolInfo;
class SCLuckyPoolInfoDefaultTypeInternal;
extern SCLuckyPoolInfoDefaultTypeInternal _SCLuckyPoolInfo_default_instance_;
class SCLuckyRecord;
class SCLuckyRecordDefaultTypeInternal;
extern SCLuckyRecordDefaultTypeInternal _SCLuckyRecord_default_instance_;
class SCLuckyRedDot;
class SCLuckyRedDotDefaultTypeInternal;
extern SCLuckyRedDotDefaultTypeInternal _SCLuckyRedDot_default_instance_;
class SCLuckyTaskInfo;
class SCLuckyTaskInfoDefaultTypeInternal;
extern SCLuckyTaskInfoDefaultTypeInternal _SCLuckyTaskInfo_default_instance_;
class SCMagicCardList;
class SCMagicCardListDefaultTypeInternal;
extern SCMagicCardListDefaultTypeInternal _SCMagicCardList_default_instance_;
class SCMatchPackAddition;
class SCMatchPackAdditionDefaultTypeInternal;
extern SCMatchPackAdditionDefaultTypeInternal _SCMatchPackAddition_default_instance_;
class SCMatchPackInvail;
class SCMatchPackInvailDefaultTypeInternal;
extern SCMatchPackInvailDefaultTypeInternal _SCMatchPackInvail_default_instance_;
class SCMatchResult;
class SCMatchResultDefaultTypeInternal;
extern SCMatchResultDefaultTypeInternal _SCMatchResult_default_instance_;
class SCNewYearCardAwardRecord;
class SCNewYearCardAwardRecordDefaultTypeInternal;
extern SCNewYearCardAwardRecordDefaultTypeInternal _SCNewYearCardAwardRecord_default_instance_;
class SCNewYearCardExchange;
class SCNewYearCardExchangeDefaultTypeInternal;
extern SCNewYearCardExchangeDefaultTypeInternal _SCNewYearCardExchange_default_instance_;
class SCNotifyLogout;
class SCNotifyLogoutDefaultTypeInternal;
extern SCNotifyLogoutDefaultTypeInternal _SCNotifyLogout_default_instance_;
class SCOpenChest;
class SCOpenChestDefaultTypeInternal;
extern SCOpenChestDefaultTypeInternal _SCOpenChest_default_instance_;
class SCOwnRecord;
class SCOwnRecordDefaultTypeInternal;
extern SCOwnRecordDefaultTypeInternal _SCOwnRecord_default_instance_;
class SCPropDropNotify;
class SCPropDropNotifyDefaultTypeInternal;
extern SCPropDropNotifyDefaultTypeInternal _SCPropDropNotify_default_instance_;
class SCPropEndNotify;
class SCPropEndNotifyDefaultTypeInternal;
extern SCPropEndNotifyDefaultTypeInternal _SCPropEndNotify_default_instance_;
class SCPropsAwardPool;
class SCPropsAwardPoolDefaultTypeInternal;
extern SCPropsAwardPoolDefaultTypeInternal _SCPropsAwardPool_default_instance_;
class SCPropsTorpedo;
class SCPropsTorpedoDefaultTypeInternal;
extern SCPropsTorpedoDefaultTypeInternal _SCPropsTorpedo_default_instance_;
class SCPropsTrident;
class SCPropsTridentDefaultTypeInternal;
extern SCPropsTridentDefaultTypeInternal _SCPropsTrident_default_instance_;
class SCPurchaseCheck;
class SCPurchaseCheckDefaultTypeInternal;
extern SCPurchaseCheckDefaultTypeInternal _SCPurchaseCheck_default_instance_;
class SCRepRewardTaskList;
class SCRepRewardTaskListDefaultTypeInternal;
extern SCRepRewardTaskListDefaultTypeInternal _SCRepRewardTaskList_default_instance_;
class SCRepRewardTaskRecord;
class SCRepRewardTaskRecordDefaultTypeInternal;
extern SCRepRewardTaskRecordDefaultTypeInternal _SCRepRewardTaskRecord_default_instance_;
class SCRewardAutoRep;
class SCRewardAutoRepDefaultTypeInternal;
extern SCRewardAutoRepDefaultTypeInternal _SCRewardAutoRep_default_instance_;
class SCRewardTaskFinish;
class SCRewardTaskFinishDefaultTypeInternal;
extern SCRewardTaskFinishDefaultTypeInternal _SCRewardTaskFinish_default_instance_;
class SCScratchNewYearCard;
class SCScratchNewYearCardDefaultTypeInternal;
extern SCScratchNewYearCardDefaultTypeInternal _SCScratchNewYearCard_default_instance_;
class SCSeaCrabCreate;
class SCSeaCrabCreateDefaultTypeInternal;
extern SCSeaCrabCreateDefaultTypeInternal _SCSeaCrabCreate_default_instance_;
class SCSelectChestReward;
class SCSelectChestRewardDefaultTypeInternal;
extern SCSelectChestRewardDefaultTypeInternal _SCSelectChestReward_default_instance_;
class SCSetProbability;
class SCSetProbabilityDefaultTypeInternal;
extern SCSetProbabilityDefaultTypeInternal _SCSetProbability_default_instance_;
class SCSetSkill;
class SCSetSkillDefaultTypeInternal;
extern SCSetSkillDefaultTypeInternal _SCSetSkill_default_instance_;
class SCSetWings;
class SCSetWingsDefaultTypeInternal;
extern SCSetWingsDefaultTypeInternal _SCSetWings_default_instance_;
class SCShootTorpedo;
class SCShootTorpedoDefaultTypeInternal;
extern SCShootTorpedoDefaultTypeInternal _SCShootTorpedo_default_instance_;
class SCSuperTridentShoot;
class SCSuperTridentShootDefaultTypeInternal;
extern SCSuperTridentShootDefaultTypeInternal _SCSuperTridentShoot_default_instance_;
class SCSyncAnimation;
class SCSyncAnimationDefaultTypeInternal;
extern SCSyncAnimationDefaultTypeInternal _SCSyncAnimation_default_instance_;
class SCSyncCrabStatus;
class SCSyncCrabStatusDefaultTypeInternal;
extern SCSyncCrabStatusDefaultTypeInternal _SCSyncCrabStatus_default_instance_;
class SCSyncFishReq;
class SCSyncFishReqDefaultTypeInternal;
extern SCSyncFishReqDefaultTypeInternal _SCSyncFishReq_default_instance_;
class SCSyncFishRsp;
class SCSyncFishRspDefaultTypeInternal;
extern SCSyncFishRspDefaultTypeInternal _SCSyncFishRsp_default_instance_;
class SCSyncFortune;
class SCSyncFortuneDefaultTypeInternal;
extern SCSyncFortuneDefaultTypeInternal _SCSyncFortune_default_instance_;
class SCSyncFreeTimes;
class SCSyncFreeTimesDefaultTypeInternal;
extern SCSyncFreeTimesDefaultTypeInternal _SCSyncFreeTimes_default_instance_;
class SCSyncHallProp;
class SCSyncHallPropDefaultTypeInternal;
extern SCSyncHallPropDefaultTypeInternal _SCSyncHallProp_default_instance_;
class SCSyncMoney;
class SCSyncMoneyDefaultTypeInternal;
extern SCSyncMoneyDefaultTypeInternal _SCSyncMoney_default_instance_;
class SCSyncRewardTaskResult;
class SCSyncRewardTaskResultDefaultTypeInternal;
extern SCSyncRewardTaskResultDefaultTypeInternal _SCSyncRewardTaskResult_default_instance_;
class SCTaskInfo;
class SCTaskInfoDefaultTypeInternal;
extern SCTaskInfoDefaultTypeInternal _SCTaskInfo_default_instance_;
class SCTortoiseExplode;
class SCTortoiseExplodeDefaultTypeInternal;
extern SCTortoiseExplodeDefaultTypeInternal _SCTortoiseExplode_default_instance_;
class SCTridentBet;
class SCTridentBetDefaultTypeInternal;
extern SCTridentBetDefaultTypeInternal _SCTridentBet_default_instance_;
class SCTridentInfo;
class SCTridentInfoDefaultTypeInternal;
extern SCTridentInfoDefaultTypeInternal _SCTridentInfo_default_instance_;
class SCTridentRankResult;
class SCTridentRankResultDefaultTypeInternal;
extern SCTridentRankResultDefaultTypeInternal _SCTridentRankResult_default_instance_;
class SCUpdateChestStatus;
class SCUpdateChestStatusDefaultTypeInternal;
extern SCUpdateChestStatusDefaultTypeInternal _SCUpdateChestStatus_default_instance_;
class SCUserPoolAdd;
class SCUserPoolAddDefaultTypeInternal;
extern SCUserPoolAddDefaultTypeInternal _SCUserPoolAdd_default_instance_;
class SCUserPoolDouble;
class SCUserPoolDoubleDefaultTypeInternal;
extern SCUserPoolDoubleDefaultTypeInternal _SCUserPoolDouble_default_instance_;
class SCUserPoolDoubleInfo;
class SCUserPoolDoubleInfoDefaultTypeInternal;
extern SCUserPoolDoubleInfoDefaultTypeInternal _SCUserPoolDoubleInfo_default_instance_;
class SCUserPoolDraw;
class SCUserPoolDrawDefaultTypeInternal;
extern SCUserPoolDrawDefaultTypeInternal _SCUserPoolDraw_default_instance_;
class SCUserPoolInfo;
class SCUserPoolInfoDefaultTypeInternal;
extern SCUserPoolInfoDefaultTypeInternal _SCUserPoolInfo_default_instance_;
class SCUserPoolPreDraw;
class SCUserPoolPreDrawDefaultTypeInternal;
extern SCUserPoolPreDrawDefaultTypeInternal _SCUserPoolPreDraw_default_instance_;
class SCUserPoolStatus;
class SCUserPoolStatusDefaultTypeInternal;
extern SCUserPoolStatusDefaultTypeInternal _SCUserPoolStatus_default_instance_;
class SCUserReady;
class SCUserReadyDefaultTypeInternal;
extern SCUserReadyDefaultTypeInternal _SCUserReady_default_instance_;
class SCUserRunBackground;
class SCUserRunBackgroundDefaultTypeInternal;
extern SCUserRunBackgroundDefaultTypeInternal _SCUserRunBackground_default_instance_;
class SCUserShootMulti;
class SCUserShootMultiDefaultTypeInternal;
extern SCUserShootMultiDefaultTypeInternal _SCUserShootMulti_default_instance_;
class SCUserTimeoutKick;
class SCUserTimeoutKickDefaultTypeInternal;
extern SCUserTimeoutKickDefaultTypeInternal _SCUserTimeoutKick_default_instance_;
class SCVipInfo;
class SCVipInfoDefaultTypeInternal;
extern SCVipInfoDefaultTypeInternal _SCVipInfo_default_instance_;
class SCWaterDropInfo;
class SCWaterDropInfoDefaultTypeInternal;
extern SCWaterDropInfoDefaultTypeInternal _SCWaterDropInfo_default_instance_;
class SCWingsInfo;
class SCWingsInfoDefaultTypeInternal;
extern SCWingsInfoDefaultTypeInternal _SCWingsInfo_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
class SSAwardPoolMsg;
class SSAwardPoolMsgDefaultTypeInternal;
extern SSAwardPoolMsgDefaultTypeInternal _SSAwardPoolMsg_default_instance_;
class SkillTime;
class SkillTimeDefaultTypeInternal;
extern SkillTimeDefaultTypeInternal _SkillTime_default_instance_;
class SpecEffect;
class SpecEffectDefaultTypeInternal;
extern SpecEffectDefaultTypeInternal _SpecEffect_default_instance_;
class StationBase;
class StationBaseDefaultTypeInternal;
extern StationBaseDefaultTypeInternal _StationBase_default_instance_;
class TridentRankList;
class TridentRankListDefaultTypeInternal;
extern TridentRankListDefaultTypeInternal _TridentRankList_default_instance_;
class UserAwardItem;
class UserAwardItemDefaultTypeInternal;
extern UserAwardItemDefaultTypeInternal _UserAwardItem_default_instance_;
class UserPoolActivityInfo;
class UserPoolActivityInfoDefaultTypeInternal;
extern UserPoolActivityInfoDefaultTypeInternal _UserPoolActivityInfo_default_instance_;
class UserProp;
class UserPropDefaultTypeInternal;
extern UserPropDefaultTypeInternal _UserProp_default_instance_;
class UserScoreRecord;
class UserScoreRecordDefaultTypeInternal;
extern UserScoreRecordDefaultTypeInternal _UserScoreRecord_default_instance_;
class UserShoot;
class UserShootDefaultTypeInternal;
extern UserShootDefaultTypeInternal _UserShoot_default_instance_;
class UserShootRsp;
class UserShootRspDefaultTypeInternal;
extern UserShootRspDefaultTypeInternal _UserShootRsp_default_instance_;
class UsersProp;
class UsersPropDefaultTypeInternal;
extern UsersPropDefaultTypeInternal _UsersProp_default_instance_;
class WingsInfo;
class WingsInfoDefaultTypeInternal;
extern WingsInfoDefaultTypeInternal _WingsInfo_default_instance_;
class WingsSpecEffect;
class WingsSpecEffectDefaultTypeInternal;
extern WingsSpecEffectDefaultTypeInternal _WingsSpecEffect_default_instance_;
class Zeus;
class ZeusDefaultTypeInternal;
extern ZeusDefaultTypeInternal _Zeus_default_instance_;
class roulette_result;
class roulette_resultDefaultTypeInternal;
extern roulette_resultDefaultTypeInternal _roulette_result_default_instance_;
class zeus_result;
class zeus_resultDefaultTypeInternal;
extern zeus_resultDefaultTypeInternal _zeus_result_default_instance_;
}  // namespace BYDLD
PROTOBUF_NAMESPACE_OPEN
template<> ::BYDLD::AwardDetail* Arena::CreateMaybeMessage<::BYDLD::AwardDetail>(Arena*);
template<> ::BYDLD::AwardPoolData* Arena::CreateMaybeMessage<::BYDLD::AwardPoolData>(Arena*);
template<> ::BYDLD::AwardPoolRecord* Arena::CreateMaybeMessage<::BYDLD::AwardPoolRecord>(Arena*);
template<> ::BYDLD::AwardProp* Arena::CreateMaybeMessage<::BYDLD::AwardProp>(Arena*);
template<> ::BYDLD::AztecClearReward* Arena::CreateMaybeMessage<::BYDLD::AztecClearReward>(Arena*);
template<> ::BYDLD::AztecDataInfo* Arena::CreateMaybeMessage<::BYDLD::AztecDataInfo>(Arena*);
template<> ::BYDLD::AztecGemConfig* Arena::CreateMaybeMessage<::BYDLD::AztecGemConfig>(Arena*);
template<> ::BYDLD::AztecGemConfigItem* Arena::CreateMaybeMessage<::BYDLD::AztecGemConfigItem>(Arena*);
template<> ::BYDLD::AztecStep* Arena::CreateMaybeMessage<::BYDLD::AztecStep>(Arena*);
template<> ::BYDLD::AztecTable* Arena::CreateMaybeMessage<::BYDLD::AztecTable>(Arena*);
template<> ::BYDLD::BigSmallRecord* Arena::CreateMaybeMessage<::BYDLD::BigSmallRecord>(Arena*);
template<> ::BYDLD::CSAwardPoolRecord* Arena::CreateMaybeMessage<::BYDLD::CSAwardPoolRecord>(Arena*);
template<> ::BYDLD::CSAztecGemConfig* Arena::CreateMaybeMessage<::BYDLD::CSAztecGemConfig>(Arena*);
template<> ::BYDLD::CSBigSmallBet* Arena::CreateMaybeMessage<::BYDLD::CSBigSmallBet>(Arena*);
template<> ::BYDLD::CSBigSmallChoose* Arena::CreateMaybeMessage<::BYDLD::CSBigSmallChoose>(Arena*);
template<> ::BYDLD::CSBigSmallRecord* Arena::CreateMaybeMessage<::BYDLD::CSBigSmallRecord>(Arena*);
template<> ::BYDLD::CSBigSmallWinInfo* Arena::CreateMaybeMessage<::BYDLD::CSBigSmallWinInfo>(Arena*);
template<> ::BYDLD::CSBuyGun* Arena::CreateMaybeMessage<::BYDLD::CSBuyGun>(Arena*);
template<> ::BYDLD::CSBuyNewYearCard* Arena::CreateMaybeMessage<::BYDLD::CSBuyNewYearCard>(Arena*);
template<> ::BYDLD::CSBuyWings* Arena::CreateMaybeMessage<::BYDLD::CSBuyWings>(Arena*);
template<> ::BYDLD::CSChangeTable* Arena::CreateMaybeMessage<::BYDLD::CSChangeTable>(Arena*);
template<> ::BYDLD::CSCheckDragonWheelProp* Arena::CreateMaybeMessage<::BYDLD::CSCheckDragonWheelProp>(Arena*);
template<> ::BYDLD::CSChestConfig* Arena::CreateMaybeMessage<::BYDLD::CSChestConfig>(Arena*);
template<> ::BYDLD::CSChestSetAutoSelect* Arena::CreateMaybeMessage<::BYDLD::CSChestSetAutoSelect>(Arena*);
template<> ::BYDLD::CSChestSetEnable* Arena::CreateMaybeMessage<::BYDLD::CSChestSetEnable>(Arena*);
template<> ::BYDLD::CSClickStatistic* Arena::CreateMaybeMessage<::BYDLD::CSClickStatistic>(Arena*);
template<> ::BYDLD::CSClientTimeValidate* Arena::CreateMaybeMessage<::BYDLD::CSClientTimeValidate>(Arena*);
template<> ::BYDLD::CSDevourHit* Arena::CreateMaybeMessage<::BYDLD::CSDevourHit>(Arena*);
template<> ::BYDLD::CSDragonBallEnd* Arena::CreateMaybeMessage<::BYDLD::CSDragonBallEnd>(Arena*);
template<> ::BYDLD::CSDragonWheelStart* Arena::CreateMaybeMessage<::BYDLD::CSDragonWheelStart>(Arena*);
template<> ::BYDLD::CSFishOutsideScreen* Arena::CreateMaybeMessage<::BYDLD::CSFishOutsideScreen>(Arena*);
template<> ::BYDLD::CSFortuneShoot* Arena::CreateMaybeMessage<::BYDLD::CSFortuneShoot>(Arena*);
template<> ::BYDLD::CSFreeTimeEnd* Arena::CreateMaybeMessage<::BYDLD::CSFreeTimeEnd>(Arena*);
template<> ::BYDLD::CSGetLuckyNum* Arena::CreateMaybeMessage<::BYDLD::CSGetLuckyNum>(Arena*);
template<> ::BYDLD::CSGetLuckyTaskAward* Arena::CreateMaybeMessage<::BYDLD::CSGetLuckyTaskAward>(Arena*);
template<> ::BYDLD::CSHBonusPool* Arena::CreateMaybeMessage<::BYDLD::CSHBonusPool>(Arena*);
template<> ::BYDLD::CSHHistoryRank* Arena::CreateMaybeMessage<::BYDLD::CSHHistoryRank>(Arena*);
template<> ::BYDLD::CSHLuckyInfo* Arena::CreateMaybeMessage<::BYDLD::CSHLuckyInfo>(Arena*);
template<> ::BYDLD::CSHMatchInfo* Arena::CreateMaybeMessage<::BYDLD::CSHMatchInfo>(Arena*);
template<> ::BYDLD::CSHMatchInfoTip* Arena::CreateMaybeMessage<::BYDLD::CSHMatchInfoTip>(Arena*);
template<> ::BYDLD::CSHRankBar* Arena::CreateMaybeMessage<::BYDLD::CSHRankBar>(Arena*);
template<> ::BYDLD::CSHRealRank* Arena::CreateMaybeMessage<::BYDLD::CSHRealRank>(Arena*);
template<> ::BYDLD::CSHReward* Arena::CreateMaybeMessage<::BYDLD::CSHReward>(Arena*);
template<> ::BYDLD::CSHeartBeat* Arena::CreateMaybeMessage<::BYDLD::CSHeartBeat>(Arena*);
template<> ::BYDLD::CSHitMultiFish* Arena::CreateMaybeMessage<::BYDLD::CSHitMultiFish>(Arena*);
template<> ::BYDLD::CSJadeAwardInfo* Arena::CreateMaybeMessage<::BYDLD::CSJadeAwardInfo>(Arena*);
template<> ::BYDLD::CSLockFish* Arena::CreateMaybeMessage<::BYDLD::CSLockFish>(Arena*);
template<> ::BYDLD::CSLoginGameWithToken* Arena::CreateMaybeMessage<::BYDLD::CSLoginGameWithToken>(Arena*);
template<> ::BYDLD::CSLuckyDrawInfo* Arena::CreateMaybeMessage<::BYDLD::CSLuckyDrawInfo>(Arena*);
template<> ::BYDLD::CSLuckyPoolDraw* Arena::CreateMaybeMessage<::BYDLD::CSLuckyPoolDraw>(Arena*);
template<> ::BYDLD::CSLuckyPoolInfo* Arena::CreateMaybeMessage<::BYDLD::CSLuckyPoolInfo>(Arena*);
template<> ::BYDLD::CSLuckyRecord* Arena::CreateMaybeMessage<::BYDLD::CSLuckyRecord>(Arena*);
template<> ::BYDLD::CSLuckyRedDot* Arena::CreateMaybeMessage<::BYDLD::CSLuckyRedDot>(Arena*);
template<> ::BYDLD::CSMagicCardList* Arena::CreateMaybeMessage<::BYDLD::CSMagicCardList>(Arena*);
template<> ::BYDLD::CSMatchPackAddition* Arena::CreateMaybeMessage<::BYDLD::CSMatchPackAddition>(Arena*);
template<> ::BYDLD::CSNewYearCardAwardRecord* Arena::CreateMaybeMessage<::BYDLD::CSNewYearCardAwardRecord>(Arena*);
template<> ::BYDLD::CSNewYearCardExchange* Arena::CreateMaybeMessage<::BYDLD::CSNewYearCardExchange>(Arena*);
template<> ::BYDLD::CSNotifyLogout* Arena::CreateMaybeMessage<::BYDLD::CSNotifyLogout>(Arena*);
template<> ::BYDLD::CSOpenChest* Arena::CreateMaybeMessage<::BYDLD::CSOpenChest>(Arena*);
template<> ::BYDLD::CSReqRewardAddTask* Arena::CreateMaybeMessage<::BYDLD::CSReqRewardAddTask>(Arena*);
template<> ::BYDLD::CSReqRewardRecord* Arena::CreateMaybeMessage<::BYDLD::CSReqRewardRecord>(Arena*);
template<> ::BYDLD::CSRewardChangeAuto* Arena::CreateMaybeMessage<::BYDLD::CSRewardChangeAuto>(Arena*);
template<> ::BYDLD::CSSaveSkillTime* Arena::CreateMaybeMessage<::BYDLD::CSSaveSkillTime>(Arena*);
template<> ::BYDLD::CSScratchNewYearCard* Arena::CreateMaybeMessage<::BYDLD::CSScratchNewYearCard>(Arena*);
template<> ::BYDLD::CSSelectChestReward* Arena::CreateMaybeMessage<::BYDLD::CSSelectChestReward>(Arena*);
template<> ::BYDLD::CSSetProbability* Arena::CreateMaybeMessage<::BYDLD::CSSetProbability>(Arena*);
template<> ::BYDLD::CSSetSkill* Arena::CreateMaybeMessage<::BYDLD::CSSetSkill>(Arena*);
template<> ::BYDLD::CSSetWings* Arena::CreateMaybeMessage<::BYDLD::CSSetWings>(Arena*);
template<> ::BYDLD::CSShootTorpedo* Arena::CreateMaybeMessage<::BYDLD::CSShootTorpedo>(Arena*);
template<> ::BYDLD::CSSuperTridentAttack* Arena::CreateMaybeMessage<::BYDLD::CSSuperTridentAttack>(Arena*);
template<> ::BYDLD::CSSuperTridentShoot* Arena::CreateMaybeMessage<::BYDLD::CSSuperTridentShoot>(Arena*);
template<> ::BYDLD::CSSyncAnimation* Arena::CreateMaybeMessage<::BYDLD::CSSyncAnimation>(Arena*);
template<> ::BYDLD::CSSyncCrabStatus* Arena::CreateMaybeMessage<::BYDLD::CSSyncCrabStatus>(Arena*);
template<> ::BYDLD::CSSyncFishReq* Arena::CreateMaybeMessage<::BYDLD::CSSyncFishReq>(Arena*);
template<> ::BYDLD::CSSyncFishRsp* Arena::CreateMaybeMessage<::BYDLD::CSSyncFishRsp>(Arena*);
template<> ::BYDLD::CSSyncMoney* Arena::CreateMaybeMessage<::BYDLD::CSSyncMoney>(Arena*);
template<> ::BYDLD::CSTaskInfo* Arena::CreateMaybeMessage<::BYDLD::CSTaskInfo>(Arena*);
template<> ::BYDLD::CSTridentBet* Arena::CreateMaybeMessage<::BYDLD::CSTridentBet>(Arena*);
template<> ::BYDLD::CSTridentInfo* Arena::CreateMaybeMessage<::BYDLD::CSTridentInfo>(Arena*);
template<> ::BYDLD::CSUpdateHallProp* Arena::CreateMaybeMessage<::BYDLD::CSUpdateHallProp>(Arena*);
template<> ::BYDLD::CSUserPoolDouble* Arena::CreateMaybeMessage<::BYDLD::CSUserPoolDouble>(Arena*);
template<> ::BYDLD::CSUserPoolDoubleInfo* Arena::CreateMaybeMessage<::BYDLD::CSUserPoolDoubleInfo>(Arena*);
template<> ::BYDLD::CSUserPoolDraw* Arena::CreateMaybeMessage<::BYDLD::CSUserPoolDraw>(Arena*);
template<> ::BYDLD::CSUserPoolInfo* Arena::CreateMaybeMessage<::BYDLD::CSUserPoolInfo>(Arena*);
template<> ::BYDLD::CSUserPoolPreDraw* Arena::CreateMaybeMessage<::BYDLD::CSUserPoolPreDraw>(Arena*);
template<> ::BYDLD::CSUserPoolStatus* Arena::CreateMaybeMessage<::BYDLD::CSUserPoolStatus>(Arena*);
template<> ::BYDLD::CSUserReady* Arena::CreateMaybeMessage<::BYDLD::CSUserReady>(Arena*);
template<> ::BYDLD::CSUserRunBackground* Arena::CreateMaybeMessage<::BYDLD::CSUserRunBackground>(Arena*);
template<> ::BYDLD::CSUserShootMulti* Arena::CreateMaybeMessage<::BYDLD::CSUserShootMulti>(Arena*);
template<> ::BYDLD::Capturefish* Arena::CreateMaybeMessage<::BYDLD::Capturefish>(Arena*);
template<> ::BYDLD::ChestBrief* Arena::CreateMaybeMessage<::BYDLD::ChestBrief>(Arena*);
template<> ::BYDLD::CommonResp* Arena::CreateMaybeMessage<::BYDLD::CommonResp>(Arena*);
template<> ::BYDLD::CritWheel* Arena::CreateMaybeMessage<::BYDLD::CritWheel>(Arena*);
template<> ::BYDLD::Decimal* Arena::CreateMaybeMessage<::BYDLD::Decimal>(Arena*);
template<> ::BYDLD::DevouredFish* Arena::CreateMaybeMessage<::BYDLD::DevouredFish>(Arena*);
template<> ::BYDLD::DragonBallConfig* Arena::CreateMaybeMessage<::BYDLD::DragonBallConfig>(Arena*);
template<> ::BYDLD::DragonBallInfo* Arena::CreateMaybeMessage<::BYDLD::DragonBallInfo>(Arena*);
template<> ::BYDLD::DragonBallWheelInfo* Arena::CreateMaybeMessage<::BYDLD::DragonBallWheelInfo>(Arena*);
template<> ::BYDLD::EffectFish* Arena::CreateMaybeMessage<::BYDLD::EffectFish>(Arena*);
template<> ::BYDLD::EffectInfo* Arena::CreateMaybeMessage<::BYDLD::EffectInfo>(Arena*);
template<> ::BYDLD::FishTrace* Arena::CreateMaybeMessage<::BYDLD::FishTrace>(Arena*);
template<> ::BYDLD::FishTraces* Arena::CreateMaybeMessage<::BYDLD::FishTraces>(Arena*);
template<> ::BYDLD::GemConfig* Arena::CreateMaybeMessage<::BYDLD::GemConfig>(Arena*);
template<> ::BYDLD::GiftBag* Arena::CreateMaybeMessage<::BYDLD::GiftBag>(Arena*);
template<> ::BYDLD::GoldenJadeInfo* Arena::CreateMaybeMessage<::BYDLD::GoldenJadeInfo>(Arena*);
template<> ::BYDLD::GoodsInfo* Arena::CreateMaybeMessage<::BYDLD::GoodsInfo>(Arena*);
template<> ::BYDLD::GunDetail* Arena::CreateMaybeMessage<::BYDLD::GunDetail>(Arena*);
template<> ::BYDLD::GunSpecEffect* Arena::CreateMaybeMessage<::BYDLD::GunSpecEffect>(Arena*);
template<> ::BYDLD::HBonusPool* Arena::CreateMaybeMessage<::BYDLD::HBonusPool>(Arena*);
template<> ::BYDLD::HistoryRank* Arena::CreateMaybeMessage<::BYDLD::HistoryRank>(Arena*);
template<> ::BYDLD::HitFish* Arena::CreateMaybeMessage<::BYDLD::HitFish>(Arena*);
template<> ::BYDLD::HttpResult* Arena::CreateMaybeMessage<::BYDLD::HttpResult>(Arena*);
template<> ::BYDLD::IngotInfo* Arena::CreateMaybeMessage<::BYDLD::IngotInfo>(Arena*);
template<> ::BYDLD::ItemEnableInfo* Arena::CreateMaybeMessage<::BYDLD::ItemEnableInfo>(Arena*);
template<> ::BYDLD::ItemEnableNotice* Arena::CreateMaybeMessage<::BYDLD::ItemEnableNotice>(Arena*);
template<> ::BYDLD::ItemWheel* Arena::CreateMaybeMessage<::BYDLD::ItemWheel>(Arena*);
template<> ::BYDLD::JadeAwardInfo* Arena::CreateMaybeMessage<::BYDLD::JadeAwardInfo>(Arena*);
template<> ::BYDLD::JumpHighArena* Arena::CreateMaybeMessage<::BYDLD::JumpHighArena>(Arena*);
template<> ::BYDLD::LuckyInfo* Arena::CreateMaybeMessage<::BYDLD::LuckyInfo>(Arena*);
template<> ::BYDLD::LuckyRecord* Arena::CreateMaybeMessage<::BYDLD::LuckyRecord>(Arena*);
template<> ::BYDLD::LuckyTaskInfo* Arena::CreateMaybeMessage<::BYDLD::LuckyTaskInfo>(Arena*);
template<> ::BYDLD::MagicCardInfo* Arena::CreateMaybeMessage<::BYDLD::MagicCardInfo>(Arena*);
template<> ::BYDLD::MagicInfo* Arena::CreateMaybeMessage<::BYDLD::MagicInfo>(Arena*);
template<> ::BYDLD::MatchInfoTip* Arena::CreateMaybeMessage<::BYDLD::MatchInfoTip>(Arena*);
template<> ::BYDLD::MatchPackAddition* Arena::CreateMaybeMessage<::BYDLD::MatchPackAddition>(Arena*);
template<> ::BYDLD::NewYearCardActivityInfo* Arena::CreateMaybeMessage<::BYDLD::NewYearCardActivityInfo>(Arena*);
template<> ::BYDLD::NewYearCardAward* Arena::CreateMaybeMessage<::BYDLD::NewYearCardAward>(Arena*);
template<> ::BYDLD::NewYearCardAwardRecord* Arena::CreateMaybeMessage<::BYDLD::NewYearCardAwardRecord>(Arena*);
template<> ::BYDLD::NewYearCardMultiple* Arena::CreateMaybeMessage<::BYDLD::NewYearCardMultiple>(Arena*);
template<> ::BYDLD::Object2* Arena::CreateMaybeMessage<::BYDLD::Object2>(Arena*);
template<> ::BYDLD::Object3* Arena::CreateMaybeMessage<::BYDLD::Object3>(Arena*);
template<> ::BYDLD::Object4* Arena::CreateMaybeMessage<::BYDLD::Object4>(Arena*);
template<> ::BYDLD::ObjectData* Arena::CreateMaybeMessage<::BYDLD::ObjectData>(Arena*);
template<> ::BYDLD::OctopusKingInfo* Arena::CreateMaybeMessage<::BYDLD::OctopusKingInfo>(Arena*);
template<> ::BYDLD::OctopusKingItem* Arena::CreateMaybeMessage<::BYDLD::OctopusKingItem>(Arena*);
template<> ::BYDLD::OpenChestReward* Arena::CreateMaybeMessage<::BYDLD::OpenChestReward>(Arena*);
template<> ::BYDLD::OwnRecord* Arena::CreateMaybeMessage<::BYDLD::OwnRecord>(Arena*);
template<> ::BYDLD::Prop* Arena::CreateMaybeMessage<::BYDLD::Prop>(Arena*);
template<> ::BYDLD::PurchaseGun* Arena::CreateMaybeMessage<::BYDLD::PurchaseGun>(Arena*);
template<> ::BYDLD::RealRank* Arena::CreateMaybeMessage<::BYDLD::RealRank>(Arena*);
template<> ::BYDLD::ResultRank* Arena::CreateMaybeMessage<::BYDLD::ResultRank>(Arena*);
template<> ::BYDLD::Reward* Arena::CreateMaybeMessage<::BYDLD::Reward>(Arena*);
template<> ::BYDLD::RewardConf* Arena::CreateMaybeMessage<::BYDLD::RewardConf>(Arena*);
template<> ::BYDLD::RewardTask* Arena::CreateMaybeMessage<::BYDLD::RewardTask>(Arena*);
template<> ::BYDLD::SCActivityInfo* Arena::CreateMaybeMessage<::BYDLD::SCActivityInfo>(Arena*);
template<> ::BYDLD::SCAwardPoolRecord* Arena::CreateMaybeMessage<::BYDLD::SCAwardPoolRecord>(Arena*);
template<> ::BYDLD::SCAztecGemConfig* Arena::CreateMaybeMessage<::BYDLD::SCAztecGemConfig>(Arena*);
template<> ::BYDLD::SCBeKicked* Arena::CreateMaybeMessage<::BYDLD::SCBeKicked>(Arena*);
template<> ::BYDLD::SCBigSmallBet* Arena::CreateMaybeMessage<::BYDLD::SCBigSmallBet>(Arena*);
template<> ::BYDLD::SCBigSmallChoose* Arena::CreateMaybeMessage<::BYDLD::SCBigSmallChoose>(Arena*);
template<> ::BYDLD::SCBigSmallRecord* Arena::CreateMaybeMessage<::BYDLD::SCBigSmallRecord>(Arena*);
template<> ::BYDLD::SCBigSmallWinInfo* Arena::CreateMaybeMessage<::BYDLD::SCBigSmallWinInfo>(Arena*);
template<> ::BYDLD::SCBuyGun* Arena::CreateMaybeMessage<::BYDLD::SCBuyGun>(Arena*);
template<> ::BYDLD::SCBuyWings* Arena::CreateMaybeMessage<::BYDLD::SCBuyWings>(Arena*);
template<> ::BYDLD::SCChangeScene* Arena::CreateMaybeMessage<::BYDLD::SCChangeScene>(Arena*);
template<> ::BYDLD::SCChangeTable* Arena::CreateMaybeMessage<::BYDLD::SCChangeTable>(Arena*);
template<> ::BYDLD::SCCheckDragonWheelProp* Arena::CreateMaybeMessage<::BYDLD::SCCheckDragonWheelProp>(Arena*);
template<> ::BYDLD::SCChestConfig* Arena::CreateMaybeMessage<::BYDLD::SCChestConfig>(Arena*);
template<> ::BYDLD::SCChestSetAutoSelect* Arena::CreateMaybeMessage<::BYDLD::SCChestSetAutoSelect>(Arena*);
template<> ::BYDLD::SCChestSetEnable* Arena::CreateMaybeMessage<::BYDLD::SCChestSetEnable>(Arena*);
template<> ::BYDLD::SCClientTimeValidate* Arena::CreateMaybeMessage<::BYDLD::SCClientTimeValidate>(Arena*);
template<> ::BYDLD::SCComTask* Arena::CreateMaybeMessage<::BYDLD::SCComTask>(Arena*);
template<> ::BYDLD::SCDevourHit* Arena::CreateMaybeMessage<::BYDLD::SCDevourHit>(Arena*);
template<> ::BYDLD::SCDragonBallRes* Arena::CreateMaybeMessage<::BYDLD::SCDragonBallRes>(Arena*);
template<> ::BYDLD::SCDragonWheelStop* Arena::CreateMaybeMessage<::BYDLD::SCDragonWheelStop>(Arena*);
template<> ::BYDLD::SCFishTracesList* Arena::CreateMaybeMessage<::BYDLD::SCFishTracesList>(Arena*);
template<> ::BYDLD::SCFortuneShoot* Arena::CreateMaybeMessage<::BYDLD::SCFortuneShoot>(Arena*);
template<> ::BYDLD::SCGemConfigList* Arena::CreateMaybeMessage<::BYDLD::SCGemConfigList>(Arena*);
template<> ::BYDLD::SCGetLuckyNum* Arena::CreateMaybeMessage<::BYDLD::SCGetLuckyNum>(Arena*);
template<> ::BYDLD::SCGunInfo* Arena::CreateMaybeMessage<::BYDLD::SCGunInfo>(Arena*);
template<> ::BYDLD::SCHBonusPool* Arena::CreateMaybeMessage<::BYDLD::SCHBonusPool>(Arena*);
template<> ::BYDLD::SCHHistoryRank* Arena::CreateMaybeMessage<::BYDLD::SCHHistoryRank>(Arena*);
template<> ::BYDLD::SCHLuckyInfo* Arena::CreateMaybeMessage<::BYDLD::SCHLuckyInfo>(Arena*);
template<> ::BYDLD::SCHMatchInfo* Arena::CreateMaybeMessage<::BYDLD::SCHMatchInfo>(Arena*);
template<> ::BYDLD::SCHMatchInfoTip* Arena::CreateMaybeMessage<::BYDLD::SCHMatchInfoTip>(Arena*);
template<> ::BYDLD::SCHRankBar* Arena::CreateMaybeMessage<::BYDLD::SCHRankBar>(Arena*);
template<> ::BYDLD::SCHRealRank* Arena::CreateMaybeMessage<::BYDLD::SCHRealRank>(Arena*);
template<> ::BYDLD::SCHReward* Arena::CreateMaybeMessage<::BYDLD::SCHReward>(Arena*);
template<> ::BYDLD::SCHeartBeat* Arena::CreateMaybeMessage<::BYDLD::SCHeartBeat>(Arena*);
template<> ::BYDLD::SCHitMultiFish* Arena::CreateMaybeMessage<::BYDLD::SCHitMultiFish>(Arena*);
template<> ::BYDLD::SCJadeAwardInfo* Arena::CreateMaybeMessage<::BYDLD::SCJadeAwardInfo>(Arena*);
template<> ::BYDLD::SCLockFish* Arena::CreateMaybeMessage<::BYDLD::SCLockFish>(Arena*);
template<> ::BYDLD::SCLoginGameWithToken* Arena::CreateMaybeMessage<::BYDLD::SCLoginGameWithToken>(Arena*);
template<> ::BYDLD::SCLuckyAwardNotify* Arena::CreateMaybeMessage<::BYDLD::SCLuckyAwardNotify>(Arena*);
template<> ::BYDLD::SCLuckyDrawInfo* Arena::CreateMaybeMessage<::BYDLD::SCLuckyDrawInfo>(Arena*);
template<> ::BYDLD::SCLuckyPoolDraw* Arena::CreateMaybeMessage<::BYDLD::SCLuckyPoolDraw>(Arena*);
template<> ::BYDLD::SCLuckyPoolInfo* Arena::CreateMaybeMessage<::BYDLD::SCLuckyPoolInfo>(Arena*);
template<> ::BYDLD::SCLuckyRecord* Arena::CreateMaybeMessage<::BYDLD::SCLuckyRecord>(Arena*);
template<> ::BYDLD::SCLuckyRedDot* Arena::CreateMaybeMessage<::BYDLD::SCLuckyRedDot>(Arena*);
template<> ::BYDLD::SCLuckyTaskInfo* Arena::CreateMaybeMessage<::BYDLD::SCLuckyTaskInfo>(Arena*);
template<> ::BYDLD::SCMagicCardList* Arena::CreateMaybeMessage<::BYDLD::SCMagicCardList>(Arena*);
template<> ::BYDLD::SCMatchPackAddition* Arena::CreateMaybeMessage<::BYDLD::SCMatchPackAddition>(Arena*);
template<> ::BYDLD::SCMatchPackInvail* Arena::CreateMaybeMessage<::BYDLD::SCMatchPackInvail>(Arena*);
template<> ::BYDLD::SCMatchResult* Arena::CreateMaybeMessage<::BYDLD::SCMatchResult>(Arena*);
template<> ::BYDLD::SCNewYearCardAwardRecord* Arena::CreateMaybeMessage<::BYDLD::SCNewYearCardAwardRecord>(Arena*);
template<> ::BYDLD::SCNewYearCardExchange* Arena::CreateMaybeMessage<::BYDLD::SCNewYearCardExchange>(Arena*);
template<> ::BYDLD::SCNotifyLogout* Arena::CreateMaybeMessage<::BYDLD::SCNotifyLogout>(Arena*);
template<> ::BYDLD::SCOpenChest* Arena::CreateMaybeMessage<::BYDLD::SCOpenChest>(Arena*);
template<> ::BYDLD::SCOwnRecord* Arena::CreateMaybeMessage<::BYDLD::SCOwnRecord>(Arena*);
template<> ::BYDLD::SCPropDropNotify* Arena::CreateMaybeMessage<::BYDLD::SCPropDropNotify>(Arena*);
template<> ::BYDLD::SCPropEndNotify* Arena::CreateMaybeMessage<::BYDLD::SCPropEndNotify>(Arena*);
template<> ::BYDLD::SCPropsAwardPool* Arena::CreateMaybeMessage<::BYDLD::SCPropsAwardPool>(Arena*);
template<> ::BYDLD::SCPropsTorpedo* Arena::CreateMaybeMessage<::BYDLD::SCPropsTorpedo>(Arena*);
template<> ::BYDLD::SCPropsTrident* Arena::CreateMaybeMessage<::BYDLD::SCPropsTrident>(Arena*);
template<> ::BYDLD::SCPurchaseCheck* Arena::CreateMaybeMessage<::BYDLD::SCPurchaseCheck>(Arena*);
template<> ::BYDLD::SCRepRewardTaskList* Arena::CreateMaybeMessage<::BYDLD::SCRepRewardTaskList>(Arena*);
template<> ::BYDLD::SCRepRewardTaskRecord* Arena::CreateMaybeMessage<::BYDLD::SCRepRewardTaskRecord>(Arena*);
template<> ::BYDLD::SCRewardAutoRep* Arena::CreateMaybeMessage<::BYDLD::SCRewardAutoRep>(Arena*);
template<> ::BYDLD::SCRewardTaskFinish* Arena::CreateMaybeMessage<::BYDLD::SCRewardTaskFinish>(Arena*);
template<> ::BYDLD::SCScratchNewYearCard* Arena::CreateMaybeMessage<::BYDLD::SCScratchNewYearCard>(Arena*);
template<> ::BYDLD::SCSeaCrabCreate* Arena::CreateMaybeMessage<::BYDLD::SCSeaCrabCreate>(Arena*);
template<> ::BYDLD::SCSelectChestReward* Arena::CreateMaybeMessage<::BYDLD::SCSelectChestReward>(Arena*);
template<> ::BYDLD::SCSetProbability* Arena::CreateMaybeMessage<::BYDLD::SCSetProbability>(Arena*);
template<> ::BYDLD::SCSetSkill* Arena::CreateMaybeMessage<::BYDLD::SCSetSkill>(Arena*);
template<> ::BYDLD::SCSetWings* Arena::CreateMaybeMessage<::BYDLD::SCSetWings>(Arena*);
template<> ::BYDLD::SCShootTorpedo* Arena::CreateMaybeMessage<::BYDLD::SCShootTorpedo>(Arena*);
template<> ::BYDLD::SCSuperTridentShoot* Arena::CreateMaybeMessage<::BYDLD::SCSuperTridentShoot>(Arena*);
template<> ::BYDLD::SCSyncAnimation* Arena::CreateMaybeMessage<::BYDLD::SCSyncAnimation>(Arena*);
template<> ::BYDLD::SCSyncCrabStatus* Arena::CreateMaybeMessage<::BYDLD::SCSyncCrabStatus>(Arena*);
template<> ::BYDLD::SCSyncFishReq* Arena::CreateMaybeMessage<::BYDLD::SCSyncFishReq>(Arena*);
template<> ::BYDLD::SCSyncFishRsp* Arena::CreateMaybeMessage<::BYDLD::SCSyncFishRsp>(Arena*);
template<> ::BYDLD::SCSyncFortune* Arena::CreateMaybeMessage<::BYDLD::SCSyncFortune>(Arena*);
template<> ::BYDLD::SCSyncFreeTimes* Arena::CreateMaybeMessage<::BYDLD::SCSyncFreeTimes>(Arena*);
template<> ::BYDLD::SCSyncHallProp* Arena::CreateMaybeMessage<::BYDLD::SCSyncHallProp>(Arena*);
template<> ::BYDLD::SCSyncMoney* Arena::CreateMaybeMessage<::BYDLD::SCSyncMoney>(Arena*);
template<> ::BYDLD::SCSyncRewardTaskResult* Arena::CreateMaybeMessage<::BYDLD::SCSyncRewardTaskResult>(Arena*);
template<> ::BYDLD::SCTaskInfo* Arena::CreateMaybeMessage<::BYDLD::SCTaskInfo>(Arena*);
template<> ::BYDLD::SCTortoiseExplode* Arena::CreateMaybeMessage<::BYDLD::SCTortoiseExplode>(Arena*);
template<> ::BYDLD::SCTridentBet* Arena::CreateMaybeMessage<::BYDLD::SCTridentBet>(Arena*);
template<> ::BYDLD::SCTridentInfo* Arena::CreateMaybeMessage<::BYDLD::SCTridentInfo>(Arena*);
template<> ::BYDLD::SCTridentRankResult* Arena::CreateMaybeMessage<::BYDLD::SCTridentRankResult>(Arena*);
template<> ::BYDLD::SCUpdateChestStatus* Arena::CreateMaybeMessage<::BYDLD::SCUpdateChestStatus>(Arena*);
template<> ::BYDLD::SCUserPoolAdd* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolAdd>(Arena*);
template<> ::BYDLD::SCUserPoolDouble* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolDouble>(Arena*);
template<> ::BYDLD::SCUserPoolDoubleInfo* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolDoubleInfo>(Arena*);
template<> ::BYDLD::SCUserPoolDraw* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolDraw>(Arena*);
template<> ::BYDLD::SCUserPoolInfo* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolInfo>(Arena*);
template<> ::BYDLD::SCUserPoolPreDraw* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolPreDraw>(Arena*);
template<> ::BYDLD::SCUserPoolStatus* Arena::CreateMaybeMessage<::BYDLD::SCUserPoolStatus>(Arena*);
template<> ::BYDLD::SCUserReady* Arena::CreateMaybeMessage<::BYDLD::SCUserReady>(Arena*);
template<> ::BYDLD::SCUserRunBackground* Arena::CreateMaybeMessage<::BYDLD::SCUserRunBackground>(Arena*);
template<> ::BYDLD::SCUserShootMulti* Arena::CreateMaybeMessage<::BYDLD::SCUserShootMulti>(Arena*);
template<> ::BYDLD::SCUserTimeoutKick* Arena::CreateMaybeMessage<::BYDLD::SCUserTimeoutKick>(Arena*);
template<> ::BYDLD::SCVipInfo* Arena::CreateMaybeMessage<::BYDLD::SCVipInfo>(Arena*);
template<> ::BYDLD::SCWaterDropInfo* Arena::CreateMaybeMessage<::BYDLD::SCWaterDropInfo>(Arena*);
template<> ::BYDLD::SCWingsInfo* Arena::CreateMaybeMessage<::BYDLD::SCWingsInfo>(Arena*);
template<> ::BYDLD::SC_SceneInfo* Arena::CreateMaybeMessage<::BYDLD::SC_SceneInfo>(Arena*);
template<> ::BYDLD::SSAwardPoolMsg* Arena::CreateMaybeMessage<::BYDLD::SSAwardPoolMsg>(Arena*);
template<> ::BYDLD::SkillTime* Arena::CreateMaybeMessage<::BYDLD::SkillTime>(Arena*);
template<> ::BYDLD::SpecEffect* Arena::CreateMaybeMessage<::BYDLD::SpecEffect>(Arena*);
template<> ::BYDLD::StationBase* Arena::CreateMaybeMessage<::BYDLD::StationBase>(Arena*);
template<> ::BYDLD::TridentRankList* Arena::CreateMaybeMessage<::BYDLD::TridentRankList>(Arena*);
template<> ::BYDLD::UserAwardItem* Arena::CreateMaybeMessage<::BYDLD::UserAwardItem>(Arena*);
template<> ::BYDLD::UserPoolActivityInfo* Arena::CreateMaybeMessage<::BYDLD::UserPoolActivityInfo>(Arena*);
template<> ::BYDLD::UserProp* Arena::CreateMaybeMessage<::BYDLD::UserProp>(Arena*);
template<> ::BYDLD::UserScoreRecord* Arena::CreateMaybeMessage<::BYDLD::UserScoreRecord>(Arena*);
template<> ::BYDLD::UserShoot* Arena::CreateMaybeMessage<::BYDLD::UserShoot>(Arena*);
template<> ::BYDLD::UserShootRsp* Arena::CreateMaybeMessage<::BYDLD::UserShootRsp>(Arena*);
template<> ::BYDLD::UsersProp* Arena::CreateMaybeMessage<::BYDLD::UsersProp>(Arena*);
template<> ::BYDLD::WingsInfo* Arena::CreateMaybeMessage<::BYDLD::WingsInfo>(Arena*);
template<> ::BYDLD::WingsSpecEffect* Arena::CreateMaybeMessage<::BYDLD::WingsSpecEffect>(Arena*);
template<> ::BYDLD::Zeus* Arena::CreateMaybeMessage<::BYDLD::Zeus>(Arena*);
template<> ::BYDLD::roulette_result* Arena::CreateMaybeMessage<::BYDLD::roulette_result>(Arena*);
template<> ::BYDLD::zeus_result* Arena::CreateMaybeMessage<::BYDLD::zeus_result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BYDLD {

enum GameCommand : int {
  Req_Invalid = 0,
  Req_HeartBeat = 1000,
  Req_LoginGameWithToken = 1001,
  Req_UserReady = 1002,
  Req_SetProbability = 1003,
  Req_FishTracesList = 1004,
  Req_ChangeScen = 1005,
  Req_FishOutsideScreen = 1006,
  Req_LockFish = 1007,
  Req_UserShootMulti = 1008,
  Req_HitMultiFish = 1009,
  Req_SetSkill = 1010,
  Req_SyncMoney = 1011,
  Req_NotifyLogout = 1012,
  Req_SyncFishReq = 1013,
  Req_SyncFishRsp = 1014,
  Req_UserTimeoutKick = 1015,
  Req_UserRunBackground = 1016,
  Req_UpdateHallProp = 1017,
  Req_PropsTrident = 1018,
  Req_PropsTorpedo = 1019,
  Req_PropsAwardPool = 1020,
  Req_TridentInfo = 1021,
  Req_TridentBet = 1022,
  Req_BigSmallChoose = 1023,
  Req_BigSmallBet = 1024,
  Req_ShootTorpedo = 1025,
  Req_VipInfo = 1026,
  Req_PurchaseCheck = 1027,
  Req_ComTask = 1028,
  Req_TaskInfo = 1029,
  Req_UserScoreRecord = 1030,
  Req_FreeTimeEnd = 1031,
  Req_SyncFreeTimes = 1032,
  Req_ClickStatistic = 1033,
  Req_ActivityInfo = 1034,
  Req_PropDropNotify = 1035,
  Req_PropEndNotify = 1036,
  Req_UsersProp = 1037,
  Req_ScratchNewYearCard = 1038,
  Req_BuyNewYearCard = 1039,
  Req_NewYearCardExchange = 1040,
  Req_NewYearCardAwardRecord = 1041,
  Req_SaveSkillTime = 1042,
  Req_SuperTridentShoot = 1043,
  Req_SuperTridentAttack = 1044,
  Req_MatchResult = 1045,
  Req_MatchPackAddition = 1046,
  Req_MatchPackInvalid = 1047,
  Req_AwardPoolRecord = 1048,
  Req_FortuneShoot = 1049,
  Req_SyncFortune = 1050,
  Req_UserPoolInfo = 1051,
  Req_UserPoolStatus = 1052,
  Req_UserPoolPreDraw = 1053,
  Req_UserPoolDraw = 1054,
  Req_UserPoolAdd = 1055,
  Req_LuckyDrawInfo = 1056,
  Req_GetLuckyTaskAward = 1057,
  Req_LuckyRedDot = 1058,
  Req_GetLuckyNum = 1059,
  Req_LuckyRecord = 1060,
  Req_OwnRecord = 1061,
  Req_DragonWheel = 1062,
  Req_SyncHallProp = 1063,
  Req_CheckDragonWheelProp = 1064,
  Req_UserPoolDoubleInfo = 1100,
  Req_UserPoolDouble = 1101,
  Req_LuckyPoolInfo = 1102,
  Req_LuckyPoolDraw = 1103,
  Req_BigSmallWinInfo = 1120,
  Req_TridentRankResult = 1121,
  Req_BigSmallRecord = 1122,
  Req_RewardTaskRecord = 1130,
  Req_RewardAddTask = 1131,
  Req_RewardChangeAuto = 1132,
  Req_RewardAddTaskRep = 1133,
  Req_RewardRecordRep = 1134,
  Req_RewardAutoRep = 1135,
  Req_RewardFishGet = 1136,
  Req_SendItemsSwitch = 1137,
  Req_DealSyncSeaCrabCreate = 1138,
  Req_DealSyncCrabHitStatus = 1139,
  DealDragonBallEnd = 1140,
  Req_DevourHit = 1141,
  Req_UpdateChestStatus = 1145,
  Req_ChestConfig = 1146,
  Req_OpenChest = 1147,
  Req_SelectChestReward = 1148,
  Req_ChestSetAutoSelect = 1149,
  Req_ChestSetEnable = 1150,
  Req_SyncAnimation = 1151,
  Req_MagicCardList = 1152,
  Req_BuyGun = 1153,
  Req_GunInfo = 1154,
  Req_BuyWings = 1155,
  Req_WingsInfo = 1156,
  Req_GemConfigList = 1157,
  Req_JadeAwardInfo = 1158,
  Req_AztecGemConfig = 1159,
  Req_SetWings = 1211,
  Req_TortoiseExplode = 1200,
  Req_WaterDropInfo = 1210,
  Req_BeKicked = 1220,
  Req_ClientTimeValidate = 1221,
  Req_ChangeTable = 1222,
  Req_AwardNotify = 20001,
  GameCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameCommand_IsValid(int value);
constexpr GameCommand GameCommand_MIN = Req_Invalid;
constexpr GameCommand GameCommand_MAX = Req_AwardNotify;
constexpr int GameCommand_ARRAYSIZE = GameCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameCommand_descriptor();
template<typename T>
inline const std::string& GameCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameCommand_descriptor(), enum_t_value);
}
inline bool GameCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameCommand>(
    GameCommand_descriptor(), name, value);
}
enum ErrCode : int {
  Success = 0,
  LoadPropsDataFailed = 10001,
  CanNotFindPlayerPoint = 10002,
  ParameterIsWrong = 10003,
  LackOfMoney = 10004,
  FreeTimesChangeRatio = 10005,
  IsNotSup = 10006,
  DeserializeFailed = 10007,
  PlayerNotExist = 10008,
  PlayerAlreadyLogin = 10009,
  LoadPlayerDataFailed = 10010,
  AllocTableFailed = 10011,
  DefendPlugIn = 10012,
  QPEnterRoomFailed = 10013,
  QPBaseUserInfoGetFailed = 10014,
  QPReadGoldFailed = 10015,
  LackMoneyInServer = 10016,
  AlreadyInOtherGame = 10017,
  ThisRoomIsFull = 10018,
  UserPoolNoMeet = 10019,
  UserPoolToHigher = 10020,
  ThisTableIsFull = 10021,
  ServerClosed = 10022,
  PlayerNotInTable = 10023,
  PropNoEnough = 10030,
  PropRoomLimit = 10031,
  PropUsing = 10032,
  PropNotExist = 10033,
  PropUsingSetGun = 10034,
  ReqAddTaskSettlement = 10040,
  ReqAddTaskMoneyLess = 10041,
  ReqAddTaskAlready = 10042,
  ReqAddTaskIDInvalid = 10043,
  OpenChestFail = 10050,
  SelectChestRewardFail = 10051,
  ErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrCode_IsValid(int value);
constexpr ErrCode ErrCode_MIN = Success;
constexpr ErrCode ErrCode_MAX = SelectChestRewardFail;
constexpr int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor();
template<typename T>
inline const std::string& ErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrCode_descriptor(), enum_t_value);
}
inline bool ErrCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
enum ItemName : int {
  RewardTaskEnable = 0,
  ItemName_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemName_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemName_IsValid(int value);
constexpr ItemName ItemName_MIN = RewardTaskEnable;
constexpr ItemName ItemName_MAX = RewardTaskEnable;
constexpr int ItemName_ARRAYSIZE = ItemName_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemName_descriptor();
template<typename T>
inline const std::string& ItemName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemName_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemName_descriptor(), enum_t_value);
}
inline bool ItemName_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemName* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemName>(
    ItemName_descriptor(), name, value);
}
enum AztecGemType : int {
  AztecGemType_Null = 0,
  AztecGemType_Orange = 1,
  AztecGemType_Red = 2,
  AztecGemType_Pink = 3,
  AztecGemType_Purple = 4,
  AztecGemType_Blue = 5,
  AztecGemType_Green = 6,
  AztecGemType_A = 7,
  AztecGemType_K = 8,
  AztecGemType_Q = 9,
  AztecGemType_J = 10,
  AztecGemType_10 = 11,
  AztecGemType_Critical = 12,
  AztecGemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AztecGemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AztecGemType_IsValid(int value);
constexpr AztecGemType AztecGemType_MIN = AztecGemType_Null;
constexpr AztecGemType AztecGemType_MAX = AztecGemType_Critical;
constexpr int AztecGemType_ARRAYSIZE = AztecGemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AztecGemType_descriptor();
template<typename T>
inline const std::string& AztecGemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AztecGemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AztecGemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AztecGemType_descriptor(), enum_t_value);
}
inline bool AztecGemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AztecGemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AztecGemType>(
    AztecGemType_descriptor(), name, value);
}
enum ChestType : int {
  ChestTypePorcelain = 0,
  ChestTypeBronze = 1,
  ChestTypeSilver = 2,
  ChestTypeGold = 3,
  ChestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChestType_IsValid(int value);
constexpr ChestType ChestType_MIN = ChestTypePorcelain;
constexpr ChestType ChestType_MAX = ChestTypeGold;
constexpr int ChestType_ARRAYSIZE = ChestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestType_descriptor();
template<typename T>
inline const std::string& ChestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChestType_descriptor(), enum_t_value);
}
inline bool ChestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChestType>(
    ChestType_descriptor(), name, value);
}
enum ChestAutoSelectOption : int {
  None = 0,
  RedPacketTicket = 1,
  Money = 2,
  ChestAutoSelectOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChestAutoSelectOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChestAutoSelectOption_IsValid(int value);
constexpr ChestAutoSelectOption ChestAutoSelectOption_MIN = None;
constexpr ChestAutoSelectOption ChestAutoSelectOption_MAX = Money;
constexpr int ChestAutoSelectOption_ARRAYSIZE = ChestAutoSelectOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestAutoSelectOption_descriptor();
template<typename T>
inline const std::string& ChestAutoSelectOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChestAutoSelectOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChestAutoSelectOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChestAutoSelectOption_descriptor(), enum_t_value);
}
inline bool ChestAutoSelectOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChestAutoSelectOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChestAutoSelectOption>(
    ChestAutoSelectOption_descriptor(), name, value);
}
enum BeKickedReason : int {
  NoReason = 0,
  ServerIsClosed = 1,
  HallCommand = 2,
  NoOperationTimeout = 3,
  Cheat = 4,
  BeKickedReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BeKickedReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BeKickedReason_IsValid(int value);
constexpr BeKickedReason BeKickedReason_MIN = NoReason;
constexpr BeKickedReason BeKickedReason_MAX = Cheat;
constexpr int BeKickedReason_ARRAYSIZE = BeKickedReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeKickedReason_descriptor();
template<typename T>
inline const std::string& BeKickedReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeKickedReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeKickedReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeKickedReason_descriptor(), enum_t_value);
}
inline bool BeKickedReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeKickedReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeKickedReason>(
    BeKickedReason_descriptor(), name, value);
}
// ===================================================================

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationBaseListFieldNumber = 1,
    kRatioListFieldNumber = 5,
    kGunListFieldNumber = 6,
    kTimestampFieldNumber = 2,
    kGunRatioNumFieldNumber = 3,
    kGunLevelNumFieldNumber = 4,
  };
  // repeated .BYDLD.StationBase station_base_list = 1;
  int station_base_list_size() const;
  private:
  int _internal_station_base_list_size() const;
  public:
  void clear_station_base_list();
  ::BYDLD::StationBase* mutable_station_base_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >*
      mutable_station_base_list();
  private:
  const ::BYDLD::StationBase& _internal_station_base_list(int index) const;
  ::BYDLD::StationBase* _internal_add_station_base_list();
  public:
  const ::BYDLD::StationBase& station_base_list(int index) const;
  ::BYDLD::StationBase* add_station_base_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >&
      station_base_list() const;

  // repeated int32 ratio_list = 5;
  int ratio_list_size() const;
  private:
  int _internal_ratio_list_size() const;
  public:
  void clear_ratio_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratio_list() const;
  void _internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratio_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_list(int index) const;
  void set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratio_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratio_list();

  // repeated .BYDLD.GunDetail gun_list = 6;
  int gun_list_size() const;
  private:
  int _internal_gun_list_size() const;
  public:
  void clear_gun_list();
  ::BYDLD::GunDetail* mutable_gun_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >*
      mutable_gun_list();
  private:
  const ::BYDLD::GunDetail& _internal_gun_list(int index) const;
  ::BYDLD::GunDetail* _internal_add_gun_list();
  public:
  const ::BYDLD::GunDetail& gun_list(int index) const;
  ::BYDLD::GunDetail* add_gun_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >&
      gun_list() const;

  // int32 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_ratio_num = 3;
  void clear_gun_ratio_num();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_num() const;
  void set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio_num() const;
  void _internal_set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level_num = 4;
  void clear_gun_level_num();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_num() const;
  void set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level_num() const;
  void _internal_set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase > station_base_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratio_list_;
  mutable std::atomic<int> _ratio_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail > gun_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class GunSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.GunSpecEffect) */ {
 public:
  inline GunSpecEffect() : GunSpecEffect(nullptr) {}
  virtual ~GunSpecEffect();

  GunSpecEffect(const GunSpecEffect& from);
  GunSpecEffect(GunSpecEffect&& from) noexcept
    : GunSpecEffect() {
    *this = ::std::move(from);
  }

  inline GunSpecEffect& operator=(const GunSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunSpecEffect& operator=(GunSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunSpecEffect& default_instance();

  static inline const GunSpecEffect* internal_default_instance() {
    return reinterpret_cast<const GunSpecEffect*>(
               &_GunSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GunSpecEffect& a, GunSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(GunSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunSpecEffect* New() const final {
    return CreateMaybeMessage<GunSpecEffect>(nullptr);
  }

  GunSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunSpecEffect& from);
  void MergeFrom(const GunSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.GunSpecEffect";
  }
  protected:
  explicit GunSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioLimitFieldNumber = 1,
    kHitChangeRateFieldNumber = 2,
    kMoneyChangeRateFieldNumber = 3,
    kSpeedRateFieldNumber = 4,
    kIsSeniorFieldNumber = 5,
    kDoubleTagFieldNumber = 6,
  };
  // int32 ratioLimit = 1;
  void clear_ratiolimit();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit() const;
  void set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolimit() const;
  void _internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hitChangeRate = 2;
  void clear_hitchangerate();
  float hitchangerate() const;
  void set_hitchangerate(float value);
  private:
  float _internal_hitchangerate() const;
  void _internal_set_hitchangerate(float value);
  public:

  // float moneyChangeRate = 3;
  void clear_moneychangerate();
  float moneychangerate() const;
  void set_moneychangerate(float value);
  private:
  float _internal_moneychangerate() const;
  void _internal_set_moneychangerate(float value);
  public:

  // float speedRate = 4;
  void clear_speedrate();
  float speedrate() const;
  void set_speedrate(float value);
  private:
  float _internal_speedrate() const;
  void _internal_set_speedrate(float value);
  public:

  // bool is_senior = 5;
  void clear_is_senior();
  bool is_senior() const;
  void set_is_senior(bool value);
  private:
  bool _internal_is_senior() const;
  void _internal_set_is_senior(bool value);
  public:

  // bool double_tag = 6;
  void clear_double_tag();
  bool double_tag() const;
  void set_double_tag(bool value);
  private:
  bool _internal_double_tag() const;
  void _internal_set_double_tag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.GunSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit_;
  float hitchangerate_;
  float moneychangerate_;
  float speedrate_;
  bool is_senior_;
  bool double_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class WingsSpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.WingsSpecEffect) */ {
 public:
  inline WingsSpecEffect() : WingsSpecEffect(nullptr) {}
  virtual ~WingsSpecEffect();

  WingsSpecEffect(const WingsSpecEffect& from);
  WingsSpecEffect(WingsSpecEffect&& from) noexcept
    : WingsSpecEffect() {
    *this = ::std::move(from);
  }

  inline WingsSpecEffect& operator=(const WingsSpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline WingsSpecEffect& operator=(WingsSpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WingsSpecEffect& default_instance();

  static inline const WingsSpecEffect* internal_default_instance() {
    return reinterpret_cast<const WingsSpecEffect*>(
               &_WingsSpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WingsSpecEffect& a, WingsSpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(WingsSpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WingsSpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WingsSpecEffect* New() const final {
    return CreateMaybeMessage<WingsSpecEffect>(nullptr);
  }

  WingsSpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WingsSpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WingsSpecEffect& from);
  void MergeFrom(const WingsSpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WingsSpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.WingsSpecEffect";
  }
  protected:
  explicit WingsSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioLimitFieldNumber = 1,
    kHitChangeRateFieldNumber = 2,
    kMoneyChangeRateFieldNumber = 3,
    kSpeedRateFieldNumber = 4,
    kIsSeniorFieldNumber = 5,
    kDoubleTagFieldNumber = 6,
  };
  // int32 ratioLimit = 1;
  void clear_ratiolimit();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit() const;
  void set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiolimit() const;
  void _internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hitChangeRate = 2;
  void clear_hitchangerate();
  float hitchangerate() const;
  void set_hitchangerate(float value);
  private:
  float _internal_hitchangerate() const;
  void _internal_set_hitchangerate(float value);
  public:

  // float moneyChangeRate = 3;
  void clear_moneychangerate();
  float moneychangerate() const;
  void set_moneychangerate(float value);
  private:
  float _internal_moneychangerate() const;
  void _internal_set_moneychangerate(float value);
  public:

  // float speedRate = 4;
  void clear_speedrate();
  float speedrate() const;
  void set_speedrate(float value);
  private:
  float _internal_speedrate() const;
  void _internal_set_speedrate(float value);
  public:

  // bool is_senior = 5;
  void clear_is_senior();
  bool is_senior() const;
  void set_is_senior(bool value);
  private:
  bool _internal_is_senior() const;
  void _internal_set_is_senior(bool value);
  public:

  // bool double_tag = 6;
  void clear_double_tag();
  bool double_tag() const;
  void set_double_tag(bool value);
  private:
  bool _internal_double_tag() const;
  void _internal_set_double_tag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.WingsSpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiolimit_;
  float hitchangerate_;
  float moneychangerate_;
  float speedrate_;
  bool is_senior_;
  bool double_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class WingsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.WingsInfo) */ {
 public:
  inline WingsInfo() : WingsInfo(nullptr) {}
  virtual ~WingsInfo();

  WingsInfo(const WingsInfo& from);
  WingsInfo(WingsInfo&& from) noexcept
    : WingsInfo() {
    *this = ::std::move(from);
  }

  inline WingsInfo& operator=(const WingsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WingsInfo& operator=(WingsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WingsInfo& default_instance();

  static inline const WingsInfo* internal_default_instance() {
    return reinterpret_cast<const WingsInfo*>(
               &_WingsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WingsInfo& a, WingsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WingsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WingsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WingsInfo* New() const final {
    return CreateMaybeMessage<WingsInfo>(nullptr);
  }

  WingsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WingsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WingsInfo& from);
  void MergeFrom(const WingsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WingsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.WingsInfo";
  }
  protected:
  explicit WingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsSpecEffectFieldNumber = 3,
    kWingsIdFieldNumber = 1,
    kEnableFieldNumber = 2,
    kReceiveTypeFieldNumber = 4,
    kActivityIdFieldNumber = 5,
    kPriceFieldNumber = 6,
    kTimeStampFieldNumber = 7,
    kDiscountPriceFieldNumber = 8,
    kStartTimeFieldNumber = 9,
    kEndTimeFieldNumber = 10,
  };
  // .BYDLD.WingsSpecEffect wings_spec_effect = 3;
  bool has_wings_spec_effect() const;
  private:
  bool _internal_has_wings_spec_effect() const;
  public:
  void clear_wings_spec_effect();
  const ::BYDLD::WingsSpecEffect& wings_spec_effect() const;
  ::BYDLD::WingsSpecEffect* release_wings_spec_effect();
  ::BYDLD::WingsSpecEffect* mutable_wings_spec_effect();
  void set_allocated_wings_spec_effect(::BYDLD::WingsSpecEffect* wings_spec_effect);
  private:
  const ::BYDLD::WingsSpecEffect& _internal_wings_spec_effect() const;
  ::BYDLD::WingsSpecEffect* _internal_mutable_wings_spec_effect();
  public:
  void unsafe_arena_set_allocated_wings_spec_effect(
      ::BYDLD::WingsSpecEffect* wings_spec_effect);
  ::BYDLD::WingsSpecEffect* unsafe_arena_release_wings_spec_effect();

  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 receive_type = 4;
  void clear_receive_type();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_type() const;
  void set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_type() const;
  void _internal_set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activity_id = 5;
  void clear_activity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id() const;
  void set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activity_id() const;
  void _internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_stamp = 7;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int32 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 discount_price = 8;
  void clear_discount_price();
  ::PROTOBUF_NAMESPACE_ID::int32 discount_price() const;
  void set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_discount_price() const;
  void _internal_set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_time = 9;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_time = 10;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.WingsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::WingsSpecEffect* wings_spec_effect_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 discount_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class PurchaseGun PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.PurchaseGun) */ {
 public:
  inline PurchaseGun() : PurchaseGun(nullptr) {}
  virtual ~PurchaseGun();

  PurchaseGun(const PurchaseGun& from);
  PurchaseGun(PurchaseGun&& from) noexcept
    : PurchaseGun() {
    *this = ::std::move(from);
  }

  inline PurchaseGun& operator=(const PurchaseGun& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurchaseGun& operator=(PurchaseGun&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurchaseGun& default_instance();

  static inline const PurchaseGun* internal_default_instance() {
    return reinterpret_cast<const PurchaseGun*>(
               &_PurchaseGun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PurchaseGun& a, PurchaseGun& b) {
    a.Swap(&b);
  }
  inline void Swap(PurchaseGun* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurchaseGun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurchaseGun* New() const final {
    return CreateMaybeMessage<PurchaseGun>(nullptr);
  }

  PurchaseGun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurchaseGun>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurchaseGun& from);
  void MergeFrom(const PurchaseGun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurchaseGun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.PurchaseGun";
  }
  protected:
  explicit PurchaseGun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // int32 money = 1;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.PurchaseGun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCVipInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCVipInfo) */ {
 public:
  inline SCVipInfo() : SCVipInfo(nullptr) {}
  virtual ~SCVipInfo();

  SCVipInfo(const SCVipInfo& from);
  SCVipInfo(SCVipInfo&& from) noexcept
    : SCVipInfo() {
    *this = ::std::move(from);
  }

  inline SCVipInfo& operator=(const SCVipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCVipInfo& operator=(SCVipInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCVipInfo& default_instance();

  static inline const SCVipInfo* internal_default_instance() {
    return reinterpret_cast<const SCVipInfo*>(
               &_SCVipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SCVipInfo& a, SCVipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCVipInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCVipInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCVipInfo* New() const final {
    return CreateMaybeMessage<SCVipInfo>(nullptr);
  }

  SCVipInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCVipInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCVipInfo& from);
  void MergeFrom(const SCVipInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCVipInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCVipInfo";
  }
  protected:
  explicit SCVipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kCurVipFieldNumber = 2,
    kTrident1VipFieldNumber = 3,
    kTrident2VipFieldNumber = 4,
    kTrident3VipFieldNumber = 5,
    kTrident4VipFieldNumber = 6,
    kTrident5VipFieldNumber = 7,
    kDoubleShootVipFieldNumber = 8,
    kLockShootVipFieldNumber = 9,
    kGoldenGunVipFieldNumber = 10,
    kPaladinGunVipFieldNumber = 11,
    kPandaGunVipFieldNumber = 12,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_vip = 2;
  void clear_cur_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_vip() const;
  void set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_vip() const;
  void _internal_set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident1_vip = 3;
  void clear_trident1_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 trident1_vip() const;
  void set_trident1_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident1_vip() const;
  void _internal_set_trident1_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident2_vip = 4;
  void clear_trident2_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 trident2_vip() const;
  void set_trident2_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident2_vip() const;
  void _internal_set_trident2_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident3_vip = 5;
  void clear_trident3_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 trident3_vip() const;
  void set_trident3_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident3_vip() const;
  void _internal_set_trident3_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident4_vip = 6;
  void clear_trident4_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 trident4_vip() const;
  void set_trident4_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident4_vip() const;
  void _internal_set_trident4_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident5_vip = 7;
  void clear_trident5_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 trident5_vip() const;
  void set_trident5_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident5_vip() const;
  void _internal_set_trident5_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 double_shoot_vip = 8;
  void clear_double_shoot_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 double_shoot_vip() const;
  void set_double_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_double_shoot_vip() const;
  void _internal_set_double_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lock_shoot_vip = 9;
  void clear_lock_shoot_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 lock_shoot_vip() const;
  void set_lock_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lock_shoot_vip() const;
  void _internal_set_lock_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 golden_gun_vip = 10;
  void clear_golden_gun_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 golden_gun_vip() const;
  void set_golden_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_golden_gun_vip() const;
  void _internal_set_golden_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 paladin_gun_vip = 11;
  void clear_paladin_gun_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 paladin_gun_vip() const;
  void set_paladin_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_paladin_gun_vip() const;
  void _internal_set_paladin_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 panda_gun_vip = 12;
  void clear_panda_gun_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 panda_gun_vip() const;
  void set_panda_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_panda_gun_vip() const;
  void _internal_set_panda_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCVipInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident1_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident2_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident3_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident4_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident5_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 double_shoot_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 lock_shoot_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 golden_gun_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 paladin_gun_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 panda_gun_vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class GunDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.GunDetail) */ {
 public:
  inline GunDetail() : GunDetail(nullptr) {}
  virtual ~GunDetail();

  GunDetail(const GunDetail& from);
  GunDetail(GunDetail&& from) noexcept
    : GunDetail() {
    *this = ::std::move(from);
  }

  inline GunDetail& operator=(const GunDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunDetail& operator=(GunDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunDetail& default_instance();

  static inline const GunDetail* internal_default_instance() {
    return reinterpret_cast<const GunDetail*>(
               &_GunDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GunDetail& a, GunDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(GunDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunDetail* New() const final {
    return CreateMaybeMessage<GunDetail>(nullptr);
  }

  GunDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunDetail& from);
  void MergeFrom(const GunDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.GunDetail";
  }
  protected:
  explicit GunDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioListFieldNumber = 13,
    kGunSpecEffectFieldNumber = 9,
    kGunLevelFieldNumber = 1,
    kEnableFieldNumber = 2,
    kRatioMinFieldNumber = 3,
    kRatioMaxFieldNumber = 4,
    kVipLimitFieldNumber = 5,
    kPriceFieldNumber = 6,
    kAttackSpeedFieldNumber = 7,
    kPropIdFieldNumber = 8,
    kDiscountPriceFieldNumber = 10,
    kStartTimeFieldNumber = 11,
    kEndTimeFieldNumber = 12,
  };
  // repeated int32 ratio_list = 13;
  int ratio_list_size() const;
  private:
  int _internal_ratio_list_size() const;
  public:
  void clear_ratio_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratio_list() const;
  void _internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratio_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_list(int index) const;
  void set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratio_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratio_list();

  // .BYDLD.GunSpecEffect gunSpecEffect = 9;
  bool has_gunspeceffect() const;
  private:
  bool _internal_has_gunspeceffect() const;
  public:
  void clear_gunspeceffect();
  const ::BYDLD::GunSpecEffect& gunspeceffect() const;
  ::BYDLD::GunSpecEffect* release_gunspeceffect();
  ::BYDLD::GunSpecEffect* mutable_gunspeceffect();
  void set_allocated_gunspeceffect(::BYDLD::GunSpecEffect* gunspeceffect);
  private:
  const ::BYDLD::GunSpecEffect& _internal_gunspeceffect() const;
  ::BYDLD::GunSpecEffect* _internal_mutable_gunspeceffect();
  public:
  void unsafe_arena_set_allocated_gunspeceffect(
      ::BYDLD::GunSpecEffect* gunspeceffect);
  ::BYDLD::GunSpecEffect* unsafe_arena_release_gunspeceffect();

  // int32 gun_level = 1;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 ratio_min = 3;
  void clear_ratio_min();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_min() const;
  void set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_min() const;
  void _internal_set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio_max = 4;
  void clear_ratio_max();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_max() const;
  void set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio_max() const;
  void _internal_set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_limit = 5;
  void clear_vip_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_limit() const;
  void set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_limit() const;
  void _internal_set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 6;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float attack_speed = 7;
  void clear_attack_speed();
  float attack_speed() const;
  void set_attack_speed(float value);
  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);
  public:

  // int32 prop_id = 8;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 discount_price = 10;
  void clear_discount_price();
  ::PROTOBUF_NAMESPACE_ID::int32 discount_price() const;
  void set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_discount_price() const;
  void _internal_set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_time = 11;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_time = 12;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.GunDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratio_list_;
  mutable std::atomic<int> _ratio_list_cached_byte_size_;
  ::BYDLD::GunSpecEffect* gunspeceffect_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  float attack_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 discount_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCWingsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCWingsInfo) */ {
 public:
  inline SCWingsInfo() : SCWingsInfo(nullptr) {}
  virtual ~SCWingsInfo();

  SCWingsInfo(const SCWingsInfo& from);
  SCWingsInfo(SCWingsInfo&& from) noexcept
    : SCWingsInfo() {
    *this = ::std::move(from);
  }

  inline SCWingsInfo& operator=(const SCWingsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCWingsInfo& operator=(SCWingsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCWingsInfo& default_instance();

  static inline const SCWingsInfo* internal_default_instance() {
    return reinterpret_cast<const SCWingsInfo*>(
               &_SCWingsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SCWingsInfo& a, SCWingsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCWingsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCWingsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCWingsInfo* New() const final {
    return CreateMaybeMessage<SCWingsInfo>(nullptr);
  }

  SCWingsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCWingsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCWingsInfo& from);
  void MergeFrom(const SCWingsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCWingsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCWingsInfo";
  }
  protected:
  explicit SCWingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsListFieldNumber = 1,
  };
  // repeated .BYDLD.WingsInfo wings_list = 1;
  int wings_list_size() const;
  private:
  int _internal_wings_list_size() const;
  public:
  void clear_wings_list();
  ::BYDLD::WingsInfo* mutable_wings_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::WingsInfo >*
      mutable_wings_list();
  private:
  const ::BYDLD::WingsInfo& _internal_wings_list(int index) const;
  ::BYDLD::WingsInfo* _internal_add_wings_list();
  public:
  const ::BYDLD::WingsInfo& wings_list(int index) const;
  ::BYDLD::WingsInfo* add_wings_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::WingsInfo >&
      wings_list() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCWingsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::WingsInfo > wings_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCGunInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCGunInfo) */ {
 public:
  inline SCGunInfo() : SCGunInfo(nullptr) {}
  virtual ~SCGunInfo();

  SCGunInfo(const SCGunInfo& from);
  SCGunInfo(SCGunInfo&& from) noexcept
    : SCGunInfo() {
    *this = ::std::move(from);
  }

  inline SCGunInfo& operator=(const SCGunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGunInfo& operator=(SCGunInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGunInfo& default_instance();

  static inline const SCGunInfo* internal_default_instance() {
    return reinterpret_cast<const SCGunInfo*>(
               &_SCGunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SCGunInfo& a, SCGunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGunInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGunInfo* New() const final {
    return CreateMaybeMessage<SCGunInfo>(nullptr);
  }

  SCGunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGunInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGunInfo& from);
  void MergeFrom(const SCGunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCGunInfo";
  }
  protected:
  explicit SCGunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunListFieldNumber = 1,
  };
  // repeated .BYDLD.GunDetail gun_list = 1;
  int gun_list_size() const;
  private:
  int _internal_gun_list_size() const;
  public:
  void clear_gun_list();
  ::BYDLD::GunDetail* mutable_gun_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >*
      mutable_gun_list();
  private:
  const ::BYDLD::GunDetail& _internal_gun_list(int index) const;
  ::BYDLD::GunDetail* _internal_add_gun_list();
  public:
  const ::BYDLD::GunDetail& gun_list(int index) const;
  ::BYDLD::GunDetail* add_gun_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >&
      gun_list() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCGunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail > gun_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCPurchaseCheck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCPurchaseCheck) */ {
 public:
  inline SCPurchaseCheck() : SCPurchaseCheck(nullptr) {}
  virtual ~SCPurchaseCheck();

  SCPurchaseCheck(const SCPurchaseCheck& from);
  SCPurchaseCheck(SCPurchaseCheck&& from) noexcept
    : SCPurchaseCheck() {
    *this = ::std::move(from);
  }

  inline SCPurchaseCheck& operator=(const SCPurchaseCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPurchaseCheck& operator=(SCPurchaseCheck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPurchaseCheck& default_instance();

  static inline const SCPurchaseCheck* internal_default_instance() {
    return reinterpret_cast<const SCPurchaseCheck*>(
               &_SCPurchaseCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SCPurchaseCheck& a, SCPurchaseCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPurchaseCheck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPurchaseCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPurchaseCheck* New() const final {
    return CreateMaybeMessage<SCPurchaseCheck>(nullptr);
  }

  SCPurchaseCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPurchaseCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPurchaseCheck& from);
  void MergeFrom(const SCPurchaseCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPurchaseCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCPurchaseCheck";
  }
  protected:
  explicit SCPurchaseCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPurchaseFieldNumber = 1,
  };
  // int32 is_purchase = 1;
  void clear_is_purchase();
  ::PROTOBUF_NAMESPACE_ID::int32 is_purchase() const;
  void set_is_purchase(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_purchase() const;
  void _internal_set_is_purchase(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCPurchaseCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_purchase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class ObjectData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.ObjectData) */ {
 public:
  inline ObjectData() : ObjectData(nullptr) {}
  virtual ~ObjectData();

  ObjectData(const ObjectData& from);
  ObjectData(ObjectData&& from) noexcept
    : ObjectData() {
    *this = ::std::move(from);
  }

  inline ObjectData& operator=(const ObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectData& operator=(ObjectData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectData& default_instance();

  static inline const ObjectData* internal_default_instance() {
    return reinterpret_cast<const ObjectData*>(
               &_ObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ObjectData& a, ObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectData* New() const final {
    return CreateMaybeMessage<ObjectData>(nullptr);
  }

  ObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectData& from);
  void MergeFrom(const ObjectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.ObjectData";
  }
  protected:
  explicit ObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.ObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Object2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Object2) */ {
 public:
  inline Object2() : Object2(nullptr) {}
  virtual ~Object2();

  Object2(const Object2& from);
  Object2(Object2&& from) noexcept
    : Object2() {
    *this = ::std::move(from);
  }

  inline Object2& operator=(const Object2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object2& operator=(Object2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object2& default_instance();

  static inline const Object2* internal_default_instance() {
    return reinterpret_cast<const Object2*>(
               &_Object2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Object2& a, Object2& b) {
    a.Swap(&b);
  }
  inline void Swap(Object2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object2* New() const final {
    return CreateMaybeMessage<Object2>(nullptr);
  }

  Object2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object2& from);
  void MergeFrom(const Object2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Object2";
  }
  protected:
  explicit Object2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Object2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Object3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Object3) */ {
 public:
  inline Object3() : Object3(nullptr) {}
  virtual ~Object3();

  Object3(const Object3& from);
  Object3(Object3&& from) noexcept
    : Object3() {
    *this = ::std::move(from);
  }

  inline Object3& operator=(const Object3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object3& operator=(Object3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object3& default_instance();

  static inline const Object3* internal_default_instance() {
    return reinterpret_cast<const Object3*>(
               &_Object3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Object3& a, Object3& b) {
    a.Swap(&b);
  }
  inline void Swap(Object3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object3* New() const final {
    return CreateMaybeMessage<Object3>(nullptr);
  }

  Object3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object3& from);
  void MergeFrom(const Object3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Object3";
  }
  protected:
  explicit Object3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Object3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Object4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Object4) */ {
 public:
  inline Object4() : Object4(nullptr) {}
  virtual ~Object4();

  Object4(const Object4& from);
  Object4(Object4&& from) noexcept
    : Object4() {
    *this = ::std::move(from);
  }

  inline Object4& operator=(const Object4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object4& operator=(Object4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object4& default_instance();

  static inline const Object4* internal_default_instance() {
    return reinterpret_cast<const Object4*>(
               &_Object4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Object4& a, Object4& b) {
    a.Swap(&b);
  }
  inline void Swap(Object4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object4* New() const final {
    return CreateMaybeMessage<Object4>(nullptr);
  }

  Object4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object4& from);
  void MergeFrom(const Object4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Object4";
  }
  protected:
  explicit Object4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated int32 value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Object4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 denom = 2;
  void clear_denom();
  ::PROTOBUF_NAMESPACE_ID::int32 denom() const;
  void set_denom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_denom() const;
  void _internal_set_denom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 denom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSTridentInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSTridentInfo) */ {
 public:
  inline CSTridentInfo() : CSTridentInfo(nullptr) {}
  virtual ~CSTridentInfo();

  CSTridentInfo(const CSTridentInfo& from);
  CSTridentInfo(CSTridentInfo&& from) noexcept
    : CSTridentInfo() {
    *this = ::std::move(from);
  }

  inline CSTridentInfo& operator=(const CSTridentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTridentInfo& operator=(CSTridentInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTridentInfo& default_instance();

  static inline const CSTridentInfo* internal_default_instance() {
    return reinterpret_cast<const CSTridentInfo*>(
               &_CSTridentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CSTridentInfo& a, CSTridentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTridentInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTridentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTridentInfo* New() const final {
    return CreateMaybeMessage<CSTridentInfo>(nullptr);
  }

  CSTridentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTridentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTridentInfo& from);
  void MergeFrom(const CSTridentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTridentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSTridentInfo";
  }
  protected:
  explicit CSTridentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSTridentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCTridentInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCTridentInfo) */ {
 public:
  inline SCTridentInfo() : SCTridentInfo(nullptr) {}
  virtual ~SCTridentInfo();

  SCTridentInfo(const SCTridentInfo& from);
  SCTridentInfo(SCTridentInfo&& from) noexcept
    : SCTridentInfo() {
    *this = ::std::move(from);
  }

  inline SCTridentInfo& operator=(const SCTridentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTridentInfo& operator=(SCTridentInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTridentInfo& default_instance();

  static inline const SCTridentInfo* internal_default_instance() {
    return reinterpret_cast<const SCTridentInfo*>(
               &_SCTridentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SCTridentInfo& a, SCTridentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTridentInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTridentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTridentInfo* New() const final {
    return CreateMaybeMessage<SCTridentInfo>(nullptr);
  }

  SCTridentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTridentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTridentInfo& from);
  void MergeFrom(const SCTridentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTridentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCTridentInfo";
  }
  protected:
  explicit SCTridentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetsFieldNumber = 1,
    kIsFullFieldNumber = 2,
    kCurPointFieldNumber = 3,
  };
  // repeated int32 bets = 1;
  int bets_size() const;
  private:
  int _internal_bets_size() const;
  public:
  void clear_bets();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bets() const;
  void _internal_add_bets(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bets();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bets(int index) const;
  void set_bets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bets();

  // bool is_full = 2;
  void clear_is_full();
  bool is_full() const;
  void set_is_full(bool value);
  private:
  bool _internal_is_full() const;
  void _internal_set_is_full(bool value);
  public:

  // int32 cur_point = 3;
  void clear_cur_point();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_point() const;
  void set_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_point() const;
  void _internal_set_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCTridentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bets_;
  mutable std::atomic<int> _bets_cached_byte_size_;
  bool is_full_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSTridentBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSTridentBet) */ {
 public:
  inline CSTridentBet() : CSTridentBet(nullptr) {}
  virtual ~CSTridentBet();

  CSTridentBet(const CSTridentBet& from);
  CSTridentBet(CSTridentBet&& from) noexcept
    : CSTridentBet() {
    *this = ::std::move(from);
  }

  inline CSTridentBet& operator=(const CSTridentBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTridentBet& operator=(CSTridentBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTridentBet& default_instance();

  static inline const CSTridentBet* internal_default_instance() {
    return reinterpret_cast<const CSTridentBet*>(
               &_CSTridentBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CSTridentBet& a, CSTridentBet& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTridentBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTridentBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTridentBet* New() const final {
    return CreateMaybeMessage<CSTridentBet>(nullptr);
  }

  CSTridentBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTridentBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTridentBet& from);
  void MergeFrom(const CSTridentBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTridentBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSTridentBet";
  }
  protected:
  explicit CSTridentBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetFieldNumber = 1,
  };
  // int32 bet = 1;
  void clear_bet();
  ::PROTOBUF_NAMESPACE_ID::int32 bet() const;
  void set_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet() const;
  void _internal_set_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSTridentBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCTridentBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCTridentBet) */ {
 public:
  inline SCTridentBet() : SCTridentBet(nullptr) {}
  virtual ~SCTridentBet();

  SCTridentBet(const SCTridentBet& from);
  SCTridentBet(SCTridentBet&& from) noexcept
    : SCTridentBet() {
    *this = ::std::move(from);
  }

  inline SCTridentBet& operator=(const SCTridentBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTridentBet& operator=(SCTridentBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTridentBet& default_instance();

  static inline const SCTridentBet* internal_default_instance() {
    return reinterpret_cast<const SCTridentBet*>(
               &_SCTridentBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SCTridentBet& a, SCTridentBet& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTridentBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTridentBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTridentBet* New() const final {
    return CreateMaybeMessage<SCTridentBet>(nullptr);
  }

  SCTridentBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTridentBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTridentBet& from);
  void MergeFrom(const SCTridentBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTridentBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCTridentBet";
  }
  protected:
  explicit SCTridentBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kAwardFieldNumber = 2,
    kScoreFieldNumber = 3,
    kBetFieldNumber = 4,
    kIsBigSmallFieldNumber = 5,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 2;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet = 4;
  void clear_bet();
  ::PROTOBUF_NAMESPACE_ID::int32 bet() const;
  void set_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet() const;
  void _internal_set_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_big_small = 5;
  void clear_is_big_small();
  bool is_big_small() const;
  void set_is_big_small(bool value);
  private:
  bool _internal_is_big_small() const;
  void _internal_set_is_big_small(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCTridentBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_;
  bool is_big_small_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCPropsTrident PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCPropsTrident) */ {
 public:
  inline SCPropsTrident() : SCPropsTrident(nullptr) {}
  virtual ~SCPropsTrident();

  SCPropsTrident(const SCPropsTrident& from);
  SCPropsTrident(SCPropsTrident&& from) noexcept
    : SCPropsTrident() {
    *this = ::std::move(from);
  }

  inline SCPropsTrident& operator=(const SCPropsTrident& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropsTrident& operator=(SCPropsTrident&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropsTrident& default_instance();

  static inline const SCPropsTrident* internal_default_instance() {
    return reinterpret_cast<const SCPropsTrident*>(
               &_SCPropsTrident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SCPropsTrident& a, SCPropsTrident& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropsTrident* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropsTrident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropsTrident* New() const final {
    return CreateMaybeMessage<SCPropsTrident>(nullptr);
  }

  SCPropsTrident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropsTrident>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropsTrident& from);
  void MergeFrom(const SCPropsTrident& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropsTrident* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCPropsTrident";
  }
  protected:
  explicit SCPropsTrident(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleScoreFieldNumber = 2,
    kEnableFieldNumber = 1,
    kRankEnableFieldNumber = 4,
    kCurScoreFieldNumber = 3,
  };
  // int32 single_score = 2;
  void clear_single_score();
  ::PROTOBUF_NAMESPACE_ID::int32 single_score() const;
  void set_single_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_single_score() const;
  void _internal_set_single_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool rank_enable = 4;
  void clear_rank_enable();
  bool rank_enable() const;
  void set_rank_enable(bool value);
  private:
  bool _internal_rank_enable() const;
  void _internal_set_rank_enable(bool value);
  public:

  // int32 cur_score = 3;
  void clear_cur_score();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_score() const;
  void set_cur_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_score() const;
  void _internal_set_cur_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCPropsTrident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 single_score_;
  bool enable_;
  bool rank_enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBigSmallChoose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBigSmallChoose) */ {
 public:
  inline CSBigSmallChoose() : CSBigSmallChoose(nullptr) {}
  virtual ~CSBigSmallChoose();

  CSBigSmallChoose(const CSBigSmallChoose& from);
  CSBigSmallChoose(CSBigSmallChoose&& from) noexcept
    : CSBigSmallChoose() {
    *this = ::std::move(from);
  }

  inline CSBigSmallChoose& operator=(const CSBigSmallChoose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBigSmallChoose& operator=(CSBigSmallChoose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBigSmallChoose& default_instance();

  static inline const CSBigSmallChoose* internal_default_instance() {
    return reinterpret_cast<const CSBigSmallChoose*>(
               &_CSBigSmallChoose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CSBigSmallChoose& a, CSBigSmallChoose& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBigSmallChoose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBigSmallChoose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBigSmallChoose* New() const final {
    return CreateMaybeMessage<CSBigSmallChoose>(nullptr);
  }

  CSBigSmallChoose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBigSmallChoose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBigSmallChoose& from);
  void MergeFrom(const CSBigSmallChoose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBigSmallChoose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBigSmallChoose";
  }
  protected:
  explicit CSBigSmallChoose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kEnterOrExitFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enter_or_exit = 2;
  void clear_enter_or_exit();
  ::PROTOBUF_NAMESPACE_ID::int32 enter_or_exit() const;
  void set_enter_or_exit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enter_or_exit() const;
  void _internal_set_enter_or_exit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBigSmallChoose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 enter_or_exit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBigSmallChoose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBigSmallChoose) */ {
 public:
  inline SCBigSmallChoose() : SCBigSmallChoose(nullptr) {}
  virtual ~SCBigSmallChoose();

  SCBigSmallChoose(const SCBigSmallChoose& from);
  SCBigSmallChoose(SCBigSmallChoose&& from) noexcept
    : SCBigSmallChoose() {
    *this = ::std::move(from);
  }

  inline SCBigSmallChoose& operator=(const SCBigSmallChoose& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBigSmallChoose& operator=(SCBigSmallChoose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBigSmallChoose& default_instance();

  static inline const SCBigSmallChoose* internal_default_instance() {
    return reinterpret_cast<const SCBigSmallChoose*>(
               &_SCBigSmallChoose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SCBigSmallChoose& a, SCBigSmallChoose& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBigSmallChoose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBigSmallChoose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBigSmallChoose* New() const final {
    return CreateMaybeMessage<SCBigSmallChoose>(nullptr);
  }

  SCBigSmallChoose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBigSmallChoose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBigSmallChoose& from);
  void MergeFrom(const SCBigSmallChoose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBigSmallChoose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBigSmallChoose";
  }
  protected:
  explicit SCBigSmallChoose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kEnterExitFieldNumber = 2,
    kAwardFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enter_exit = 2;
  void clear_enter_exit();
  ::PROTOBUF_NAMESPACE_ID::int32 enter_exit() const;
  void set_enter_exit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enter_exit() const;
  void _internal_set_enter_exit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 3;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCBigSmallChoose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 enter_exit_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBigSmallBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBigSmallBet) */ {
 public:
  inline CSBigSmallBet() : CSBigSmallBet(nullptr) {}
  virtual ~CSBigSmallBet();

  CSBigSmallBet(const CSBigSmallBet& from);
  CSBigSmallBet(CSBigSmallBet&& from) noexcept
    : CSBigSmallBet() {
    *this = ::std::move(from);
  }

  inline CSBigSmallBet& operator=(const CSBigSmallBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBigSmallBet& operator=(CSBigSmallBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBigSmallBet& default_instance();

  static inline const CSBigSmallBet* internal_default_instance() {
    return reinterpret_cast<const CSBigSmallBet*>(
               &_CSBigSmallBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSBigSmallBet& a, CSBigSmallBet& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBigSmallBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBigSmallBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBigSmallBet* New() const final {
    return CreateMaybeMessage<CSBigSmallBet>(nullptr);
  }

  CSBigSmallBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBigSmallBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBigSmallBet& from);
  void MergeFrom(const CSBigSmallBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBigSmallBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBigSmallBet";
  }
  protected:
  explicit CSBigSmallBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsBetBigFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // bool is_bet_big = 1;
  void clear_is_bet_big();
  bool is_bet_big() const;
  void set_is_bet_big(bool value);
  private:
  bool _internal_is_bet_big() const;
  void _internal_set_is_bet_big(bool value);
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBigSmallBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_bet_big_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBigSmallBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBigSmallBet) */ {
 public:
  inline SCBigSmallBet() : SCBigSmallBet(nullptr) {}
  virtual ~SCBigSmallBet();

  SCBigSmallBet(const SCBigSmallBet& from);
  SCBigSmallBet(SCBigSmallBet&& from) noexcept
    : SCBigSmallBet() {
    *this = ::std::move(from);
  }

  inline SCBigSmallBet& operator=(const SCBigSmallBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBigSmallBet& operator=(SCBigSmallBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBigSmallBet& default_instance();

  static inline const SCBigSmallBet* internal_default_instance() {
    return reinterpret_cast<const SCBigSmallBet*>(
               &_SCBigSmallBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SCBigSmallBet& a, SCBigSmallBet& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBigSmallBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBigSmallBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBigSmallBet* New() const final {
    return CreateMaybeMessage<SCBigSmallBet>(nullptr);
  }

  SCBigSmallBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBigSmallBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBigSmallBet& from);
  void MergeFrom(const SCBigSmallBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBigSmallBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBigSmallBet";
  }
  protected:
  explicit SCBigSmallBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDicesFieldNumber = 2,
    kChairIdxFieldNumber = 1,
    kAwardFieldNumber = 4,
    kIsBetBigFieldNumber = 3,
    kIsEndFieldNumber = 6,
    kScoreFieldNumber = 5,
  };
  // repeated int32 dices = 2;
  int dices_size() const;
  private:
  int _internal_dices_size() const;
  public:
  void clear_dices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dices() const;
  void _internal_add_dices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dices(int index) const;
  void set_dices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dices();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 4;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_bet_big = 3;
  void clear_is_bet_big();
  bool is_bet_big() const;
  void set_is_bet_big(bool value);
  private:
  bool _internal_is_bet_big() const;
  void _internal_set_is_bet_big(bool value);
  public:

  // bool is_end = 6;
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // int32 score = 5;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCBigSmallBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dices_;
  mutable std::atomic<int> _dices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  bool is_bet_big_;
  bool is_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSShootTorpedo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSShootTorpedo) */ {
 public:
  inline CSShootTorpedo() : CSShootTorpedo(nullptr) {}
  virtual ~CSShootTorpedo();

  CSShootTorpedo(const CSShootTorpedo& from);
  CSShootTorpedo(CSShootTorpedo&& from) noexcept
    : CSShootTorpedo() {
    *this = ::std::move(from);
  }

  inline CSShootTorpedo& operator=(const CSShootTorpedo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSShootTorpedo& operator=(CSShootTorpedo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSShootTorpedo& default_instance();

  static inline const CSShootTorpedo* internal_default_instance() {
    return reinterpret_cast<const CSShootTorpedo*>(
               &_CSShootTorpedo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSShootTorpedo& a, CSShootTorpedo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSShootTorpedo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSShootTorpedo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSShootTorpedo* New() const final {
    return CreateMaybeMessage<CSShootTorpedo>(nullptr);
  }

  CSShootTorpedo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSShootTorpedo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSShootTorpedo& from);
  void MergeFrom(const CSShootTorpedo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSShootTorpedo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSShootTorpedo";
  }
  protected:
  explicit CSShootTorpedo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorpedoIdFieldNumber = 2,
    kChairIdxFieldNumber = 1,
    kShootAllFieldNumber = 3,
  };
  // string torpedo_id = 2;
  void clear_torpedo_id();
  const std::string& torpedo_id() const;
  void set_torpedo_id(const std::string& value);
  void set_torpedo_id(std::string&& value);
  void set_torpedo_id(const char* value);
  void set_torpedo_id(const char* value, size_t size);
  std::string* mutable_torpedo_id();
  std::string* release_torpedo_id();
  void set_allocated_torpedo_id(std::string* torpedo_id);
  private:
  const std::string& _internal_torpedo_id() const;
  void _internal_set_torpedo_id(const std::string& value);
  std::string* _internal_mutable_torpedo_id();
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool shoot_all = 3;
  void clear_shoot_all();
  bool shoot_all() const;
  void set_shoot_all(bool value);
  private:
  bool _internal_shoot_all() const;
  void _internal_set_shoot_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSShootTorpedo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr torpedo_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool shoot_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCShootTorpedo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCShootTorpedo) */ {
 public:
  inline SCShootTorpedo() : SCShootTorpedo(nullptr) {}
  virtual ~SCShootTorpedo();

  SCShootTorpedo(const SCShootTorpedo& from);
  SCShootTorpedo(SCShootTorpedo&& from) noexcept
    : SCShootTorpedo() {
    *this = ::std::move(from);
  }

  inline SCShootTorpedo& operator=(const SCShootTorpedo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCShootTorpedo& operator=(SCShootTorpedo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCShootTorpedo& default_instance();

  static inline const SCShootTorpedo* internal_default_instance() {
    return reinterpret_cast<const SCShootTorpedo*>(
               &_SCShootTorpedo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SCShootTorpedo& a, SCShootTorpedo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCShootTorpedo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCShootTorpedo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCShootTorpedo* New() const final {
    return CreateMaybeMessage<SCShootTorpedo>(nullptr);
  }

  SCShootTorpedo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCShootTorpedo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCShootTorpedo& from);
  void MergeFrom(const SCShootTorpedo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCShootTorpedo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCShootTorpedo";
  }
  protected:
  explicit SCShootTorpedo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 5,
    kTorpedoIdFieldNumber = 2,
    kChairIdxFieldNumber = 1,
    kAwardFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // repeated .BYDLD.ObjectData objects = 5;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::BYDLD::ObjectData* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >*
      mutable_objects();
  private:
  const ::BYDLD::ObjectData& _internal_objects(int index) const;
  ::BYDLD::ObjectData* _internal_add_objects();
  public:
  const ::BYDLD::ObjectData& objects(int index) const;
  ::BYDLD::ObjectData* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >&
      objects() const;

  // string torpedo_id = 2;
  void clear_torpedo_id();
  const std::string& torpedo_id() const;
  void set_torpedo_id(const std::string& value);
  void set_torpedo_id(std::string&& value);
  void set_torpedo_id(const char* value);
  void set_torpedo_id(const char* value, size_t size);
  std::string* mutable_torpedo_id();
  std::string* release_torpedo_id();
  void set_allocated_torpedo_id(std::string* torpedo_id);
  private:
  const std::string& _internal_torpedo_id() const;
  void _internal_set_torpedo_id(const std::string& value);
  std::string* _internal_mutable_torpedo_id();
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 3;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCShootTorpedo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr torpedo_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCPropsTorpedo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCPropsTorpedo) */ {
 public:
  inline SCPropsTorpedo() : SCPropsTorpedo(nullptr) {}
  virtual ~SCPropsTorpedo();

  SCPropsTorpedo(const SCPropsTorpedo& from);
  SCPropsTorpedo(SCPropsTorpedo&& from) noexcept
    : SCPropsTorpedo() {
    *this = ::std::move(from);
  }

  inline SCPropsTorpedo& operator=(const SCPropsTorpedo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropsTorpedo& operator=(SCPropsTorpedo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropsTorpedo& default_instance();

  static inline const SCPropsTorpedo* internal_default_instance() {
    return reinterpret_cast<const SCPropsTorpedo*>(
               &_SCPropsTorpedo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SCPropsTorpedo& a, SCPropsTorpedo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropsTorpedo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropsTorpedo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropsTorpedo* New() const final {
    return CreateMaybeMessage<SCPropsTorpedo>(nullptr);
  }

  SCPropsTorpedo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropsTorpedo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropsTorpedo& from);
  void MergeFrom(const SCPropsTorpedo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropsTorpedo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCPropsTorpedo";
  }
  protected:
  explicit SCPropsTorpedo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // repeated .BYDLD.ObjectData objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::BYDLD::ObjectData* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >*
      mutable_objects();
  private:
  const ::BYDLD::ObjectData& _internal_objects(int index) const;
  ::BYDLD::ObjectData* _internal_add_objects();
  public:
  const ::BYDLD::ObjectData& objects(int index) const;
  ::BYDLD::ObjectData* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >&
      objects() const;

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCPropsTorpedo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData > objects_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AwardPoolData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AwardPoolData) */ {
 public:
  inline AwardPoolData() : AwardPoolData(nullptr) {}
  virtual ~AwardPoolData();

  AwardPoolData(const AwardPoolData& from);
  AwardPoolData(AwardPoolData&& from) noexcept
    : AwardPoolData() {
    *this = ::std::move(from);
  }

  inline AwardPoolData& operator=(const AwardPoolData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardPoolData& operator=(AwardPoolData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardPoolData& default_instance();

  static inline const AwardPoolData* internal_default_instance() {
    return reinterpret_cast<const AwardPoolData*>(
               &_AwardPoolData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AwardPoolData& a, AwardPoolData& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardPoolData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardPoolData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardPoolData* New() const final {
    return CreateMaybeMessage<AwardPoolData>(nullptr);
  }

  AwardPoolData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardPoolData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardPoolData& from);
  void MergeFrom(const AwardPoolData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardPoolData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AwardPoolData";
  }
  protected:
  explicit AwardPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AwardPoolData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCPropsAwardPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCPropsAwardPool) */ {
 public:
  inline SCPropsAwardPool() : SCPropsAwardPool(nullptr) {}
  virtual ~SCPropsAwardPool();

  SCPropsAwardPool(const SCPropsAwardPool& from);
  SCPropsAwardPool(SCPropsAwardPool&& from) noexcept
    : SCPropsAwardPool() {
    *this = ::std::move(from);
  }

  inline SCPropsAwardPool& operator=(const SCPropsAwardPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropsAwardPool& operator=(SCPropsAwardPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropsAwardPool& default_instance();

  static inline const SCPropsAwardPool* internal_default_instance() {
    return reinterpret_cast<const SCPropsAwardPool*>(
               &_SCPropsAwardPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SCPropsAwardPool& a, SCPropsAwardPool& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropsAwardPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropsAwardPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropsAwardPool* New() const final {
    return CreateMaybeMessage<SCPropsAwardPool>(nullptr);
  }

  SCPropsAwardPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropsAwardPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropsAwardPool& from);
  void MergeFrom(const SCPropsAwardPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropsAwardPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCPropsAwardPool";
  }
  protected:
  explicit SCPropsAwardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // repeated .BYDLD.AwardPoolData objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::BYDLD::AwardPoolData* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolData >*
      mutable_objects();
  private:
  const ::BYDLD::AwardPoolData& _internal_objects(int index) const;
  ::BYDLD::AwardPoolData* _internal_add_objects();
  public:
  const ::BYDLD::AwardPoolData& objects(int index) const;
  ::BYDLD::AwardPoolData* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolData >&
      objects() const;

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCPropsAwardPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolData > objects_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLoginGameWithToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLoginGameWithToken) */ {
 public:
  inline CSLoginGameWithToken() : CSLoginGameWithToken(nullptr) {}
  virtual ~CSLoginGameWithToken();

  CSLoginGameWithToken(const CSLoginGameWithToken& from);
  CSLoginGameWithToken(CSLoginGameWithToken&& from) noexcept
    : CSLoginGameWithToken() {
    *this = ::std::move(from);
  }

  inline CSLoginGameWithToken& operator=(const CSLoginGameWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLoginGameWithToken& operator=(CSLoginGameWithToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLoginGameWithToken& default_instance();

  static inline const CSLoginGameWithToken* internal_default_instance() {
    return reinterpret_cast<const CSLoginGameWithToken*>(
               &_CSLoginGameWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CSLoginGameWithToken& a, CSLoginGameWithToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLoginGameWithToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLoginGameWithToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLoginGameWithToken* New() const final {
    return CreateMaybeMessage<CSLoginGameWithToken>(nullptr);
  }

  CSLoginGameWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLoginGameWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLoginGameWithToken& from);
  void MergeFrom(const CSLoginGameWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLoginGameWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLoginGameWithToken";
  }
  protected:
  explicit CSLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kOSTypeFieldNumber = 3,
    kTableIdFieldNumber = 4,
    kLastTableIdFieldNumber = 5,
  };
  // string Token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OSType = 3;
  void clear_ostype();
  ::PROTOBUF_NAMESPACE_ID::int32 ostype() const;
  void set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ostype() const;
  void _internal_set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 4;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_table_id = 5;
  void clear_last_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 last_table_id() const;
  void set_last_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_table_id() const;
  void _internal_set_last_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSLoginGameWithToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ostype_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLoginGameWithToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLoginGameWithToken) */ {
 public:
  inline SCLoginGameWithToken() : SCLoginGameWithToken(nullptr) {}
  virtual ~SCLoginGameWithToken();

  SCLoginGameWithToken(const SCLoginGameWithToken& from);
  SCLoginGameWithToken(SCLoginGameWithToken&& from) noexcept
    : SCLoginGameWithToken() {
    *this = ::std::move(from);
  }

  inline SCLoginGameWithToken& operator=(const SCLoginGameWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLoginGameWithToken& operator=(SCLoginGameWithToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLoginGameWithToken& default_instance();

  static inline const SCLoginGameWithToken* internal_default_instance() {
    return reinterpret_cast<const SCLoginGameWithToken*>(
               &_SCLoginGameWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SCLoginGameWithToken& a, SCLoginGameWithToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLoginGameWithToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLoginGameWithToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLoginGameWithToken* New() const final {
    return CreateMaybeMessage<SCLoginGameWithToken>(nullptr);
  }

  SCLoginGameWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLoginGameWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLoginGameWithToken& from);
  void MergeFrom(const SCLoginGameWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLoginGameWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLoginGameWithToken";
  }
  protected:
  explicit SCLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIndexFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // int32 scene_index = 1;
  void clear_scene_index();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index() const;
  void set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_index() const;
  void _internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLoginGameWithToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserReady) */ {
 public:
  inline CSUserReady() : CSUserReady(nullptr) {}
  virtual ~CSUserReady();

  CSUserReady(const CSUserReady& from);
  CSUserReady(CSUserReady&& from) noexcept
    : CSUserReady() {
    *this = ::std::move(from);
  }

  inline CSUserReady& operator=(const CSUserReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserReady& operator=(CSUserReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserReady& default_instance();

  static inline const CSUserReady* internal_default_instance() {
    return reinterpret_cast<const CSUserReady*>(
               &_CSUserReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CSUserReady& a, CSUserReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserReady* New() const final {
    return CreateMaybeMessage<CSUserReady>(nullptr);
  }

  CSUserReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserReady& from);
  void MergeFrom(const CSUserReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserReady";
  }
  protected:
  explicit CSUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class EffectInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.EffectInfo) */ {
 public:
  inline EffectInfo() : EffectInfo(nullptr) {}
  virtual ~EffectInfo();

  EffectInfo(const EffectInfo& from);
  EffectInfo(EffectInfo&& from) noexcept
    : EffectInfo() {
    *this = ::std::move(from);
  }

  inline EffectInfo& operator=(const EffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectInfo& operator=(EffectInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EffectInfo& default_instance();

  static inline const EffectInfo* internal_default_instance() {
    return reinterpret_cast<const EffectInfo*>(
               &_EffectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(EffectInfo& a, EffectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EffectInfo* New() const final {
    return CreateMaybeMessage<EffectInfo>(nullptr);
  }

  EffectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EffectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EffectInfo& from);
  void MergeFrom(const EffectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.EffectInfo";
  }
  protected:
  explicit EffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdFieldNumber = 1,
    kIsGlobalFieldNumber = 2,
  };
  // int32 effect_id = 1;
  void clear_effect_id();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id() const;
  void set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_id() const;
  void _internal_set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_global = 2;
  void clear_is_global();
  bool is_global() const;
  void set_is_global(bool value);
  private:
  bool _internal_is_global() const;
  void _internal_set_is_global(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.EffectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id_;
  bool is_global_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SpecEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SpecEffect) */ {
 public:
  inline SpecEffect() : SpecEffect(nullptr) {}
  virtual ~SpecEffect();

  SpecEffect(const SpecEffect& from);
  SpecEffect(SpecEffect&& from) noexcept
    : SpecEffect() {
    *this = ::std::move(from);
  }

  inline SpecEffect& operator=(const SpecEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpecEffect& operator=(SpecEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpecEffect& default_instance();

  static inline const SpecEffect* internal_default_instance() {
    return reinterpret_cast<const SpecEffect*>(
               &_SpecEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SpecEffect& a, SpecEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(SpecEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpecEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpecEffect* New() const final {
    return CreateMaybeMessage<SpecEffect>(nullptr);
  }

  SpecEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpecEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpecEffect& from);
  void MergeFrom(const SpecEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SpecEffect";
  }
  protected:
  explicit SpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostMoneyFieldNumber = 1,
    kEarnMoneyFieldNumber = 2,
  };
  // int32 costMoney = 1;
  void clear_costmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 costmoney() const;
  void set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costmoney() const;
  void _internal_set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earnMoney = 2;
  void clear_earnmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 earnmoney() const;
  void set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earnmoney() const;
  void _internal_set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SpecEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 costmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 earnmoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class StationBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.StationBase) */ {
 public:
  inline StationBase() : StationBase(nullptr) {}
  virtual ~StationBase();

  StationBase(const StationBase& from);
  StationBase(StationBase&& from) noexcept
    : StationBase() {
    *this = ::std::move(from);
  }

  inline StationBase& operator=(const StationBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline StationBase& operator=(StationBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StationBase& default_instance();

  static inline const StationBase* internal_default_instance() {
    return reinterpret_cast<const StationBase*>(
               &_StationBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(StationBase& a, StationBase& b) {
    a.Swap(&b);
  }
  inline void Swap(StationBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StationBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StationBase* New() const final {
    return CreateMaybeMessage<StationBase>(nullptr);
  }

  StationBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StationBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StationBase& from);
  void MergeFrom(const StationBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StationBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.StationBase";
  }
  protected:
  explicit StationBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 6,
    kRedPacketTicketFieldNumber = 14,
    kEffectInfoFieldNumber = 15,
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kUserScoreFieldNumber = 4,
    kChairIdxFieldNumber = 5,
    kIsOnlineFieldNumber = 3,
    kThroughFlagFieldNumber = 7,
    kDoubleFlagFieldNumber = 8,
    kPlayerIdFieldNumber = 9,
    kVipFieldNumber = 10,
    kTicketFieldNumber = 11,
    kEffectIdFieldNumber = 12,
    kTitleIdFieldNumber = 13,
    kWingsPropsIdFieldNumber = 16,
  };
  // string player_name = 6;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .BYDLD.Decimal red_packet_ticket = 14;
  bool has_red_packet_ticket() const;
  private:
  bool _internal_has_red_packet_ticket() const;
  public:
  void clear_red_packet_ticket();
  const ::BYDLD::Decimal& red_packet_ticket() const;
  ::BYDLD::Decimal* release_red_packet_ticket();
  ::BYDLD::Decimal* mutable_red_packet_ticket();
  void set_allocated_red_packet_ticket(::BYDLD::Decimal* red_packet_ticket);
  private:
  const ::BYDLD::Decimal& _internal_red_packet_ticket() const;
  ::BYDLD::Decimal* _internal_mutable_red_packet_ticket();
  public:
  void unsafe_arena_set_allocated_red_packet_ticket(
      ::BYDLD::Decimal* red_packet_ticket);
  ::BYDLD::Decimal* unsafe_arena_release_red_packet_ticket();

  // .BYDLD.EffectInfo effect_info = 15;
  bool has_effect_info() const;
  private:
  bool _internal_has_effect_info() const;
  public:
  void clear_effect_info();
  const ::BYDLD::EffectInfo& effect_info() const;
  ::BYDLD::EffectInfo* release_effect_info();
  ::BYDLD::EffectInfo* mutable_effect_info();
  void set_allocated_effect_info(::BYDLD::EffectInfo* effect_info);
  private:
  const ::BYDLD::EffectInfo& _internal_effect_info() const;
  ::BYDLD::EffectInfo* _internal_mutable_effect_info();
  public:
  void unsafe_arena_set_allocated_effect_info(
      ::BYDLD::EffectInfo* effect_info);
  ::BYDLD::EffectInfo* unsafe_arena_release_effect_info();

  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 user_score = 4;
  void clear_user_score();
  ::PROTOBUF_NAMESPACE_ID::int64 user_score() const;
  void set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_score() const;
  void _internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_idx = 5;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_online = 3;
  void clear_is_online();
  bool is_online() const;
  void set_is_online(bool value);
  private:
  bool _internal_is_online() const;
  void _internal_set_is_online(bool value);
  public:

  // bool through_flag = 7;
  void clear_through_flag();
  bool through_flag() const;
  void set_through_flag(bool value);
  private:
  bool _internal_through_flag() const;
  void _internal_set_through_flag(bool value);
  public:

  // bool double_flag = 8;
  void clear_double_flag();
  bool double_flag() const;
  void set_double_flag(bool value);
  private:
  bool _internal_double_flag() const;
  void _internal_set_double_flag(bool value);
  public:

  // int32 player_id = 9;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip = 10;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 11;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 effect_id = 12;
  void clear_effect_id();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id() const;
  void set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_id() const;
  void _internal_set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 title_id = 13;
  void clear_title_id();
  ::PROTOBUF_NAMESPACE_ID::int32 title_id() const;
  void set_title_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_title_id() const;
  void _internal_set_title_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wings_props_id = 16;
  void clear_wings_props_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_props_id() const;
  void set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_props_id() const;
  void _internal_set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.StationBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::BYDLD::Decimal* red_packet_ticket_;
  ::BYDLD::EffectInfo* effect_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool is_online_;
  bool through_flag_;
  bool double_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 title_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_props_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserReady PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserReady) */ {
 public:
  inline SCUserReady() : SCUserReady(nullptr) {}
  virtual ~SCUserReady();

  SCUserReady(const SCUserReady& from);
  SCUserReady(SCUserReady&& from) noexcept
    : SCUserReady() {
    *this = ::std::move(from);
  }

  inline SCUserReady& operator=(const SCUserReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserReady& operator=(SCUserReady&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserReady& default_instance();

  static inline const SCUserReady* internal_default_instance() {
    return reinterpret_cast<const SCUserReady*>(
               &_SCUserReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SCUserReady& a, SCUserReady& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserReady* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserReady* New() const final {
    return CreateMaybeMessage<SCUserReady>(nullptr);
  }

  SCUserReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserReady& from);
  void MergeFrom(const SCUserReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserReady";
  }
  protected:
  explicit SCUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationBaseListFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .BYDLD.StationBase station_base_list = 1;
  int station_base_list_size() const;
  private:
  int _internal_station_base_list_size() const;
  public:
  void clear_station_base_list();
  ::BYDLD::StationBase* mutable_station_base_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >*
      mutable_station_base_list();
  private:
  const ::BYDLD::StationBase& _internal_station_base_list(int index) const;
  ::BYDLD::StationBase* _internal_add_station_base_list();
  public:
  const ::BYDLD::StationBase& station_base_list(int index) const;
  ::BYDLD::StationBase* add_station_base_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >&
      station_base_list() const;

  // int32 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase > station_base_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class JadeAwardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.JadeAwardInfo) */ {
 public:
  inline JadeAwardInfo() : JadeAwardInfo(nullptr) {}
  virtual ~JadeAwardInfo();

  JadeAwardInfo(const JadeAwardInfo& from);
  JadeAwardInfo(JadeAwardInfo&& from) noexcept
    : JadeAwardInfo() {
    *this = ::std::move(from);
  }

  inline JadeAwardInfo& operator=(const JadeAwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JadeAwardInfo& operator=(JadeAwardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JadeAwardInfo& default_instance();

  static inline const JadeAwardInfo* internal_default_instance() {
    return reinterpret_cast<const JadeAwardInfo*>(
               &_JadeAwardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(JadeAwardInfo& a, JadeAwardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JadeAwardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JadeAwardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JadeAwardInfo* New() const final {
    return CreateMaybeMessage<JadeAwardInfo>(nullptr);
  }

  JadeAwardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JadeAwardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JadeAwardInfo& from);
  void MergeFrom(const JadeAwardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JadeAwardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.JadeAwardInfo";
  }
  protected:
  explicit JadeAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardNumFieldNumber = 1,
    kAwardRatioFieldNumber = 2,
    kAwardLevelFieldNumber = 3,
    kAwardTypeFieldNumber = 4,
  };
  // int32 award_num = 1;
  void clear_award_num();
  ::PROTOBUF_NAMESPACE_ID::int32 award_num() const;
  void set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_num() const;
  void _internal_set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_ratio = 2;
  void clear_award_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 award_ratio() const;
  void set_award_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_ratio() const;
  void _internal_set_award_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_level = 3;
  void clear_award_level();
  ::PROTOBUF_NAMESPACE_ID::int32 award_level() const;
  void set_award_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_level() const;
  void _internal_set_award_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_type = 4;
  void clear_award_type();
  ::PROTOBUF_NAMESPACE_ID::int32 award_type() const;
  void set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_type() const;
  void _internal_set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.JadeAwardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSJadeAwardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSJadeAwardInfo) */ {
 public:
  inline CSJadeAwardInfo() : CSJadeAwardInfo(nullptr) {}
  virtual ~CSJadeAwardInfo();

  CSJadeAwardInfo(const CSJadeAwardInfo& from);
  CSJadeAwardInfo(CSJadeAwardInfo&& from) noexcept
    : CSJadeAwardInfo() {
    *this = ::std::move(from);
  }

  inline CSJadeAwardInfo& operator=(const CSJadeAwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSJadeAwardInfo& operator=(CSJadeAwardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSJadeAwardInfo& default_instance();

  static inline const CSJadeAwardInfo* internal_default_instance() {
    return reinterpret_cast<const CSJadeAwardInfo*>(
               &_CSJadeAwardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CSJadeAwardInfo& a, CSJadeAwardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSJadeAwardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSJadeAwardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSJadeAwardInfo* New() const final {
    return CreateMaybeMessage<CSJadeAwardInfo>(nullptr);
  }

  CSJadeAwardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSJadeAwardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSJadeAwardInfo& from);
  void MergeFrom(const CSJadeAwardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSJadeAwardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSJadeAwardInfo";
  }
  protected:
  explicit CSJadeAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSJadeAwardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCJadeAwardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCJadeAwardInfo) */ {
 public:
  inline SCJadeAwardInfo() : SCJadeAwardInfo(nullptr) {}
  virtual ~SCJadeAwardInfo();

  SCJadeAwardInfo(const SCJadeAwardInfo& from);
  SCJadeAwardInfo(SCJadeAwardInfo&& from) noexcept
    : SCJadeAwardInfo() {
    *this = ::std::move(from);
  }

  inline SCJadeAwardInfo& operator=(const SCJadeAwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCJadeAwardInfo& operator=(SCJadeAwardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCJadeAwardInfo& default_instance();

  static inline const SCJadeAwardInfo* internal_default_instance() {
    return reinterpret_cast<const SCJadeAwardInfo*>(
               &_SCJadeAwardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SCJadeAwardInfo& a, SCJadeAwardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCJadeAwardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCJadeAwardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCJadeAwardInfo* New() const final {
    return CreateMaybeMessage<SCJadeAwardInfo>(nullptr);
  }

  SCJadeAwardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCJadeAwardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCJadeAwardInfo& from);
  void MergeFrom(const SCJadeAwardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCJadeAwardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCJadeAwardInfo";
  }
  protected:
  explicit SCJadeAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJadeAwardInfoFieldNumber = 1,
    kCritListFieldNumber = 2,
  };
  // repeated .BYDLD.JadeAwardInfo jade_award_info = 1;
  int jade_award_info_size() const;
  private:
  int _internal_jade_award_info_size() const;
  public:
  void clear_jade_award_info();
  ::BYDLD::JadeAwardInfo* mutable_jade_award_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::JadeAwardInfo >*
      mutable_jade_award_info();
  private:
  const ::BYDLD::JadeAwardInfo& _internal_jade_award_info(int index) const;
  ::BYDLD::JadeAwardInfo* _internal_add_jade_award_info();
  public:
  const ::BYDLD::JadeAwardInfo& jade_award_info(int index) const;
  ::BYDLD::JadeAwardInfo* add_jade_award_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::JadeAwardInfo >&
      jade_award_info() const;

  // repeated int32 crit_list = 2;
  int crit_list_size() const;
  private:
  int _internal_crit_list_size() const;
  public:
  void clear_crit_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_crit_list() const;
  void _internal_add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_crit_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 crit_list(int index) const;
  void set_crit_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      crit_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_crit_list();

  // @@protoc_insertion_point(class_scope:BYDLD.SCJadeAwardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::JadeAwardInfo > jade_award_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > crit_list_;
  mutable std::atomic<int> _crit_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSNotifyLogout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSNotifyLogout) */ {
 public:
  inline CSNotifyLogout() : CSNotifyLogout(nullptr) {}
  virtual ~CSNotifyLogout();

  CSNotifyLogout(const CSNotifyLogout& from);
  CSNotifyLogout(CSNotifyLogout&& from) noexcept
    : CSNotifyLogout() {
    *this = ::std::move(from);
  }

  inline CSNotifyLogout& operator=(const CSNotifyLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNotifyLogout& operator=(CSNotifyLogout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSNotifyLogout& default_instance();

  static inline const CSNotifyLogout* internal_default_instance() {
    return reinterpret_cast<const CSNotifyLogout*>(
               &_CSNotifyLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CSNotifyLogout& a, CSNotifyLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNotifyLogout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNotifyLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSNotifyLogout* New() const final {
    return CreateMaybeMessage<CSNotifyLogout>(nullptr);
  }

  CSNotifyLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSNotifyLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSNotifyLogout& from);
  void MergeFrom(const CSNotifyLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNotifyLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSNotifyLogout";
  }
  protected:
  explicit CSNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSNotifyLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCNotifyLogout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCNotifyLogout) */ {
 public:
  inline SCNotifyLogout() : SCNotifyLogout(nullptr) {}
  virtual ~SCNotifyLogout();

  SCNotifyLogout(const SCNotifyLogout& from);
  SCNotifyLogout(SCNotifyLogout&& from) noexcept
    : SCNotifyLogout() {
    *this = ::std::move(from);
  }

  inline SCNotifyLogout& operator=(const SCNotifyLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNotifyLogout& operator=(SCNotifyLogout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNotifyLogout& default_instance();

  static inline const SCNotifyLogout* internal_default_instance() {
    return reinterpret_cast<const SCNotifyLogout*>(
               &_SCNotifyLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SCNotifyLogout& a, SCNotifyLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNotifyLogout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNotifyLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNotifyLogout* New() const final {
    return CreateMaybeMessage<SCNotifyLogout>(nullptr);
  }

  SCNotifyLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNotifyLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNotifyLogout& from);
  void MergeFrom(const SCNotifyLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNotifyLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCNotifyLogout";
  }
  protected:
  explicit SCNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCNotifyLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSetProbability PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSetProbability) */ {
 public:
  inline CSSetProbability() : CSSetProbability(nullptr) {}
  virtual ~CSSetProbability();

  CSSetProbability(const CSSetProbability& from);
  CSSetProbability(CSSetProbability&& from) noexcept
    : CSSetProbability() {
    *this = ::std::move(from);
  }

  inline CSSetProbability& operator=(const CSSetProbability& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetProbability& operator=(CSSetProbability&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetProbability& default_instance();

  static inline const CSSetProbability* internal_default_instance() {
    return reinterpret_cast<const CSSetProbability*>(
               &_CSSetProbability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CSSetProbability& a, CSSetProbability& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetProbability* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetProbability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetProbability* New() const final {
    return CreateMaybeMessage<CSSetProbability>(nullptr);
  }

  CSSetProbability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetProbability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetProbability& from);
  void MergeFrom(const CSSetProbability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetProbability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSetProbability";
  }
  protected:
  explicit CSSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kIsUseAutoFieldNumber = 3,
  };
  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_use_auto = 3;
  void clear_is_use_auto();
  bool is_use_auto() const;
  void set_is_use_auto(bool value);
  private:
  bool _internal_is_use_auto() const;
  void _internal_set_is_use_auto(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSetProbability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  bool is_use_auto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSetProbability PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSetProbability) */ {
 public:
  inline SCSetProbability() : SCSetProbability(nullptr) {}
  virtual ~SCSetProbability();

  SCSetProbability(const SCSetProbability& from);
  SCSetProbability(SCSetProbability&& from) noexcept
    : SCSetProbability() {
    *this = ::std::move(from);
  }

  inline SCSetProbability& operator=(const SCSetProbability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetProbability& operator=(SCSetProbability&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetProbability& default_instance();

  static inline const SCSetProbability* internal_default_instance() {
    return reinterpret_cast<const SCSetProbability*>(
               &_SCSetProbability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SCSetProbability& a, SCSetProbability& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetProbability* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetProbability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetProbability* New() const final {
    return CreateMaybeMessage<SCSetProbability>(nullptr);
  }

  SCSetProbability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetProbability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetProbability& from);
  void MergeFrom(const SCSetProbability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetProbability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSetProbability";
  }
  protected:
  explicit SCSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kGunRatioFieldNumber = 2,
    kGunLevelFieldNumber = 3,
    kIsUnlockFieldNumber = 4,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_ratio = 2;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 3;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_unlock = 4;
  void clear_is_unlock();
  bool is_unlock() const;
  void set_is_unlock(bool value);
  private:
  bool _internal_is_unlock() const;
  void _internal_set_is_unlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSetProbability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  bool is_unlock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UserShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UserShoot) */ {
 public:
  inline UserShoot() : UserShoot(nullptr) {}
  virtual ~UserShoot();

  UserShoot(const UserShoot& from);
  UserShoot(UserShoot&& from) noexcept
    : UserShoot() {
    *this = ::std::move(from);
  }

  inline UserShoot& operator=(const UserShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserShoot& operator=(UserShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserShoot& default_instance();

  static inline const UserShoot* internal_default_instance() {
    return reinterpret_cast<const UserShoot*>(
               &_UserShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(UserShoot& a, UserShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(UserShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserShoot* New() const final {
    return CreateMaybeMessage<UserShoot>(nullptr);
  }

  UserShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserShoot& from);
  void MergeFrom(const UserShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UserShoot";
  }
  protected:
  explicit UserShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kBulletIdFieldNumber = 2,
    kRatioFieldNumber = 3,
    kIsDoubleFieldNumber = 4,
    kIsThroughFieldNumber = 5,
    kIsFreeTimeFieldNumber = 6,
    kBulletTypeFieldNumber = 7,
    kXFieldNumber = 8,
    kYFieldNumber = 9,
  };
  // int32 angle = 1;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_id = 2;
  void clear_bullet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id() const;
  void set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id() const;
  void _internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_double = 4;
  void clear_is_double();
  bool is_double() const;
  void set_is_double(bool value);
  private:
  bool _internal_is_double() const;
  void _internal_set_is_double(bool value);
  public:

  // bool is_through = 5;
  void clear_is_through();
  bool is_through() const;
  void set_is_through(bool value);
  private:
  bool _internal_is_through() const;
  void _internal_set_is_through(bool value);
  public:

  // bool is_free_time = 6;
  void clear_is_free_time();
  bool is_free_time() const;
  void set_is_free_time(bool value);
  private:
  bool _internal_is_free_time() const;
  void _internal_set_is_free_time(bool value);
  public:

  // int32 bullet_type = 7;
  void clear_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type() const;
  void set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_type() const;
  void _internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 8;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 9;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.UserShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  bool is_double_;
  bool is_through_;
  bool is_free_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserShootMulti PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserShootMulti) */ {
 public:
  inline CSUserShootMulti() : CSUserShootMulti(nullptr) {}
  virtual ~CSUserShootMulti();

  CSUserShootMulti(const CSUserShootMulti& from);
  CSUserShootMulti(CSUserShootMulti&& from) noexcept
    : CSUserShootMulti() {
    *this = ::std::move(from);
  }

  inline CSUserShootMulti& operator=(const CSUserShootMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserShootMulti& operator=(CSUserShootMulti&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserShootMulti& default_instance();

  static inline const CSUserShootMulti* internal_default_instance() {
    return reinterpret_cast<const CSUserShootMulti*>(
               &_CSUserShootMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CSUserShootMulti& a, CSUserShootMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserShootMulti* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserShootMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserShootMulti* New() const final {
    return CreateMaybeMessage<CSUserShootMulti>(nullptr);
  }

  CSUserShootMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserShootMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserShootMulti& from);
  void MergeFrom(const CSUserShootMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserShootMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserShootMulti";
  }
  protected:
  explicit CSUserShootMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShootBulletFieldNumber = 1,
  };
  // repeated .BYDLD.UserShoot shoot_bullet = 1;
  int shoot_bullet_size() const;
  private:
  int _internal_shoot_bullet_size() const;
  public:
  void clear_shoot_bullet();
  ::BYDLD::UserShoot* mutable_shoot_bullet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShoot >*
      mutable_shoot_bullet();
  private:
  const ::BYDLD::UserShoot& _internal_shoot_bullet(int index) const;
  ::BYDLD::UserShoot* _internal_add_shoot_bullet();
  public:
  const ::BYDLD::UserShoot& shoot_bullet(int index) const;
  ::BYDLD::UserShoot* add_shoot_bullet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShoot >&
      shoot_bullet() const;

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserShootMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShoot > shoot_bullet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UserShootRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UserShootRsp) */ {
 public:
  inline UserShootRsp() : UserShootRsp(nullptr) {}
  virtual ~UserShootRsp();

  UserShootRsp(const UserShootRsp& from);
  UserShootRsp(UserShootRsp&& from) noexcept
    : UserShootRsp() {
    *this = ::std::move(from);
  }

  inline UserShootRsp& operator=(const UserShootRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserShootRsp& operator=(UserShootRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserShootRsp& default_instance();

  static inline const UserShootRsp* internal_default_instance() {
    return reinterpret_cast<const UserShootRsp*>(
               &_UserShootRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UserShootRsp& a, UserShootRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserShootRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserShootRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserShootRsp* New() const final {
    return CreateMaybeMessage<UserShootRsp>(nullptr);
  }

  UserShootRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserShootRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserShootRsp& from);
  void MergeFrom(const UserShootRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserShootRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UserShootRsp";
  }
  protected:
  explicit UserShootRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kBulletTypeFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 angle = 1;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_type = 2;
  void clear_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type() const;
  void set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_type() const;
  void _internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.UserShootRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserShootMulti PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserShootMulti) */ {
 public:
  inline SCUserShootMulti() : SCUserShootMulti(nullptr) {}
  virtual ~SCUserShootMulti();

  SCUserShootMulti(const SCUserShootMulti& from);
  SCUserShootMulti(SCUserShootMulti&& from) noexcept
    : SCUserShootMulti() {
    *this = ::std::move(from);
  }

  inline SCUserShootMulti& operator=(const SCUserShootMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserShootMulti& operator=(SCUserShootMulti&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserShootMulti& default_instance();

  static inline const SCUserShootMulti* internal_default_instance() {
    return reinterpret_cast<const SCUserShootMulti*>(
               &_SCUserShootMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SCUserShootMulti& a, SCUserShootMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserShootMulti* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserShootMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserShootMulti* New() const final {
    return CreateMaybeMessage<SCUserShootMulti>(nullptr);
  }

  SCUserShootMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserShootMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserShootMulti& from);
  void MergeFrom(const SCUserShootMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserShootMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserShootMulti";
  }
  protected:
  explicit SCUserShootMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBulletInfoFieldNumber = 2,
    kScoreFieldNumber = 3,
    kChairIdxFieldNumber = 1,
  };
  // repeated .BYDLD.UserShootRsp bullet_info = 2;
  int bullet_info_size() const;
  private:
  int _internal_bullet_info_size() const;
  public:
  void clear_bullet_info();
  ::BYDLD::UserShootRsp* mutable_bullet_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShootRsp >*
      mutable_bullet_info();
  private:
  const ::BYDLD::UserShootRsp& _internal_bullet_info(int index) const;
  ::BYDLD::UserShootRsp* _internal_add_bullet_info();
  public:
  const ::BYDLD::UserShootRsp& bullet_info(int index) const;
  ::BYDLD::UserShootRsp* add_bullet_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShootRsp >&
      bullet_info() const;

  // int64 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserShootMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShootRsp > bullet_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class HitFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.HitFish) */ {
 public:
  inline HitFish() : HitFish(nullptr) {}
  virtual ~HitFish();

  HitFish(const HitFish& from);
  HitFish(HitFish&& from) noexcept
    : HitFish() {
    *this = ::std::move(from);
  }

  inline HitFish& operator=(const HitFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitFish& operator=(HitFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HitFish& default_instance();

  static inline const HitFish* internal_default_instance() {
    return reinterpret_cast<const HitFish*>(
               &_HitFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(HitFish& a, HitFish& b) {
    a.Swap(&b);
  }
  inline void Swap(HitFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HitFish* New() const final {
    return CreateMaybeMessage<HitFish>(nullptr);
  }

  HitFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HitFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HitFish& from);
  void MergeFrom(const HitFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.HitFish";
  }
  protected:
  explicit HitFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectFishUidFieldNumber = 5,
    kFishUidFieldNumber = 1,
    kBulletIdFieldNumber = 2,
    kThroughIdxFieldNumber = 3,
    kFishIdFieldNumber = 4,
    kRoundFieldNumber = 6,
    kRatioFieldNumber = 7,
    kBulletTypeFieldNumber = 8,
  };
  // repeated int32 effect_fish_uid = 5;
  int effect_fish_uid_size() const;
  private:
  int _internal_effect_fish_uid_size() const;
  public:
  void clear_effect_fish_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_fish_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_effect_fish_uid() const;
  void _internal_add_effect_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_effect_fish_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 effect_fish_uid(int index) const;
  void set_effect_fish_uid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_effect_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      effect_fish_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_effect_fish_uid();

  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_id = 2;
  void clear_bullet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id() const;
  void set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id() const;
  void _internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 through_idx = 3;
  void clear_through_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 through_idx() const;
  void set_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_through_idx() const;
  void _internal_set_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_id = 4;
  void clear_fish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id() const;
  void set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id() const;
  void _internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 round = 6;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 7;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_type = 8;
  void clear_bullet_type();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type() const;
  void set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_type() const;
  void _internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.HitFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > effect_fish_uid_;
  mutable std::atomic<int> _effect_fish_uid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 through_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHitMultiFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHitMultiFish) */ {
 public:
  inline CSHitMultiFish() : CSHitMultiFish(nullptr) {}
  virtual ~CSHitMultiFish();

  CSHitMultiFish(const CSHitMultiFish& from);
  CSHitMultiFish(CSHitMultiFish&& from) noexcept
    : CSHitMultiFish() {
    *this = ::std::move(from);
  }

  inline CSHitMultiFish& operator=(const CSHitMultiFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHitMultiFish& operator=(CSHitMultiFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHitMultiFish& default_instance();

  static inline const CSHitMultiFish* internal_default_instance() {
    return reinterpret_cast<const CSHitMultiFish*>(
               &_CSHitMultiFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CSHitMultiFish& a, CSHitMultiFish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHitMultiFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHitMultiFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHitMultiFish* New() const final {
    return CreateMaybeMessage<CSHitMultiFish>(nullptr);
  }

  CSHitMultiFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHitMultiFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHitMultiFish& from);
  void MergeFrom(const CSHitMultiFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHitMultiFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHitMultiFish";
  }
  protected:
  explicit CSHitMultiFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitInfoFieldNumber = 1,
  };
  // repeated .BYDLD.HitFish hit_info = 1;
  int hit_info_size() const;
  private:
  int _internal_hit_info_size() const;
  public:
  void clear_hit_info();
  ::BYDLD::HitFish* mutable_hit_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HitFish >*
      mutable_hit_info();
  private:
  const ::BYDLD::HitFish& _internal_hit_info(int index) const;
  ::BYDLD::HitFish* _internal_add_hit_info();
  public:
  const ::BYDLD::HitFish& hit_info(int index) const;
  ::BYDLD::HitFish* add_hit_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HitFish >&
      hit_info() const;

  // @@protoc_insertion_point(class_scope:BYDLD.CSHitMultiFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HitFish > hit_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class EffectFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.EffectFish) */ {
 public:
  inline EffectFish() : EffectFish(nullptr) {}
  virtual ~EffectFish();

  EffectFish(const EffectFish& from);
  EffectFish(EffectFish&& from) noexcept
    : EffectFish() {
    *this = ::std::move(from);
  }

  inline EffectFish& operator=(const EffectFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectFish& operator=(EffectFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EffectFish& default_instance();

  static inline const EffectFish* internal_default_instance() {
    return reinterpret_cast<const EffectFish*>(
               &_EffectFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(EffectFish& a, EffectFish& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EffectFish* New() const final {
    return CreateMaybeMessage<EffectFish>(nullptr);
  }

  EffectFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EffectFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EffectFish& from);
  void MergeFrom(const EffectFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.EffectFish";
  }
  protected:
  explicit EffectFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.EffectFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class DragonBallWheelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.DragonBallWheelInfo) */ {
 public:
  inline DragonBallWheelInfo() : DragonBallWheelInfo(nullptr) {}
  virtual ~DragonBallWheelInfo();

  DragonBallWheelInfo(const DragonBallWheelInfo& from);
  DragonBallWheelInfo(DragonBallWheelInfo&& from) noexcept
    : DragonBallWheelInfo() {
    *this = ::std::move(from);
  }

  inline DragonBallWheelInfo& operator=(const DragonBallWheelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DragonBallWheelInfo& operator=(DragonBallWheelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DragonBallWheelInfo& default_instance();

  static inline const DragonBallWheelInfo* internal_default_instance() {
    return reinterpret_cast<const DragonBallWheelInfo*>(
               &_DragonBallWheelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DragonBallWheelInfo& a, DragonBallWheelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DragonBallWheelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DragonBallWheelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DragonBallWheelInfo* New() const final {
    return CreateMaybeMessage<DragonBallWheelInfo>(nullptr);
  }

  DragonBallWheelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DragonBallWheelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DragonBallWheelInfo& from);
  void MergeFrom(const DragonBallWheelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DragonBallWheelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.DragonBallWheelInfo";
  }
  protected:
  explicit DragonBallWheelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
    kNextFieldNumber = 2,
  };
  // repeated int32 ratio = 1;
  int ratio_size() const;
  private:
  int _internal_ratio_size() const;
  public:
  void clear_ratio();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ratio() const;
  void _internal_add_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ratio();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ratio(int index) const;
  void set_ratio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ratio();

  // repeated int32 next = 2;
  int next_size() const;
  private:
  int _internal_next_size() const;
  public:
  void clear_next();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_next() const;
  void _internal_add_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_next();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 next(int index) const;
  void set_next(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      next() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_next();

  // @@protoc_insertion_point(class_scope:BYDLD.DragonBallWheelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ratio_;
  mutable std::atomic<int> _ratio_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > next_;
  mutable std::atomic<int> _next_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class DragonBallInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.DragonBallInfo) */ {
 public:
  inline DragonBallInfo() : DragonBallInfo(nullptr) {}
  virtual ~DragonBallInfo();

  DragonBallInfo(const DragonBallInfo& from);
  DragonBallInfo(DragonBallInfo&& from) noexcept
    : DragonBallInfo() {
    *this = ::std::move(from);
  }

  inline DragonBallInfo& operator=(const DragonBallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DragonBallInfo& operator=(DragonBallInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DragonBallInfo& default_instance();

  static inline const DragonBallInfo* internal_default_instance() {
    return reinterpret_cast<const DragonBallInfo*>(
               &_DragonBallInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DragonBallInfo& a, DragonBallInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DragonBallInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DragonBallInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DragonBallInfo* New() const final {
    return CreateMaybeMessage<DragonBallInfo>(nullptr);
  }

  DragonBallInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DragonBallInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DragonBallInfo& from);
  void MergeFrom(const DragonBallInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DragonBallInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.DragonBallInfo";
  }
  protected:
  explicit DragonBallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardRatioFieldNumber = 3,
    kWheelInfoFieldNumber = 4,
    kBaseRatioFieldNumber = 1,
    kWheelFieldNumber = 2,
  };
  // repeated int32 awardRatio = 3;
  int awardratio_size() const;
  private:
  int _internal_awardratio_size() const;
  public:
  void clear_awardratio();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_awardratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_awardratio() const;
  void _internal_add_awardratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_awardratio();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 awardratio(int index) const;
  void set_awardratio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_awardratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      awardratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_awardratio();

  // repeated .BYDLD.DragonBallWheelInfo wheelInfo = 4;
  int wheelinfo_size() const;
  private:
  int _internal_wheelinfo_size() const;
  public:
  void clear_wheelinfo();
  ::BYDLD::DragonBallWheelInfo* mutable_wheelinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallWheelInfo >*
      mutable_wheelinfo();
  private:
  const ::BYDLD::DragonBallWheelInfo& _internal_wheelinfo(int index) const;
  ::BYDLD::DragonBallWheelInfo* _internal_add_wheelinfo();
  public:
  const ::BYDLD::DragonBallWheelInfo& wheelinfo(int index) const;
  ::BYDLD::DragonBallWheelInfo* add_wheelinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallWheelInfo >&
      wheelinfo() const;

  // int32 base_ratio = 1;
  void clear_base_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 base_ratio() const;
  void set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base_ratio() const;
  void _internal_set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wheel = 2;
  void clear_wheel();
  ::PROTOBUF_NAMESPACE_ID::int32 wheel() const;
  void set_wheel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel() const;
  void _internal_set_wheel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.DragonBallInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > awardratio_;
  mutable std::atomic<int> _awardratio_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallWheelInfo > wheelinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class OctopusKingItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.OctopusKingItem) */ {
 public:
  inline OctopusKingItem() : OctopusKingItem(nullptr) {}
  virtual ~OctopusKingItem();

  OctopusKingItem(const OctopusKingItem& from);
  OctopusKingItem(OctopusKingItem&& from) noexcept
    : OctopusKingItem() {
    *this = ::std::move(from);
  }

  inline OctopusKingItem& operator=(const OctopusKingItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OctopusKingItem& operator=(OctopusKingItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OctopusKingItem& default_instance();

  static inline const OctopusKingItem* internal_default_instance() {
    return reinterpret_cast<const OctopusKingItem*>(
               &_OctopusKingItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(OctopusKingItem& a, OctopusKingItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OctopusKingItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OctopusKingItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OctopusKingItem* New() const final {
    return CreateMaybeMessage<OctopusKingItem>(nullptr);
  }

  OctopusKingItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OctopusKingItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OctopusKingItem& from);
  void MergeFrom(const OctopusKingItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OctopusKingItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.OctopusKingItem";
  }
  protected:
  explicit OctopusKingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectListFieldNumber = 2,
    kSelectedMultipleFieldNumber = 1,
  };
  // repeated int32 selectList = 2;
  int selectlist_size() const;
  private:
  int _internal_selectlist_size() const;
  public:
  void clear_selectlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selectlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_selectlist() const;
  void _internal_add_selectlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_selectlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 selectlist(int index) const;
  void set_selectlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_selectlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      selectlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_selectlist();

  // int32 selectedMultiple = 1;
  void clear_selectedmultiple();
  ::PROTOBUF_NAMESPACE_ID::int32 selectedmultiple() const;
  void set_selectedmultiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selectedmultiple() const;
  void _internal_set_selectedmultiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.OctopusKingItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > selectlist_;
  mutable std::atomic<int> _selectlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 selectedmultiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class OctopusKingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.OctopusKingInfo) */ {
 public:
  inline OctopusKingInfo() : OctopusKingInfo(nullptr) {}
  virtual ~OctopusKingInfo();

  OctopusKingInfo(const OctopusKingInfo& from);
  OctopusKingInfo(OctopusKingInfo&& from) noexcept
    : OctopusKingInfo() {
    *this = ::std::move(from);
  }

  inline OctopusKingInfo& operator=(const OctopusKingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OctopusKingInfo& operator=(OctopusKingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OctopusKingInfo& default_instance();

  static inline const OctopusKingInfo* internal_default_instance() {
    return reinterpret_cast<const OctopusKingInfo*>(
               &_OctopusKingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(OctopusKingInfo& a, OctopusKingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OctopusKingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OctopusKingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OctopusKingInfo* New() const final {
    return CreateMaybeMessage<OctopusKingInfo>(nullptr);
  }

  OctopusKingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OctopusKingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OctopusKingInfo& from);
  void MergeFrom(const OctopusKingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OctopusKingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.OctopusKingInfo";
  }
  protected:
  explicit OctopusKingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplesFieldNumber = 1,
  };
  // repeated .BYDLD.OctopusKingItem multiples = 1;
  int multiples_size() const;
  private:
  int _internal_multiples_size() const;
  public:
  void clear_multiples();
  ::BYDLD::OctopusKingItem* mutable_multiples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OctopusKingItem >*
      mutable_multiples();
  private:
  const ::BYDLD::OctopusKingItem& _internal_multiples(int index) const;
  ::BYDLD::OctopusKingItem* _internal_add_multiples();
  public:
  const ::BYDLD::OctopusKingItem& multiples(int index) const;
  ::BYDLD::OctopusKingItem* add_multiples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OctopusKingItem >&
      multiples() const;

  // @@protoc_insertion_point(class_scope:BYDLD.OctopusKingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OctopusKingItem > multiples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class MagicCardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.MagicCardInfo) */ {
 public:
  inline MagicCardInfo() : MagicCardInfo(nullptr) {}
  virtual ~MagicCardInfo();

  MagicCardInfo(const MagicCardInfo& from);
  MagicCardInfo(MagicCardInfo&& from) noexcept
    : MagicCardInfo() {
    *this = ::std::move(from);
  }

  inline MagicCardInfo& operator=(const MagicCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagicCardInfo& operator=(MagicCardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MagicCardInfo& default_instance();

  static inline const MagicCardInfo* internal_default_instance() {
    return reinterpret_cast<const MagicCardInfo*>(
               &_MagicCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(MagicCardInfo& a, MagicCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MagicCardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagicCardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MagicCardInfo* New() const final {
    return CreateMaybeMessage<MagicCardInfo>(nullptr);
  }

  MagicCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MagicCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MagicCardInfo& from);
  void MergeFrom(const MagicCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagicCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.MagicCardInfo";
  }
  protected:
  explicit MagicCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardIdFieldNumber = 1,
    kValueFieldNumber = 2,
    kLabelFieldNumber = 3,
  };
  // int32 cardId = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 label = 3;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.MagicCardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class MagicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.MagicInfo) */ {
 public:
  inline MagicInfo() : MagicInfo(nullptr) {}
  virtual ~MagicInfo();

  MagicInfo(const MagicInfo& from);
  MagicInfo(MagicInfo&& from) noexcept
    : MagicInfo() {
    *this = ::std::move(from);
  }

  inline MagicInfo& operator=(const MagicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagicInfo& operator=(MagicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MagicInfo& default_instance();

  static inline const MagicInfo* internal_default_instance() {
    return reinterpret_cast<const MagicInfo*>(
               &_MagicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(MagicInfo& a, MagicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MagicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MagicInfo* New() const final {
    return CreateMaybeMessage<MagicInfo>(nullptr);
  }

  MagicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MagicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MagicInfo& from);
  void MergeFrom(const MagicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.MagicInfo";
  }
  protected:
  explicit MagicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicCardListFieldNumber = 2,
    kRatioCardFieldNumber = 1,
  };
  // repeated .BYDLD.MagicCardInfo magicCardList = 2;
  int magiccardlist_size() const;
  private:
  int _internal_magiccardlist_size() const;
  public:
  void clear_magiccardlist();
  ::BYDLD::MagicCardInfo* mutable_magiccardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >*
      mutable_magiccardlist();
  private:
  const ::BYDLD::MagicCardInfo& _internal_magiccardlist(int index) const;
  ::BYDLD::MagicCardInfo* _internal_add_magiccardlist();
  public:
  const ::BYDLD::MagicCardInfo& magiccardlist(int index) const;
  ::BYDLD::MagicCardInfo* add_magiccardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >&
      magiccardlist() const;

  // int32 ratioCard = 1;
  void clear_ratiocard();
  ::PROTOBUF_NAMESPACE_ID::int32 ratiocard() const;
  void set_ratiocard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratiocard() const;
  void _internal_set_ratiocard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.MagicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo > magiccardlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratiocard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class roulette_result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.roulette_result) */ {
 public:
  inline roulette_result() : roulette_result(nullptr) {}
  virtual ~roulette_result();

  roulette_result(const roulette_result& from);
  roulette_result(roulette_result&& from) noexcept
    : roulette_result() {
    *this = ::std::move(from);
  }

  inline roulette_result& operator=(const roulette_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline roulette_result& operator=(roulette_result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const roulette_result& default_instance();

  static inline const roulette_result* internal_default_instance() {
    return reinterpret_cast<const roulette_result*>(
               &_roulette_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(roulette_result& a, roulette_result& b) {
    a.Swap(&b);
  }
  inline void Swap(roulette_result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(roulette_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline roulette_result* New() const final {
    return CreateMaybeMessage<roulette_result>(nullptr);
  }

  roulette_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<roulette_result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const roulette_result& from);
  void MergeFrom(const roulette_result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(roulette_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.roulette_result";
  }
  protected:
  explicit roulette_result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLocationFieldNumber = 2,
    kMultipleFieldNumber = 3,
    kCritFieldNumber = 4,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 location = 2;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 3;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 crit = 4;
  void clear_crit();
  ::PROTOBUF_NAMESPACE_ID::int32 crit() const;
  void set_crit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit() const;
  void _internal_set_crit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.roulette_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 crit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class zeus_result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.zeus_result) */ {
 public:
  inline zeus_result() : zeus_result(nullptr) {}
  virtual ~zeus_result();

  zeus_result(const zeus_result& from);
  zeus_result(zeus_result&& from) noexcept
    : zeus_result() {
    *this = ::std::move(from);
  }

  inline zeus_result& operator=(const zeus_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline zeus_result& operator=(zeus_result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const zeus_result& default_instance();

  static inline const zeus_result* internal_default_instance() {
    return reinterpret_cast<const zeus_result*>(
               &_zeus_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(zeus_result& a, zeus_result& b) {
    a.Swap(&b);
  }
  inline void Swap(zeus_result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(zeus_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline zeus_result* New() const final {
    return CreateMaybeMessage<zeus_result>(nullptr);
  }

  zeus_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<zeus_result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const zeus_result& from);
  void MergeFrom(const zeus_result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(zeus_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.zeus_result";
  }
  protected:
  explicit zeus_result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutFieldNumber = 2,
    kResultFieldNumber = 3,
    kTypeFieldNumber = 1,
    kPoolIdFieldNumber = 4,
  };
  // repeated int32 layout = 2;
  int layout_size() const;
  private:
  int _internal_layout_size() const;
  public:
  void clear_layout();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layout(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_layout() const;
  void _internal_add_layout(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_layout();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 layout(int index) const;
  void set_layout(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_layout(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      layout() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_layout();

  // repeated .BYDLD.roulette_result result = 3;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::BYDLD::roulette_result* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::roulette_result >*
      mutable_result();
  private:
  const ::BYDLD::roulette_result& _internal_result(int index) const;
  ::BYDLD::roulette_result* _internal_add_result();
  public:
  const ::BYDLD::roulette_result& result(int index) const;
  ::BYDLD::roulette_result* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::roulette_result >&
      result() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pool_id = 4;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::int32 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.zeus_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > layout_;
  mutable std::atomic<int> _layout_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::roulette_result > result_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pool_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Zeus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Zeus) */ {
 public:
  inline Zeus() : Zeus(nullptr) {}
  virtual ~Zeus();

  Zeus(const Zeus& from);
  Zeus(Zeus&& from) noexcept
    : Zeus() {
    *this = ::std::move(from);
  }

  inline Zeus& operator=(const Zeus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zeus& operator=(Zeus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Zeus& default_instance();

  static inline const Zeus* internal_default_instance() {
    return reinterpret_cast<const Zeus*>(
               &_Zeus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Zeus& a, Zeus& b) {
    a.Swap(&b);
  }
  inline void Swap(Zeus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zeus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Zeus* New() const final {
    return CreateMaybeMessage<Zeus>(nullptr);
  }

  Zeus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Zeus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Zeus& from);
  void MergeFrom(const Zeus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zeus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Zeus";
  }
  protected:
  explicit Zeus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTotalMultipleFieldNumber = 2,
  };
  // repeated .BYDLD.zeus_result result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::BYDLD::zeus_result* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::zeus_result >*
      mutable_result();
  private:
  const ::BYDLD::zeus_result& _internal_result(int index) const;
  ::BYDLD::zeus_result* _internal_add_result();
  public:
  const ::BYDLD::zeus_result& result(int index) const;
  ::BYDLD::zeus_result* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::zeus_result >&
      result() const;

  // int32 total_multiple = 2;
  void clear_total_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 total_multiple() const;
  void set_total_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_multiple() const;
  void _internal_set_total_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Zeus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::zeus_result > result_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class GemConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.GemConfig) */ {
 public:
  inline GemConfig() : GemConfig(nullptr) {}
  virtual ~GemConfig();

  GemConfig(const GemConfig& from);
  GemConfig(GemConfig&& from) noexcept
    : GemConfig() {
    *this = ::std::move(from);
  }

  inline GemConfig& operator=(const GemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GemConfig& operator=(GemConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GemConfig& default_instance();

  static inline const GemConfig* internal_default_instance() {
    return reinterpret_cast<const GemConfig*>(
               &_GemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GemConfig& a, GemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GemConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GemConfig* New() const final {
    return CreateMaybeMessage<GemConfig>(nullptr);
  }

  GemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GemConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GemConfig& from);
  void MergeFrom(const GemConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GemConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.GemConfig";
  }
  protected:
  explicit GemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMultipleFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 2;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.GemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCGemConfigList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCGemConfigList) */ {
 public:
  inline SCGemConfigList() : SCGemConfigList(nullptr) {}
  virtual ~SCGemConfigList();

  SCGemConfigList(const SCGemConfigList& from);
  SCGemConfigList(SCGemConfigList&& from) noexcept
    : SCGemConfigList() {
    *this = ::std::move(from);
  }

  inline SCGemConfigList& operator=(const SCGemConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGemConfigList& operator=(SCGemConfigList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGemConfigList& default_instance();

  static inline const SCGemConfigList* internal_default_instance() {
    return reinterpret_cast<const SCGemConfigList*>(
               &_SCGemConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SCGemConfigList& a, SCGemConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGemConfigList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGemConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGemConfigList* New() const final {
    return CreateMaybeMessage<SCGemConfigList>(nullptr);
  }

  SCGemConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGemConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGemConfigList& from);
  void MergeFrom(const SCGemConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGemConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCGemConfigList";
  }
  protected:
  explicit SCGemConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemConfigListFieldNumber = 1,
    kCriticalConfigListFieldNumber = 2,
  };
  // repeated .BYDLD.GemConfig gem_config_list = 1;
  int gem_config_list_size() const;
  private:
  int _internal_gem_config_list_size() const;
  public:
  void clear_gem_config_list();
  ::BYDLD::GemConfig* mutable_gem_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GemConfig >*
      mutable_gem_config_list();
  private:
  const ::BYDLD::GemConfig& _internal_gem_config_list(int index) const;
  ::BYDLD::GemConfig* _internal_add_gem_config_list();
  public:
  const ::BYDLD::GemConfig& gem_config_list(int index) const;
  ::BYDLD::GemConfig* add_gem_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GemConfig >&
      gem_config_list() const;

  // repeated int32 critical_config_list = 2;
  int critical_config_list_size() const;
  private:
  int _internal_critical_config_list_size() const;
  public:
  void clear_critical_config_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_critical_config_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_critical_config_list() const;
  void _internal_add_critical_config_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_critical_config_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 critical_config_list(int index) const;
  void set_critical_config_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_critical_config_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      critical_config_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_critical_config_list();

  // @@protoc_insertion_point(class_scope:BYDLD.SCGemConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GemConfig > gem_config_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > critical_config_list_;
  mutable std::atomic<int> _critical_config_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class ItemWheel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.ItemWheel) */ {
 public:
  inline ItemWheel() : ItemWheel(nullptr) {}
  virtual ~ItemWheel();

  ItemWheel(const ItemWheel& from);
  ItemWheel(ItemWheel&& from) noexcept
    : ItemWheel() {
    *this = ::std::move(from);
  }

  inline ItemWheel& operator=(const ItemWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemWheel& operator=(ItemWheel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemWheel& default_instance();

  static inline const ItemWheel* internal_default_instance() {
    return reinterpret_cast<const ItemWheel*>(
               &_ItemWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ItemWheel& a, ItemWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemWheel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemWheel* New() const final {
    return CreateMaybeMessage<ItemWheel>(nullptr);
  }

  ItemWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemWheel& from);
  void MergeFrom(const ItemWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.ItemWheel";
  }
  protected:
  explicit ItemWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 3,
    kResultListFieldNumber = 4,
    kWheelIdFieldNumber = 1,
    kWheelLevelFieldNumber = 2,
    kWheelMultiFieldNumber = 5,
    kAwardNumFieldNumber = 6,
    kAwardTypeFieldNumber = 7,
  };
  // repeated int32 item_list = 3;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_item_list() const;
  void _internal_add_item_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_item_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 item_list(int index) const;
  void set_item_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_item_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      item_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_item_list();

  // repeated int32 result_list = 4;
  int result_list_size() const;
  private:
  int _internal_result_list_size() const;
  public:
  void clear_result_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_result_list() const;
  void _internal_add_result_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_result_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 result_list(int index) const;
  void set_result_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_result_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      result_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_result_list();

  // int32 wheel_id = 1;
  void clear_wheel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_id() const;
  void set_wheel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel_id() const;
  void _internal_set_wheel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wheel_level = 2;
  void clear_wheel_level();
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_level() const;
  void set_wheel_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel_level() const;
  void _internal_set_wheel_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wheel_multi = 5;
  void clear_wheel_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_multi() const;
  void set_wheel_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wheel_multi() const;
  void _internal_set_wheel_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_num = 6;
  void clear_award_num();
  ::PROTOBUF_NAMESPACE_ID::int32 award_num() const;
  void set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_num() const;
  void _internal_set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_type = 7;
  void clear_award_type();
  ::PROTOBUF_NAMESPACE_ID::int32 award_type() const;
  void set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_type() const;
  void _internal_set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.ItemWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > item_list_;
  mutable std::atomic<int> _item_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > result_list_;
  mutable std::atomic<int> _result_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 wheel_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CritWheel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CritWheel) */ {
 public:
  inline CritWheel() : CritWheel(nullptr) {}
  virtual ~CritWheel();

  CritWheel(const CritWheel& from);
  CritWheel(CritWheel&& from) noexcept
    : CritWheel() {
    *this = ::std::move(from);
  }

  inline CritWheel& operator=(const CritWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CritWheel& operator=(CritWheel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CritWheel& default_instance();

  static inline const CritWheel* internal_default_instance() {
    return reinterpret_cast<const CritWheel*>(
               &_CritWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CritWheel& a, CritWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CritWheel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CritWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CritWheel* New() const final {
    return CreateMaybeMessage<CritWheel>(nullptr);
  }

  CritWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CritWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CritWheel& from);
  void MergeFrom(const CritWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CritWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CritWheel";
  }
  protected:
  explicit CritWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCritListFieldNumber = 1,
    kCritResultFieldNumber = 2,
  };
  // repeated int32 crit_list = 1;
  int crit_list_size() const;
  private:
  int _internal_crit_list_size() const;
  public:
  void clear_crit_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_crit_list() const;
  void _internal_add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_crit_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 crit_list(int index) const;
  void set_crit_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      crit_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_crit_list();

  // int32 crit_result = 2;
  void clear_crit_result();
  ::PROTOBUF_NAMESPACE_ID::int32 crit_result() const;
  void set_crit_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit_result() const;
  void _internal_set_crit_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CritWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > crit_list_;
  mutable std::atomic<int> _crit_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 crit_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class GoldenJadeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.GoldenJadeInfo) */ {
 public:
  inline GoldenJadeInfo() : GoldenJadeInfo(nullptr) {}
  virtual ~GoldenJadeInfo();

  GoldenJadeInfo(const GoldenJadeInfo& from);
  GoldenJadeInfo(GoldenJadeInfo&& from) noexcept
    : GoldenJadeInfo() {
    *this = ::std::move(from);
  }

  inline GoldenJadeInfo& operator=(const GoldenJadeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoldenJadeInfo& operator=(GoldenJadeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoldenJadeInfo& default_instance();

  static inline const GoldenJadeInfo* internal_default_instance() {
    return reinterpret_cast<const GoldenJadeInfo*>(
               &_GoldenJadeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GoldenJadeInfo& a, GoldenJadeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GoldenJadeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoldenJadeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoldenJadeInfo* New() const final {
    return CreateMaybeMessage<GoldenJadeInfo>(nullptr);
  }

  GoldenJadeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoldenJadeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoldenJadeInfo& from);
  void MergeFrom(const GoldenJadeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoldenJadeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.GoldenJadeInfo";
  }
  protected:
  explicit GoldenJadeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemWheelsFieldNumber = 1,
    kCritWheelFieldNumber = 2,
    kTotalMultiFieldNumber = 3,
  };
  // repeated .BYDLD.ItemWheel item_wheels = 1;
  int item_wheels_size() const;
  private:
  int _internal_item_wheels_size() const;
  public:
  void clear_item_wheels();
  ::BYDLD::ItemWheel* mutable_item_wheels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemWheel >*
      mutable_item_wheels();
  private:
  const ::BYDLD::ItemWheel& _internal_item_wheels(int index) const;
  ::BYDLD::ItemWheel* _internal_add_item_wheels();
  public:
  const ::BYDLD::ItemWheel& item_wheels(int index) const;
  ::BYDLD::ItemWheel* add_item_wheels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemWheel >&
      item_wheels() const;

  // .BYDLD.CritWheel crit_wheel = 2;
  bool has_crit_wheel() const;
  private:
  bool _internal_has_crit_wheel() const;
  public:
  void clear_crit_wheel();
  const ::BYDLD::CritWheel& crit_wheel() const;
  ::BYDLD::CritWheel* release_crit_wheel();
  ::BYDLD::CritWheel* mutable_crit_wheel();
  void set_allocated_crit_wheel(::BYDLD::CritWheel* crit_wheel);
  private:
  const ::BYDLD::CritWheel& _internal_crit_wheel() const;
  ::BYDLD::CritWheel* _internal_mutable_crit_wheel();
  public:
  void unsafe_arena_set_allocated_crit_wheel(
      ::BYDLD::CritWheel* crit_wheel);
  ::BYDLD::CritWheel* unsafe_arena_release_crit_wheel();

  // int32 total_multi = 3;
  void clear_total_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 total_multi() const;
  void set_total_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_multi() const;
  void _internal_set_total_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.GoldenJadeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemWheel > item_wheels_;
  ::BYDLD::CritWheel* crit_wheel_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_multi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AztecGemConfigItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AztecGemConfigItem) */ {
 public:
  inline AztecGemConfigItem() : AztecGemConfigItem(nullptr) {}
  virtual ~AztecGemConfigItem();

  AztecGemConfigItem(const AztecGemConfigItem& from);
  AztecGemConfigItem(AztecGemConfigItem&& from) noexcept
    : AztecGemConfigItem() {
    *this = ::std::move(from);
  }

  inline AztecGemConfigItem& operator=(const AztecGemConfigItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AztecGemConfigItem& operator=(AztecGemConfigItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AztecGemConfigItem& default_instance();

  static inline const AztecGemConfigItem* internal_default_instance() {
    return reinterpret_cast<const AztecGemConfigItem*>(
               &_AztecGemConfigItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(AztecGemConfigItem& a, AztecGemConfigItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AztecGemConfigItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AztecGemConfigItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AztecGemConfigItem* New() const final {
    return CreateMaybeMessage<AztecGemConfigItem>(nullptr);
  }

  AztecGemConfigItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AztecGemConfigItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AztecGemConfigItem& from);
  void MergeFrom(const AztecGemConfigItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AztecGemConfigItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AztecGemConfigItem";
  }
  protected:
  explicit AztecGemConfigItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kRatioFieldNumber = 2,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AztecGemConfigItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AztecGemConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AztecGemConfig) */ {
 public:
  inline AztecGemConfig() : AztecGemConfig(nullptr) {}
  virtual ~AztecGemConfig();

  AztecGemConfig(const AztecGemConfig& from);
  AztecGemConfig(AztecGemConfig&& from) noexcept
    : AztecGemConfig() {
    *this = ::std::move(from);
  }

  inline AztecGemConfig& operator=(const AztecGemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AztecGemConfig& operator=(AztecGemConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AztecGemConfig& default_instance();

  static inline const AztecGemConfig* internal_default_instance() {
    return reinterpret_cast<const AztecGemConfig*>(
               &_AztecGemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AztecGemConfig& a, AztecGemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AztecGemConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AztecGemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AztecGemConfig* New() const final {
    return CreateMaybeMessage<AztecGemConfig>(nullptr);
  }

  AztecGemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AztecGemConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AztecGemConfig& from);
  void MergeFrom(const AztecGemConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AztecGemConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AztecGemConfig";
  }
  protected:
  explicit AztecGemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .BYDLD.AztecGemConfigItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::BYDLD::AztecGemConfigItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfigItem >*
      mutable_items();
  private:
  const ::BYDLD::AztecGemConfigItem& _internal_items(int index) const;
  ::BYDLD::AztecGemConfigItem* _internal_add_items();
  public:
  const ::BYDLD::AztecGemConfigItem& items(int index) const;
  ::BYDLD::AztecGemConfigItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfigItem >&
      items() const;

  // .BYDLD.AztecGemType type = 2;
  void clear_type();
  ::BYDLD::AztecGemType type() const;
  void set_type(::BYDLD::AztecGemType value);
  private:
  ::BYDLD::AztecGemType _internal_type() const;
  void _internal_set_type(::BYDLD::AztecGemType value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AztecGemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfigItem > items_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSAztecGemConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSAztecGemConfig) */ {
 public:
  inline CSAztecGemConfig() : CSAztecGemConfig(nullptr) {}
  virtual ~CSAztecGemConfig();

  CSAztecGemConfig(const CSAztecGemConfig& from);
  CSAztecGemConfig(CSAztecGemConfig&& from) noexcept
    : CSAztecGemConfig() {
    *this = ::std::move(from);
  }

  inline CSAztecGemConfig& operator=(const CSAztecGemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSAztecGemConfig& operator=(CSAztecGemConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSAztecGemConfig& default_instance();

  static inline const CSAztecGemConfig* internal_default_instance() {
    return reinterpret_cast<const CSAztecGemConfig*>(
               &_CSAztecGemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CSAztecGemConfig& a, CSAztecGemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CSAztecGemConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSAztecGemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSAztecGemConfig* New() const final {
    return CreateMaybeMessage<CSAztecGemConfig>(nullptr);
  }

  CSAztecGemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSAztecGemConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSAztecGemConfig& from);
  void MergeFrom(const CSAztecGemConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSAztecGemConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSAztecGemConfig";
  }
  protected:
  explicit CSAztecGemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSAztecGemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCAztecGemConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCAztecGemConfig) */ {
 public:
  inline SCAztecGemConfig() : SCAztecGemConfig(nullptr) {}
  virtual ~SCAztecGemConfig();

  SCAztecGemConfig(const SCAztecGemConfig& from);
  SCAztecGemConfig(SCAztecGemConfig&& from) noexcept
    : SCAztecGemConfig() {
    *this = ::std::move(from);
  }

  inline SCAztecGemConfig& operator=(const SCAztecGemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAztecGemConfig& operator=(SCAztecGemConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAztecGemConfig& default_instance();

  static inline const SCAztecGemConfig* internal_default_instance() {
    return reinterpret_cast<const SCAztecGemConfig*>(
               &_SCAztecGemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SCAztecGemConfig& a, SCAztecGemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAztecGemConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAztecGemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAztecGemConfig* New() const final {
    return CreateMaybeMessage<SCAztecGemConfig>(nullptr);
  }

  SCAztecGemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAztecGemConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAztecGemConfig& from);
  void MergeFrom(const SCAztecGemConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAztecGemConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCAztecGemConfig";
  }
  protected:
  explicit SCAztecGemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated .BYDLD.AztecGemConfig configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  ::BYDLD::AztecGemConfig* mutable_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfig >*
      mutable_configs();
  private:
  const ::BYDLD::AztecGemConfig& _internal_configs(int index) const;
  ::BYDLD::AztecGemConfig* _internal_add_configs();
  public:
  const ::BYDLD::AztecGemConfig& configs(int index) const;
  ::BYDLD::AztecGemConfig* add_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfig >&
      configs() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCAztecGemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfig > configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AztecClearReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AztecClearReward) */ {
 public:
  inline AztecClearReward() : AztecClearReward(nullptr) {}
  virtual ~AztecClearReward();

  AztecClearReward(const AztecClearReward& from);
  AztecClearReward(AztecClearReward&& from) noexcept
    : AztecClearReward() {
    *this = ::std::move(from);
  }

  inline AztecClearReward& operator=(const AztecClearReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AztecClearReward& operator=(AztecClearReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AztecClearReward& default_instance();

  static inline const AztecClearReward* internal_default_instance() {
    return reinterpret_cast<const AztecClearReward*>(
               &_AztecClearReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(AztecClearReward& a, AztecClearReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AztecClearReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AztecClearReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AztecClearReward* New() const final {
    return CreateMaybeMessage<AztecClearReward>(nullptr);
  }

  AztecClearReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AztecClearReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AztecClearReward& from);
  void MergeFrom(const AztecClearReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AztecClearReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AztecClearReward";
  }
  protected:
  explicit AztecClearReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .BYDLD.AztecGemType type = 1;
  void clear_type();
  ::BYDLD::AztecGemType type() const;
  void set_type(::BYDLD::AztecGemType value);
  private:
  ::BYDLD::AztecGemType _internal_type() const;
  void _internal_set_type(::BYDLD::AztecGemType value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AztecClearReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AztecTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AztecTable) */ {
 public:
  inline AztecTable() : AztecTable(nullptr) {}
  virtual ~AztecTable();

  AztecTable(const AztecTable& from);
  AztecTable(AztecTable&& from) noexcept
    : AztecTable() {
    *this = ::std::move(from);
  }

  inline AztecTable& operator=(const AztecTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline AztecTable& operator=(AztecTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AztecTable& default_instance();

  static inline const AztecTable* internal_default_instance() {
    return reinterpret_cast<const AztecTable*>(
               &_AztecTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(AztecTable& a, AztecTable& b) {
    a.Swap(&b);
  }
  inline void Swap(AztecTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AztecTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AztecTable* New() const final {
    return CreateMaybeMessage<AztecTable>(nullptr);
  }

  AztecTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AztecTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AztecTable& from);
  void MergeFrom(const AztecTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AztecTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AztecTable";
  }
  protected:
  explicit AztecTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemsFieldNumber = 1,
    kRewardsFieldNumber = 2,
  };
  // repeated .BYDLD.AztecGemType gems = 1;
  int gems_size() const;
  private:
  int _internal_gems_size() const;
  public:
  void clear_gems();
  private:
  ::BYDLD::AztecGemType _internal_gems(int index) const;
  void _internal_add_gems(::BYDLD::AztecGemType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_gems();
  public:
  ::BYDLD::AztecGemType gems(int index) const;
  void set_gems(int index, ::BYDLD::AztecGemType value);
  void add_gems(::BYDLD::AztecGemType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& gems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_gems();

  // repeated .BYDLD.AztecClearReward rewards = 2;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::BYDLD::AztecClearReward* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecClearReward >*
      mutable_rewards();
  private:
  const ::BYDLD::AztecClearReward& _internal_rewards(int index) const;
  ::BYDLD::AztecClearReward* _internal_add_rewards();
  public:
  const ::BYDLD::AztecClearReward& rewards(int index) const;
  ::BYDLD::AztecClearReward* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecClearReward >&
      rewards() const;

  // @@protoc_insertion_point(class_scope:BYDLD.AztecTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> gems_;
  mutable std::atomic<int> _gems_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecClearReward > rewards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AztecStep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AztecStep) */ {
 public:
  inline AztecStep() : AztecStep(nullptr) {}
  virtual ~AztecStep();

  AztecStep(const AztecStep& from);
  AztecStep(AztecStep&& from) noexcept
    : AztecStep() {
    *this = ::std::move(from);
  }

  inline AztecStep& operator=(const AztecStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline AztecStep& operator=(AztecStep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AztecStep& default_instance();

  static inline const AztecStep* internal_default_instance() {
    return reinterpret_cast<const AztecStep*>(
               &_AztecStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AztecStep& a, AztecStep& b) {
    a.Swap(&b);
  }
  inline void Swap(AztecStep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AztecStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AztecStep* New() const final {
    return CreateMaybeMessage<AztecStep>(nullptr);
  }

  AztecStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AztecStep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AztecStep& from);
  void MergeFrom(const AztecStep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AztecStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AztecStep";
  }
  protected:
  explicit AztecStep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 1,
  };
  // repeated .BYDLD.AztecTable tables = 1;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::BYDLD::AztecTable* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecTable >*
      mutable_tables();
  private:
  const ::BYDLD::AztecTable& _internal_tables(int index) const;
  ::BYDLD::AztecTable* _internal_add_tables();
  public:
  const ::BYDLD::AztecTable& tables(int index) const;
  ::BYDLD::AztecTable* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecTable >&
      tables() const;

  // @@protoc_insertion_point(class_scope:BYDLD.AztecStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecTable > tables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AztecDataInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AztecDataInfo) */ {
 public:
  inline AztecDataInfo() : AztecDataInfo(nullptr) {}
  virtual ~AztecDataInfo();

  AztecDataInfo(const AztecDataInfo& from);
  AztecDataInfo(AztecDataInfo&& from) noexcept
    : AztecDataInfo() {
    *this = ::std::move(from);
  }

  inline AztecDataInfo& operator=(const AztecDataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AztecDataInfo& operator=(AztecDataInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AztecDataInfo& default_instance();

  static inline const AztecDataInfo* internal_default_instance() {
    return reinterpret_cast<const AztecDataInfo*>(
               &_AztecDataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AztecDataInfo& a, AztecDataInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AztecDataInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AztecDataInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AztecDataInfo* New() const final {
    return CreateMaybeMessage<AztecDataInfo>(nullptr);
  }

  AztecDataInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AztecDataInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AztecDataInfo& from);
  void MergeFrom(const AztecDataInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AztecDataInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AztecDataInfo";
  }
  protected:
  explicit AztecDataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsFieldNumber = 1,
    kTotalWinFieldNumber = 2,
  };
  // repeated .BYDLD.AztecStep steps = 1;
  int steps_size() const;
  private:
  int _internal_steps_size() const;
  public:
  void clear_steps();
  ::BYDLD::AztecStep* mutable_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecStep >*
      mutable_steps();
  private:
  const ::BYDLD::AztecStep& _internal_steps(int index) const;
  ::BYDLD::AztecStep* _internal_add_steps();
  public:
  const ::BYDLD::AztecStep& steps(int index) const;
  ::BYDLD::AztecStep* add_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecStep >&
      steps() const;

  // int32 total_win = 2;
  void clear_total_win();
  ::PROTOBUF_NAMESPACE_ID::int32 total_win() const;
  void set_total_win(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_win() const;
  void _internal_set_total_win(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AztecDataInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecStep > steps_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_win_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Capturefish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Capturefish) */ {
 public:
  inline Capturefish() : Capturefish(nullptr) {}
  virtual ~Capturefish();

  Capturefish(const Capturefish& from);
  Capturefish(Capturefish&& from) noexcept
    : Capturefish() {
    *this = ::std::move(from);
  }

  inline Capturefish& operator=(const Capturefish& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capturefish& operator=(Capturefish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Capturefish& default_instance();

  static inline const Capturefish* internal_default_instance() {
    return reinterpret_cast<const Capturefish*>(
               &_Capturefish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Capturefish& a, Capturefish& b) {
    a.Swap(&b);
  }
  inline void Swap(Capturefish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capturefish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Capturefish* New() const final {
    return CreateMaybeMessage<Capturefish>(nullptr);
  }

  Capturefish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Capturefish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Capturefish& from);
  void MergeFrom(const Capturefish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capturefish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Capturefish";
  }
  protected:
  explicit Capturefish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorpedoesFieldNumber = 4,
    kEffectFishFieldNumber = 7,
    kBallInfoFieldNumber = 22,
    kOctopusKingFieldNumber = 23,
    kMagicInfoFieldNumber = 25,
    kZeusInfoFieldNumber = 26,
    kGoldenJadeInfoFieldNumber = 27,
    kAztecDataInfoFieldNumber = 28,
    kFishUidFieldNumber = 1,
    kGetScoreFieldNumber = 2,
    kFishIdFieldNumber = 3,
    kLuckyRatioFieldNumber = 5,
    kTridentScoreFieldNumber = 6,
    kAwardTimeFieldNumber = 8,
    kBulletTypeFieldNumber = 9,
    kMultipleFieldNumber = 10,
    kGetPeilvFieldNumber = 11,
    kDeathFieldNumber = 12,
    kStageFieldNumber = 13,
    kSubStageFieldNumber = 14,
    kAwardIndexFieldNumber = 15,
    kCritMultipleFieldNumber = 16,
    kIngotMultiFieldNumber = 17,
    kRatioFieldNumber = 18,
    kFrozenTimeFieldNumber = 19,
    kTridentMultiFieldNumber = 20,
    kScratchCardFieldNumber = 21,
    kIsRewardFieldNumber = 24,
  };
  // repeated .BYDLD.ObjectData torpedoes = 4;
  int torpedoes_size() const;
  private:
  int _internal_torpedoes_size() const;
  public:
  void clear_torpedoes();
  ::BYDLD::ObjectData* mutable_torpedoes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >*
      mutable_torpedoes();
  private:
  const ::BYDLD::ObjectData& _internal_torpedoes(int index) const;
  ::BYDLD::ObjectData* _internal_add_torpedoes();
  public:
  const ::BYDLD::ObjectData& torpedoes(int index) const;
  ::BYDLD::ObjectData* add_torpedoes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >&
      torpedoes() const;

  // repeated .BYDLD.EffectFish effect_fish = 7;
  int effect_fish_size() const;
  private:
  int _internal_effect_fish_size() const;
  public:
  void clear_effect_fish();
  ::BYDLD::EffectFish* mutable_effect_fish(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::EffectFish >*
      mutable_effect_fish();
  private:
  const ::BYDLD::EffectFish& _internal_effect_fish(int index) const;
  ::BYDLD::EffectFish* _internal_add_effect_fish();
  public:
  const ::BYDLD::EffectFish& effect_fish(int index) const;
  ::BYDLD::EffectFish* add_effect_fish();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::EffectFish >&
      effect_fish() const;

  // .BYDLD.DragonBallInfo ball_info = 22;
  bool has_ball_info() const;
  private:
  bool _internal_has_ball_info() const;
  public:
  void clear_ball_info();
  const ::BYDLD::DragonBallInfo& ball_info() const;
  ::BYDLD::DragonBallInfo* release_ball_info();
  ::BYDLD::DragonBallInfo* mutable_ball_info();
  void set_allocated_ball_info(::BYDLD::DragonBallInfo* ball_info);
  private:
  const ::BYDLD::DragonBallInfo& _internal_ball_info() const;
  ::BYDLD::DragonBallInfo* _internal_mutable_ball_info();
  public:
  void unsafe_arena_set_allocated_ball_info(
      ::BYDLD::DragonBallInfo* ball_info);
  ::BYDLD::DragonBallInfo* unsafe_arena_release_ball_info();

  // .BYDLD.OctopusKingInfo octopus_king = 23;
  bool has_octopus_king() const;
  private:
  bool _internal_has_octopus_king() const;
  public:
  void clear_octopus_king();
  const ::BYDLD::OctopusKingInfo& octopus_king() const;
  ::BYDLD::OctopusKingInfo* release_octopus_king();
  ::BYDLD::OctopusKingInfo* mutable_octopus_king();
  void set_allocated_octopus_king(::BYDLD::OctopusKingInfo* octopus_king);
  private:
  const ::BYDLD::OctopusKingInfo& _internal_octopus_king() const;
  ::BYDLD::OctopusKingInfo* _internal_mutable_octopus_king();
  public:
  void unsafe_arena_set_allocated_octopus_king(
      ::BYDLD::OctopusKingInfo* octopus_king);
  ::BYDLD::OctopusKingInfo* unsafe_arena_release_octopus_king();

  // .BYDLD.MagicInfo magic_info = 25;
  bool has_magic_info() const;
  private:
  bool _internal_has_magic_info() const;
  public:
  void clear_magic_info();
  const ::BYDLD::MagicInfo& magic_info() const;
  ::BYDLD::MagicInfo* release_magic_info();
  ::BYDLD::MagicInfo* mutable_magic_info();
  void set_allocated_magic_info(::BYDLD::MagicInfo* magic_info);
  private:
  const ::BYDLD::MagicInfo& _internal_magic_info() const;
  ::BYDLD::MagicInfo* _internal_mutable_magic_info();
  public:
  void unsafe_arena_set_allocated_magic_info(
      ::BYDLD::MagicInfo* magic_info);
  ::BYDLD::MagicInfo* unsafe_arena_release_magic_info();

  // .BYDLD.Zeus zeus_info = 26;
  bool has_zeus_info() const;
  private:
  bool _internal_has_zeus_info() const;
  public:
  void clear_zeus_info();
  const ::BYDLD::Zeus& zeus_info() const;
  ::BYDLD::Zeus* release_zeus_info();
  ::BYDLD::Zeus* mutable_zeus_info();
  void set_allocated_zeus_info(::BYDLD::Zeus* zeus_info);
  private:
  const ::BYDLD::Zeus& _internal_zeus_info() const;
  ::BYDLD::Zeus* _internal_mutable_zeus_info();
  public:
  void unsafe_arena_set_allocated_zeus_info(
      ::BYDLD::Zeus* zeus_info);
  ::BYDLD::Zeus* unsafe_arena_release_zeus_info();

  // .BYDLD.GoldenJadeInfo golden_jade_info = 27;
  bool has_golden_jade_info() const;
  private:
  bool _internal_has_golden_jade_info() const;
  public:
  void clear_golden_jade_info();
  const ::BYDLD::GoldenJadeInfo& golden_jade_info() const;
  ::BYDLD::GoldenJadeInfo* release_golden_jade_info();
  ::BYDLD::GoldenJadeInfo* mutable_golden_jade_info();
  void set_allocated_golden_jade_info(::BYDLD::GoldenJadeInfo* golden_jade_info);
  private:
  const ::BYDLD::GoldenJadeInfo& _internal_golden_jade_info() const;
  ::BYDLD::GoldenJadeInfo* _internal_mutable_golden_jade_info();
  public:
  void unsafe_arena_set_allocated_golden_jade_info(
      ::BYDLD::GoldenJadeInfo* golden_jade_info);
  ::BYDLD::GoldenJadeInfo* unsafe_arena_release_golden_jade_info();

  // .BYDLD.AztecDataInfo aztec_data_info = 28;
  bool has_aztec_data_info() const;
  private:
  bool _internal_has_aztec_data_info() const;
  public:
  void clear_aztec_data_info();
  const ::BYDLD::AztecDataInfo& aztec_data_info() const;
  ::BYDLD::AztecDataInfo* release_aztec_data_info();
  ::BYDLD::AztecDataInfo* mutable_aztec_data_info();
  void set_allocated_aztec_data_info(::BYDLD::AztecDataInfo* aztec_data_info);
  private:
  const ::BYDLD::AztecDataInfo& _internal_aztec_data_info() const;
  ::BYDLD::AztecDataInfo* _internal_mutable_aztec_data_info();
  public:
  void unsafe_arena_set_allocated_aztec_data_info(
      ::BYDLD::AztecDataInfo* aztec_data_info);
  ::BYDLD::AztecDataInfo* unsafe_arena_release_aztec_data_info();

  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 get_score = 2;
  void clear_get_score();
  ::PROTOBUF_NAMESPACE_ID::int32 get_score() const;
  void set_get_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_get_score() const;
  void _internal_set_get_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_id = 3;
  void clear_fish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id() const;
  void set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id() const;
  void _internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lucky_ratio = 5;
  void clear_lucky_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_ratio() const;
  void set_lucky_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_ratio() const;
  void _internal_set_lucky_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident_score = 6;
  void clear_trident_score();
  ::PROTOBUF_NAMESPACE_ID::int32 trident_score() const;
  void set_trident_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident_score() const;
  void _internal_set_trident_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_time = 8;
  void clear_award_time();
  ::PROTOBUF_NAMESPACE_ID::int32 award_time() const;
  void set_award_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_time() const;
  void _internal_set_award_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletType = 9;
  void clear_bullettype();
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype() const;
  void set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullettype() const;
  void _internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 10;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 get_peilv = 11;
  void clear_get_peilv();
  ::PROTOBUF_NAMESPACE_ID::int32 get_peilv() const;
  void set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_get_peilv() const;
  void _internal_set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 death = 12;
  void clear_death();
  ::PROTOBUF_NAMESPACE_ID::int32 death() const;
  void set_death(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_death() const;
  void _internal_set_death(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 13;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sub_stage = 14;
  void clear_sub_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_stage() const;
  void set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_stage() const;
  void _internal_set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award_index = 15;
  void clear_award_index();
  ::PROTOBUF_NAMESPACE_ID::int32 award_index() const;
  void set_award_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_index() const;
  void _internal_set_award_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 crit_multiple = 16;
  void clear_crit_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 crit_multiple() const;
  void set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit_multiple() const;
  void _internal_set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ingot_multi = 17;
  void clear_ingot_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi() const;
  void set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_multi() const;
  void _internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 18;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frozen_time = 19;
  void clear_frozen_time();
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_time() const;
  void set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frozen_time() const;
  void _internal_set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident_multi = 20;
  void clear_trident_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 trident_multi() const;
  void set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident_multi() const;
  void _internal_set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scratch_card = 21;
  void clear_scratch_card();
  ::PROTOBUF_NAMESPACE_ID::int32 scratch_card() const;
  void set_scratch_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scratch_card() const;
  void _internal_set_scratch_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_reward = 24;
  void clear_is_reward();
  bool is_reward() const;
  void set_is_reward(bool value);
  private:
  bool _internal_is_reward() const;
  void _internal_set_is_reward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Capturefish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData > torpedoes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::EffectFish > effect_fish_;
  ::BYDLD::DragonBallInfo* ball_info_;
  ::BYDLD::OctopusKingInfo* octopus_king_;
  ::BYDLD::MagicInfo* magic_info_;
  ::BYDLD::Zeus* zeus_info_;
  ::BYDLD::GoldenJadeInfo* golden_jade_info_;
  ::BYDLD::AztecDataInfo* aztec_data_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 get_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 get_peilv_;
  ::PROTOBUF_NAMESPACE_ID::int32 death_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 crit_multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 scratch_card_;
  bool is_reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHitMultiFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHitMultiFish) */ {
 public:
  inline SCHitMultiFish() : SCHitMultiFish(nullptr) {}
  virtual ~SCHitMultiFish();

  SCHitMultiFish(const SCHitMultiFish& from);
  SCHitMultiFish(SCHitMultiFish&& from) noexcept
    : SCHitMultiFish() {
    *this = ::std::move(from);
  }

  inline SCHitMultiFish& operator=(const SCHitMultiFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHitMultiFish& operator=(SCHitMultiFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHitMultiFish& default_instance();

  static inline const SCHitMultiFish* internal_default_instance() {
    return reinterpret_cast<const SCHitMultiFish*>(
               &_SCHitMultiFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SCHitMultiFish& a, SCHitMultiFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHitMultiFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHitMultiFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHitMultiFish* New() const final {
    return CreateMaybeMessage<SCHitMultiFish>(nullptr);
  }

  SCHitMultiFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHitMultiFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHitMultiFish& from);
  void MergeFrom(const SCHitMultiFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHitMultiFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHitMultiFish";
  }
  protected:
  explicit SCHitMultiFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureInfoFieldNumber = 3,
    kSpecEffectFieldNumber = 6,
    kChairIdxFieldNumber = 1,
    kInvalidFieldNumber = 2,
    kScoreFieldNumber = 4,
    kEarnFieldNumber = 5,
  };
  // repeated .BYDLD.Capturefish capture_info = 3;
  int capture_info_size() const;
  private:
  int _internal_capture_info_size() const;
  public:
  void clear_capture_info();
  ::BYDLD::Capturefish* mutable_capture_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Capturefish >*
      mutable_capture_info();
  private:
  const ::BYDLD::Capturefish& _internal_capture_info(int index) const;
  ::BYDLD::Capturefish* _internal_add_capture_info();
  public:
  const ::BYDLD::Capturefish& capture_info(int index) const;
  ::BYDLD::Capturefish* add_capture_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Capturefish >&
      capture_info() const;

  // .BYDLD.SpecEffect specEffect = 6;
  bool has_speceffect() const;
  private:
  bool _internal_has_speceffect() const;
  public:
  void clear_speceffect();
  const ::BYDLD::SpecEffect& speceffect() const;
  ::BYDLD::SpecEffect* release_speceffect();
  ::BYDLD::SpecEffect* mutable_speceffect();
  void set_allocated_speceffect(::BYDLD::SpecEffect* speceffect);
  private:
  const ::BYDLD::SpecEffect& _internal_speceffect() const;
  ::BYDLD::SpecEffect* _internal_mutable_speceffect();
  public:
  void unsafe_arena_set_allocated_speceffect(
      ::BYDLD::SpecEffect* speceffect);
  ::BYDLD::SpecEffect* unsafe_arena_release_speceffect();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 invalid = 2;
  void clear_invalid();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid() const;
  void set_invalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid() const;
  void _internal_set_invalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 earn = 5;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHitMultiFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Capturefish > capture_info_;
  ::BYDLD::SpecEffect* speceffect_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSyncMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSyncMoney) */ {
 public:
  inline CSSyncMoney() : CSSyncMoney(nullptr) {}
  virtual ~CSSyncMoney();

  CSSyncMoney(const CSSyncMoney& from);
  CSSyncMoney(CSSyncMoney&& from) noexcept
    : CSSyncMoney() {
    *this = ::std::move(from);
  }

  inline CSSyncMoney& operator=(const CSSyncMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncMoney& operator=(CSSyncMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncMoney& default_instance();

  static inline const CSSyncMoney* internal_default_instance() {
    return reinterpret_cast<const CSSyncMoney*>(
               &_CSSyncMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CSSyncMoney& a, CSSyncMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncMoney* New() const final {
    return CreateMaybeMessage<CSSyncMoney>(nullptr);
  }

  CSSyncMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncMoney& from);
  void MergeFrom(const CSSyncMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSyncMoney";
  }
  protected:
  explicit CSSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSyncMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncMoney) */ {
 public:
  inline SCSyncMoney() : SCSyncMoney(nullptr) {}
  virtual ~SCSyncMoney();

  SCSyncMoney(const SCSyncMoney& from);
  SCSyncMoney(SCSyncMoney&& from) noexcept
    : SCSyncMoney() {
    *this = ::std::move(from);
  }

  inline SCSyncMoney& operator=(const SCSyncMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncMoney& operator=(SCSyncMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncMoney& default_instance();

  static inline const SCSyncMoney* internal_default_instance() {
    return reinterpret_cast<const SCSyncMoney*>(
               &_SCSyncMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SCSyncMoney& a, SCSyncMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncMoney* New() const final {
    return CreateMaybeMessage<SCSyncMoney>(nullptr);
  }

  SCSyncMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncMoney& from);
  void MergeFrom(const SCSyncMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncMoney";
  }
  protected:
  explicit SCSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kChairIdxFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDeltaFieldNumber = 4,
    kInvalidScoreFieldNumber = 5,
    kFreetimeScoreFieldNumber = 6,
    kTicketFieldNumber = 7,
    kIngotScoreFieldNumber = 8,
  };
  // int64 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delta = 4;
  void clear_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta() const;
  void _internal_set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 invalid_score = 5;
  void clear_invalid_score();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_score() const;
  void set_invalid_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid_score() const;
  void _internal_set_invalid_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 freetime_score = 6;
  void clear_freetime_score();
  ::PROTOBUF_NAMESPACE_ID::int32 freetime_score() const;
  void set_freetime_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_freetime_score() const;
  void _internal_set_freetime_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 7;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ingot_score = 8;
  void clear_ingot_score();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_score() const;
  void set_ingot_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_score() const;
  void _internal_set_ingot_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 freetime_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class FishTrace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.FishTrace) */ {
 public:
  inline FishTrace() : FishTrace(nullptr) {}
  virtual ~FishTrace();

  FishTrace(const FishTrace& from);
  FishTrace(FishTrace&& from) noexcept
    : FishTrace() {
    *this = ::std::move(from);
  }

  inline FishTrace& operator=(const FishTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline FishTrace& operator=(FishTrace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FishTrace& default_instance();

  static inline const FishTrace* internal_default_instance() {
    return reinterpret_cast<const FishTrace*>(
               &_FishTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(FishTrace& a, FishTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(FishTrace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FishTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FishTrace* New() const final {
    return CreateMaybeMessage<FishTrace>(nullptr);
  }

  FishTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FishTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FishTrace& from);
  void MergeFrom(const FishTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FishTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.FishTrace";
  }
  protected:
  explicit FishTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWaitTimeFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float wait_time = 4;
  void clear_wait_time();
  float wait_time() const;
  void set_wait_time(float value);
  private:
  float _internal_wait_time() const;
  void _internal_set_wait_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.FishTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCFishTracesList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCFishTracesList) */ {
 public:
  inline SCFishTracesList() : SCFishTracesList(nullptr) {}
  virtual ~SCFishTracesList();

  SCFishTracesList(const SCFishTracesList& from);
  SCFishTracesList(SCFishTracesList&& from) noexcept
    : SCFishTracesList() {
    *this = ::std::move(from);
  }

  inline SCFishTracesList& operator=(const SCFishTracesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFishTracesList& operator=(SCFishTracesList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFishTracesList& default_instance();

  static inline const SCFishTracesList* internal_default_instance() {
    return reinterpret_cast<const SCFishTracesList*>(
               &_SCFishTracesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SCFishTracesList& a, SCFishTracesList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFishTracesList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFishTracesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFishTracesList* New() const final {
    return CreateMaybeMessage<SCFishTracesList>(nullptr);
  }

  SCFishTracesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFishTracesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFishTracesList& from);
  void MergeFrom(const SCFishTracesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFishTracesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCFishTracesList";
  }
  protected:
  explicit SCFishTracesList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTracesFieldNumber = 1,
    kAccelerateFlagFieldNumber = 2,
  };
  // repeated .BYDLD.FishTraces fish_traces = 1;
  int fish_traces_size() const;
  private:
  int _internal_fish_traces_size() const;
  public:
  void clear_fish_traces();
  ::BYDLD::FishTraces* mutable_fish_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
      mutable_fish_traces();
  private:
  const ::BYDLD::FishTraces& _internal_fish_traces(int index) const;
  ::BYDLD::FishTraces* _internal_add_fish_traces();
  public:
  const ::BYDLD::FishTraces& fish_traces(int index) const;
  ::BYDLD::FishTraces* add_fish_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
      fish_traces() const;

  // bool accelerate_flag = 2;
  void clear_accelerate_flag();
  bool accelerate_flag() const;
  void set_accelerate_flag(bool value);
  private:
  bool _internal_accelerate_flag() const;
  void _internal_set_accelerate_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCFishTracesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces > fish_traces_;
  bool accelerate_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class FishTraces PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.FishTraces) */ {
 public:
  inline FishTraces() : FishTraces(nullptr) {}
  virtual ~FishTraces();

  FishTraces(const FishTraces& from);
  FishTraces(FishTraces&& from) noexcept
    : FishTraces() {
    *this = ::std::move(from);
  }

  inline FishTraces& operator=(const FishTraces& from) {
    CopyFrom(from);
    return *this;
  }
  inline FishTraces& operator=(FishTraces&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FishTraces& default_instance();

  static inline const FishTraces* internal_default_instance() {
    return reinterpret_cast<const FishTraces*>(
               &_FishTraces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(FishTraces& a, FishTraces& b) {
    a.Swap(&b);
  }
  inline void Swap(FishTraces* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FishTraces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FishTraces* New() const final {
    return CreateMaybeMessage<FishTraces>(nullptr);
  }

  FishTraces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FishTraces>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FishTraces& from);
  void MergeFrom(const FishTraces& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FishTraces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.FishTraces";
  }
  protected:
  explicit FishTraces(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTraceFieldNumber = 6,
    kSmallFishListFieldNumber = 17,
    kFishUidFieldNumber = 1,
    kFishIdFieldNumber = 2,
    kLiveTimeFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kRouteTypeFieldNumber = 5,
    kFishCurPointFieldNumber = 7,
    kAlreadyMoveFieldNumber = 8,
    kXFieldNumber = 9,
    kYFieldNumber = 10,
    kTimeFieldNumber = 11,
    kStageFieldNumber = 12,
    kSubStageFieldNumber = 13,
    kLifespanFieldNumber = 14,
    kFrozenTimeFieldNumber = 15,
    kFishGenderFieldNumber = 16,
  };
  // repeated .BYDLD.FishTrace fish_trace = 6;
  int fish_trace_size() const;
  private:
  int _internal_fish_trace_size() const;
  public:
  void clear_fish_trace();
  ::BYDLD::FishTrace* mutable_fish_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTrace >*
      mutable_fish_trace();
  private:
  const ::BYDLD::FishTrace& _internal_fish_trace(int index) const;
  ::BYDLD::FishTrace* _internal_add_fish_trace();
  public:
  const ::BYDLD::FishTrace& fish_trace(int index) const;
  ::BYDLD::FishTrace* add_fish_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTrace >&
      fish_trace() const;

  // repeated .BYDLD.FishTraces small_fish_list = 17;
  int small_fish_list_size() const;
  private:
  int _internal_small_fish_list_size() const;
  public:
  void clear_small_fish_list();
  ::BYDLD::FishTraces* mutable_small_fish_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
      mutable_small_fish_list();
  private:
  const ::BYDLD::FishTraces& _internal_small_fish_list(int index) const;
  ::BYDLD::FishTraces* _internal_add_small_fish_list();
  public:
  const ::BYDLD::FishTraces& small_fish_list(int index) const;
  ::BYDLD::FishTraces* add_small_fish_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
      small_fish_list() const;

  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_id = 2;
  void clear_fish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id() const;
  void set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id() const;
  void _internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 live_time = 3;
  void clear_live_time();
  ::PROTOBUF_NAMESPACE_ID::int32 live_time() const;
  void set_live_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_live_time() const;
  void _internal_set_live_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // int32 route_type = 5;
  void clear_route_type();
  ::PROTOBUF_NAMESPACE_ID::int32 route_type() const;
  void set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route_type() const;
  void _internal_set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_cur_point = 7;
  void clear_fish_cur_point();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_cur_point() const;
  void set_fish_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_cur_point() const;
  void _internal_set_fish_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool already_move = 8;
  void clear_already_move();
  bool already_move() const;
  void set_already_move(bool value);
  private:
  bool _internal_already_move() const;
  void _internal_set_already_move(bool value);
  public:

  // float x = 9;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 10;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float time = 11;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // int32 stage = 12;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sub_stage = 13;
  void clear_sub_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_stage() const;
  void set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_stage() const;
  void _internal_set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lifespan = 14;
  void clear_lifespan();
  ::PROTOBUF_NAMESPACE_ID::int32 lifespan() const;
  void set_lifespan(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lifespan() const;
  void _internal_set_lifespan(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frozen_time = 15;
  void clear_frozen_time();
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_time() const;
  void set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frozen_time() const;
  void _internal_set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_gender = 16;
  void clear_fish_gender();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_gender() const;
  void set_fish_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_gender() const;
  void _internal_set_fish_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.FishTraces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTrace > fish_trace_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces > small_fish_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_time_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 route_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_cur_point_;
  bool already_move_;
  float x_;
  float y_;
  float time_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 lifespan_;
  ::PROTOBUF_NAMESPACE_ID::int32 frozen_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSyncFishReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSyncFishReq) */ {
 public:
  inline CSSyncFishReq() : CSSyncFishReq(nullptr) {}
  virtual ~CSSyncFishReq();

  CSSyncFishReq(const CSSyncFishReq& from);
  CSSyncFishReq(CSSyncFishReq&& from) noexcept
    : CSSyncFishReq() {
    *this = ::std::move(from);
  }

  inline CSSyncFishReq& operator=(const CSSyncFishReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncFishReq& operator=(CSSyncFishReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncFishReq& default_instance();

  static inline const CSSyncFishReq* internal_default_instance() {
    return reinterpret_cast<const CSSyncFishReq*>(
               &_CSSyncFishReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CSSyncFishReq& a, CSSyncFishReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncFishReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncFishReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncFishReq* New() const final {
    return CreateMaybeMessage<CSSyncFishReq>(nullptr);
  }

  CSSyncFishReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncFishReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncFishReq& from);
  void MergeFrom(const CSSyncFishReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncFishReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSyncFishReq";
  }
  protected:
  explicit CSSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSyncFishReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncFishReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncFishReq) */ {
 public:
  inline SCSyncFishReq() : SCSyncFishReq(nullptr) {}
  virtual ~SCSyncFishReq();

  SCSyncFishReq(const SCSyncFishReq& from);
  SCSyncFishReq(SCSyncFishReq&& from) noexcept
    : SCSyncFishReq() {
    *this = ::std::move(from);
  }

  inline SCSyncFishReq& operator=(const SCSyncFishReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncFishReq& operator=(SCSyncFishReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncFishReq& default_instance();

  static inline const SCSyncFishReq* internal_default_instance() {
    return reinterpret_cast<const SCSyncFishReq*>(
               &_SCSyncFishReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SCSyncFishReq& a, SCSyncFishReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncFishReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncFishReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncFishReq* New() const final {
    return CreateMaybeMessage<SCSyncFishReq>(nullptr);
  }

  SCSyncFishReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncFishReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncFishReq& from);
  void MergeFrom(const SCSyncFishReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncFishReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncFishReq";
  }
  protected:
  explicit SCSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncFishReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSyncFishRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSyncFishRsp) */ {
 public:
  inline CSSyncFishRsp() : CSSyncFishRsp(nullptr) {}
  virtual ~CSSyncFishRsp();

  CSSyncFishRsp(const CSSyncFishRsp& from);
  CSSyncFishRsp(CSSyncFishRsp&& from) noexcept
    : CSSyncFishRsp() {
    *this = ::std::move(from);
  }

  inline CSSyncFishRsp& operator=(const CSSyncFishRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncFishRsp& operator=(CSSyncFishRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncFishRsp& default_instance();

  static inline const CSSyncFishRsp* internal_default_instance() {
    return reinterpret_cast<const CSSyncFishRsp*>(
               &_CSSyncFishRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CSSyncFishRsp& a, CSSyncFishRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncFishRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncFishRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncFishRsp* New() const final {
    return CreateMaybeMessage<CSSyncFishRsp>(nullptr);
  }

  CSSyncFishRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncFishRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncFishRsp& from);
  void MergeFrom(const CSSyncFishRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncFishRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSyncFishRsp";
  }
  protected:
  explicit CSSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTracesFieldNumber = 1,
    kAccelerateFlagFieldNumber = 2,
  };
  // repeated .BYDLD.FishTraces fish_traces = 1;
  int fish_traces_size() const;
  private:
  int _internal_fish_traces_size() const;
  public:
  void clear_fish_traces();
  ::BYDLD::FishTraces* mutable_fish_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
      mutable_fish_traces();
  private:
  const ::BYDLD::FishTraces& _internal_fish_traces(int index) const;
  ::BYDLD::FishTraces* _internal_add_fish_traces();
  public:
  const ::BYDLD::FishTraces& fish_traces(int index) const;
  ::BYDLD::FishTraces* add_fish_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
      fish_traces() const;

  // bool accelerate_flag = 2;
  void clear_accelerate_flag();
  bool accelerate_flag() const;
  void set_accelerate_flag(bool value);
  private:
  bool _internal_accelerate_flag() const;
  void _internal_set_accelerate_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSyncFishRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces > fish_traces_;
  bool accelerate_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncFishRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncFishRsp) */ {
 public:
  inline SCSyncFishRsp() : SCSyncFishRsp(nullptr) {}
  virtual ~SCSyncFishRsp();

  SCSyncFishRsp(const SCSyncFishRsp& from);
  SCSyncFishRsp(SCSyncFishRsp&& from) noexcept
    : SCSyncFishRsp() {
    *this = ::std::move(from);
  }

  inline SCSyncFishRsp& operator=(const SCSyncFishRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncFishRsp& operator=(SCSyncFishRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncFishRsp& default_instance();

  static inline const SCSyncFishRsp* internal_default_instance() {
    return reinterpret_cast<const SCSyncFishRsp*>(
               &_SCSyncFishRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SCSyncFishRsp& a, SCSyncFishRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncFishRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncFishRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncFishRsp* New() const final {
    return CreateMaybeMessage<SCSyncFishRsp>(nullptr);
  }

  SCSyncFishRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncFishRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncFishRsp& from);
  void MergeFrom(const SCSyncFishRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncFishRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncFishRsp";
  }
  protected:
  explicit SCSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishTracesFieldNumber = 1,
    kAccelerateFlagFieldNumber = 2,
  };
  // repeated .BYDLD.FishTraces fish_traces = 1;
  int fish_traces_size() const;
  private:
  int _internal_fish_traces_size() const;
  public:
  void clear_fish_traces();
  ::BYDLD::FishTraces* mutable_fish_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
      mutable_fish_traces();
  private:
  const ::BYDLD::FishTraces& _internal_fish_traces(int index) const;
  ::BYDLD::FishTraces* _internal_add_fish_traces();
  public:
  const ::BYDLD::FishTraces& fish_traces(int index) const;
  ::BYDLD::FishTraces* add_fish_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
      fish_traces() const;

  // bool accelerate_flag = 2;
  void clear_accelerate_flag();
  bool accelerate_flag() const;
  void set_accelerate_flag(bool value);
  private:
  bool _internal_accelerate_flag() const;
  void _internal_set_accelerate_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncFishRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces > fish_traces_;
  bool accelerate_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCChangeScene PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCChangeScene) */ {
 public:
  inline SCChangeScene() : SCChangeScene(nullptr) {}
  virtual ~SCChangeScene();

  SCChangeScene(const SCChangeScene& from);
  SCChangeScene(SCChangeScene&& from) noexcept
    : SCChangeScene() {
    *this = ::std::move(from);
  }

  inline SCChangeScene& operator=(const SCChangeScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChangeScene& operator=(SCChangeScene&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChangeScene& default_instance();

  static inline const SCChangeScene* internal_default_instance() {
    return reinterpret_cast<const SCChangeScene*>(
               &_SCChangeScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SCChangeScene& a, SCChangeScene& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChangeScene* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChangeScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChangeScene* New() const final {
    return CreateMaybeMessage<SCChangeScene>(nullptr);
  }

  SCChangeScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChangeScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChangeScene& from);
  void MergeFrom(const SCChangeScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChangeScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCChangeScene";
  }
  protected:
  explicit SCChangeScene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIndexFieldNumber = 1,
  };
  // int32 scene_index = 1;
  void clear_scene_index();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index() const;
  void set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_index() const;
  void _internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCChangeScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSFishOutsideScreen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSFishOutsideScreen) */ {
 public:
  inline CSFishOutsideScreen() : CSFishOutsideScreen(nullptr) {}
  virtual ~CSFishOutsideScreen();

  CSFishOutsideScreen(const CSFishOutsideScreen& from);
  CSFishOutsideScreen(CSFishOutsideScreen&& from) noexcept
    : CSFishOutsideScreen() {
    *this = ::std::move(from);
  }

  inline CSFishOutsideScreen& operator=(const CSFishOutsideScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFishOutsideScreen& operator=(CSFishOutsideScreen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFishOutsideScreen& default_instance();

  static inline const CSFishOutsideScreen* internal_default_instance() {
    return reinterpret_cast<const CSFishOutsideScreen*>(
               &_CSFishOutsideScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CSFishOutsideScreen& a, CSFishOutsideScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFishOutsideScreen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFishOutsideScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFishOutsideScreen* New() const final {
    return CreateMaybeMessage<CSFishOutsideScreen>(nullptr);
  }

  CSFishOutsideScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFishOutsideScreen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFishOutsideScreen& from);
  void MergeFrom(const CSFishOutsideScreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFishOutsideScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSFishOutsideScreen";
  }
  protected:
  explicit CSFishOutsideScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSFishOutsideScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLockFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLockFish) */ {
 public:
  inline CSLockFish() : CSLockFish(nullptr) {}
  virtual ~CSLockFish();

  CSLockFish(const CSLockFish& from);
  CSLockFish(CSLockFish&& from) noexcept
    : CSLockFish() {
    *this = ::std::move(from);
  }

  inline CSLockFish& operator=(const CSLockFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLockFish& operator=(CSLockFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLockFish& default_instance();

  static inline const CSLockFish* internal_default_instance() {
    return reinterpret_cast<const CSLockFish*>(
               &_CSLockFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CSLockFish& a, CSLockFish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLockFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLockFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLockFish* New() const final {
    return CreateMaybeMessage<CSLockFish>(nullptr);
  }

  CSLockFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLockFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLockFish& from);
  void MergeFrom(const CSLockFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLockFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLockFish";
  }
  protected:
  explicit CSLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kIsOpenFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_open = 3;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSLockFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLockFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLockFish) */ {
 public:
  inline SCLockFish() : SCLockFish(nullptr) {}
  virtual ~SCLockFish();

  SCLockFish(const SCLockFish& from);
  SCLockFish(SCLockFish&& from) noexcept
    : SCLockFish() {
    *this = ::std::move(from);
  }

  inline SCLockFish& operator=(const SCLockFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLockFish& operator=(SCLockFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLockFish& default_instance();

  static inline const SCLockFish* internal_default_instance() {
    return reinterpret_cast<const SCLockFish*>(
               &_SCLockFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SCLockFish& a, SCLockFish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLockFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLockFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLockFish* New() const final {
    return CreateMaybeMessage<SCLockFish>(nullptr);
  }

  SCLockFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLockFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLockFish& from);
  void MergeFrom(const SCLockFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLockFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLockFish";
  }
  protected:
  explicit SCLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kIsOpenFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_open = 3;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLockFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSetSkill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSetSkill) */ {
 public:
  inline CSSetSkill() : CSSetSkill(nullptr) {}
  virtual ~CSSetSkill();

  CSSetSkill(const CSSetSkill& from);
  CSSetSkill(CSSetSkill&& from) noexcept
    : CSSetSkill() {
    *this = ::std::move(from);
  }

  inline CSSetSkill& operator=(const CSSetSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetSkill& operator=(CSSetSkill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetSkill& default_instance();

  static inline const CSSetSkill* internal_default_instance() {
    return reinterpret_cast<const CSSetSkill*>(
               &_CSSetSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CSSetSkill& a, CSSetSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetSkill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetSkill* New() const final {
    return CreateMaybeMessage<CSSetSkill>(nullptr);
  }

  CSSetSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetSkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetSkill& from);
  void MergeFrom(const CSSetSkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSetSkill";
  }
  protected:
  explicit CSSetSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kDoubleFlagFieldNumber = 2,
    kThroughFlagFieldNumber = 3,
    kAutoFlagFieldNumber = 4,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 double_flag = 2;
  void clear_double_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 double_flag() const;
  void set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_double_flag() const;
  void _internal_set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 through_flag = 3;
  void clear_through_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 through_flag() const;
  void set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_through_flag() const;
  void _internal_set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool auto_flag = 4;
  void clear_auto_flag();
  bool auto_flag() const;
  void set_auto_flag(bool value);
  private:
  bool _internal_auto_flag() const;
  void _internal_set_auto_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSetSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 double_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 through_flag_;
  bool auto_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSetSkill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSetSkill) */ {
 public:
  inline SCSetSkill() : SCSetSkill(nullptr) {}
  virtual ~SCSetSkill();

  SCSetSkill(const SCSetSkill& from);
  SCSetSkill(SCSetSkill&& from) noexcept
    : SCSetSkill() {
    *this = ::std::move(from);
  }

  inline SCSetSkill& operator=(const SCSetSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetSkill& operator=(SCSetSkill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetSkill& default_instance();

  static inline const SCSetSkill* internal_default_instance() {
    return reinterpret_cast<const SCSetSkill*>(
               &_SCSetSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SCSetSkill& a, SCSetSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetSkill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetSkill* New() const final {
    return CreateMaybeMessage<SCSetSkill>(nullptr);
  }

  SCSetSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetSkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetSkill& from);
  void MergeFrom(const SCSetSkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSetSkill";
  }
  protected:
  explicit SCSetSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kDoubleFlagFieldNumber = 2,
    kThroughFlagFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 double_flag = 2;
  void clear_double_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 double_flag() const;
  void set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_double_flag() const;
  void _internal_set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 through_flag = 3;
  void clear_through_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 through_flag() const;
  void set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_through_flag() const;
  void _internal_set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSetSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 double_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 through_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserTimeoutKick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserTimeoutKick) */ {
 public:
  inline SCUserTimeoutKick() : SCUserTimeoutKick(nullptr) {}
  virtual ~SCUserTimeoutKick();

  SCUserTimeoutKick(const SCUserTimeoutKick& from);
  SCUserTimeoutKick(SCUserTimeoutKick&& from) noexcept
    : SCUserTimeoutKick() {
    *this = ::std::move(from);
  }

  inline SCUserTimeoutKick& operator=(const SCUserTimeoutKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserTimeoutKick& operator=(SCUserTimeoutKick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserTimeoutKick& default_instance();

  static inline const SCUserTimeoutKick* internal_default_instance() {
    return reinterpret_cast<const SCUserTimeoutKick*>(
               &_SCUserTimeoutKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SCUserTimeoutKick& a, SCUserTimeoutKick& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserTimeoutKick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserTimeoutKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserTimeoutKick* New() const final {
    return CreateMaybeMessage<SCUserTimeoutKick>(nullptr);
  }

  SCUserTimeoutKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserTimeoutKick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserTimeoutKick& from);
  void MergeFrom(const SCUserTimeoutKick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserTimeoutKick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserTimeoutKick";
  }
  protected:
  explicit SCUserTimeoutKick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountSecFieldNumber = 1,
  };
  // int32 count_sec = 1;
  void clear_count_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 count_sec() const;
  void set_count_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_sec() const;
  void _internal_set_count_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserTimeoutKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserRunBackground PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserRunBackground) */ {
 public:
  inline CSUserRunBackground() : CSUserRunBackground(nullptr) {}
  virtual ~CSUserRunBackground();

  CSUserRunBackground(const CSUserRunBackground& from);
  CSUserRunBackground(CSUserRunBackground&& from) noexcept
    : CSUserRunBackground() {
    *this = ::std::move(from);
  }

  inline CSUserRunBackground& operator=(const CSUserRunBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserRunBackground& operator=(CSUserRunBackground&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserRunBackground& default_instance();

  static inline const CSUserRunBackground* internal_default_instance() {
    return reinterpret_cast<const CSUserRunBackground*>(
               &_CSUserRunBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CSUserRunBackground& a, CSUserRunBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserRunBackground* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserRunBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserRunBackground* New() const final {
    return CreateMaybeMessage<CSUserRunBackground>(nullptr);
  }

  CSUserRunBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserRunBackground>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserRunBackground& from);
  void MergeFrom(const CSUserRunBackground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserRunBackground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserRunBackground";
  }
  protected:
  explicit CSUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kBackgroundFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool background = 2;
  void clear_background();
  bool background() const;
  void set_background(bool value);
  private:
  bool _internal_background() const;
  void _internal_set_background(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserRunBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool background_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserRunBackground PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserRunBackground) */ {
 public:
  inline SCUserRunBackground() : SCUserRunBackground(nullptr) {}
  virtual ~SCUserRunBackground();

  SCUserRunBackground(const SCUserRunBackground& from);
  SCUserRunBackground(SCUserRunBackground&& from) noexcept
    : SCUserRunBackground() {
    *this = ::std::move(from);
  }

  inline SCUserRunBackground& operator=(const SCUserRunBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserRunBackground& operator=(SCUserRunBackground&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserRunBackground& default_instance();

  static inline const SCUserRunBackground* internal_default_instance() {
    return reinterpret_cast<const SCUserRunBackground*>(
               &_SCUserRunBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(SCUserRunBackground& a, SCUserRunBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserRunBackground* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserRunBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserRunBackground* New() const final {
    return CreateMaybeMessage<SCUserRunBackground>(nullptr);
  }

  SCUserRunBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserRunBackground>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserRunBackground& from);
  void MergeFrom(const SCUserRunBackground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserRunBackground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserRunBackground";
  }
  protected:
  explicit SCUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationBaseListFieldNumber = 1,
  };
  // repeated .BYDLD.StationBase station_base_list = 1;
  int station_base_list_size() const;
  private:
  int _internal_station_base_list_size() const;
  public:
  void clear_station_base_list();
  ::BYDLD::StationBase* mutable_station_base_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >*
      mutable_station_base_list();
  private:
  const ::BYDLD::StationBase& _internal_station_base_list(int index) const;
  ::BYDLD::StationBase* _internal_add_station_base_list();
  public:
  const ::BYDLD::StationBase& station_base_list(int index) const;
  ::BYDLD::StationBase* add_station_base_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >&
      station_base_list() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserRunBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase > station_base_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUpdateHallProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUpdateHallProp) */ {
 public:
  inline CSUpdateHallProp() : CSUpdateHallProp(nullptr) {}
  virtual ~CSUpdateHallProp();

  CSUpdateHallProp(const CSUpdateHallProp& from);
  CSUpdateHallProp(CSUpdateHallProp&& from) noexcept
    : CSUpdateHallProp() {
    *this = ::std::move(from);
  }

  inline CSUpdateHallProp& operator=(const CSUpdateHallProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUpdateHallProp& operator=(CSUpdateHallProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUpdateHallProp& default_instance();

  static inline const CSUpdateHallProp* internal_default_instance() {
    return reinterpret_cast<const CSUpdateHallProp*>(
               &_CSUpdateHallProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CSUpdateHallProp& a, CSUpdateHallProp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUpdateHallProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUpdateHallProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUpdateHallProp* New() const final {
    return CreateMaybeMessage<CSUpdateHallProp>(nullptr);
  }

  CSUpdateHallProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUpdateHallProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUpdateHallProp& from);
  void MergeFrom(const CSUpdateHallProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUpdateHallProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUpdateHallProp";
  }
  protected:
  explicit CSUpdateHallProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kConfigIdFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 configId = 2;
  void clear_configid();
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_configid() const;
  void _internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUpdateHallProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHeartBeat) */ {
 public:
  inline CSHeartBeat() : CSHeartBeat(nullptr) {}
  virtual ~CSHeartBeat();

  CSHeartBeat(const CSHeartBeat& from);
  CSHeartBeat(CSHeartBeat&& from) noexcept
    : CSHeartBeat() {
    *this = ::std::move(from);
  }

  inline CSHeartBeat& operator=(const CSHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHeartBeat& operator=(CSHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHeartBeat& default_instance();

  static inline const CSHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CSHeartBeat*>(
               &_CSHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CSHeartBeat& a, CSHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHeartBeat* New() const final {
    return CreateMaybeMessage<CSHeartBeat>(nullptr);
  }

  CSHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHeartBeat& from);
  void MergeFrom(const CSHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHeartBeat";
  }
  protected:
  explicit CSHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHeartBeat) */ {
 public:
  inline SCHeartBeat() : SCHeartBeat(nullptr) {}
  virtual ~SCHeartBeat();

  SCHeartBeat(const SCHeartBeat& from);
  SCHeartBeat(SCHeartBeat&& from) noexcept
    : SCHeartBeat() {
    *this = ::std::move(from);
  }

  inline SCHeartBeat& operator=(const SCHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHeartBeat& operator=(SCHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHeartBeat& default_instance();

  static inline const SCHeartBeat* internal_default_instance() {
    return reinterpret_cast<const SCHeartBeat*>(
               &_SCHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(SCHeartBeat& a, SCHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHeartBeat* New() const final {
    return CreateMaybeMessage<SCHeartBeat>(nullptr);
  }

  SCHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHeartBeat& from);
  void MergeFrom(const SCHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHeartBeat";
  }
  protected:
  explicit SCHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCComTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCComTask) */ {
 public:
  inline SCComTask() : SCComTask(nullptr) {}
  virtual ~SCComTask();

  SCComTask(const SCComTask& from);
  SCComTask(SCComTask&& from) noexcept
    : SCComTask() {
    *this = ::std::move(from);
  }

  inline SCComTask& operator=(const SCComTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCComTask& operator=(SCComTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCComTask& default_instance();

  static inline const SCComTask* internal_default_instance() {
    return reinterpret_cast<const SCComTask*>(
               &_SCComTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(SCComTask& a, SCComTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SCComTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCComTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCComTask* New() const final {
    return CreateMaybeMessage<SCComTask>(nullptr);
  }

  SCComTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCComTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCComTask& from);
  void MergeFrom(const SCComTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCComTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCComTask";
  }
  protected:
  explicit SCComTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kAwardFieldNumber = 3,
    kTicketFieldNumber = 4,
  };
  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 3;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ticket = 4;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCComTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSTaskInfo) */ {
 public:
  inline CSTaskInfo() : CSTaskInfo(nullptr) {}
  virtual ~CSTaskInfo();

  CSTaskInfo(const CSTaskInfo& from);
  CSTaskInfo(CSTaskInfo&& from) noexcept
    : CSTaskInfo() {
    *this = ::std::move(from);
  }

  inline CSTaskInfo& operator=(const CSTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTaskInfo& operator=(CSTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTaskInfo& default_instance();

  static inline const CSTaskInfo* internal_default_instance() {
    return reinterpret_cast<const CSTaskInfo*>(
               &_CSTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CSTaskInfo& a, CSTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTaskInfo* New() const final {
    return CreateMaybeMessage<CSTaskInfo>(nullptr);
  }

  CSTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTaskInfo& from);
  void MergeFrom(const CSTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSTaskInfo";
  }
  protected:
  explicit CSTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCTaskInfo) */ {
 public:
  inline SCTaskInfo() : SCTaskInfo(nullptr) {}
  virtual ~SCTaskInfo();

  SCTaskInfo(const SCTaskInfo& from);
  SCTaskInfo(SCTaskInfo&& from) noexcept
    : SCTaskInfo() {
    *this = ::std::move(from);
  }

  inline SCTaskInfo& operator=(const SCTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTaskInfo& operator=(SCTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTaskInfo& default_instance();

  static inline const SCTaskInfo* internal_default_instance() {
    return reinterpret_cast<const SCTaskInfo*>(
               &_SCTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SCTaskInfo& a, SCTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTaskInfo* New() const final {
    return CreateMaybeMessage<SCTaskInfo>(nullptr);
  }

  SCTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTaskInfo& from);
  void MergeFrom(const SCTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCTaskInfo";
  }
  protected:
  explicit SCTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunRatioFieldNumber = 1,
    kGunLevelFieldNumber = 2,
    kCurNumFieldNumber = 3,
    kTotalNumFieldNumber = 4,
    kVipLevelFieldNumber = 5,
    kIsUnlockFieldNumber = 6,
    kAwardFieldNumber = 7,
    kIsVipUnlockFieldNumber = 8,
    kTicketFieldNumber = 9,
  };
  // int32 gun_ratio = 1;
  void clear_gun_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio() const;
  void set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_ratio() const;
  void _internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_num = 3;
  void clear_cur_num();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_num() const;
  void set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_num() const;
  void _internal_set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_num = 4;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_level = 5;
  void clear_vip_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level() const;
  void set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_level() const;
  void _internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_unlock = 6;
  void clear_is_unlock();
  ::PROTOBUF_NAMESPACE_ID::int32 is_unlock() const;
  void set_is_unlock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_unlock() const;
  void _internal_set_is_unlock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 7;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_vip_unlock = 8;
  void clear_is_vip_unlock();
  bool is_vip_unlock() const;
  void set_is_vip_unlock(bool value);
  private:
  bool _internal_is_vip_unlock() const;
  void _internal_set_is_vip_unlock(bool value);
  public:

  // int32 ticket = 9;
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::int32 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_unlock_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  bool is_vip_unlock_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UserScoreRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UserScoreRecord) */ {
 public:
  inline UserScoreRecord() : UserScoreRecord(nullptr) {}
  virtual ~UserScoreRecord();

  UserScoreRecord(const UserScoreRecord& from);
  UserScoreRecord(UserScoreRecord&& from) noexcept
    : UserScoreRecord() {
    *this = ::std::move(from);
  }

  inline UserScoreRecord& operator=(const UserScoreRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserScoreRecord& operator=(UserScoreRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserScoreRecord& default_instance();

  static inline const UserScoreRecord* internal_default_instance() {
    return reinterpret_cast<const UserScoreRecord*>(
               &_UserScoreRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(UserScoreRecord& a, UserScoreRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(UserScoreRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserScoreRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserScoreRecord* New() const final {
    return CreateMaybeMessage<UserScoreRecord>(nullptr);
  }

  UserScoreRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserScoreRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserScoreRecord& from);
  void MergeFrom(const UserScoreRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserScoreRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UserScoreRecord";
  }
  protected:
  explicit UserScoreRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kScoreFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string score = 3;
  void clear_score();
  const std::string& score() const;
  void set_score(const std::string& value);
  void set_score(std::string&& value);
  void set_score(const char* value);
  void set_score(const char* value, size_t size);
  std::string* mutable_score();
  std::string* release_score();
  void set_allocated_score(std::string* score);
  private:
  const std::string& _internal_score() const;
  void _internal_set_score(const std::string& value);
  std::string* _internal_mutable_score();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.UserScoreRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr score_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSFreeTimeEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSFreeTimeEnd) */ {
 public:
  inline CSFreeTimeEnd() : CSFreeTimeEnd(nullptr) {}
  virtual ~CSFreeTimeEnd();

  CSFreeTimeEnd(const CSFreeTimeEnd& from);
  CSFreeTimeEnd(CSFreeTimeEnd&& from) noexcept
    : CSFreeTimeEnd() {
    *this = ::std::move(from);
  }

  inline CSFreeTimeEnd& operator=(const CSFreeTimeEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFreeTimeEnd& operator=(CSFreeTimeEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFreeTimeEnd& default_instance();

  static inline const CSFreeTimeEnd* internal_default_instance() {
    return reinterpret_cast<const CSFreeTimeEnd*>(
               &_CSFreeTimeEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CSFreeTimeEnd& a, CSFreeTimeEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFreeTimeEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFreeTimeEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFreeTimeEnd* New() const final {
    return CreateMaybeMessage<CSFreeTimeEnd>(nullptr);
  }

  CSFreeTimeEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFreeTimeEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFreeTimeEnd& from);
  void MergeFrom(const CSFreeTimeEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFreeTimeEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSFreeTimeEnd";
  }
  protected:
  explicit CSFreeTimeEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSFreeTimeEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncFreeTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncFreeTimes) */ {
 public:
  inline SCSyncFreeTimes() : SCSyncFreeTimes(nullptr) {}
  virtual ~SCSyncFreeTimes();

  SCSyncFreeTimes(const SCSyncFreeTimes& from);
  SCSyncFreeTimes(SCSyncFreeTimes&& from) noexcept
    : SCSyncFreeTimes() {
    *this = ::std::move(from);
  }

  inline SCSyncFreeTimes& operator=(const SCSyncFreeTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncFreeTimes& operator=(SCSyncFreeTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncFreeTimes& default_instance();

  static inline const SCSyncFreeTimes* internal_default_instance() {
    return reinterpret_cast<const SCSyncFreeTimes*>(
               &_SCSyncFreeTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SCSyncFreeTimes& a, SCSyncFreeTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncFreeTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncFreeTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncFreeTimes* New() const final {
    return CreateMaybeMessage<SCSyncFreeTimes>(nullptr);
  }

  SCSyncFreeTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncFreeTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncFreeTimes& from);
  void MergeFrom(const SCSyncFreeTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncFreeTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncFreeTimes";
  }
  protected:
  explicit SCSyncFreeTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimesFieldNumber = 1,
    kLevelFieldNumber = 2,
    kChairIdxFieldNumber = 3,
    kTypeFieldNumber = 4,
    kExchangeFieldNumber = 5,
  };
  // int32 times = 1;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exchange = 5;
  void clear_exchange();
  ::PROTOBUF_NAMESPACE_ID::int32 exchange() const;
  void set_exchange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exchange() const;
  void _internal_set_exchange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncFreeTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSClickStatistic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSClickStatistic) */ {
 public:
  inline CSClickStatistic() : CSClickStatistic(nullptr) {}
  virtual ~CSClickStatistic();

  CSClickStatistic(const CSClickStatistic& from);
  CSClickStatistic(CSClickStatistic&& from) noexcept
    : CSClickStatistic() {
    *this = ::std::move(from);
  }

  inline CSClickStatistic& operator=(const CSClickStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSClickStatistic& operator=(CSClickStatistic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSClickStatistic& default_instance();

  static inline const CSClickStatistic* internal_default_instance() {
    return reinterpret_cast<const CSClickStatistic*>(
               &_CSClickStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CSClickStatistic& a, CSClickStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(CSClickStatistic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSClickStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSClickStatistic* New() const final {
    return CreateMaybeMessage<CSClickStatistic>(nullptr);
  }

  CSClickStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSClickStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSClickStatistic& from);
  void MergeFrom(const CSClickStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSClickStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSClickStatistic";
  }
  protected:
  explicit CSClickStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // string num = 1;
  void clear_num();
  const std::string& num() const;
  void set_num(const std::string& value);
  void set_num(std::string&& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  std::string* mutable_num();
  std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSClickStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class JumpHighArena PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.JumpHighArena) */ {
 public:
  inline JumpHighArena() : JumpHighArena(nullptr) {}
  virtual ~JumpHighArena();

  JumpHighArena(const JumpHighArena& from);
  JumpHighArena(JumpHighArena&& from) noexcept
    : JumpHighArena() {
    *this = ::std::move(from);
  }

  inline JumpHighArena& operator=(const JumpHighArena& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumpHighArena& operator=(JumpHighArena&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JumpHighArena& default_instance();

  static inline const JumpHighArena* internal_default_instance() {
    return reinterpret_cast<const JumpHighArena*>(
               &_JumpHighArena_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(JumpHighArena& a, JumpHighArena& b) {
    a.Swap(&b);
  }
  inline void Swap(JumpHighArena* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumpHighArena* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JumpHighArena* New() const final {
    return CreateMaybeMessage<JumpHighArena>(nullptr);
  }

  JumpHighArena* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JumpHighArena>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JumpHighArena& from);
  void MergeFrom(const JumpHighArena& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumpHighArena* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.JumpHighArena";
  }
  protected:
  explicit JumpHighArena(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishIdFieldNumber = 5,
    kIsOpenFieldNumber = 1,
    kVipFieldNumber = 2,
    kCoinFieldNumber = 3,
    kGameTimeFieldNumber = 4,
  };
  // repeated int32 fish_id = 5;
  int fish_id_size() const;
  private:
  int _internal_fish_id_size() const;
  public:
  void clear_fish_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fish_id() const;
  void _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fish_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id(int index) const;
  void set_fish_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fish_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fish_id();

  // bool is_open = 1;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // int32 vip = 2;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coin = 3;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int32 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_time = 4;
  void clear_game_time();
  ::PROTOBUF_NAMESPACE_ID::int32 game_time() const;
  void set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_time() const;
  void _internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.JumpHighArena)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fish_id_;
  mutable std::atomic<int> _fish_id_cached_byte_size_;
  bool is_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class GiftBag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.GiftBag) */ {
 public:
  inline GiftBag() : GiftBag(nullptr) {}
  virtual ~GiftBag();

  GiftBag(const GiftBag& from);
  GiftBag(GiftBag&& from) noexcept
    : GiftBag() {
    *this = ::std::move(from);
  }

  inline GiftBag& operator=(const GiftBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline GiftBag& operator=(GiftBag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GiftBag& default_instance();

  static inline const GiftBag* internal_default_instance() {
    return reinterpret_cast<const GiftBag*>(
               &_GiftBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(GiftBag& a, GiftBag& b) {
    a.Swap(&b);
  }
  inline void Swap(GiftBag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GiftBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GiftBag* New() const final {
    return CreateMaybeMessage<GiftBag>(nullptr);
  }

  GiftBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GiftBag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GiftBag& from);
  void MergeFrom(const GiftBag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GiftBag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.GiftBag";
  }
  protected:
  explicit GiftBag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishIdFieldNumber = 2,
    kIsOpenFieldNumber = 1,
  };
  // repeated int32 fish_id = 2;
  int fish_id_size() const;
  private:
  int _internal_fish_id_size() const;
  public:
  void clear_fish_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fish_id() const;
  void _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fish_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id(int index) const;
  void set_fish_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fish_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fish_id();

  // bool is_open = 1;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.GiftBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fish_id_;
  mutable std::atomic<int> _fish_id_cached_byte_size_;
  bool is_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class NewYearCardActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.NewYearCardActivityInfo) */ {
 public:
  inline NewYearCardActivityInfo() : NewYearCardActivityInfo(nullptr) {}
  virtual ~NewYearCardActivityInfo();

  NewYearCardActivityInfo(const NewYearCardActivityInfo& from);
  NewYearCardActivityInfo(NewYearCardActivityInfo&& from) noexcept
    : NewYearCardActivityInfo() {
    *this = ::std::move(from);
  }

  inline NewYearCardActivityInfo& operator=(const NewYearCardActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewYearCardActivityInfo& operator=(NewYearCardActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewYearCardActivityInfo& default_instance();

  static inline const NewYearCardActivityInfo* internal_default_instance() {
    return reinterpret_cast<const NewYearCardActivityInfo*>(
               &_NewYearCardActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(NewYearCardActivityInfo& a, NewYearCardActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NewYearCardActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewYearCardActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewYearCardActivityInfo* New() const final {
    return CreateMaybeMessage<NewYearCardActivityInfo>(nullptr);
  }

  NewYearCardActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewYearCardActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewYearCardActivityInfo& from);
  void MergeFrom(const NewYearCardActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewYearCardActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.NewYearCardActivityInfo";
  }
  protected:
  explicit NewYearCardActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardEnableFieldNumber = 1,
    kCardCountFieldNumber = 2,
    kCardVipFieldNumber = 3,
  };
  // bool card_enable = 1;
  void clear_card_enable();
  bool card_enable() const;
  void set_card_enable(bool value);
  private:
  bool _internal_card_enable() const;
  void _internal_set_card_enable(bool value);
  public:

  // int32 card_count = 2;
  void clear_card_count();
  ::PROTOBUF_NAMESPACE_ID::int32 card_count() const;
  void set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_count() const;
  void _internal_set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_vip = 3;
  void clear_card_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 card_vip() const;
  void set_card_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_vip() const;
  void _internal_set_card_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.NewYearCardActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool card_enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UserPoolActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UserPoolActivityInfo) */ {
 public:
  inline UserPoolActivityInfo() : UserPoolActivityInfo(nullptr) {}
  virtual ~UserPoolActivityInfo();

  UserPoolActivityInfo(const UserPoolActivityInfo& from);
  UserPoolActivityInfo(UserPoolActivityInfo&& from) noexcept
    : UserPoolActivityInfo() {
    *this = ::std::move(from);
  }

  inline UserPoolActivityInfo& operator=(const UserPoolActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPoolActivityInfo& operator=(UserPoolActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPoolActivityInfo& default_instance();

  static inline const UserPoolActivityInfo* internal_default_instance() {
    return reinterpret_cast<const UserPoolActivityInfo*>(
               &_UserPoolActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(UserPoolActivityInfo& a, UserPoolActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPoolActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPoolActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPoolActivityInfo* New() const final {
    return CreateMaybeMessage<UserPoolActivityInfo>(nullptr);
  }

  UserPoolActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPoolActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPoolActivityInfo& from);
  void MergeFrom(const UserPoolActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPoolActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UserPoolActivityInfo";
  }
  protected:
  explicit UserPoolActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardFishFieldNumber = 2,
    kUserPoolLimitFieldNumber = 3,
    kUserPoolShowFieldNumber = 1,
  };
  // repeated int32 award_fish = 2;
  int award_fish_size() const;
  private:
  int _internal_award_fish_size() const;
  public:
  void clear_award_fish();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_fish(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_award_fish() const;
  void _internal_add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_award_fish();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 award_fish(int index) const;
  void set_award_fish(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      award_fish() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_award_fish();

  // repeated .BYDLD.Object3 user_pool_limit = 3;
  int user_pool_limit_size() const;
  private:
  int _internal_user_pool_limit_size() const;
  public:
  void clear_user_pool_limit();
  ::BYDLD::Object3* mutable_user_pool_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_user_pool_limit();
  private:
  const ::BYDLD::Object3& _internal_user_pool_limit(int index) const;
  ::BYDLD::Object3* _internal_add_user_pool_limit();
  public:
  const ::BYDLD::Object3& user_pool_limit(int index) const;
  ::BYDLD::Object3* add_user_pool_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      user_pool_limit() const;

  // bool user_pool_show = 1;
  void clear_user_pool_show();
  bool user_pool_show() const;
  void set_user_pool_show(bool value);
  private:
  bool _internal_user_pool_show() const;
  void _internal_set_user_pool_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.UserPoolActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > award_fish_;
  mutable std::atomic<int> _award_fish_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > user_pool_limit_;
  bool user_pool_show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class DragonBallConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.DragonBallConfig) */ {
 public:
  inline DragonBallConfig() : DragonBallConfig(nullptr) {}
  virtual ~DragonBallConfig();

  DragonBallConfig(const DragonBallConfig& from);
  DragonBallConfig(DragonBallConfig&& from) noexcept
    : DragonBallConfig() {
    *this = ::std::move(from);
  }

  inline DragonBallConfig& operator=(const DragonBallConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DragonBallConfig& operator=(DragonBallConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DragonBallConfig& default_instance();

  static inline const DragonBallConfig* internal_default_instance() {
    return reinterpret_cast<const DragonBallConfig*>(
               &_DragonBallConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(DragonBallConfig& a, DragonBallConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DragonBallConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DragonBallConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DragonBallConfig* New() const final {
    return CreateMaybeMessage<DragonBallConfig>(nullptr);
  }

  DragonBallConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DragonBallConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DragonBallConfig& from);
  void MergeFrom(const DragonBallConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DragonBallConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.DragonBallConfig";
  }
  protected:
  explicit DragonBallConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
    kNextFieldNumber = 2,
  };
  // int32 ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool next = 2;
  void clear_next();
  bool next() const;
  void set_next(bool value);
  private:
  bool _internal_next() const;
  void _internal_set_next(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.DragonBallConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  bool next_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCActivityInfo) */ {
 public:
  inline SCActivityInfo() : SCActivityInfo(nullptr) {}
  virtual ~SCActivityInfo();

  SCActivityInfo(const SCActivityInfo& from);
  SCActivityInfo(SCActivityInfo&& from) noexcept
    : SCActivityInfo() {
    *this = ::std::move(from);
  }

  inline SCActivityInfo& operator=(const SCActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCActivityInfo& operator=(SCActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCActivityInfo& default_instance();

  static inline const SCActivityInfo* internal_default_instance() {
    return reinterpret_cast<const SCActivityInfo*>(
               &_SCActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SCActivityInfo& a, SCActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCActivityInfo* New() const final {
    return CreateMaybeMessage<SCActivityInfo>(nullptr);
  }

  SCActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCActivityInfo& from);
  void MergeFrom(const SCActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCActivityInfo";
  }
  protected:
  explicit SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDragonWheelFieldNumber = 7,
    kTridentWheelFieldNumber = 8,
    kDragonBallFieldNumber = 9,
    kToadMultiFieldNumber = 10,
    kJumpFieldNumber = 1,
    kConfigFieldNumber = 2,
    kCardFieldNumber = 3,
    kUserPoolFieldNumber = 5,
    kAwardPoolRankFieldNumber = 4,
    kLuckyDrawFieldNumber = 6,
  };
  // repeated .BYDLD.Object4 dragon_wheel = 7;
  int dragon_wheel_size() const;
  private:
  int _internal_dragon_wheel_size() const;
  public:
  void clear_dragon_wheel();
  ::BYDLD::Object4* mutable_dragon_wheel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object4 >*
      mutable_dragon_wheel();
  private:
  const ::BYDLD::Object4& _internal_dragon_wheel(int index) const;
  ::BYDLD::Object4* _internal_add_dragon_wheel();
  public:
  const ::BYDLD::Object4& dragon_wheel(int index) const;
  ::BYDLD::Object4* add_dragon_wheel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object4 >&
      dragon_wheel() const;

  // repeated .BYDLD.Object3 trident_wheel = 8;
  int trident_wheel_size() const;
  private:
  int _internal_trident_wheel_size() const;
  public:
  void clear_trident_wheel();
  ::BYDLD::Object3* mutable_trident_wheel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_trident_wheel();
  private:
  const ::BYDLD::Object3& _internal_trident_wheel(int index) const;
  ::BYDLD::Object3* _internal_add_trident_wheel();
  public:
  const ::BYDLD::Object3& trident_wheel(int index) const;
  ::BYDLD::Object3* add_trident_wheel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      trident_wheel() const;

  // repeated .BYDLD.DragonBallConfig dragon_ball = 9;
  int dragon_ball_size() const;
  private:
  int _internal_dragon_ball_size() const;
  public:
  void clear_dragon_ball();
  ::BYDLD::DragonBallConfig* mutable_dragon_ball(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallConfig >*
      mutable_dragon_ball();
  private:
  const ::BYDLD::DragonBallConfig& _internal_dragon_ball(int index) const;
  ::BYDLD::DragonBallConfig* _internal_add_dragon_ball();
  public:
  const ::BYDLD::DragonBallConfig& dragon_ball(int index) const;
  ::BYDLD::DragonBallConfig* add_dragon_ball();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallConfig >&
      dragon_ball() const;

  // repeated int32 toad_multi = 10;
  int toad_multi_size() const;
  private:
  int _internal_toad_multi_size() const;
  public:
  void clear_toad_multi();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toad_multi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_toad_multi() const;
  void _internal_add_toad_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_toad_multi();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 toad_multi(int index) const;
  void set_toad_multi(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_toad_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      toad_multi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_toad_multi();

  // .BYDLD.JumpHighArena jump = 1;
  bool has_jump() const;
  private:
  bool _internal_has_jump() const;
  public:
  void clear_jump();
  const ::BYDLD::JumpHighArena& jump() const;
  ::BYDLD::JumpHighArena* release_jump();
  ::BYDLD::JumpHighArena* mutable_jump();
  void set_allocated_jump(::BYDLD::JumpHighArena* jump);
  private:
  const ::BYDLD::JumpHighArena& _internal_jump() const;
  ::BYDLD::JumpHighArena* _internal_mutable_jump();
  public:
  void unsafe_arena_set_allocated_jump(
      ::BYDLD::JumpHighArena* jump);
  ::BYDLD::JumpHighArena* unsafe_arena_release_jump();

  // .BYDLD.GiftBag config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::BYDLD::GiftBag& config() const;
  ::BYDLD::GiftBag* release_config();
  ::BYDLD::GiftBag* mutable_config();
  void set_allocated_config(::BYDLD::GiftBag* config);
  private:
  const ::BYDLD::GiftBag& _internal_config() const;
  ::BYDLD::GiftBag* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::BYDLD::GiftBag* config);
  ::BYDLD::GiftBag* unsafe_arena_release_config();

  // .BYDLD.NewYearCardActivityInfo card = 3;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::BYDLD::NewYearCardActivityInfo& card() const;
  ::BYDLD::NewYearCardActivityInfo* release_card();
  ::BYDLD::NewYearCardActivityInfo* mutable_card();
  void set_allocated_card(::BYDLD::NewYearCardActivityInfo* card);
  private:
  const ::BYDLD::NewYearCardActivityInfo& _internal_card() const;
  ::BYDLD::NewYearCardActivityInfo* _internal_mutable_card();
  public:
  void unsafe_arena_set_allocated_card(
      ::BYDLD::NewYearCardActivityInfo* card);
  ::BYDLD::NewYearCardActivityInfo* unsafe_arena_release_card();

  // .BYDLD.UserPoolActivityInfo user_pool = 5;
  bool has_user_pool() const;
  private:
  bool _internal_has_user_pool() const;
  public:
  void clear_user_pool();
  const ::BYDLD::UserPoolActivityInfo& user_pool() const;
  ::BYDLD::UserPoolActivityInfo* release_user_pool();
  ::BYDLD::UserPoolActivityInfo* mutable_user_pool();
  void set_allocated_user_pool(::BYDLD::UserPoolActivityInfo* user_pool);
  private:
  const ::BYDLD::UserPoolActivityInfo& _internal_user_pool() const;
  ::BYDLD::UserPoolActivityInfo* _internal_mutable_user_pool();
  public:
  void unsafe_arena_set_allocated_user_pool(
      ::BYDLD::UserPoolActivityInfo* user_pool);
  ::BYDLD::UserPoolActivityInfo* unsafe_arena_release_user_pool();

  // bool award_pool_rank = 4;
  void clear_award_pool_rank();
  bool award_pool_rank() const;
  void set_award_pool_rank(bool value);
  private:
  bool _internal_award_pool_rank() const;
  void _internal_set_award_pool_rank(bool value);
  public:

  // bool lucky_draw = 6;
  void clear_lucky_draw();
  bool lucky_draw() const;
  void set_lucky_draw(bool value);
  private:
  bool _internal_lucky_draw() const;
  void _internal_set_lucky_draw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object4 > dragon_wheel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > trident_wheel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallConfig > dragon_ball_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > toad_multi_;
  mutable std::atomic<int> _toad_multi_cached_byte_size_;
  ::BYDLD::JumpHighArena* jump_;
  ::BYDLD::GiftBag* config_;
  ::BYDLD::NewYearCardActivityInfo* card_;
  ::BYDLD::UserPoolActivityInfo* user_pool_;
  bool award_pool_rank_;
  bool lucky_draw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCPropEndNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCPropEndNotify) */ {
 public:
  inline SCPropEndNotify() : SCPropEndNotify(nullptr) {}
  virtual ~SCPropEndNotify();

  SCPropEndNotify(const SCPropEndNotify& from);
  SCPropEndNotify(SCPropEndNotify&& from) noexcept
    : SCPropEndNotify() {
    *this = ::std::move(from);
  }

  inline SCPropEndNotify& operator=(const SCPropEndNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropEndNotify& operator=(SCPropEndNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropEndNotify& default_instance();

  static inline const SCPropEndNotify* internal_default_instance() {
    return reinterpret_cast<const SCPropEndNotify*>(
               &_SCPropEndNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SCPropEndNotify& a, SCPropEndNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropEndNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropEndNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropEndNotify* New() const final {
    return CreateMaybeMessage<SCPropEndNotify>(nullptr);
  }

  SCPropEndNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropEndNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropEndNotify& from);
  void MergeFrom(const SCPropEndNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropEndNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCPropEndNotify";
  }
  protected:
  explicit SCPropEndNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kPropIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kFreeLevelFieldNumber = 4,
    kFreeTimesFieldNumber = 5,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_id = 2;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_level = 4;
  void clear_free_level();
  ::PROTOBUF_NAMESPACE_ID::int32 free_level() const;
  void set_free_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_level() const;
  void _internal_set_free_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_times = 5;
  void clear_free_times();
  ::PROTOBUF_NAMESPACE_ID::int32 free_times() const;
  void set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_times() const;
  void _internal_set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCPropEndNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCPropDropNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCPropDropNotify) */ {
 public:
  inline SCPropDropNotify() : SCPropDropNotify(nullptr) {}
  virtual ~SCPropDropNotify();

  SCPropDropNotify(const SCPropDropNotify& from);
  SCPropDropNotify(SCPropDropNotify&& from) noexcept
    : SCPropDropNotify() {
    *this = ::std::move(from);
  }

  inline SCPropDropNotify& operator=(const SCPropDropNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPropDropNotify& operator=(SCPropDropNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPropDropNotify& default_instance();

  static inline const SCPropDropNotify* internal_default_instance() {
    return reinterpret_cast<const SCPropDropNotify*>(
               &_SCPropDropNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(SCPropDropNotify& a, SCPropDropNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPropDropNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPropDropNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPropDropNotify* New() const final {
    return CreateMaybeMessage<SCPropDropNotify>(nullptr);
  }

  SCPropDropNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPropDropNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPropDropNotify& from);
  void MergeFrom(const SCPropDropNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPropDropNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCPropDropNotify";
  }
  protected:
  explicit SCPropDropNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kPropIdFieldNumber = 3,
    kCountFieldNumber = 4,
    kLockRatioFieldNumber = 5,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_id = 3;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lock_ratio = 5;
  void clear_lock_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 lock_ratio() const;
  void set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lock_ratio() const;
  void _internal_set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCPropDropNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 lock_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Prop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Prop) */ {
 public:
  inline Prop() : Prop(nullptr) {}
  virtual ~Prop();

  Prop(const Prop& from);
  Prop(Prop&& from) noexcept
    : Prop() {
    *this = ::std::move(from);
  }

  inline Prop& operator=(const Prop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prop& operator=(Prop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prop& default_instance();

  static inline const Prop* internal_default_instance() {
    return reinterpret_cast<const Prop*>(
               &_Prop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(Prop& a, Prop& b) {
    a.Swap(&b);
  }
  inline void Swap(Prop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prop* New() const final {
    return CreateMaybeMessage<Prop>(nullptr);
  }

  Prop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prop& from);
  void MergeFrom(const Prop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Prop";
  }
  protected:
  explicit Prop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kRatioFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kAngleFieldNumber = 6,
    kStatusFieldNumber = 7,
    kMultipleFieldNumber = 8,
    kCritMultiFieldNumber = 9,
    kIngotIdFieldNumber = 10,
    kRemainTimesFieldNumber = 11,
    kTotalTimesFieldNumber = 12,
    kBulletIdFieldNumber = 13,
    kIngotMultiFieldNumber = 14,
    kTridentMultiFieldNumber = 15,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float angle = 6;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 status = 7;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 8;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 crit_multi = 9;
  void clear_crit_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 crit_multi() const;
  void set_crit_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit_multi() const;
  void _internal_set_crit_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ingot_id = 10;
  void clear_ingot_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_id() const;
  void set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_id() const;
  void _internal_set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain_times = 11;
  void clear_remain_times();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_times() const;
  void set_remain_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_times() const;
  void _internal_set_remain_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_times = 12;
  void clear_total_times();
  ::PROTOBUF_NAMESPACE_ID::int32 total_times() const;
  void set_total_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_times() const;
  void _internal_set_total_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_id = 13;
  void clear_bullet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id() const;
  void set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id() const;
  void _internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ingot_multi = 14;
  void clear_ingot_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi() const;
  void set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_multi() const;
  void _internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident_multi = 15;
  void clear_trident_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 trident_multi() const;
  void set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident_multi() const;
  void _internal_set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Prop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  float x_;
  float y_;
  float angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 crit_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident_multi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UserProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UserProp) */ {
 public:
  inline UserProp() : UserProp(nullptr) {}
  virtual ~UserProp();

  UserProp(const UserProp& from);
  UserProp(UserProp&& from) noexcept
    : UserProp() {
    *this = ::std::move(from);
  }

  inline UserProp& operator=(const UserProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserProp& operator=(UserProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserProp& default_instance();

  static inline const UserProp* internal_default_instance() {
    return reinterpret_cast<const UserProp*>(
               &_UserProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(UserProp& a, UserProp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserProp* New() const final {
    return CreateMaybeMessage<UserProp>(nullptr);
  }

  UserProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserProp& from);
  void MergeFrom(const UserProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UserProp";
  }
  protected:
  explicit UserProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 2,
    kChairIdxFieldNumber = 1,
  };
  // repeated .BYDLD.Prop props = 2;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  ::BYDLD::Prop* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Prop >*
      mutable_props();
  private:
  const ::BYDLD::Prop& _internal_props(int index) const;
  ::BYDLD::Prop* _internal_add_props();
  public:
  const ::BYDLD::Prop& props(int index) const;
  ::BYDLD::Prop* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Prop >&
      props() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.UserProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Prop > props_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UsersProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UsersProp) */ {
 public:
  inline UsersProp() : UsersProp(nullptr) {}
  virtual ~UsersProp();

  UsersProp(const UsersProp& from);
  UsersProp(UsersProp&& from) noexcept
    : UsersProp() {
    *this = ::std::move(from);
  }

  inline UsersProp& operator=(const UsersProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersProp& operator=(UsersProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsersProp& default_instance();

  static inline const UsersProp* internal_default_instance() {
    return reinterpret_cast<const UsersProp*>(
               &_UsersProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(UsersProp& a, UsersProp& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsersProp* New() const final {
    return CreateMaybeMessage<UsersProp>(nullptr);
  }

  UsersProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsersProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsersProp& from);
  void MergeFrom(const UsersProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UsersProp";
  }
  protected:
  explicit UsersProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPropFieldNumber = 1,
  };
  // repeated .BYDLD.UserProp user_prop = 1;
  int user_prop_size() const;
  private:
  int _internal_user_prop_size() const;
  public:
  void clear_user_prop();
  ::BYDLD::UserProp* mutable_user_prop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserProp >*
      mutable_user_prop();
  private:
  const ::BYDLD::UserProp& _internal_user_prop(int index) const;
  ::BYDLD::UserProp* _internal_add_user_prop();
  public:
  const ::BYDLD::UserProp& user_prop(int index) const;
  ::BYDLD::UserProp* add_user_prop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserProp >&
      user_prop() const;

  // @@protoc_insertion_point(class_scope:BYDLD.UsersProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserProp > user_prop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SSAwardPoolMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SSAwardPoolMsg) */ {
 public:
  inline SSAwardPoolMsg() : SSAwardPoolMsg(nullptr) {}
  virtual ~SSAwardPoolMsg();

  SSAwardPoolMsg(const SSAwardPoolMsg& from);
  SSAwardPoolMsg(SSAwardPoolMsg&& from) noexcept
    : SSAwardPoolMsg() {
    *this = ::std::move(from);
  }

  inline SSAwardPoolMsg& operator=(const SSAwardPoolMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSAwardPoolMsg& operator=(SSAwardPoolMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSAwardPoolMsg& default_instance();

  static inline const SSAwardPoolMsg* internal_default_instance() {
    return reinterpret_cast<const SSAwardPoolMsg*>(
               &_SSAwardPoolMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SSAwardPoolMsg& a, SSAwardPoolMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SSAwardPoolMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSAwardPoolMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSAwardPoolMsg* New() const final {
    return CreateMaybeMessage<SSAwardPoolMsg>(nullptr);
  }

  SSAwardPoolMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSAwardPoolMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSAwardPoolMsg& from);
  void MergeFrom(const SSAwardPoolMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSAwardPoolMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SSAwardPoolMsg";
  }
  protected:
  explicit SSAwardPoolMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIDFieldNumber = 1,
    kArenaIDFieldNumber = 2,
    kPoolIDFieldNumber = 3,
    kDeltaFieldNumber = 4,
  };
  // int32 uniqueID = 1;
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arenaID = 2;
  void clear_arenaid();
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid() const;
  void set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arenaid() const;
  void _internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 poolID = 3;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poolid() const;
  void _internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delta = 4;
  void clear_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta() const;
  void _internal_set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SSAwardPoolMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSScratchNewYearCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSScratchNewYearCard) */ {
 public:
  inline CSScratchNewYearCard() : CSScratchNewYearCard(nullptr) {}
  virtual ~CSScratchNewYearCard();

  CSScratchNewYearCard(const CSScratchNewYearCard& from);
  CSScratchNewYearCard(CSScratchNewYearCard&& from) noexcept
    : CSScratchNewYearCard() {
    *this = ::std::move(from);
  }

  inline CSScratchNewYearCard& operator=(const CSScratchNewYearCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSScratchNewYearCard& operator=(CSScratchNewYearCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSScratchNewYearCard& default_instance();

  static inline const CSScratchNewYearCard* internal_default_instance() {
    return reinterpret_cast<const CSScratchNewYearCard*>(
               &_CSScratchNewYearCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CSScratchNewYearCard& a, CSScratchNewYearCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CSScratchNewYearCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSScratchNewYearCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSScratchNewYearCard* New() const final {
    return CreateMaybeMessage<CSScratchNewYearCard>(nullptr);
  }

  CSScratchNewYearCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSScratchNewYearCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSScratchNewYearCard& from);
  void MergeFrom(const CSScratchNewYearCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSScratchNewYearCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSScratchNewYearCard";
  }
  protected:
  explicit CSScratchNewYearCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSScratchNewYearCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBuyNewYearCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBuyNewYearCard) */ {
 public:
  inline CSBuyNewYearCard() : CSBuyNewYearCard(nullptr) {}
  virtual ~CSBuyNewYearCard();

  CSBuyNewYearCard(const CSBuyNewYearCard& from);
  CSBuyNewYearCard(CSBuyNewYearCard&& from) noexcept
    : CSBuyNewYearCard() {
    *this = ::std::move(from);
  }

  inline CSBuyNewYearCard& operator=(const CSBuyNewYearCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyNewYearCard& operator=(CSBuyNewYearCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyNewYearCard& default_instance();

  static inline const CSBuyNewYearCard* internal_default_instance() {
    return reinterpret_cast<const CSBuyNewYearCard*>(
               &_CSBuyNewYearCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CSBuyNewYearCard& a, CSBuyNewYearCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyNewYearCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyNewYearCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyNewYearCard* New() const final {
    return CreateMaybeMessage<CSBuyNewYearCard>(nullptr);
  }

  CSBuyNewYearCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyNewYearCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyNewYearCard& from);
  void MergeFrom(const CSBuyNewYearCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyNewYearCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBuyNewYearCard";
  }
  protected:
  explicit CSBuyNewYearCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyCountFieldNumber = 1,
  };
  // int32 buy_count = 1;
  void clear_buy_count();
  ::PROTOBUF_NAMESPACE_ID::int32 buy_count() const;
  void set_buy_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buy_count() const;
  void _internal_set_buy_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBuyNewYearCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 buy_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class NewYearCardMultiple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.NewYearCardMultiple) */ {
 public:
  inline NewYearCardMultiple() : NewYearCardMultiple(nullptr) {}
  virtual ~NewYearCardMultiple();

  NewYearCardMultiple(const NewYearCardMultiple& from);
  NewYearCardMultiple(NewYearCardMultiple&& from) noexcept
    : NewYearCardMultiple() {
    *this = ::std::move(from);
  }

  inline NewYearCardMultiple& operator=(const NewYearCardMultiple& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewYearCardMultiple& operator=(NewYearCardMultiple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewYearCardMultiple& default_instance();

  static inline const NewYearCardMultiple* internal_default_instance() {
    return reinterpret_cast<const NewYearCardMultiple*>(
               &_NewYearCardMultiple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(NewYearCardMultiple& a, NewYearCardMultiple& b) {
    a.Swap(&b);
  }
  inline void Swap(NewYearCardMultiple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewYearCardMultiple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewYearCardMultiple* New() const final {
    return CreateMaybeMessage<NewYearCardMultiple>(nullptr);
  }

  NewYearCardMultiple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewYearCardMultiple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewYearCardMultiple& from);
  void MergeFrom(const NewYearCardMultiple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewYearCardMultiple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.NewYearCardMultiple";
  }
  protected:
  explicit NewYearCardMultiple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardNoFieldNumber = 1,
    kMultipleFieldNumber = 2,
  };
  // string award_no = 1;
  void clear_award_no();
  const std::string& award_no() const;
  void set_award_no(const std::string& value);
  void set_award_no(std::string&& value);
  void set_award_no(const char* value);
  void set_award_no(const char* value, size_t size);
  std::string* mutable_award_no();
  std::string* release_award_no();
  void set_allocated_award_no(std::string* award_no);
  private:
  const std::string& _internal_award_no() const;
  void _internal_set_award_no(const std::string& value);
  std::string* _internal_mutable_award_no();
  public:

  // int32 multiple = 2;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.NewYearCardMultiple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr award_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCScratchNewYearCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCScratchNewYearCard) */ {
 public:
  inline SCScratchNewYearCard() : SCScratchNewYearCard(nullptr) {}
  virtual ~SCScratchNewYearCard();

  SCScratchNewYearCard(const SCScratchNewYearCard& from);
  SCScratchNewYearCard(SCScratchNewYearCard&& from) noexcept
    : SCScratchNewYearCard() {
    *this = ::std::move(from);
  }

  inline SCScratchNewYearCard& operator=(const SCScratchNewYearCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCScratchNewYearCard& operator=(SCScratchNewYearCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCScratchNewYearCard& default_instance();

  static inline const SCScratchNewYearCard* internal_default_instance() {
    return reinterpret_cast<const SCScratchNewYearCard*>(
               &_SCScratchNewYearCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SCScratchNewYearCard& a, SCScratchNewYearCard& b) {
    a.Swap(&b);
  }
  inline void Swap(SCScratchNewYearCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCScratchNewYearCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCScratchNewYearCard* New() const final {
    return CreateMaybeMessage<SCScratchNewYearCard>(nullptr);
  }

  SCScratchNewYearCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCScratchNewYearCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCScratchNewYearCard& from);
  void MergeFrom(const SCScratchNewYearCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCScratchNewYearCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCScratchNewYearCard";
  }
  protected:
  explicit SCScratchNewYearCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplesFieldNumber = 6,
    kResultFieldNumber = 1,
    kChairIdxFieldNumber = 2,
    kCurScoreFieldNumber = 3,
    kBaseFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // repeated .BYDLD.NewYearCardMultiple multiples = 6;
  int multiples_size() const;
  private:
  int _internal_multiples_size() const;
  public:
  void clear_multiples();
  ::BYDLD::NewYearCardMultiple* mutable_multiples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >*
      mutable_multiples();
  private:
  const ::BYDLD::NewYearCardMultiple& _internal_multiples(int index) const;
  ::BYDLD::NewYearCardMultiple* _internal_add_multiples();
  public:
  const ::BYDLD::NewYearCardMultiple& multiples(int index) const;
  ::BYDLD::NewYearCardMultiple* add_multiples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >&
      multiples() const;

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 2;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 cur_score = 3;
  void clear_cur_score();
  ::PROTOBUF_NAMESPACE_ID::int64 cur_score() const;
  void set_cur_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cur_score() const;
  void _internal_set_cur_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 base = 4;
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::int32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCScratchNewYearCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple > multiples_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int64 cur_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSNewYearCardExchange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSNewYearCardExchange) */ {
 public:
  inline CSNewYearCardExchange() : CSNewYearCardExchange(nullptr) {}
  virtual ~CSNewYearCardExchange();

  CSNewYearCardExchange(const CSNewYearCardExchange& from);
  CSNewYearCardExchange(CSNewYearCardExchange&& from) noexcept
    : CSNewYearCardExchange() {
    *this = ::std::move(from);
  }

  inline CSNewYearCardExchange& operator=(const CSNewYearCardExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNewYearCardExchange& operator=(CSNewYearCardExchange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSNewYearCardExchange& default_instance();

  static inline const CSNewYearCardExchange* internal_default_instance() {
    return reinterpret_cast<const CSNewYearCardExchange*>(
               &_CSNewYearCardExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CSNewYearCardExchange& a, CSNewYearCardExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNewYearCardExchange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNewYearCardExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSNewYearCardExchange* New() const final {
    return CreateMaybeMessage<CSNewYearCardExchange>(nullptr);
  }

  CSNewYearCardExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSNewYearCardExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSNewYearCardExchange& from);
  void MergeFrom(const CSNewYearCardExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNewYearCardExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSNewYearCardExchange";
  }
  protected:
  explicit CSNewYearCardExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimesFieldNumber = 1,
    kExchangeAllFieldNumber = 2,
  };
  // int32 times = 1;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool exchange_all = 2;
  void clear_exchange_all();
  bool exchange_all() const;
  void set_exchange_all(bool value);
  private:
  bool _internal_exchange_all() const;
  void _internal_set_exchange_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSNewYearCardExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  bool exchange_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class NewYearCardAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.NewYearCardAward) */ {
 public:
  inline NewYearCardAward() : NewYearCardAward(nullptr) {}
  virtual ~NewYearCardAward();

  NewYearCardAward(const NewYearCardAward& from);
  NewYearCardAward(NewYearCardAward&& from) noexcept
    : NewYearCardAward() {
    *this = ::std::move(from);
  }

  inline NewYearCardAward& operator=(const NewYearCardAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewYearCardAward& operator=(NewYearCardAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewYearCardAward& default_instance();

  static inline const NewYearCardAward* internal_default_instance() {
    return reinterpret_cast<const NewYearCardAward*>(
               &_NewYearCardAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(NewYearCardAward& a, NewYearCardAward& b) {
    a.Swap(&b);
  }
  inline void Swap(NewYearCardAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewYearCardAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewYearCardAward* New() const final {
    return CreateMaybeMessage<NewYearCardAward>(nullptr);
  }

  NewYearCardAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewYearCardAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewYearCardAward& from);
  void MergeFrom(const NewYearCardAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewYearCardAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.NewYearCardAward";
  }
  protected:
  explicit NewYearCardAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplesFieldNumber = 5,
    kCardIdxFieldNumber = 1,
    kAwardFieldNumber = 2,
    kBlessAwardFieldNumber = 3,
    kBaseFieldNumber = 4,
  };
  // repeated .BYDLD.NewYearCardMultiple multiples = 5;
  int multiples_size() const;
  private:
  int _internal_multiples_size() const;
  public:
  void clear_multiples();
  ::BYDLD::NewYearCardMultiple* mutable_multiples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >*
      mutable_multiples();
  private:
  const ::BYDLD::NewYearCardMultiple& _internal_multiples(int index) const;
  ::BYDLD::NewYearCardMultiple* _internal_add_multiples();
  public:
  const ::BYDLD::NewYearCardMultiple& multiples(int index) const;
  ::BYDLD::NewYearCardMultiple* add_multiples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >&
      multiples() const;

  // int32 card_idx = 1;
  void clear_card_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx() const;
  void set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_idx() const;
  void _internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 2;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bless_award = 3;
  void clear_bless_award();
  ::PROTOBUF_NAMESPACE_ID::int32 bless_award() const;
  void set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bless_award() const;
  void _internal_set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 base = 4;
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::int32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.NewYearCardAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple > multiples_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 bless_award_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCNewYearCardExchange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCNewYearCardExchange) */ {
 public:
  inline SCNewYearCardExchange() : SCNewYearCardExchange(nullptr) {}
  virtual ~SCNewYearCardExchange();

  SCNewYearCardExchange(const SCNewYearCardExchange& from);
  SCNewYearCardExchange(SCNewYearCardExchange&& from) noexcept
    : SCNewYearCardExchange() {
    *this = ::std::move(from);
  }

  inline SCNewYearCardExchange& operator=(const SCNewYearCardExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNewYearCardExchange& operator=(SCNewYearCardExchange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNewYearCardExchange& default_instance();

  static inline const SCNewYearCardExchange* internal_default_instance() {
    return reinterpret_cast<const SCNewYearCardExchange*>(
               &_SCNewYearCardExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(SCNewYearCardExchange& a, SCNewYearCardExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNewYearCardExchange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNewYearCardExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNewYearCardExchange* New() const final {
    return CreateMaybeMessage<SCNewYearCardExchange>(nullptr);
  }

  SCNewYearCardExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNewYearCardExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNewYearCardExchange& from);
  void MergeFrom(const SCNewYearCardExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNewYearCardExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCNewYearCardExchange";
  }
  protected:
  explicit SCNewYearCardExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 3,
    kChairIdxFieldNumber = 1,
    kResultFieldNumber = 2,
    kScoreFieldNumber = 4,
    kCountFieldNumber = 5,
    kExchangeAllFieldNumber = 6,
    kReqIdFieldNumber = 7,
  };
  // repeated .BYDLD.NewYearCardAward awards = 3;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::BYDLD::NewYearCardAward* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAward >*
      mutable_awards();
  private:
  const ::BYDLD::NewYearCardAward& _internal_awards(int index) const;
  ::BYDLD::NewYearCardAward* _internal_add_awards();
  public:
  const ::BYDLD::NewYearCardAward& awards(int index) const;
  ::BYDLD::NewYearCardAward* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAward >&
      awards() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool exchange_all = 6;
  void clear_exchange_all();
  bool exchange_all() const;
  void set_exchange_all(bool value);
  private:
  bool _internal_exchange_all() const;
  void _internal_set_exchange_all(bool value);
  public:

  // int32 req_id = 7;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int32 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCNewYearCardExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAward > awards_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  bool exchange_all_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSNewYearCardAwardRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSNewYearCardAwardRecord) */ {
 public:
  inline CSNewYearCardAwardRecord() : CSNewYearCardAwardRecord(nullptr) {}
  virtual ~CSNewYearCardAwardRecord();

  CSNewYearCardAwardRecord(const CSNewYearCardAwardRecord& from);
  CSNewYearCardAwardRecord(CSNewYearCardAwardRecord&& from) noexcept
    : CSNewYearCardAwardRecord() {
    *this = ::std::move(from);
  }

  inline CSNewYearCardAwardRecord& operator=(const CSNewYearCardAwardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNewYearCardAwardRecord& operator=(CSNewYearCardAwardRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSNewYearCardAwardRecord& default_instance();

  static inline const CSNewYearCardAwardRecord* internal_default_instance() {
    return reinterpret_cast<const CSNewYearCardAwardRecord*>(
               &_CSNewYearCardAwardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CSNewYearCardAwardRecord& a, CSNewYearCardAwardRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNewYearCardAwardRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNewYearCardAwardRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSNewYearCardAwardRecord* New() const final {
    return CreateMaybeMessage<CSNewYearCardAwardRecord>(nullptr);
  }

  CSNewYearCardAwardRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSNewYearCardAwardRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSNewYearCardAwardRecord& from);
  void MergeFrom(const CSNewYearCardAwardRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNewYearCardAwardRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSNewYearCardAwardRecord";
  }
  protected:
  explicit CSNewYearCardAwardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSNewYearCardAwardRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class NewYearCardAwardRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.NewYearCardAwardRecord) */ {
 public:
  inline NewYearCardAwardRecord() : NewYearCardAwardRecord(nullptr) {}
  virtual ~NewYearCardAwardRecord();

  NewYearCardAwardRecord(const NewYearCardAwardRecord& from);
  NewYearCardAwardRecord(NewYearCardAwardRecord&& from) noexcept
    : NewYearCardAwardRecord() {
    *this = ::std::move(from);
  }

  inline NewYearCardAwardRecord& operator=(const NewYearCardAwardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewYearCardAwardRecord& operator=(NewYearCardAwardRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewYearCardAwardRecord& default_instance();

  static inline const NewYearCardAwardRecord* internal_default_instance() {
    return reinterpret_cast<const NewYearCardAwardRecord*>(
               &_NewYearCardAwardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(NewYearCardAwardRecord& a, NewYearCardAwardRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(NewYearCardAwardRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewYearCardAwardRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewYearCardAwardRecord* New() const final {
    return CreateMaybeMessage<NewYearCardAwardRecord>(nullptr);
  }

  NewYearCardAwardRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewYearCardAwardRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewYearCardAwardRecord& from);
  void MergeFrom(const NewYearCardAwardRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewYearCardAwardRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.NewYearCardAwardRecord";
  }
  protected:
  explicit NewYearCardAwardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNormalAwardFieldNumber = 2,
    kBlessAwardFieldNumber = 3,
  };
  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 normal_award = 2;
  void clear_normal_award();
  ::PROTOBUF_NAMESPACE_ID::int32 normal_award() const;
  void set_normal_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_normal_award() const;
  void _internal_set_normal_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bless_award = 3;
  void clear_bless_award();
  ::PROTOBUF_NAMESPACE_ID::int32 bless_award() const;
  void set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bless_award() const;
  void _internal_set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.NewYearCardAwardRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 normal_award_;
  ::PROTOBUF_NAMESPACE_ID::int32 bless_award_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCNewYearCardAwardRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCNewYearCardAwardRecord) */ {
 public:
  inline SCNewYearCardAwardRecord() : SCNewYearCardAwardRecord(nullptr) {}
  virtual ~SCNewYearCardAwardRecord();

  SCNewYearCardAwardRecord(const SCNewYearCardAwardRecord& from);
  SCNewYearCardAwardRecord(SCNewYearCardAwardRecord&& from) noexcept
    : SCNewYearCardAwardRecord() {
    *this = ::std::move(from);
  }

  inline SCNewYearCardAwardRecord& operator=(const SCNewYearCardAwardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNewYearCardAwardRecord& operator=(SCNewYearCardAwardRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNewYearCardAwardRecord& default_instance();

  static inline const SCNewYearCardAwardRecord* internal_default_instance() {
    return reinterpret_cast<const SCNewYearCardAwardRecord*>(
               &_SCNewYearCardAwardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(SCNewYearCardAwardRecord& a, SCNewYearCardAwardRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNewYearCardAwardRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNewYearCardAwardRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNewYearCardAwardRecord* New() const final {
    return CreateMaybeMessage<SCNewYearCardAwardRecord>(nullptr);
  }

  SCNewYearCardAwardRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNewYearCardAwardRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNewYearCardAwardRecord& from);
  void MergeFrom(const SCNewYearCardAwardRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNewYearCardAwardRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCNewYearCardAwardRecord";
  }
  protected:
  explicit SCNewYearCardAwardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .BYDLD.NewYearCardAwardRecord records = 2;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::BYDLD::NewYearCardAwardRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAwardRecord >*
      mutable_records();
  private:
  const ::BYDLD::NewYearCardAwardRecord& _internal_records(int index) const;
  ::BYDLD::NewYearCardAwardRecord* _internal_add_records();
  public:
  const ::BYDLD::NewYearCardAwardRecord& records(int index) const;
  ::BYDLD::NewYearCardAwardRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAwardRecord >&
      records() const;

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCNewYearCardAwardRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAwardRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SkillTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SkillTime) */ {
 public:
  inline SkillTime() : SkillTime(nullptr) {}
  virtual ~SkillTime();

  SkillTime(const SkillTime& from);
  SkillTime(SkillTime&& from) noexcept
    : SkillTime() {
    *this = ::std::move(from);
  }

  inline SkillTime& operator=(const SkillTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillTime& operator=(SkillTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillTime& default_instance();

  static inline const SkillTime* internal_default_instance() {
    return reinterpret_cast<const SkillTime*>(
               &_SkillTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(SkillTime& a, SkillTime& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkillTime* New() const final {
    return CreateMaybeMessage<SkillTime>(nullptr);
  }

  SkillTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillTime& from);
  void MergeFrom(const SkillTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SkillTime";
  }
  protected:
  explicit SkillTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SkillTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSaveSkillTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSaveSkillTime) */ {
 public:
  inline CSSaveSkillTime() : CSSaveSkillTime(nullptr) {}
  virtual ~CSSaveSkillTime();

  CSSaveSkillTime(const CSSaveSkillTime& from);
  CSSaveSkillTime(CSSaveSkillTime&& from) noexcept
    : CSSaveSkillTime() {
    *this = ::std::move(from);
  }

  inline CSSaveSkillTime& operator=(const CSSaveSkillTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSaveSkillTime& operator=(CSSaveSkillTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSaveSkillTime& default_instance();

  static inline const CSSaveSkillTime* internal_default_instance() {
    return reinterpret_cast<const CSSaveSkillTime*>(
               &_CSSaveSkillTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CSSaveSkillTime& a, CSSaveSkillTime& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSaveSkillTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSaveSkillTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSaveSkillTime* New() const final {
    return CreateMaybeMessage<CSSaveSkillTime>(nullptr);
  }

  CSSaveSkillTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSaveSkillTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSaveSkillTime& from);
  void MergeFrom(const CSSaveSkillTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSaveSkillTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSaveSkillTime";
  }
  protected:
  explicit CSSaveSkillTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkilTimeFieldNumber = 1,
  };
  // repeated .BYDLD.SkillTime skil_time = 1;
  int skil_time_size() const;
  private:
  int _internal_skil_time_size() const;
  public:
  void clear_skil_time();
  ::BYDLD::SkillTime* mutable_skil_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SkillTime >*
      mutable_skil_time();
  private:
  const ::BYDLD::SkillTime& _internal_skil_time(int index) const;
  ::BYDLD::SkillTime* _internal_add_skil_time();
  public:
  const ::BYDLD::SkillTime& skil_time(int index) const;
  ::BYDLD::SkillTime* add_skil_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SkillTime >&
      skil_time() const;

  // @@protoc_insertion_point(class_scope:BYDLD.CSSaveSkillTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SkillTime > skil_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSuperTridentShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSuperTridentShoot) */ {
 public:
  inline CSSuperTridentShoot() : CSSuperTridentShoot(nullptr) {}
  virtual ~CSSuperTridentShoot();

  CSSuperTridentShoot(const CSSuperTridentShoot& from);
  CSSuperTridentShoot(CSSuperTridentShoot&& from) noexcept
    : CSSuperTridentShoot() {
    *this = ::std::move(from);
  }

  inline CSSuperTridentShoot& operator=(const CSSuperTridentShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSuperTridentShoot& operator=(CSSuperTridentShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSuperTridentShoot& default_instance();

  static inline const CSSuperTridentShoot* internal_default_instance() {
    return reinterpret_cast<const CSSuperTridentShoot*>(
               &_CSSuperTridentShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CSSuperTridentShoot& a, CSSuperTridentShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSuperTridentShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSuperTridentShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSuperTridentShoot* New() const final {
    return CreateMaybeMessage<CSSuperTridentShoot>(nullptr);
  }

  CSSuperTridentShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSuperTridentShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSuperTridentShoot& from);
  void MergeFrom(const CSSuperTridentShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSuperTridentShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSuperTridentShoot";
  }
  protected:
  explicit CSSuperTridentShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSSuperTridentShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSuperTridentShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSuperTridentShoot) */ {
 public:
  inline SCSuperTridentShoot() : SCSuperTridentShoot(nullptr) {}
  virtual ~SCSuperTridentShoot();

  SCSuperTridentShoot(const SCSuperTridentShoot& from);
  SCSuperTridentShoot(SCSuperTridentShoot&& from) noexcept
    : SCSuperTridentShoot() {
    *this = ::std::move(from);
  }

  inline SCSuperTridentShoot& operator=(const SCSuperTridentShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSuperTridentShoot& operator=(SCSuperTridentShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSuperTridentShoot& default_instance();

  static inline const SCSuperTridentShoot* internal_default_instance() {
    return reinterpret_cast<const SCSuperTridentShoot*>(
               &_SCSuperTridentShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(SCSuperTridentShoot& a, SCSuperTridentShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSuperTridentShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSuperTridentShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSuperTridentShoot* New() const final {
    return CreateMaybeMessage<SCSuperTridentShoot>(nullptr);
  }

  SCSuperTridentShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSuperTridentShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSuperTridentShoot& from);
  void MergeFrom(const SCSuperTridentShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSuperTridentShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSuperTridentShoot";
  }
  protected:
  explicit SCSuperTridentShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSuperTridentShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSuperTridentAttack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSuperTridentAttack) */ {
 public:
  inline CSSuperTridentAttack() : CSSuperTridentAttack(nullptr) {}
  virtual ~CSSuperTridentAttack();

  CSSuperTridentAttack(const CSSuperTridentAttack& from);
  CSSuperTridentAttack(CSSuperTridentAttack&& from) noexcept
    : CSSuperTridentAttack() {
    *this = ::std::move(from);
  }

  inline CSSuperTridentAttack& operator=(const CSSuperTridentAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSuperTridentAttack& operator=(CSSuperTridentAttack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSuperTridentAttack& default_instance();

  static inline const CSSuperTridentAttack* internal_default_instance() {
    return reinterpret_cast<const CSSuperTridentAttack*>(
               &_CSSuperTridentAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CSSuperTridentAttack& a, CSSuperTridentAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSuperTridentAttack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSuperTridentAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSuperTridentAttack* New() const final {
    return CreateMaybeMessage<CSSuperTridentAttack>(nullptr);
  }

  CSSuperTridentAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSuperTridentAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSuperTridentAttack& from);
  void MergeFrom(const CSSuperTridentAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSuperTridentAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSuperTridentAttack";
  }
  protected:
  explicit CSSuperTridentAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFishesFieldNumber = 1,
  };
  // repeated int32 screen_fishes = 1;
  int screen_fishes_size() const;
  private:
  int _internal_screen_fishes_size() const;
  public:
  void clear_screen_fishes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen_fishes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_screen_fishes() const;
  void _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_screen_fishes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 screen_fishes(int index) const;
  void set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      screen_fishes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_screen_fishes();

  // @@protoc_insertion_point(class_scope:BYDLD.CSSuperTridentAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > screen_fishes_;
  mutable std::atomic<int> _screen_fishes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CommonResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CommonResp) */ {
 public:
  inline CommonResp() : CommonResp(nullptr) {}
  virtual ~CommonResp();

  CommonResp(const CommonResp& from);
  CommonResp(CommonResp&& from) noexcept
    : CommonResp() {
    *this = ::std::move(from);
  }

  inline CommonResp& operator=(const CommonResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResp& operator=(CommonResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonResp& default_instance();

  static inline const CommonResp* internal_default_instance() {
    return reinterpret_cast<const CommonResp*>(
               &_CommonResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CommonResp& a, CommonResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonResp* New() const final {
    return CreateMaybeMessage<CommonResp>(nullptr);
  }

  CommonResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonResp& from);
  void MergeFrom(const CommonResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CommonResp";
  }
  protected:
  explicit CommonResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CommonResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSAwardPoolRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSAwardPoolRecord) */ {
 public:
  inline CSAwardPoolRecord() : CSAwardPoolRecord(nullptr) {}
  virtual ~CSAwardPoolRecord();

  CSAwardPoolRecord(const CSAwardPoolRecord& from);
  CSAwardPoolRecord(CSAwardPoolRecord&& from) noexcept
    : CSAwardPoolRecord() {
    *this = ::std::move(from);
  }

  inline CSAwardPoolRecord& operator=(const CSAwardPoolRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSAwardPoolRecord& operator=(CSAwardPoolRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSAwardPoolRecord& default_instance();

  static inline const CSAwardPoolRecord* internal_default_instance() {
    return reinterpret_cast<const CSAwardPoolRecord*>(
               &_CSAwardPoolRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CSAwardPoolRecord& a, CSAwardPoolRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSAwardPoolRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSAwardPoolRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSAwardPoolRecord* New() const final {
    return CreateMaybeMessage<CSAwardPoolRecord>(nullptr);
  }

  CSAwardPoolRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSAwardPoolRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSAwardPoolRecord& from);
  void MergeFrom(const CSAwardPoolRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSAwardPoolRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSAwardPoolRecord";
  }
  protected:
  explicit CSAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSAwardPoolRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AwardPoolRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AwardPoolRecord) */ {
 public:
  inline AwardPoolRecord() : AwardPoolRecord(nullptr) {}
  virtual ~AwardPoolRecord();

  AwardPoolRecord(const AwardPoolRecord& from);
  AwardPoolRecord(AwardPoolRecord&& from) noexcept
    : AwardPoolRecord() {
    *this = ::std::move(from);
  }

  inline AwardPoolRecord& operator=(const AwardPoolRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardPoolRecord& operator=(AwardPoolRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardPoolRecord& default_instance();

  static inline const AwardPoolRecord* internal_default_instance() {
    return reinterpret_cast<const AwardPoolRecord*>(
               &_AwardPoolRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(AwardPoolRecord& a, AwardPoolRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardPoolRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardPoolRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardPoolRecord* New() const final {
    return CreateMaybeMessage<AwardPoolRecord>(nullptr);
  }

  AwardPoolRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardPoolRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardPoolRecord& from);
  void MergeFrom(const AwardPoolRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardPoolRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AwardPoolRecord";
  }
  protected:
  explicit AwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNameFieldNumber = 2,
    kPoolIdFieldNumber = 3,
    kAwardFieldNumber = 4,
    kPlayerIdFieldNumber = 5,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 poolId = 3;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poolid() const;
  void _internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 award = 4;
  void clear_award();
  ::PROTOBUF_NAMESPACE_ID::int32 award() const;
  void set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award() const;
  void _internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerId = 5;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AwardPoolRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCAwardPoolRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCAwardPoolRecord) */ {
 public:
  inline SCAwardPoolRecord() : SCAwardPoolRecord(nullptr) {}
  virtual ~SCAwardPoolRecord();

  SCAwardPoolRecord(const SCAwardPoolRecord& from);
  SCAwardPoolRecord(SCAwardPoolRecord&& from) noexcept
    : SCAwardPoolRecord() {
    *this = ::std::move(from);
  }

  inline SCAwardPoolRecord& operator=(const SCAwardPoolRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAwardPoolRecord& operator=(SCAwardPoolRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAwardPoolRecord& default_instance();

  static inline const SCAwardPoolRecord* internal_default_instance() {
    return reinterpret_cast<const SCAwardPoolRecord*>(
               &_SCAwardPoolRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(SCAwardPoolRecord& a, SCAwardPoolRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAwardPoolRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAwardPoolRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAwardPoolRecord* New() const final {
    return CreateMaybeMessage<SCAwardPoolRecord>(nullptr);
  }

  SCAwardPoolRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAwardPoolRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAwardPoolRecord& from);
  void MergeFrom(const SCAwardPoolRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAwardPoolRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCAwardPoolRecord";
  }
  protected:
  explicit SCAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .BYDLD.AwardPoolRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::BYDLD::AwardPoolRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolRecord >*
      mutable_records();
  private:
  const ::BYDLD::AwardPoolRecord& _internal_records(int index) const;
  ::BYDLD::AwardPoolRecord* _internal_add_records();
  public:
  const ::BYDLD::AwardPoolRecord& records(int index) const;
  ::BYDLD::AwardPoolRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCAwardPoolRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolRecord > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSFortuneShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSFortuneShoot) */ {
 public:
  inline CSFortuneShoot() : CSFortuneShoot(nullptr) {}
  virtual ~CSFortuneShoot();

  CSFortuneShoot(const CSFortuneShoot& from);
  CSFortuneShoot(CSFortuneShoot&& from) noexcept
    : CSFortuneShoot() {
    *this = ::std::move(from);
  }

  inline CSFortuneShoot& operator=(const CSFortuneShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSFortuneShoot& operator=(CSFortuneShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSFortuneShoot& default_instance();

  static inline const CSFortuneShoot* internal_default_instance() {
    return reinterpret_cast<const CSFortuneShoot*>(
               &_CSFortuneShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CSFortuneShoot& a, CSFortuneShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSFortuneShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSFortuneShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSFortuneShoot* New() const final {
    return CreateMaybeMessage<CSFortuneShoot>(nullptr);
  }

  CSFortuneShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSFortuneShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSFortuneShoot& from);
  void MergeFrom(const CSFortuneShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSFortuneShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSFortuneShoot";
  }
  protected:
  explicit CSFortuneShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSFortuneShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCFortuneShoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCFortuneShoot) */ {
 public:
  inline SCFortuneShoot() : SCFortuneShoot(nullptr) {}
  virtual ~SCFortuneShoot();

  SCFortuneShoot(const SCFortuneShoot& from);
  SCFortuneShoot(SCFortuneShoot&& from) noexcept
    : SCFortuneShoot() {
    *this = ::std::move(from);
  }

  inline SCFortuneShoot& operator=(const SCFortuneShoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFortuneShoot& operator=(SCFortuneShoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFortuneShoot& default_instance();

  static inline const SCFortuneShoot* internal_default_instance() {
    return reinterpret_cast<const SCFortuneShoot*>(
               &_SCFortuneShoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(SCFortuneShoot& a, SCFortuneShoot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFortuneShoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFortuneShoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFortuneShoot* New() const final {
    return CreateMaybeMessage<SCFortuneShoot>(nullptr);
  }

  SCFortuneShoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFortuneShoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFortuneShoot& from);
  void MergeFrom(const SCFortuneShoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFortuneShoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCFortuneShoot";
  }
  protected:
  explicit SCFortuneShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kCanShootFieldNumber = 2,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool can_shoot = 2;
  void clear_can_shoot();
  bool can_shoot() const;
  void set_can_shoot(bool value);
  private:
  bool _internal_can_shoot() const;
  void _internal_set_can_shoot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCFortuneShoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool can_shoot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class IngotInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.IngotInfo) */ {
 public:
  inline IngotInfo() : IngotInfo(nullptr) {}
  virtual ~IngotInfo();

  IngotInfo(const IngotInfo& from);
  IngotInfo(IngotInfo&& from) noexcept
    : IngotInfo() {
    *this = ::std::move(from);
  }

  inline IngotInfo& operator=(const IngotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IngotInfo& operator=(IngotInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IngotInfo& default_instance();

  static inline const IngotInfo* internal_default_instance() {
    return reinterpret_cast<const IngotInfo*>(
               &_IngotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(IngotInfo& a, IngotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IngotInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IngotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IngotInfo* New() const final {
    return CreateMaybeMessage<IngotInfo>(nullptr);
  }

  IngotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IngotInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IngotInfo& from);
  void MergeFrom(const IngotInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IngotInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.IngotInfo";
  }
  protected:
  explicit IngotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIngotIdFieldNumber = 1,
    kRemainFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // int32 ingot_id = 1;
  void clear_ingot_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_id() const;
  void set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_id() const;
  void _internal_set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 2;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.IngotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncFortune PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncFortune) */ {
 public:
  inline SCSyncFortune() : SCSyncFortune(nullptr) {}
  virtual ~SCSyncFortune();

  SCSyncFortune(const SCSyncFortune& from);
  SCSyncFortune(SCSyncFortune&& from) noexcept
    : SCSyncFortune() {
    *this = ::std::move(from);
  }

  inline SCSyncFortune& operator=(const SCSyncFortune& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncFortune& operator=(SCSyncFortune&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncFortune& default_instance();

  static inline const SCSyncFortune* internal_default_instance() {
    return reinterpret_cast<const SCSyncFortune*>(
               &_SCSyncFortune_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(SCSyncFortune& a, SCSyncFortune& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncFortune* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncFortune* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncFortune* New() const final {
    return CreateMaybeMessage<SCSyncFortune>(nullptr);
  }

  SCSyncFortune* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncFortune>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncFortune& from);
  void MergeFrom(const SCSyncFortune& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncFortune* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncFortune";
  }
  protected:
  explicit SCSyncFortune(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIngotInfoFieldNumber = 1,
  };
  // .BYDLD.IngotInfo ingot_info = 1;
  bool has_ingot_info() const;
  private:
  bool _internal_has_ingot_info() const;
  public:
  void clear_ingot_info();
  const ::BYDLD::IngotInfo& ingot_info() const;
  ::BYDLD::IngotInfo* release_ingot_info();
  ::BYDLD::IngotInfo* mutable_ingot_info();
  void set_allocated_ingot_info(::BYDLD::IngotInfo* ingot_info);
  private:
  const ::BYDLD::IngotInfo& _internal_ingot_info() const;
  ::BYDLD::IngotInfo* _internal_mutable_ingot_info();
  public:
  void unsafe_arena_set_allocated_ingot_info(
      ::BYDLD::IngotInfo* ingot_info);
  ::BYDLD::IngotInfo* unsafe_arena_release_ingot_info();

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncFortune)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::IngotInfo* ingot_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserPoolInfo) */ {
 public:
  inline CSUserPoolInfo() : CSUserPoolInfo(nullptr) {}
  virtual ~CSUserPoolInfo();

  CSUserPoolInfo(const CSUserPoolInfo& from);
  CSUserPoolInfo(CSUserPoolInfo&& from) noexcept
    : CSUserPoolInfo() {
    *this = ::std::move(from);
  }

  inline CSUserPoolInfo& operator=(const CSUserPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolInfo& operator=(CSUserPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolInfo& default_instance();

  static inline const CSUserPoolInfo* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolInfo*>(
               &_CSUserPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(CSUserPoolInfo& a, CSUserPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolInfo* New() const final {
    return CreateMaybeMessage<CSUserPoolInfo>(nullptr);
  }

  CSUserPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolInfo& from);
  void MergeFrom(const CSUserPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserPoolInfo";
  }
  protected:
  explicit CSUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenPageFieldNumber = 1,
  };
  // bool open_page = 1;
  void clear_open_page();
  bool open_page() const;
  void set_open_page(bool value);
  private:
  bool _internal_open_page() const;
  void _internal_set_open_page(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class GoodsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.GoodsInfo) */ {
 public:
  inline GoodsInfo() : GoodsInfo(nullptr) {}
  virtual ~GoodsInfo();

  GoodsInfo(const GoodsInfo& from);
  GoodsInfo(GoodsInfo&& from) noexcept
    : GoodsInfo() {
    *this = ::std::move(from);
  }

  inline GoodsInfo& operator=(const GoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoodsInfo& operator=(GoodsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoodsInfo& default_instance();

  static inline const GoodsInfo* internal_default_instance() {
    return reinterpret_cast<const GoodsInfo*>(
               &_GoodsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(GoodsInfo& a, GoodsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GoodsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoodsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoodsInfo* New() const final {
    return CreateMaybeMessage<GoodsInfo>(nullptr);
  }

  GoodsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoodsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoodsInfo& from);
  void MergeFrom(const GoodsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoodsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.GoodsInfo";
  }
  protected:
  explicit GoodsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kPropNumFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_num = 2;
  void clear_prop_num();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_num() const;
  void set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_num() const;
  void _internal_set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_id = 3;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.GoodsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class UserAwardItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.UserAwardItem) */ {
 public:
  inline UserAwardItem() : UserAwardItem(nullptr) {}
  virtual ~UserAwardItem();

  UserAwardItem(const UserAwardItem& from);
  UserAwardItem(UserAwardItem&& from) noexcept
    : UserAwardItem() {
    *this = ::std::move(from);
  }

  inline UserAwardItem& operator=(const UserAwardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAwardItem& operator=(UserAwardItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAwardItem& default_instance();

  static inline const UserAwardItem* internal_default_instance() {
    return reinterpret_cast<const UserAwardItem*>(
               &_UserAwardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(UserAwardItem& a, UserAwardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAwardItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAwardItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAwardItem* New() const final {
    return CreateMaybeMessage<UserAwardItem>(nullptr);
  }

  UserAwardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAwardItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAwardItem& from);
  void MergeFrom(const UserAwardItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAwardItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.UserAwardItem";
  }
  protected:
  explicit UserAwardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 4,
    kNameFieldNumber = 3,
    kIndexFieldNumber = 1,
    kItemMaxFieldNumber = 2,
  };
  // repeated .BYDLD.GoodsInfo goods = 4;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::BYDLD::GoodsInfo* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GoodsInfo >*
      mutable_goods();
  private:
  const ::BYDLD::GoodsInfo& _internal_goods(int index) const;
  ::BYDLD::GoodsInfo* _internal_add_goods();
  public:
  const ::BYDLD::GoodsInfo& goods(int index) const;
  ::BYDLD::GoodsInfo* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GoodsInfo >&
      goods() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 item_max = 2;
  void clear_item_max();
  ::PROTOBUF_NAMESPACE_ID::int32 item_max() const;
  void set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_max() const;
  void _internal_set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.UserAwardItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GoodsInfo > goods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolInfo) */ {
 public:
  inline SCUserPoolInfo() : SCUserPoolInfo(nullptr) {}
  virtual ~SCUserPoolInfo();

  SCUserPoolInfo(const SCUserPoolInfo& from);
  SCUserPoolInfo(SCUserPoolInfo&& from) noexcept
    : SCUserPoolInfo() {
    *this = ::std::move(from);
  }

  inline SCUserPoolInfo& operator=(const SCUserPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolInfo& operator=(SCUserPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolInfo& default_instance();

  static inline const SCUserPoolInfo* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolInfo*>(
               &_SCUserPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(SCUserPoolInfo& a, SCUserPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolInfo* New() const final {
    return CreateMaybeMessage<SCUserPoolInfo>(nullptr);
  }

  SCUserPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolInfo& from);
  void MergeFrom(const SCUserPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolInfo";
  }
  protected:
  explicit SCUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 6,
    kChairIdxFieldNumber = 1,
    kOpenPageFieldNumber = 2,
    kStatusFieldNumber = 3,
    kCountFieldNumber = 4,
    kPoolMaxFieldNumber = 5,
  };
  // repeated .BYDLD.UserAwardItem items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::BYDLD::UserAwardItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserAwardItem >*
      mutable_items();
  private:
  const ::BYDLD::UserAwardItem& _internal_items(int index) const;
  ::BYDLD::UserAwardItem* _internal_add_items();
  public:
  const ::BYDLD::UserAwardItem& items(int index) const;
  ::BYDLD::UserAwardItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserAwardItem >&
      items() const;

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool open_page = 2;
  void clear_open_page();
  bool open_page() const;
  void set_open_page(bool value);
  private:
  bool _internal_open_page() const;
  void _internal_set_open_page(bool value);
  public:

  // bool status = 3;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pool_max = 5;
  void clear_pool_max();
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max() const;
  void set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool_max() const;
  void _internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserAwardItem > items_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  bool open_page_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserPoolStatus) */ {
 public:
  inline CSUserPoolStatus() : CSUserPoolStatus(nullptr) {}
  virtual ~CSUserPoolStatus();

  CSUserPoolStatus(const CSUserPoolStatus& from);
  CSUserPoolStatus(CSUserPoolStatus&& from) noexcept
    : CSUserPoolStatus() {
    *this = ::std::move(from);
  }

  inline CSUserPoolStatus& operator=(const CSUserPoolStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolStatus& operator=(CSUserPoolStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolStatus& default_instance();

  static inline const CSUserPoolStatus* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolStatus*>(
               &_CSUserPoolStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(CSUserPoolStatus& a, CSUserPoolStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolStatus* New() const final {
    return CreateMaybeMessage<CSUserPoolStatus>(nullptr);
  }

  CSUserPoolStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolStatus& from);
  void MergeFrom(const CSUserPoolStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserPoolStatus";
  }
  protected:
  explicit CSUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
  };
  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserPoolStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolStatus) */ {
 public:
  inline SCUserPoolStatus() : SCUserPoolStatus(nullptr) {}
  virtual ~SCUserPoolStatus();

  SCUserPoolStatus(const SCUserPoolStatus& from);
  SCUserPoolStatus(SCUserPoolStatus&& from) noexcept
    : SCUserPoolStatus() {
    *this = ::std::move(from);
  }

  inline SCUserPoolStatus& operator=(const SCUserPoolStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolStatus& operator=(SCUserPoolStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolStatus& default_instance();

  static inline const SCUserPoolStatus* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolStatus*>(
               &_SCUserPoolStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(SCUserPoolStatus& a, SCUserPoolStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolStatus* New() const final {
    return CreateMaybeMessage<SCUserPoolStatus>(nullptr);
  }

  SCUserPoolStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolStatus& from);
  void MergeFrom(const SCUserPoolStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolStatus";
  }
  protected:
  explicit SCUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
  };
  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolPreDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserPoolPreDraw) */ {
 public:
  inline CSUserPoolPreDraw() : CSUserPoolPreDraw(nullptr) {}
  virtual ~CSUserPoolPreDraw();

  CSUserPoolPreDraw(const CSUserPoolPreDraw& from);
  CSUserPoolPreDraw(CSUserPoolPreDraw&& from) noexcept
    : CSUserPoolPreDraw() {
    *this = ::std::move(from);
  }

  inline CSUserPoolPreDraw& operator=(const CSUserPoolPreDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolPreDraw& operator=(CSUserPoolPreDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolPreDraw& default_instance();

  static inline const CSUserPoolPreDraw* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolPreDraw*>(
               &_CSUserPoolPreDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(CSUserPoolPreDraw& a, CSUserPoolPreDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolPreDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolPreDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolPreDraw* New() const final {
    return CreateMaybeMessage<CSUserPoolPreDraw>(nullptr);
  }

  CSUserPoolPreDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolPreDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolPreDraw& from);
  void MergeFrom(const CSUserPoolPreDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolPreDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserPoolPreDraw";
  }
  protected:
  explicit CSUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserPoolPreDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolPreDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolPreDraw) */ {
 public:
  inline SCUserPoolPreDraw() : SCUserPoolPreDraw(nullptr) {}
  virtual ~SCUserPoolPreDraw();

  SCUserPoolPreDraw(const SCUserPoolPreDraw& from);
  SCUserPoolPreDraw(SCUserPoolPreDraw&& from) noexcept
    : SCUserPoolPreDraw() {
    *this = ::std::move(from);
  }

  inline SCUserPoolPreDraw& operator=(const SCUserPoolPreDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolPreDraw& operator=(SCUserPoolPreDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolPreDraw& default_instance();

  static inline const SCUserPoolPreDraw* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolPreDraw*>(
               &_SCUserPoolPreDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(SCUserPoolPreDraw& a, SCUserPoolPreDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolPreDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolPreDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolPreDraw* New() const final {
    return CreateMaybeMessage<SCUserPoolPreDraw>(nullptr);
  }

  SCUserPoolPreDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolPreDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolPreDraw& from);
  void MergeFrom(const SCUserPoolPreDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolPreDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolPreDraw";
  }
  protected:
  explicit SCUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolPreDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserPoolDraw) */ {
 public:
  inline CSUserPoolDraw() : CSUserPoolDraw(nullptr) {}
  virtual ~CSUserPoolDraw();

  CSUserPoolDraw(const CSUserPoolDraw& from);
  CSUserPoolDraw(CSUserPoolDraw&& from) noexcept
    : CSUserPoolDraw() {
    *this = ::std::move(from);
  }

  inline CSUserPoolDraw& operator=(const CSUserPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolDraw& operator=(CSUserPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolDraw& default_instance();

  static inline const CSUserPoolDraw* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolDraw*>(
               &_CSUserPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(CSUserPoolDraw& a, CSUserPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolDraw* New() const final {
    return CreateMaybeMessage<CSUserPoolDraw>(nullptr);
  }

  CSUserPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolDraw& from);
  void MergeFrom(const CSUserPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserPoolDraw";
  }
  protected:
  explicit CSUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolDraw) */ {
 public:
  inline SCUserPoolDraw() : SCUserPoolDraw(nullptr) {}
  virtual ~SCUserPoolDraw();

  SCUserPoolDraw(const SCUserPoolDraw& from);
  SCUserPoolDraw(SCUserPoolDraw&& from) noexcept
    : SCUserPoolDraw() {
    *this = ::std::move(from);
  }

  inline SCUserPoolDraw& operator=(const SCUserPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolDraw& operator=(SCUserPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolDraw& default_instance();

  static inline const SCUserPoolDraw* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolDraw*>(
               &_SCUserPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(SCUserPoolDraw& a, SCUserPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolDraw* New() const final {
    return CreateMaybeMessage<SCUserPoolDraw>(nullptr);
  }

  SCUserPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolDraw& from);
  void MergeFrom(const SCUserPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolDraw";
  }
  protected:
  explicit SCUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 2,
    kAwardFieldNumber = 3,
    kAwardCntFieldNumber = 4,
    kChairIdxFieldNumber = 1,
  };
  // repeated .BYDLD.Object2 goods = 2;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::BYDLD::Object2* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object2 >*
      mutable_goods();
  private:
  const ::BYDLD::Object2& _internal_goods(int index) const;
  ::BYDLD::Object2* _internal_add_goods();
  public:
  const ::BYDLD::Object2& goods(int index) const;
  ::BYDLD::Object2* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object2 >&
      goods() const;

  // .BYDLD.Object2 award = 3;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  const ::BYDLD::Object2& award() const;
  ::BYDLD::Object2* release_award();
  ::BYDLD::Object2* mutable_award();
  void set_allocated_award(::BYDLD::Object2* award);
  private:
  const ::BYDLD::Object2& _internal_award() const;
  ::BYDLD::Object2* _internal_mutable_award();
  public:
  void unsafe_arena_set_allocated_award(
      ::BYDLD::Object2* award);
  ::BYDLD::Object2* unsafe_arena_release_award();

  // .BYDLD.Object3 award_cnt = 4;
  bool has_award_cnt() const;
  private:
  bool _internal_has_award_cnt() const;
  public:
  void clear_award_cnt();
  const ::BYDLD::Object3& award_cnt() const;
  ::BYDLD::Object3* release_award_cnt();
  ::BYDLD::Object3* mutable_award_cnt();
  void set_allocated_award_cnt(::BYDLD::Object3* award_cnt);
  private:
  const ::BYDLD::Object3& _internal_award_cnt() const;
  ::BYDLD::Object3* _internal_mutable_award_cnt();
  public:
  void unsafe_arena_set_allocated_award_cnt(
      ::BYDLD::Object3* award_cnt);
  ::BYDLD::Object3* unsafe_arena_release_award_cnt();

  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object2 > goods_;
  ::BYDLD::Object2* award_;
  ::BYDLD::Object3* award_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolAdd) */ {
 public:
  inline SCUserPoolAdd() : SCUserPoolAdd(nullptr) {}
  virtual ~SCUserPoolAdd();

  SCUserPoolAdd(const SCUserPoolAdd& from);
  SCUserPoolAdd(SCUserPoolAdd&& from) noexcept
    : SCUserPoolAdd() {
    *this = ::std::move(from);
  }

  inline SCUserPoolAdd& operator=(const SCUserPoolAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolAdd& operator=(SCUserPoolAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolAdd& default_instance();

  static inline const SCUserPoolAdd* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolAdd*>(
               &_SCUserPoolAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(SCUserPoolAdd& a, SCUserPoolAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolAdd* New() const final {
    return CreateMaybeMessage<SCUserPoolAdd>(nullptr);
  }

  SCUserPoolAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolAdd& from);
  void MergeFrom(const SCUserPoolAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolAdd";
  }
  protected:
  explicit SCUserPoolAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelNameFieldNumber = 6,
    kAddFieldNumber = 1,
    kCountFieldNumber = 2,
    kFirstMaxFieldNumber = 3,
    kPoolMaxFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string level_name = 6;
  void clear_level_name();
  const std::string& level_name() const;
  void set_level_name(const std::string& value);
  void set_level_name(std::string&& value);
  void set_level_name(const char* value);
  void set_level_name(const char* value, size_t size);
  std::string* mutable_level_name();
  std::string* release_level_name();
  void set_allocated_level_name(std::string* level_name);
  private:
  const std::string& _internal_level_name() const;
  void _internal_set_level_name(const std::string& value);
  std::string* _internal_mutable_level_name();
  public:

  // int32 add = 1;
  void clear_add();
  ::PROTOBUF_NAMESPACE_ID::int32 add() const;
  void set_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add() const;
  void _internal_set_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 first_max = 3;
  void clear_first_max();
  ::PROTOBUF_NAMESPACE_ID::int32 first_max() const;
  void set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_first_max() const;
  void _internal_set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pool_max = 4;
  void clear_pool_max();
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max() const;
  void set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool_max() const;
  void _internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 5;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 pool_max_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class ResultRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.ResultRank) */ {
 public:
  inline ResultRank() : ResultRank(nullptr) {}
  virtual ~ResultRank();

  ResultRank(const ResultRank& from);
  ResultRank(ResultRank&& from) noexcept
    : ResultRank() {
    *this = ::std::move(from);
  }

  inline ResultRank& operator=(const ResultRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultRank& operator=(ResultRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultRank& default_instance();

  static inline const ResultRank* internal_default_instance() {
    return reinterpret_cast<const ResultRank*>(
               &_ResultRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(ResultRank& a, ResultRank& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultRank* New() const final {
    return CreateMaybeMessage<ResultRank>(nullptr);
  }

  ResultRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultRank& from);
  void MergeFrom(const ResultRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.ResultRank";
  }
  protected:
  explicit ResultRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdxFieldNumber = 1,
  };
  // string icon = 2;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.ResultRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCMatchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCMatchResult) */ {
 public:
  inline SCMatchResult() : SCMatchResult(nullptr) {}
  virtual ~SCMatchResult();

  SCMatchResult(const SCMatchResult& from);
  SCMatchResult(SCMatchResult&& from) noexcept
    : SCMatchResult() {
    *this = ::std::move(from);
  }

  inline SCMatchResult& operator=(const SCMatchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchResult& operator=(SCMatchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchResult& default_instance();

  static inline const SCMatchResult* internal_default_instance() {
    return reinterpret_cast<const SCMatchResult*>(
               &_SCMatchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(SCMatchResult& a, SCMatchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchResult* New() const final {
    return CreateMaybeMessage<SCMatchResult>(nullptr);
  }

  SCMatchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchResult& from);
  void MergeFrom(const SCMatchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCMatchResult";
  }
  protected:
  explicit SCMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankListFieldNumber = 2,
    kMatchGoodsFieldNumber = 7,
    kPackGoodsFieldNumber = 8,
    kLuckyGoodsFieldNumber = 9,
    kMatchIdFieldNumber = 1,
    kIsPackFieldNumber = 3,
    kOneselfRankFieldNumber = 4,
    kAdditionSourceFieldNumber = 5,
    kReawardAdditionFieldNumber = 6,
  };
  // repeated .BYDLD.ResultRank rank_list = 2;
  int rank_list_size() const;
  private:
  int _internal_rank_list_size() const;
  public:
  void clear_rank_list();
  ::BYDLD::ResultRank* mutable_rank_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ResultRank >*
      mutable_rank_list();
  private:
  const ::BYDLD::ResultRank& _internal_rank_list(int index) const;
  ::BYDLD::ResultRank* _internal_add_rank_list();
  public:
  const ::BYDLD::ResultRank& rank_list(int index) const;
  ::BYDLD::ResultRank* add_rank_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ResultRank >&
      rank_list() const;

  // repeated .BYDLD.Object3 match_goods = 7;
  int match_goods_size() const;
  private:
  int _internal_match_goods_size() const;
  public:
  void clear_match_goods();
  ::BYDLD::Object3* mutable_match_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_match_goods();
  private:
  const ::BYDLD::Object3& _internal_match_goods(int index) const;
  ::BYDLD::Object3* _internal_add_match_goods();
  public:
  const ::BYDLD::Object3& match_goods(int index) const;
  ::BYDLD::Object3* add_match_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      match_goods() const;

  // repeated .BYDLD.Object3 pack_goods = 8;
  int pack_goods_size() const;
  private:
  int _internal_pack_goods_size() const;
  public:
  void clear_pack_goods();
  ::BYDLD::Object3* mutable_pack_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_pack_goods();
  private:
  const ::BYDLD::Object3& _internal_pack_goods(int index) const;
  ::BYDLD::Object3* _internal_add_pack_goods();
  public:
  const ::BYDLD::Object3& pack_goods(int index) const;
  ::BYDLD::Object3* add_pack_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      pack_goods() const;

  // repeated .BYDLD.Object3 lucky_goods = 9;
  int lucky_goods_size() const;
  private:
  int _internal_lucky_goods_size() const;
  public:
  void clear_lucky_goods();
  ::BYDLD::Object3* mutable_lucky_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_lucky_goods();
  private:
  const ::BYDLD::Object3& _internal_lucky_goods(int index) const;
  ::BYDLD::Object3* _internal_add_lucky_goods();
  public:
  const ::BYDLD::Object3& lucky_goods(int index) const;
  ::BYDLD::Object3* add_lucky_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      lucky_goods() const;

  // int32 matchId = 1;
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::int32 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isPack = 3;
  void clear_ispack();
  bool ispack() const;
  void set_ispack(bool value);
  private:
  bool _internal_ispack() const;
  void _internal_set_ispack(bool value);
  public:

  // int32 oneself_rank = 4;
  void clear_oneself_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 oneself_rank() const;
  void set_oneself_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oneself_rank() const;
  void _internal_set_oneself_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 addition_source = 5;
  void clear_addition_source();
  ::PROTOBUF_NAMESPACE_ID::int32 addition_source() const;
  void set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addition_source() const;
  void _internal_set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reaward_addition = 6;
  void clear_reaward_addition();
  ::PROTOBUF_NAMESPACE_ID::int32 reaward_addition() const;
  void set_reaward_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reaward_addition() const;
  void _internal_set_reaward_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCMatchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ResultRank > rank_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > match_goods_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > pack_goods_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > lucky_goods_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchid_;
  bool ispack_;
  ::PROTOBUF_NAMESPACE_ID::int32 oneself_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 addition_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 reaward_addition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class MatchPackAddition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.MatchPackAddition) */ {
 public:
  inline MatchPackAddition() : MatchPackAddition(nullptr) {}
  virtual ~MatchPackAddition();

  MatchPackAddition(const MatchPackAddition& from);
  MatchPackAddition(MatchPackAddition&& from) noexcept
    : MatchPackAddition() {
    *this = ::std::move(from);
  }

  inline MatchPackAddition& operator=(const MatchPackAddition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPackAddition& operator=(MatchPackAddition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchPackAddition& default_instance();

  static inline const MatchPackAddition* internal_default_instance() {
    return reinterpret_cast<const MatchPackAddition*>(
               &_MatchPackAddition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(MatchPackAddition& a, MatchPackAddition& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPackAddition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPackAddition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchPackAddition* New() const final {
    return CreateMaybeMessage<MatchPackAddition>(nullptr);
  }

  MatchPackAddition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchPackAddition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchPackAddition& from);
  void MergeFrom(const MatchPackAddition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPackAddition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.MatchPackAddition";
  }
  protected:
  explicit MatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIsBuyFieldNumber = 2,
    kScoreAdditionFieldNumber = 3,
    kReawardAdditionFieldNumber = 4,
    kCardFieldNumber = 5,
    kSecFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool is_buy = 2;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // float score_addition = 3;
  void clear_score_addition();
  float score_addition() const;
  void set_score_addition(float value);
  private:
  float _internal_score_addition() const;
  void _internal_set_score_addition(float value);
  public:

  // float reaward_addition = 4;
  void clear_reaward_addition();
  float reaward_addition() const;
  void set_reaward_addition(float value);
  private:
  float _internal_reaward_addition() const;
  void _internal_set_reaward_addition(float value);
  public:

  // int32 card = 5;
  void clear_card();
  ::PROTOBUF_NAMESPACE_ID::int32 card() const;
  void set_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card() const;
  void _internal_set_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec = 6;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.MatchPackAddition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool is_buy_;
  float score_addition_;
  float reaward_addition_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSMatchPackAddition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSMatchPackAddition) */ {
 public:
  inline CSMatchPackAddition() : CSMatchPackAddition(nullptr) {}
  virtual ~CSMatchPackAddition();

  CSMatchPackAddition(const CSMatchPackAddition& from);
  CSMatchPackAddition(CSMatchPackAddition&& from) noexcept
    : CSMatchPackAddition() {
    *this = ::std::move(from);
  }

  inline CSMatchPackAddition& operator=(const CSMatchPackAddition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMatchPackAddition& operator=(CSMatchPackAddition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMatchPackAddition& default_instance();

  static inline const CSMatchPackAddition* internal_default_instance() {
    return reinterpret_cast<const CSMatchPackAddition*>(
               &_CSMatchPackAddition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(CSMatchPackAddition& a, CSMatchPackAddition& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMatchPackAddition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMatchPackAddition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMatchPackAddition* New() const final {
    return CreateMaybeMessage<CSMatchPackAddition>(nullptr);
  }

  CSMatchPackAddition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMatchPackAddition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMatchPackAddition& from);
  void MergeFrom(const CSMatchPackAddition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMatchPackAddition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSMatchPackAddition";
  }
  protected:
  explicit CSMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSMatchPackAddition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCMatchPackAddition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCMatchPackAddition) */ {
 public:
  inline SCMatchPackAddition() : SCMatchPackAddition(nullptr) {}
  virtual ~SCMatchPackAddition();

  SCMatchPackAddition(const SCMatchPackAddition& from);
  SCMatchPackAddition(SCMatchPackAddition&& from) noexcept
    : SCMatchPackAddition() {
    *this = ::std::move(from);
  }

  inline SCMatchPackAddition& operator=(const SCMatchPackAddition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchPackAddition& operator=(SCMatchPackAddition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchPackAddition& default_instance();

  static inline const SCMatchPackAddition* internal_default_instance() {
    return reinterpret_cast<const SCMatchPackAddition*>(
               &_SCMatchPackAddition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(SCMatchPackAddition& a, SCMatchPackAddition& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchPackAddition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchPackAddition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchPackAddition* New() const final {
    return CreateMaybeMessage<SCMatchPackAddition>(nullptr);
  }

  SCMatchPackAddition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchPackAddition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchPackAddition& from);
  void MergeFrom(const SCMatchPackAddition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchPackAddition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCMatchPackAddition";
  }
  protected:
  explicit SCMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionFieldNumber = 1,
  };
  // repeated .BYDLD.MatchPackAddition addition = 1;
  int addition_size() const;
  private:
  int _internal_addition_size() const;
  public:
  void clear_addition();
  ::BYDLD::MatchPackAddition* mutable_addition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchPackAddition >*
      mutable_addition();
  private:
  const ::BYDLD::MatchPackAddition& _internal_addition(int index) const;
  ::BYDLD::MatchPackAddition* _internal_add_addition();
  public:
  const ::BYDLD::MatchPackAddition& addition(int index) const;
  ::BYDLD::MatchPackAddition* add_addition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchPackAddition >&
      addition() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCMatchPackAddition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchPackAddition > addition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCMatchPackInvail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCMatchPackInvail) */ {
 public:
  inline SCMatchPackInvail() : SCMatchPackInvail(nullptr) {}
  virtual ~SCMatchPackInvail();

  SCMatchPackInvail(const SCMatchPackInvail& from);
  SCMatchPackInvail(SCMatchPackInvail&& from) noexcept
    : SCMatchPackInvail() {
    *this = ::std::move(from);
  }

  inline SCMatchPackInvail& operator=(const SCMatchPackInvail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMatchPackInvail& operator=(SCMatchPackInvail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMatchPackInvail& default_instance();

  static inline const SCMatchPackInvail* internal_default_instance() {
    return reinterpret_cast<const SCMatchPackInvail*>(
               &_SCMatchPackInvail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(SCMatchPackInvail& a, SCMatchPackInvail& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMatchPackInvail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMatchPackInvail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMatchPackInvail* New() const final {
    return CreateMaybeMessage<SCMatchPackInvail>(nullptr);
  }

  SCMatchPackInvail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMatchPackInvail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMatchPackInvail& from);
  void MergeFrom(const SCMatchPackInvail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMatchPackInvail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCMatchPackInvail";
  }
  protected:
  explicit SCMatchPackInvail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // string packId = 1;
  void clear_packid();
  const std::string& packid() const;
  void set_packid(const std::string& value);
  void set_packid(std::string&& value);
  void set_packid(const char* value);
  void set_packid(const char* value, size_t size);
  std::string* mutable_packid();
  std::string* release_packid();
  void set_allocated_packid(std::string* packid);
  private:
  const std::string& _internal_packid() const;
  void _internal_set_packid(const std::string& value);
  std::string* _internal_mutable_packid();
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCMatchPackInvail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class HttpResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.HttpResult) */ {
 public:
  inline HttpResult() : HttpResult(nullptr) {}
  virtual ~HttpResult();

  HttpResult(const HttpResult& from);
  HttpResult(HttpResult&& from) noexcept
    : HttpResult() {
    *this = ::std::move(from);
  }

  inline HttpResult& operator=(const HttpResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResult& operator=(HttpResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HttpResult& default_instance();

  static inline const HttpResult* internal_default_instance() {
    return reinterpret_cast<const HttpResult*>(
               &_HttpResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(HttpResult& a, HttpResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpResult* New() const final {
    return CreateMaybeMessage<HttpResult>(nullptr);
  }

  HttpResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HttpResult& from);
  void MergeFrom(const HttpResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.HttpResult";
  }
  protected:
  explicit HttpResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kEnFieldNumber = 1,
  };
  // string Data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 En = 1;
  void clear_en();
  ::PROTOBUF_NAMESPACE_ID::int32 en() const;
  void set_en(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_en() const;
  void _internal_set_en(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.HttpResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 en_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHBonusPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHBonusPool) */ {
 public:
  inline CSHBonusPool() : CSHBonusPool(nullptr) {}
  virtual ~CSHBonusPool();

  CSHBonusPool(const CSHBonusPool& from);
  CSHBonusPool(CSHBonusPool&& from) noexcept
    : CSHBonusPool() {
    *this = ::std::move(from);
  }

  inline CSHBonusPool& operator=(const CSHBonusPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHBonusPool& operator=(CSHBonusPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHBonusPool& default_instance();

  static inline const CSHBonusPool* internal_default_instance() {
    return reinterpret_cast<const CSHBonusPool*>(
               &_CSHBonusPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(CSHBonusPool& a, CSHBonusPool& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHBonusPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHBonusPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHBonusPool* New() const final {
    return CreateMaybeMessage<CSHBonusPool>(nullptr);
  }

  CSHBonusPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHBonusPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHBonusPool& from);
  void MergeFrom(const CSHBonusPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHBonusPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHBonusPool";
  }
  protected:
  explicit CSHBonusPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMathcIdFieldNumber = 1,
    kTimeIdFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
  };
  // int32 mathcId = 1;
  void clear_mathcid();
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid() const;
  void set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mathcid() const;
  void _internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeId = 2;
  void clear_timeid();
  ::PROTOBUF_NAMESPACE_ID::int32 timeid() const;
  void set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeid() const;
  void _internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerId = 3;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHBonusPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class HBonusPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.HBonusPool) */ {
 public:
  inline HBonusPool() : HBonusPool(nullptr) {}
  virtual ~HBonusPool();

  HBonusPool(const HBonusPool& from);
  HBonusPool(HBonusPool&& from) noexcept
    : HBonusPool() {
    *this = ::std::move(from);
  }

  inline HBonusPool& operator=(const HBonusPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBonusPool& operator=(HBonusPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBonusPool& default_instance();

  static inline const HBonusPool* internal_default_instance() {
    return reinterpret_cast<const HBonusPool*>(
               &_HBonusPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(HBonusPool& a, HBonusPool& b) {
    a.Swap(&b);
  }
  inline void Swap(HBonusPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HBonusPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HBonusPool* New() const final {
    return CreateMaybeMessage<HBonusPool>(nullptr);
  }

  HBonusPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBonusPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBonusPool& from);
  void MergeFrom(const HBonusPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBonusPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.HBonusPool";
  }
  protected:
  explicit HBonusPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.HBonusPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHBonusPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHBonusPool) */ {
 public:
  inline SCHBonusPool() : SCHBonusPool(nullptr) {}
  virtual ~SCHBonusPool();

  SCHBonusPool(const SCHBonusPool& from);
  SCHBonusPool(SCHBonusPool&& from) noexcept
    : SCHBonusPool() {
    *this = ::std::move(from);
  }

  inline SCHBonusPool& operator=(const SCHBonusPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHBonusPool& operator=(SCHBonusPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHBonusPool& default_instance();

  static inline const SCHBonusPool* internal_default_instance() {
    return reinterpret_cast<const SCHBonusPool*>(
               &_SCHBonusPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(SCHBonusPool& a, SCHBonusPool& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHBonusPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHBonusPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHBonusPool* New() const final {
    return CreateMaybeMessage<SCHBonusPool>(nullptr);
  }

  SCHBonusPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHBonusPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHBonusPool& from);
  void MergeFrom(const SCHBonusPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHBonusPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHBonusPool";
  }
  protected:
  explicit SCHBonusPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
  };
  // repeated .BYDLD.HBonusPool pool = 1;
  int pool_size() const;
  private:
  int _internal_pool_size() const;
  public:
  void clear_pool();
  ::BYDLD::HBonusPool* mutable_pool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HBonusPool >*
      mutable_pool();
  private:
  const ::BYDLD::HBonusPool& _internal_pool(int index) const;
  ::BYDLD::HBonusPool* _internal_add_pool();
  public:
  const ::BYDLD::HBonusPool& pool(int index) const;
  ::BYDLD::HBonusPool* add_pool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HBonusPool >&
      pool() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCHBonusPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HBonusPool > pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHRankBar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHRankBar) */ {
 public:
  inline CSHRankBar() : CSHRankBar(nullptr) {}
  virtual ~CSHRankBar();

  CSHRankBar(const CSHRankBar& from);
  CSHRankBar(CSHRankBar&& from) noexcept
    : CSHRankBar() {
    *this = ::std::move(from);
  }

  inline CSHRankBar& operator=(const CSHRankBar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHRankBar& operator=(CSHRankBar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHRankBar& default_instance();

  static inline const CSHRankBar* internal_default_instance() {
    return reinterpret_cast<const CSHRankBar*>(
               &_CSHRankBar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(CSHRankBar& a, CSHRankBar& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHRankBar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHRankBar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHRankBar* New() const final {
    return CreateMaybeMessage<CSHRankBar>(nullptr);
  }

  CSHRankBar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHRankBar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHRankBar& from);
  void MergeFrom(const CSHRankBar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHRankBar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHRankBar";
  }
  protected:
  explicit CSHRankBar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMathcIdFieldNumber = 1,
    kTimeIdFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
  };
  // int32 mathcId = 1;
  void clear_mathcid();
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid() const;
  void set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mathcid() const;
  void _internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeId = 2;
  void clear_timeid();
  ::PROTOBUF_NAMESPACE_ID::int32 timeid() const;
  void set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeid() const;
  void _internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerId = 3;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHRankBar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHRankBar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHRankBar) */ {
 public:
  inline SCHRankBar() : SCHRankBar(nullptr) {}
  virtual ~SCHRankBar();

  SCHRankBar(const SCHRankBar& from);
  SCHRankBar(SCHRankBar&& from) noexcept
    : SCHRankBar() {
    *this = ::std::move(from);
  }

  inline SCHRankBar& operator=(const SCHRankBar& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHRankBar& operator=(SCHRankBar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHRankBar& default_instance();

  static inline const SCHRankBar* internal_default_instance() {
    return reinterpret_cast<const SCHRankBar*>(
               &_SCHRankBar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(SCHRankBar& a, SCHRankBar& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHRankBar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHRankBar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHRankBar* New() const final {
    return CreateMaybeMessage<SCHRankBar>(nullptr);
  }

  SCHRankBar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHRankBar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHRankBar& from);
  void MergeFrom(const SCHRankBar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHRankBar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHRankBar";
  }
  protected:
  explicit SCHRankBar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxFieldNumber = 1,
    kTotalFieldNumber = 2,
    kReawardFieldNumber = 3,
  };
  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reaward = 3;
  void clear_reaward();
  ::PROTOBUF_NAMESPACE_ID::int32 reaward() const;
  void set_reaward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reaward() const;
  void _internal_set_reaward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHRankBar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 reaward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class RealRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.RealRank) */ {
 public:
  inline RealRank() : RealRank(nullptr) {}
  virtual ~RealRank();

  RealRank(const RealRank& from);
  RealRank(RealRank&& from) noexcept
    : RealRank() {
    *this = ::std::move(from);
  }

  inline RealRank& operator=(const RealRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealRank& operator=(RealRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealRank& default_instance();

  static inline const RealRank* internal_default_instance() {
    return reinterpret_cast<const RealRank*>(
               &_RealRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(RealRank& a, RealRank& b) {
    a.Swap(&b);
  }
  inline void Swap(RealRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealRank* New() const final {
    return CreateMaybeMessage<RealRank>(nullptr);
  }

  RealRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealRank& from);
  void MergeFrom(const RealRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.RealRank";
  }
  protected:
  explicit RealRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 5,
    kIconFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdxFieldNumber = 1,
    kScoreFieldNumber = 4,
  };
  // repeated .BYDLD.Object3 goods = 5;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::BYDLD::Object3* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_goods();
  private:
  const ::BYDLD::Object3& _internal_goods(int index) const;
  ::BYDLD::Object3* _internal_add_goods();
  public:
  const ::BYDLD::Object3& goods(int index) const;
  ::BYDLD::Object3* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      goods() const;

  // string icon = 2;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.RealRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > goods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHRealRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHRealRank) */ {
 public:
  inline CSHRealRank() : CSHRealRank(nullptr) {}
  virtual ~CSHRealRank();

  CSHRealRank(const CSHRealRank& from);
  CSHRealRank(CSHRealRank&& from) noexcept
    : CSHRealRank() {
    *this = ::std::move(from);
  }

  inline CSHRealRank& operator=(const CSHRealRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHRealRank& operator=(CSHRealRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHRealRank& default_instance();

  static inline const CSHRealRank* internal_default_instance() {
    return reinterpret_cast<const CSHRealRank*>(
               &_CSHRealRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CSHRealRank& a, CSHRealRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHRealRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHRealRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHRealRank* New() const final {
    return CreateMaybeMessage<CSHRealRank>(nullptr);
  }

  CSHRealRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHRealRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHRealRank& from);
  void MergeFrom(const CSHRealRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHRealRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHRealRank";
  }
  protected:
  explicit CSHRealRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMathcIdFieldNumber = 2,
    kTimeIdFieldNumber = 3,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mathcId = 2;
  void clear_mathcid();
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid() const;
  void set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mathcid() const;
  void _internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeId = 3;
  void clear_timeid();
  ::PROTOBUF_NAMESPACE_ID::int32 timeid() const;
  void set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeid() const;
  void _internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHRealRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHRealRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHRealRank) */ {
 public:
  inline SCHRealRank() : SCHRealRank(nullptr) {}
  virtual ~SCHRealRank();

  SCHRealRank(const SCHRealRank& from);
  SCHRealRank(SCHRealRank&& from) noexcept
    : SCHRealRank() {
    *this = ::std::move(from);
  }

  inline SCHRealRank& operator=(const SCHRealRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHRealRank& operator=(SCHRealRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHRealRank& default_instance();

  static inline const SCHRealRank* internal_default_instance() {
    return reinterpret_cast<const SCHRealRank*>(
               &_SCHRealRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(SCHRealRank& a, SCHRealRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHRealRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHRealRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHRealRank* New() const final {
    return CreateMaybeMessage<SCHRealRank>(nullptr);
  }

  SCHRealRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHRealRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHRealRank& from);
  void MergeFrom(const SCHRealRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHRealRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHRealRank";
  }
  protected:
  explicit SCHRealRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealRankFieldNumber = 1,
    kOnselfRankFieldNumber = 2,
    kTotalNumFieldNumber = 3,
    kScoreAdditionFieldNumber = 4,
    kRewardAdditionFieldNumber = 5,
    kCardAdditionFieldNumber = 6,
    kVipAdditionFieldNumber = 7,
  };
  // repeated .BYDLD.RealRank real_rank = 1;
  int real_rank_size() const;
  private:
  int _internal_real_rank_size() const;
  public:
  void clear_real_rank();
  ::BYDLD::RealRank* mutable_real_rank(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RealRank >*
      mutable_real_rank();
  private:
  const ::BYDLD::RealRank& _internal_real_rank(int index) const;
  ::BYDLD::RealRank* _internal_add_real_rank();
  public:
  const ::BYDLD::RealRank& real_rank(int index) const;
  ::BYDLD::RealRank* add_real_rank();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RealRank >&
      real_rank() const;

  // .BYDLD.RealRank onself_rank = 2;
  bool has_onself_rank() const;
  private:
  bool _internal_has_onself_rank() const;
  public:
  void clear_onself_rank();
  const ::BYDLD::RealRank& onself_rank() const;
  ::BYDLD::RealRank* release_onself_rank();
  ::BYDLD::RealRank* mutable_onself_rank();
  void set_allocated_onself_rank(::BYDLD::RealRank* onself_rank);
  private:
  const ::BYDLD::RealRank& _internal_onself_rank() const;
  ::BYDLD::RealRank* _internal_mutable_onself_rank();
  public:
  void unsafe_arena_set_allocated_onself_rank(
      ::BYDLD::RealRank* onself_rank);
  ::BYDLD::RealRank* unsafe_arena_release_onself_rank();

  // int32 total_num = 3;
  void clear_total_num();
  ::PROTOBUF_NAMESPACE_ID::int32 total_num() const;
  void set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_num() const;
  void _internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score_addition = 4;
  void clear_score_addition();
  ::PROTOBUF_NAMESPACE_ID::int32 score_addition() const;
  void set_score_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score_addition() const;
  void _internal_set_score_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward_addition = 5;
  void clear_reward_addition();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_addition() const;
  void set_reward_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_addition() const;
  void _internal_set_reward_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_addition = 6;
  void clear_card_addition();
  ::PROTOBUF_NAMESPACE_ID::int32 card_addition() const;
  void set_card_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_addition() const;
  void _internal_set_card_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_addition = 7;
  void clear_vip_addition();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_addition() const;
  void set_vip_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_addition() const;
  void _internal_set_vip_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHRealRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RealRank > real_rank_;
  ::BYDLD::RealRank* onself_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_addition_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_addition_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_addition_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_addition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class Reward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.Reward) */ {
 public:
  inline Reward() : Reward(nullptr) {}
  virtual ~Reward();

  Reward(const Reward& from);
  Reward(Reward&& from) noexcept
    : Reward() {
    *this = ::std::move(from);
  }

  inline Reward& operator=(const Reward& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reward& operator=(Reward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reward& default_instance();

  static inline const Reward* internal_default_instance() {
    return reinterpret_cast<const Reward*>(
               &_Reward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(Reward& a, Reward& b) {
    a.Swap(&b);
  }
  inline void Swap(Reward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reward* New() const final {
    return CreateMaybeMessage<Reward>(nullptr);
  }

  Reward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reward& from);
  void MergeFrom(const Reward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.Reward";
  }
  protected:
  explicit Reward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 3,
    kLuckyFieldNumber = 4,
    kIdxlFieldNumber = 1,
    kIdxrFieldNumber = 2,
  };
  // repeated .BYDLD.Object3 goods = 3;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::BYDLD::Object3* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_goods();
  private:
  const ::BYDLD::Object3& _internal_goods(int index) const;
  ::BYDLD::Object3* _internal_add_goods();
  public:
  const ::BYDLD::Object3& goods(int index) const;
  ::BYDLD::Object3* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      goods() const;

  // string lucky = 4;
  void clear_lucky();
  const std::string& lucky() const;
  void set_lucky(const std::string& value);
  void set_lucky(std::string&& value);
  void set_lucky(const char* value);
  void set_lucky(const char* value, size_t size);
  std::string* mutable_lucky();
  std::string* release_lucky();
  void set_allocated_lucky(std::string* lucky);
  private:
  const std::string& _internal_lucky() const;
  void _internal_set_lucky(const std::string& value);
  std::string* _internal_mutable_lucky();
  public:

  // int32 idxl = 1;
  void clear_idxl();
  ::PROTOBUF_NAMESPACE_ID::int32 idxl() const;
  void set_idxl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idxl() const;
  void _internal_set_idxl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idxr = 2;
  void clear_idxr();
  ::PROTOBUF_NAMESPACE_ID::int32 idxr() const;
  void set_idxr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idxr() const;
  void _internal_set_idxr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.Reward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > goods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lucky_;
  ::PROTOBUF_NAMESPACE_ID::int32 idxl_;
  ::PROTOBUF_NAMESPACE_ID::int32 idxr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHReward) */ {
 public:
  inline CSHReward() : CSHReward(nullptr) {}
  virtual ~CSHReward();

  CSHReward(const CSHReward& from);
  CSHReward(CSHReward&& from) noexcept
    : CSHReward() {
    *this = ::std::move(from);
  }

  inline CSHReward& operator=(const CSHReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHReward& operator=(CSHReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHReward& default_instance();

  static inline const CSHReward* internal_default_instance() {
    return reinterpret_cast<const CSHReward*>(
               &_CSHReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(CSHReward& a, CSHReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHReward* New() const final {
    return CreateMaybeMessage<CSHReward>(nullptr);
  }

  CSHReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHReward& from);
  void MergeFrom(const CSHReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHReward";
  }
  protected:
  explicit CSHReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMathcIdFieldNumber = 1,
    kTimeIdFieldNumber = 2,
  };
  // int32 mathcId = 1;
  void clear_mathcid();
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid() const;
  void set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mathcid() const;
  void _internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeId = 2;
  void clear_timeid();
  ::PROTOBUF_NAMESPACE_ID::int32 timeid() const;
  void set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeid() const;
  void _internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHReward) */ {
 public:
  inline SCHReward() : SCHReward(nullptr) {}
  virtual ~SCHReward();

  SCHReward(const SCHReward& from);
  SCHReward(SCHReward&& from) noexcept
    : SCHReward() {
    *this = ::std::move(from);
  }

  inline SCHReward& operator=(const SCHReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHReward& operator=(SCHReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHReward& default_instance();

  static inline const SCHReward* internal_default_instance() {
    return reinterpret_cast<const SCHReward*>(
               &_SCHReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(SCHReward& a, SCHReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHReward* New() const final {
    return CreateMaybeMessage<SCHReward>(nullptr);
  }

  SCHReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHReward& from);
  void MergeFrom(const SCHReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHReward";
  }
  protected:
  explicit SCHReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 1,
  };
  // int32 rewards = 1;
  void clear_rewards();
  ::PROTOBUF_NAMESPACE_ID::int32 rewards() const;
  void set_rewards(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rewards() const;
  void _internal_set_rewards(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHMatchInfoTip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHMatchInfoTip) */ {
 public:
  inline CSHMatchInfoTip() : CSHMatchInfoTip(nullptr) {}
  virtual ~CSHMatchInfoTip();

  CSHMatchInfoTip(const CSHMatchInfoTip& from);
  CSHMatchInfoTip(CSHMatchInfoTip&& from) noexcept
    : CSHMatchInfoTip() {
    *this = ::std::move(from);
  }

  inline CSHMatchInfoTip& operator=(const CSHMatchInfoTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHMatchInfoTip& operator=(CSHMatchInfoTip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHMatchInfoTip& default_instance();

  static inline const CSHMatchInfoTip* internal_default_instance() {
    return reinterpret_cast<const CSHMatchInfoTip*>(
               &_CSHMatchInfoTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(CSHMatchInfoTip& a, CSHMatchInfoTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHMatchInfoTip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHMatchInfoTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHMatchInfoTip* New() const final {
    return CreateMaybeMessage<CSHMatchInfoTip>(nullptr);
  }

  CSHMatchInfoTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHMatchInfoTip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHMatchInfoTip& from);
  void MergeFrom(const CSHMatchInfoTip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHMatchInfoTip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHMatchInfoTip";
  }
  protected:
  explicit CSHMatchInfoTip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSHMatchInfoTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class MatchInfoTip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.MatchInfoTip) */ {
 public:
  inline MatchInfoTip() : MatchInfoTip(nullptr) {}
  virtual ~MatchInfoTip();

  MatchInfoTip(const MatchInfoTip& from);
  MatchInfoTip(MatchInfoTip&& from) noexcept
    : MatchInfoTip() {
    *this = ::std::move(from);
  }

  inline MatchInfoTip& operator=(const MatchInfoTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInfoTip& operator=(MatchInfoTip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchInfoTip& default_instance();

  static inline const MatchInfoTip* internal_default_instance() {
    return reinterpret_cast<const MatchInfoTip*>(
               &_MatchInfoTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(MatchInfoTip& a, MatchInfoTip& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchInfoTip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchInfoTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchInfoTip* New() const final {
    return CreateMaybeMessage<MatchInfoTip>(nullptr);
  }

  MatchInfoTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchInfoTip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchInfoTip& from);
  void MergeFrom(const MatchInfoTip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInfoTip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.MatchInfoTip";
  }
  protected:
  explicit MatchInfoTip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 4,
    kNameFieldNumber = 1,
    kTimeFieldNumber = 3,
    kMathcIdFieldNumber = 2,
  };
  // repeated .BYDLD.Object3 goods = 4;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::BYDLD::Object3* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_goods();
  private:
  const ::BYDLD::Object3& _internal_goods(int index) const;
  ::BYDLD::Object3* _internal_add_goods();
  public:
  const ::BYDLD::Object3& goods(int index) const;
  ::BYDLD::Object3* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      goods() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string time = 3;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int32 mathcId = 2;
  void clear_mathcid();
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid() const;
  void set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mathcid() const;
  void _internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.MatchInfoTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > goods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHMatchInfoTip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHMatchInfoTip) */ {
 public:
  inline SCHMatchInfoTip() : SCHMatchInfoTip(nullptr) {}
  virtual ~SCHMatchInfoTip();

  SCHMatchInfoTip(const SCHMatchInfoTip& from);
  SCHMatchInfoTip(SCHMatchInfoTip&& from) noexcept
    : SCHMatchInfoTip() {
    *this = ::std::move(from);
  }

  inline SCHMatchInfoTip& operator=(const SCHMatchInfoTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHMatchInfoTip& operator=(SCHMatchInfoTip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHMatchInfoTip& default_instance();

  static inline const SCHMatchInfoTip* internal_default_instance() {
    return reinterpret_cast<const SCHMatchInfoTip*>(
               &_SCHMatchInfoTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(SCHMatchInfoTip& a, SCHMatchInfoTip& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHMatchInfoTip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHMatchInfoTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHMatchInfoTip* New() const final {
    return CreateMaybeMessage<SCHMatchInfoTip>(nullptr);
  }

  SCHMatchInfoTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHMatchInfoTip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHMatchInfoTip& from);
  void MergeFrom(const SCHMatchInfoTip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHMatchInfoTip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHMatchInfoTip";
  }
  protected:
  explicit SCHMatchInfoTip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchTipsFieldNumber = 1,
  };
  // repeated .BYDLD.MatchInfoTip matchTips = 1;
  int matchtips_size() const;
  private:
  int _internal_matchtips_size() const;
  public:
  void clear_matchtips();
  ::BYDLD::MatchInfoTip* mutable_matchtips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchInfoTip >*
      mutable_matchtips();
  private:
  const ::BYDLD::MatchInfoTip& _internal_matchtips(int index) const;
  ::BYDLD::MatchInfoTip* _internal_add_matchtips();
  public:
  const ::BYDLD::MatchInfoTip& matchtips(int index) const;
  ::BYDLD::MatchInfoTip* add_matchtips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchInfoTip >&
      matchtips() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCHMatchInfoTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchInfoTip > matchtips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHMatchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHMatchInfo) */ {
 public:
  inline CSHMatchInfo() : CSHMatchInfo(nullptr) {}
  virtual ~CSHMatchInfo();

  CSHMatchInfo(const CSHMatchInfo& from);
  CSHMatchInfo(CSHMatchInfo&& from) noexcept
    : CSHMatchInfo() {
    *this = ::std::move(from);
  }

  inline CSHMatchInfo& operator=(const CSHMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHMatchInfo& operator=(CSHMatchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHMatchInfo& default_instance();

  static inline const CSHMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CSHMatchInfo*>(
               &_CSHMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(CSHMatchInfo& a, CSHMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHMatchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHMatchInfo* New() const final {
    return CreateMaybeMessage<CSHMatchInfo>(nullptr);
  }

  CSHMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHMatchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHMatchInfo& from);
  void MergeFrom(const CSHMatchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHMatchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHMatchInfo";
  }
  protected:
  explicit CSHMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHMatchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHMatchInfo) */ {
 public:
  inline SCHMatchInfo() : SCHMatchInfo(nullptr) {}
  virtual ~SCHMatchInfo();

  SCHMatchInfo(const SCHMatchInfo& from);
  SCHMatchInfo(SCHMatchInfo&& from) noexcept
    : SCHMatchInfo() {
    *this = ::std::move(from);
  }

  inline SCHMatchInfo& operator=(const SCHMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHMatchInfo& operator=(SCHMatchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHMatchInfo& default_instance();

  static inline const SCHMatchInfo* internal_default_instance() {
    return reinterpret_cast<const SCHMatchInfo*>(
               &_SCHMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(SCHMatchInfo& a, SCHMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHMatchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHMatchInfo* New() const final {
    return CreateMaybeMessage<SCHMatchInfo>(nullptr);
  }

  SCHMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHMatchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHMatchInfo& from);
  void MergeFrom(const SCHMatchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHMatchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHMatchInfo";
  }
  protected:
  explicit SCHMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 6,
    kMathcIdFieldNumber = 2,
    kTimeIdFieldNumber = 3,
    kStatusFieldNumber = 4,
    kDownFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string time = 6;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int32 mathcId = 2;
  void clear_mathcid();
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid() const;
  void set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mathcid() const;
  void _internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeId = 3;
  void clear_timeid();
  ::PROTOBUF_NAMESPACE_ID::int32 timeid() const;
  void set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeid() const;
  void _internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down = 5;
  void clear_down();
  ::PROTOBUF_NAMESPACE_ID::int32 down() const;
  void set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down() const;
  void _internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 mathcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class HistoryRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.HistoryRank) */ {
 public:
  inline HistoryRank() : HistoryRank(nullptr) {}
  virtual ~HistoryRank();

  HistoryRank(const HistoryRank& from);
  HistoryRank(HistoryRank&& from) noexcept
    : HistoryRank() {
    *this = ::std::move(from);
  }

  inline HistoryRank& operator=(const HistoryRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryRank& operator=(HistoryRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryRank& default_instance();

  static inline const HistoryRank* internal_default_instance() {
    return reinterpret_cast<const HistoryRank*>(
               &_HistoryRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(HistoryRank& a, HistoryRank& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryRank* New() const final {
    return CreateMaybeMessage<HistoryRank>(nullptr);
  }

  HistoryRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryRank& from);
  void MergeFrom(const HistoryRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.HistoryRank";
  }
  protected:
  explicit HistoryRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchGoodsFieldNumber = 6,
    kPackGoodsFieldNumber = 7,
    kLuckyGoodsFieldNumber = 8,
    kIconFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdxFieldNumber = 1,
    kAdditionSourceFieldNumber = 4,
    kAdditionFieldNumber = 5,
  };
  // repeated .BYDLD.Object3 match_goods = 6;
  int match_goods_size() const;
  private:
  int _internal_match_goods_size() const;
  public:
  void clear_match_goods();
  ::BYDLD::Object3* mutable_match_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_match_goods();
  private:
  const ::BYDLD::Object3& _internal_match_goods(int index) const;
  ::BYDLD::Object3* _internal_add_match_goods();
  public:
  const ::BYDLD::Object3& match_goods(int index) const;
  ::BYDLD::Object3* add_match_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      match_goods() const;

  // repeated .BYDLD.Object3 pack_goods = 7;
  int pack_goods_size() const;
  private:
  int _internal_pack_goods_size() const;
  public:
  void clear_pack_goods();
  ::BYDLD::Object3* mutable_pack_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_pack_goods();
  private:
  const ::BYDLD::Object3& _internal_pack_goods(int index) const;
  ::BYDLD::Object3* _internal_add_pack_goods();
  public:
  const ::BYDLD::Object3& pack_goods(int index) const;
  ::BYDLD::Object3* add_pack_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      pack_goods() const;

  // repeated .BYDLD.Object3 lucky_goods = 8;
  int lucky_goods_size() const;
  private:
  int _internal_lucky_goods_size() const;
  public:
  void clear_lucky_goods();
  ::BYDLD::Object3* mutable_lucky_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_lucky_goods();
  private:
  const ::BYDLD::Object3& _internal_lucky_goods(int index) const;
  ::BYDLD::Object3* _internal_add_lucky_goods();
  public:
  const ::BYDLD::Object3& lucky_goods(int index) const;
  ::BYDLD::Object3* add_lucky_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      lucky_goods() const;

  // string icon = 2;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 addition_source = 4;
  void clear_addition_source();
  ::PROTOBUF_NAMESPACE_ID::int32 addition_source() const;
  void set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addition_source() const;
  void _internal_set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 addition = 5;
  void clear_addition();
  ::PROTOBUF_NAMESPACE_ID::int32 addition() const;
  void set_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addition() const;
  void _internal_set_addition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.HistoryRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > match_goods_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > pack_goods_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > lucky_goods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 addition_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 addition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHHistoryRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHHistoryRank) */ {
 public:
  inline CSHHistoryRank() : CSHHistoryRank(nullptr) {}
  virtual ~CSHHistoryRank();

  CSHHistoryRank(const CSHHistoryRank& from);
  CSHHistoryRank(CSHHistoryRank&& from) noexcept
    : CSHHistoryRank() {
    *this = ::std::move(from);
  }

  inline CSHHistoryRank& operator=(const CSHHistoryRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHHistoryRank& operator=(CSHHistoryRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHHistoryRank& default_instance();

  static inline const CSHHistoryRank* internal_default_instance() {
    return reinterpret_cast<const CSHHistoryRank*>(
               &_CSHHistoryRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(CSHHistoryRank& a, CSHHistoryRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHHistoryRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHHistoryRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHHistoryRank* New() const final {
    return CreateMaybeMessage<CSHHistoryRank>(nullptr);
  }

  CSHHistoryRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHHistoryRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHHistoryRank& from);
  void MergeFrom(const CSHHistoryRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHHistoryRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHHistoryRank";
  }
  protected:
  explicit CSHHistoryRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMatchIdFieldNumber = 2,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 matchId = 2;
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::int32 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHHistoryRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHHistoryRank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHHistoryRank) */ {
 public:
  inline SCHHistoryRank() : SCHHistoryRank(nullptr) {}
  virtual ~SCHHistoryRank();

  SCHHistoryRank(const SCHHistoryRank& from);
  SCHHistoryRank(SCHHistoryRank&& from) noexcept
    : SCHHistoryRank() {
    *this = ::std::move(from);
  }

  inline SCHHistoryRank& operator=(const SCHHistoryRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHHistoryRank& operator=(SCHHistoryRank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHHistoryRank& default_instance();

  static inline const SCHHistoryRank* internal_default_instance() {
    return reinterpret_cast<const SCHHistoryRank*>(
               &_SCHHistoryRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(SCHHistoryRank& a, SCHHistoryRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHHistoryRank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHHistoryRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHHistoryRank* New() const final {
    return CreateMaybeMessage<SCHHistoryRank>(nullptr);
  }

  SCHHistoryRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHHistoryRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHHistoryRank& from);
  void MergeFrom(const SCHHistoryRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHHistoryRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHHistoryRank";
  }
  protected:
  explicit SCHHistoryRank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankListFieldNumber = 2,
    kOneselfRankFieldNumber = 3,
    kMatchIdFieldNumber = 1,
  };
  // repeated .BYDLD.HistoryRank rank_list = 2;
  int rank_list_size() const;
  private:
  int _internal_rank_list_size() const;
  public:
  void clear_rank_list();
  ::BYDLD::HistoryRank* mutable_rank_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HistoryRank >*
      mutable_rank_list();
  private:
  const ::BYDLD::HistoryRank& _internal_rank_list(int index) const;
  ::BYDLD::HistoryRank* _internal_add_rank_list();
  public:
  const ::BYDLD::HistoryRank& rank_list(int index) const;
  ::BYDLD::HistoryRank* add_rank_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HistoryRank >&
      rank_list() const;

  // .BYDLD.HistoryRank oneself_rank = 3;
  bool has_oneself_rank() const;
  private:
  bool _internal_has_oneself_rank() const;
  public:
  void clear_oneself_rank();
  const ::BYDLD::HistoryRank& oneself_rank() const;
  ::BYDLD::HistoryRank* release_oneself_rank();
  ::BYDLD::HistoryRank* mutable_oneself_rank();
  void set_allocated_oneself_rank(::BYDLD::HistoryRank* oneself_rank);
  private:
  const ::BYDLD::HistoryRank& _internal_oneself_rank() const;
  ::BYDLD::HistoryRank* _internal_mutable_oneself_rank();
  public:
  void unsafe_arena_set_allocated_oneself_rank(
      ::BYDLD::HistoryRank* oneself_rank);
  ::BYDLD::HistoryRank* unsafe_arena_release_oneself_rank();

  // int32 matchId = 1;
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::int32 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHHistoryRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HistoryRank > rank_list_;
  ::BYDLD::HistoryRank* oneself_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSHLuckyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSHLuckyInfo) */ {
 public:
  inline CSHLuckyInfo() : CSHLuckyInfo(nullptr) {}
  virtual ~CSHLuckyInfo();

  CSHLuckyInfo(const CSHLuckyInfo& from);
  CSHLuckyInfo(CSHLuckyInfo&& from) noexcept
    : CSHLuckyInfo() {
    *this = ::std::move(from);
  }

  inline CSHLuckyInfo& operator=(const CSHLuckyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHLuckyInfo& operator=(CSHLuckyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSHLuckyInfo& default_instance();

  static inline const CSHLuckyInfo* internal_default_instance() {
    return reinterpret_cast<const CSHLuckyInfo*>(
               &_CSHLuckyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(CSHLuckyInfo& a, CSHLuckyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHLuckyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHLuckyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSHLuckyInfo* New() const final {
    return CreateMaybeMessage<CSHLuckyInfo>(nullptr);
  }

  CSHLuckyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSHLuckyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSHLuckyInfo& from);
  void MergeFrom(const CSHLuckyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHLuckyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSHLuckyInfo";
  }
  protected:
  explicit CSHLuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
  };
  // int32 matchId = 1;
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::int32 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSHLuckyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class LuckyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.LuckyInfo) */ {
 public:
  inline LuckyInfo() : LuckyInfo(nullptr) {}
  virtual ~LuckyInfo();

  LuckyInfo(const LuckyInfo& from);
  LuckyInfo(LuckyInfo&& from) noexcept
    : LuckyInfo() {
    *this = ::std::move(from);
  }

  inline LuckyInfo& operator=(const LuckyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LuckyInfo& operator=(LuckyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LuckyInfo& default_instance();

  static inline const LuckyInfo* internal_default_instance() {
    return reinterpret_cast<const LuckyInfo*>(
               &_LuckyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(LuckyInfo& a, LuckyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LuckyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LuckyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LuckyInfo* New() const final {
    return CreateMaybeMessage<LuckyInfo>(nullptr);
  }

  LuckyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LuckyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LuckyInfo& from);
  void MergeFrom(const LuckyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LuckyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.LuckyInfo";
  }
  protected:
  explicit LuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLRangeFieldNumber = 1,
    kRRangeFieldNumber = 2,
  };
  // int32 lRange = 1;
  void clear_lrange();
  ::PROTOBUF_NAMESPACE_ID::int32 lrange() const;
  void set_lrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lrange() const;
  void _internal_set_lrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rRange = 2;
  void clear_rrange();
  ::PROTOBUF_NAMESPACE_ID::int32 rrange() const;
  void set_rrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rrange() const;
  void _internal_set_rrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.LuckyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lrange_;
  ::PROTOBUF_NAMESPACE_ID::int32 rrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCHLuckyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCHLuckyInfo) */ {
 public:
  inline SCHLuckyInfo() : SCHLuckyInfo(nullptr) {}
  virtual ~SCHLuckyInfo();

  SCHLuckyInfo(const SCHLuckyInfo& from);
  SCHLuckyInfo(SCHLuckyInfo&& from) noexcept
    : SCHLuckyInfo() {
    *this = ::std::move(from);
  }

  inline SCHLuckyInfo& operator=(const SCHLuckyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHLuckyInfo& operator=(SCHLuckyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCHLuckyInfo& default_instance();

  static inline const SCHLuckyInfo* internal_default_instance() {
    return reinterpret_cast<const SCHLuckyInfo*>(
               &_SCHLuckyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(SCHLuckyInfo& a, SCHLuckyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHLuckyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHLuckyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCHLuckyInfo* New() const final {
    return CreateMaybeMessage<SCHLuckyInfo>(nullptr);
  }

  SCHLuckyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCHLuckyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCHLuckyInfo& from);
  void MergeFrom(const SCHLuckyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHLuckyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCHLuckyInfo";
  }
  protected:
  explicit SCHLuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMatchIdFieldNumber = 1,
  };
  // repeated .BYDLD.LuckyInfo data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::BYDLD::LuckyInfo* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyInfo >*
      mutable_data();
  private:
  const ::BYDLD::LuckyInfo& _internal_data(int index) const;
  ::BYDLD::LuckyInfo* _internal_add_data();
  public:
  const ::BYDLD::LuckyInfo& data(int index) const;
  ::BYDLD::LuckyInfo* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyInfo >&
      data() const;

  // int32 matchId = 1;
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::int32 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCHLuckyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyInfo > data_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AwardDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AwardDetail) */ {
 public:
  inline AwardDetail() : AwardDetail(nullptr) {}
  virtual ~AwardDetail();

  AwardDetail(const AwardDetail& from);
  AwardDetail(AwardDetail&& from) noexcept
    : AwardDetail() {
    *this = ::std::move(from);
  }

  inline AwardDetail& operator=(const AwardDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardDetail& operator=(AwardDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardDetail& default_instance();

  static inline const AwardDetail* internal_default_instance() {
    return reinterpret_cast<const AwardDetail*>(
               &_AwardDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(AwardDetail& a, AwardDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardDetail* New() const final {
    return CreateMaybeMessage<AwardDetail>(nullptr);
  }

  AwardDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardDetail& from);
  void MergeFrom(const AwardDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AwardDetail";
  }
  protected:
  explicit AwardDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 5,
    kPhotoFieldNumber = 6,
    kPlayerIdFieldNumber = 1,
    kNumsFieldNumber = 2,
    kPeriodFieldNumber = 3,
    kVipFieldNumber = 4,
  };
  // string nick_name = 5;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string photo = 6;
  void clear_photo();
  const std::string& photo() const;
  void set_photo(const std::string& value);
  void set_photo(std::string&& value);
  void set_photo(const char* value);
  void set_photo(const char* value, size_t size);
  std::string* mutable_photo();
  std::string* release_photo();
  void set_allocated_photo(std::string* photo);
  private:
  const std::string& _internal_photo() const;
  void _internal_set_photo(const std::string& value);
  std::string* _internal_mutable_photo();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nums = 2;
  void clear_nums();
  ::PROTOBUF_NAMESPACE_ID::int32 nums() const;
  void set_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nums() const;
  void _internal_set_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 period = 3;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::int32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip = 4;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AwardDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr photo_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 nums_;
  ::PROTOBUF_NAMESPACE_ID::int32 period_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyAwardNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyAwardNotify) */ {
 public:
  inline SCLuckyAwardNotify() : SCLuckyAwardNotify(nullptr) {}
  virtual ~SCLuckyAwardNotify();

  SCLuckyAwardNotify(const SCLuckyAwardNotify& from);
  SCLuckyAwardNotify(SCLuckyAwardNotify&& from) noexcept
    : SCLuckyAwardNotify() {
    *this = ::std::move(from);
  }

  inline SCLuckyAwardNotify& operator=(const SCLuckyAwardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyAwardNotify& operator=(SCLuckyAwardNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyAwardNotify& default_instance();

  static inline const SCLuckyAwardNotify* internal_default_instance() {
    return reinterpret_cast<const SCLuckyAwardNotify*>(
               &_SCLuckyAwardNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(SCLuckyAwardNotify& a, SCLuckyAwardNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyAwardNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyAwardNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyAwardNotify* New() const final {
    return CreateMaybeMessage<SCLuckyAwardNotify>(nullptr);
  }

  SCLuckyAwardNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyAwardNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyAwardNotify& from);
  void MergeFrom(const SCLuckyAwardNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyAwardNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyAwardNotify";
  }
  protected:
  explicit SCLuckyAwardNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kAwardTypeFieldNumber = 1,
  };
  // repeated .BYDLD.AwardDetail detail = 2;
  int detail_size() const;
  private:
  int _internal_detail_size() const;
  public:
  void clear_detail();
  ::BYDLD::AwardDetail* mutable_detail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardDetail >*
      mutable_detail();
  private:
  const ::BYDLD::AwardDetail& _internal_detail(int index) const;
  ::BYDLD::AwardDetail* _internal_add_detail();
  public:
  const ::BYDLD::AwardDetail& detail(int index) const;
  ::BYDLD::AwardDetail* add_detail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardDetail >&
      detail() const;

  // int32 award_type = 1;
  void clear_award_type();
  ::PROTOBUF_NAMESPACE_ID::int32 award_type() const;
  void set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_award_type() const;
  void _internal_set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyAwardNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardDetail > detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 award_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class AwardProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.AwardProp) */ {
 public:
  inline AwardProp() : AwardProp(nullptr) {}
  virtual ~AwardProp();

  AwardProp(const AwardProp& from);
  AwardProp(AwardProp&& from) noexcept
    : AwardProp() {
    *this = ::std::move(from);
  }

  inline AwardProp& operator=(const AwardProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardProp& operator=(AwardProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardProp& default_instance();

  static inline const AwardProp* internal_default_instance() {
    return reinterpret_cast<const AwardProp*>(
               &_AwardProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(AwardProp& a, AwardProp& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardProp* New() const final {
    return CreateMaybeMessage<AwardProp>(nullptr);
  }

  AwardProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardProp& from);
  void MergeFrom(const AwardProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.AwardProp";
  }
  protected:
  explicit AwardProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.AwardProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class LuckyTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.LuckyTaskInfo) */ {
 public:
  inline LuckyTaskInfo() : LuckyTaskInfo(nullptr) {}
  virtual ~LuckyTaskInfo();

  LuckyTaskInfo(const LuckyTaskInfo& from);
  LuckyTaskInfo(LuckyTaskInfo&& from) noexcept
    : LuckyTaskInfo() {
    *this = ::std::move(from);
  }

  inline LuckyTaskInfo& operator=(const LuckyTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LuckyTaskInfo& operator=(LuckyTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LuckyTaskInfo& default_instance();

  static inline const LuckyTaskInfo* internal_default_instance() {
    return reinterpret_cast<const LuckyTaskInfo*>(
               &_LuckyTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(LuckyTaskInfo& a, LuckyTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LuckyTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LuckyTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LuckyTaskInfo* New() const final {
    return CreateMaybeMessage<LuckyTaskInfo>(nullptr);
  }

  LuckyTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LuckyTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LuckyTaskInfo& from);
  void MergeFrom(const LuckyTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LuckyTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.LuckyTaskInfo";
  }
  protected:
  explicit LuckyTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 4,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kScoreFieldNumber = 3,
    kCurFieldNumber = 5,
    kTotalFieldNumber = 6,
    kShowFieldNumber = 7,
  };
  // string text = 4;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur = 5;
  void clear_cur();
  ::PROTOBUF_NAMESPACE_ID::int32 cur() const;
  void set_cur(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur() const;
  void _internal_set_cur(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 6;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool show = 7;
  void clear_show();
  bool show() const;
  void set_show(bool value);
  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.LuckyTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  bool show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyDrawInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLuckyDrawInfo) */ {
 public:
  inline CSLuckyDrawInfo() : CSLuckyDrawInfo(nullptr) {}
  virtual ~CSLuckyDrawInfo();

  CSLuckyDrawInfo(const CSLuckyDrawInfo& from);
  CSLuckyDrawInfo(CSLuckyDrawInfo&& from) noexcept
    : CSLuckyDrawInfo() {
    *this = ::std::move(from);
  }

  inline CSLuckyDrawInfo& operator=(const CSLuckyDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyDrawInfo& operator=(CSLuckyDrawInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyDrawInfo& default_instance();

  static inline const CSLuckyDrawInfo* internal_default_instance() {
    return reinterpret_cast<const CSLuckyDrawInfo*>(
               &_CSLuckyDrawInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(CSLuckyDrawInfo& a, CSLuckyDrawInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyDrawInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyDrawInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyDrawInfo* New() const final {
    return CreateMaybeMessage<CSLuckyDrawInfo>(nullptr);
  }

  CSLuckyDrawInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyDrawInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyDrawInfo& from);
  void MergeFrom(const CSLuckyDrawInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyDrawInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLuckyDrawInfo";
  }
  protected:
  explicit CSLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSLuckyDrawInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyDrawInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyDrawInfo) */ {
 public:
  inline SCLuckyDrawInfo() : SCLuckyDrawInfo(nullptr) {}
  virtual ~SCLuckyDrawInfo();

  SCLuckyDrawInfo(const SCLuckyDrawInfo& from);
  SCLuckyDrawInfo(SCLuckyDrawInfo&& from) noexcept
    : SCLuckyDrawInfo() {
    *this = ::std::move(from);
  }

  inline SCLuckyDrawInfo& operator=(const SCLuckyDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyDrawInfo& operator=(SCLuckyDrawInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyDrawInfo& default_instance();

  static inline const SCLuckyDrawInfo* internal_default_instance() {
    return reinterpret_cast<const SCLuckyDrawInfo*>(
               &_SCLuckyDrawInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(SCLuckyDrawInfo& a, SCLuckyDrawInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyDrawInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyDrawInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyDrawInfo* New() const final {
    return CreateMaybeMessage<SCLuckyDrawInfo>(nullptr);
  }

  SCLuckyDrawInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyDrawInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyDrawInfo& from);
  void MergeFrom(const SCLuckyDrawInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyDrawInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyDrawInfo";
  }
  protected:
  explicit SCLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourRewardFieldNumber = 3,
    kDayRewardFieldNumber = 4,
    kDayLuckyNumsFieldNumber = 5,
    kTaskInfoFieldNumber = 12,
    kHourLuckyNumsFieldNumber = 15,
    kHourRemainSecFieldNumber = 1,
    kDayRemainSecFieldNumber = 2,
    kScoreFieldNumber = 6,
    kHourTotalFieldNumber = 7,
    kDayTotalFieldNumber = 8,
    kHourAwardNumFieldNumber = 9,
    kDayAwardNumFieldNumber = 10,
    kNextStartTickFieldNumber = 11,
    kExchangeScoreFieldNumber = 13,
    kNextRemainSecFieldNumber = 14,
  };
  // repeated .BYDLD.AwardProp hour_reward = 3;
  int hour_reward_size() const;
  private:
  int _internal_hour_reward_size() const;
  public:
  void clear_hour_reward();
  ::BYDLD::AwardProp* mutable_hour_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >*
      mutable_hour_reward();
  private:
  const ::BYDLD::AwardProp& _internal_hour_reward(int index) const;
  ::BYDLD::AwardProp* _internal_add_hour_reward();
  public:
  const ::BYDLD::AwardProp& hour_reward(int index) const;
  ::BYDLD::AwardProp* add_hour_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >&
      hour_reward() const;

  // repeated .BYDLD.AwardProp day_reward = 4;
  int day_reward_size() const;
  private:
  int _internal_day_reward_size() const;
  public:
  void clear_day_reward();
  ::BYDLD::AwardProp* mutable_day_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >*
      mutable_day_reward();
  private:
  const ::BYDLD::AwardProp& _internal_day_reward(int index) const;
  ::BYDLD::AwardProp* _internal_add_day_reward();
  public:
  const ::BYDLD::AwardProp& day_reward(int index) const;
  ::BYDLD::AwardProp* add_day_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >&
      day_reward() const;

  // repeated int32 day_lucky_nums = 5;
  int day_lucky_nums_size() const;
  private:
  int _internal_day_lucky_nums_size() const;
  public:
  void clear_day_lucky_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_lucky_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_day_lucky_nums() const;
  void _internal_add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_day_lucky_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 day_lucky_nums(int index) const;
  void set_day_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      day_lucky_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_day_lucky_nums();

  // repeated .BYDLD.LuckyTaskInfo task_info = 12;
  int task_info_size() const;
  private:
  int _internal_task_info_size() const;
  public:
  void clear_task_info();
  ::BYDLD::LuckyTaskInfo* mutable_task_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyTaskInfo >*
      mutable_task_info();
  private:
  const ::BYDLD::LuckyTaskInfo& _internal_task_info(int index) const;
  ::BYDLD::LuckyTaskInfo* _internal_add_task_info();
  public:
  const ::BYDLD::LuckyTaskInfo& task_info(int index) const;
  ::BYDLD::LuckyTaskInfo* add_task_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyTaskInfo >&
      task_info() const;

  // repeated int32 hour_lucky_nums = 15;
  int hour_lucky_nums_size() const;
  private:
  int _internal_hour_lucky_nums_size() const;
  public:
  void clear_hour_lucky_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_lucky_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hour_lucky_nums() const;
  void _internal_add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hour_lucky_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hour_lucky_nums(int index) const;
  void set_hour_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hour_lucky_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hour_lucky_nums();

  // int32 hour_remain_sec = 1;
  void clear_hour_remain_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 hour_remain_sec() const;
  void set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_remain_sec() const;
  void _internal_set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_remain_sec = 2;
  void clear_day_remain_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 day_remain_sec() const;
  void set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_remain_sec() const;
  void _internal_set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 6;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hour_total = 7;
  void clear_hour_total();
  ::PROTOBUF_NAMESPACE_ID::int32 hour_total() const;
  void set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_total() const;
  void _internal_set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_total = 8;
  void clear_day_total();
  ::PROTOBUF_NAMESPACE_ID::int32 day_total() const;
  void set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_total() const;
  void _internal_set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hour_award_num = 9;
  void clear_hour_award_num();
  ::PROTOBUF_NAMESPACE_ID::int32 hour_award_num() const;
  void set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour_award_num() const;
  void _internal_set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day_award_num = 10;
  void clear_day_award_num();
  ::PROTOBUF_NAMESPACE_ID::int32 day_award_num() const;
  void set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_award_num() const;
  void _internal_set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next_start_tick = 11;
  void clear_next_start_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 next_start_tick() const;
  void set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next_start_tick() const;
  void _internal_set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exchange_score = 13;
  void clear_exchange_score();
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_score() const;
  void set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exchange_score() const;
  void _internal_set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next_remain_sec = 14;
  void clear_next_remain_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 next_remain_sec() const;
  void set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next_remain_sec() const;
  void _internal_set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyDrawInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp > hour_reward_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp > day_reward_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > day_lucky_nums_;
  mutable std::atomic<int> _day_lucky_nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyTaskInfo > task_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hour_lucky_nums_;
  mutable std::atomic<int> _hour_lucky_nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_remain_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_remain_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_award_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_award_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_start_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_remain_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSGetLuckyTaskAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSGetLuckyTaskAward) */ {
 public:
  inline CSGetLuckyTaskAward() : CSGetLuckyTaskAward(nullptr) {}
  virtual ~CSGetLuckyTaskAward();

  CSGetLuckyTaskAward(const CSGetLuckyTaskAward& from);
  CSGetLuckyTaskAward(CSGetLuckyTaskAward&& from) noexcept
    : CSGetLuckyTaskAward() {
    *this = ::std::move(from);
  }

  inline CSGetLuckyTaskAward& operator=(const CSGetLuckyTaskAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetLuckyTaskAward& operator=(CSGetLuckyTaskAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetLuckyTaskAward& default_instance();

  static inline const CSGetLuckyTaskAward* internal_default_instance() {
    return reinterpret_cast<const CSGetLuckyTaskAward*>(
               &_CSGetLuckyTaskAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(CSGetLuckyTaskAward& a, CSGetLuckyTaskAward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetLuckyTaskAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetLuckyTaskAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetLuckyTaskAward* New() const final {
    return CreateMaybeMessage<CSGetLuckyTaskAward>(nullptr);
  }

  CSGetLuckyTaskAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetLuckyTaskAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetLuckyTaskAward& from);
  void MergeFrom(const CSGetLuckyTaskAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetLuckyTaskAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSGetLuckyTaskAward";
  }
  protected:
  explicit CSGetLuckyTaskAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSGetLuckyTaskAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyTaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyTaskInfo) */ {
 public:
  inline SCLuckyTaskInfo() : SCLuckyTaskInfo(nullptr) {}
  virtual ~SCLuckyTaskInfo();

  SCLuckyTaskInfo(const SCLuckyTaskInfo& from);
  SCLuckyTaskInfo(SCLuckyTaskInfo&& from) noexcept
    : SCLuckyTaskInfo() {
    *this = ::std::move(from);
  }

  inline SCLuckyTaskInfo& operator=(const SCLuckyTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyTaskInfo& operator=(SCLuckyTaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyTaskInfo& default_instance();

  static inline const SCLuckyTaskInfo* internal_default_instance() {
    return reinterpret_cast<const SCLuckyTaskInfo*>(
               &_SCLuckyTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(SCLuckyTaskInfo& a, SCLuckyTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyTaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyTaskInfo* New() const final {
    return CreateMaybeMessage<SCLuckyTaskInfo>(nullptr);
  }

  SCLuckyTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyTaskInfo& from);
  void MergeFrom(const SCLuckyTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyTaskInfo";
  }
  protected:
  explicit SCLuckyTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kScoreFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // .BYDLD.LuckyTaskInfo task = 1;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::BYDLD::LuckyTaskInfo& task() const;
  ::BYDLD::LuckyTaskInfo* release_task();
  ::BYDLD::LuckyTaskInfo* mutable_task();
  void set_allocated_task(::BYDLD::LuckyTaskInfo* task);
  private:
  const ::BYDLD::LuckyTaskInfo& _internal_task() const;
  ::BYDLD::LuckyTaskInfo* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::BYDLD::LuckyTaskInfo* task);
  ::BYDLD::LuckyTaskInfo* unsafe_arena_release_task();

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::LuckyTaskInfo* task_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSGetLuckyNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSGetLuckyNum) */ {
 public:
  inline CSGetLuckyNum() : CSGetLuckyNum(nullptr) {}
  virtual ~CSGetLuckyNum();

  CSGetLuckyNum(const CSGetLuckyNum& from);
  CSGetLuckyNum(CSGetLuckyNum&& from) noexcept
    : CSGetLuckyNum() {
    *this = ::std::move(from);
  }

  inline CSGetLuckyNum& operator=(const CSGetLuckyNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetLuckyNum& operator=(CSGetLuckyNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetLuckyNum& default_instance();

  static inline const CSGetLuckyNum* internal_default_instance() {
    return reinterpret_cast<const CSGetLuckyNum*>(
               &_CSGetLuckyNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(CSGetLuckyNum& a, CSGetLuckyNum& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetLuckyNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetLuckyNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetLuckyNum* New() const final {
    return CreateMaybeMessage<CSGetLuckyNum>(nullptr);
  }

  CSGetLuckyNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetLuckyNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetLuckyNum& from);
  void MergeFrom(const CSGetLuckyNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetLuckyNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSGetLuckyNum";
  }
  protected:
  explicit CSGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimesFieldNumber = 1,
  };
  // int32 times = 1;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSGetLuckyNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCGetLuckyNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCGetLuckyNum) */ {
 public:
  inline SCGetLuckyNum() : SCGetLuckyNum(nullptr) {}
  virtual ~SCGetLuckyNum();

  SCGetLuckyNum(const SCGetLuckyNum& from);
  SCGetLuckyNum(SCGetLuckyNum&& from) noexcept
    : SCGetLuckyNum() {
    *this = ::std::move(from);
  }

  inline SCGetLuckyNum& operator=(const SCGetLuckyNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetLuckyNum& operator=(SCGetLuckyNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetLuckyNum& default_instance();

  static inline const SCGetLuckyNum* internal_default_instance() {
    return reinterpret_cast<const SCGetLuckyNum*>(
               &_SCGetLuckyNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(SCGetLuckyNum& a, SCGetLuckyNum& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetLuckyNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetLuckyNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetLuckyNum* New() const final {
    return CreateMaybeMessage<SCGetLuckyNum>(nullptr);
  }

  SCGetLuckyNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetLuckyNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetLuckyNum& from);
  void MergeFrom(const SCGetLuckyNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetLuckyNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCGetLuckyNum";
  }
  protected:
  explicit SCGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLuckyNumsFieldNumber = 3,
    kScoreFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // repeated int32 lucky_nums = 3;
  int lucky_nums_size() const;
  private:
  int _internal_lucky_nums_size() const;
  public:
  void clear_lucky_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_lucky_nums() const;
  void _internal_add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_lucky_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_nums(int index) const;
  void set_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      lucky_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_lucky_nums();

  // int32 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 2;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCGetLuckyNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > lucky_nums_;
  mutable std::atomic<int> _lucky_nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyRedDot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLuckyRedDot) */ {
 public:
  inline CSLuckyRedDot() : CSLuckyRedDot(nullptr) {}
  virtual ~CSLuckyRedDot();

  CSLuckyRedDot(const CSLuckyRedDot& from);
  CSLuckyRedDot(CSLuckyRedDot&& from) noexcept
    : CSLuckyRedDot() {
    *this = ::std::move(from);
  }

  inline CSLuckyRedDot& operator=(const CSLuckyRedDot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyRedDot& operator=(CSLuckyRedDot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyRedDot& default_instance();

  static inline const CSLuckyRedDot* internal_default_instance() {
    return reinterpret_cast<const CSLuckyRedDot*>(
               &_CSLuckyRedDot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(CSLuckyRedDot& a, CSLuckyRedDot& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyRedDot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyRedDot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyRedDot* New() const final {
    return CreateMaybeMessage<CSLuckyRedDot>(nullptr);
  }

  CSLuckyRedDot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyRedDot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyRedDot& from);
  void MergeFrom(const CSLuckyRedDot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyRedDot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLuckyRedDot";
  }
  protected:
  explicit CSLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSLuckyRedDot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyRedDot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyRedDot) */ {
 public:
  inline SCLuckyRedDot() : SCLuckyRedDot(nullptr) {}
  virtual ~SCLuckyRedDot();

  SCLuckyRedDot(const SCLuckyRedDot& from);
  SCLuckyRedDot(SCLuckyRedDot&& from) noexcept
    : SCLuckyRedDot() {
    *this = ::std::move(from);
  }

  inline SCLuckyRedDot& operator=(const SCLuckyRedDot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyRedDot& operator=(SCLuckyRedDot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyRedDot& default_instance();

  static inline const SCLuckyRedDot* internal_default_instance() {
    return reinterpret_cast<const SCLuckyRedDot*>(
               &_SCLuckyRedDot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(SCLuckyRedDot& a, SCLuckyRedDot& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyRedDot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyRedDot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyRedDot* New() const final {
    return CreateMaybeMessage<SCLuckyRedDot>(nullptr);
  }

  SCLuckyRedDot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyRedDot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyRedDot& from);
  void MergeFrom(const SCLuckyRedDot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyRedDot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyRedDot";
  }
  protected:
  explicit SCLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // bool show = 1;
  void clear_show();
  bool show() const;
  void set_show(bool value);
  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyRedDot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class LuckyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.LuckyRecord) */ {
 public:
  inline LuckyRecord() : LuckyRecord(nullptr) {}
  virtual ~LuckyRecord();

  LuckyRecord(const LuckyRecord& from);
  LuckyRecord(LuckyRecord&& from) noexcept
    : LuckyRecord() {
    *this = ::std::move(from);
  }

  inline LuckyRecord& operator=(const LuckyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LuckyRecord& operator=(LuckyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LuckyRecord& default_instance();

  static inline const LuckyRecord* internal_default_instance() {
    return reinterpret_cast<const LuckyRecord*>(
               &_LuckyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(LuckyRecord& a, LuckyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LuckyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LuckyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LuckyRecord* New() const final {
    return CreateMaybeMessage<LuckyRecord>(nullptr);
  }

  LuckyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LuckyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LuckyRecord& from);
  void MergeFrom(const LuckyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LuckyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.LuckyRecord";
  }
  protected:
  explicit LuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 5,
    kVipFieldNumber = 1,
    kTimesFieldNumber = 2,
    kLuckyNumFieldNumber = 3,
    kTickFieldNumber = 4,
  };
  // string nick_name = 5;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int32 vip = 1;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lucky_num = 3;
  void clear_lucky_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num() const;
  void set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_num() const;
  void _internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tick = 4;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.LuckyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class OwnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.OwnRecord) */ {
 public:
  inline OwnRecord() : OwnRecord(nullptr) {}
  virtual ~OwnRecord();

  OwnRecord(const OwnRecord& from);
  OwnRecord(OwnRecord&& from) noexcept
    : OwnRecord() {
    *this = ::std::move(from);
  }

  inline OwnRecord& operator=(const OwnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnRecord& operator=(OwnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OwnRecord& default_instance();

  static inline const OwnRecord* internal_default_instance() {
    return reinterpret_cast<const OwnRecord*>(
               &_OwnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(OwnRecord& a, OwnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnRecord* New() const final {
    return CreateMaybeMessage<OwnRecord>(nullptr);
  }

  OwnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnRecord& from);
  void MergeFrom(const OwnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.OwnRecord";
  }
  protected:
  explicit OwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTickFieldNumber = 3,
    kLuckyNumFieldNumber = 4,
  };
  // repeated .BYDLD.AwardProp reward = 1;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  ::BYDLD::AwardProp* mutable_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >*
      mutable_reward();
  private:
  const ::BYDLD::AwardProp& _internal_reward(int index) const;
  ::BYDLD::AwardProp* _internal_add_reward();
  public:
  const ::BYDLD::AwardProp& reward(int index) const;
  ::BYDLD::AwardProp* add_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >&
      reward() const;

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lucky_num = 4;
  void clear_lucky_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num() const;
  void set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lucky_num() const;
  void _internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.OwnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp > reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 lucky_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLuckyRecord) */ {
 public:
  inline CSLuckyRecord() : CSLuckyRecord(nullptr) {}
  virtual ~CSLuckyRecord();

  CSLuckyRecord(const CSLuckyRecord& from);
  CSLuckyRecord(CSLuckyRecord&& from) noexcept
    : CSLuckyRecord() {
    *this = ::std::move(from);
  }

  inline CSLuckyRecord& operator=(const CSLuckyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyRecord& operator=(CSLuckyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyRecord& default_instance();

  static inline const CSLuckyRecord* internal_default_instance() {
    return reinterpret_cast<const CSLuckyRecord*>(
               &_CSLuckyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(CSLuckyRecord& a, CSLuckyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyRecord* New() const final {
    return CreateMaybeMessage<CSLuckyRecord>(nullptr);
  }

  CSLuckyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyRecord& from);
  void MergeFrom(const CSLuckyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLuckyRecord";
  }
  protected:
  explicit CSLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSLuckyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyRecord) */ {
 public:
  inline SCLuckyRecord() : SCLuckyRecord(nullptr) {}
  virtual ~SCLuckyRecord();

  SCLuckyRecord(const SCLuckyRecord& from);
  SCLuckyRecord(SCLuckyRecord&& from) noexcept
    : SCLuckyRecord() {
    *this = ::std::move(from);
  }

  inline SCLuckyRecord& operator=(const SCLuckyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyRecord& operator=(SCLuckyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyRecord& default_instance();

  static inline const SCLuckyRecord* internal_default_instance() {
    return reinterpret_cast<const SCLuckyRecord*>(
               &_SCLuckyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(SCLuckyRecord& a, SCLuckyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyRecord* New() const final {
    return CreateMaybeMessage<SCLuckyRecord>(nullptr);
  }

  SCLuckyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyRecord& from);
  void MergeFrom(const SCLuckyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyRecord";
  }
  protected:
  explicit SCLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .BYDLD.LuckyRecord record = 2;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::BYDLD::LuckyRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyRecord >*
      mutable_record();
  private:
  const ::BYDLD::LuckyRecord& _internal_record(int index) const;
  ::BYDLD::LuckyRecord* _internal_add_record();
  public:
  const ::BYDLD::LuckyRecord& record(int index) const;
  ::BYDLD::LuckyRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyRecord >&
      record() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyRecord > record_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCOwnRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCOwnRecord) */ {
 public:
  inline SCOwnRecord() : SCOwnRecord(nullptr) {}
  virtual ~SCOwnRecord();

  SCOwnRecord(const SCOwnRecord& from);
  SCOwnRecord(SCOwnRecord&& from) noexcept
    : SCOwnRecord() {
    *this = ::std::move(from);
  }

  inline SCOwnRecord& operator=(const SCOwnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOwnRecord& operator=(SCOwnRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOwnRecord& default_instance();

  static inline const SCOwnRecord* internal_default_instance() {
    return reinterpret_cast<const SCOwnRecord*>(
               &_SCOwnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(SCOwnRecord& a, SCOwnRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOwnRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOwnRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOwnRecord* New() const final {
    return CreateMaybeMessage<SCOwnRecord>(nullptr);
  }

  SCOwnRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOwnRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOwnRecord& from);
  void MergeFrom(const SCOwnRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOwnRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCOwnRecord";
  }
  protected:
  explicit SCOwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // repeated .BYDLD.OwnRecord record = 1;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::BYDLD::OwnRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OwnRecord >*
      mutable_record();
  private:
  const ::BYDLD::OwnRecord& _internal_record(int index) const;
  ::BYDLD::OwnRecord* _internal_add_record();
  public:
  const ::BYDLD::OwnRecord& record(int index) const;
  ::BYDLD::OwnRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OwnRecord >&
      record() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCOwnRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OwnRecord > record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSDragonWheelStart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSDragonWheelStart) */ {
 public:
  inline CSDragonWheelStart() : CSDragonWheelStart(nullptr) {}
  virtual ~CSDragonWheelStart();

  CSDragonWheelStart(const CSDragonWheelStart& from);
  CSDragonWheelStart(CSDragonWheelStart&& from) noexcept
    : CSDragonWheelStart() {
    *this = ::std::move(from);
  }

  inline CSDragonWheelStart& operator=(const CSDragonWheelStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDragonWheelStart& operator=(CSDragonWheelStart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDragonWheelStart& default_instance();

  static inline const CSDragonWheelStart* internal_default_instance() {
    return reinterpret_cast<const CSDragonWheelStart*>(
               &_CSDragonWheelStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(CSDragonWheelStart& a, CSDragonWheelStart& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDragonWheelStart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDragonWheelStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDragonWheelStart* New() const final {
    return CreateMaybeMessage<CSDragonWheelStart>(nullptr);
  }

  CSDragonWheelStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDragonWheelStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDragonWheelStart& from);
  void MergeFrom(const CSDragonWheelStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDragonWheelStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSDragonWheelStart";
  }
  protected:
  explicit CSDragonWheelStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
  };
  // int32 stage = 1;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSDragonWheelStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCDragonWheelStop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCDragonWheelStop) */ {
 public:
  inline SCDragonWheelStop() : SCDragonWheelStop(nullptr) {}
  virtual ~SCDragonWheelStop();

  SCDragonWheelStop(const SCDragonWheelStop& from);
  SCDragonWheelStop(SCDragonWheelStop&& from) noexcept
    : SCDragonWheelStop() {
    *this = ::std::move(from);
  }

  inline SCDragonWheelStop& operator=(const SCDragonWheelStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDragonWheelStop& operator=(SCDragonWheelStop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDragonWheelStop& default_instance();

  static inline const SCDragonWheelStop* internal_default_instance() {
    return reinterpret_cast<const SCDragonWheelStop*>(
               &_SCDragonWheelStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(SCDragonWheelStop& a, SCDragonWheelStop& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDragonWheelStop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDragonWheelStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDragonWheelStop* New() const final {
    return CreateMaybeMessage<SCDragonWheelStop>(nullptr);
  }

  SCDragonWheelStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDragonWheelStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDragonWheelStop& from);
  void MergeFrom(const SCDragonWheelStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDragonWheelStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCDragonWheelStop";
  }
  protected:
  explicit SCDragonWheelStop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kRatioFieldNumber = 2,
    kScoreFieldNumber = 3,
    kAtomicRatioFieldNumber = 4,
    kFortuneRatioFieldNumber = 5,
    kPoseidonRatioFieldNumber = 6,
    kErrorFieldNumber = 7,
    kChairIdFieldNumber = 8,
    kFishValueFieldNumber = 9,
    kIsPropFieldNumber = 10,
    kBulletRatioFieldNumber = 11,
  };
  // int32 stage = 1;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 atomic_ratio = 4;
  void clear_atomic_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 atomic_ratio() const;
  void set_atomic_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_atomic_ratio() const;
  void _internal_set_atomic_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fortune_ratio = 5;
  void clear_fortune_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 fortune_ratio() const;
  void set_fortune_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fortune_ratio() const;
  void _internal_set_fortune_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 poseidon_ratio = 6;
  void clear_poseidon_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 poseidon_ratio() const;
  void set_poseidon_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poseidon_ratio() const;
  void _internal_set_poseidon_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error = 7;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_id = 8;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_value = 9;
  void clear_fish_value();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value() const;
  void set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_value() const;
  void _internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_prop = 10;
  void clear_is_prop();
  bool is_prop() const;
  void set_is_prop(bool value);
  private:
  bool _internal_is_prop() const;
  void _internal_set_is_prop(bool value);
  public:

  // int32 bullet_ratio = 11;
  void clear_bullet_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_ratio() const;
  void set_bullet_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_ratio() const;
  void _internal_set_bullet_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCDragonWheelStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 atomic_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 fortune_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 poseidon_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_value_;
  bool is_prop_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncHallProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncHallProp) */ {
 public:
  inline SCSyncHallProp() : SCSyncHallProp(nullptr) {}
  virtual ~SCSyncHallProp();

  SCSyncHallProp(const SCSyncHallProp& from);
  SCSyncHallProp(SCSyncHallProp&& from) noexcept
    : SCSyncHallProp() {
    *this = ::std::move(from);
  }

  inline SCSyncHallProp& operator=(const SCSyncHallProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncHallProp& operator=(SCSyncHallProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncHallProp& default_instance();

  static inline const SCSyncHallProp* internal_default_instance() {
    return reinterpret_cast<const SCSyncHallProp*>(
               &_SCSyncHallProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(SCSyncHallProp& a, SCSyncHallProp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncHallProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncHallProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncHallProp* New() const final {
    return CreateMaybeMessage<SCSyncHallProp>(nullptr);
  }

  SCSyncHallProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncHallProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncHallProp& from);
  void MergeFrom(const SCSyncHallProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncHallProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncHallProp";
  }
  protected:
  explicit SCSyncHallProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHallPropFieldNumber = 1,
  };
  // repeated .BYDLD.Object3 hall_prop = 1;
  int hall_prop_size() const;
  private:
  int _internal_hall_prop_size() const;
  public:
  void clear_hall_prop();
  ::BYDLD::Object3* mutable_hall_prop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
      mutable_hall_prop();
  private:
  const ::BYDLD::Object3& _internal_hall_prop(int index) const;
  ::BYDLD::Object3* _internal_add_hall_prop();
  public:
  const ::BYDLD::Object3& hall_prop(int index) const;
  ::BYDLD::Object3* add_hall_prop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
      hall_prop() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncHallProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 > hall_prop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSCheckDragonWheelProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSCheckDragonWheelProp) */ {
 public:
  inline CSCheckDragonWheelProp() : CSCheckDragonWheelProp(nullptr) {}
  virtual ~CSCheckDragonWheelProp();

  CSCheckDragonWheelProp(const CSCheckDragonWheelProp& from);
  CSCheckDragonWheelProp(CSCheckDragonWheelProp&& from) noexcept
    : CSCheckDragonWheelProp() {
    *this = ::std::move(from);
  }

  inline CSCheckDragonWheelProp& operator=(const CSCheckDragonWheelProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSCheckDragonWheelProp& operator=(CSCheckDragonWheelProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSCheckDragonWheelProp& default_instance();

  static inline const CSCheckDragonWheelProp* internal_default_instance() {
    return reinterpret_cast<const CSCheckDragonWheelProp*>(
               &_CSCheckDragonWheelProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(CSCheckDragonWheelProp& a, CSCheckDragonWheelProp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSCheckDragonWheelProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSCheckDragonWheelProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSCheckDragonWheelProp* New() const final {
    return CreateMaybeMessage<CSCheckDragonWheelProp>(nullptr);
  }

  CSCheckDragonWheelProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSCheckDragonWheelProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSCheckDragonWheelProp& from);
  void MergeFrom(const CSCheckDragonWheelProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSCheckDragonWheelProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSCheckDragonWheelProp";
  }
  protected:
  explicit CSCheckDragonWheelProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSCheckDragonWheelProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCCheckDragonWheelProp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCCheckDragonWheelProp) */ {
 public:
  inline SCCheckDragonWheelProp() : SCCheckDragonWheelProp(nullptr) {}
  virtual ~SCCheckDragonWheelProp();

  SCCheckDragonWheelProp(const SCCheckDragonWheelProp& from);
  SCCheckDragonWheelProp(SCCheckDragonWheelProp&& from) noexcept
    : SCCheckDragonWheelProp() {
    *this = ::std::move(from);
  }

  inline SCCheckDragonWheelProp& operator=(const SCCheckDragonWheelProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCCheckDragonWheelProp& operator=(SCCheckDragonWheelProp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCCheckDragonWheelProp& default_instance();

  static inline const SCCheckDragonWheelProp* internal_default_instance() {
    return reinterpret_cast<const SCCheckDragonWheelProp*>(
               &_SCCheckDragonWheelProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(SCCheckDragonWheelProp& a, SCCheckDragonWheelProp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCCheckDragonWheelProp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCCheckDragonWheelProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCCheckDragonWheelProp* New() const final {
    return CreateMaybeMessage<SCCheckDragonWheelProp>(nullptr);
  }

  SCCheckDragonWheelProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCCheckDragonWheelProp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCCheckDragonWheelProp& from);
  void MergeFrom(const SCCheckDragonWheelProp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCCheckDragonWheelProp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCCheckDragonWheelProp";
  }
  protected:
  explicit SCCheckDragonWheelProp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanUseFieldNumber = 1,
    kPropIdFieldNumber = 2,
    kChairIdFieldNumber = 3,
    kRatioFieldNumber = 4,
  };
  // bool can_use = 1;
  void clear_can_use();
  bool can_use() const;
  void set_can_use(bool value);
  private:
  bool _internal_can_use() const;
  void _internal_set_can_use(bool value);
  public:

  // int32 prop_id = 2;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_id = 3;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCCheckDragonWheelProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool can_use_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolDoubleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserPoolDoubleInfo) */ {
 public:
  inline CSUserPoolDoubleInfo() : CSUserPoolDoubleInfo(nullptr) {}
  virtual ~CSUserPoolDoubleInfo();

  CSUserPoolDoubleInfo(const CSUserPoolDoubleInfo& from);
  CSUserPoolDoubleInfo(CSUserPoolDoubleInfo&& from) noexcept
    : CSUserPoolDoubleInfo() {
    *this = ::std::move(from);
  }

  inline CSUserPoolDoubleInfo& operator=(const CSUserPoolDoubleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolDoubleInfo& operator=(CSUserPoolDoubleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolDoubleInfo& default_instance();

  static inline const CSUserPoolDoubleInfo* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolDoubleInfo*>(
               &_CSUserPoolDoubleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(CSUserPoolDoubleInfo& a, CSUserPoolDoubleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolDoubleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolDoubleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolDoubleInfo* New() const final {
    return CreateMaybeMessage<CSUserPoolDoubleInfo>(nullptr);
  }

  CSUserPoolDoubleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolDoubleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolDoubleInfo& from);
  void MergeFrom(const CSUserPoolDoubleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolDoubleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserPoolDoubleInfo";
  }
  protected:
  explicit CSUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserPoolDoubleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolDoubleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolDoubleInfo) */ {
 public:
  inline SCUserPoolDoubleInfo() : SCUserPoolDoubleInfo(nullptr) {}
  virtual ~SCUserPoolDoubleInfo();

  SCUserPoolDoubleInfo(const SCUserPoolDoubleInfo& from);
  SCUserPoolDoubleInfo(SCUserPoolDoubleInfo&& from) noexcept
    : SCUserPoolDoubleInfo() {
    *this = ::std::move(from);
  }

  inline SCUserPoolDoubleInfo& operator=(const SCUserPoolDoubleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolDoubleInfo& operator=(SCUserPoolDoubleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolDoubleInfo& default_instance();

  static inline const SCUserPoolDoubleInfo* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolDoubleInfo*>(
               &_SCUserPoolDoubleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(SCUserPoolDoubleInfo& a, SCUserPoolDoubleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolDoubleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolDoubleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolDoubleInfo* New() const final {
    return CreateMaybeMessage<SCUserPoolDoubleInfo>(nullptr);
  }

  SCUserPoolDoubleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolDoubleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolDoubleInfo& from);
  void MergeFrom(const SCUserPoolDoubleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolDoubleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolDoubleInfo";
  }
  protected:
  explicit SCUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemBeforeFieldNumber = 2,
    kItemDoubleFieldNumber = 3,
    kCostFieldNumber = 1,
  };
  // .BYDLD.Object2 item_before = 2;
  bool has_item_before() const;
  private:
  bool _internal_has_item_before() const;
  public:
  void clear_item_before();
  const ::BYDLD::Object2& item_before() const;
  ::BYDLD::Object2* release_item_before();
  ::BYDLD::Object2* mutable_item_before();
  void set_allocated_item_before(::BYDLD::Object2* item_before);
  private:
  const ::BYDLD::Object2& _internal_item_before() const;
  ::BYDLD::Object2* _internal_mutable_item_before();
  public:
  void unsafe_arena_set_allocated_item_before(
      ::BYDLD::Object2* item_before);
  ::BYDLD::Object2* unsafe_arena_release_item_before();

  // .BYDLD.Object2 item_double = 3;
  bool has_item_double() const;
  private:
  bool _internal_has_item_double() const;
  public:
  void clear_item_double();
  const ::BYDLD::Object2& item_double() const;
  ::BYDLD::Object2* release_item_double();
  ::BYDLD::Object2* mutable_item_double();
  void set_allocated_item_double(::BYDLD::Object2* item_double);
  private:
  const ::BYDLD::Object2& _internal_item_double() const;
  ::BYDLD::Object2* _internal_mutable_item_double();
  public:
  void unsafe_arena_set_allocated_item_double(
      ::BYDLD::Object2* item_double);
  ::BYDLD::Object2* unsafe_arena_release_item_double();

  // int32 cost = 1;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolDoubleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::Object2* item_before_;
  ::BYDLD::Object2* item_double_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSUserPoolDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSUserPoolDouble) */ {
 public:
  inline CSUserPoolDouble() : CSUserPoolDouble(nullptr) {}
  virtual ~CSUserPoolDouble();

  CSUserPoolDouble(const CSUserPoolDouble& from);
  CSUserPoolDouble(CSUserPoolDouble&& from) noexcept
    : CSUserPoolDouble() {
    *this = ::std::move(from);
  }

  inline CSUserPoolDouble& operator=(const CSUserPoolDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSUserPoolDouble& operator=(CSUserPoolDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSUserPoolDouble& default_instance();

  static inline const CSUserPoolDouble* internal_default_instance() {
    return reinterpret_cast<const CSUserPoolDouble*>(
               &_CSUserPoolDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(CSUserPoolDouble& a, CSUserPoolDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(CSUserPoolDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSUserPoolDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSUserPoolDouble* New() const final {
    return CreateMaybeMessage<CSUserPoolDouble>(nullptr);
  }

  CSUserPoolDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSUserPoolDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSUserPoolDouble& from);
  void MergeFrom(const CSUserPoolDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSUserPoolDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSUserPoolDouble";
  }
  protected:
  explicit CSUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDoubleFieldNumber = 1,
  };
  // bool is_double = 1;
  void clear_is_double();
  bool is_double() const;
  void set_is_double(bool value);
  private:
  bool _internal_is_double() const;
  void _internal_set_is_double(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSUserPoolDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_double_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUserPoolDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUserPoolDouble) */ {
 public:
  inline SCUserPoolDouble() : SCUserPoolDouble(nullptr) {}
  virtual ~SCUserPoolDouble();

  SCUserPoolDouble(const SCUserPoolDouble& from);
  SCUserPoolDouble(SCUserPoolDouble&& from) noexcept
    : SCUserPoolDouble() {
    *this = ::std::move(from);
  }

  inline SCUserPoolDouble& operator=(const SCUserPoolDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUserPoolDouble& operator=(SCUserPoolDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUserPoolDouble& default_instance();

  static inline const SCUserPoolDouble* internal_default_instance() {
    return reinterpret_cast<const SCUserPoolDouble*>(
               &_SCUserPoolDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(SCUserPoolDouble& a, SCUserPoolDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUserPoolDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUserPoolDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUserPoolDouble* New() const final {
    return CreateMaybeMessage<SCUserPoolDouble>(nullptr);
  }

  SCUserPoolDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUserPoolDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUserPoolDouble& from);
  void MergeFrom(const SCUserPoolDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUserPoolDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUserPoolDouble";
  }
  protected:
  explicit SCUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 4,
    kExtraItemFieldNumber = 5,
    kCodeFieldNumber = 1,
    kResultFieldNumber = 2,
    kChairIdxFieldNumber = 3,
  };
  // .BYDLD.Object3 item = 4;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::BYDLD::Object3& item() const;
  ::BYDLD::Object3* release_item();
  ::BYDLD::Object3* mutable_item();
  void set_allocated_item(::BYDLD::Object3* item);
  private:
  const ::BYDLD::Object3& _internal_item() const;
  ::BYDLD::Object3* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::BYDLD::Object3* item);
  ::BYDLD::Object3* unsafe_arena_release_item();

  // .BYDLD.Object3 extra_item = 5;
  bool has_extra_item() const;
  private:
  bool _internal_has_extra_item() const;
  public:
  void clear_extra_item();
  const ::BYDLD::Object3& extra_item() const;
  ::BYDLD::Object3* release_extra_item();
  ::BYDLD::Object3* mutable_extra_item();
  void set_allocated_extra_item(::BYDLD::Object3* extra_item);
  private:
  const ::BYDLD::Object3& _internal_extra_item() const;
  ::BYDLD::Object3* _internal_mutable_extra_item();
  public:
  void unsafe_arena_set_allocated_extra_item(
      ::BYDLD::Object3* extra_item);
  ::BYDLD::Object3* unsafe_arena_release_extra_item();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_idx = 3;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUserPoolDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::Object3* item_;
  ::BYDLD::Object3* extra_item_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLuckyPoolInfo) */ {
 public:
  inline CSLuckyPoolInfo() : CSLuckyPoolInfo(nullptr) {}
  virtual ~CSLuckyPoolInfo();

  CSLuckyPoolInfo(const CSLuckyPoolInfo& from);
  CSLuckyPoolInfo(CSLuckyPoolInfo&& from) noexcept
    : CSLuckyPoolInfo() {
    *this = ::std::move(from);
  }

  inline CSLuckyPoolInfo& operator=(const CSLuckyPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyPoolInfo& operator=(CSLuckyPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyPoolInfo& default_instance();

  static inline const CSLuckyPoolInfo* internal_default_instance() {
    return reinterpret_cast<const CSLuckyPoolInfo*>(
               &_CSLuckyPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(CSLuckyPoolInfo& a, CSLuckyPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyPoolInfo* New() const final {
    return CreateMaybeMessage<CSLuckyPoolInfo>(nullptr);
  }

  CSLuckyPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyPoolInfo& from);
  void MergeFrom(const CSLuckyPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLuckyPoolInfo";
  }
  protected:
  explicit CSLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSLuckyPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyPoolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyPoolInfo) */ {
 public:
  inline SCLuckyPoolInfo() : SCLuckyPoolInfo(nullptr) {}
  virtual ~SCLuckyPoolInfo();

  SCLuckyPoolInfo(const SCLuckyPoolInfo& from);
  SCLuckyPoolInfo(SCLuckyPoolInfo&& from) noexcept
    : SCLuckyPoolInfo() {
    *this = ::std::move(from);
  }

  inline SCLuckyPoolInfo& operator=(const SCLuckyPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyPoolInfo& operator=(SCLuckyPoolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyPoolInfo& default_instance();

  static inline const SCLuckyPoolInfo* internal_default_instance() {
    return reinterpret_cast<const SCLuckyPoolInfo*>(
               &_SCLuckyPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(SCLuckyPoolInfo& a, SCLuckyPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyPoolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyPoolInfo* New() const final {
    return CreateMaybeMessage<SCLuckyPoolInfo>(nullptr);
  }

  SCLuckyPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyPoolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyPoolInfo& from);
  void MergeFrom(const SCLuckyPoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyPoolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyPoolInfo";
  }
  protected:
  explicit SCLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max = 2;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSLuckyPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSLuckyPoolDraw) */ {
 public:
  inline CSLuckyPoolDraw() : CSLuckyPoolDraw(nullptr) {}
  virtual ~CSLuckyPoolDraw();

  CSLuckyPoolDraw(const CSLuckyPoolDraw& from);
  CSLuckyPoolDraw(CSLuckyPoolDraw&& from) noexcept
    : CSLuckyPoolDraw() {
    *this = ::std::move(from);
  }

  inline CSLuckyPoolDraw& operator=(const CSLuckyPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLuckyPoolDraw& operator=(CSLuckyPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLuckyPoolDraw& default_instance();

  static inline const CSLuckyPoolDraw* internal_default_instance() {
    return reinterpret_cast<const CSLuckyPoolDraw*>(
               &_CSLuckyPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(CSLuckyPoolDraw& a, CSLuckyPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLuckyPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLuckyPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLuckyPoolDraw* New() const final {
    return CreateMaybeMessage<CSLuckyPoolDraw>(nullptr);
  }

  CSLuckyPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLuckyPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLuckyPoolDraw& from);
  void MergeFrom(const CSLuckyPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLuckyPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSLuckyPoolDraw";
  }
  protected:
  explicit CSLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSLuckyPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCLuckyPoolDraw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCLuckyPoolDraw) */ {
 public:
  inline SCLuckyPoolDraw() : SCLuckyPoolDraw(nullptr) {}
  virtual ~SCLuckyPoolDraw();

  SCLuckyPoolDraw(const SCLuckyPoolDraw& from);
  SCLuckyPoolDraw(SCLuckyPoolDraw&& from) noexcept
    : SCLuckyPoolDraw() {
    *this = ::std::move(from);
  }

  inline SCLuckyPoolDraw& operator=(const SCLuckyPoolDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLuckyPoolDraw& operator=(SCLuckyPoolDraw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLuckyPoolDraw& default_instance();

  static inline const SCLuckyPoolDraw* internal_default_instance() {
    return reinterpret_cast<const SCLuckyPoolDraw*>(
               &_SCLuckyPoolDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(SCLuckyPoolDraw& a, SCLuckyPoolDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLuckyPoolDraw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLuckyPoolDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLuckyPoolDraw* New() const final {
    return CreateMaybeMessage<SCLuckyPoolDraw>(nullptr);
  }

  SCLuckyPoolDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLuckyPoolDraw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLuckyPoolDraw& from);
  void MergeFrom(const SCLuckyPoolDraw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLuckyPoolDraw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCLuckyPoolDraw";
  }
  protected:
  explicit SCLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .BYDLD.Object3 item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::BYDLD::Object3& item() const;
  ::BYDLD::Object3* release_item();
  ::BYDLD::Object3* mutable_item();
  void set_allocated_item(::BYDLD::Object3* item);
  private:
  const ::BYDLD::Object3& _internal_item() const;
  ::BYDLD::Object3* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::BYDLD::Object3* item);
  ::BYDLD::Object3* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:BYDLD.SCLuckyPoolDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::Object3* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class TridentRankList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.TridentRankList) */ {
 public:
  inline TridentRankList() : TridentRankList(nullptr) {}
  virtual ~TridentRankList();

  TridentRankList(const TridentRankList& from);
  TridentRankList(TridentRankList&& from) noexcept
    : TridentRankList() {
    *this = ::std::move(from);
  }

  inline TridentRankList& operator=(const TridentRankList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TridentRankList& operator=(TridentRankList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TridentRankList& default_instance();

  static inline const TridentRankList* internal_default_instance() {
    return reinterpret_cast<const TridentRankList*>(
               &_TridentRankList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(TridentRankList& a, TridentRankList& b) {
    a.Swap(&b);
  }
  inline void Swap(TridentRankList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TridentRankList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TridentRankList* New() const final {
    return CreateMaybeMessage<TridentRankList>(nullptr);
  }

  TridentRankList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TridentRankList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TridentRankList& from);
  void MergeFrom(const TridentRankList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TridentRankList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.TridentRankList";
  }
  protected:
  explicit TridentRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kDateTimeFieldNumber = 4,
    kUserDbidFieldNumber = 1,
    kContinueTimesFieldNumber = 3,
    kRankFieldNumber = 5,
  };
  // string nick_name = 2;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string date_time = 4;
  void clear_date_time();
  const std::string& date_time() const;
  void set_date_time(const std::string& value);
  void set_date_time(std::string&& value);
  void set_date_time(const char* value);
  void set_date_time(const char* value, size_t size);
  std::string* mutable_date_time();
  std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // int32 user_dbid = 1;
  void clear_user_dbid();
  ::PROTOBUF_NAMESPACE_ID::int32 user_dbid() const;
  void set_user_dbid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_dbid() const;
  void _internal_set_user_dbid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 continue_times = 3;
  void clear_continue_times();
  ::PROTOBUF_NAMESPACE_ID::int32 continue_times() const;
  void set_continue_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_continue_times() const;
  void _internal_set_continue_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rank = 5;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.TridentRankList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_dbid_;
  ::PROTOBUF_NAMESPACE_ID::int32 continue_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCTridentRankResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCTridentRankResult) */ {
 public:
  inline SCTridentRankResult() : SCTridentRankResult(nullptr) {}
  virtual ~SCTridentRankResult();

  SCTridentRankResult(const SCTridentRankResult& from);
  SCTridentRankResult(SCTridentRankResult&& from) noexcept
    : SCTridentRankResult() {
    *this = ::std::move(from);
  }

  inline SCTridentRankResult& operator=(const SCTridentRankResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTridentRankResult& operator=(SCTridentRankResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTridentRankResult& default_instance();

  static inline const SCTridentRankResult* internal_default_instance() {
    return reinterpret_cast<const SCTridentRankResult*>(
               &_SCTridentRankResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(SCTridentRankResult& a, SCTridentRankResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTridentRankResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTridentRankResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTridentRankResult* New() const final {
    return CreateMaybeMessage<SCTridentRankResult>(nullptr);
  }

  SCTridentRankResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTridentRankResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTridentRankResult& from);
  void MergeFrom(const SCTridentRankResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTridentRankResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCTridentRankResult";
  }
  protected:
  explicit SCTridentRankResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurRanksFieldNumber = 1,
    kHisRanksFieldNumber = 2,
  };
  // repeated .BYDLD.TridentRankList cur_ranks = 1;
  int cur_ranks_size() const;
  private:
  int _internal_cur_ranks_size() const;
  public:
  void clear_cur_ranks();
  ::BYDLD::TridentRankList* mutable_cur_ranks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >*
      mutable_cur_ranks();
  private:
  const ::BYDLD::TridentRankList& _internal_cur_ranks(int index) const;
  ::BYDLD::TridentRankList* _internal_add_cur_ranks();
  public:
  const ::BYDLD::TridentRankList& cur_ranks(int index) const;
  ::BYDLD::TridentRankList* add_cur_ranks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >&
      cur_ranks() const;

  // repeated .BYDLD.TridentRankList his_ranks = 2;
  int his_ranks_size() const;
  private:
  int _internal_his_ranks_size() const;
  public:
  void clear_his_ranks();
  ::BYDLD::TridentRankList* mutable_his_ranks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >*
      mutable_his_ranks();
  private:
  const ::BYDLD::TridentRankList& _internal_his_ranks(int index) const;
  ::BYDLD::TridentRankList* _internal_add_his_ranks();
  public:
  const ::BYDLD::TridentRankList& his_ranks(int index) const;
  ::BYDLD::TridentRankList* add_his_ranks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >&
      his_ranks() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCTridentRankResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList > cur_ranks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList > his_ranks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBigSmallWinInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBigSmallWinInfo) */ {
 public:
  inline CSBigSmallWinInfo() : CSBigSmallWinInfo(nullptr) {}
  virtual ~CSBigSmallWinInfo();

  CSBigSmallWinInfo(const CSBigSmallWinInfo& from);
  CSBigSmallWinInfo(CSBigSmallWinInfo&& from) noexcept
    : CSBigSmallWinInfo() {
    *this = ::std::move(from);
  }

  inline CSBigSmallWinInfo& operator=(const CSBigSmallWinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBigSmallWinInfo& operator=(CSBigSmallWinInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBigSmallWinInfo& default_instance();

  static inline const CSBigSmallWinInfo* internal_default_instance() {
    return reinterpret_cast<const CSBigSmallWinInfo*>(
               &_CSBigSmallWinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(CSBigSmallWinInfo& a, CSBigSmallWinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBigSmallWinInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBigSmallWinInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBigSmallWinInfo* New() const final {
    return CreateMaybeMessage<CSBigSmallWinInfo>(nullptr);
  }

  CSBigSmallWinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBigSmallWinInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBigSmallWinInfo& from);
  void MergeFrom(const CSBigSmallWinInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBigSmallWinInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBigSmallWinInfo";
  }
  protected:
  explicit CSBigSmallWinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBigSmallWinInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBigSmallWinInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBigSmallWinInfo) */ {
 public:
  inline SCBigSmallWinInfo() : SCBigSmallWinInfo(nullptr) {}
  virtual ~SCBigSmallWinInfo();

  SCBigSmallWinInfo(const SCBigSmallWinInfo& from);
  SCBigSmallWinInfo(SCBigSmallWinInfo&& from) noexcept
    : SCBigSmallWinInfo() {
    *this = ::std::move(from);
  }

  inline SCBigSmallWinInfo& operator=(const SCBigSmallWinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBigSmallWinInfo& operator=(SCBigSmallWinInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBigSmallWinInfo& default_instance();

  static inline const SCBigSmallWinInfo* internal_default_instance() {
    return reinterpret_cast<const SCBigSmallWinInfo*>(
               &_SCBigSmallWinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(SCBigSmallWinInfo& a, SCBigSmallWinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBigSmallWinInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBigSmallWinInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBigSmallWinInfo* New() const final {
    return CreateMaybeMessage<SCBigSmallWinInfo>(nullptr);
  }

  SCBigSmallWinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBigSmallWinInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBigSmallWinInfo& from);
  void MergeFrom(const SCBigSmallWinInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBigSmallWinInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBigSmallWinInfo";
  }
  protected:
  explicit SCBigSmallWinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 3,
    kCurWinTimesFieldNumber = 1,
    kTodayWinTimesFieldNumber = 2,
  };
  // string date_time = 3;
  void clear_date_time();
  const std::string& date_time() const;
  void set_date_time(const std::string& value);
  void set_date_time(std::string&& value);
  void set_date_time(const char* value);
  void set_date_time(const char* value, size_t size);
  std::string* mutable_date_time();
  std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // int32 cur_win_times = 1;
  void clear_cur_win_times();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_win_times() const;
  void set_cur_win_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_win_times() const;
  void _internal_set_cur_win_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 today_win_times = 2;
  void clear_today_win_times();
  ::PROTOBUF_NAMESPACE_ID::int32 today_win_times() const;
  void set_today_win_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_today_win_times() const;
  void _internal_set_today_win_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCBigSmallWinInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_win_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 today_win_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBigSmallRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBigSmallRecord) */ {
 public:
  inline CSBigSmallRecord() : CSBigSmallRecord(nullptr) {}
  virtual ~CSBigSmallRecord();

  CSBigSmallRecord(const CSBigSmallRecord& from);
  CSBigSmallRecord(CSBigSmallRecord&& from) noexcept
    : CSBigSmallRecord() {
    *this = ::std::move(from);
  }

  inline CSBigSmallRecord& operator=(const CSBigSmallRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBigSmallRecord& operator=(CSBigSmallRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBigSmallRecord& default_instance();

  static inline const CSBigSmallRecord* internal_default_instance() {
    return reinterpret_cast<const CSBigSmallRecord*>(
               &_CSBigSmallRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(CSBigSmallRecord& a, CSBigSmallRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBigSmallRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBigSmallRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBigSmallRecord* New() const final {
    return CreateMaybeMessage<CSBigSmallRecord>(nullptr);
  }

  CSBigSmallRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBigSmallRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBigSmallRecord& from);
  void MergeFrom(const CSBigSmallRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBigSmallRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBigSmallRecord";
  }
  protected:
  explicit CSBigSmallRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxGetFieldNumber = 1,
  };
  // int32 max_get = 1;
  void clear_max_get();
  ::PROTOBUF_NAMESPACE_ID::int32 max_get() const;
  void set_max_get(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_get() const;
  void _internal_set_max_get(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBigSmallRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_get_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class BigSmallRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.BigSmallRecord) */ {
 public:
  inline BigSmallRecord() : BigSmallRecord(nullptr) {}
  virtual ~BigSmallRecord();

  BigSmallRecord(const BigSmallRecord& from);
  BigSmallRecord(BigSmallRecord&& from) noexcept
    : BigSmallRecord() {
    *this = ::std::move(from);
  }

  inline BigSmallRecord& operator=(const BigSmallRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigSmallRecord& operator=(BigSmallRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BigSmallRecord& default_instance();

  static inline const BigSmallRecord* internal_default_instance() {
    return reinterpret_cast<const BigSmallRecord*>(
               &_BigSmallRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(BigSmallRecord& a, BigSmallRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(BigSmallRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigSmallRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BigSmallRecord* New() const final {
    return CreateMaybeMessage<BigSmallRecord>(nullptr);
  }

  BigSmallRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BigSmallRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BigSmallRecord& from);
  void MergeFrom(const BigSmallRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigSmallRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.BigSmallRecord";
  }
  protected:
  explicit BigSmallRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDicesFieldNumber = 1,
  };
  // repeated int32 dices = 1;
  int dices_size() const;
  private:
  int _internal_dices_size() const;
  public:
  void clear_dices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dices() const;
  void _internal_add_dices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dices(int index) const;
  void set_dices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dices();

  // @@protoc_insertion_point(class_scope:BYDLD.BigSmallRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dices_;
  mutable std::atomic<int> _dices_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBigSmallRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBigSmallRecord) */ {
 public:
  inline SCBigSmallRecord() : SCBigSmallRecord(nullptr) {}
  virtual ~SCBigSmallRecord();

  SCBigSmallRecord(const SCBigSmallRecord& from);
  SCBigSmallRecord(SCBigSmallRecord&& from) noexcept
    : SCBigSmallRecord() {
    *this = ::std::move(from);
  }

  inline SCBigSmallRecord& operator=(const SCBigSmallRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBigSmallRecord& operator=(SCBigSmallRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBigSmallRecord& default_instance();

  static inline const SCBigSmallRecord* internal_default_instance() {
    return reinterpret_cast<const SCBigSmallRecord*>(
               &_SCBigSmallRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(SCBigSmallRecord& a, SCBigSmallRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBigSmallRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBigSmallRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBigSmallRecord* New() const final {
    return CreateMaybeMessage<SCBigSmallRecord>(nullptr);
  }

  SCBigSmallRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBigSmallRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBigSmallRecord& from);
  void MergeFrom(const SCBigSmallRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBigSmallRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBigSmallRecord";
  }
  protected:
  explicit SCBigSmallRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .BYDLD.BigSmallRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::BYDLD::BigSmallRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::BigSmallRecord >*
      mutable_records();
  private:
  const ::BYDLD::BigSmallRecord& _internal_records(int index) const;
  ::BYDLD::BigSmallRecord* _internal_add_records();
  public:
  const ::BYDLD::BigSmallRecord& records(int index) const;
  ::BYDLD::BigSmallRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::BigSmallRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCBigSmallRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::BigSmallRecord > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class ItemEnableInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.ItemEnableInfo) */ {
 public:
  inline ItemEnableInfo() : ItemEnableInfo(nullptr) {}
  virtual ~ItemEnableInfo();

  ItemEnableInfo(const ItemEnableInfo& from);
  ItemEnableInfo(ItemEnableInfo&& from) noexcept
    : ItemEnableInfo() {
    *this = ::std::move(from);
  }

  inline ItemEnableInfo& operator=(const ItemEnableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemEnableInfo& operator=(ItemEnableInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemEnableInfo& default_instance();

  static inline const ItemEnableInfo* internal_default_instance() {
    return reinterpret_cast<const ItemEnableInfo*>(
               &_ItemEnableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(ItemEnableInfo& a, ItemEnableInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemEnableInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemEnableInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemEnableInfo* New() const final {
    return CreateMaybeMessage<ItemEnableInfo>(nullptr);
  }

  ItemEnableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemEnableInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemEnableInfo& from);
  void MergeFrom(const ItemEnableInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemEnableInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.ItemEnableInfo";
  }
  protected:
  explicit ItemEnableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int32 name = 1;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.ItemEnableInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class ItemEnableNotice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.ItemEnableNotice) */ {
 public:
  inline ItemEnableNotice() : ItemEnableNotice(nullptr) {}
  virtual ~ItemEnableNotice();

  ItemEnableNotice(const ItemEnableNotice& from);
  ItemEnableNotice(ItemEnableNotice&& from) noexcept
    : ItemEnableNotice() {
    *this = ::std::move(from);
  }

  inline ItemEnableNotice& operator=(const ItemEnableNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemEnableNotice& operator=(ItemEnableNotice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemEnableNotice& default_instance();

  static inline const ItemEnableNotice* internal_default_instance() {
    return reinterpret_cast<const ItemEnableNotice*>(
               &_ItemEnableNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(ItemEnableNotice& a, ItemEnableNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemEnableNotice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemEnableNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemEnableNotice* New() const final {
    return CreateMaybeMessage<ItemEnableNotice>(nullptr);
  }

  ItemEnableNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemEnableNotice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemEnableNotice& from);
  void MergeFrom(const ItemEnableNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemEnableNotice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.ItemEnableNotice";
  }
  protected:
  explicit ItemEnableNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .BYDLD.ItemEnableInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::BYDLD::ItemEnableInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemEnableInfo >*
      mutable_items();
  private:
  const ::BYDLD::ItemEnableInfo& _internal_items(int index) const;
  ::BYDLD::ItemEnableInfo* _internal_add_items();
  public:
  const ::BYDLD::ItemEnableInfo& items(int index) const;
  ::BYDLD::ItemEnableInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemEnableInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:BYDLD.ItemEnableNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemEnableInfo > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class RewardTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.RewardTask) */ {
 public:
  inline RewardTask() : RewardTask(nullptr) {}
  virtual ~RewardTask();

  RewardTask(const RewardTask& from);
  RewardTask(RewardTask&& from) noexcept
    : RewardTask() {
    *this = ::std::move(from);
  }

  inline RewardTask& operator=(const RewardTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardTask& operator=(RewardTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardTask& default_instance();

  static inline const RewardTask* internal_default_instance() {
    return reinterpret_cast<const RewardTask*>(
               &_RewardTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(RewardTask& a, RewardTask& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardTask* New() const final {
    return CreateMaybeMessage<RewardTask>(nullptr);
  }

  RewardTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardTask& from);
  void MergeFrom(const RewardTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.RewardTask";
  }
  protected:
  explicit RewardTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 taskId = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.RewardTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class RewardConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.RewardConf) */ {
 public:
  inline RewardConf() : RewardConf(nullptr) {}
  virtual ~RewardConf();

  RewardConf(const RewardConf& from);
  RewardConf(RewardConf&& from) noexcept
    : RewardConf() {
    *this = ::std::move(from);
  }

  inline RewardConf& operator=(const RewardConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardConf& operator=(RewardConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardConf& default_instance();

  static inline const RewardConf* internal_default_instance() {
    return reinterpret_cast<const RewardConf*>(
               &_RewardConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(RewardConf& a, RewardConf& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardConf* New() const final {
    return CreateMaybeMessage<RewardConf>(nullptr);
  }

  RewardConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardConf& from);
  void MergeFrom(const RewardConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.RewardConf";
  }
  protected:
  explicit RewardConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIDFieldNumber = 1,
    kNAwardFieldNumber = 2,
  };
  // int32 taskID = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nAward = 2;
  void clear_naward();
  ::PROTOBUF_NAMESPACE_ID::int32 naward() const;
  void set_naward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_naward() const;
  void _internal_set_naward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.RewardConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 naward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSReqRewardAddTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSReqRewardAddTask) */ {
 public:
  inline CSReqRewardAddTask() : CSReqRewardAddTask(nullptr) {}
  virtual ~CSReqRewardAddTask();

  CSReqRewardAddTask(const CSReqRewardAddTask& from);
  CSReqRewardAddTask(CSReqRewardAddTask&& from) noexcept
    : CSReqRewardAddTask() {
    *this = ::std::move(from);
  }

  inline CSReqRewardAddTask& operator=(const CSReqRewardAddTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqRewardAddTask& operator=(CSReqRewardAddTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSReqRewardAddTask& default_instance();

  static inline const CSReqRewardAddTask* internal_default_instance() {
    return reinterpret_cast<const CSReqRewardAddTask*>(
               &_CSReqRewardAddTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(CSReqRewardAddTask& a, CSReqRewardAddTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqRewardAddTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqRewardAddTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSReqRewardAddTask* New() const final {
    return CreateMaybeMessage<CSReqRewardAddTask>(nullptr);
  }

  CSReqRewardAddTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSReqRewardAddTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSReqRewardAddTask& from);
  void MergeFrom(const CSReqRewardAddTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqRewardAddTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSReqRewardAddTask";
  }
  protected:
  explicit CSReqRewardAddTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kTaskIDFieldNumber = 2,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taskID = 2;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSReqRewardAddTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCRepRewardTaskList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCRepRewardTaskList) */ {
 public:
  inline SCRepRewardTaskList() : SCRepRewardTaskList(nullptr) {}
  virtual ~SCRepRewardTaskList();

  SCRepRewardTaskList(const SCRepRewardTaskList& from);
  SCRepRewardTaskList(SCRepRewardTaskList&& from) noexcept
    : SCRepRewardTaskList() {
    *this = ::std::move(from);
  }

  inline SCRepRewardTaskList& operator=(const SCRepRewardTaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRepRewardTaskList& operator=(SCRepRewardTaskList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRepRewardTaskList& default_instance();

  static inline const SCRepRewardTaskList* internal_default_instance() {
    return reinterpret_cast<const SCRepRewardTaskList*>(
               &_SCRepRewardTaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(SCRepRewardTaskList& a, SCRepRewardTaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRepRewardTaskList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRepRewardTaskList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRepRewardTaskList* New() const final {
    return CreateMaybeMessage<SCRepRewardTaskList>(nullptr);
  }

  SCRepRewardTaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRepRewardTaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRepRewardTaskList& from);
  void MergeFrom(const SCRepRewardTaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRepRewardTaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCRepRewardTaskList";
  }
  protected:
  explicit SCRepRewardTaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTListFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // repeated .BYDLD.RewardTask tList = 2;
  int tlist_size() const;
  private:
  int _internal_tlist_size() const;
  public:
  void clear_tlist();
  ::BYDLD::RewardTask* mutable_tlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >*
      mutable_tlist();
  private:
  const ::BYDLD::RewardTask& _internal_tlist(int index) const;
  ::BYDLD::RewardTask* _internal_add_tlist();
  public:
  const ::BYDLD::RewardTask& tlist(int index) const;
  ::BYDLD::RewardTask* add_tlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >&
      tlist() const;

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCRepRewardTaskList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask > tlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCRewardTaskFinish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCRewardTaskFinish) */ {
 public:
  inline SCRewardTaskFinish() : SCRewardTaskFinish(nullptr) {}
  virtual ~SCRewardTaskFinish();

  SCRewardTaskFinish(const SCRewardTaskFinish& from);
  SCRewardTaskFinish(SCRewardTaskFinish&& from) noexcept
    : SCRewardTaskFinish() {
    *this = ::std::move(from);
  }

  inline SCRewardTaskFinish& operator=(const SCRewardTaskFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRewardTaskFinish& operator=(SCRewardTaskFinish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRewardTaskFinish& default_instance();

  static inline const SCRewardTaskFinish* internal_default_instance() {
    return reinterpret_cast<const SCRewardTaskFinish*>(
               &_SCRewardTaskFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(SCRewardTaskFinish& a, SCRewardTaskFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRewardTaskFinish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRewardTaskFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRewardTaskFinish* New() const final {
    return CreateMaybeMessage<SCRewardTaskFinish>(nullptr);
  }

  SCRewardTaskFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRewardTaskFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRewardTaskFinish& from);
  void MergeFrom(const SCRewardTaskFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRewardTaskFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCRewardTaskFinish";
  }
  protected:
  explicit SCRewardTaskFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTListFieldNumber = 3,
    kResultFieldNumber = 1,
    kMoneyFieldNumber = 2,
  };
  // repeated .BYDLD.RewardTask tList = 3;
  int tlist_size() const;
  private:
  int _internal_tlist_size() const;
  public:
  void clear_tlist();
  ::BYDLD::RewardTask* mutable_tlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >*
      mutable_tlist();
  private:
  const ::BYDLD::RewardTask& _internal_tlist(int index) const;
  ::BYDLD::RewardTask* _internal_add_tlist();
  public:
  const ::BYDLD::RewardTask& tlist(int index) const;
  ::BYDLD::RewardTask* add_tlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >&
      tlist() const;

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 money = 2;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCRewardTaskFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask > tlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncRewardTaskResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncRewardTaskResult) */ {
 public:
  inline SCSyncRewardTaskResult() : SCSyncRewardTaskResult(nullptr) {}
  virtual ~SCSyncRewardTaskResult();

  SCSyncRewardTaskResult(const SCSyncRewardTaskResult& from);
  SCSyncRewardTaskResult(SCSyncRewardTaskResult&& from) noexcept
    : SCSyncRewardTaskResult() {
    *this = ::std::move(from);
  }

  inline SCSyncRewardTaskResult& operator=(const SCSyncRewardTaskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncRewardTaskResult& operator=(SCSyncRewardTaskResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncRewardTaskResult& default_instance();

  static inline const SCSyncRewardTaskResult* internal_default_instance() {
    return reinterpret_cast<const SCSyncRewardTaskResult*>(
               &_SCSyncRewardTaskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(SCSyncRewardTaskResult& a, SCSyncRewardTaskResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncRewardTaskResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncRewardTaskResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncRewardTaskResult* New() const final {
    return CreateMaybeMessage<SCSyncRewardTaskResult>(nullptr);
  }

  SCSyncRewardTaskResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncRewardTaskResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncRewardTaskResult& from);
  void MergeFrom(const SCSyncRewardTaskResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncRewardTaskResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncRewardTaskResult";
  }
  protected:
  explicit SCSyncRewardTaskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kChairIdFieldNumber = 1,
    kEarnFieldNumber = 3,
    kFishIdFieldNumber = 4,
    kGetPeilvFieldNumber = 5,
    kMultipleFieldNumber = 6,
    kCritMultipleFieldNumber = 7,
    kIngotMultiFieldNumber = 8,
    kTridentMultiFieldNumber = 9,
  };
  // .BYDLD.SCRewardTaskFinish result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::BYDLD::SCRewardTaskFinish& result() const;
  ::BYDLD::SCRewardTaskFinish* release_result();
  ::BYDLD::SCRewardTaskFinish* mutable_result();
  void set_allocated_result(::BYDLD::SCRewardTaskFinish* result);
  private:
  const ::BYDLD::SCRewardTaskFinish& _internal_result() const;
  ::BYDLD::SCRewardTaskFinish* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::BYDLD::SCRewardTaskFinish* result);
  ::BYDLD::SCRewardTaskFinish* unsafe_arena_release_result();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 3;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_id = 4;
  void clear_fish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id() const;
  void set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_id() const;
  void _internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 get_peilv = 5;
  void clear_get_peilv();
  ::PROTOBUF_NAMESPACE_ID::int32 get_peilv() const;
  void set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_get_peilv() const;
  void _internal_set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 6;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 crit_multiple = 7;
  void clear_crit_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 crit_multiple() const;
  void set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit_multiple() const;
  void _internal_set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ingot_multi = 8;
  void clear_ingot_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi() const;
  void set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_multi() const;
  void _internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trident_multi = 9;
  void clear_trident_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 trident_multi() const;
  void set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trident_multi() const;
  void _internal_set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncRewardTaskResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::SCRewardTaskFinish* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 get_peilv_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 crit_multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi_;
  ::PROTOBUF_NAMESPACE_ID::int32 trident_multi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSReqRewardRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSReqRewardRecord) */ {
 public:
  inline CSReqRewardRecord() : CSReqRewardRecord(nullptr) {}
  virtual ~CSReqRewardRecord();

  CSReqRewardRecord(const CSReqRewardRecord& from);
  CSReqRewardRecord(CSReqRewardRecord&& from) noexcept
    : CSReqRewardRecord() {
    *this = ::std::move(from);
  }

  inline CSReqRewardRecord& operator=(const CSReqRewardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqRewardRecord& operator=(CSReqRewardRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSReqRewardRecord& default_instance();

  static inline const CSReqRewardRecord* internal_default_instance() {
    return reinterpret_cast<const CSReqRewardRecord*>(
               &_CSReqRewardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(CSReqRewardRecord& a, CSReqRewardRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqRewardRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqRewardRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSReqRewardRecord* New() const final {
    return CreateMaybeMessage<CSReqRewardRecord>(nullptr);
  }

  CSReqRewardRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSReqRewardRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSReqRewardRecord& from);
  void MergeFrom(const CSReqRewardRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqRewardRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSReqRewardRecord";
  }
  protected:
  explicit CSReqRewardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSReqRewardRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCRepRewardTaskRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCRepRewardTaskRecord) */ {
 public:
  inline SCRepRewardTaskRecord() : SCRepRewardTaskRecord(nullptr) {}
  virtual ~SCRepRewardTaskRecord();

  SCRepRewardTaskRecord(const SCRepRewardTaskRecord& from);
  SCRepRewardTaskRecord(SCRepRewardTaskRecord&& from) noexcept
    : SCRepRewardTaskRecord() {
    *this = ::std::move(from);
  }

  inline SCRepRewardTaskRecord& operator=(const SCRepRewardTaskRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRepRewardTaskRecord& operator=(SCRepRewardTaskRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRepRewardTaskRecord& default_instance();

  static inline const SCRepRewardTaskRecord* internal_default_instance() {
    return reinterpret_cast<const SCRepRewardTaskRecord*>(
               &_SCRepRewardTaskRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(SCRepRewardTaskRecord& a, SCRepRewardTaskRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRepRewardTaskRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRepRewardTaskRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRepRewardTaskRecord* New() const final {
    return CreateMaybeMessage<SCRepRewardTaskRecord>(nullptr);
  }

  SCRepRewardTaskRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRepRewardTaskRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRepRewardTaskRecord& from);
  void MergeFrom(const SCRepRewardTaskRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRepRewardTaskRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCRepRewardTaskRecord";
  }
  protected:
  explicit SCRepRewardTaskRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 4,
    kConfListFieldNumber = 5,
    kIDFieldNumber = 1,
    kNRecordFieldNumber = 2,
    kCostFieldNumber = 3,
  };
  // repeated .BYDLD.SCRewardTaskFinish record = 4;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::BYDLD::SCRewardTaskFinish* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SCRewardTaskFinish >*
      mutable_record();
  private:
  const ::BYDLD::SCRewardTaskFinish& _internal_record(int index) const;
  ::BYDLD::SCRewardTaskFinish* _internal_add_record();
  public:
  const ::BYDLD::SCRewardTaskFinish& record(int index) const;
  ::BYDLD::SCRewardTaskFinish* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SCRewardTaskFinish >&
      record() const;

  // repeated .BYDLD.RewardConf confList = 5;
  int conflist_size() const;
  private:
  int _internal_conflist_size() const;
  public:
  void clear_conflist();
  ::BYDLD::RewardConf* mutable_conflist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardConf >*
      mutable_conflist();
  private:
  const ::BYDLD::RewardConf& _internal_conflist(int index) const;
  ::BYDLD::RewardConf* _internal_add_conflist();
  public:
  const ::BYDLD::RewardConf& conflist(int index) const;
  ::BYDLD::RewardConf* add_conflist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardConf >&
      conflist() const;

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nRecord = 2;
  void clear_nrecord();
  ::PROTOBUF_NAMESPACE_ID::int32 nrecord() const;
  void set_nrecord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nrecord() const;
  void _internal_set_nrecord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 3;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCRepRewardTaskRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SCRewardTaskFinish > record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardConf > conflist_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 nrecord_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSRewardChangeAuto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSRewardChangeAuto) */ {
 public:
  inline CSRewardChangeAuto() : CSRewardChangeAuto(nullptr) {}
  virtual ~CSRewardChangeAuto();

  CSRewardChangeAuto(const CSRewardChangeAuto& from);
  CSRewardChangeAuto(CSRewardChangeAuto&& from) noexcept
    : CSRewardChangeAuto() {
    *this = ::std::move(from);
  }

  inline CSRewardChangeAuto& operator=(const CSRewardChangeAuto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRewardChangeAuto& operator=(CSRewardChangeAuto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRewardChangeAuto& default_instance();

  static inline const CSRewardChangeAuto* internal_default_instance() {
    return reinterpret_cast<const CSRewardChangeAuto*>(
               &_CSRewardChangeAuto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(CSRewardChangeAuto& a, CSRewardChangeAuto& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRewardChangeAuto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRewardChangeAuto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRewardChangeAuto* New() const final {
    return CreateMaybeMessage<CSRewardChangeAuto>(nullptr);
  }

  CSRewardChangeAuto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRewardChangeAuto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRewardChangeAuto& from);
  void MergeFrom(const CSRewardChangeAuto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRewardChangeAuto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSRewardChangeAuto";
  }
  protected:
  explicit CSRewardChangeAuto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoTimesFieldNumber = 1,
  };
  // int32 autoTimes = 1;
  void clear_autotimes();
  ::PROTOBUF_NAMESPACE_ID::int32 autotimes() const;
  void set_autotimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_autotimes() const;
  void _internal_set_autotimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSRewardChangeAuto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 autotimes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCRewardAutoRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCRewardAutoRep) */ {
 public:
  inline SCRewardAutoRep() : SCRewardAutoRep(nullptr) {}
  virtual ~SCRewardAutoRep();

  SCRewardAutoRep(const SCRewardAutoRep& from);
  SCRewardAutoRep(SCRewardAutoRep&& from) noexcept
    : SCRewardAutoRep() {
    *this = ::std::move(from);
  }

  inline SCRewardAutoRep& operator=(const SCRewardAutoRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRewardAutoRep& operator=(SCRewardAutoRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRewardAutoRep& default_instance();

  static inline const SCRewardAutoRep* internal_default_instance() {
    return reinterpret_cast<const SCRewardAutoRep*>(
               &_SCRewardAutoRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(SCRewardAutoRep& a, SCRewardAutoRep& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRewardAutoRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRewardAutoRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRewardAutoRep* New() const final {
    return CreateMaybeMessage<SCRewardAutoRep>(nullptr);
  }

  SCRewardAutoRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRewardAutoRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRewardAutoRep& from);
  void MergeFrom(const SCRewardAutoRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRewardAutoRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCRewardAutoRep";
  }
  protected:
  explicit SCRewardAutoRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAcceptFieldNumber = 2,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool accept = 2;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCRewardAutoRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  bool accept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSeaCrabCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSeaCrabCreate) */ {
 public:
  inline SCSeaCrabCreate() : SCSeaCrabCreate(nullptr) {}
  virtual ~SCSeaCrabCreate();

  SCSeaCrabCreate(const SCSeaCrabCreate& from);
  SCSeaCrabCreate(SCSeaCrabCreate&& from) noexcept
    : SCSeaCrabCreate() {
    *this = ::std::move(from);
  }

  inline SCSeaCrabCreate& operator=(const SCSeaCrabCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSeaCrabCreate& operator=(SCSeaCrabCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSeaCrabCreate& default_instance();

  static inline const SCSeaCrabCreate* internal_default_instance() {
    return reinterpret_cast<const SCSeaCrabCreate*>(
               &_SCSeaCrabCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(SCSeaCrabCreate& a, SCSeaCrabCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSeaCrabCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSeaCrabCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSeaCrabCreate* New() const final {
    return CreateMaybeMessage<SCSeaCrabCreate>(nullptr);
  }

  SCSeaCrabCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSeaCrabCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSeaCrabCreate& from);
  void MergeFrom(const SCSeaCrabCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSeaCrabCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSeaCrabCreate";
  }
  protected:
  explicit SCSeaCrabCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSeaCrabCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSyncCrabStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSyncCrabStatus) */ {
 public:
  inline CSSyncCrabStatus() : CSSyncCrabStatus(nullptr) {}
  virtual ~CSSyncCrabStatus();

  CSSyncCrabStatus(const CSSyncCrabStatus& from);
  CSSyncCrabStatus(CSSyncCrabStatus&& from) noexcept
    : CSSyncCrabStatus() {
    *this = ::std::move(from);
  }

  inline CSSyncCrabStatus& operator=(const CSSyncCrabStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncCrabStatus& operator=(CSSyncCrabStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncCrabStatus& default_instance();

  static inline const CSSyncCrabStatus* internal_default_instance() {
    return reinterpret_cast<const CSSyncCrabStatus*>(
               &_CSSyncCrabStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(CSSyncCrabStatus& a, CSSyncCrabStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncCrabStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncCrabStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncCrabStatus* New() const final {
    return CreateMaybeMessage<CSSyncCrabStatus>(nullptr);
  }

  CSSyncCrabStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncCrabStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncCrabStatus& from);
  void MergeFrom(const CSSyncCrabStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncCrabStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSyncCrabStatus";
  }
  protected:
  explicit CSSyncCrabStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSSyncCrabStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncCrabStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncCrabStatus) */ {
 public:
  inline SCSyncCrabStatus() : SCSyncCrabStatus(nullptr) {}
  virtual ~SCSyncCrabStatus();

  SCSyncCrabStatus(const SCSyncCrabStatus& from);
  SCSyncCrabStatus(SCSyncCrabStatus&& from) noexcept
    : SCSyncCrabStatus() {
    *this = ::std::move(from);
  }

  inline SCSyncCrabStatus& operator=(const SCSyncCrabStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncCrabStatus& operator=(SCSyncCrabStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncCrabStatus& default_instance();

  static inline const SCSyncCrabStatus* internal_default_instance() {
    return reinterpret_cast<const SCSyncCrabStatus*>(
               &_SCSyncCrabStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  friend void swap(SCSyncCrabStatus& a, SCSyncCrabStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncCrabStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncCrabStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncCrabStatus* New() const final {
    return CreateMaybeMessage<SCSyncCrabStatus>(nullptr);
  }

  SCSyncCrabStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncCrabStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncCrabStatus& from);
  void MergeFrom(const SCSyncCrabStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncCrabStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncCrabStatus";
  }
  protected:
  explicit SCSyncCrabStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kChairIdFieldNumber = 2,
    kMultiple1FieldNumber = 3,
    kMultiple2FieldNumber = 4,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chair_id = 2;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple_1 = 3;
  void clear_multiple_1();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_1() const;
  void set_multiple_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple_1() const;
  void _internal_set_multiple_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple_2 = 4;
  void clear_multiple_2();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_2() const;
  void set_multiple_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple_2() const;
  void _internal_set_multiple_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncCrabStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSDragonBallEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSDragonBallEnd) */ {
 public:
  inline CSDragonBallEnd() : CSDragonBallEnd(nullptr) {}
  virtual ~CSDragonBallEnd();

  CSDragonBallEnd(const CSDragonBallEnd& from);
  CSDragonBallEnd(CSDragonBallEnd&& from) noexcept
    : CSDragonBallEnd() {
    *this = ::std::move(from);
  }

  inline CSDragonBallEnd& operator=(const CSDragonBallEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDragonBallEnd& operator=(CSDragonBallEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDragonBallEnd& default_instance();

  static inline const CSDragonBallEnd* internal_default_instance() {
    return reinterpret_cast<const CSDragonBallEnd*>(
               &_CSDragonBallEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  friend void swap(CSDragonBallEnd& a, CSDragonBallEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDragonBallEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDragonBallEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDragonBallEnd* New() const final {
    return CreateMaybeMessage<CSDragonBallEnd>(nullptr);
  }

  CSDragonBallEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDragonBallEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDragonBallEnd& from);
  void MergeFrom(const CSDragonBallEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDragonBallEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSDragonBallEnd";
  }
  protected:
  explicit CSDragonBallEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSDragonBallEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCDragonBallRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCDragonBallRes) */ {
 public:
  inline SCDragonBallRes() : SCDragonBallRes(nullptr) {}
  virtual ~SCDragonBallRes();

  SCDragonBallRes(const SCDragonBallRes& from);
  SCDragonBallRes(SCDragonBallRes&& from) noexcept
    : SCDragonBallRes() {
    *this = ::std::move(from);
  }

  inline SCDragonBallRes& operator=(const SCDragonBallRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDragonBallRes& operator=(SCDragonBallRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDragonBallRes& default_instance();

  static inline const SCDragonBallRes* internal_default_instance() {
    return reinterpret_cast<const SCDragonBallRes*>(
               &_SCDragonBallRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(SCDragonBallRes& a, SCDragonBallRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDragonBallRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDragonBallRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDragonBallRes* New() const final {
    return CreateMaybeMessage<SCDragonBallRes>(nullptr);
  }

  SCDragonBallRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDragonBallRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDragonBallRes& from);
  void MergeFrom(const SCDragonBallRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDragonBallRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCDragonBallRes";
  }
  protected:
  explicit SCDragonBallRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kLockRatioFieldNumber = 2,
    kBaseRatioFieldNumber = 3,
    kTotalAwardFieldNumber = 4,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lock_ratio = 2;
  void clear_lock_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 lock_ratio() const;
  void set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lock_ratio() const;
  void _internal_set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 base_ratio = 3;
  void clear_base_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 base_ratio() const;
  void set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base_ratio() const;
  void _internal_set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_award = 4;
  void clear_total_award();
  ::PROTOBUF_NAMESPACE_ID::int32 total_award() const;
  void set_total_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_award() const;
  void _internal_set_total_award(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCDragonBallRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lock_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_award_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class DevouredFish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.DevouredFish) */ {
 public:
  inline DevouredFish() : DevouredFish(nullptr) {}
  virtual ~DevouredFish();

  DevouredFish(const DevouredFish& from);
  DevouredFish(DevouredFish&& from) noexcept
    : DevouredFish() {
    *this = ::std::move(from);
  }

  inline DevouredFish& operator=(const DevouredFish& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevouredFish& operator=(DevouredFish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevouredFish& default_instance();

  static inline const DevouredFish* internal_default_instance() {
    return reinterpret_cast<const DevouredFish*>(
               &_DevouredFish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  friend void swap(DevouredFish& a, DevouredFish& b) {
    a.Swap(&b);
  }
  inline void Swap(DevouredFish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevouredFish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevouredFish* New() const final {
    return CreateMaybeMessage<DevouredFish>(nullptr);
  }

  DevouredFish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevouredFish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevouredFish& from);
  void MergeFrom(const DevouredFish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevouredFish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.DevouredFish";
  }
  protected:
  explicit DevouredFish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFishUidFieldNumber = 1,
    kEarnFieldNumber = 2,
  };
  // int32 fish_uid = 1;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 earn = 2;
  void clear_earn();
  ::PROTOBUF_NAMESPACE_ID::int32 earn() const;
  void set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_earn() const;
  void _internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.DevouredFish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 earn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSDevourHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSDevourHit) */ {
 public:
  inline CSDevourHit() : CSDevourHit(nullptr) {}
  virtual ~CSDevourHit();

  CSDevourHit(const CSDevourHit& from);
  CSDevourHit(CSDevourHit&& from) noexcept
    : CSDevourHit() {
    *this = ::std::move(from);
  }

  inline CSDevourHit& operator=(const CSDevourHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDevourHit& operator=(CSDevourHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDevourHit& default_instance();

  static inline const CSDevourHit* internal_default_instance() {
    return reinterpret_cast<const CSDevourHit*>(
               &_CSDevourHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  friend void swap(CSDevourHit& a, CSDevourHit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDevourHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDevourHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDevourHit* New() const final {
    return CreateMaybeMessage<CSDevourHit>(nullptr);
  }

  CSDevourHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDevourHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDevourHit& from);
  void MergeFrom(const CSDevourHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDevourHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSDevourHit";
  }
  protected:
  explicit CSDevourHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFishesFieldNumber = 1,
  };
  // repeated int32 screen_fishes = 1;
  int screen_fishes_size() const;
  private:
  int _internal_screen_fishes_size() const;
  public:
  void clear_screen_fishes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen_fishes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_screen_fishes() const;
  void _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_screen_fishes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 screen_fishes(int index) const;
  void set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      screen_fishes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_screen_fishes();

  // @@protoc_insertion_point(class_scope:BYDLD.CSDevourHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > screen_fishes_;
  mutable std::atomic<int> _screen_fishes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCDevourHit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCDevourHit) */ {
 public:
  inline SCDevourHit() : SCDevourHit(nullptr) {}
  virtual ~SCDevourHit();

  SCDevourHit(const SCDevourHit& from);
  SCDevourHit(SCDevourHit&& from) noexcept
    : SCDevourHit() {
    *this = ::std::move(from);
  }

  inline SCDevourHit& operator=(const SCDevourHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDevourHit& operator=(SCDevourHit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDevourHit& default_instance();

  static inline const SCDevourHit* internal_default_instance() {
    return reinterpret_cast<const SCDevourHit*>(
               &_SCDevourHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    233;

  friend void swap(SCDevourHit& a, SCDevourHit& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDevourHit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDevourHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDevourHit* New() const final {
    return CreateMaybeMessage<SCDevourHit>(nullptr);
  }

  SCDevourHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDevourHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDevourHit& from);
  void MergeFrom(const SCDevourHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDevourHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCDevourHit";
  }
  protected:
  explicit SCDevourHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevourFishesFieldNumber = 1,
    kCritFieldNumber = 2,
    kMultipleFieldNumber = 3,
    kIngotMultiFieldNumber = 4,
  };
  // repeated .BYDLD.DevouredFish devour_fishes = 1;
  int devour_fishes_size() const;
  private:
  int _internal_devour_fishes_size() const;
  public:
  void clear_devour_fishes();
  ::BYDLD::DevouredFish* mutable_devour_fishes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DevouredFish >*
      mutable_devour_fishes();
  private:
  const ::BYDLD::DevouredFish& _internal_devour_fishes(int index) const;
  ::BYDLD::DevouredFish* _internal_add_devour_fishes();
  public:
  const ::BYDLD::DevouredFish& devour_fishes(int index) const;
  ::BYDLD::DevouredFish* add_devour_fishes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DevouredFish >&
      devour_fishes() const;

  // int32 crit = 2;
  void clear_crit();
  ::PROTOBUF_NAMESPACE_ID::int32 crit() const;
  void set_crit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crit() const;
  void _internal_set_crit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 multiple = 3;
  void clear_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 multiple() const;
  void set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiple() const;
  void _internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ingot_multi = 4;
  void clear_ingot_multi();
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi() const;
  void set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ingot_multi() const;
  void _internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCDevourHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DevouredFish > devour_fishes_;
  ::PROTOBUF_NAMESPACE_ID::int32 crit_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 ingot_multi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class OpenChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.OpenChestReward) */ {
 public:
  inline OpenChestReward() : OpenChestReward(nullptr) {}
  virtual ~OpenChestReward();

  OpenChestReward(const OpenChestReward& from);
  OpenChestReward(OpenChestReward&& from) noexcept
    : OpenChestReward() {
    *this = ::std::move(from);
  }

  inline OpenChestReward& operator=(const OpenChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenChestReward& operator=(OpenChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenChestReward& default_instance();

  static inline const OpenChestReward* internal_default_instance() {
    return reinterpret_cast<const OpenChestReward*>(
               &_OpenChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  friend void swap(OpenChestReward& a, OpenChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenChestReward* New() const final {
    return CreateMaybeMessage<OpenChestReward>(nullptr);
  }

  OpenChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenChestReward& from);
  void MergeFrom(const OpenChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.OpenChestReward";
  }
  protected:
  explicit OpenChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .BYDLD.Decimal num = 2;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const ::BYDLD::Decimal& num() const;
  ::BYDLD::Decimal* release_num();
  ::BYDLD::Decimal* mutable_num();
  void set_allocated_num(::BYDLD::Decimal* num);
  private:
  const ::BYDLD::Decimal& _internal_num() const;
  ::BYDLD::Decimal* _internal_mutable_num();
  public:
  void unsafe_arena_set_allocated_num(
      ::BYDLD::Decimal* num);
  ::BYDLD::Decimal* unsafe_arena_release_num();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.OpenChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::Decimal* num_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCUpdateChestStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCUpdateChestStatus) */ {
 public:
  inline SCUpdateChestStatus() : SCUpdateChestStatus(nullptr) {}
  virtual ~SCUpdateChestStatus();

  SCUpdateChestStatus(const SCUpdateChestStatus& from);
  SCUpdateChestStatus(SCUpdateChestStatus&& from) noexcept
    : SCUpdateChestStatus() {
    *this = ::std::move(from);
  }

  inline SCUpdateChestStatus& operator=(const SCUpdateChestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCUpdateChestStatus& operator=(SCUpdateChestStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCUpdateChestStatus& default_instance();

  static inline const SCUpdateChestStatus* internal_default_instance() {
    return reinterpret_cast<const SCUpdateChestStatus*>(
               &_SCUpdateChestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    235;

  friend void swap(SCUpdateChestStatus& a, SCUpdateChestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SCUpdateChestStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCUpdateChestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCUpdateChestStatus* New() const final {
    return CreateMaybeMessage<SCUpdateChestStatus>(nullptr);
  }

  SCUpdateChestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCUpdateChestStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCUpdateChestStatus& from);
  void MergeFrom(const SCUpdateChestStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCUpdateChestStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCUpdateChestStatus";
  }
  protected:
  explicit SCUpdateChestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChestTypeFieldNumber = 2,
    kTotalProgressFieldNumber = 3,
    kIsActiveFieldNumber = 1,
    kGuideFieldNumber = 5,
    kRemainProgressFieldNumber = 4,
    kAvailableRewardFieldNumber = 6,
  };
  // .BYDLD.ChestType chest_type = 2;
  void clear_chest_type();
  ::BYDLD::ChestType chest_type() const;
  void set_chest_type(::BYDLD::ChestType value);
  private:
  ::BYDLD::ChestType _internal_chest_type() const;
  void _internal_set_chest_type(::BYDLD::ChestType value);
  public:

  // int32 total_progress = 3;
  void clear_total_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 total_progress() const;
  void set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_progress() const;
  void _internal_set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool guide = 5;
  void clear_guide();
  bool guide() const;
  void set_guide(bool value);
  private:
  bool _internal_guide() const;
  void _internal_set_guide(bool value);
  public:

  // int32 remain_progress = 4;
  void clear_remain_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_progress() const;
  void set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_progress() const;
  void _internal_set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 available_reward = 6;
  void clear_available_reward();
  ::PROTOBUF_NAMESPACE_ID::int32 available_reward() const;
  void set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available_reward() const;
  void _internal_set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCUpdateChestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int chest_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_progress_;
  bool is_active_;
  bool guide_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSChestConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSChestConfig) */ {
 public:
  inline CSChestConfig() : CSChestConfig(nullptr) {}
  virtual ~CSChestConfig();

  CSChestConfig(const CSChestConfig& from);
  CSChestConfig(CSChestConfig&& from) noexcept
    : CSChestConfig() {
    *this = ::std::move(from);
  }

  inline CSChestConfig& operator=(const CSChestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestConfig& operator=(CSChestConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestConfig& default_instance();

  static inline const CSChestConfig* internal_default_instance() {
    return reinterpret_cast<const CSChestConfig*>(
               &_CSChestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  friend void swap(CSChestConfig& a, CSChestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestConfig* New() const final {
    return CreateMaybeMessage<CSChestConfig>(nullptr);
  }

  CSChestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestConfig& from);
  void MergeFrom(const CSChestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSChestConfig";
  }
  protected:
  explicit CSChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSChestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class ChestBrief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.ChestBrief) */ {
 public:
  inline ChestBrief() : ChestBrief(nullptr) {}
  virtual ~ChestBrief();

  ChestBrief(const ChestBrief& from);
  ChestBrief(ChestBrief&& from) noexcept
    : ChestBrief() {
    *this = ::std::move(from);
  }

  inline ChestBrief& operator=(const ChestBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestBrief& operator=(ChestBrief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChestBrief& default_instance();

  static inline const ChestBrief* internal_default_instance() {
    return reinterpret_cast<const ChestBrief*>(
               &_ChestBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  friend void swap(ChestBrief& a, ChestBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestBrief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChestBrief* New() const final {
    return CreateMaybeMessage<ChestBrief>(nullptr);
  }

  ChestBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChestBrief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChestBrief& from);
  void MergeFrom(const ChestBrief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestBrief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.ChestBrief";
  }
  protected:
  explicit ChestBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 2,
    kChestTypeFieldNumber = 1,
  };
  // repeated .BYDLD.OpenChestReward reward = 2;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  ::BYDLD::OpenChestReward* mutable_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >*
      mutable_reward();
  private:
  const ::BYDLD::OpenChestReward& _internal_reward(int index) const;
  ::BYDLD::OpenChestReward* _internal_add_reward();
  public:
  const ::BYDLD::OpenChestReward& reward(int index) const;
  ::BYDLD::OpenChestReward* add_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >&
      reward() const;

  // .BYDLD.ChestType chest_type = 1;
  void clear_chest_type();
  ::BYDLD::ChestType chest_type() const;
  void set_chest_type(::BYDLD::ChestType value);
  private:
  ::BYDLD::ChestType _internal_chest_type() const;
  void _internal_set_chest_type(::BYDLD::ChestType value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.ChestBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward > reward_;
  int chest_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCChestConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCChestConfig) */ {
 public:
  inline SCChestConfig() : SCChestConfig(nullptr) {}
  virtual ~SCChestConfig();

  SCChestConfig(const SCChestConfig& from);
  SCChestConfig(SCChestConfig&& from) noexcept
    : SCChestConfig() {
    *this = ::std::move(from);
  }

  inline SCChestConfig& operator=(const SCChestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestConfig& operator=(SCChestConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestConfig& default_instance();

  static inline const SCChestConfig* internal_default_instance() {
    return reinterpret_cast<const SCChestConfig*>(
               &_SCChestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    238;

  friend void swap(SCChestConfig& a, SCChestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestConfig* New() const final {
    return CreateMaybeMessage<SCChestConfig>(nullptr);
  }

  SCChestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestConfig& from);
  void MergeFrom(const SCChestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCChestConfig";
  }
  protected:
  explicit SCChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChestBriefListFieldNumber = 2,
    kEndTimeFieldNumber = 1,
    kMinRatioFieldNumber = 3,
    kAutoOptionFieldNumber = 5,
    kAutoOpenFieldNumber = 4,
    kIsEnableFieldNumber = 6,
  };
  // repeated .BYDLD.ChestBrief chest_brief_list = 2;
  int chest_brief_list_size() const;
  private:
  int _internal_chest_brief_list_size() const;
  public:
  void clear_chest_brief_list();
  ::BYDLD::ChestBrief* mutable_chest_brief_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ChestBrief >*
      mutable_chest_brief_list();
  private:
  const ::BYDLD::ChestBrief& _internal_chest_brief_list(int index) const;
  ::BYDLD::ChestBrief* _internal_add_chest_brief_list();
  public:
  const ::BYDLD::ChestBrief& chest_brief_list(int index) const;
  ::BYDLD::ChestBrief* add_chest_brief_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ChestBrief >&
      chest_brief_list() const;

  // int32 end_time = 1;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_ratio = 3;
  void clear_min_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 min_ratio() const;
  void set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_ratio() const;
  void _internal_set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .BYDLD.ChestAutoSelectOption auto_option = 5;
  void clear_auto_option();
  ::BYDLD::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::BYDLD::ChestAutoSelectOption value);
  private:
  ::BYDLD::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::BYDLD::ChestAutoSelectOption value);
  public:

  // bool auto_open = 4;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // bool is_enable = 6;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCChestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ChestBrief > chest_brief_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_ratio_;
  int auto_option_;
  bool auto_open_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSOpenChest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSOpenChest) */ {
 public:
  inline CSOpenChest() : CSOpenChest(nullptr) {}
  virtual ~CSOpenChest();

  CSOpenChest(const CSOpenChest& from);
  CSOpenChest(CSOpenChest&& from) noexcept
    : CSOpenChest() {
    *this = ::std::move(from);
  }

  inline CSOpenChest& operator=(const CSOpenChest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOpenChest& operator=(CSOpenChest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOpenChest& default_instance();

  static inline const CSOpenChest* internal_default_instance() {
    return reinterpret_cast<const CSOpenChest*>(
               &_CSOpenChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    239;

  friend void swap(CSOpenChest& a, CSOpenChest& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOpenChest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOpenChest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOpenChest* New() const final {
    return CreateMaybeMessage<CSOpenChest>(nullptr);
  }

  CSOpenChest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOpenChest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOpenChest& from);
  void MergeFrom(const CSOpenChest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOpenChest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSOpenChest";
  }
  protected:
  explicit CSOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSOpenChest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCOpenChest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCOpenChest) */ {
 public:
  inline SCOpenChest() : SCOpenChest(nullptr) {}
  virtual ~SCOpenChest();

  SCOpenChest(const SCOpenChest& from);
  SCOpenChest(SCOpenChest&& from) noexcept
    : SCOpenChest() {
    *this = ::std::move(from);
  }

  inline SCOpenChest& operator=(const SCOpenChest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOpenChest& operator=(SCOpenChest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOpenChest& default_instance();

  static inline const SCOpenChest* internal_default_instance() {
    return reinterpret_cast<const SCOpenChest*>(
               &_SCOpenChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    240;

  friend void swap(SCOpenChest& a, SCOpenChest& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOpenChest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOpenChest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOpenChest* New() const final {
    return CreateMaybeMessage<SCOpenChest>(nullptr);
  }

  SCOpenChest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOpenChest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOpenChest& from);
  void MergeFrom(const SCOpenChest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOpenChest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCOpenChest";
  }
  protected:
  explicit SCOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 1,
    kAutoOptionFieldNumber = 2,
  };
  // repeated .BYDLD.OpenChestReward reward_list = 1;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::BYDLD::OpenChestReward* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >*
      mutable_reward_list();
  private:
  const ::BYDLD::OpenChestReward& _internal_reward_list(int index) const;
  ::BYDLD::OpenChestReward* _internal_add_reward_list();
  public:
  const ::BYDLD::OpenChestReward& reward_list(int index) const;
  ::BYDLD::OpenChestReward* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >&
      reward_list() const;

  // .BYDLD.ChestAutoSelectOption auto_option = 2;
  void clear_auto_option();
  ::BYDLD::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::BYDLD::ChestAutoSelectOption value);
  private:
  ::BYDLD::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::BYDLD::ChestAutoSelectOption value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCOpenChest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward > reward_list_;
  int auto_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSelectChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSelectChestReward) */ {
 public:
  inline CSSelectChestReward() : CSSelectChestReward(nullptr) {}
  virtual ~CSSelectChestReward();

  CSSelectChestReward(const CSSelectChestReward& from);
  CSSelectChestReward(CSSelectChestReward&& from) noexcept
    : CSSelectChestReward() {
    *this = ::std::move(from);
  }

  inline CSSelectChestReward& operator=(const CSSelectChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSelectChestReward& operator=(CSSelectChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSelectChestReward& default_instance();

  static inline const CSSelectChestReward* internal_default_instance() {
    return reinterpret_cast<const CSSelectChestReward*>(
               &_CSSelectChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    241;

  friend void swap(CSSelectChestReward& a, CSSelectChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSelectChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSelectChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSelectChestReward* New() const final {
    return CreateMaybeMessage<CSSelectChestReward>(nullptr);
  }

  CSSelectChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSelectChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSelectChestReward& from);
  void MergeFrom(const CSSelectChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSelectChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSelectChestReward";
  }
  protected:
  explicit CSSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectIndexFieldNumber = 1,
  };
  // int32 select_index = 1;
  void clear_select_index();
  ::PROTOBUF_NAMESPACE_ID::int32 select_index() const;
  void set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_select_index() const;
  void _internal_set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSelectChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 select_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSelectChestReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSelectChestReward) */ {
 public:
  inline SCSelectChestReward() : SCSelectChestReward(nullptr) {}
  virtual ~SCSelectChestReward();

  SCSelectChestReward(const SCSelectChestReward& from);
  SCSelectChestReward(SCSelectChestReward&& from) noexcept
    : SCSelectChestReward() {
    *this = ::std::move(from);
  }

  inline SCSelectChestReward& operator=(const SCSelectChestReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSelectChestReward& operator=(SCSelectChestReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSelectChestReward& default_instance();

  static inline const SCSelectChestReward* internal_default_instance() {
    return reinterpret_cast<const SCSelectChestReward*>(
               &_SCSelectChestReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    242;

  friend void swap(SCSelectChestReward& a, SCSelectChestReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSelectChestReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSelectChestReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSelectChestReward* New() const final {
    return CreateMaybeMessage<SCSelectChestReward>(nullptr);
  }

  SCSelectChestReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSelectChestReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSelectChestReward& from);
  void MergeFrom(const SCSelectChestReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSelectChestReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSelectChestReward";
  }
  protected:
  explicit SCSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 1,
  };
  // .BYDLD.OpenChestReward reward = 1;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::BYDLD::OpenChestReward& reward() const;
  ::BYDLD::OpenChestReward* release_reward();
  ::BYDLD::OpenChestReward* mutable_reward();
  void set_allocated_reward(::BYDLD::OpenChestReward* reward);
  private:
  const ::BYDLD::OpenChestReward& _internal_reward() const;
  ::BYDLD::OpenChestReward* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::BYDLD::OpenChestReward* reward);
  ::BYDLD::OpenChestReward* unsafe_arena_release_reward();

  // @@protoc_insertion_point(class_scope:BYDLD.SCSelectChestReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BYDLD::OpenChestReward* reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSChestSetAutoSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSChestSetAutoSelect) */ {
 public:
  inline CSChestSetAutoSelect() : CSChestSetAutoSelect(nullptr) {}
  virtual ~CSChestSetAutoSelect();

  CSChestSetAutoSelect(const CSChestSetAutoSelect& from);
  CSChestSetAutoSelect(CSChestSetAutoSelect&& from) noexcept
    : CSChestSetAutoSelect() {
    *this = ::std::move(from);
  }

  inline CSChestSetAutoSelect& operator=(const CSChestSetAutoSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestSetAutoSelect& operator=(CSChestSetAutoSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestSetAutoSelect& default_instance();

  static inline const CSChestSetAutoSelect* internal_default_instance() {
    return reinterpret_cast<const CSChestSetAutoSelect*>(
               &_CSChestSetAutoSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    243;

  friend void swap(CSChestSetAutoSelect& a, CSChestSetAutoSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestSetAutoSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestSetAutoSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestSetAutoSelect* New() const final {
    return CreateMaybeMessage<CSChestSetAutoSelect>(nullptr);
  }

  CSChestSetAutoSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestSetAutoSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestSetAutoSelect& from);
  void MergeFrom(const CSChestSetAutoSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestSetAutoSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSChestSetAutoSelect";
  }
  protected:
  explicit CSChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoOptionFieldNumber = 1,
    kAutoOpenFieldNumber = 2,
  };
  // .BYDLD.ChestAutoSelectOption auto_option = 1;
  void clear_auto_option();
  ::BYDLD::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::BYDLD::ChestAutoSelectOption value);
  private:
  ::BYDLD::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::BYDLD::ChestAutoSelectOption value);
  public:

  // bool auto_open = 2;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSChestSetAutoSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int auto_option_;
  bool auto_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCChestSetAutoSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCChestSetAutoSelect) */ {
 public:
  inline SCChestSetAutoSelect() : SCChestSetAutoSelect(nullptr) {}
  virtual ~SCChestSetAutoSelect();

  SCChestSetAutoSelect(const SCChestSetAutoSelect& from);
  SCChestSetAutoSelect(SCChestSetAutoSelect&& from) noexcept
    : SCChestSetAutoSelect() {
    *this = ::std::move(from);
  }

  inline SCChestSetAutoSelect& operator=(const SCChestSetAutoSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestSetAutoSelect& operator=(SCChestSetAutoSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestSetAutoSelect& default_instance();

  static inline const SCChestSetAutoSelect* internal_default_instance() {
    return reinterpret_cast<const SCChestSetAutoSelect*>(
               &_SCChestSetAutoSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    244;

  friend void swap(SCChestSetAutoSelect& a, SCChestSetAutoSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestSetAutoSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestSetAutoSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestSetAutoSelect* New() const final {
    return CreateMaybeMessage<SCChestSetAutoSelect>(nullptr);
  }

  SCChestSetAutoSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestSetAutoSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestSetAutoSelect& from);
  void MergeFrom(const SCChestSetAutoSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestSetAutoSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCChestSetAutoSelect";
  }
  protected:
  explicit SCChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoOptionFieldNumber = 1,
    kAutoOpenFieldNumber = 2,
  };
  // .BYDLD.ChestAutoSelectOption auto_option = 1;
  void clear_auto_option();
  ::BYDLD::ChestAutoSelectOption auto_option() const;
  void set_auto_option(::BYDLD::ChestAutoSelectOption value);
  private:
  ::BYDLD::ChestAutoSelectOption _internal_auto_option() const;
  void _internal_set_auto_option(::BYDLD::ChestAutoSelectOption value);
  public:

  // bool auto_open = 2;
  void clear_auto_open();
  bool auto_open() const;
  void set_auto_open(bool value);
  private:
  bool _internal_auto_open() const;
  void _internal_set_auto_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCChestSetAutoSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int auto_option_;
  bool auto_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSChestSetEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSChestSetEnable) */ {
 public:
  inline CSChestSetEnable() : CSChestSetEnable(nullptr) {}
  virtual ~CSChestSetEnable();

  CSChestSetEnable(const CSChestSetEnable& from);
  CSChestSetEnable(CSChestSetEnable&& from) noexcept
    : CSChestSetEnable() {
    *this = ::std::move(from);
  }

  inline CSChestSetEnable& operator=(const CSChestSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChestSetEnable& operator=(CSChestSetEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChestSetEnable& default_instance();

  static inline const CSChestSetEnable* internal_default_instance() {
    return reinterpret_cast<const CSChestSetEnable*>(
               &_CSChestSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    245;

  friend void swap(CSChestSetEnable& a, CSChestSetEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChestSetEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChestSetEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChestSetEnable* New() const final {
    return CreateMaybeMessage<CSChestSetEnable>(nullptr);
  }

  CSChestSetEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChestSetEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChestSetEnable& from);
  void MergeFrom(const CSChestSetEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChestSetEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSChestSetEnable";
  }
  protected:
  explicit CSChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableFieldNumber = 1,
  };
  // bool is_enable = 1;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSChestSetEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCChestSetEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCChestSetEnable) */ {
 public:
  inline SCChestSetEnable() : SCChestSetEnable(nullptr) {}
  virtual ~SCChestSetEnable();

  SCChestSetEnable(const SCChestSetEnable& from);
  SCChestSetEnable(SCChestSetEnable&& from) noexcept
    : SCChestSetEnable() {
    *this = ::std::move(from);
  }

  inline SCChestSetEnable& operator=(const SCChestSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChestSetEnable& operator=(SCChestSetEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChestSetEnable& default_instance();

  static inline const SCChestSetEnable* internal_default_instance() {
    return reinterpret_cast<const SCChestSetEnable*>(
               &_SCChestSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    246;

  friend void swap(SCChestSetEnable& a, SCChestSetEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChestSetEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChestSetEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChestSetEnable* New() const final {
    return CreateMaybeMessage<SCChestSetEnable>(nullptr);
  }

  SCChestSetEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChestSetEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChestSetEnable& from);
  void MergeFrom(const SCChestSetEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChestSetEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCChestSetEnable";
  }
  protected:
  explicit SCChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableFieldNumber = 1,
  };
  // bool is_enable = 1;
  void clear_is_enable();
  bool is_enable() const;
  void set_is_enable(bool value);
  private:
  bool _internal_is_enable() const;
  void _internal_set_is_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCChestSetEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSyncAnimation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSyncAnimation) */ {
 public:
  inline CSSyncAnimation() : CSSyncAnimation(nullptr) {}
  virtual ~CSSyncAnimation();

  CSSyncAnimation(const CSSyncAnimation& from);
  CSSyncAnimation(CSSyncAnimation&& from) noexcept
    : CSSyncAnimation() {
    *this = ::std::move(from);
  }

  inline CSSyncAnimation& operator=(const CSSyncAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSyncAnimation& operator=(CSSyncAnimation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSyncAnimation& default_instance();

  static inline const CSSyncAnimation* internal_default_instance() {
    return reinterpret_cast<const CSSyncAnimation*>(
               &_CSSyncAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    247;

  friend void swap(CSSyncAnimation& a, CSSyncAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSyncAnimation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSyncAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSyncAnimation* New() const final {
    return CreateMaybeMessage<CSSyncAnimation>(nullptr);
  }

  CSSyncAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSyncAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSyncAnimation& from);
  void MergeFrom(const CSSyncAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSyncAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSyncAnimation";
  }
  protected:
  explicit CSSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kAnimationIdFieldNumber = 1,
    kStepFieldNumber = 2,
    kCompleteFieldNumber = 3,
  };
  // string content = 4;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 animationId = 1;
  void clear_animationid();
  ::PROTOBUF_NAMESPACE_ID::int32 animationid() const;
  void set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_animationid() const;
  void _internal_set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 step = 2;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool complete = 3;
  void clear_complete();
  bool complete() const;
  void set_complete(bool value);
  private:
  bool _internal_complete() const;
  void _internal_set_complete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSyncAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 animationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  bool complete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSyncAnimation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSyncAnimation) */ {
 public:
  inline SCSyncAnimation() : SCSyncAnimation(nullptr) {}
  virtual ~SCSyncAnimation();

  SCSyncAnimation(const SCSyncAnimation& from);
  SCSyncAnimation(SCSyncAnimation&& from) noexcept
    : SCSyncAnimation() {
    *this = ::std::move(from);
  }

  inline SCSyncAnimation& operator=(const SCSyncAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncAnimation& operator=(SCSyncAnimation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncAnimation& default_instance();

  static inline const SCSyncAnimation* internal_default_instance() {
    return reinterpret_cast<const SCSyncAnimation*>(
               &_SCSyncAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    248;

  friend void swap(SCSyncAnimation& a, SCSyncAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncAnimation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncAnimation* New() const final {
    return CreateMaybeMessage<SCSyncAnimation>(nullptr);
  }

  SCSyncAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncAnimation& from);
  void MergeFrom(const SCSyncAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSyncAnimation";
  }
  protected:
  explicit SCSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kAnimationIdFieldNumber = 1,
    kStepFieldNumber = 2,
    kCompleteFieldNumber = 3,
  };
  // string content = 4;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 animationId = 1;
  void clear_animationid();
  ::PROTOBUF_NAMESPACE_ID::int32 animationid() const;
  void set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_animationid() const;
  void _internal_set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 step = 2;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool complete = 3;
  void clear_complete();
  bool complete() const;
  void set_complete(bool value);
  private:
  bool _internal_complete() const;
  void _internal_set_complete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSyncAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 animationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  bool complete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSMagicCardList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSMagicCardList) */ {
 public:
  inline CSMagicCardList() : CSMagicCardList(nullptr) {}
  virtual ~CSMagicCardList();

  CSMagicCardList(const CSMagicCardList& from);
  CSMagicCardList(CSMagicCardList&& from) noexcept
    : CSMagicCardList() {
    *this = ::std::move(from);
  }

  inline CSMagicCardList& operator=(const CSMagicCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSMagicCardList& operator=(CSMagicCardList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSMagicCardList& default_instance();

  static inline const CSMagicCardList* internal_default_instance() {
    return reinterpret_cast<const CSMagicCardList*>(
               &_CSMagicCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    249;

  friend void swap(CSMagicCardList& a, CSMagicCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSMagicCardList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSMagicCardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSMagicCardList* New() const final {
    return CreateMaybeMessage<CSMagicCardList>(nullptr);
  }

  CSMagicCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSMagicCardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSMagicCardList& from);
  void MergeFrom(const CSMagicCardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSMagicCardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSMagicCardList";
  }
  protected:
  explicit CSMagicCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSMagicCardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCMagicCardList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCMagicCardList) */ {
 public:
  inline SCMagicCardList() : SCMagicCardList(nullptr) {}
  virtual ~SCMagicCardList();

  SCMagicCardList(const SCMagicCardList& from);
  SCMagicCardList(SCMagicCardList&& from) noexcept
    : SCMagicCardList() {
    *this = ::std::move(from);
  }

  inline SCMagicCardList& operator=(const SCMagicCardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCMagicCardList& operator=(SCMagicCardList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCMagicCardList& default_instance();

  static inline const SCMagicCardList* internal_default_instance() {
    return reinterpret_cast<const SCMagicCardList*>(
               &_SCMagicCardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    250;

  friend void swap(SCMagicCardList& a, SCMagicCardList& b) {
    a.Swap(&b);
  }
  inline void Swap(SCMagicCardList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCMagicCardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCMagicCardList* New() const final {
    return CreateMaybeMessage<SCMagicCardList>(nullptr);
  }

  SCMagicCardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCMagicCardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCMagicCardList& from);
  void MergeFrom(const SCMagicCardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCMagicCardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCMagicCardList";
  }
  protected:
  explicit SCMagicCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicCardListFieldNumber = 1,
  };
  // repeated .BYDLD.MagicCardInfo magicCardList = 1;
  int magiccardlist_size() const;
  private:
  int _internal_magiccardlist_size() const;
  public:
  void clear_magiccardlist();
  ::BYDLD::MagicCardInfo* mutable_magiccardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >*
      mutable_magiccardlist();
  private:
  const ::BYDLD::MagicCardInfo& _internal_magiccardlist(int index) const;
  ::BYDLD::MagicCardInfo* _internal_add_magiccardlist();
  public:
  const ::BYDLD::MagicCardInfo& magiccardlist(int index) const;
  ::BYDLD::MagicCardInfo* add_magiccardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >&
      magiccardlist() const;

  // @@protoc_insertion_point(class_scope:BYDLD.SCMagicCardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo > magiccardlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCTortoiseExplode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCTortoiseExplode) */ {
 public:
  inline SCTortoiseExplode() : SCTortoiseExplode(nullptr) {}
  virtual ~SCTortoiseExplode();

  SCTortoiseExplode(const SCTortoiseExplode& from);
  SCTortoiseExplode(SCTortoiseExplode&& from) noexcept
    : SCTortoiseExplode() {
    *this = ::std::move(from);
  }

  inline SCTortoiseExplode& operator=(const SCTortoiseExplode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTortoiseExplode& operator=(SCTortoiseExplode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTortoiseExplode& default_instance();

  static inline const SCTortoiseExplode* internal_default_instance() {
    return reinterpret_cast<const SCTortoiseExplode*>(
               &_SCTortoiseExplode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    251;

  friend void swap(SCTortoiseExplode& a, SCTortoiseExplode& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTortoiseExplode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTortoiseExplode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTortoiseExplode* New() const final {
    return CreateMaybeMessage<SCTortoiseExplode>(nullptr);
  }

  SCTortoiseExplode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTortoiseExplode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTortoiseExplode& from);
  void MergeFrom(const SCTortoiseExplode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTortoiseExplode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCTortoiseExplode";
  }
  protected:
  explicit SCTortoiseExplode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kFishUidFieldNumber = 2,
    kBulletIdFieldNumber = 3,
    kRatioFieldNumber = 4,
    kMaxEffectFieldNumber = 5,
    kIsDoubleFieldNumber = 6,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fish_uid = 2;
  void clear_fish_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid() const;
  void set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fish_uid() const;
  void _internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bullet_id = 3;
  void clear_bullet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id() const;
  void set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullet_id() const;
  void _internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_effect = 5;
  void clear_max_effect();
  ::PROTOBUF_NAMESPACE_ID::int32 max_effect() const;
  void set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_effect() const;
  void _internal_set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_double = 6;
  void clear_is_double();
  bool is_double() const;
  void set_is_double(bool value);
  private:
  bool _internal_is_double() const;
  void _internal_set_is_double(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCTortoiseExplode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fish_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_effect_;
  bool is_double_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBuyGun PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBuyGun) */ {
 public:
  inline CSBuyGun() : CSBuyGun(nullptr) {}
  virtual ~CSBuyGun();

  CSBuyGun(const CSBuyGun& from);
  CSBuyGun(CSBuyGun&& from) noexcept
    : CSBuyGun() {
    *this = ::std::move(from);
  }

  inline CSBuyGun& operator=(const CSBuyGun& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyGun& operator=(CSBuyGun&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyGun& default_instance();

  static inline const CSBuyGun* internal_default_instance() {
    return reinterpret_cast<const CSBuyGun*>(
               &_CSBuyGun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    252;

  friend void swap(CSBuyGun& a, CSBuyGun& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyGun* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyGun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyGun* New() const final {
    return CreateMaybeMessage<CSBuyGun>(nullptr);
  }

  CSBuyGun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyGun>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyGun& from);
  void MergeFrom(const CSBuyGun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyGun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBuyGun";
  }
  protected:
  explicit CSBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunLevelFieldNumber = 1,
  };
  // int32 gun_level = 1;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBuyGun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBuyGun PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBuyGun) */ {
 public:
  inline SCBuyGun() : SCBuyGun(nullptr) {}
  virtual ~SCBuyGun();

  SCBuyGun(const SCBuyGun& from);
  SCBuyGun(SCBuyGun&& from) noexcept
    : SCBuyGun() {
    *this = ::std::move(from);
  }

  inline SCBuyGun& operator=(const SCBuyGun& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyGun& operator=(SCBuyGun&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyGun& default_instance();

  static inline const SCBuyGun* internal_default_instance() {
    return reinterpret_cast<const SCBuyGun*>(
               &_SCBuyGun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    253;

  friend void swap(SCBuyGun& a, SCBuyGun& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyGun* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyGun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyGun* New() const final {
    return CreateMaybeMessage<SCBuyGun>(nullptr);
  }

  SCBuyGun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyGun>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyGun& from);
  void MergeFrom(const SCBuyGun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyGun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBuyGun";
  }
  protected:
  explicit SCBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsBuyFieldNumber = 1,
    kGunLevelFieldNumber = 2,
  };
  // bool is_buy = 1;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // int32 gun_level = 2;
  void clear_gun_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level() const;
  void set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gun_level() const;
  void _internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCBuyGun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_buy_;
  ::PROTOBUF_NAMESPACE_ID::int32 gun_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCWaterDropInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCWaterDropInfo) */ {
 public:
  inline SCWaterDropInfo() : SCWaterDropInfo(nullptr) {}
  virtual ~SCWaterDropInfo();

  SCWaterDropInfo(const SCWaterDropInfo& from);
  SCWaterDropInfo(SCWaterDropInfo&& from) noexcept
    : SCWaterDropInfo() {
    *this = ::std::move(from);
  }

  inline SCWaterDropInfo& operator=(const SCWaterDropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCWaterDropInfo& operator=(SCWaterDropInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCWaterDropInfo& default_instance();

  static inline const SCWaterDropInfo* internal_default_instance() {
    return reinterpret_cast<const SCWaterDropInfo*>(
               &_SCWaterDropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    254;

  friend void swap(SCWaterDropInfo& a, SCWaterDropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCWaterDropInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCWaterDropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCWaterDropInfo* New() const final {
    return CreateMaybeMessage<SCWaterDropInfo>(nullptr);
  }

  SCWaterDropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCWaterDropInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCWaterDropInfo& from);
  void MergeFrom(const SCWaterDropInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCWaterDropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCWaterDropInfo";
  }
  protected:
  explicit SCWaterDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kDropCountFieldNumber = 2,
    kFragmentCountFieldNumber = 3,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 drop_count = 2;
  void clear_drop_count();
  ::PROTOBUF_NAMESPACE_ID::int32 drop_count() const;
  void set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drop_count() const;
  void _internal_set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fragment_count = 3;
  void clear_fragment_count();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_count() const;
  void set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment_count() const;
  void _internal_set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCWaterDropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 drop_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSBuyWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSBuyWings) */ {
 public:
  inline CSBuyWings() : CSBuyWings(nullptr) {}
  virtual ~CSBuyWings();

  CSBuyWings(const CSBuyWings& from);
  CSBuyWings(CSBuyWings&& from) noexcept
    : CSBuyWings() {
    *this = ::std::move(from);
  }

  inline CSBuyWings& operator=(const CSBuyWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSBuyWings& operator=(CSBuyWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSBuyWings& default_instance();

  static inline const CSBuyWings* internal_default_instance() {
    return reinterpret_cast<const CSBuyWings*>(
               &_CSBuyWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    255;

  friend void swap(CSBuyWings& a, CSBuyWings& b) {
    a.Swap(&b);
  }
  inline void Swap(CSBuyWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSBuyWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSBuyWings* New() const final {
    return CreateMaybeMessage<CSBuyWings>(nullptr);
  }

  CSBuyWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSBuyWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSBuyWings& from);
  void MergeFrom(const CSBuyWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSBuyWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSBuyWings";
  }
  protected:
  explicit CSBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsIdFieldNumber = 1,
  };
  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSBuyWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBuyWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBuyWings) */ {
 public:
  inline SCBuyWings() : SCBuyWings(nullptr) {}
  virtual ~SCBuyWings();

  SCBuyWings(const SCBuyWings& from);
  SCBuyWings(SCBuyWings&& from) noexcept
    : SCBuyWings() {
    *this = ::std::move(from);
  }

  inline SCBuyWings& operator=(const SCBuyWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBuyWings& operator=(SCBuyWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBuyWings& default_instance();

  static inline const SCBuyWings* internal_default_instance() {
    return reinterpret_cast<const SCBuyWings*>(
               &_SCBuyWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    256;

  friend void swap(SCBuyWings& a, SCBuyWings& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBuyWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBuyWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBuyWings* New() const final {
    return CreateMaybeMessage<SCBuyWings>(nullptr);
  }

  SCBuyWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBuyWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBuyWings& from);
  void MergeFrom(const SCBuyWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBuyWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBuyWings";
  }
  protected:
  explicit SCBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsIdFieldNumber = 1,
    kIsBuyFieldNumber = 2,
  };
  // int32 wings_id = 1;
  void clear_wings_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id() const;
  void set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_id() const;
  void _internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_buy = 2;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCBuyWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_id_;
  bool is_buy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSSetWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSSetWings) */ {
 public:
  inline CSSetWings() : CSSetWings(nullptr) {}
  virtual ~CSSetWings();

  CSSetWings(const CSSetWings& from);
  CSSetWings(CSSetWings&& from) noexcept
    : CSSetWings() {
    *this = ::std::move(from);
  }

  inline CSSetWings& operator=(const CSSetWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetWings& operator=(CSSetWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetWings& default_instance();

  static inline const CSSetWings* internal_default_instance() {
    return reinterpret_cast<const CSSetWings*>(
               &_CSSetWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    257;

  friend void swap(CSSetWings& a, CSSetWings& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetWings* New() const final {
    return CreateMaybeMessage<CSSetWings>(nullptr);
  }

  CSSetWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetWings& from);
  void MergeFrom(const CSSetWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSSetWings";
  }
  protected:
  explicit CSSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWingsPropIdFieldNumber = 1,
  };
  // int32 wings_prop_id = 1;
  void clear_wings_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id() const;
  void set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_prop_id() const;
  void _internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSSetWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCSetWings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCSetWings) */ {
 public:
  inline SCSetWings() : SCSetWings(nullptr) {}
  virtual ~SCSetWings();

  SCSetWings(const SCSetWings& from);
  SCSetWings(SCSetWings&& from) noexcept
    : SCSetWings() {
    *this = ::std::move(from);
  }

  inline SCSetWings& operator=(const SCSetWings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetWings& operator=(SCSetWings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetWings& default_instance();

  static inline const SCSetWings* internal_default_instance() {
    return reinterpret_cast<const SCSetWings*>(
               &_SCSetWings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    258;

  friend void swap(SCSetWings& a, SCSetWings& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetWings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetWings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetWings* New() const final {
    return CreateMaybeMessage<SCSetWings>(nullptr);
  }

  SCSetWings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetWings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetWings& from);
  void MergeFrom(const SCSetWings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetWings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCSetWings";
  }
  protected:
  explicit SCSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdxFieldNumber = 1,
    kWingsPropIdFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // int32 chair_idx = 1;
  void clear_chair_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx() const;
  void set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_idx() const;
  void _internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wings_prop_id = 2;
  void clear_wings_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id() const;
  void set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wings_prop_id() const;
  void _internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCSetWings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 wings_prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCBeKicked PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCBeKicked) */ {
 public:
  inline SCBeKicked() : SCBeKicked(nullptr) {}
  virtual ~SCBeKicked();

  SCBeKicked(const SCBeKicked& from);
  SCBeKicked(SCBeKicked&& from) noexcept
    : SCBeKicked() {
    *this = ::std::move(from);
  }

  inline SCBeKicked& operator=(const SCBeKicked& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCBeKicked& operator=(SCBeKicked&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCBeKicked& default_instance();

  static inline const SCBeKicked* internal_default_instance() {
    return reinterpret_cast<const SCBeKicked*>(
               &_SCBeKicked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    259;

  friend void swap(SCBeKicked& a, SCBeKicked& b) {
    a.Swap(&b);
  }
  inline void Swap(SCBeKicked* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCBeKicked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCBeKicked* New() const final {
    return CreateMaybeMessage<SCBeKicked>(nullptr);
  }

  SCBeKicked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCBeKicked>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCBeKicked& from);
  void MergeFrom(const SCBeKicked& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCBeKicked* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCBeKicked";
  }
  protected:
  explicit SCBeKicked(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .BYDLD.BeKickedReason reason = 1;
  void clear_reason();
  ::BYDLD::BeKickedReason reason() const;
  void set_reason(::BYDLD::BeKickedReason value);
  private:
  ::BYDLD::BeKickedReason _internal_reason() const;
  void _internal_set_reason(::BYDLD::BeKickedReason value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.SCBeKicked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSClientTimeValidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSClientTimeValidate) */ {
 public:
  inline CSClientTimeValidate() : CSClientTimeValidate(nullptr) {}
  virtual ~CSClientTimeValidate();

  CSClientTimeValidate(const CSClientTimeValidate& from);
  CSClientTimeValidate(CSClientTimeValidate&& from) noexcept
    : CSClientTimeValidate() {
    *this = ::std::move(from);
  }

  inline CSClientTimeValidate& operator=(const CSClientTimeValidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSClientTimeValidate& operator=(CSClientTimeValidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSClientTimeValidate& default_instance();

  static inline const CSClientTimeValidate* internal_default_instance() {
    return reinterpret_cast<const CSClientTimeValidate*>(
               &_CSClientTimeValidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    260;

  friend void swap(CSClientTimeValidate& a, CSClientTimeValidate& b) {
    a.Swap(&b);
  }
  inline void Swap(CSClientTimeValidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSClientTimeValidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSClientTimeValidate* New() const final {
    return CreateMaybeMessage<CSClientTimeValidate>(nullptr);
  }

  CSClientTimeValidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSClientTimeValidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSClientTimeValidate& from);
  void MergeFrom(const CSClientTimeValidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSClientTimeValidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSClientTimeValidate";
  }
  protected:
  explicit CSClientTimeValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int32 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BYDLD.CSClientTimeValidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCClientTimeValidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCClientTimeValidate) */ {
 public:
  inline SCClientTimeValidate() : SCClientTimeValidate(nullptr) {}
  virtual ~SCClientTimeValidate();

  SCClientTimeValidate(const SCClientTimeValidate& from);
  SCClientTimeValidate(SCClientTimeValidate&& from) noexcept
    : SCClientTimeValidate() {
    *this = ::std::move(from);
  }

  inline SCClientTimeValidate& operator=(const SCClientTimeValidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCClientTimeValidate& operator=(SCClientTimeValidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCClientTimeValidate& default_instance();

  static inline const SCClientTimeValidate* internal_default_instance() {
    return reinterpret_cast<const SCClientTimeValidate*>(
               &_SCClientTimeValidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    261;

  friend void swap(SCClientTimeValidate& a, SCClientTimeValidate& b) {
    a.Swap(&b);
  }
  inline void Swap(SCClientTimeValidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCClientTimeValidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCClientTimeValidate* New() const final {
    return CreateMaybeMessage<SCClientTimeValidate>(nullptr);
  }

  SCClientTimeValidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCClientTimeValidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCClientTimeValidate& from);
  void MergeFrom(const SCClientTimeValidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCClientTimeValidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCClientTimeValidate";
  }
  protected:
  explicit SCClientTimeValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.SCClientTimeValidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class CSChangeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.CSChangeTable) */ {
 public:
  inline CSChangeTable() : CSChangeTable(nullptr) {}
  virtual ~CSChangeTable();

  CSChangeTable(const CSChangeTable& from);
  CSChangeTable(CSChangeTable&& from) noexcept
    : CSChangeTable() {
    *this = ::std::move(from);
  }

  inline CSChangeTable& operator=(const CSChangeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChangeTable& operator=(CSChangeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChangeTable& default_instance();

  static inline const CSChangeTable* internal_default_instance() {
    return reinterpret_cast<const CSChangeTable*>(
               &_CSChangeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    262;

  friend void swap(CSChangeTable& a, CSChangeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChangeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChangeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChangeTable* New() const final {
    return CreateMaybeMessage<CSChangeTable>(nullptr);
  }

  CSChangeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChangeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChangeTable& from);
  void MergeFrom(const CSChangeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChangeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.CSChangeTable";
  }
  protected:
  explicit CSChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.CSChangeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// -------------------------------------------------------------------

class SCChangeTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BYDLD.SCChangeTable) */ {
 public:
  inline SCChangeTable() : SCChangeTable(nullptr) {}
  virtual ~SCChangeTable();

  SCChangeTable(const SCChangeTable& from);
  SCChangeTable(SCChangeTable&& from) noexcept
    : SCChangeTable() {
    *this = ::std::move(from);
  }

  inline SCChangeTable& operator=(const SCChangeTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChangeTable& operator=(SCChangeTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChangeTable& default_instance();

  static inline const SCChangeTable* internal_default_instance() {
    return reinterpret_cast<const SCChangeTable*>(
               &_SCChangeTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    263;

  friend void swap(SCChangeTable& a, SCChangeTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChangeTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChangeTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChangeTable* New() const final {
    return CreateMaybeMessage<SCChangeTable>(nullptr);
  }

  SCChangeTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChangeTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChangeTable& from);
  void MergeFrom(const SCChangeTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChangeTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BYDLD.SCChangeTable";
  }
  protected:
  explicit SCChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BYDLD_2eproto);
    return ::descriptor_table_BYDLD_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BYDLD.SCChangeTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BYDLD_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_SceneInfo

// repeated .BYDLD.StationBase station_base_list = 1;
inline int SC_SceneInfo::_internal_station_base_list_size() const {
  return station_base_list_.size();
}
inline int SC_SceneInfo::station_base_list_size() const {
  return _internal_station_base_list_size();
}
inline void SC_SceneInfo::clear_station_base_list() {
  station_base_list_.Clear();
}
inline ::BYDLD::StationBase* SC_SceneInfo::mutable_station_base_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SC_SceneInfo.station_base_list)
  return station_base_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >*
SC_SceneInfo::mutable_station_base_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SC_SceneInfo.station_base_list)
  return &station_base_list_;
}
inline const ::BYDLD::StationBase& SC_SceneInfo::_internal_station_base_list(int index) const {
  return station_base_list_.Get(index);
}
inline const ::BYDLD::StationBase& SC_SceneInfo::station_base_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SC_SceneInfo.station_base_list)
  return _internal_station_base_list(index);
}
inline ::BYDLD::StationBase* SC_SceneInfo::_internal_add_station_base_list() {
  return station_base_list_.Add();
}
inline ::BYDLD::StationBase* SC_SceneInfo::add_station_base_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SC_SceneInfo.station_base_list)
  return _internal_add_station_base_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >&
SC_SceneInfo::station_base_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SC_SceneInfo.station_base_list)
  return station_base_list_;
}

// int32 timestamp = 2;
inline void SC_SceneInfo::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:BYDLD.SC_SceneInfo.timestamp)
  return _internal_timestamp();
}
inline void SC_SceneInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void SC_SceneInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:BYDLD.SC_SceneInfo.timestamp)
}

// int32 gun_ratio_num = 3;
inline void SC_SceneInfo::clear_gun_ratio_num() {
  gun_ratio_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_gun_ratio_num() const {
  return gun_ratio_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::gun_ratio_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SC_SceneInfo.gun_ratio_num)
  return _internal_gun_ratio_num();
}
inline void SC_SceneInfo::_internal_set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_num_ = value;
}
inline void SC_SceneInfo::set_gun_ratio_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SC_SceneInfo.gun_ratio_num)
}

// int32 gun_level_num = 4;
inline void SC_SceneInfo::clear_gun_level_num() {
  gun_level_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_gun_level_num() const {
  return gun_level_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::gun_level_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SC_SceneInfo.gun_level_num)
  return _internal_gun_level_num();
}
inline void SC_SceneInfo::_internal_set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_num_ = value;
}
inline void SC_SceneInfo::set_gun_level_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SC_SceneInfo.gun_level_num)
}

// repeated int32 ratio_list = 5;
inline int SC_SceneInfo::_internal_ratio_list_size() const {
  return ratio_list_.size();
}
inline int SC_SceneInfo::ratio_list_size() const {
  return _internal_ratio_list_size();
}
inline void SC_SceneInfo::clear_ratio_list() {
  ratio_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_ratio_list(int index) const {
  return ratio_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::ratio_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SC_SceneInfo.ratio_list)
  return _internal_ratio_list(index);
}
inline void SC_SceneInfo::set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SC_SceneInfo.ratio_list)
}
inline void SC_SceneInfo::_internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Add(value);
}
inline void SC_SceneInfo::add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratio_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.SC_SceneInfo.ratio_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_ratio_list() const {
  return ratio_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::ratio_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SC_SceneInfo.ratio_list)
  return _internal_ratio_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_ratio_list() {
  return &ratio_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_ratio_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SC_SceneInfo.ratio_list)
  return _internal_mutable_ratio_list();
}

// repeated .BYDLD.GunDetail gun_list = 6;
inline int SC_SceneInfo::_internal_gun_list_size() const {
  return gun_list_.size();
}
inline int SC_SceneInfo::gun_list_size() const {
  return _internal_gun_list_size();
}
inline void SC_SceneInfo::clear_gun_list() {
  gun_list_.Clear();
}
inline ::BYDLD::GunDetail* SC_SceneInfo::mutable_gun_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SC_SceneInfo.gun_list)
  return gun_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >*
SC_SceneInfo::mutable_gun_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SC_SceneInfo.gun_list)
  return &gun_list_;
}
inline const ::BYDLD::GunDetail& SC_SceneInfo::_internal_gun_list(int index) const {
  return gun_list_.Get(index);
}
inline const ::BYDLD::GunDetail& SC_SceneInfo::gun_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SC_SceneInfo.gun_list)
  return _internal_gun_list(index);
}
inline ::BYDLD::GunDetail* SC_SceneInfo::_internal_add_gun_list() {
  return gun_list_.Add();
}
inline ::BYDLD::GunDetail* SC_SceneInfo::add_gun_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SC_SceneInfo.gun_list)
  return _internal_add_gun_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >&
SC_SceneInfo::gun_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SC_SceneInfo.gun_list)
  return gun_list_;
}

// -------------------------------------------------------------------

// GunSpecEffect

// int32 ratioLimit = 1;
inline void GunSpecEffect::clear_ratiolimit() {
  ratiolimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunSpecEffect::_internal_ratiolimit() const {
  return ratiolimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunSpecEffect::ratiolimit() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunSpecEffect.ratioLimit)
  return _internal_ratiolimit();
}
inline void GunSpecEffect::_internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiolimit_ = value;
}
inline void GunSpecEffect::set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiolimit(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunSpecEffect.ratioLimit)
}

// float hitChangeRate = 2;
inline void GunSpecEffect::clear_hitchangerate() {
  hitchangerate_ = 0;
}
inline float GunSpecEffect::_internal_hitchangerate() const {
  return hitchangerate_;
}
inline float GunSpecEffect::hitchangerate() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunSpecEffect.hitChangeRate)
  return _internal_hitchangerate();
}
inline void GunSpecEffect::_internal_set_hitchangerate(float value) {
  
  hitchangerate_ = value;
}
inline void GunSpecEffect::set_hitchangerate(float value) {
  _internal_set_hitchangerate(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunSpecEffect.hitChangeRate)
}

// float moneyChangeRate = 3;
inline void GunSpecEffect::clear_moneychangerate() {
  moneychangerate_ = 0;
}
inline float GunSpecEffect::_internal_moneychangerate() const {
  return moneychangerate_;
}
inline float GunSpecEffect::moneychangerate() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunSpecEffect.moneyChangeRate)
  return _internal_moneychangerate();
}
inline void GunSpecEffect::_internal_set_moneychangerate(float value) {
  
  moneychangerate_ = value;
}
inline void GunSpecEffect::set_moneychangerate(float value) {
  _internal_set_moneychangerate(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunSpecEffect.moneyChangeRate)
}

// float speedRate = 4;
inline void GunSpecEffect::clear_speedrate() {
  speedrate_ = 0;
}
inline float GunSpecEffect::_internal_speedrate() const {
  return speedrate_;
}
inline float GunSpecEffect::speedrate() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunSpecEffect.speedRate)
  return _internal_speedrate();
}
inline void GunSpecEffect::_internal_set_speedrate(float value) {
  
  speedrate_ = value;
}
inline void GunSpecEffect::set_speedrate(float value) {
  _internal_set_speedrate(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunSpecEffect.speedRate)
}

// bool is_senior = 5;
inline void GunSpecEffect::clear_is_senior() {
  is_senior_ = false;
}
inline bool GunSpecEffect::_internal_is_senior() const {
  return is_senior_;
}
inline bool GunSpecEffect::is_senior() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunSpecEffect.is_senior)
  return _internal_is_senior();
}
inline void GunSpecEffect::_internal_set_is_senior(bool value) {
  
  is_senior_ = value;
}
inline void GunSpecEffect::set_is_senior(bool value) {
  _internal_set_is_senior(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunSpecEffect.is_senior)
}

// bool double_tag = 6;
inline void GunSpecEffect::clear_double_tag() {
  double_tag_ = false;
}
inline bool GunSpecEffect::_internal_double_tag() const {
  return double_tag_;
}
inline bool GunSpecEffect::double_tag() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunSpecEffect.double_tag)
  return _internal_double_tag();
}
inline void GunSpecEffect::_internal_set_double_tag(bool value) {
  
  double_tag_ = value;
}
inline void GunSpecEffect::set_double_tag(bool value) {
  _internal_set_double_tag(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunSpecEffect.double_tag)
}

// -------------------------------------------------------------------

// WingsSpecEffect

// int32 ratioLimit = 1;
inline void WingsSpecEffect::clear_ratiolimit() {
  ratiolimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::_internal_ratiolimit() const {
  return ratiolimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsSpecEffect::ratiolimit() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsSpecEffect.ratioLimit)
  return _internal_ratiolimit();
}
inline void WingsSpecEffect::_internal_set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiolimit_ = value;
}
inline void WingsSpecEffect::set_ratiolimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiolimit(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsSpecEffect.ratioLimit)
}

// float hitChangeRate = 2;
inline void WingsSpecEffect::clear_hitchangerate() {
  hitchangerate_ = 0;
}
inline float WingsSpecEffect::_internal_hitchangerate() const {
  return hitchangerate_;
}
inline float WingsSpecEffect::hitchangerate() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsSpecEffect.hitChangeRate)
  return _internal_hitchangerate();
}
inline void WingsSpecEffect::_internal_set_hitchangerate(float value) {
  
  hitchangerate_ = value;
}
inline void WingsSpecEffect::set_hitchangerate(float value) {
  _internal_set_hitchangerate(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsSpecEffect.hitChangeRate)
}

// float moneyChangeRate = 3;
inline void WingsSpecEffect::clear_moneychangerate() {
  moneychangerate_ = 0;
}
inline float WingsSpecEffect::_internal_moneychangerate() const {
  return moneychangerate_;
}
inline float WingsSpecEffect::moneychangerate() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsSpecEffect.moneyChangeRate)
  return _internal_moneychangerate();
}
inline void WingsSpecEffect::_internal_set_moneychangerate(float value) {
  
  moneychangerate_ = value;
}
inline void WingsSpecEffect::set_moneychangerate(float value) {
  _internal_set_moneychangerate(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsSpecEffect.moneyChangeRate)
}

// float speedRate = 4;
inline void WingsSpecEffect::clear_speedrate() {
  speedrate_ = 0;
}
inline float WingsSpecEffect::_internal_speedrate() const {
  return speedrate_;
}
inline float WingsSpecEffect::speedrate() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsSpecEffect.speedRate)
  return _internal_speedrate();
}
inline void WingsSpecEffect::_internal_set_speedrate(float value) {
  
  speedrate_ = value;
}
inline void WingsSpecEffect::set_speedrate(float value) {
  _internal_set_speedrate(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsSpecEffect.speedRate)
}

// bool is_senior = 5;
inline void WingsSpecEffect::clear_is_senior() {
  is_senior_ = false;
}
inline bool WingsSpecEffect::_internal_is_senior() const {
  return is_senior_;
}
inline bool WingsSpecEffect::is_senior() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsSpecEffect.is_senior)
  return _internal_is_senior();
}
inline void WingsSpecEffect::_internal_set_is_senior(bool value) {
  
  is_senior_ = value;
}
inline void WingsSpecEffect::set_is_senior(bool value) {
  _internal_set_is_senior(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsSpecEffect.is_senior)
}

// bool double_tag = 6;
inline void WingsSpecEffect::clear_double_tag() {
  double_tag_ = false;
}
inline bool WingsSpecEffect::_internal_double_tag() const {
  return double_tag_;
}
inline bool WingsSpecEffect::double_tag() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsSpecEffect.double_tag)
  return _internal_double_tag();
}
inline void WingsSpecEffect::_internal_set_double_tag(bool value) {
  
  double_tag_ = value;
}
inline void WingsSpecEffect::set_double_tag(bool value) {
  _internal_set_double_tag(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsSpecEffect.double_tag)
}

// -------------------------------------------------------------------

// WingsInfo

// int32 wings_id = 1;
inline void WingsInfo::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::wings_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.wings_id)
  return _internal_wings_id();
}
inline void WingsInfo::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void WingsInfo::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.wings_id)
}

// bool enable = 2;
inline void WingsInfo::clear_enable() {
  enable_ = false;
}
inline bool WingsInfo::_internal_enable() const {
  return enable_;
}
inline bool WingsInfo::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.enable)
  return _internal_enable();
}
inline void WingsInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void WingsInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.enable)
}

// .BYDLD.WingsSpecEffect wings_spec_effect = 3;
inline bool WingsInfo::_internal_has_wings_spec_effect() const {
  return this != internal_default_instance() && wings_spec_effect_ != nullptr;
}
inline bool WingsInfo::has_wings_spec_effect() const {
  return _internal_has_wings_spec_effect();
}
inline void WingsInfo::clear_wings_spec_effect() {
  if (GetArena() == nullptr && wings_spec_effect_ != nullptr) {
    delete wings_spec_effect_;
  }
  wings_spec_effect_ = nullptr;
}
inline const ::BYDLD::WingsSpecEffect& WingsInfo::_internal_wings_spec_effect() const {
  const ::BYDLD::WingsSpecEffect* p = wings_spec_effect_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::WingsSpecEffect&>(
      ::BYDLD::_WingsSpecEffect_default_instance_);
}
inline const ::BYDLD::WingsSpecEffect& WingsInfo::wings_spec_effect() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.wings_spec_effect)
  return _internal_wings_spec_effect();
}
inline void WingsInfo::unsafe_arena_set_allocated_wings_spec_effect(
    ::BYDLD::WingsSpecEffect* wings_spec_effect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wings_spec_effect_);
  }
  wings_spec_effect_ = wings_spec_effect;
  if (wings_spec_effect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.WingsInfo.wings_spec_effect)
}
inline ::BYDLD::WingsSpecEffect* WingsInfo::release_wings_spec_effect() {
  
  ::BYDLD::WingsSpecEffect* temp = wings_spec_effect_;
  wings_spec_effect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::WingsSpecEffect* WingsInfo::unsafe_arena_release_wings_spec_effect() {
  // @@protoc_insertion_point(field_release:BYDLD.WingsInfo.wings_spec_effect)
  
  ::BYDLD::WingsSpecEffect* temp = wings_spec_effect_;
  wings_spec_effect_ = nullptr;
  return temp;
}
inline ::BYDLD::WingsSpecEffect* WingsInfo::_internal_mutable_wings_spec_effect() {
  
  if (wings_spec_effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::WingsSpecEffect>(GetArena());
    wings_spec_effect_ = p;
  }
  return wings_spec_effect_;
}
inline ::BYDLD::WingsSpecEffect* WingsInfo::mutable_wings_spec_effect() {
  // @@protoc_insertion_point(field_mutable:BYDLD.WingsInfo.wings_spec_effect)
  return _internal_mutable_wings_spec_effect();
}
inline void WingsInfo::set_allocated_wings_spec_effect(::BYDLD::WingsSpecEffect* wings_spec_effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wings_spec_effect_;
  }
  if (wings_spec_effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wings_spec_effect);
    if (message_arena != submessage_arena) {
      wings_spec_effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wings_spec_effect, submessage_arena);
    }
    
  } else {
    
  }
  wings_spec_effect_ = wings_spec_effect;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.WingsInfo.wings_spec_effect)
}

// int32 receive_type = 4;
inline void WingsInfo::clear_receive_type() {
  receive_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_receive_type() const {
  return receive_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::receive_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.receive_type)
  return _internal_receive_type();
}
inline void WingsInfo::_internal_set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_type_ = value;
}
inline void WingsInfo::set_receive_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.receive_type)
}

// int32 activity_id = 5;
inline void WingsInfo::clear_activity_id() {
  activity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_activity_id() const {
  return activity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.activity_id)
  return _internal_activity_id();
}
inline void WingsInfo::_internal_set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activity_id_ = value;
}
inline void WingsInfo::set_activity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activity_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.activity_id)
}

// int32 price = 6;
inline void WingsInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::price() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.price)
  return _internal_price();
}
inline void WingsInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void WingsInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.price)
}

// int32 time_stamp = 7;
inline void WingsInfo::clear_time_stamp() {
  time_stamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.time_stamp)
  return _internal_time_stamp();
}
inline void WingsInfo::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_stamp_ = value;
}
inline void WingsInfo::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.time_stamp)
}

// int32 discount_price = 8;
inline void WingsInfo::clear_discount_price() {
  discount_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_discount_price() const {
  return discount_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::discount_price() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.discount_price)
  return _internal_discount_price();
}
inline void WingsInfo::_internal_set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  discount_price_ = value;
}
inline void WingsInfo::set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_discount_price(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.discount_price)
}

// int32 start_time = 9;
inline void WingsInfo::clear_start_time() {
  start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::start_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.start_time)
  return _internal_start_time();
}
inline void WingsInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_time_ = value;
}
inline void WingsInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.start_time)
}

// int32 end_time = 10;
inline void WingsInfo::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WingsInfo::end_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.WingsInfo.end_time)
  return _internal_end_time();
}
inline void WingsInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void WingsInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.WingsInfo.end_time)
}

// -------------------------------------------------------------------

// PurchaseGun

// int32 money = 1;
inline void PurchaseGun::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseGun::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseGun::money() const {
  // @@protoc_insertion_point(field_get:BYDLD.PurchaseGun.money)
  return _internal_money();
}
inline void PurchaseGun::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void PurchaseGun::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:BYDLD.PurchaseGun.money)
}

// int32 level = 2;
inline void PurchaseGun::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseGun::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseGun::level() const {
  // @@protoc_insertion_point(field_get:BYDLD.PurchaseGun.level)
  return _internal_level();
}
inline void PurchaseGun::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PurchaseGun::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.PurchaseGun.level)
}

// -------------------------------------------------------------------

// SCVipInfo

// int32 chair_idx = 1;
inline void SCVipInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.chair_idx)
  return _internal_chair_idx();
}
inline void SCVipInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCVipInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.chair_idx)
}

// int32 cur_vip = 2;
inline void SCVipInfo::clear_cur_vip() {
  cur_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_cur_vip() const {
  return cur_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::cur_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.cur_vip)
  return _internal_cur_vip();
}
inline void SCVipInfo::_internal_set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_vip_ = value;
}
inline void SCVipInfo::set_cur_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.cur_vip)
}

// int32 trident1_vip = 3;
inline void SCVipInfo::clear_trident1_vip() {
  trident1_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_trident1_vip() const {
  return trident1_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::trident1_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.trident1_vip)
  return _internal_trident1_vip();
}
inline void SCVipInfo::_internal_set_trident1_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident1_vip_ = value;
}
inline void SCVipInfo::set_trident1_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident1_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.trident1_vip)
}

// int32 trident2_vip = 4;
inline void SCVipInfo::clear_trident2_vip() {
  trident2_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_trident2_vip() const {
  return trident2_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::trident2_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.trident2_vip)
  return _internal_trident2_vip();
}
inline void SCVipInfo::_internal_set_trident2_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident2_vip_ = value;
}
inline void SCVipInfo::set_trident2_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident2_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.trident2_vip)
}

// int32 trident3_vip = 5;
inline void SCVipInfo::clear_trident3_vip() {
  trident3_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_trident3_vip() const {
  return trident3_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::trident3_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.trident3_vip)
  return _internal_trident3_vip();
}
inline void SCVipInfo::_internal_set_trident3_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident3_vip_ = value;
}
inline void SCVipInfo::set_trident3_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident3_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.trident3_vip)
}

// int32 trident4_vip = 6;
inline void SCVipInfo::clear_trident4_vip() {
  trident4_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_trident4_vip() const {
  return trident4_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::trident4_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.trident4_vip)
  return _internal_trident4_vip();
}
inline void SCVipInfo::_internal_set_trident4_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident4_vip_ = value;
}
inline void SCVipInfo::set_trident4_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident4_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.trident4_vip)
}

// int32 trident5_vip = 7;
inline void SCVipInfo::clear_trident5_vip() {
  trident5_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_trident5_vip() const {
  return trident5_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::trident5_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.trident5_vip)
  return _internal_trident5_vip();
}
inline void SCVipInfo::_internal_set_trident5_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident5_vip_ = value;
}
inline void SCVipInfo::set_trident5_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident5_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.trident5_vip)
}

// int32 double_shoot_vip = 8;
inline void SCVipInfo::clear_double_shoot_vip() {
  double_shoot_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_double_shoot_vip() const {
  return double_shoot_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::double_shoot_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.double_shoot_vip)
  return _internal_double_shoot_vip();
}
inline void SCVipInfo::_internal_set_double_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  double_shoot_vip_ = value;
}
inline void SCVipInfo::set_double_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_double_shoot_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.double_shoot_vip)
}

// int32 lock_shoot_vip = 9;
inline void SCVipInfo::clear_lock_shoot_vip() {
  lock_shoot_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_lock_shoot_vip() const {
  return lock_shoot_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::lock_shoot_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.lock_shoot_vip)
  return _internal_lock_shoot_vip();
}
inline void SCVipInfo::_internal_set_lock_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lock_shoot_vip_ = value;
}
inline void SCVipInfo::set_lock_shoot_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lock_shoot_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.lock_shoot_vip)
}

// int32 golden_gun_vip = 10;
inline void SCVipInfo::clear_golden_gun_vip() {
  golden_gun_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_golden_gun_vip() const {
  return golden_gun_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::golden_gun_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.golden_gun_vip)
  return _internal_golden_gun_vip();
}
inline void SCVipInfo::_internal_set_golden_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  golden_gun_vip_ = value;
}
inline void SCVipInfo::set_golden_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_golden_gun_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.golden_gun_vip)
}

// int32 paladin_gun_vip = 11;
inline void SCVipInfo::clear_paladin_gun_vip() {
  paladin_gun_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_paladin_gun_vip() const {
  return paladin_gun_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::paladin_gun_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.paladin_gun_vip)
  return _internal_paladin_gun_vip();
}
inline void SCVipInfo::_internal_set_paladin_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  paladin_gun_vip_ = value;
}
inline void SCVipInfo::set_paladin_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_paladin_gun_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.paladin_gun_vip)
}

// int32 panda_gun_vip = 12;
inline void SCVipInfo::clear_panda_gun_vip() {
  panda_gun_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::_internal_panda_gun_vip() const {
  return panda_gun_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCVipInfo::panda_gun_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCVipInfo.panda_gun_vip)
  return _internal_panda_gun_vip();
}
inline void SCVipInfo::_internal_set_panda_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  panda_gun_vip_ = value;
}
inline void SCVipInfo::set_panda_gun_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_panda_gun_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCVipInfo.panda_gun_vip)
}

// -------------------------------------------------------------------

// GunDetail

// int32 gun_level = 1;
inline void GunDetail::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.gun_level)
  return _internal_gun_level();
}
inline void GunDetail::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void GunDetail::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.gun_level)
}

// bool enable = 2;
inline void GunDetail::clear_enable() {
  enable_ = false;
}
inline bool GunDetail::_internal_enable() const {
  return enable_;
}
inline bool GunDetail::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.enable)
  return _internal_enable();
}
inline void GunDetail::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void GunDetail::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.enable)
}

// int32 ratio_min = 3;
inline void GunDetail::clear_ratio_min() {
  ratio_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_ratio_min() const {
  return ratio_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::ratio_min() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.ratio_min)
  return _internal_ratio_min();
}
inline void GunDetail::_internal_set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_min_ = value;
}
inline void GunDetail::set_ratio_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio_min(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.ratio_min)
}

// int32 ratio_max = 4;
inline void GunDetail::clear_ratio_max() {
  ratio_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_ratio_max() const {
  return ratio_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::ratio_max() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.ratio_max)
  return _internal_ratio_max();
}
inline void GunDetail::_internal_set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_max_ = value;
}
inline void GunDetail::set_ratio_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio_max(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.ratio_max)
}

// int32 vip_limit = 5;
inline void GunDetail::clear_vip_limit() {
  vip_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_vip_limit() const {
  return vip_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::vip_limit() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.vip_limit)
  return _internal_vip_limit();
}
inline void GunDetail::_internal_set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_limit_ = value;
}
inline void GunDetail::set_vip_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_limit(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.vip_limit)
}

// int32 price = 6;
inline void GunDetail::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::price() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.price)
  return _internal_price();
}
inline void GunDetail::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void GunDetail::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.price)
}

// float attack_speed = 7;
inline void GunDetail::clear_attack_speed() {
  attack_speed_ = 0;
}
inline float GunDetail::_internal_attack_speed() const {
  return attack_speed_;
}
inline float GunDetail::attack_speed() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.attack_speed)
  return _internal_attack_speed();
}
inline void GunDetail::_internal_set_attack_speed(float value) {
  
  attack_speed_ = value;
}
inline void GunDetail::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.attack_speed)
}

// int32 prop_id = 8;
inline void GunDetail::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.prop_id)
  return _internal_prop_id();
}
inline void GunDetail::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void GunDetail::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.prop_id)
}

// .BYDLD.GunSpecEffect gunSpecEffect = 9;
inline bool GunDetail::_internal_has_gunspeceffect() const {
  return this != internal_default_instance() && gunspeceffect_ != nullptr;
}
inline bool GunDetail::has_gunspeceffect() const {
  return _internal_has_gunspeceffect();
}
inline void GunDetail::clear_gunspeceffect() {
  if (GetArena() == nullptr && gunspeceffect_ != nullptr) {
    delete gunspeceffect_;
  }
  gunspeceffect_ = nullptr;
}
inline const ::BYDLD::GunSpecEffect& GunDetail::_internal_gunspeceffect() const {
  const ::BYDLD::GunSpecEffect* p = gunspeceffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::GunSpecEffect&>(
      ::BYDLD::_GunSpecEffect_default_instance_);
}
inline const ::BYDLD::GunSpecEffect& GunDetail::gunspeceffect() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.gunSpecEffect)
  return _internal_gunspeceffect();
}
inline void GunDetail::unsafe_arena_set_allocated_gunspeceffect(
    ::BYDLD::GunSpecEffect* gunspeceffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gunspeceffect_);
  }
  gunspeceffect_ = gunspeceffect;
  if (gunspeceffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.GunDetail.gunSpecEffect)
}
inline ::BYDLD::GunSpecEffect* GunDetail::release_gunspeceffect() {
  
  ::BYDLD::GunSpecEffect* temp = gunspeceffect_;
  gunspeceffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::GunSpecEffect* GunDetail::unsafe_arena_release_gunspeceffect() {
  // @@protoc_insertion_point(field_release:BYDLD.GunDetail.gunSpecEffect)
  
  ::BYDLD::GunSpecEffect* temp = gunspeceffect_;
  gunspeceffect_ = nullptr;
  return temp;
}
inline ::BYDLD::GunSpecEffect* GunDetail::_internal_mutable_gunspeceffect() {
  
  if (gunspeceffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::GunSpecEffect>(GetArena());
    gunspeceffect_ = p;
  }
  return gunspeceffect_;
}
inline ::BYDLD::GunSpecEffect* GunDetail::mutable_gunspeceffect() {
  // @@protoc_insertion_point(field_mutable:BYDLD.GunDetail.gunSpecEffect)
  return _internal_mutable_gunspeceffect();
}
inline void GunDetail::set_allocated_gunspeceffect(::BYDLD::GunSpecEffect* gunspeceffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gunspeceffect_;
  }
  if (gunspeceffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gunspeceffect);
    if (message_arena != submessage_arena) {
      gunspeceffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gunspeceffect, submessage_arena);
    }
    
  } else {
    
  }
  gunspeceffect_ = gunspeceffect;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.GunDetail.gunSpecEffect)
}

// int32 discount_price = 10;
inline void GunDetail::clear_discount_price() {
  discount_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_discount_price() const {
  return discount_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::discount_price() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.discount_price)
  return _internal_discount_price();
}
inline void GunDetail::_internal_set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  discount_price_ = value;
}
inline void GunDetail::set_discount_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_discount_price(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.discount_price)
}

// int32 start_time = 11;
inline void GunDetail::clear_start_time() {
  start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::start_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.start_time)
  return _internal_start_time();
}
inline void GunDetail::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_time_ = value;
}
inline void GunDetail::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.start_time)
}

// int32 end_time = 12;
inline void GunDetail::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::end_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.end_time)
  return _internal_end_time();
}
inline void GunDetail::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void GunDetail::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.end_time)
}

// repeated int32 ratio_list = 13;
inline int GunDetail::_internal_ratio_list_size() const {
  return ratio_list_.size();
}
inline int GunDetail::ratio_list_size() const {
  return _internal_ratio_list_size();
}
inline void GunDetail::clear_ratio_list() {
  ratio_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::_internal_ratio_list(int index) const {
  return ratio_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunDetail::ratio_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.GunDetail.ratio_list)
  return _internal_ratio_list(index);
}
inline void GunDetail::set_ratio_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.GunDetail.ratio_list)
}
inline void GunDetail::_internal_add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_list_.Add(value);
}
inline void GunDetail::add_ratio_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratio_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.GunDetail.ratio_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GunDetail::_internal_ratio_list() const {
  return ratio_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GunDetail::ratio_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.GunDetail.ratio_list)
  return _internal_ratio_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GunDetail::_internal_mutable_ratio_list() {
  return &ratio_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GunDetail::mutable_ratio_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.GunDetail.ratio_list)
  return _internal_mutable_ratio_list();
}

// -------------------------------------------------------------------

// SCWingsInfo

// repeated .BYDLD.WingsInfo wings_list = 1;
inline int SCWingsInfo::_internal_wings_list_size() const {
  return wings_list_.size();
}
inline int SCWingsInfo::wings_list_size() const {
  return _internal_wings_list_size();
}
inline void SCWingsInfo::clear_wings_list() {
  wings_list_.Clear();
}
inline ::BYDLD::WingsInfo* SCWingsInfo::mutable_wings_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCWingsInfo.wings_list)
  return wings_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::WingsInfo >*
SCWingsInfo::mutable_wings_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCWingsInfo.wings_list)
  return &wings_list_;
}
inline const ::BYDLD::WingsInfo& SCWingsInfo::_internal_wings_list(int index) const {
  return wings_list_.Get(index);
}
inline const ::BYDLD::WingsInfo& SCWingsInfo::wings_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCWingsInfo.wings_list)
  return _internal_wings_list(index);
}
inline ::BYDLD::WingsInfo* SCWingsInfo::_internal_add_wings_list() {
  return wings_list_.Add();
}
inline ::BYDLD::WingsInfo* SCWingsInfo::add_wings_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCWingsInfo.wings_list)
  return _internal_add_wings_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::WingsInfo >&
SCWingsInfo::wings_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCWingsInfo.wings_list)
  return wings_list_;
}

// -------------------------------------------------------------------

// SCGunInfo

// repeated .BYDLD.GunDetail gun_list = 1;
inline int SCGunInfo::_internal_gun_list_size() const {
  return gun_list_.size();
}
inline int SCGunInfo::gun_list_size() const {
  return _internal_gun_list_size();
}
inline void SCGunInfo::clear_gun_list() {
  gun_list_.Clear();
}
inline ::BYDLD::GunDetail* SCGunInfo::mutable_gun_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCGunInfo.gun_list)
  return gun_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >*
SCGunInfo::mutable_gun_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCGunInfo.gun_list)
  return &gun_list_;
}
inline const ::BYDLD::GunDetail& SCGunInfo::_internal_gun_list(int index) const {
  return gun_list_.Get(index);
}
inline const ::BYDLD::GunDetail& SCGunInfo::gun_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCGunInfo.gun_list)
  return _internal_gun_list(index);
}
inline ::BYDLD::GunDetail* SCGunInfo::_internal_add_gun_list() {
  return gun_list_.Add();
}
inline ::BYDLD::GunDetail* SCGunInfo::add_gun_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCGunInfo.gun_list)
  return _internal_add_gun_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GunDetail >&
SCGunInfo::gun_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCGunInfo.gun_list)
  return gun_list_;
}

// -------------------------------------------------------------------

// SCPurchaseCheck

// int32 is_purchase = 1;
inline void SCPurchaseCheck::clear_is_purchase() {
  is_purchase_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPurchaseCheck::_internal_is_purchase() const {
  return is_purchase_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPurchaseCheck::is_purchase() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPurchaseCheck.is_purchase)
  return _internal_is_purchase();
}
inline void SCPurchaseCheck::_internal_set_is_purchase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_purchase_ = value;
}
inline void SCPurchaseCheck::set_is_purchase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_purchase(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPurchaseCheck.is_purchase)
}

// -------------------------------------------------------------------

// ObjectData

// string key = 1;
inline void ObjectData::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ObjectData::key() const {
  // @@protoc_insertion_point(field_get:BYDLD.ObjectData.key)
  return _internal_key();
}
inline void ObjectData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:BYDLD.ObjectData.key)
}
inline std::string* ObjectData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:BYDLD.ObjectData.key)
  return _internal_mutable_key();
}
inline const std::string& ObjectData::_internal_key() const {
  return key_.Get();
}
inline void ObjectData::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectData::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.ObjectData.key)
}
inline void ObjectData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.ObjectData.key)
}
inline void ObjectData::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.ObjectData.key)
}
inline std::string* ObjectData::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectData::release_key() {
  // @@protoc_insertion_point(field_release:BYDLD.ObjectData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.ObjectData.key)
}

// int32 value = 2;
inline void ObjectData::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectData::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectData::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.ObjectData.value)
  return _internal_value();
}
inline void ObjectData::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ObjectData::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.ObjectData.value)
}

// -------------------------------------------------------------------

// Object2

// string key = 1;
inline void Object2::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Object2::key() const {
  // @@protoc_insertion_point(field_get:BYDLD.Object2.key)
  return _internal_key();
}
inline void Object2::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:BYDLD.Object2.key)
}
inline std::string* Object2::mutable_key() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Object2.key)
  return _internal_mutable_key();
}
inline const std::string& Object2::_internal_key() const {
  return key_.Get();
}
inline void Object2::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object2::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.Object2.key)
}
inline void Object2::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.Object2.key)
}
inline void Object2::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.Object2.key)
}
inline std::string* Object2::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object2::release_key() {
  // @@protoc_insertion_point(field_release:BYDLD.Object2.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object2::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Object2.key)
}

// string value = 2;
inline void Object2::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Object2::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.Object2.value)
  return _internal_value();
}
inline void Object2::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.Object2.value)
}
inline std::string* Object2::mutable_value() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Object2.value)
  return _internal_mutable_value();
}
inline const std::string& Object2::_internal_value() const {
  return value_.Get();
}
inline void Object2::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object2::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.Object2.value)
}
inline void Object2::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.Object2.value)
}
inline void Object2::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.Object2.value)
}
inline std::string* Object2::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object2::release_value() {
  // @@protoc_insertion_point(field_release:BYDLD.Object2.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object2::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Object2.value)
}

// -------------------------------------------------------------------

// Object3

// int32 key = 1;
inline void Object3::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::key() const {
  // @@protoc_insertion_point(field_get:BYDLD.Object3.key)
  return _internal_key();
}
inline void Object3::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void Object3::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:BYDLD.Object3.key)
}

// int32 value = 2;
inline void Object3::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object3::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.Object3.value)
  return _internal_value();
}
inline void Object3::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Object3::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.Object3.value)
}

// -------------------------------------------------------------------

// Object4

// int32 key = 1;
inline void Object4::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object4::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object4::key() const {
  // @@protoc_insertion_point(field_get:BYDLD.Object4.key)
  return _internal_key();
}
inline void Object4::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void Object4::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:BYDLD.Object4.key)
}

// repeated int32 value = 2;
inline int Object4::_internal_value_size() const {
  return value_.size();
}
inline int Object4::value_size() const {
  return _internal_value_size();
}
inline void Object4::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object4::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object4::value(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.Object4.value)
  return _internal_value(index);
}
inline void Object4::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.Object4.value)
}
inline void Object4::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void Object4::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:BYDLD.Object4.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Object4::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Object4::value() const {
  // @@protoc_insertion_point(field_list:BYDLD.Object4.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Object4::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Object4::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.Object4.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Decimal

// int32 num = 1;
inline void Decimal::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::num() const {
  // @@protoc_insertion_point(field_get:BYDLD.Decimal.num)
  return _internal_num();
}
inline void Decimal::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void Decimal::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.Decimal.num)
}

// int32 denom = 2;
inline void Decimal::clear_denom() {
  denom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_denom() const {
  return denom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::denom() const {
  // @@protoc_insertion_point(field_get:BYDLD.Decimal.denom)
  return _internal_denom();
}
inline void Decimal::_internal_set_denom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  denom_ = value;
}
inline void Decimal::set_denom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_denom(value);
  // @@protoc_insertion_point(field_set:BYDLD.Decimal.denom)
}

// -------------------------------------------------------------------

// CSTridentInfo

// int32 chair_idx = 1;
inline void CSTridentInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTridentInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTridentInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSTridentInfo.chair_idx)
  return _internal_chair_idx();
}
inline void CSTridentInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSTridentInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSTridentInfo.chair_idx)
}

// -------------------------------------------------------------------

// SCTridentInfo

// repeated int32 bets = 1;
inline int SCTridentInfo::_internal_bets_size() const {
  return bets_.size();
}
inline int SCTridentInfo::bets_size() const {
  return _internal_bets_size();
}
inline void SCTridentInfo::clear_bets() {
  bets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentInfo::_internal_bets(int index) const {
  return bets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentInfo::bets(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentInfo.bets)
  return _internal_bets(index);
}
inline void SCTridentInfo::set_bets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bets_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentInfo.bets)
}
inline void SCTridentInfo::_internal_add_bets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bets_.Add(value);
}
inline void SCTridentInfo::add_bets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bets(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCTridentInfo.bets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCTridentInfo::_internal_bets() const {
  return bets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCTridentInfo::bets() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCTridentInfo.bets)
  return _internal_bets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCTridentInfo::_internal_mutable_bets() {
  return &bets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCTridentInfo::mutable_bets() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCTridentInfo.bets)
  return _internal_mutable_bets();
}

// bool is_full = 2;
inline void SCTridentInfo::clear_is_full() {
  is_full_ = false;
}
inline bool SCTridentInfo::_internal_is_full() const {
  return is_full_;
}
inline bool SCTridentInfo::is_full() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentInfo.is_full)
  return _internal_is_full();
}
inline void SCTridentInfo::_internal_set_is_full(bool value) {
  
  is_full_ = value;
}
inline void SCTridentInfo::set_is_full(bool value) {
  _internal_set_is_full(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentInfo.is_full)
}

// int32 cur_point = 3;
inline void SCTridentInfo::clear_cur_point() {
  cur_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentInfo::_internal_cur_point() const {
  return cur_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentInfo::cur_point() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentInfo.cur_point)
  return _internal_cur_point();
}
inline void SCTridentInfo::_internal_set_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_point_ = value;
}
inline void SCTridentInfo::set_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_point(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentInfo.cur_point)
}

// -------------------------------------------------------------------

// CSTridentBet

// int32 bet = 1;
inline void CSTridentBet::clear_bet() {
  bet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTridentBet::_internal_bet() const {
  return bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTridentBet::bet() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSTridentBet.bet)
  return _internal_bet();
}
inline void CSTridentBet::_internal_set_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_ = value;
}
inline void CSTridentBet::set_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSTridentBet.bet)
}

// -------------------------------------------------------------------

// SCTridentBet

// int32 chair_idx = 1;
inline void SCTridentBet::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentBet.chair_idx)
  return _internal_chair_idx();
}
inline void SCTridentBet::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTridentBet::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentBet.chair_idx)
}

// int32 award = 2;
inline void SCTridentBet::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentBet.award)
  return _internal_award();
}
inline void SCTridentBet::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCTridentBet::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentBet.award)
}

// int32 score = 3;
inline void SCTridentBet::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentBet.score)
  return _internal_score();
}
inline void SCTridentBet::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCTridentBet::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentBet.score)
}

// int32 bet = 4;
inline void SCTridentBet::clear_bet() {
  bet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::_internal_bet() const {
  return bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTridentBet::bet() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentBet.bet)
  return _internal_bet();
}
inline void SCTridentBet::_internal_set_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_ = value;
}
inline void SCTridentBet::set_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentBet.bet)
}

// bool is_big_small = 5;
inline void SCTridentBet::clear_is_big_small() {
  is_big_small_ = false;
}
inline bool SCTridentBet::_internal_is_big_small() const {
  return is_big_small_;
}
inline bool SCTridentBet::is_big_small() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentBet.is_big_small)
  return _internal_is_big_small();
}
inline void SCTridentBet::_internal_set_is_big_small(bool value) {
  
  is_big_small_ = value;
}
inline void SCTridentBet::set_is_big_small(bool value) {
  _internal_set_is_big_small(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTridentBet.is_big_small)
}

// -------------------------------------------------------------------

// SCPropsTrident

// bool enable = 1;
inline void SCPropsTrident::clear_enable() {
  enable_ = false;
}
inline bool SCPropsTrident::_internal_enable() const {
  return enable_;
}
inline bool SCPropsTrident::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsTrident.enable)
  return _internal_enable();
}
inline void SCPropsTrident::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCPropsTrident::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropsTrident.enable)
}

// int32 single_score = 2;
inline void SCPropsTrident::clear_single_score() {
  single_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropsTrident::_internal_single_score() const {
  return single_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropsTrident::single_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsTrident.single_score)
  return _internal_single_score();
}
inline void SCPropsTrident::_internal_set_single_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  single_score_ = value;
}
inline void SCPropsTrident::set_single_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_single_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropsTrident.single_score)
}

// int32 cur_score = 3;
inline void SCPropsTrident::clear_cur_score() {
  cur_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropsTrident::_internal_cur_score() const {
  return cur_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropsTrident::cur_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsTrident.cur_score)
  return _internal_cur_score();
}
inline void SCPropsTrident::_internal_set_cur_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_score_ = value;
}
inline void SCPropsTrident::set_cur_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropsTrident.cur_score)
}

// bool rank_enable = 4;
inline void SCPropsTrident::clear_rank_enable() {
  rank_enable_ = false;
}
inline bool SCPropsTrident::_internal_rank_enable() const {
  return rank_enable_;
}
inline bool SCPropsTrident::rank_enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsTrident.rank_enable)
  return _internal_rank_enable();
}
inline void SCPropsTrident::_internal_set_rank_enable(bool value) {
  
  rank_enable_ = value;
}
inline void SCPropsTrident::set_rank_enable(bool value) {
  _internal_set_rank_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropsTrident.rank_enable)
}

// -------------------------------------------------------------------

// CSBigSmallChoose

// int32 chair_idx = 1;
inline void CSBigSmallChoose::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallChoose::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallChoose::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBigSmallChoose.chair_idx)
  return _internal_chair_idx();
}
inline void CSBigSmallChoose::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSBigSmallChoose::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBigSmallChoose.chair_idx)
}

// int32 enter_or_exit = 2;
inline void CSBigSmallChoose::clear_enter_or_exit() {
  enter_or_exit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallChoose::_internal_enter_or_exit() const {
  return enter_or_exit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallChoose::enter_or_exit() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBigSmallChoose.enter_or_exit)
  return _internal_enter_or_exit();
}
inline void CSBigSmallChoose::_internal_set_enter_or_exit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enter_or_exit_ = value;
}
inline void CSBigSmallChoose::set_enter_or_exit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enter_or_exit(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBigSmallChoose.enter_or_exit)
}

// -------------------------------------------------------------------

// SCBigSmallChoose

// int32 chair_idx = 1;
inline void SCBigSmallChoose::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallChoose.chair_idx)
  return _internal_chair_idx();
}
inline void SCBigSmallChoose::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCBigSmallChoose::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallChoose.chair_idx)
}

// int32 enter_exit = 2;
inline void SCBigSmallChoose::clear_enter_exit() {
  enter_exit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::_internal_enter_exit() const {
  return enter_exit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::enter_exit() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallChoose.enter_exit)
  return _internal_enter_exit();
}
inline void SCBigSmallChoose::_internal_set_enter_exit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enter_exit_ = value;
}
inline void SCBigSmallChoose::set_enter_exit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enter_exit(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallChoose.enter_exit)
}

// int32 award = 3;
inline void SCBigSmallChoose::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallChoose.award)
  return _internal_award();
}
inline void SCBigSmallChoose::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCBigSmallChoose::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallChoose.award)
}

// int32 score = 4;
inline void SCBigSmallChoose::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallChoose::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallChoose.score)
  return _internal_score();
}
inline void SCBigSmallChoose::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCBigSmallChoose::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallChoose.score)
}

// -------------------------------------------------------------------

// CSBigSmallBet

// bool is_bet_big = 1;
inline void CSBigSmallBet::clear_is_bet_big() {
  is_bet_big_ = false;
}
inline bool CSBigSmallBet::_internal_is_bet_big() const {
  return is_bet_big_;
}
inline bool CSBigSmallBet::is_bet_big() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBigSmallBet.is_bet_big)
  return _internal_is_bet_big();
}
inline void CSBigSmallBet::_internal_set_is_bet_big(bool value) {
  
  is_bet_big_ = value;
}
inline void CSBigSmallBet::set_is_bet_big(bool value) {
  _internal_set_is_bet_big(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBigSmallBet.is_bet_big)
}

// int32 times = 2;
inline void CSBigSmallBet::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallBet::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallBet::times() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBigSmallBet.times)
  return _internal_times();
}
inline void CSBigSmallBet::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void CSBigSmallBet::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBigSmallBet.times)
}

// -------------------------------------------------------------------

// SCBigSmallBet

// int32 chair_idx = 1;
inline void SCBigSmallBet::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallBet.chair_idx)
  return _internal_chair_idx();
}
inline void SCBigSmallBet::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCBigSmallBet::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallBet.chair_idx)
}

// repeated int32 dices = 2;
inline int SCBigSmallBet::_internal_dices_size() const {
  return dices_.size();
}
inline int SCBigSmallBet::dices_size() const {
  return _internal_dices_size();
}
inline void SCBigSmallBet::clear_dices() {
  dices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::_internal_dices(int index) const {
  return dices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::dices(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallBet.dices)
  return _internal_dices(index);
}
inline void SCBigSmallBet::set_dices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dices_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallBet.dices)
}
inline void SCBigSmallBet::_internal_add_dices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dices_.Add(value);
}
inline void SCBigSmallBet::add_dices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dices(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCBigSmallBet.dices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCBigSmallBet::_internal_dices() const {
  return dices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCBigSmallBet::dices() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCBigSmallBet.dices)
  return _internal_dices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCBigSmallBet::_internal_mutable_dices() {
  return &dices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCBigSmallBet::mutable_dices() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCBigSmallBet.dices)
  return _internal_mutable_dices();
}

// bool is_bet_big = 3;
inline void SCBigSmallBet::clear_is_bet_big() {
  is_bet_big_ = false;
}
inline bool SCBigSmallBet::_internal_is_bet_big() const {
  return is_bet_big_;
}
inline bool SCBigSmallBet::is_bet_big() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallBet.is_bet_big)
  return _internal_is_bet_big();
}
inline void SCBigSmallBet::_internal_set_is_bet_big(bool value) {
  
  is_bet_big_ = value;
}
inline void SCBigSmallBet::set_is_bet_big(bool value) {
  _internal_set_is_bet_big(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallBet.is_bet_big)
}

// int32 award = 4;
inline void SCBigSmallBet::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallBet.award)
  return _internal_award();
}
inline void SCBigSmallBet::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCBigSmallBet::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallBet.award)
}

// int32 score = 5;
inline void SCBigSmallBet::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallBet::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallBet.score)
  return _internal_score();
}
inline void SCBigSmallBet::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCBigSmallBet::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallBet.score)
}

// bool is_end = 6;
inline void SCBigSmallBet::clear_is_end() {
  is_end_ = false;
}
inline bool SCBigSmallBet::_internal_is_end() const {
  return is_end_;
}
inline bool SCBigSmallBet::is_end() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallBet.is_end)
  return _internal_is_end();
}
inline void SCBigSmallBet::_internal_set_is_end(bool value) {
  
  is_end_ = value;
}
inline void SCBigSmallBet::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallBet.is_end)
}

// -------------------------------------------------------------------

// CSShootTorpedo

// int32 chair_idx = 1;
inline void CSShootTorpedo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShootTorpedo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShootTorpedo::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSShootTorpedo.chair_idx)
  return _internal_chair_idx();
}
inline void CSShootTorpedo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSShootTorpedo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSShootTorpedo.chair_idx)
}

// string torpedo_id = 2;
inline void CSShootTorpedo::clear_torpedo_id() {
  torpedo_id_.ClearToEmpty();
}
inline const std::string& CSShootTorpedo::torpedo_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSShootTorpedo.torpedo_id)
  return _internal_torpedo_id();
}
inline void CSShootTorpedo::set_torpedo_id(const std::string& value) {
  _internal_set_torpedo_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSShootTorpedo.torpedo_id)
}
inline std::string* CSShootTorpedo::mutable_torpedo_id() {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSShootTorpedo.torpedo_id)
  return _internal_mutable_torpedo_id();
}
inline const std::string& CSShootTorpedo::_internal_torpedo_id() const {
  return torpedo_id_.Get();
}
inline void CSShootTorpedo::_internal_set_torpedo_id(const std::string& value) {
  
  torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSShootTorpedo::set_torpedo_id(std::string&& value) {
  
  torpedo_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.CSShootTorpedo.torpedo_id)
}
inline void CSShootTorpedo::set_torpedo_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.CSShootTorpedo.torpedo_id)
}
inline void CSShootTorpedo::set_torpedo_id(const char* value,
    size_t size) {
  
  torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.CSShootTorpedo.torpedo_id)
}
inline std::string* CSShootTorpedo::_internal_mutable_torpedo_id() {
  
  return torpedo_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSShootTorpedo::release_torpedo_id() {
  // @@protoc_insertion_point(field_release:BYDLD.CSShootTorpedo.torpedo_id)
  return torpedo_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSShootTorpedo::set_allocated_torpedo_id(std::string* torpedo_id) {
  if (torpedo_id != nullptr) {
    
  } else {
    
  }
  torpedo_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), torpedo_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.CSShootTorpedo.torpedo_id)
}

// bool shoot_all = 3;
inline void CSShootTorpedo::clear_shoot_all() {
  shoot_all_ = false;
}
inline bool CSShootTorpedo::_internal_shoot_all() const {
  return shoot_all_;
}
inline bool CSShootTorpedo::shoot_all() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSShootTorpedo.shoot_all)
  return _internal_shoot_all();
}
inline void CSShootTorpedo::_internal_set_shoot_all(bool value) {
  
  shoot_all_ = value;
}
inline void CSShootTorpedo::set_shoot_all(bool value) {
  _internal_set_shoot_all(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSShootTorpedo.shoot_all)
}

// -------------------------------------------------------------------

// SCShootTorpedo

// int32 chair_idx = 1;
inline void SCShootTorpedo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShootTorpedo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShootTorpedo::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCShootTorpedo.chair_idx)
  return _internal_chair_idx();
}
inline void SCShootTorpedo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCShootTorpedo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCShootTorpedo.chair_idx)
}

// string torpedo_id = 2;
inline void SCShootTorpedo::clear_torpedo_id() {
  torpedo_id_.ClearToEmpty();
}
inline const std::string& SCShootTorpedo::torpedo_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCShootTorpedo.torpedo_id)
  return _internal_torpedo_id();
}
inline void SCShootTorpedo::set_torpedo_id(const std::string& value) {
  _internal_set_torpedo_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCShootTorpedo.torpedo_id)
}
inline std::string* SCShootTorpedo::mutable_torpedo_id() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCShootTorpedo.torpedo_id)
  return _internal_mutable_torpedo_id();
}
inline const std::string& SCShootTorpedo::_internal_torpedo_id() const {
  return torpedo_id_.Get();
}
inline void SCShootTorpedo::_internal_set_torpedo_id(const std::string& value) {
  
  torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCShootTorpedo::set_torpedo_id(std::string&& value) {
  
  torpedo_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCShootTorpedo.torpedo_id)
}
inline void SCShootTorpedo::set_torpedo_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCShootTorpedo.torpedo_id)
}
inline void SCShootTorpedo::set_torpedo_id(const char* value,
    size_t size) {
  
  torpedo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCShootTorpedo.torpedo_id)
}
inline std::string* SCShootTorpedo::_internal_mutable_torpedo_id() {
  
  return torpedo_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCShootTorpedo::release_torpedo_id() {
  // @@protoc_insertion_point(field_release:BYDLD.SCShootTorpedo.torpedo_id)
  return torpedo_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCShootTorpedo::set_allocated_torpedo_id(std::string* torpedo_id) {
  if (torpedo_id != nullptr) {
    
  } else {
    
  }
  torpedo_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), torpedo_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCShootTorpedo.torpedo_id)
}

// int32 award = 3;
inline void SCShootTorpedo::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShootTorpedo::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShootTorpedo::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCShootTorpedo.award)
  return _internal_award();
}
inline void SCShootTorpedo::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCShootTorpedo::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCShootTorpedo.award)
}

// int64 score = 4;
inline void SCShootTorpedo::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCShootTorpedo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCShootTorpedo::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCShootTorpedo.score)
  return _internal_score();
}
inline void SCShootTorpedo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SCShootTorpedo::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCShootTorpedo.score)
}

// repeated .BYDLD.ObjectData objects = 5;
inline int SCShootTorpedo::_internal_objects_size() const {
  return objects_.size();
}
inline int SCShootTorpedo::objects_size() const {
  return _internal_objects_size();
}
inline void SCShootTorpedo::clear_objects() {
  objects_.Clear();
}
inline ::BYDLD::ObjectData* SCShootTorpedo::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCShootTorpedo.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >*
SCShootTorpedo::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCShootTorpedo.objects)
  return &objects_;
}
inline const ::BYDLD::ObjectData& SCShootTorpedo::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::BYDLD::ObjectData& SCShootTorpedo::objects(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCShootTorpedo.objects)
  return _internal_objects(index);
}
inline ::BYDLD::ObjectData* SCShootTorpedo::_internal_add_objects() {
  return objects_.Add();
}
inline ::BYDLD::ObjectData* SCShootTorpedo::add_objects() {
  // @@protoc_insertion_point(field_add:BYDLD.SCShootTorpedo.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >&
SCShootTorpedo::objects() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCShootTorpedo.objects)
  return objects_;
}

// -------------------------------------------------------------------

// SCPropsTorpedo

// bool enable = 1;
inline void SCPropsTorpedo::clear_enable() {
  enable_ = false;
}
inline bool SCPropsTorpedo::_internal_enable() const {
  return enable_;
}
inline bool SCPropsTorpedo::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsTorpedo.enable)
  return _internal_enable();
}
inline void SCPropsTorpedo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCPropsTorpedo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropsTorpedo.enable)
}

// repeated .BYDLD.ObjectData objects = 2;
inline int SCPropsTorpedo::_internal_objects_size() const {
  return objects_.size();
}
inline int SCPropsTorpedo::objects_size() const {
  return _internal_objects_size();
}
inline void SCPropsTorpedo::clear_objects() {
  objects_.Clear();
}
inline ::BYDLD::ObjectData* SCPropsTorpedo::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCPropsTorpedo.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >*
SCPropsTorpedo::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCPropsTorpedo.objects)
  return &objects_;
}
inline const ::BYDLD::ObjectData& SCPropsTorpedo::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::BYDLD::ObjectData& SCPropsTorpedo::objects(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsTorpedo.objects)
  return _internal_objects(index);
}
inline ::BYDLD::ObjectData* SCPropsTorpedo::_internal_add_objects() {
  return objects_.Add();
}
inline ::BYDLD::ObjectData* SCPropsTorpedo::add_objects() {
  // @@protoc_insertion_point(field_add:BYDLD.SCPropsTorpedo.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >&
SCPropsTorpedo::objects() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCPropsTorpedo.objects)
  return objects_;
}

// -------------------------------------------------------------------

// AwardPoolData

// string key = 1;
inline void AwardPoolData::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& AwardPoolData::key() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolData.key)
  return _internal_key();
}
inline void AwardPoolData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolData.key)
}
inline std::string* AwardPoolData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:BYDLD.AwardPoolData.key)
  return _internal_mutable_key();
}
inline const std::string& AwardPoolData::_internal_key() const {
  return key_.Get();
}
inline void AwardPoolData::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardPoolData::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.AwardPoolData.key)
}
inline void AwardPoolData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.AwardPoolData.key)
}
inline void AwardPoolData::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.AwardPoolData.key)
}
inline std::string* AwardPoolData::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardPoolData::release_key() {
  // @@protoc_insertion_point(field_release:BYDLD.AwardPoolData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardPoolData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.AwardPoolData.key)
}

// int32 value = 2;
inline void AwardPoolData::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolData::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolData::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolData.value)
  return _internal_value();
}
inline void AwardPoolData::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void AwardPoolData::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolData.value)
}

// -------------------------------------------------------------------

// SCPropsAwardPool

// bool enable = 1;
inline void SCPropsAwardPool::clear_enable() {
  enable_ = false;
}
inline bool SCPropsAwardPool::_internal_enable() const {
  return enable_;
}
inline bool SCPropsAwardPool::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsAwardPool.enable)
  return _internal_enable();
}
inline void SCPropsAwardPool::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCPropsAwardPool::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropsAwardPool.enable)
}

// repeated .BYDLD.AwardPoolData objects = 2;
inline int SCPropsAwardPool::_internal_objects_size() const {
  return objects_.size();
}
inline int SCPropsAwardPool::objects_size() const {
  return _internal_objects_size();
}
inline void SCPropsAwardPool::clear_objects() {
  objects_.Clear();
}
inline ::BYDLD::AwardPoolData* SCPropsAwardPool::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCPropsAwardPool.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolData >*
SCPropsAwardPool::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCPropsAwardPool.objects)
  return &objects_;
}
inline const ::BYDLD::AwardPoolData& SCPropsAwardPool::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::BYDLD::AwardPoolData& SCPropsAwardPool::objects(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropsAwardPool.objects)
  return _internal_objects(index);
}
inline ::BYDLD::AwardPoolData* SCPropsAwardPool::_internal_add_objects() {
  return objects_.Add();
}
inline ::BYDLD::AwardPoolData* SCPropsAwardPool::add_objects() {
  // @@protoc_insertion_point(field_add:BYDLD.SCPropsAwardPool.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolData >&
SCPropsAwardPool::objects() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCPropsAwardPool.objects)
  return objects_;
}

// -------------------------------------------------------------------

// CSLoginGameWithToken

// int32 playerId = 1;
inline void CSLoginGameWithToken::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLoginGameWithToken.playerId)
  return _internal_playerid();
}
inline void CSLoginGameWithToken::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSLoginGameWithToken::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLoginGameWithToken.playerId)
}

// string Token = 2;
inline void CSLoginGameWithToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CSLoginGameWithToken::token() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLoginGameWithToken.Token)
  return _internal_token();
}
inline void CSLoginGameWithToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLoginGameWithToken.Token)
}
inline std::string* CSLoginGameWithToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSLoginGameWithToken.Token)
  return _internal_mutable_token();
}
inline const std::string& CSLoginGameWithToken::_internal_token() const {
  return token_.Get();
}
inline void CSLoginGameWithToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSLoginGameWithToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.CSLoginGameWithToken.Token)
}
inline void CSLoginGameWithToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.CSLoginGameWithToken.Token)
}
inline void CSLoginGameWithToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.CSLoginGameWithToken.Token)
}
inline std::string* CSLoginGameWithToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSLoginGameWithToken::release_token() {
  // @@protoc_insertion_point(field_release:BYDLD.CSLoginGameWithToken.Token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSLoginGameWithToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.CSLoginGameWithToken.Token)
}

// int32 OSType = 3;
inline void CSLoginGameWithToken::clear_ostype() {
  ostype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_ostype() const {
  return ostype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::ostype() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLoginGameWithToken.OSType)
  return _internal_ostype();
}
inline void CSLoginGameWithToken::_internal_set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ostype_ = value;
}
inline void CSLoginGameWithToken::set_ostype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ostype(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLoginGameWithToken.OSType)
}

// int32 table_id = 4;
inline void CSLoginGameWithToken::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::table_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLoginGameWithToken.table_id)
  return _internal_table_id();
}
inline void CSLoginGameWithToken::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void CSLoginGameWithToken::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLoginGameWithToken.table_id)
}

// int32 last_table_id = 5;
inline void CSLoginGameWithToken::clear_last_table_id() {
  last_table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_last_table_id() const {
  return last_table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::last_table_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLoginGameWithToken.last_table_id)
  return _internal_last_table_id();
}
inline void CSLoginGameWithToken::_internal_set_last_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_table_id_ = value;
}
inline void CSLoginGameWithToken::set_last_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_table_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLoginGameWithToken.last_table_id)
}

// -------------------------------------------------------------------

// SCLoginGameWithToken

// int32 scene_index = 1;
inline void SCLoginGameWithToken::clear_scene_index() {
  scene_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_scene_index() const {
  return scene_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::scene_index() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLoginGameWithToken.scene_index)
  return _internal_scene_index();
}
inline void SCLoginGameWithToken::_internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_index_ = value;
}
inline void SCLoginGameWithToken::set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_index(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLoginGameWithToken.scene_index)
}

// int32 table_id = 2;
inline void SCLoginGameWithToken::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::table_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLoginGameWithToken.table_id)
  return _internal_table_id();
}
inline void SCLoginGameWithToken::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void SCLoginGameWithToken::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLoginGameWithToken.table_id)
}

// -------------------------------------------------------------------

// CSUserReady

// int32 playerId = 1;
inline void CSUserReady::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserReady::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserReady::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserReady.playerId)
  return _internal_playerid();
}
inline void CSUserReady::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSUserReady::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserReady.playerId)
}

// -------------------------------------------------------------------

// EffectInfo

// int32 effect_id = 1;
inline void EffectInfo::clear_effect_id() {
  effect_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectInfo::_internal_effect_id() const {
  return effect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectInfo::effect_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.EffectInfo.effect_id)
  return _internal_effect_id();
}
inline void EffectInfo::_internal_set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effect_id_ = value;
}
inline void EffectInfo::set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.EffectInfo.effect_id)
}

// bool is_global = 2;
inline void EffectInfo::clear_is_global() {
  is_global_ = false;
}
inline bool EffectInfo::_internal_is_global() const {
  return is_global_;
}
inline bool EffectInfo::is_global() const {
  // @@protoc_insertion_point(field_get:BYDLD.EffectInfo.is_global)
  return _internal_is_global();
}
inline void EffectInfo::_internal_set_is_global(bool value) {
  
  is_global_ = value;
}
inline void EffectInfo::set_is_global(bool value) {
  _internal_set_is_global(value);
  // @@protoc_insertion_point(field_set:BYDLD.EffectInfo.is_global)
}

// -------------------------------------------------------------------

// SpecEffect

// int32 costMoney = 1;
inline void SpecEffect::clear_costmoney() {
  costmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_costmoney() const {
  return costmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::costmoney() const {
  // @@protoc_insertion_point(field_get:BYDLD.SpecEffect.costMoney)
  return _internal_costmoney();
}
inline void SpecEffect::_internal_set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costmoney_ = value;
}
inline void SpecEffect::set_costmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costmoney(value);
  // @@protoc_insertion_point(field_set:BYDLD.SpecEffect.costMoney)
}

// int32 earnMoney = 2;
inline void SpecEffect::clear_earnmoney() {
  earnmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::_internal_earnmoney() const {
  return earnmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecEffect::earnmoney() const {
  // @@protoc_insertion_point(field_get:BYDLD.SpecEffect.earnMoney)
  return _internal_earnmoney();
}
inline void SpecEffect::_internal_set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earnmoney_ = value;
}
inline void SpecEffect::set_earnmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earnmoney(value);
  // @@protoc_insertion_point(field_set:BYDLD.SpecEffect.earnMoney)
}

// -------------------------------------------------------------------

// StationBase

// int32 gun_ratio = 1;
inline void StationBase::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::gun_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.gun_ratio)
  return _internal_gun_ratio();
}
inline void StationBase::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void StationBase::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.gun_ratio)
}

// int32 gun_level = 2;
inline void StationBase::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.gun_level)
  return _internal_gun_level();
}
inline void StationBase::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void StationBase::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.gun_level)
}

// bool is_online = 3;
inline void StationBase::clear_is_online() {
  is_online_ = false;
}
inline bool StationBase::_internal_is_online() const {
  return is_online_;
}
inline bool StationBase::is_online() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.is_online)
  return _internal_is_online();
}
inline void StationBase::_internal_set_is_online(bool value) {
  
  is_online_ = value;
}
inline void StationBase::set_is_online(bool value) {
  _internal_set_is_online(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.is_online)
}

// int64 user_score = 4;
inline void StationBase::clear_user_score() {
  user_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StationBase::_internal_user_score() const {
  return user_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StationBase::user_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.user_score)
  return _internal_user_score();
}
inline void StationBase::_internal_set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_score_ = value;
}
inline void StationBase::set_user_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.user_score)
}

// int32 chair_idx = 5;
inline void StationBase::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.chair_idx)
  return _internal_chair_idx();
}
inline void StationBase::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void StationBase::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.chair_idx)
}

// string player_name = 6;
inline void StationBase::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& StationBase::player_name() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.player_name)
  return _internal_player_name();
}
inline void StationBase::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.player_name)
}
inline std::string* StationBase::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.StationBase.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& StationBase::_internal_player_name() const {
  return player_name_.Get();
}
inline void StationBase::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StationBase::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.StationBase.player_name)
}
inline void StationBase::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.StationBase.player_name)
}
inline void StationBase::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.StationBase.player_name)
}
inline std::string* StationBase::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StationBase::release_player_name() {
  // @@protoc_insertion_point(field_release:BYDLD.StationBase.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StationBase::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.StationBase.player_name)
}

// bool through_flag = 7;
inline void StationBase::clear_through_flag() {
  through_flag_ = false;
}
inline bool StationBase::_internal_through_flag() const {
  return through_flag_;
}
inline bool StationBase::through_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.through_flag)
  return _internal_through_flag();
}
inline void StationBase::_internal_set_through_flag(bool value) {
  
  through_flag_ = value;
}
inline void StationBase::set_through_flag(bool value) {
  _internal_set_through_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.through_flag)
}

// bool double_flag = 8;
inline void StationBase::clear_double_flag() {
  double_flag_ = false;
}
inline bool StationBase::_internal_double_flag() const {
  return double_flag_;
}
inline bool StationBase::double_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.double_flag)
  return _internal_double_flag();
}
inline void StationBase::_internal_set_double_flag(bool value) {
  
  double_flag_ = value;
}
inline void StationBase::set_double_flag(bool value) {
  _internal_set_double_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.double_flag)
}

// int32 player_id = 9;
inline void StationBase::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::player_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.player_id)
  return _internal_player_id();
}
inline void StationBase::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void StationBase::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.player_id)
}

// int32 vip = 10;
inline void StationBase::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.vip)
  return _internal_vip();
}
inline void StationBase::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void StationBase::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.vip)
}

// int32 ticket = 11;
inline void StationBase::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::ticket() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.ticket)
  return _internal_ticket();
}
inline void StationBase::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void StationBase::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.ticket)
}

// int32 effect_id = 12;
inline void StationBase::clear_effect_id() {
  effect_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_effect_id() const {
  return effect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::effect_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.effect_id)
  return _internal_effect_id();
}
inline void StationBase::_internal_set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effect_id_ = value;
}
inline void StationBase::set_effect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.effect_id)
}

// int32 title_id = 13;
inline void StationBase::clear_title_id() {
  title_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_title_id() const {
  return title_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::title_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.title_id)
  return _internal_title_id();
}
inline void StationBase::_internal_set_title_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  title_id_ = value;
}
inline void StationBase::set_title_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_title_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.title_id)
}

// .BYDLD.Decimal red_packet_ticket = 14;
inline bool StationBase::_internal_has_red_packet_ticket() const {
  return this != internal_default_instance() && red_packet_ticket_ != nullptr;
}
inline bool StationBase::has_red_packet_ticket() const {
  return _internal_has_red_packet_ticket();
}
inline void StationBase::clear_red_packet_ticket() {
  if (GetArena() == nullptr && red_packet_ticket_ != nullptr) {
    delete red_packet_ticket_;
  }
  red_packet_ticket_ = nullptr;
}
inline const ::BYDLD::Decimal& StationBase::_internal_red_packet_ticket() const {
  const ::BYDLD::Decimal* p = red_packet_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Decimal&>(
      ::BYDLD::_Decimal_default_instance_);
}
inline const ::BYDLD::Decimal& StationBase::red_packet_ticket() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.red_packet_ticket)
  return _internal_red_packet_ticket();
}
inline void StationBase::unsafe_arena_set_allocated_red_packet_ticket(
    ::BYDLD::Decimal* red_packet_ticket) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(red_packet_ticket_);
  }
  red_packet_ticket_ = red_packet_ticket;
  if (red_packet_ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.StationBase.red_packet_ticket)
}
inline ::BYDLD::Decimal* StationBase::release_red_packet_ticket() {
  
  ::BYDLD::Decimal* temp = red_packet_ticket_;
  red_packet_ticket_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Decimal* StationBase::unsafe_arena_release_red_packet_ticket() {
  // @@protoc_insertion_point(field_release:BYDLD.StationBase.red_packet_ticket)
  
  ::BYDLD::Decimal* temp = red_packet_ticket_;
  red_packet_ticket_ = nullptr;
  return temp;
}
inline ::BYDLD::Decimal* StationBase::_internal_mutable_red_packet_ticket() {
  
  if (red_packet_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Decimal>(GetArena());
    red_packet_ticket_ = p;
  }
  return red_packet_ticket_;
}
inline ::BYDLD::Decimal* StationBase::mutable_red_packet_ticket() {
  // @@protoc_insertion_point(field_mutable:BYDLD.StationBase.red_packet_ticket)
  return _internal_mutable_red_packet_ticket();
}
inline void StationBase::set_allocated_red_packet_ticket(::BYDLD::Decimal* red_packet_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete red_packet_ticket_;
  }
  if (red_packet_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(red_packet_ticket);
    if (message_arena != submessage_arena) {
      red_packet_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, red_packet_ticket, submessage_arena);
    }
    
  } else {
    
  }
  red_packet_ticket_ = red_packet_ticket;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.StationBase.red_packet_ticket)
}

// .BYDLD.EffectInfo effect_info = 15;
inline bool StationBase::_internal_has_effect_info() const {
  return this != internal_default_instance() && effect_info_ != nullptr;
}
inline bool StationBase::has_effect_info() const {
  return _internal_has_effect_info();
}
inline void StationBase::clear_effect_info() {
  if (GetArena() == nullptr && effect_info_ != nullptr) {
    delete effect_info_;
  }
  effect_info_ = nullptr;
}
inline const ::BYDLD::EffectInfo& StationBase::_internal_effect_info() const {
  const ::BYDLD::EffectInfo* p = effect_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::EffectInfo&>(
      ::BYDLD::_EffectInfo_default_instance_);
}
inline const ::BYDLD::EffectInfo& StationBase::effect_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.effect_info)
  return _internal_effect_info();
}
inline void StationBase::unsafe_arena_set_allocated_effect_info(
    ::BYDLD::EffectInfo* effect_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_info_);
  }
  effect_info_ = effect_info;
  if (effect_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.StationBase.effect_info)
}
inline ::BYDLD::EffectInfo* StationBase::release_effect_info() {
  
  ::BYDLD::EffectInfo* temp = effect_info_;
  effect_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::EffectInfo* StationBase::unsafe_arena_release_effect_info() {
  // @@protoc_insertion_point(field_release:BYDLD.StationBase.effect_info)
  
  ::BYDLD::EffectInfo* temp = effect_info_;
  effect_info_ = nullptr;
  return temp;
}
inline ::BYDLD::EffectInfo* StationBase::_internal_mutable_effect_info() {
  
  if (effect_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::EffectInfo>(GetArena());
    effect_info_ = p;
  }
  return effect_info_;
}
inline ::BYDLD::EffectInfo* StationBase::mutable_effect_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.StationBase.effect_info)
  return _internal_mutable_effect_info();
}
inline void StationBase::set_allocated_effect_info(::BYDLD::EffectInfo* effect_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_info_;
  }
  if (effect_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_info);
    if (message_arena != submessage_arena) {
      effect_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_info, submessage_arena);
    }
    
  } else {
    
  }
  effect_info_ = effect_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.StationBase.effect_info)
}

// int32 wings_props_id = 16;
inline void StationBase::clear_wings_props_id() {
  wings_props_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::_internal_wings_props_id() const {
  return wings_props_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StationBase::wings_props_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.StationBase.wings_props_id)
  return _internal_wings_props_id();
}
inline void StationBase::_internal_set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_props_id_ = value;
}
inline void StationBase::set_wings_props_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_props_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.StationBase.wings_props_id)
}

// -------------------------------------------------------------------

// SCUserReady

// repeated .BYDLD.StationBase station_base_list = 1;
inline int SCUserReady::_internal_station_base_list_size() const {
  return station_base_list_.size();
}
inline int SCUserReady::station_base_list_size() const {
  return _internal_station_base_list_size();
}
inline void SCUserReady::clear_station_base_list() {
  station_base_list_.Clear();
}
inline ::BYDLD::StationBase* SCUserReady::mutable_station_base_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserReady.station_base_list)
  return station_base_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >*
SCUserReady::mutable_station_base_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCUserReady.station_base_list)
  return &station_base_list_;
}
inline const ::BYDLD::StationBase& SCUserReady::_internal_station_base_list(int index) const {
  return station_base_list_.Get(index);
}
inline const ::BYDLD::StationBase& SCUserReady::station_base_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserReady.station_base_list)
  return _internal_station_base_list(index);
}
inline ::BYDLD::StationBase* SCUserReady::_internal_add_station_base_list() {
  return station_base_list_.Add();
}
inline ::BYDLD::StationBase* SCUserReady::add_station_base_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCUserReady.station_base_list)
  return _internal_add_station_base_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >&
SCUserReady::station_base_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCUserReady.station_base_list)
  return station_base_list_;
}

// int32 timestamp = 2;
inline void SCUserReady::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserReady::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserReady::timestamp() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserReady.timestamp)
  return _internal_timestamp();
}
inline void SCUserReady::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void SCUserReady::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserReady.timestamp)
}

// -------------------------------------------------------------------

// JadeAwardInfo

// int32 award_num = 1;
inline void JadeAwardInfo::clear_award_num() {
  award_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::_internal_award_num() const {
  return award_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::award_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.JadeAwardInfo.award_num)
  return _internal_award_num();
}
inline void JadeAwardInfo::_internal_set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_num_ = value;
}
inline void JadeAwardInfo::set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.JadeAwardInfo.award_num)
}

// int32 award_ratio = 2;
inline void JadeAwardInfo::clear_award_ratio() {
  award_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::_internal_award_ratio() const {
  return award_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::award_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.JadeAwardInfo.award_ratio)
  return _internal_award_ratio();
}
inline void JadeAwardInfo::_internal_set_award_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ratio_ = value;
}
inline void JadeAwardInfo::set_award_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.JadeAwardInfo.award_ratio)
}

// int32 award_level = 3;
inline void JadeAwardInfo::clear_award_level() {
  award_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::_internal_award_level() const {
  return award_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::award_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.JadeAwardInfo.award_level)
  return _internal_award_level();
}
inline void JadeAwardInfo::_internal_set_award_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_level_ = value;
}
inline void JadeAwardInfo::set_award_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.JadeAwardInfo.award_level)
}

// int32 award_type = 4;
inline void JadeAwardInfo::clear_award_type() {
  award_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::_internal_award_type() const {
  return award_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JadeAwardInfo::award_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.JadeAwardInfo.award_type)
  return _internal_award_type();
}
inline void JadeAwardInfo::_internal_set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_type_ = value;
}
inline void JadeAwardInfo::set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.JadeAwardInfo.award_type)
}

// -------------------------------------------------------------------

// CSJadeAwardInfo

// -------------------------------------------------------------------

// SCJadeAwardInfo

// repeated .BYDLD.JadeAwardInfo jade_award_info = 1;
inline int SCJadeAwardInfo::_internal_jade_award_info_size() const {
  return jade_award_info_.size();
}
inline int SCJadeAwardInfo::jade_award_info_size() const {
  return _internal_jade_award_info_size();
}
inline void SCJadeAwardInfo::clear_jade_award_info() {
  jade_award_info_.Clear();
}
inline ::BYDLD::JadeAwardInfo* SCJadeAwardInfo::mutable_jade_award_info(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCJadeAwardInfo.jade_award_info)
  return jade_award_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::JadeAwardInfo >*
SCJadeAwardInfo::mutable_jade_award_info() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCJadeAwardInfo.jade_award_info)
  return &jade_award_info_;
}
inline const ::BYDLD::JadeAwardInfo& SCJadeAwardInfo::_internal_jade_award_info(int index) const {
  return jade_award_info_.Get(index);
}
inline const ::BYDLD::JadeAwardInfo& SCJadeAwardInfo::jade_award_info(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCJadeAwardInfo.jade_award_info)
  return _internal_jade_award_info(index);
}
inline ::BYDLD::JadeAwardInfo* SCJadeAwardInfo::_internal_add_jade_award_info() {
  return jade_award_info_.Add();
}
inline ::BYDLD::JadeAwardInfo* SCJadeAwardInfo::add_jade_award_info() {
  // @@protoc_insertion_point(field_add:BYDLD.SCJadeAwardInfo.jade_award_info)
  return _internal_add_jade_award_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::JadeAwardInfo >&
SCJadeAwardInfo::jade_award_info() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCJadeAwardInfo.jade_award_info)
  return jade_award_info_;
}

// repeated int32 crit_list = 2;
inline int SCJadeAwardInfo::_internal_crit_list_size() const {
  return crit_list_.size();
}
inline int SCJadeAwardInfo::crit_list_size() const {
  return _internal_crit_list_size();
}
inline void SCJadeAwardInfo::clear_crit_list() {
  crit_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCJadeAwardInfo::_internal_crit_list(int index) const {
  return crit_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCJadeAwardInfo::crit_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCJadeAwardInfo.crit_list)
  return _internal_crit_list(index);
}
inline void SCJadeAwardInfo::set_crit_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  crit_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCJadeAwardInfo.crit_list)
}
inline void SCJadeAwardInfo::_internal_add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  crit_list_.Add(value);
}
inline void SCJadeAwardInfo::add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_crit_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCJadeAwardInfo.crit_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCJadeAwardInfo::_internal_crit_list() const {
  return crit_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCJadeAwardInfo::crit_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCJadeAwardInfo.crit_list)
  return _internal_crit_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCJadeAwardInfo::_internal_mutable_crit_list() {
  return &crit_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCJadeAwardInfo::mutable_crit_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCJadeAwardInfo.crit_list)
  return _internal_mutable_crit_list();
}

// -------------------------------------------------------------------

// CSNotifyLogout

// int32 chair_idx = 1;
inline void CSNotifyLogout::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSNotifyLogout::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSNotifyLogout::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSNotifyLogout.chair_idx)
  return _internal_chair_idx();
}
inline void CSNotifyLogout::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSNotifyLogout::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSNotifyLogout.chair_idx)
}

// -------------------------------------------------------------------

// SCNotifyLogout

// int32 chair_idx = 1;
inline void SCNotifyLogout::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyLogout::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyLogout::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNotifyLogout.chair_idx)
  return _internal_chair_idx();
}
inline void SCNotifyLogout::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCNotifyLogout::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNotifyLogout.chair_idx)
}

// -------------------------------------------------------------------

// CSSetProbability

// int32 gun_ratio = 1;
inline void CSSetProbability::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::gun_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetProbability.gun_ratio)
  return _internal_gun_ratio();
}
inline void CSSetProbability::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void CSSetProbability::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetProbability.gun_ratio)
}

// int32 gun_level = 2;
inline void CSSetProbability::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetProbability::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetProbability.gun_level)
  return _internal_gun_level();
}
inline void CSSetProbability::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void CSSetProbability::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetProbability.gun_level)
}

// bool is_use_auto = 3;
inline void CSSetProbability::clear_is_use_auto() {
  is_use_auto_ = false;
}
inline bool CSSetProbability::_internal_is_use_auto() const {
  return is_use_auto_;
}
inline bool CSSetProbability::is_use_auto() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetProbability.is_use_auto)
  return _internal_is_use_auto();
}
inline void CSSetProbability::_internal_set_is_use_auto(bool value) {
  
  is_use_auto_ = value;
}
inline void CSSetProbability::set_is_use_auto(bool value) {
  _internal_set_is_use_auto(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetProbability.is_use_auto)
}

// -------------------------------------------------------------------

// SCSetProbability

// int32 chair_idx = 1;
inline void SCSetProbability::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetProbability.chair_idx)
  return _internal_chair_idx();
}
inline void SCSetProbability::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSetProbability::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetProbability.chair_idx)
}

// int32 gun_ratio = 2;
inline void SCSetProbability::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::gun_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetProbability.gun_ratio)
  return _internal_gun_ratio();
}
inline void SCSetProbability::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void SCSetProbability::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetProbability.gun_ratio)
}

// int32 gun_level = 3;
inline void SCSetProbability::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetProbability::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetProbability.gun_level)
  return _internal_gun_level();
}
inline void SCSetProbability::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCSetProbability::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetProbability.gun_level)
}

// bool is_unlock = 4;
inline void SCSetProbability::clear_is_unlock() {
  is_unlock_ = false;
}
inline bool SCSetProbability::_internal_is_unlock() const {
  return is_unlock_;
}
inline bool SCSetProbability::is_unlock() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetProbability.is_unlock)
  return _internal_is_unlock();
}
inline void SCSetProbability::_internal_set_is_unlock(bool value) {
  
  is_unlock_ = value;
}
inline void SCSetProbability::set_is_unlock(bool value) {
  _internal_set_is_unlock(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetProbability.is_unlock)
}

// -------------------------------------------------------------------

// UserShoot

// int32 angle = 1;
inline void UserShoot::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::angle() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.angle)
  return _internal_angle();
}
inline void UserShoot::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void UserShoot::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.angle)
}

// int32 bullet_id = 2;
inline void UserShoot::clear_bullet_id() {
  bullet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::_internal_bullet_id() const {
  return bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::bullet_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.bullet_id)
  return _internal_bullet_id();
}
inline void UserShoot::_internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_id_ = value;
}
inline void UserShoot::set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.bullet_id)
}

// int32 ratio = 3;
inline void UserShoot::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.ratio)
  return _internal_ratio();
}
inline void UserShoot::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void UserShoot::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.ratio)
}

// bool is_double = 4;
inline void UserShoot::clear_is_double() {
  is_double_ = false;
}
inline bool UserShoot::_internal_is_double() const {
  return is_double_;
}
inline bool UserShoot::is_double() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.is_double)
  return _internal_is_double();
}
inline void UserShoot::_internal_set_is_double(bool value) {
  
  is_double_ = value;
}
inline void UserShoot::set_is_double(bool value) {
  _internal_set_is_double(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.is_double)
}

// bool is_through = 5;
inline void UserShoot::clear_is_through() {
  is_through_ = false;
}
inline bool UserShoot::_internal_is_through() const {
  return is_through_;
}
inline bool UserShoot::is_through() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.is_through)
  return _internal_is_through();
}
inline void UserShoot::_internal_set_is_through(bool value) {
  
  is_through_ = value;
}
inline void UserShoot::set_is_through(bool value) {
  _internal_set_is_through(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.is_through)
}

// bool is_free_time = 6;
inline void UserShoot::clear_is_free_time() {
  is_free_time_ = false;
}
inline bool UserShoot::_internal_is_free_time() const {
  return is_free_time_;
}
inline bool UserShoot::is_free_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.is_free_time)
  return _internal_is_free_time();
}
inline void UserShoot::_internal_set_is_free_time(bool value) {
  
  is_free_time_ = value;
}
inline void UserShoot::set_is_free_time(bool value) {
  _internal_set_is_free_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.is_free_time)
}

// int32 bullet_type = 7;
inline void UserShoot::clear_bullet_type() {
  bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::_internal_bullet_type() const {
  return bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShoot::bullet_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.bullet_type)
  return _internal_bullet_type();
}
inline void UserShoot::_internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_type_ = value;
}
inline void UserShoot::set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.bullet_type)
}

// float x = 8;
inline void UserShoot::clear_x() {
  x_ = 0;
}
inline float UserShoot::_internal_x() const {
  return x_;
}
inline float UserShoot::x() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.x)
  return _internal_x();
}
inline void UserShoot::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UserShoot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.x)
}

// float y = 9;
inline void UserShoot::clear_y() {
  y_ = 0;
}
inline float UserShoot::_internal_y() const {
  return y_;
}
inline float UserShoot::y() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShoot.y)
  return _internal_y();
}
inline void UserShoot::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UserShoot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShoot.y)
}

// -------------------------------------------------------------------

// CSUserShootMulti

// repeated .BYDLD.UserShoot shoot_bullet = 1;
inline int CSUserShootMulti::_internal_shoot_bullet_size() const {
  return shoot_bullet_.size();
}
inline int CSUserShootMulti::shoot_bullet_size() const {
  return _internal_shoot_bullet_size();
}
inline void CSUserShootMulti::clear_shoot_bullet() {
  shoot_bullet_.Clear();
}
inline ::BYDLD::UserShoot* CSUserShootMulti::mutable_shoot_bullet(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSUserShootMulti.shoot_bullet)
  return shoot_bullet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShoot >*
CSUserShootMulti::mutable_shoot_bullet() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CSUserShootMulti.shoot_bullet)
  return &shoot_bullet_;
}
inline const ::BYDLD::UserShoot& CSUserShootMulti::_internal_shoot_bullet(int index) const {
  return shoot_bullet_.Get(index);
}
inline const ::BYDLD::UserShoot& CSUserShootMulti::shoot_bullet(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserShootMulti.shoot_bullet)
  return _internal_shoot_bullet(index);
}
inline ::BYDLD::UserShoot* CSUserShootMulti::_internal_add_shoot_bullet() {
  return shoot_bullet_.Add();
}
inline ::BYDLD::UserShoot* CSUserShootMulti::add_shoot_bullet() {
  // @@protoc_insertion_point(field_add:BYDLD.CSUserShootMulti.shoot_bullet)
  return _internal_add_shoot_bullet();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShoot >&
CSUserShootMulti::shoot_bullet() const {
  // @@protoc_insertion_point(field_list:BYDLD.CSUserShootMulti.shoot_bullet)
  return shoot_bullet_;
}

// -------------------------------------------------------------------

// UserShootRsp

// int32 angle = 1;
inline void UserShootRsp::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShootRsp::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShootRsp::angle() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShootRsp.angle)
  return _internal_angle();
}
inline void UserShootRsp::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void UserShootRsp::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShootRsp.angle)
}

// int32 bullet_type = 2;
inline void UserShootRsp::clear_bullet_type() {
  bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShootRsp::_internal_bullet_type() const {
  return bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserShootRsp::bullet_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShootRsp.bullet_type)
  return _internal_bullet_type();
}
inline void UserShootRsp::_internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_type_ = value;
}
inline void UserShootRsp::set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShootRsp.bullet_type)
}

// float x = 3;
inline void UserShootRsp::clear_x() {
  x_ = 0;
}
inline float UserShootRsp::_internal_x() const {
  return x_;
}
inline float UserShootRsp::x() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShootRsp.x)
  return _internal_x();
}
inline void UserShootRsp::_internal_set_x(float value) {
  
  x_ = value;
}
inline void UserShootRsp::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShootRsp.x)
}

// float y = 4;
inline void UserShootRsp::clear_y() {
  y_ = 0;
}
inline float UserShootRsp::_internal_y() const {
  return y_;
}
inline float UserShootRsp::y() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserShootRsp.y)
  return _internal_y();
}
inline void UserShootRsp::_internal_set_y(float value) {
  
  y_ = value;
}
inline void UserShootRsp::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserShootRsp.y)
}

// -------------------------------------------------------------------

// SCUserShootMulti

// int32 chair_idx = 1;
inline void SCUserShootMulti::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShootMulti::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserShootMulti::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserShootMulti.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserShootMulti::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserShootMulti::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserShootMulti.chair_idx)
}

// repeated .BYDLD.UserShootRsp bullet_info = 2;
inline int SCUserShootMulti::_internal_bullet_info_size() const {
  return bullet_info_.size();
}
inline int SCUserShootMulti::bullet_info_size() const {
  return _internal_bullet_info_size();
}
inline void SCUserShootMulti::clear_bullet_info() {
  bullet_info_.Clear();
}
inline ::BYDLD::UserShootRsp* SCUserShootMulti::mutable_bullet_info(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserShootMulti.bullet_info)
  return bullet_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShootRsp >*
SCUserShootMulti::mutable_bullet_info() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCUserShootMulti.bullet_info)
  return &bullet_info_;
}
inline const ::BYDLD::UserShootRsp& SCUserShootMulti::_internal_bullet_info(int index) const {
  return bullet_info_.Get(index);
}
inline const ::BYDLD::UserShootRsp& SCUserShootMulti::bullet_info(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserShootMulti.bullet_info)
  return _internal_bullet_info(index);
}
inline ::BYDLD::UserShootRsp* SCUserShootMulti::_internal_add_bullet_info() {
  return bullet_info_.Add();
}
inline ::BYDLD::UserShootRsp* SCUserShootMulti::add_bullet_info() {
  // @@protoc_insertion_point(field_add:BYDLD.SCUserShootMulti.bullet_info)
  return _internal_add_bullet_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserShootRsp >&
SCUserShootMulti::bullet_info() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCUserShootMulti.bullet_info)
  return bullet_info_;
}

// int64 score = 3;
inline void SCUserShootMulti::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUserShootMulti::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCUserShootMulti::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserShootMulti.score)
  return _internal_score();
}
inline void SCUserShootMulti::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SCUserShootMulti::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserShootMulti.score)
}

// -------------------------------------------------------------------

// HitFish

// int32 fish_uid = 1;
inline void HitFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.fish_uid)
  return _internal_fish_uid();
}
inline void HitFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void HitFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.fish_uid)
}

// int32 bullet_id = 2;
inline void HitFish::clear_bullet_id() {
  bullet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_bullet_id() const {
  return bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::bullet_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.bullet_id)
  return _internal_bullet_id();
}
inline void HitFish::_internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_id_ = value;
}
inline void HitFish::set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.bullet_id)
}

// int32 through_idx = 3;
inline void HitFish::clear_through_idx() {
  through_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_through_idx() const {
  return through_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::through_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.through_idx)
  return _internal_through_idx();
}
inline void HitFish::_internal_set_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  through_idx_ = value;
}
inline void HitFish::set_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_through_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.through_idx)
}

// int32 fish_id = 4;
inline void HitFish::clear_fish_id() {
  fish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_fish_id() const {
  return fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::fish_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.fish_id)
  return _internal_fish_id();
}
inline void HitFish::_internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_id_ = value;
}
inline void HitFish::set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.fish_id)
}

// repeated int32 effect_fish_uid = 5;
inline int HitFish::_internal_effect_fish_uid_size() const {
  return effect_fish_uid_.size();
}
inline int HitFish::effect_fish_uid_size() const {
  return _internal_effect_fish_uid_size();
}
inline void HitFish::clear_effect_fish_uid() {
  effect_fish_uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_effect_fish_uid(int index) const {
  return effect_fish_uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::effect_fish_uid(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.effect_fish_uid)
  return _internal_effect_fish_uid(index);
}
inline void HitFish::set_effect_fish_uid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  effect_fish_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.effect_fish_uid)
}
inline void HitFish::_internal_add_effect_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  effect_fish_uid_.Add(value);
}
inline void HitFish::add_effect_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_effect_fish_uid(value);
  // @@protoc_insertion_point(field_add:BYDLD.HitFish.effect_fish_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HitFish::_internal_effect_fish_uid() const {
  return effect_fish_uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HitFish::effect_fish_uid() const {
  // @@protoc_insertion_point(field_list:BYDLD.HitFish.effect_fish_uid)
  return _internal_effect_fish_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HitFish::_internal_mutable_effect_fish_uid() {
  return &effect_fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HitFish::mutable_effect_fish_uid() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.HitFish.effect_fish_uid)
  return _internal_mutable_effect_fish_uid();
}

// int32 round = 6;
inline void HitFish::clear_round() {
  round_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::round() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.round)
  return _internal_round();
}
inline void HitFish::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  round_ = value;
}
inline void HitFish::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.round)
}

// int32 ratio = 7;
inline void HitFish::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.ratio)
  return _internal_ratio();
}
inline void HitFish::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void HitFish::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.ratio)
}

// int32 bullet_type = 8;
inline void HitFish::clear_bullet_type() {
  bullet_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::_internal_bullet_type() const {
  return bullet_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HitFish::bullet_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.HitFish.bullet_type)
  return _internal_bullet_type();
}
inline void HitFish::_internal_set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_type_ = value;
}
inline void HitFish::set_bullet_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.HitFish.bullet_type)
}

// -------------------------------------------------------------------

// CSHitMultiFish

// repeated .BYDLD.HitFish hit_info = 1;
inline int CSHitMultiFish::_internal_hit_info_size() const {
  return hit_info_.size();
}
inline int CSHitMultiFish::hit_info_size() const {
  return _internal_hit_info_size();
}
inline void CSHitMultiFish::clear_hit_info() {
  hit_info_.Clear();
}
inline ::BYDLD::HitFish* CSHitMultiFish::mutable_hit_info(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSHitMultiFish.hit_info)
  return hit_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HitFish >*
CSHitMultiFish::mutable_hit_info() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CSHitMultiFish.hit_info)
  return &hit_info_;
}
inline const ::BYDLD::HitFish& CSHitMultiFish::_internal_hit_info(int index) const {
  return hit_info_.Get(index);
}
inline const ::BYDLD::HitFish& CSHitMultiFish::hit_info(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHitMultiFish.hit_info)
  return _internal_hit_info(index);
}
inline ::BYDLD::HitFish* CSHitMultiFish::_internal_add_hit_info() {
  return hit_info_.Add();
}
inline ::BYDLD::HitFish* CSHitMultiFish::add_hit_info() {
  // @@protoc_insertion_point(field_add:BYDLD.CSHitMultiFish.hit_info)
  return _internal_add_hit_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HitFish >&
CSHitMultiFish::hit_info() const {
  // @@protoc_insertion_point(field_list:BYDLD.CSHitMultiFish.hit_info)
  return hit_info_;
}

// -------------------------------------------------------------------

// EffectFish

// int32 fish_uid = 1;
inline void EffectFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.EffectFish.fish_uid)
  return _internal_fish_uid();
}
inline void EffectFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void EffectFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.EffectFish.fish_uid)
}

// int32 score = 2;
inline void EffectFish::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectFish::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectFish::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.EffectFish.score)
  return _internal_score();
}
inline void EffectFish::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void EffectFish::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.EffectFish.score)
}

// -------------------------------------------------------------------

// DragonBallWheelInfo

// repeated int32 ratio = 1;
inline int DragonBallWheelInfo::_internal_ratio_size() const {
  return ratio_.size();
}
inline int DragonBallWheelInfo::ratio_size() const {
  return _internal_ratio_size();
}
inline void DragonBallWheelInfo::clear_ratio() {
  ratio_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallWheelInfo::_internal_ratio(int index) const {
  return ratio_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallWheelInfo::ratio(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallWheelInfo.ratio)
  return _internal_ratio(index);
}
inline void DragonBallWheelInfo::set_ratio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallWheelInfo.ratio)
}
inline void DragonBallWheelInfo::_internal_add_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ratio_.Add(value);
}
inline void DragonBallWheelInfo::add_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ratio(value);
  // @@protoc_insertion_point(field_add:BYDLD.DragonBallWheelInfo.ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DragonBallWheelInfo::_internal_ratio() const {
  return ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DragonBallWheelInfo::ratio() const {
  // @@protoc_insertion_point(field_list:BYDLD.DragonBallWheelInfo.ratio)
  return _internal_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DragonBallWheelInfo::_internal_mutable_ratio() {
  return &ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DragonBallWheelInfo::mutable_ratio() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.DragonBallWheelInfo.ratio)
  return _internal_mutable_ratio();
}

// repeated int32 next = 2;
inline int DragonBallWheelInfo::_internal_next_size() const {
  return next_.size();
}
inline int DragonBallWheelInfo::next_size() const {
  return _internal_next_size();
}
inline void DragonBallWheelInfo::clear_next() {
  next_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallWheelInfo::_internal_next(int index) const {
  return next_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallWheelInfo::next(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallWheelInfo.next)
  return _internal_next(index);
}
inline void DragonBallWheelInfo::set_next(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  next_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallWheelInfo.next)
}
inline void DragonBallWheelInfo::_internal_add_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  next_.Add(value);
}
inline void DragonBallWheelInfo::add_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_next(value);
  // @@protoc_insertion_point(field_add:BYDLD.DragonBallWheelInfo.next)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DragonBallWheelInfo::_internal_next() const {
  return next_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DragonBallWheelInfo::next() const {
  // @@protoc_insertion_point(field_list:BYDLD.DragonBallWheelInfo.next)
  return _internal_next();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DragonBallWheelInfo::_internal_mutable_next() {
  return &next_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DragonBallWheelInfo::mutable_next() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.DragonBallWheelInfo.next)
  return _internal_mutable_next();
}

// -------------------------------------------------------------------

// DragonBallInfo

// int32 base_ratio = 1;
inline void DragonBallInfo::clear_base_ratio() {
  base_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallInfo::_internal_base_ratio() const {
  return base_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallInfo::base_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallInfo.base_ratio)
  return _internal_base_ratio();
}
inline void DragonBallInfo::_internal_set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ratio_ = value;
}
inline void DragonBallInfo::set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallInfo.base_ratio)
}

// int32 wheel = 2;
inline void DragonBallInfo::clear_wheel() {
  wheel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallInfo::_internal_wheel() const {
  return wheel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallInfo::wheel() const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallInfo.wheel)
  return _internal_wheel();
}
inline void DragonBallInfo::_internal_set_wheel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wheel_ = value;
}
inline void DragonBallInfo::set_wheel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wheel(value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallInfo.wheel)
}

// repeated int32 awardRatio = 3;
inline int DragonBallInfo::_internal_awardratio_size() const {
  return awardratio_.size();
}
inline int DragonBallInfo::awardratio_size() const {
  return _internal_awardratio_size();
}
inline void DragonBallInfo::clear_awardratio() {
  awardratio_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallInfo::_internal_awardratio(int index) const {
  return awardratio_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallInfo::awardratio(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallInfo.awardRatio)
  return _internal_awardratio(index);
}
inline void DragonBallInfo::set_awardratio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  awardratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallInfo.awardRatio)
}
inline void DragonBallInfo::_internal_add_awardratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  awardratio_.Add(value);
}
inline void DragonBallInfo::add_awardratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_awardratio(value);
  // @@protoc_insertion_point(field_add:BYDLD.DragonBallInfo.awardRatio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DragonBallInfo::_internal_awardratio() const {
  return awardratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DragonBallInfo::awardratio() const {
  // @@protoc_insertion_point(field_list:BYDLD.DragonBallInfo.awardRatio)
  return _internal_awardratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DragonBallInfo::_internal_mutable_awardratio() {
  return &awardratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DragonBallInfo::mutable_awardratio() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.DragonBallInfo.awardRatio)
  return _internal_mutable_awardratio();
}

// repeated .BYDLD.DragonBallWheelInfo wheelInfo = 4;
inline int DragonBallInfo::_internal_wheelinfo_size() const {
  return wheelinfo_.size();
}
inline int DragonBallInfo::wheelinfo_size() const {
  return _internal_wheelinfo_size();
}
inline void DragonBallInfo::clear_wheelinfo() {
  wheelinfo_.Clear();
}
inline ::BYDLD::DragonBallWheelInfo* DragonBallInfo::mutable_wheelinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.DragonBallInfo.wheelInfo)
  return wheelinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallWheelInfo >*
DragonBallInfo::mutable_wheelinfo() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.DragonBallInfo.wheelInfo)
  return &wheelinfo_;
}
inline const ::BYDLD::DragonBallWheelInfo& DragonBallInfo::_internal_wheelinfo(int index) const {
  return wheelinfo_.Get(index);
}
inline const ::BYDLD::DragonBallWheelInfo& DragonBallInfo::wheelinfo(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallInfo.wheelInfo)
  return _internal_wheelinfo(index);
}
inline ::BYDLD::DragonBallWheelInfo* DragonBallInfo::_internal_add_wheelinfo() {
  return wheelinfo_.Add();
}
inline ::BYDLD::DragonBallWheelInfo* DragonBallInfo::add_wheelinfo() {
  // @@protoc_insertion_point(field_add:BYDLD.DragonBallInfo.wheelInfo)
  return _internal_add_wheelinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallWheelInfo >&
DragonBallInfo::wheelinfo() const {
  // @@protoc_insertion_point(field_list:BYDLD.DragonBallInfo.wheelInfo)
  return wheelinfo_;
}

// -------------------------------------------------------------------

// OctopusKingItem

// int32 selectedMultiple = 1;
inline void OctopusKingItem::clear_selectedmultiple() {
  selectedmultiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OctopusKingItem::_internal_selectedmultiple() const {
  return selectedmultiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OctopusKingItem::selectedmultiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.OctopusKingItem.selectedMultiple)
  return _internal_selectedmultiple();
}
inline void OctopusKingItem::_internal_set_selectedmultiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selectedmultiple_ = value;
}
inline void OctopusKingItem::set_selectedmultiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selectedmultiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.OctopusKingItem.selectedMultiple)
}

// repeated int32 selectList = 2;
inline int OctopusKingItem::_internal_selectlist_size() const {
  return selectlist_.size();
}
inline int OctopusKingItem::selectlist_size() const {
  return _internal_selectlist_size();
}
inline void OctopusKingItem::clear_selectlist() {
  selectlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OctopusKingItem::_internal_selectlist(int index) const {
  return selectlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OctopusKingItem::selectlist(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.OctopusKingItem.selectList)
  return _internal_selectlist(index);
}
inline void OctopusKingItem::set_selectlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  selectlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.OctopusKingItem.selectList)
}
inline void OctopusKingItem::_internal_add_selectlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  selectlist_.Add(value);
}
inline void OctopusKingItem::add_selectlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_selectlist(value);
  // @@protoc_insertion_point(field_add:BYDLD.OctopusKingItem.selectList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OctopusKingItem::_internal_selectlist() const {
  return selectlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OctopusKingItem::selectlist() const {
  // @@protoc_insertion_point(field_list:BYDLD.OctopusKingItem.selectList)
  return _internal_selectlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OctopusKingItem::_internal_mutable_selectlist() {
  return &selectlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OctopusKingItem::mutable_selectlist() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.OctopusKingItem.selectList)
  return _internal_mutable_selectlist();
}

// -------------------------------------------------------------------

// OctopusKingInfo

// repeated .BYDLD.OctopusKingItem multiples = 1;
inline int OctopusKingInfo::_internal_multiples_size() const {
  return multiples_.size();
}
inline int OctopusKingInfo::multiples_size() const {
  return _internal_multiples_size();
}
inline void OctopusKingInfo::clear_multiples() {
  multiples_.Clear();
}
inline ::BYDLD::OctopusKingItem* OctopusKingInfo::mutable_multiples(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.OctopusKingInfo.multiples)
  return multiples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OctopusKingItem >*
OctopusKingInfo::mutable_multiples() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.OctopusKingInfo.multiples)
  return &multiples_;
}
inline const ::BYDLD::OctopusKingItem& OctopusKingInfo::_internal_multiples(int index) const {
  return multiples_.Get(index);
}
inline const ::BYDLD::OctopusKingItem& OctopusKingInfo::multiples(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.OctopusKingInfo.multiples)
  return _internal_multiples(index);
}
inline ::BYDLD::OctopusKingItem* OctopusKingInfo::_internal_add_multiples() {
  return multiples_.Add();
}
inline ::BYDLD::OctopusKingItem* OctopusKingInfo::add_multiples() {
  // @@protoc_insertion_point(field_add:BYDLD.OctopusKingInfo.multiples)
  return _internal_add_multiples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OctopusKingItem >&
OctopusKingInfo::multiples() const {
  // @@protoc_insertion_point(field_list:BYDLD.OctopusKingInfo.multiples)
  return multiples_;
}

// -------------------------------------------------------------------

// MagicCardInfo

// int32 cardId = 1;
inline void MagicCardInfo::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicCardInfo::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicCardInfo::cardid() const {
  // @@protoc_insertion_point(field_get:BYDLD.MagicCardInfo.cardId)
  return _internal_cardid();
}
inline void MagicCardInfo::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
}
inline void MagicCardInfo::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:BYDLD.MagicCardInfo.cardId)
}

// int32 value = 2;
inline void MagicCardInfo::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicCardInfo::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicCardInfo::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.MagicCardInfo.value)
  return _internal_value();
}
inline void MagicCardInfo::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void MagicCardInfo::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.MagicCardInfo.value)
}

// int32 label = 3;
inline void MagicCardInfo::clear_label() {
  label_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicCardInfo::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicCardInfo::label() const {
  // @@protoc_insertion_point(field_get:BYDLD.MagicCardInfo.label)
  return _internal_label();
}
inline void MagicCardInfo::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  label_ = value;
}
inline void MagicCardInfo::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:BYDLD.MagicCardInfo.label)
}

// -------------------------------------------------------------------

// MagicInfo

// int32 ratioCard = 1;
inline void MagicInfo::clear_ratiocard() {
  ratiocard_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicInfo::_internal_ratiocard() const {
  return ratiocard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MagicInfo::ratiocard() const {
  // @@protoc_insertion_point(field_get:BYDLD.MagicInfo.ratioCard)
  return _internal_ratiocard();
}
inline void MagicInfo::_internal_set_ratiocard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratiocard_ = value;
}
inline void MagicInfo::set_ratiocard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratiocard(value);
  // @@protoc_insertion_point(field_set:BYDLD.MagicInfo.ratioCard)
}

// repeated .BYDLD.MagicCardInfo magicCardList = 2;
inline int MagicInfo::_internal_magiccardlist_size() const {
  return magiccardlist_.size();
}
inline int MagicInfo::magiccardlist_size() const {
  return _internal_magiccardlist_size();
}
inline void MagicInfo::clear_magiccardlist() {
  magiccardlist_.Clear();
}
inline ::BYDLD::MagicCardInfo* MagicInfo::mutable_magiccardlist(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.MagicInfo.magicCardList)
  return magiccardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >*
MagicInfo::mutable_magiccardlist() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.MagicInfo.magicCardList)
  return &magiccardlist_;
}
inline const ::BYDLD::MagicCardInfo& MagicInfo::_internal_magiccardlist(int index) const {
  return magiccardlist_.Get(index);
}
inline const ::BYDLD::MagicCardInfo& MagicInfo::magiccardlist(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.MagicInfo.magicCardList)
  return _internal_magiccardlist(index);
}
inline ::BYDLD::MagicCardInfo* MagicInfo::_internal_add_magiccardlist() {
  return magiccardlist_.Add();
}
inline ::BYDLD::MagicCardInfo* MagicInfo::add_magiccardlist() {
  // @@protoc_insertion_point(field_add:BYDLD.MagicInfo.magicCardList)
  return _internal_add_magiccardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >&
MagicInfo::magiccardlist() const {
  // @@protoc_insertion_point(field_list:BYDLD.MagicInfo.magicCardList)
  return magiccardlist_;
}

// -------------------------------------------------------------------

// roulette_result

// int32 type = 1;
inline void roulette_result::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.roulette_result.type)
  return _internal_type();
}
inline void roulette_result::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void roulette_result::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.roulette_result.type)
}

// int32 location = 2;
inline void roulette_result::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::location() const {
  // @@protoc_insertion_point(field_get:BYDLD.roulette_result.location)
  return _internal_location();
}
inline void roulette_result::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void roulette_result::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:BYDLD.roulette_result.location)
}

// int32 multiple = 3;
inline void roulette_result::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.roulette_result.multiple)
  return _internal_multiple();
}
inline void roulette_result::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void roulette_result::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.roulette_result.multiple)
}

// int32 crit = 4;
inline void roulette_result::clear_crit() {
  crit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::_internal_crit() const {
  return crit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 roulette_result::crit() const {
  // @@protoc_insertion_point(field_get:BYDLD.roulette_result.crit)
  return _internal_crit();
}
inline void roulette_result::_internal_set_crit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crit_ = value;
}
inline void roulette_result::set_crit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crit(value);
  // @@protoc_insertion_point(field_set:BYDLD.roulette_result.crit)
}

// -------------------------------------------------------------------

// zeus_result

// int32 type = 1;
inline void zeus_result::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 zeus_result::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 zeus_result::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.zeus_result.type)
  return _internal_type();
}
inline void zeus_result::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void zeus_result::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.zeus_result.type)
}

// repeated int32 layout = 2;
inline int zeus_result::_internal_layout_size() const {
  return layout_.size();
}
inline int zeus_result::layout_size() const {
  return _internal_layout_size();
}
inline void zeus_result::clear_layout() {
  layout_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 zeus_result::_internal_layout(int index) const {
  return layout_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 zeus_result::layout(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.zeus_result.layout)
  return _internal_layout(index);
}
inline void zeus_result::set_layout(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  layout_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.zeus_result.layout)
}
inline void zeus_result::_internal_add_layout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  layout_.Add(value);
}
inline void zeus_result::add_layout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_layout(value);
  // @@protoc_insertion_point(field_add:BYDLD.zeus_result.layout)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
zeus_result::_internal_layout() const {
  return layout_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
zeus_result::layout() const {
  // @@protoc_insertion_point(field_list:BYDLD.zeus_result.layout)
  return _internal_layout();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
zeus_result::_internal_mutable_layout() {
  return &layout_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
zeus_result::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.zeus_result.layout)
  return _internal_mutable_layout();
}

// repeated .BYDLD.roulette_result result = 3;
inline int zeus_result::_internal_result_size() const {
  return result_.size();
}
inline int zeus_result::result_size() const {
  return _internal_result_size();
}
inline void zeus_result::clear_result() {
  result_.Clear();
}
inline ::BYDLD::roulette_result* zeus_result::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.zeus_result.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::roulette_result >*
zeus_result::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.zeus_result.result)
  return &result_;
}
inline const ::BYDLD::roulette_result& zeus_result::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::BYDLD::roulette_result& zeus_result::result(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.zeus_result.result)
  return _internal_result(index);
}
inline ::BYDLD::roulette_result* zeus_result::_internal_add_result() {
  return result_.Add();
}
inline ::BYDLD::roulette_result* zeus_result::add_result() {
  // @@protoc_insertion_point(field_add:BYDLD.zeus_result.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::roulette_result >&
zeus_result::result() const {
  // @@protoc_insertion_point(field_list:BYDLD.zeus_result.result)
  return result_;
}

// int32 pool_id = 4;
inline void zeus_result::clear_pool_id() {
  pool_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 zeus_result::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 zeus_result::pool_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.zeus_result.pool_id)
  return _internal_pool_id();
}
inline void zeus_result::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pool_id_ = value;
}
inline void zeus_result::set_pool_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.zeus_result.pool_id)
}

// -------------------------------------------------------------------

// Zeus

// repeated .BYDLD.zeus_result result = 1;
inline int Zeus::_internal_result_size() const {
  return result_.size();
}
inline int Zeus::result_size() const {
  return _internal_result_size();
}
inline void Zeus::clear_result() {
  result_.Clear();
}
inline ::BYDLD::zeus_result* Zeus::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.Zeus.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::zeus_result >*
Zeus::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.Zeus.result)
  return &result_;
}
inline const ::BYDLD::zeus_result& Zeus::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::BYDLD::zeus_result& Zeus::result(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.Zeus.result)
  return _internal_result(index);
}
inline ::BYDLD::zeus_result* Zeus::_internal_add_result() {
  return result_.Add();
}
inline ::BYDLD::zeus_result* Zeus::add_result() {
  // @@protoc_insertion_point(field_add:BYDLD.Zeus.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::zeus_result >&
Zeus::result() const {
  // @@protoc_insertion_point(field_list:BYDLD.Zeus.result)
  return result_;
}

// int32 total_multiple = 2;
inline void Zeus::clear_total_multiple() {
  total_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zeus::_internal_total_multiple() const {
  return total_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zeus::total_multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.Zeus.total_multiple)
  return _internal_total_multiple();
}
inline void Zeus::_internal_set_total_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_multiple_ = value;
}
inline void Zeus::set_total_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.Zeus.total_multiple)
}

// -------------------------------------------------------------------

// GemConfig

// int32 id = 1;
inline void GemConfig::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GemConfig::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GemConfig::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.GemConfig.id)
  return _internal_id();
}
inline void GemConfig::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GemConfig::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.GemConfig.id)
}

// int32 multiple = 2;
inline void GemConfig::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GemConfig::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GemConfig::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.GemConfig.multiple)
  return _internal_multiple();
}
inline void GemConfig::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void GemConfig::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.GemConfig.multiple)
}

// -------------------------------------------------------------------

// SCGemConfigList

// repeated .BYDLD.GemConfig gem_config_list = 1;
inline int SCGemConfigList::_internal_gem_config_list_size() const {
  return gem_config_list_.size();
}
inline int SCGemConfigList::gem_config_list_size() const {
  return _internal_gem_config_list_size();
}
inline void SCGemConfigList::clear_gem_config_list() {
  gem_config_list_.Clear();
}
inline ::BYDLD::GemConfig* SCGemConfigList::mutable_gem_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCGemConfigList.gem_config_list)
  return gem_config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GemConfig >*
SCGemConfigList::mutable_gem_config_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCGemConfigList.gem_config_list)
  return &gem_config_list_;
}
inline const ::BYDLD::GemConfig& SCGemConfigList::_internal_gem_config_list(int index) const {
  return gem_config_list_.Get(index);
}
inline const ::BYDLD::GemConfig& SCGemConfigList::gem_config_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCGemConfigList.gem_config_list)
  return _internal_gem_config_list(index);
}
inline ::BYDLD::GemConfig* SCGemConfigList::_internal_add_gem_config_list() {
  return gem_config_list_.Add();
}
inline ::BYDLD::GemConfig* SCGemConfigList::add_gem_config_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCGemConfigList.gem_config_list)
  return _internal_add_gem_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GemConfig >&
SCGemConfigList::gem_config_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCGemConfigList.gem_config_list)
  return gem_config_list_;
}

// repeated int32 critical_config_list = 2;
inline int SCGemConfigList::_internal_critical_config_list_size() const {
  return critical_config_list_.size();
}
inline int SCGemConfigList::critical_config_list_size() const {
  return _internal_critical_config_list_size();
}
inline void SCGemConfigList::clear_critical_config_list() {
  critical_config_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGemConfigList::_internal_critical_config_list(int index) const {
  return critical_config_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGemConfigList::critical_config_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCGemConfigList.critical_config_list)
  return _internal_critical_config_list(index);
}
inline void SCGemConfigList::set_critical_config_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  critical_config_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCGemConfigList.critical_config_list)
}
inline void SCGemConfigList::_internal_add_critical_config_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  critical_config_list_.Add(value);
}
inline void SCGemConfigList::add_critical_config_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_critical_config_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCGemConfigList.critical_config_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGemConfigList::_internal_critical_config_list() const {
  return critical_config_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGemConfigList::critical_config_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCGemConfigList.critical_config_list)
  return _internal_critical_config_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGemConfigList::_internal_mutable_critical_config_list() {
  return &critical_config_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGemConfigList::mutable_critical_config_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCGemConfigList.critical_config_list)
  return _internal_mutable_critical_config_list();
}

// -------------------------------------------------------------------

// ItemWheel

// int32 wheel_id = 1;
inline void ItemWheel::clear_wheel_id() {
  wheel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_wheel_id() const {
  return wheel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::wheel_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.wheel_id)
  return _internal_wheel_id();
}
inline void ItemWheel::_internal_set_wheel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wheel_id_ = value;
}
inline void ItemWheel::set_wheel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wheel_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.wheel_id)
}

// int32 wheel_level = 2;
inline void ItemWheel::clear_wheel_level() {
  wheel_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_wheel_level() const {
  return wheel_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::wheel_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.wheel_level)
  return _internal_wheel_level();
}
inline void ItemWheel::_internal_set_wheel_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wheel_level_ = value;
}
inline void ItemWheel::set_wheel_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wheel_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.wheel_level)
}

// repeated int32 item_list = 3;
inline int ItemWheel::_internal_item_list_size() const {
  return item_list_.size();
}
inline int ItemWheel::item_list_size() const {
  return _internal_item_list_size();
}
inline void ItemWheel::clear_item_list() {
  item_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_item_list(int index) const {
  return item_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::item_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.item_list)
  return _internal_item_list(index);
}
inline void ItemWheel::set_item_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  item_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.item_list)
}
inline void ItemWheel::_internal_add_item_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  item_list_.Add(value);
}
inline void ItemWheel::add_item_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_item_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.ItemWheel.item_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ItemWheel::_internal_item_list() const {
  return item_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ItemWheel::item_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.ItemWheel.item_list)
  return _internal_item_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ItemWheel::_internal_mutable_item_list() {
  return &item_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ItemWheel::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.ItemWheel.item_list)
  return _internal_mutable_item_list();
}

// repeated int32 result_list = 4;
inline int ItemWheel::_internal_result_list_size() const {
  return result_list_.size();
}
inline int ItemWheel::result_list_size() const {
  return _internal_result_list_size();
}
inline void ItemWheel::clear_result_list() {
  result_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_result_list(int index) const {
  return result_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::result_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.result_list)
  return _internal_result_list(index);
}
inline void ItemWheel::set_result_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  result_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.result_list)
}
inline void ItemWheel::_internal_add_result_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  result_list_.Add(value);
}
inline void ItemWheel::add_result_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_result_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.ItemWheel.result_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ItemWheel::_internal_result_list() const {
  return result_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ItemWheel::result_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.ItemWheel.result_list)
  return _internal_result_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ItemWheel::_internal_mutable_result_list() {
  return &result_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ItemWheel::mutable_result_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.ItemWheel.result_list)
  return _internal_mutable_result_list();
}

// int32 wheel_multi = 5;
inline void ItemWheel::clear_wheel_multi() {
  wheel_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_wheel_multi() const {
  return wheel_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::wheel_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.wheel_multi)
  return _internal_wheel_multi();
}
inline void ItemWheel::_internal_set_wheel_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wheel_multi_ = value;
}
inline void ItemWheel::set_wheel_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wheel_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.wheel_multi)
}

// int32 award_num = 6;
inline void ItemWheel::clear_award_num() {
  award_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_award_num() const {
  return award_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::award_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.award_num)
  return _internal_award_num();
}
inline void ItemWheel::_internal_set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_num_ = value;
}
inline void ItemWheel::set_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.award_num)
}

// int32 award_type = 7;
inline void ItemWheel::clear_award_type() {
  award_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::_internal_award_type() const {
  return award_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemWheel::award_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemWheel.award_type)
  return _internal_award_type();
}
inline void ItemWheel::_internal_set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_type_ = value;
}
inline void ItemWheel::set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemWheel.award_type)
}

// -------------------------------------------------------------------

// CritWheel

// repeated int32 crit_list = 1;
inline int CritWheel::_internal_crit_list_size() const {
  return crit_list_.size();
}
inline int CritWheel::crit_list_size() const {
  return _internal_crit_list_size();
}
inline void CritWheel::clear_crit_list() {
  crit_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CritWheel::_internal_crit_list(int index) const {
  return crit_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CritWheel::crit_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CritWheel.crit_list)
  return _internal_crit_list(index);
}
inline void CritWheel::set_crit_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  crit_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.CritWheel.crit_list)
}
inline void CritWheel::_internal_add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  crit_list_.Add(value);
}
inline void CritWheel::add_crit_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_crit_list(value);
  // @@protoc_insertion_point(field_add:BYDLD.CritWheel.crit_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CritWheel::_internal_crit_list() const {
  return crit_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CritWheel::crit_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.CritWheel.crit_list)
  return _internal_crit_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CritWheel::_internal_mutable_crit_list() {
  return &crit_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CritWheel::mutable_crit_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CritWheel.crit_list)
  return _internal_mutable_crit_list();
}

// int32 crit_result = 2;
inline void CritWheel::clear_crit_result() {
  crit_result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CritWheel::_internal_crit_result() const {
  return crit_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CritWheel::crit_result() const {
  // @@protoc_insertion_point(field_get:BYDLD.CritWheel.crit_result)
  return _internal_crit_result();
}
inline void CritWheel::_internal_set_crit_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crit_result_ = value;
}
inline void CritWheel::set_crit_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crit_result(value);
  // @@protoc_insertion_point(field_set:BYDLD.CritWheel.crit_result)
}

// -------------------------------------------------------------------

// GoldenJadeInfo

// repeated .BYDLD.ItemWheel item_wheels = 1;
inline int GoldenJadeInfo::_internal_item_wheels_size() const {
  return item_wheels_.size();
}
inline int GoldenJadeInfo::item_wheels_size() const {
  return _internal_item_wheels_size();
}
inline void GoldenJadeInfo::clear_item_wheels() {
  item_wheels_.Clear();
}
inline ::BYDLD::ItemWheel* GoldenJadeInfo::mutable_item_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.GoldenJadeInfo.item_wheels)
  return item_wheels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemWheel >*
GoldenJadeInfo::mutable_item_wheels() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.GoldenJadeInfo.item_wheels)
  return &item_wheels_;
}
inline const ::BYDLD::ItemWheel& GoldenJadeInfo::_internal_item_wheels(int index) const {
  return item_wheels_.Get(index);
}
inline const ::BYDLD::ItemWheel& GoldenJadeInfo::item_wheels(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.GoldenJadeInfo.item_wheels)
  return _internal_item_wheels(index);
}
inline ::BYDLD::ItemWheel* GoldenJadeInfo::_internal_add_item_wheels() {
  return item_wheels_.Add();
}
inline ::BYDLD::ItemWheel* GoldenJadeInfo::add_item_wheels() {
  // @@protoc_insertion_point(field_add:BYDLD.GoldenJadeInfo.item_wheels)
  return _internal_add_item_wheels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemWheel >&
GoldenJadeInfo::item_wheels() const {
  // @@protoc_insertion_point(field_list:BYDLD.GoldenJadeInfo.item_wheels)
  return item_wheels_;
}

// .BYDLD.CritWheel crit_wheel = 2;
inline bool GoldenJadeInfo::_internal_has_crit_wheel() const {
  return this != internal_default_instance() && crit_wheel_ != nullptr;
}
inline bool GoldenJadeInfo::has_crit_wheel() const {
  return _internal_has_crit_wheel();
}
inline void GoldenJadeInfo::clear_crit_wheel() {
  if (GetArena() == nullptr && crit_wheel_ != nullptr) {
    delete crit_wheel_;
  }
  crit_wheel_ = nullptr;
}
inline const ::BYDLD::CritWheel& GoldenJadeInfo::_internal_crit_wheel() const {
  const ::BYDLD::CritWheel* p = crit_wheel_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::CritWheel&>(
      ::BYDLD::_CritWheel_default_instance_);
}
inline const ::BYDLD::CritWheel& GoldenJadeInfo::crit_wheel() const {
  // @@protoc_insertion_point(field_get:BYDLD.GoldenJadeInfo.crit_wheel)
  return _internal_crit_wheel();
}
inline void GoldenJadeInfo::unsafe_arena_set_allocated_crit_wheel(
    ::BYDLD::CritWheel* crit_wheel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crit_wheel_);
  }
  crit_wheel_ = crit_wheel;
  if (crit_wheel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.GoldenJadeInfo.crit_wheel)
}
inline ::BYDLD::CritWheel* GoldenJadeInfo::release_crit_wheel() {
  
  ::BYDLD::CritWheel* temp = crit_wheel_;
  crit_wheel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::CritWheel* GoldenJadeInfo::unsafe_arena_release_crit_wheel() {
  // @@protoc_insertion_point(field_release:BYDLD.GoldenJadeInfo.crit_wheel)
  
  ::BYDLD::CritWheel* temp = crit_wheel_;
  crit_wheel_ = nullptr;
  return temp;
}
inline ::BYDLD::CritWheel* GoldenJadeInfo::_internal_mutable_crit_wheel() {
  
  if (crit_wheel_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::CritWheel>(GetArena());
    crit_wheel_ = p;
  }
  return crit_wheel_;
}
inline ::BYDLD::CritWheel* GoldenJadeInfo::mutable_crit_wheel() {
  // @@protoc_insertion_point(field_mutable:BYDLD.GoldenJadeInfo.crit_wheel)
  return _internal_mutable_crit_wheel();
}
inline void GoldenJadeInfo::set_allocated_crit_wheel(::BYDLD::CritWheel* crit_wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crit_wheel_;
  }
  if (crit_wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crit_wheel);
    if (message_arena != submessage_arena) {
      crit_wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crit_wheel, submessage_arena);
    }
    
  } else {
    
  }
  crit_wheel_ = crit_wheel;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.GoldenJadeInfo.crit_wheel)
}

// int32 total_multi = 3;
inline void GoldenJadeInfo::clear_total_multi() {
  total_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenJadeInfo::_internal_total_multi() const {
  return total_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoldenJadeInfo::total_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.GoldenJadeInfo.total_multi)
  return _internal_total_multi();
}
inline void GoldenJadeInfo::_internal_set_total_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_multi_ = value;
}
inline void GoldenJadeInfo::set_total_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.GoldenJadeInfo.total_multi)
}

// -------------------------------------------------------------------

// AztecGemConfigItem

// int32 num = 1;
inline void AztecGemConfigItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecGemConfigItem::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecGemConfigItem::num() const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecGemConfigItem.num)
  return _internal_num();
}
inline void AztecGemConfigItem::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void AztecGemConfigItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecGemConfigItem.num)
}

// int32 ratio = 2;
inline void AztecGemConfigItem::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecGemConfigItem::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecGemConfigItem::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecGemConfigItem.ratio)
  return _internal_ratio();
}
inline void AztecGemConfigItem::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void AztecGemConfigItem::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecGemConfigItem.ratio)
}

// -------------------------------------------------------------------

// AztecGemConfig

// repeated .BYDLD.AztecGemConfigItem items = 1;
inline int AztecGemConfig::_internal_items_size() const {
  return items_.size();
}
inline int AztecGemConfig::items_size() const {
  return _internal_items_size();
}
inline void AztecGemConfig::clear_items() {
  items_.Clear();
}
inline ::BYDLD::AztecGemConfigItem* AztecGemConfig::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.AztecGemConfig.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfigItem >*
AztecGemConfig::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.AztecGemConfig.items)
  return &items_;
}
inline const ::BYDLD::AztecGemConfigItem& AztecGemConfig::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::BYDLD::AztecGemConfigItem& AztecGemConfig::items(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecGemConfig.items)
  return _internal_items(index);
}
inline ::BYDLD::AztecGemConfigItem* AztecGemConfig::_internal_add_items() {
  return items_.Add();
}
inline ::BYDLD::AztecGemConfigItem* AztecGemConfig::add_items() {
  // @@protoc_insertion_point(field_add:BYDLD.AztecGemConfig.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfigItem >&
AztecGemConfig::items() const {
  // @@protoc_insertion_point(field_list:BYDLD.AztecGemConfig.items)
  return items_;
}

// .BYDLD.AztecGemType type = 2;
inline void AztecGemConfig::clear_type() {
  type_ = 0;
}
inline ::BYDLD::AztecGemType AztecGemConfig::_internal_type() const {
  return static_cast< ::BYDLD::AztecGemType >(type_);
}
inline ::BYDLD::AztecGemType AztecGemConfig::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecGemConfig.type)
  return _internal_type();
}
inline void AztecGemConfig::_internal_set_type(::BYDLD::AztecGemType value) {
  
  type_ = value;
}
inline void AztecGemConfig::set_type(::BYDLD::AztecGemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecGemConfig.type)
}

// -------------------------------------------------------------------

// CSAztecGemConfig

// -------------------------------------------------------------------

// SCAztecGemConfig

// repeated .BYDLD.AztecGemConfig configs = 1;
inline int SCAztecGemConfig::_internal_configs_size() const {
  return configs_.size();
}
inline int SCAztecGemConfig::configs_size() const {
  return _internal_configs_size();
}
inline void SCAztecGemConfig::clear_configs() {
  configs_.Clear();
}
inline ::BYDLD::AztecGemConfig* SCAztecGemConfig::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCAztecGemConfig.configs)
  return configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfig >*
SCAztecGemConfig::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCAztecGemConfig.configs)
  return &configs_;
}
inline const ::BYDLD::AztecGemConfig& SCAztecGemConfig::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const ::BYDLD::AztecGemConfig& SCAztecGemConfig::configs(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCAztecGemConfig.configs)
  return _internal_configs(index);
}
inline ::BYDLD::AztecGemConfig* SCAztecGemConfig::_internal_add_configs() {
  return configs_.Add();
}
inline ::BYDLD::AztecGemConfig* SCAztecGemConfig::add_configs() {
  // @@protoc_insertion_point(field_add:BYDLD.SCAztecGemConfig.configs)
  return _internal_add_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecGemConfig >&
SCAztecGemConfig::configs() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCAztecGemConfig.configs)
  return configs_;
}

// -------------------------------------------------------------------

// AztecClearReward

// .BYDLD.AztecGemType type = 1;
inline void AztecClearReward::clear_type() {
  type_ = 0;
}
inline ::BYDLD::AztecGemType AztecClearReward::_internal_type() const {
  return static_cast< ::BYDLD::AztecGemType >(type_);
}
inline ::BYDLD::AztecGemType AztecClearReward::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecClearReward.type)
  return _internal_type();
}
inline void AztecClearReward::_internal_set_type(::BYDLD::AztecGemType value) {
  
  type_ = value;
}
inline void AztecClearReward::set_type(::BYDLD::AztecGemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecClearReward.type)
}

// int32 value = 2;
inline void AztecClearReward::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecClearReward::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecClearReward::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecClearReward.value)
  return _internal_value();
}
inline void AztecClearReward::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void AztecClearReward::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecClearReward.value)
}

// -------------------------------------------------------------------

// AztecTable

// repeated .BYDLD.AztecGemType gems = 1;
inline int AztecTable::_internal_gems_size() const {
  return gems_.size();
}
inline int AztecTable::gems_size() const {
  return _internal_gems_size();
}
inline void AztecTable::clear_gems() {
  gems_.Clear();
}
inline ::BYDLD::AztecGemType AztecTable::_internal_gems(int index) const {
  return static_cast< ::BYDLD::AztecGemType >(gems_.Get(index));
}
inline ::BYDLD::AztecGemType AztecTable::gems(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecTable.gems)
  return _internal_gems(index);
}
inline void AztecTable::set_gems(int index, ::BYDLD::AztecGemType value) {
  gems_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecTable.gems)
}
inline void AztecTable::_internal_add_gems(::BYDLD::AztecGemType value) {
  gems_.Add(value);
}
inline void AztecTable::add_gems(::BYDLD::AztecGemType value) {
  // @@protoc_insertion_point(field_add:BYDLD.AztecTable.gems)
  _internal_add_gems(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AztecTable::gems() const {
  // @@protoc_insertion_point(field_list:BYDLD.AztecTable.gems)
  return gems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AztecTable::_internal_mutable_gems() {
  return &gems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AztecTable::mutable_gems() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.AztecTable.gems)
  return _internal_mutable_gems();
}

// repeated .BYDLD.AztecClearReward rewards = 2;
inline int AztecTable::_internal_rewards_size() const {
  return rewards_.size();
}
inline int AztecTable::rewards_size() const {
  return _internal_rewards_size();
}
inline void AztecTable::clear_rewards() {
  rewards_.Clear();
}
inline ::BYDLD::AztecClearReward* AztecTable::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.AztecTable.rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecClearReward >*
AztecTable::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.AztecTable.rewards)
  return &rewards_;
}
inline const ::BYDLD::AztecClearReward& AztecTable::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::BYDLD::AztecClearReward& AztecTable::rewards(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecTable.rewards)
  return _internal_rewards(index);
}
inline ::BYDLD::AztecClearReward* AztecTable::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::BYDLD::AztecClearReward* AztecTable::add_rewards() {
  // @@protoc_insertion_point(field_add:BYDLD.AztecTable.rewards)
  return _internal_add_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecClearReward >&
AztecTable::rewards() const {
  // @@protoc_insertion_point(field_list:BYDLD.AztecTable.rewards)
  return rewards_;
}

// -------------------------------------------------------------------

// AztecStep

// repeated .BYDLD.AztecTable tables = 1;
inline int AztecStep::_internal_tables_size() const {
  return tables_.size();
}
inline int AztecStep::tables_size() const {
  return _internal_tables_size();
}
inline void AztecStep::clear_tables() {
  tables_.Clear();
}
inline ::BYDLD::AztecTable* AztecStep::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.AztecStep.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecTable >*
AztecStep::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.AztecStep.tables)
  return &tables_;
}
inline const ::BYDLD::AztecTable& AztecStep::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::BYDLD::AztecTable& AztecStep::tables(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecStep.tables)
  return _internal_tables(index);
}
inline ::BYDLD::AztecTable* AztecStep::_internal_add_tables() {
  return tables_.Add();
}
inline ::BYDLD::AztecTable* AztecStep::add_tables() {
  // @@protoc_insertion_point(field_add:BYDLD.AztecStep.tables)
  return _internal_add_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecTable >&
AztecStep::tables() const {
  // @@protoc_insertion_point(field_list:BYDLD.AztecStep.tables)
  return tables_;
}

// -------------------------------------------------------------------

// AztecDataInfo

// repeated .BYDLD.AztecStep steps = 1;
inline int AztecDataInfo::_internal_steps_size() const {
  return steps_.size();
}
inline int AztecDataInfo::steps_size() const {
  return _internal_steps_size();
}
inline void AztecDataInfo::clear_steps() {
  steps_.Clear();
}
inline ::BYDLD::AztecStep* AztecDataInfo::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.AztecDataInfo.steps)
  return steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecStep >*
AztecDataInfo::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.AztecDataInfo.steps)
  return &steps_;
}
inline const ::BYDLD::AztecStep& AztecDataInfo::_internal_steps(int index) const {
  return steps_.Get(index);
}
inline const ::BYDLD::AztecStep& AztecDataInfo::steps(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecDataInfo.steps)
  return _internal_steps(index);
}
inline ::BYDLD::AztecStep* AztecDataInfo::_internal_add_steps() {
  return steps_.Add();
}
inline ::BYDLD::AztecStep* AztecDataInfo::add_steps() {
  // @@protoc_insertion_point(field_add:BYDLD.AztecDataInfo.steps)
  return _internal_add_steps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AztecStep >&
AztecDataInfo::steps() const {
  // @@protoc_insertion_point(field_list:BYDLD.AztecDataInfo.steps)
  return steps_;
}

// int32 total_win = 2;
inline void AztecDataInfo::clear_total_win() {
  total_win_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecDataInfo::_internal_total_win() const {
  return total_win_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AztecDataInfo::total_win() const {
  // @@protoc_insertion_point(field_get:BYDLD.AztecDataInfo.total_win)
  return _internal_total_win();
}
inline void AztecDataInfo::_internal_set_total_win(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_win_ = value;
}
inline void AztecDataInfo::set_total_win(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_win(value);
  // @@protoc_insertion_point(field_set:BYDLD.AztecDataInfo.total_win)
}

// -------------------------------------------------------------------

// Capturefish

// int32 fish_uid = 1;
inline void Capturefish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.fish_uid)
  return _internal_fish_uid();
}
inline void Capturefish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void Capturefish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.fish_uid)
}

// int32 get_score = 2;
inline void Capturefish::clear_get_score() {
  get_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_get_score() const {
  return get_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::get_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.get_score)
  return _internal_get_score();
}
inline void Capturefish::_internal_set_get_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  get_score_ = value;
}
inline void Capturefish::set_get_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_get_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.get_score)
}

// int32 fish_id = 3;
inline void Capturefish::clear_fish_id() {
  fish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_fish_id() const {
  return fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::fish_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.fish_id)
  return _internal_fish_id();
}
inline void Capturefish::_internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_id_ = value;
}
inline void Capturefish::set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.fish_id)
}

// repeated .BYDLD.ObjectData torpedoes = 4;
inline int Capturefish::_internal_torpedoes_size() const {
  return torpedoes_.size();
}
inline int Capturefish::torpedoes_size() const {
  return _internal_torpedoes_size();
}
inline void Capturefish::clear_torpedoes() {
  torpedoes_.Clear();
}
inline ::BYDLD::ObjectData* Capturefish::mutable_torpedoes(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.torpedoes)
  return torpedoes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >*
Capturefish::mutable_torpedoes() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.Capturefish.torpedoes)
  return &torpedoes_;
}
inline const ::BYDLD::ObjectData& Capturefish::_internal_torpedoes(int index) const {
  return torpedoes_.Get(index);
}
inline const ::BYDLD::ObjectData& Capturefish::torpedoes(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.torpedoes)
  return _internal_torpedoes(index);
}
inline ::BYDLD::ObjectData* Capturefish::_internal_add_torpedoes() {
  return torpedoes_.Add();
}
inline ::BYDLD::ObjectData* Capturefish::add_torpedoes() {
  // @@protoc_insertion_point(field_add:BYDLD.Capturefish.torpedoes)
  return _internal_add_torpedoes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ObjectData >&
Capturefish::torpedoes() const {
  // @@protoc_insertion_point(field_list:BYDLD.Capturefish.torpedoes)
  return torpedoes_;
}

// int32 lucky_ratio = 5;
inline void Capturefish::clear_lucky_ratio() {
  lucky_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_lucky_ratio() const {
  return lucky_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::lucky_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.lucky_ratio)
  return _internal_lucky_ratio();
}
inline void Capturefish::_internal_set_lucky_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lucky_ratio_ = value;
}
inline void Capturefish::set_lucky_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lucky_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.lucky_ratio)
}

// int32 trident_score = 6;
inline void Capturefish::clear_trident_score() {
  trident_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_trident_score() const {
  return trident_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::trident_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.trident_score)
  return _internal_trident_score();
}
inline void Capturefish::_internal_set_trident_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident_score_ = value;
}
inline void Capturefish::set_trident_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.trident_score)
}

// repeated .BYDLD.EffectFish effect_fish = 7;
inline int Capturefish::_internal_effect_fish_size() const {
  return effect_fish_.size();
}
inline int Capturefish::effect_fish_size() const {
  return _internal_effect_fish_size();
}
inline void Capturefish::clear_effect_fish() {
  effect_fish_.Clear();
}
inline ::BYDLD::EffectFish* Capturefish::mutable_effect_fish(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.effect_fish)
  return effect_fish_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::EffectFish >*
Capturefish::mutable_effect_fish() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.Capturefish.effect_fish)
  return &effect_fish_;
}
inline const ::BYDLD::EffectFish& Capturefish::_internal_effect_fish(int index) const {
  return effect_fish_.Get(index);
}
inline const ::BYDLD::EffectFish& Capturefish::effect_fish(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.effect_fish)
  return _internal_effect_fish(index);
}
inline ::BYDLD::EffectFish* Capturefish::_internal_add_effect_fish() {
  return effect_fish_.Add();
}
inline ::BYDLD::EffectFish* Capturefish::add_effect_fish() {
  // @@protoc_insertion_point(field_add:BYDLD.Capturefish.effect_fish)
  return _internal_add_effect_fish();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::EffectFish >&
Capturefish::effect_fish() const {
  // @@protoc_insertion_point(field_list:BYDLD.Capturefish.effect_fish)
  return effect_fish_;
}

// int32 award_time = 8;
inline void Capturefish::clear_award_time() {
  award_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_award_time() const {
  return award_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::award_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.award_time)
  return _internal_award_time();
}
inline void Capturefish::_internal_set_award_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_time_ = value;
}
inline void Capturefish::set_award_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.award_time)
}

// int32 bulletType = 9;
inline void Capturefish::clear_bullettype() {
  bullettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_bullettype() const {
  return bullettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::bullettype() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.bulletType)
  return _internal_bullettype();
}
inline void Capturefish::_internal_set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullettype_ = value;
}
inline void Capturefish::set_bullettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullettype(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.bulletType)
}

// int32 multiple = 10;
inline void Capturefish::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.multiple)
  return _internal_multiple();
}
inline void Capturefish::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void Capturefish::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.multiple)
}

// int32 get_peilv = 11;
inline void Capturefish::clear_get_peilv() {
  get_peilv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_get_peilv() const {
  return get_peilv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::get_peilv() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.get_peilv)
  return _internal_get_peilv();
}
inline void Capturefish::_internal_set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  get_peilv_ = value;
}
inline void Capturefish::set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_get_peilv(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.get_peilv)
}

// int32 death = 12;
inline void Capturefish::clear_death() {
  death_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_death() const {
  return death_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::death() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.death)
  return _internal_death();
}
inline void Capturefish::_internal_set_death(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  death_ = value;
}
inline void Capturefish::set_death(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.death)
}

// int32 stage = 13;
inline void Capturefish::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::stage() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.stage)
  return _internal_stage();
}
inline void Capturefish::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void Capturefish::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.stage)
}

// int32 sub_stage = 14;
inline void Capturefish::clear_sub_stage() {
  sub_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_sub_stage() const {
  return sub_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::sub_stage() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.sub_stage)
  return _internal_sub_stage();
}
inline void Capturefish::_internal_set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_stage_ = value;
}
inline void Capturefish::set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_stage(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.sub_stage)
}

// int32 award_index = 15;
inline void Capturefish::clear_award_index() {
  award_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_award_index() const {
  return award_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::award_index() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.award_index)
  return _internal_award_index();
}
inline void Capturefish::_internal_set_award_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_index_ = value;
}
inline void Capturefish::set_award_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_index(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.award_index)
}

// int32 crit_multiple = 16;
inline void Capturefish::clear_crit_multiple() {
  crit_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_crit_multiple() const {
  return crit_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::crit_multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.crit_multiple)
  return _internal_crit_multiple();
}
inline void Capturefish::_internal_set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crit_multiple_ = value;
}
inline void Capturefish::set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crit_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.crit_multiple)
}

// int32 ingot_multi = 17;
inline void Capturefish::clear_ingot_multi() {
  ingot_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_ingot_multi() const {
  return ingot_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::ingot_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.ingot_multi)
  return _internal_ingot_multi();
}
inline void Capturefish::_internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_multi_ = value;
}
inline void Capturefish::set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.ingot_multi)
}

// int32 ratio = 18;
inline void Capturefish::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.ratio)
  return _internal_ratio();
}
inline void Capturefish::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void Capturefish::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.ratio)
}

// int32 frozen_time = 19;
inline void Capturefish::clear_frozen_time() {
  frozen_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_frozen_time() const {
  return frozen_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::frozen_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.frozen_time)
  return _internal_frozen_time();
}
inline void Capturefish::_internal_set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frozen_time_ = value;
}
inline void Capturefish::set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frozen_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.frozen_time)
}

// int32 trident_multi = 20;
inline void Capturefish::clear_trident_multi() {
  trident_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_trident_multi() const {
  return trident_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::trident_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.trident_multi)
  return _internal_trident_multi();
}
inline void Capturefish::_internal_set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident_multi_ = value;
}
inline void Capturefish::set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.trident_multi)
}

// int32 scratch_card = 21;
inline void Capturefish::clear_scratch_card() {
  scratch_card_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::_internal_scratch_card() const {
  return scratch_card_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Capturefish::scratch_card() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.scratch_card)
  return _internal_scratch_card();
}
inline void Capturefish::_internal_set_scratch_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scratch_card_ = value;
}
inline void Capturefish::set_scratch_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scratch_card(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.scratch_card)
}

// .BYDLD.DragonBallInfo ball_info = 22;
inline bool Capturefish::_internal_has_ball_info() const {
  return this != internal_default_instance() && ball_info_ != nullptr;
}
inline bool Capturefish::has_ball_info() const {
  return _internal_has_ball_info();
}
inline void Capturefish::clear_ball_info() {
  if (GetArena() == nullptr && ball_info_ != nullptr) {
    delete ball_info_;
  }
  ball_info_ = nullptr;
}
inline const ::BYDLD::DragonBallInfo& Capturefish::_internal_ball_info() const {
  const ::BYDLD::DragonBallInfo* p = ball_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::DragonBallInfo&>(
      ::BYDLD::_DragonBallInfo_default_instance_);
}
inline const ::BYDLD::DragonBallInfo& Capturefish::ball_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.ball_info)
  return _internal_ball_info();
}
inline void Capturefish::unsafe_arena_set_allocated_ball_info(
    ::BYDLD::DragonBallInfo* ball_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_info_);
  }
  ball_info_ = ball_info;
  if (ball_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.Capturefish.ball_info)
}
inline ::BYDLD::DragonBallInfo* Capturefish::release_ball_info() {
  
  ::BYDLD::DragonBallInfo* temp = ball_info_;
  ball_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::DragonBallInfo* Capturefish::unsafe_arena_release_ball_info() {
  // @@protoc_insertion_point(field_release:BYDLD.Capturefish.ball_info)
  
  ::BYDLD::DragonBallInfo* temp = ball_info_;
  ball_info_ = nullptr;
  return temp;
}
inline ::BYDLD::DragonBallInfo* Capturefish::_internal_mutable_ball_info() {
  
  if (ball_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::DragonBallInfo>(GetArena());
    ball_info_ = p;
  }
  return ball_info_;
}
inline ::BYDLD::DragonBallInfo* Capturefish::mutable_ball_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.ball_info)
  return _internal_mutable_ball_info();
}
inline void Capturefish::set_allocated_ball_info(::BYDLD::DragonBallInfo* ball_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ball_info_;
  }
  if (ball_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball_info);
    if (message_arena != submessage_arena) {
      ball_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_info, submessage_arena);
    }
    
  } else {
    
  }
  ball_info_ = ball_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Capturefish.ball_info)
}

// .BYDLD.OctopusKingInfo octopus_king = 23;
inline bool Capturefish::_internal_has_octopus_king() const {
  return this != internal_default_instance() && octopus_king_ != nullptr;
}
inline bool Capturefish::has_octopus_king() const {
  return _internal_has_octopus_king();
}
inline void Capturefish::clear_octopus_king() {
  if (GetArena() == nullptr && octopus_king_ != nullptr) {
    delete octopus_king_;
  }
  octopus_king_ = nullptr;
}
inline const ::BYDLD::OctopusKingInfo& Capturefish::_internal_octopus_king() const {
  const ::BYDLD::OctopusKingInfo* p = octopus_king_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::OctopusKingInfo&>(
      ::BYDLD::_OctopusKingInfo_default_instance_);
}
inline const ::BYDLD::OctopusKingInfo& Capturefish::octopus_king() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.octopus_king)
  return _internal_octopus_king();
}
inline void Capturefish::unsafe_arena_set_allocated_octopus_king(
    ::BYDLD::OctopusKingInfo* octopus_king) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(octopus_king_);
  }
  octopus_king_ = octopus_king;
  if (octopus_king) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.Capturefish.octopus_king)
}
inline ::BYDLD::OctopusKingInfo* Capturefish::release_octopus_king() {
  
  ::BYDLD::OctopusKingInfo* temp = octopus_king_;
  octopus_king_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::OctopusKingInfo* Capturefish::unsafe_arena_release_octopus_king() {
  // @@protoc_insertion_point(field_release:BYDLD.Capturefish.octopus_king)
  
  ::BYDLD::OctopusKingInfo* temp = octopus_king_;
  octopus_king_ = nullptr;
  return temp;
}
inline ::BYDLD::OctopusKingInfo* Capturefish::_internal_mutable_octopus_king() {
  
  if (octopus_king_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::OctopusKingInfo>(GetArena());
    octopus_king_ = p;
  }
  return octopus_king_;
}
inline ::BYDLD::OctopusKingInfo* Capturefish::mutable_octopus_king() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.octopus_king)
  return _internal_mutable_octopus_king();
}
inline void Capturefish::set_allocated_octopus_king(::BYDLD::OctopusKingInfo* octopus_king) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete octopus_king_;
  }
  if (octopus_king) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(octopus_king);
    if (message_arena != submessage_arena) {
      octopus_king = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, octopus_king, submessage_arena);
    }
    
  } else {
    
  }
  octopus_king_ = octopus_king;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Capturefish.octopus_king)
}

// bool is_reward = 24;
inline void Capturefish::clear_is_reward() {
  is_reward_ = false;
}
inline bool Capturefish::_internal_is_reward() const {
  return is_reward_;
}
inline bool Capturefish::is_reward() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.is_reward)
  return _internal_is_reward();
}
inline void Capturefish::_internal_set_is_reward(bool value) {
  
  is_reward_ = value;
}
inline void Capturefish::set_is_reward(bool value) {
  _internal_set_is_reward(value);
  // @@protoc_insertion_point(field_set:BYDLD.Capturefish.is_reward)
}

// .BYDLD.MagicInfo magic_info = 25;
inline bool Capturefish::_internal_has_magic_info() const {
  return this != internal_default_instance() && magic_info_ != nullptr;
}
inline bool Capturefish::has_magic_info() const {
  return _internal_has_magic_info();
}
inline void Capturefish::clear_magic_info() {
  if (GetArena() == nullptr && magic_info_ != nullptr) {
    delete magic_info_;
  }
  magic_info_ = nullptr;
}
inline const ::BYDLD::MagicInfo& Capturefish::_internal_magic_info() const {
  const ::BYDLD::MagicInfo* p = magic_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::MagicInfo&>(
      ::BYDLD::_MagicInfo_default_instance_);
}
inline const ::BYDLD::MagicInfo& Capturefish::magic_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.magic_info)
  return _internal_magic_info();
}
inline void Capturefish::unsafe_arena_set_allocated_magic_info(
    ::BYDLD::MagicInfo* magic_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(magic_info_);
  }
  magic_info_ = magic_info;
  if (magic_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.Capturefish.magic_info)
}
inline ::BYDLD::MagicInfo* Capturefish::release_magic_info() {
  
  ::BYDLD::MagicInfo* temp = magic_info_;
  magic_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::MagicInfo* Capturefish::unsafe_arena_release_magic_info() {
  // @@protoc_insertion_point(field_release:BYDLD.Capturefish.magic_info)
  
  ::BYDLD::MagicInfo* temp = magic_info_;
  magic_info_ = nullptr;
  return temp;
}
inline ::BYDLD::MagicInfo* Capturefish::_internal_mutable_magic_info() {
  
  if (magic_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::MagicInfo>(GetArena());
    magic_info_ = p;
  }
  return magic_info_;
}
inline ::BYDLD::MagicInfo* Capturefish::mutable_magic_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.magic_info)
  return _internal_mutable_magic_info();
}
inline void Capturefish::set_allocated_magic_info(::BYDLD::MagicInfo* magic_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete magic_info_;
  }
  if (magic_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(magic_info);
    if (message_arena != submessage_arena) {
      magic_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magic_info, submessage_arena);
    }
    
  } else {
    
  }
  magic_info_ = magic_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Capturefish.magic_info)
}

// .BYDLD.Zeus zeus_info = 26;
inline bool Capturefish::_internal_has_zeus_info() const {
  return this != internal_default_instance() && zeus_info_ != nullptr;
}
inline bool Capturefish::has_zeus_info() const {
  return _internal_has_zeus_info();
}
inline void Capturefish::clear_zeus_info() {
  if (GetArena() == nullptr && zeus_info_ != nullptr) {
    delete zeus_info_;
  }
  zeus_info_ = nullptr;
}
inline const ::BYDLD::Zeus& Capturefish::_internal_zeus_info() const {
  const ::BYDLD::Zeus* p = zeus_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Zeus&>(
      ::BYDLD::_Zeus_default_instance_);
}
inline const ::BYDLD::Zeus& Capturefish::zeus_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.zeus_info)
  return _internal_zeus_info();
}
inline void Capturefish::unsafe_arena_set_allocated_zeus_info(
    ::BYDLD::Zeus* zeus_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zeus_info_);
  }
  zeus_info_ = zeus_info;
  if (zeus_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.Capturefish.zeus_info)
}
inline ::BYDLD::Zeus* Capturefish::release_zeus_info() {
  
  ::BYDLD::Zeus* temp = zeus_info_;
  zeus_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Zeus* Capturefish::unsafe_arena_release_zeus_info() {
  // @@protoc_insertion_point(field_release:BYDLD.Capturefish.zeus_info)
  
  ::BYDLD::Zeus* temp = zeus_info_;
  zeus_info_ = nullptr;
  return temp;
}
inline ::BYDLD::Zeus* Capturefish::_internal_mutable_zeus_info() {
  
  if (zeus_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Zeus>(GetArena());
    zeus_info_ = p;
  }
  return zeus_info_;
}
inline ::BYDLD::Zeus* Capturefish::mutable_zeus_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.zeus_info)
  return _internal_mutable_zeus_info();
}
inline void Capturefish::set_allocated_zeus_info(::BYDLD::Zeus* zeus_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zeus_info_;
  }
  if (zeus_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zeus_info);
    if (message_arena != submessage_arena) {
      zeus_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zeus_info, submessage_arena);
    }
    
  } else {
    
  }
  zeus_info_ = zeus_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Capturefish.zeus_info)
}

// .BYDLD.GoldenJadeInfo golden_jade_info = 27;
inline bool Capturefish::_internal_has_golden_jade_info() const {
  return this != internal_default_instance() && golden_jade_info_ != nullptr;
}
inline bool Capturefish::has_golden_jade_info() const {
  return _internal_has_golden_jade_info();
}
inline void Capturefish::clear_golden_jade_info() {
  if (GetArena() == nullptr && golden_jade_info_ != nullptr) {
    delete golden_jade_info_;
  }
  golden_jade_info_ = nullptr;
}
inline const ::BYDLD::GoldenJadeInfo& Capturefish::_internal_golden_jade_info() const {
  const ::BYDLD::GoldenJadeInfo* p = golden_jade_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::GoldenJadeInfo&>(
      ::BYDLD::_GoldenJadeInfo_default_instance_);
}
inline const ::BYDLD::GoldenJadeInfo& Capturefish::golden_jade_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.golden_jade_info)
  return _internal_golden_jade_info();
}
inline void Capturefish::unsafe_arena_set_allocated_golden_jade_info(
    ::BYDLD::GoldenJadeInfo* golden_jade_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(golden_jade_info_);
  }
  golden_jade_info_ = golden_jade_info;
  if (golden_jade_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.Capturefish.golden_jade_info)
}
inline ::BYDLD::GoldenJadeInfo* Capturefish::release_golden_jade_info() {
  
  ::BYDLD::GoldenJadeInfo* temp = golden_jade_info_;
  golden_jade_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::GoldenJadeInfo* Capturefish::unsafe_arena_release_golden_jade_info() {
  // @@protoc_insertion_point(field_release:BYDLD.Capturefish.golden_jade_info)
  
  ::BYDLD::GoldenJadeInfo* temp = golden_jade_info_;
  golden_jade_info_ = nullptr;
  return temp;
}
inline ::BYDLD::GoldenJadeInfo* Capturefish::_internal_mutable_golden_jade_info() {
  
  if (golden_jade_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::GoldenJadeInfo>(GetArena());
    golden_jade_info_ = p;
  }
  return golden_jade_info_;
}
inline ::BYDLD::GoldenJadeInfo* Capturefish::mutable_golden_jade_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.golden_jade_info)
  return _internal_mutable_golden_jade_info();
}
inline void Capturefish::set_allocated_golden_jade_info(::BYDLD::GoldenJadeInfo* golden_jade_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete golden_jade_info_;
  }
  if (golden_jade_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(golden_jade_info);
    if (message_arena != submessage_arena) {
      golden_jade_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, golden_jade_info, submessage_arena);
    }
    
  } else {
    
  }
  golden_jade_info_ = golden_jade_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Capturefish.golden_jade_info)
}

// .BYDLD.AztecDataInfo aztec_data_info = 28;
inline bool Capturefish::_internal_has_aztec_data_info() const {
  return this != internal_default_instance() && aztec_data_info_ != nullptr;
}
inline bool Capturefish::has_aztec_data_info() const {
  return _internal_has_aztec_data_info();
}
inline void Capturefish::clear_aztec_data_info() {
  if (GetArena() == nullptr && aztec_data_info_ != nullptr) {
    delete aztec_data_info_;
  }
  aztec_data_info_ = nullptr;
}
inline const ::BYDLD::AztecDataInfo& Capturefish::_internal_aztec_data_info() const {
  const ::BYDLD::AztecDataInfo* p = aztec_data_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::AztecDataInfo&>(
      ::BYDLD::_AztecDataInfo_default_instance_);
}
inline const ::BYDLD::AztecDataInfo& Capturefish::aztec_data_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.Capturefish.aztec_data_info)
  return _internal_aztec_data_info();
}
inline void Capturefish::unsafe_arena_set_allocated_aztec_data_info(
    ::BYDLD::AztecDataInfo* aztec_data_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aztec_data_info_);
  }
  aztec_data_info_ = aztec_data_info;
  if (aztec_data_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.Capturefish.aztec_data_info)
}
inline ::BYDLD::AztecDataInfo* Capturefish::release_aztec_data_info() {
  
  ::BYDLD::AztecDataInfo* temp = aztec_data_info_;
  aztec_data_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::AztecDataInfo* Capturefish::unsafe_arena_release_aztec_data_info() {
  // @@protoc_insertion_point(field_release:BYDLD.Capturefish.aztec_data_info)
  
  ::BYDLD::AztecDataInfo* temp = aztec_data_info_;
  aztec_data_info_ = nullptr;
  return temp;
}
inline ::BYDLD::AztecDataInfo* Capturefish::_internal_mutable_aztec_data_info() {
  
  if (aztec_data_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::AztecDataInfo>(GetArena());
    aztec_data_info_ = p;
  }
  return aztec_data_info_;
}
inline ::BYDLD::AztecDataInfo* Capturefish::mutable_aztec_data_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Capturefish.aztec_data_info)
  return _internal_mutable_aztec_data_info();
}
inline void Capturefish::set_allocated_aztec_data_info(::BYDLD::AztecDataInfo* aztec_data_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aztec_data_info_;
  }
  if (aztec_data_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aztec_data_info);
    if (message_arena != submessage_arena) {
      aztec_data_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aztec_data_info, submessage_arena);
    }
    
  } else {
    
  }
  aztec_data_info_ = aztec_data_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Capturefish.aztec_data_info)
}

// -------------------------------------------------------------------

// SCHitMultiFish

// int32 chair_idx = 1;
inline void SCHitMultiFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitMultiFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitMultiFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHitMultiFish.chair_idx)
  return _internal_chair_idx();
}
inline void SCHitMultiFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCHitMultiFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHitMultiFish.chair_idx)
}

// int32 invalid = 2;
inline void SCHitMultiFish::clear_invalid() {
  invalid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitMultiFish::_internal_invalid() const {
  return invalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitMultiFish::invalid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHitMultiFish.invalid)
  return _internal_invalid();
}
inline void SCHitMultiFish::_internal_set_invalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_ = value;
}
inline void SCHitMultiFish::set_invalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHitMultiFish.invalid)
}

// repeated .BYDLD.Capturefish capture_info = 3;
inline int SCHitMultiFish::_internal_capture_info_size() const {
  return capture_info_.size();
}
inline int SCHitMultiFish::capture_info_size() const {
  return _internal_capture_info_size();
}
inline void SCHitMultiFish::clear_capture_info() {
  capture_info_.Clear();
}
inline ::BYDLD::Capturefish* SCHitMultiFish::mutable_capture_info(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHitMultiFish.capture_info)
  return capture_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Capturefish >*
SCHitMultiFish::mutable_capture_info() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCHitMultiFish.capture_info)
  return &capture_info_;
}
inline const ::BYDLD::Capturefish& SCHitMultiFish::_internal_capture_info(int index) const {
  return capture_info_.Get(index);
}
inline const ::BYDLD::Capturefish& SCHitMultiFish::capture_info(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHitMultiFish.capture_info)
  return _internal_capture_info(index);
}
inline ::BYDLD::Capturefish* SCHitMultiFish::_internal_add_capture_info() {
  return capture_info_.Add();
}
inline ::BYDLD::Capturefish* SCHitMultiFish::add_capture_info() {
  // @@protoc_insertion_point(field_add:BYDLD.SCHitMultiFish.capture_info)
  return _internal_add_capture_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Capturefish >&
SCHitMultiFish::capture_info() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCHitMultiFish.capture_info)
  return capture_info_;
}

// int64 score = 4;
inline void SCHitMultiFish::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHitMultiFish::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCHitMultiFish::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHitMultiFish.score)
  return _internal_score();
}
inline void SCHitMultiFish::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SCHitMultiFish::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHitMultiFish.score)
}

// int32 earn = 5;
inline void SCHitMultiFish::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitMultiFish::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHitMultiFish::earn() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHitMultiFish.earn)
  return _internal_earn();
}
inline void SCHitMultiFish::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCHitMultiFish::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHitMultiFish.earn)
}

// .BYDLD.SpecEffect specEffect = 6;
inline bool SCHitMultiFish::_internal_has_speceffect() const {
  return this != internal_default_instance() && speceffect_ != nullptr;
}
inline bool SCHitMultiFish::has_speceffect() const {
  return _internal_has_speceffect();
}
inline void SCHitMultiFish::clear_speceffect() {
  if (GetArena() == nullptr && speceffect_ != nullptr) {
    delete speceffect_;
  }
  speceffect_ = nullptr;
}
inline const ::BYDLD::SpecEffect& SCHitMultiFish::_internal_speceffect() const {
  const ::BYDLD::SpecEffect* p = speceffect_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::SpecEffect&>(
      ::BYDLD::_SpecEffect_default_instance_);
}
inline const ::BYDLD::SpecEffect& SCHitMultiFish::speceffect() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHitMultiFish.specEffect)
  return _internal_speceffect();
}
inline void SCHitMultiFish::unsafe_arena_set_allocated_speceffect(
    ::BYDLD::SpecEffect* speceffect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speceffect_);
  }
  speceffect_ = speceffect;
  if (speceffect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCHitMultiFish.specEffect)
}
inline ::BYDLD::SpecEffect* SCHitMultiFish::release_speceffect() {
  
  ::BYDLD::SpecEffect* temp = speceffect_;
  speceffect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::SpecEffect* SCHitMultiFish::unsafe_arena_release_speceffect() {
  // @@protoc_insertion_point(field_release:BYDLD.SCHitMultiFish.specEffect)
  
  ::BYDLD::SpecEffect* temp = speceffect_;
  speceffect_ = nullptr;
  return temp;
}
inline ::BYDLD::SpecEffect* SCHitMultiFish::_internal_mutable_speceffect() {
  
  if (speceffect_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::SpecEffect>(GetArena());
    speceffect_ = p;
  }
  return speceffect_;
}
inline ::BYDLD::SpecEffect* SCHitMultiFish::mutable_speceffect() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHitMultiFish.specEffect)
  return _internal_mutable_speceffect();
}
inline void SCHitMultiFish::set_allocated_speceffect(::BYDLD::SpecEffect* speceffect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete speceffect_;
  }
  if (speceffect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speceffect);
    if (message_arena != submessage_arena) {
      speceffect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speceffect, submessage_arena);
    }
    
  } else {
    
  }
  speceffect_ = speceffect;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCHitMultiFish.specEffect)
}

// -------------------------------------------------------------------

// CSSyncMoney

// int32 chair_idx = 1;
inline void CSSyncMoney::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncMoney::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncMoney::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncMoney.chair_idx)
  return _internal_chair_idx();
}
inline void CSSyncMoney::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSSyncMoney::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncMoney.chair_idx)
}

// int32 type = 2;
inline void CSSyncMoney::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncMoney::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncMoney::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncMoney.type)
  return _internal_type();
}
inline void CSSyncMoney::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSSyncMoney::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncMoney.type)
}

// -------------------------------------------------------------------

// SCSyncMoney

// int32 chair_idx = 1;
inline void SCSyncMoney::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncMoney::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncMoney::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.chair_idx)
}

// int64 score = 2;
inline void SCSyncMoney::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCSyncMoney::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCSyncMoney::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.score)
  return _internal_score();
}
inline void SCSyncMoney::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SCSyncMoney::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.score)
}

// int32 type = 3;
inline void SCSyncMoney::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.type)
  return _internal_type();
}
inline void SCSyncMoney::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCSyncMoney::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.type)
}

// int32 delta = 4;
inline void SCSyncMoney::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_delta() const {
  return delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::delta() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.delta)
  return _internal_delta();
}
inline void SCSyncMoney::_internal_set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
}
inline void SCSyncMoney::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.delta)
}

// int32 invalid_score = 5;
inline void SCSyncMoney::clear_invalid_score() {
  invalid_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_invalid_score() const {
  return invalid_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::invalid_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.invalid_score)
  return _internal_invalid_score();
}
inline void SCSyncMoney::_internal_set_invalid_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_score_ = value;
}
inline void SCSyncMoney::set_invalid_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.invalid_score)
}

// int32 freetime_score = 6;
inline void SCSyncMoney::clear_freetime_score() {
  freetime_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_freetime_score() const {
  return freetime_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::freetime_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.freetime_score)
  return _internal_freetime_score();
}
inline void SCSyncMoney::_internal_set_freetime_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  freetime_score_ = value;
}
inline void SCSyncMoney::set_freetime_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_freetime_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.freetime_score)
}

// int32 ticket = 7;
inline void SCSyncMoney::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::ticket() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.ticket)
  return _internal_ticket();
}
inline void SCSyncMoney::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCSyncMoney::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.ticket)
}

// int32 ingot_score = 8;
inline void SCSyncMoney::clear_ingot_score() {
  ingot_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_ingot_score() const {
  return ingot_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::ingot_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncMoney.ingot_score)
  return _internal_ingot_score();
}
inline void SCSyncMoney::_internal_set_ingot_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_score_ = value;
}
inline void SCSyncMoney::set_ingot_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncMoney.ingot_score)
}

// -------------------------------------------------------------------

// FishTrace

// float x = 1;
inline void FishTrace::clear_x() {
  x_ = 0;
}
inline float FishTrace::_internal_x() const {
  return x_;
}
inline float FishTrace::x() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTrace.x)
  return _internal_x();
}
inline void FishTrace::_internal_set_x(float value) {
  
  x_ = value;
}
inline void FishTrace::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTrace.x)
}

// float y = 2;
inline void FishTrace::clear_y() {
  y_ = 0;
}
inline float FishTrace::_internal_y() const {
  return y_;
}
inline float FishTrace::y() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTrace.y)
  return _internal_y();
}
inline void FishTrace::_internal_set_y(float value) {
  
  y_ = value;
}
inline void FishTrace::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTrace.y)
}

// float z = 3;
inline void FishTrace::clear_z() {
  z_ = 0;
}
inline float FishTrace::_internal_z() const {
  return z_;
}
inline float FishTrace::z() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTrace.z)
  return _internal_z();
}
inline void FishTrace::_internal_set_z(float value) {
  
  z_ = value;
}
inline void FishTrace::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTrace.z)
}

// float wait_time = 4;
inline void FishTrace::clear_wait_time() {
  wait_time_ = 0;
}
inline float FishTrace::_internal_wait_time() const {
  return wait_time_;
}
inline float FishTrace::wait_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTrace.wait_time)
  return _internal_wait_time();
}
inline void FishTrace::_internal_set_wait_time(float value) {
  
  wait_time_ = value;
}
inline void FishTrace::set_wait_time(float value) {
  _internal_set_wait_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTrace.wait_time)
}

// -------------------------------------------------------------------

// SCFishTracesList

// repeated .BYDLD.FishTraces fish_traces = 1;
inline int SCFishTracesList::_internal_fish_traces_size() const {
  return fish_traces_.size();
}
inline int SCFishTracesList::fish_traces_size() const {
  return _internal_fish_traces_size();
}
inline void SCFishTracesList::clear_fish_traces() {
  fish_traces_.Clear();
}
inline ::BYDLD::FishTraces* SCFishTracesList::mutable_fish_traces(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCFishTracesList.fish_traces)
  return fish_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
SCFishTracesList::mutable_fish_traces() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCFishTracesList.fish_traces)
  return &fish_traces_;
}
inline const ::BYDLD::FishTraces& SCFishTracesList::_internal_fish_traces(int index) const {
  return fish_traces_.Get(index);
}
inline const ::BYDLD::FishTraces& SCFishTracesList::fish_traces(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCFishTracesList.fish_traces)
  return _internal_fish_traces(index);
}
inline ::BYDLD::FishTraces* SCFishTracesList::_internal_add_fish_traces() {
  return fish_traces_.Add();
}
inline ::BYDLD::FishTraces* SCFishTracesList::add_fish_traces() {
  // @@protoc_insertion_point(field_add:BYDLD.SCFishTracesList.fish_traces)
  return _internal_add_fish_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
SCFishTracesList::fish_traces() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCFishTracesList.fish_traces)
  return fish_traces_;
}

// bool accelerate_flag = 2;
inline void SCFishTracesList::clear_accelerate_flag() {
  accelerate_flag_ = false;
}
inline bool SCFishTracesList::_internal_accelerate_flag() const {
  return accelerate_flag_;
}
inline bool SCFishTracesList::accelerate_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCFishTracesList.accelerate_flag)
  return _internal_accelerate_flag();
}
inline void SCFishTracesList::_internal_set_accelerate_flag(bool value) {
  
  accelerate_flag_ = value;
}
inline void SCFishTracesList::set_accelerate_flag(bool value) {
  _internal_set_accelerate_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCFishTracesList.accelerate_flag)
}

// -------------------------------------------------------------------

// FishTraces

// int32 fish_uid = 1;
inline void FishTraces::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.fish_uid)
  return _internal_fish_uid();
}
inline void FishTraces::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void FishTraces::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.fish_uid)
}

// int32 fish_id = 2;
inline void FishTraces::clear_fish_id() {
  fish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_fish_id() const {
  return fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::fish_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.fish_id)
  return _internal_fish_id();
}
inline void FishTraces::_internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_id_ = value;
}
inline void FishTraces::set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.fish_id)
}

// int32 live_time = 3;
inline void FishTraces::clear_live_time() {
  live_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_live_time() const {
  return live_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::live_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.live_time)
  return _internal_live_time();
}
inline void FishTraces::_internal_set_live_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  live_time_ = value;
}
inline void FishTraces::set_live_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_live_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.live_time)
}

// float speed = 4;
inline void FishTraces::clear_speed() {
  speed_ = 0;
}
inline float FishTraces::_internal_speed() const {
  return speed_;
}
inline float FishTraces::speed() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.speed)
  return _internal_speed();
}
inline void FishTraces::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void FishTraces::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.speed)
}

// int32 route_type = 5;
inline void FishTraces::clear_route_type() {
  route_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_route_type() const {
  return route_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::route_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.route_type)
  return _internal_route_type();
}
inline void FishTraces::_internal_set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  route_type_ = value;
}
inline void FishTraces::set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.route_type)
}

// repeated .BYDLD.FishTrace fish_trace = 6;
inline int FishTraces::_internal_fish_trace_size() const {
  return fish_trace_.size();
}
inline int FishTraces::fish_trace_size() const {
  return _internal_fish_trace_size();
}
inline void FishTraces::clear_fish_trace() {
  fish_trace_.Clear();
}
inline ::BYDLD::FishTrace* FishTraces::mutable_fish_trace(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.FishTraces.fish_trace)
  return fish_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTrace >*
FishTraces::mutable_fish_trace() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.FishTraces.fish_trace)
  return &fish_trace_;
}
inline const ::BYDLD::FishTrace& FishTraces::_internal_fish_trace(int index) const {
  return fish_trace_.Get(index);
}
inline const ::BYDLD::FishTrace& FishTraces::fish_trace(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.fish_trace)
  return _internal_fish_trace(index);
}
inline ::BYDLD::FishTrace* FishTraces::_internal_add_fish_trace() {
  return fish_trace_.Add();
}
inline ::BYDLD::FishTrace* FishTraces::add_fish_trace() {
  // @@protoc_insertion_point(field_add:BYDLD.FishTraces.fish_trace)
  return _internal_add_fish_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTrace >&
FishTraces::fish_trace() const {
  // @@protoc_insertion_point(field_list:BYDLD.FishTraces.fish_trace)
  return fish_trace_;
}

// int32 fish_cur_point = 7;
inline void FishTraces::clear_fish_cur_point() {
  fish_cur_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_fish_cur_point() const {
  return fish_cur_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::fish_cur_point() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.fish_cur_point)
  return _internal_fish_cur_point();
}
inline void FishTraces::_internal_set_fish_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_cur_point_ = value;
}
inline void FishTraces::set_fish_cur_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_cur_point(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.fish_cur_point)
}

// bool already_move = 8;
inline void FishTraces::clear_already_move() {
  already_move_ = false;
}
inline bool FishTraces::_internal_already_move() const {
  return already_move_;
}
inline bool FishTraces::already_move() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.already_move)
  return _internal_already_move();
}
inline void FishTraces::_internal_set_already_move(bool value) {
  
  already_move_ = value;
}
inline void FishTraces::set_already_move(bool value) {
  _internal_set_already_move(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.already_move)
}

// float x = 9;
inline void FishTraces::clear_x() {
  x_ = 0;
}
inline float FishTraces::_internal_x() const {
  return x_;
}
inline float FishTraces::x() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.x)
  return _internal_x();
}
inline void FishTraces::_internal_set_x(float value) {
  
  x_ = value;
}
inline void FishTraces::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.x)
}

// float y = 10;
inline void FishTraces::clear_y() {
  y_ = 0;
}
inline float FishTraces::_internal_y() const {
  return y_;
}
inline float FishTraces::y() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.y)
  return _internal_y();
}
inline void FishTraces::_internal_set_y(float value) {
  
  y_ = value;
}
inline void FishTraces::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.y)
}

// float time = 11;
inline void FishTraces::clear_time() {
  time_ = 0;
}
inline float FishTraces::_internal_time() const {
  return time_;
}
inline float FishTraces::time() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.time)
  return _internal_time();
}
inline void FishTraces::_internal_set_time(float value) {
  
  time_ = value;
}
inline void FishTraces::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.time)
}

// int32 stage = 12;
inline void FishTraces::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::stage() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.stage)
  return _internal_stage();
}
inline void FishTraces::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void FishTraces::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.stage)
}

// int32 sub_stage = 13;
inline void FishTraces::clear_sub_stage() {
  sub_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_sub_stage() const {
  return sub_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::sub_stage() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.sub_stage)
  return _internal_sub_stage();
}
inline void FishTraces::_internal_set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_stage_ = value;
}
inline void FishTraces::set_sub_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_stage(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.sub_stage)
}

// int32 lifespan = 14;
inline void FishTraces::clear_lifespan() {
  lifespan_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_lifespan() const {
  return lifespan_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::lifespan() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.lifespan)
  return _internal_lifespan();
}
inline void FishTraces::_internal_set_lifespan(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lifespan_ = value;
}
inline void FishTraces::set_lifespan(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lifespan(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.lifespan)
}

// int32 frozen_time = 15;
inline void FishTraces::clear_frozen_time() {
  frozen_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_frozen_time() const {
  return frozen_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::frozen_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.frozen_time)
  return _internal_frozen_time();
}
inline void FishTraces::_internal_set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frozen_time_ = value;
}
inline void FishTraces::set_frozen_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frozen_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.frozen_time)
}

// int32 fish_gender = 16;
inline void FishTraces::clear_fish_gender() {
  fish_gender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::_internal_fish_gender() const {
  return fish_gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FishTraces::fish_gender() const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.fish_gender)
  return _internal_fish_gender();
}
inline void FishTraces::_internal_set_fish_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_gender_ = value;
}
inline void FishTraces::set_fish_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_gender(value);
  // @@protoc_insertion_point(field_set:BYDLD.FishTraces.fish_gender)
}

// repeated .BYDLD.FishTraces small_fish_list = 17;
inline int FishTraces::_internal_small_fish_list_size() const {
  return small_fish_list_.size();
}
inline int FishTraces::small_fish_list_size() const {
  return _internal_small_fish_list_size();
}
inline void FishTraces::clear_small_fish_list() {
  small_fish_list_.Clear();
}
inline ::BYDLD::FishTraces* FishTraces::mutable_small_fish_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.FishTraces.small_fish_list)
  return small_fish_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
FishTraces::mutable_small_fish_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.FishTraces.small_fish_list)
  return &small_fish_list_;
}
inline const ::BYDLD::FishTraces& FishTraces::_internal_small_fish_list(int index) const {
  return small_fish_list_.Get(index);
}
inline const ::BYDLD::FishTraces& FishTraces::small_fish_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.FishTraces.small_fish_list)
  return _internal_small_fish_list(index);
}
inline ::BYDLD::FishTraces* FishTraces::_internal_add_small_fish_list() {
  return small_fish_list_.Add();
}
inline ::BYDLD::FishTraces* FishTraces::add_small_fish_list() {
  // @@protoc_insertion_point(field_add:BYDLD.FishTraces.small_fish_list)
  return _internal_add_small_fish_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
FishTraces::small_fish_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.FishTraces.small_fish_list)
  return small_fish_list_;
}

// -------------------------------------------------------------------

// CSSyncFishReq

// int32 chair_idx = 1;
inline void CSSyncFishReq::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishReq::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncFishReq::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncFishReq.chair_idx)
  return _internal_chair_idx();
}
inline void CSSyncFishReq::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSSyncFishReq::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncFishReq.chair_idx)
}

// -------------------------------------------------------------------

// SCSyncFishReq

// int32 chair_idx = 1;
inline void SCSyncFishReq::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishReq::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFishReq::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFishReq.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncFishReq::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncFishReq::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFishReq.chair_idx)
}

// -------------------------------------------------------------------

// CSSyncFishRsp

// repeated .BYDLD.FishTraces fish_traces = 1;
inline int CSSyncFishRsp::_internal_fish_traces_size() const {
  return fish_traces_.size();
}
inline int CSSyncFishRsp::fish_traces_size() const {
  return _internal_fish_traces_size();
}
inline void CSSyncFishRsp::clear_fish_traces() {
  fish_traces_.Clear();
}
inline ::BYDLD::FishTraces* CSSyncFishRsp::mutable_fish_traces(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSSyncFishRsp.fish_traces)
  return fish_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
CSSyncFishRsp::mutable_fish_traces() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CSSyncFishRsp.fish_traces)
  return &fish_traces_;
}
inline const ::BYDLD::FishTraces& CSSyncFishRsp::_internal_fish_traces(int index) const {
  return fish_traces_.Get(index);
}
inline const ::BYDLD::FishTraces& CSSyncFishRsp::fish_traces(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncFishRsp.fish_traces)
  return _internal_fish_traces(index);
}
inline ::BYDLD::FishTraces* CSSyncFishRsp::_internal_add_fish_traces() {
  return fish_traces_.Add();
}
inline ::BYDLD::FishTraces* CSSyncFishRsp::add_fish_traces() {
  // @@protoc_insertion_point(field_add:BYDLD.CSSyncFishRsp.fish_traces)
  return _internal_add_fish_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
CSSyncFishRsp::fish_traces() const {
  // @@protoc_insertion_point(field_list:BYDLD.CSSyncFishRsp.fish_traces)
  return fish_traces_;
}

// bool accelerate_flag = 2;
inline void CSSyncFishRsp::clear_accelerate_flag() {
  accelerate_flag_ = false;
}
inline bool CSSyncFishRsp::_internal_accelerate_flag() const {
  return accelerate_flag_;
}
inline bool CSSyncFishRsp::accelerate_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncFishRsp.accelerate_flag)
  return _internal_accelerate_flag();
}
inline void CSSyncFishRsp::_internal_set_accelerate_flag(bool value) {
  
  accelerate_flag_ = value;
}
inline void CSSyncFishRsp::set_accelerate_flag(bool value) {
  _internal_set_accelerate_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncFishRsp.accelerate_flag)
}

// -------------------------------------------------------------------

// SCSyncFishRsp

// repeated .BYDLD.FishTraces fish_traces = 1;
inline int SCSyncFishRsp::_internal_fish_traces_size() const {
  return fish_traces_.size();
}
inline int SCSyncFishRsp::fish_traces_size() const {
  return _internal_fish_traces_size();
}
inline void SCSyncFishRsp::clear_fish_traces() {
  fish_traces_.Clear();
}
inline ::BYDLD::FishTraces* SCSyncFishRsp::mutable_fish_traces(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCSyncFishRsp.fish_traces)
  return fish_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >*
SCSyncFishRsp::mutable_fish_traces() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCSyncFishRsp.fish_traces)
  return &fish_traces_;
}
inline const ::BYDLD::FishTraces& SCSyncFishRsp::_internal_fish_traces(int index) const {
  return fish_traces_.Get(index);
}
inline const ::BYDLD::FishTraces& SCSyncFishRsp::fish_traces(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFishRsp.fish_traces)
  return _internal_fish_traces(index);
}
inline ::BYDLD::FishTraces* SCSyncFishRsp::_internal_add_fish_traces() {
  return fish_traces_.Add();
}
inline ::BYDLD::FishTraces* SCSyncFishRsp::add_fish_traces() {
  // @@protoc_insertion_point(field_add:BYDLD.SCSyncFishRsp.fish_traces)
  return _internal_add_fish_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::FishTraces >&
SCSyncFishRsp::fish_traces() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCSyncFishRsp.fish_traces)
  return fish_traces_;
}

// bool accelerate_flag = 2;
inline void SCSyncFishRsp::clear_accelerate_flag() {
  accelerate_flag_ = false;
}
inline bool SCSyncFishRsp::_internal_accelerate_flag() const {
  return accelerate_flag_;
}
inline bool SCSyncFishRsp::accelerate_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFishRsp.accelerate_flag)
  return _internal_accelerate_flag();
}
inline void SCSyncFishRsp::_internal_set_accelerate_flag(bool value) {
  
  accelerate_flag_ = value;
}
inline void SCSyncFishRsp::set_accelerate_flag(bool value) {
  _internal_set_accelerate_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFishRsp.accelerate_flag)
}

// -------------------------------------------------------------------

// SCChangeScene

// int32 scene_index = 1;
inline void SCChangeScene::clear_scene_index() {
  scene_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChangeScene::_internal_scene_index() const {
  return scene_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChangeScene::scene_index() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChangeScene.scene_index)
  return _internal_scene_index();
}
inline void SCChangeScene::_internal_set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_index_ = value;
}
inline void SCChangeScene::set_scene_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_index(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChangeScene.scene_index)
}

// -------------------------------------------------------------------

// CSFishOutsideScreen

// int32 fish_uid = 1;
inline void CSFishOutsideScreen::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFishOutsideScreen::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSFishOutsideScreen::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSFishOutsideScreen.fish_uid)
  return _internal_fish_uid();
}
inline void CSFishOutsideScreen::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void CSFishOutsideScreen::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSFishOutsideScreen.fish_uid)
}

// -------------------------------------------------------------------

// CSLockFish

// int32 chair_idx = 1;
inline void CSLockFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLockFish.chair_idx)
  return _internal_chair_idx();
}
inline void CSLockFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSLockFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLockFish.chair_idx)
}

// int32 fish_uid = 2;
inline void CSLockFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLockFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLockFish.fish_uid)
  return _internal_fish_uid();
}
inline void CSLockFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void CSLockFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLockFish.fish_uid)
}

// bool is_open = 3;
inline void CSLockFish::clear_is_open() {
  is_open_ = false;
}
inline bool CSLockFish::_internal_is_open() const {
  return is_open_;
}
inline bool CSLockFish::is_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLockFish.is_open)
  return _internal_is_open();
}
inline void CSLockFish::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void CSLockFish::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLockFish.is_open)
}

// -------------------------------------------------------------------

// SCLockFish

// int32 chair_idx = 1;
inline void SCLockFish::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLockFish.chair_idx)
  return _internal_chair_idx();
}
inline void SCLockFish::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCLockFish::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLockFish.chair_idx)
}

// int32 fish_uid = 2;
inline void SCLockFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLockFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLockFish.fish_uid)
  return _internal_fish_uid();
}
inline void SCLockFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCLockFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLockFish.fish_uid)
}

// bool is_open = 3;
inline void SCLockFish::clear_is_open() {
  is_open_ = false;
}
inline bool SCLockFish::_internal_is_open() const {
  return is_open_;
}
inline bool SCLockFish::is_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLockFish.is_open)
  return _internal_is_open();
}
inline void SCLockFish::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void SCLockFish::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLockFish.is_open)
}

// -------------------------------------------------------------------

// CSSetSkill

// int32 chair_idx = 1;
inline void CSSetSkill::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetSkill::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetSkill::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetSkill.chair_idx)
  return _internal_chair_idx();
}
inline void CSSetSkill::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSSetSkill::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetSkill.chair_idx)
}

// int32 double_flag = 2;
inline void CSSetSkill::clear_double_flag() {
  double_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetSkill::_internal_double_flag() const {
  return double_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetSkill::double_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetSkill.double_flag)
  return _internal_double_flag();
}
inline void CSSetSkill::_internal_set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  double_flag_ = value;
}
inline void CSSetSkill::set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_double_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetSkill.double_flag)
}

// int32 through_flag = 3;
inline void CSSetSkill::clear_through_flag() {
  through_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetSkill::_internal_through_flag() const {
  return through_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetSkill::through_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetSkill.through_flag)
  return _internal_through_flag();
}
inline void CSSetSkill::_internal_set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  through_flag_ = value;
}
inline void CSSetSkill::set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_through_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetSkill.through_flag)
}

// bool auto_flag = 4;
inline void CSSetSkill::clear_auto_flag() {
  auto_flag_ = false;
}
inline bool CSSetSkill::_internal_auto_flag() const {
  return auto_flag_;
}
inline bool CSSetSkill::auto_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetSkill.auto_flag)
  return _internal_auto_flag();
}
inline void CSSetSkill::_internal_set_auto_flag(bool value) {
  
  auto_flag_ = value;
}
inline void CSSetSkill::set_auto_flag(bool value) {
  _internal_set_auto_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetSkill.auto_flag)
}

// -------------------------------------------------------------------

// SCSetSkill

// int32 chair_idx = 1;
inline void SCSetSkill::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetSkill::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetSkill::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetSkill.chair_idx)
  return _internal_chair_idx();
}
inline void SCSetSkill::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSetSkill::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetSkill.chair_idx)
}

// int32 double_flag = 2;
inline void SCSetSkill::clear_double_flag() {
  double_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetSkill::_internal_double_flag() const {
  return double_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetSkill::double_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetSkill.double_flag)
  return _internal_double_flag();
}
inline void SCSetSkill::_internal_set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  double_flag_ = value;
}
inline void SCSetSkill::set_double_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_double_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetSkill.double_flag)
}

// int32 through_flag = 3;
inline void SCSetSkill::clear_through_flag() {
  through_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetSkill::_internal_through_flag() const {
  return through_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetSkill::through_flag() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetSkill.through_flag)
  return _internal_through_flag();
}
inline void SCSetSkill::_internal_set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  through_flag_ = value;
}
inline void SCSetSkill::set_through_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_through_flag(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetSkill.through_flag)
}

// -------------------------------------------------------------------

// SCUserTimeoutKick

// int32 count_sec = 1;
inline void SCUserTimeoutKick::clear_count_sec() {
  count_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserTimeoutKick::_internal_count_sec() const {
  return count_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserTimeoutKick::count_sec() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserTimeoutKick.count_sec)
  return _internal_count_sec();
}
inline void SCUserTimeoutKick::_internal_set_count_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_sec_ = value;
}
inline void SCUserTimeoutKick::set_count_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_sec(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserTimeoutKick.count_sec)
}

// -------------------------------------------------------------------

// CSUserRunBackground

// int32 chair_idx = 1;
inline void CSUserRunBackground::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserRunBackground::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserRunBackground::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserRunBackground.chair_idx)
  return _internal_chair_idx();
}
inline void CSUserRunBackground::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSUserRunBackground::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserRunBackground.chair_idx)
}

// bool background = 2;
inline void CSUserRunBackground::clear_background() {
  background_ = false;
}
inline bool CSUserRunBackground::_internal_background() const {
  return background_;
}
inline bool CSUserRunBackground::background() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserRunBackground.background)
  return _internal_background();
}
inline void CSUserRunBackground::_internal_set_background(bool value) {
  
  background_ = value;
}
inline void CSUserRunBackground::set_background(bool value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserRunBackground.background)
}

// -------------------------------------------------------------------

// SCUserRunBackground

// repeated .BYDLD.StationBase station_base_list = 1;
inline int SCUserRunBackground::_internal_station_base_list_size() const {
  return station_base_list_.size();
}
inline int SCUserRunBackground::station_base_list_size() const {
  return _internal_station_base_list_size();
}
inline void SCUserRunBackground::clear_station_base_list() {
  station_base_list_.Clear();
}
inline ::BYDLD::StationBase* SCUserRunBackground::mutable_station_base_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserRunBackground.station_base_list)
  return station_base_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >*
SCUserRunBackground::mutable_station_base_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCUserRunBackground.station_base_list)
  return &station_base_list_;
}
inline const ::BYDLD::StationBase& SCUserRunBackground::_internal_station_base_list(int index) const {
  return station_base_list_.Get(index);
}
inline const ::BYDLD::StationBase& SCUserRunBackground::station_base_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserRunBackground.station_base_list)
  return _internal_station_base_list(index);
}
inline ::BYDLD::StationBase* SCUserRunBackground::_internal_add_station_base_list() {
  return station_base_list_.Add();
}
inline ::BYDLD::StationBase* SCUserRunBackground::add_station_base_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCUserRunBackground.station_base_list)
  return _internal_add_station_base_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::StationBase >&
SCUserRunBackground::station_base_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCUserRunBackground.station_base_list)
  return station_base_list_;
}

// -------------------------------------------------------------------

// CSUpdateHallProp

// int32 chair_idx = 1;
inline void CSUpdateHallProp::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateHallProp::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateHallProp::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUpdateHallProp.chair_idx)
  return _internal_chair_idx();
}
inline void CSUpdateHallProp::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSUpdateHallProp::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUpdateHallProp.chair_idx)
}

// int32 configId = 2;
inline void CSUpdateHallProp::clear_configid() {
  configid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateHallProp::_internal_configid() const {
  return configid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUpdateHallProp::configid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUpdateHallProp.configId)
  return _internal_configid();
}
inline void CSUpdateHallProp::_internal_set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  configid_ = value;
}
inline void CSUpdateHallProp::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUpdateHallProp.configId)
}

// -------------------------------------------------------------------

// CSHeartBeat

// int32 chair_idx = 1;
inline void CSHeartBeat::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHeartBeat::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHeartBeat::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHeartBeat.chair_idx)
  return _internal_chair_idx();
}
inline void CSHeartBeat::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSHeartBeat::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHeartBeat.chair_idx)
}

// -------------------------------------------------------------------

// SCHeartBeat

// int32 chair_idx = 1;
inline void SCHeartBeat::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHeartBeat::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHeartBeat::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHeartBeat.chair_idx)
  return _internal_chair_idx();
}
inline void SCHeartBeat::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCHeartBeat::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHeartBeat.chair_idx)
}

// -------------------------------------------------------------------

// SCComTask

// int32 gun_ratio = 1;
inline void SCComTask::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::gun_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCComTask.gun_ratio)
  return _internal_gun_ratio();
}
inline void SCComTask::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void SCComTask::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCComTask.gun_ratio)
}

// int32 gun_level = 2;
inline void SCComTask::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCComTask.gun_level)
  return _internal_gun_level();
}
inline void SCComTask::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCComTask::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCComTask.gun_level)
}

// int32 award = 3;
inline void SCComTask::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCComTask.award)
  return _internal_award();
}
inline void SCComTask::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCComTask::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCComTask.award)
}

// int32 ticket = 4;
inline void SCComTask::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCComTask::ticket() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCComTask.ticket)
  return _internal_ticket();
}
inline void SCComTask::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCComTask::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCComTask.ticket)
}

// -------------------------------------------------------------------

// CSTaskInfo

// -------------------------------------------------------------------

// SCTaskInfo

// int32 gun_ratio = 1;
inline void SCTaskInfo::clear_gun_ratio() {
  gun_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_gun_ratio() const {
  return gun_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::gun_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.gun_ratio)
  return _internal_gun_ratio();
}
inline void SCTaskInfo::_internal_set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_ratio_ = value;
}
inline void SCTaskInfo::set_gun_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.gun_ratio)
}

// int32 gun_level = 2;
inline void SCTaskInfo::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.gun_level)
  return _internal_gun_level();
}
inline void SCTaskInfo::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCTaskInfo::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.gun_level)
}

// int32 cur_num = 3;
inline void SCTaskInfo::clear_cur_num() {
  cur_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_cur_num() const {
  return cur_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::cur_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.cur_num)
  return _internal_cur_num();
}
inline void SCTaskInfo::_internal_set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_num_ = value;
}
inline void SCTaskInfo::set_cur_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.cur_num)
}

// int32 total_num = 4;
inline void SCTaskInfo::clear_total_num() {
  total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::total_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.total_num)
  return _internal_total_num();
}
inline void SCTaskInfo::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_num_ = value;
}
inline void SCTaskInfo::set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.total_num)
}

// int32 vip_level = 5;
inline void SCTaskInfo::clear_vip_level() {
  vip_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_vip_level() const {
  return vip_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::vip_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.vip_level)
  return _internal_vip_level();
}
inline void SCTaskInfo::_internal_set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_level_ = value;
}
inline void SCTaskInfo::set_vip_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.vip_level)
}

// int32 is_unlock = 6;
inline void SCTaskInfo::clear_is_unlock() {
  is_unlock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_is_unlock() const {
  return is_unlock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::is_unlock() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.is_unlock)
  return _internal_is_unlock();
}
inline void SCTaskInfo::_internal_set_is_unlock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_unlock_ = value;
}
inline void SCTaskInfo::set_is_unlock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_unlock(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.is_unlock)
}

// int32 award = 7;
inline void SCTaskInfo::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.award)
  return _internal_award();
}
inline void SCTaskInfo::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void SCTaskInfo::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.award)
}

// bool is_vip_unlock = 8;
inline void SCTaskInfo::clear_is_vip_unlock() {
  is_vip_unlock_ = false;
}
inline bool SCTaskInfo::_internal_is_vip_unlock() const {
  return is_vip_unlock_;
}
inline bool SCTaskInfo::is_vip_unlock() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.is_vip_unlock)
  return _internal_is_vip_unlock();
}
inline void SCTaskInfo::_internal_set_is_vip_unlock(bool value) {
  
  is_vip_unlock_ = value;
}
inline void SCTaskInfo::set_is_vip_unlock(bool value) {
  _internal_set_is_vip_unlock(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.is_vip_unlock)
}

// int32 ticket = 9;
inline void SCTaskInfo::clear_ticket() {
  ticket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTaskInfo::ticket() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTaskInfo.ticket)
  return _internal_ticket();
}
inline void SCTaskInfo::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ticket_ = value;
}
inline void SCTaskInfo::set_ticket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTaskInfo.ticket)
}

// -------------------------------------------------------------------

// UserScoreRecord

// int32 type = 1;
inline void UserScoreRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserScoreRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserScoreRecord::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserScoreRecord.type)
  return _internal_type();
}
inline void UserScoreRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void UserScoreRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserScoreRecord.type)
}

// string content = 2;
inline void UserScoreRecord::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& UserScoreRecord::content() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserScoreRecord.content)
  return _internal_content();
}
inline void UserScoreRecord::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserScoreRecord.content)
}
inline std::string* UserScoreRecord::mutable_content() {
  // @@protoc_insertion_point(field_mutable:BYDLD.UserScoreRecord.content)
  return _internal_mutable_content();
}
inline const std::string& UserScoreRecord::_internal_content() const {
  return content_.Get();
}
inline void UserScoreRecord::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserScoreRecord::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.UserScoreRecord.content)
}
inline void UserScoreRecord::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.UserScoreRecord.content)
}
inline void UserScoreRecord::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.UserScoreRecord.content)
}
inline std::string* UserScoreRecord::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserScoreRecord::release_content() {
  // @@protoc_insertion_point(field_release:BYDLD.UserScoreRecord.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserScoreRecord::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.UserScoreRecord.content)
}

// string score = 3;
inline void UserScoreRecord::clear_score() {
  score_.ClearToEmpty();
}
inline const std::string& UserScoreRecord::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserScoreRecord.score)
  return _internal_score();
}
inline void UserScoreRecord::set_score(const std::string& value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserScoreRecord.score)
}
inline std::string* UserScoreRecord::mutable_score() {
  // @@protoc_insertion_point(field_mutable:BYDLD.UserScoreRecord.score)
  return _internal_mutable_score();
}
inline const std::string& UserScoreRecord::_internal_score() const {
  return score_.Get();
}
inline void UserScoreRecord::_internal_set_score(const std::string& value) {
  
  score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserScoreRecord::set_score(std::string&& value) {
  
  score_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.UserScoreRecord.score)
}
inline void UserScoreRecord::set_score(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.UserScoreRecord.score)
}
inline void UserScoreRecord::set_score(const char* value,
    size_t size) {
  
  score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.UserScoreRecord.score)
}
inline std::string* UserScoreRecord::_internal_mutable_score() {
  
  return score_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserScoreRecord::release_score() {
  // @@protoc_insertion_point(field_release:BYDLD.UserScoreRecord.score)
  return score_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserScoreRecord::set_allocated_score(std::string* score) {
  if (score != nullptr) {
    
  } else {
    
  }
  score_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), score,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.UserScoreRecord.score)
}

// -------------------------------------------------------------------

// CSFreeTimeEnd

// -------------------------------------------------------------------

// SCSyncFreeTimes

// int32 times = 1;
inline void SCSyncFreeTimes::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::times() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFreeTimes.times)
  return _internal_times();
}
inline void SCSyncFreeTimes::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void SCSyncFreeTimes::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFreeTimes.times)
}

// int32 level = 2;
inline void SCSyncFreeTimes::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFreeTimes.level)
  return _internal_level();
}
inline void SCSyncFreeTimes::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SCSyncFreeTimes::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFreeTimes.level)
}

// int32 chair_idx = 3;
inline void SCSyncFreeTimes::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFreeTimes.chair_idx)
  return _internal_chair_idx();
}
inline void SCSyncFreeTimes::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSyncFreeTimes::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFreeTimes.chair_idx)
}

// int32 type = 4;
inline void SCSyncFreeTimes::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFreeTimes.type)
  return _internal_type();
}
inline void SCSyncFreeTimes::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCSyncFreeTimes::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFreeTimes.type)
}

// int32 exchange = 5;
inline void SCSyncFreeTimes::clear_exchange() {
  exchange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::_internal_exchange() const {
  return exchange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncFreeTimes::exchange() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFreeTimes.exchange)
  return _internal_exchange();
}
inline void SCSyncFreeTimes::_internal_set_exchange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_ = value;
}
inline void SCSyncFreeTimes::set_exchange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncFreeTimes.exchange)
}

// -------------------------------------------------------------------

// CSClickStatistic

// string num = 1;
inline void CSClickStatistic::clear_num() {
  num_.ClearToEmpty();
}
inline const std::string& CSClickStatistic::num() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSClickStatistic.num)
  return _internal_num();
}
inline void CSClickStatistic::set_num(const std::string& value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSClickStatistic.num)
}
inline std::string* CSClickStatistic::mutable_num() {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSClickStatistic.num)
  return _internal_mutable_num();
}
inline const std::string& CSClickStatistic::_internal_num() const {
  return num_.Get();
}
inline void CSClickStatistic::_internal_set_num(const std::string& value) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSClickStatistic::set_num(std::string&& value) {
  
  num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.CSClickStatistic.num)
}
inline void CSClickStatistic::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.CSClickStatistic.num)
}
inline void CSClickStatistic::set_num(const char* value,
    size_t size) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.CSClickStatistic.num)
}
inline std::string* CSClickStatistic::_internal_mutable_num() {
  
  return num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSClickStatistic::release_num() {
  // @@protoc_insertion_point(field_release:BYDLD.CSClickStatistic.num)
  return num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSClickStatistic::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    
  } else {
    
  }
  num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.CSClickStatistic.num)
}

// -------------------------------------------------------------------

// JumpHighArena

// bool is_open = 1;
inline void JumpHighArena::clear_is_open() {
  is_open_ = false;
}
inline bool JumpHighArena::_internal_is_open() const {
  return is_open_;
}
inline bool JumpHighArena::is_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.JumpHighArena.is_open)
  return _internal_is_open();
}
inline void JumpHighArena::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void JumpHighArena::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.JumpHighArena.is_open)
}

// int32 vip = 2;
inline void JumpHighArena::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.JumpHighArena.vip)
  return _internal_vip();
}
inline void JumpHighArena::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void JumpHighArena::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.JumpHighArena.vip)
}

// int32 coin = 3;
inline void JumpHighArena::clear_coin() {
  coin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::coin() const {
  // @@protoc_insertion_point(field_get:BYDLD.JumpHighArena.coin)
  return _internal_coin();
}
inline void JumpHighArena::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coin_ = value;
}
inline void JumpHighArena::set_coin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:BYDLD.JumpHighArena.coin)
}

// int32 game_time = 4;
inline void JumpHighArena::clear_game_time() {
  game_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_game_time() const {
  return game_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::game_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.JumpHighArena.game_time)
  return _internal_game_time();
}
inline void JumpHighArena::_internal_set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_time_ = value;
}
inline void JumpHighArena::set_game_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.JumpHighArena.game_time)
}

// repeated int32 fish_id = 5;
inline int JumpHighArena::_internal_fish_id_size() const {
  return fish_id_.size();
}
inline int JumpHighArena::fish_id_size() const {
  return _internal_fish_id_size();
}
inline void JumpHighArena::clear_fish_id() {
  fish_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::_internal_fish_id(int index) const {
  return fish_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpHighArena::fish_id(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.JumpHighArena.fish_id)
  return _internal_fish_id(index);
}
inline void JumpHighArena::set_fish_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fish_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.JumpHighArena.fish_id)
}
inline void JumpHighArena::_internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fish_id_.Add(value);
}
inline void JumpHighArena::add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fish_id(value);
  // @@protoc_insertion_point(field_add:BYDLD.JumpHighArena.fish_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
JumpHighArena::_internal_fish_id() const {
  return fish_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
JumpHighArena::fish_id() const {
  // @@protoc_insertion_point(field_list:BYDLD.JumpHighArena.fish_id)
  return _internal_fish_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
JumpHighArena::_internal_mutable_fish_id() {
  return &fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
JumpHighArena::mutable_fish_id() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.JumpHighArena.fish_id)
  return _internal_mutable_fish_id();
}

// -------------------------------------------------------------------

// GiftBag

// bool is_open = 1;
inline void GiftBag::clear_is_open() {
  is_open_ = false;
}
inline bool GiftBag::_internal_is_open() const {
  return is_open_;
}
inline bool GiftBag::is_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.GiftBag.is_open)
  return _internal_is_open();
}
inline void GiftBag::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void GiftBag::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.GiftBag.is_open)
}

// repeated int32 fish_id = 2;
inline int GiftBag::_internal_fish_id_size() const {
  return fish_id_.size();
}
inline int GiftBag::fish_id_size() const {
  return _internal_fish_id_size();
}
inline void GiftBag::clear_fish_id() {
  fish_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftBag::_internal_fish_id(int index) const {
  return fish_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GiftBag::fish_id(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.GiftBag.fish_id)
  return _internal_fish_id(index);
}
inline void GiftBag::set_fish_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fish_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.GiftBag.fish_id)
}
inline void GiftBag::_internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fish_id_.Add(value);
}
inline void GiftBag::add_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fish_id(value);
  // @@protoc_insertion_point(field_add:BYDLD.GiftBag.fish_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GiftBag::_internal_fish_id() const {
  return fish_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GiftBag::fish_id() const {
  // @@protoc_insertion_point(field_list:BYDLD.GiftBag.fish_id)
  return _internal_fish_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GiftBag::_internal_mutable_fish_id() {
  return &fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GiftBag::mutable_fish_id() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.GiftBag.fish_id)
  return _internal_mutable_fish_id();
}

// -------------------------------------------------------------------

// NewYearCardActivityInfo

// bool card_enable = 1;
inline void NewYearCardActivityInfo::clear_card_enable() {
  card_enable_ = false;
}
inline bool NewYearCardActivityInfo::_internal_card_enable() const {
  return card_enable_;
}
inline bool NewYearCardActivityInfo::card_enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardActivityInfo.card_enable)
  return _internal_card_enable();
}
inline void NewYearCardActivityInfo::_internal_set_card_enable(bool value) {
  
  card_enable_ = value;
}
inline void NewYearCardActivityInfo::set_card_enable(bool value) {
  _internal_set_card_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardActivityInfo.card_enable)
}

// int32 card_count = 2;
inline void NewYearCardActivityInfo::clear_card_count() {
  card_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardActivityInfo::_internal_card_count() const {
  return card_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardActivityInfo::card_count() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardActivityInfo.card_count)
  return _internal_card_count();
}
inline void NewYearCardActivityInfo::_internal_set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_count_ = value;
}
inline void NewYearCardActivityInfo::set_card_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardActivityInfo.card_count)
}

// int32 card_vip = 3;
inline void NewYearCardActivityInfo::clear_card_vip() {
  card_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardActivityInfo::_internal_card_vip() const {
  return card_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardActivityInfo::card_vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardActivityInfo.card_vip)
  return _internal_card_vip();
}
inline void NewYearCardActivityInfo::_internal_set_card_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_vip_ = value;
}
inline void NewYearCardActivityInfo::set_card_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardActivityInfo.card_vip)
}

// -------------------------------------------------------------------

// UserPoolActivityInfo

// bool user_pool_show = 1;
inline void UserPoolActivityInfo::clear_user_pool_show() {
  user_pool_show_ = false;
}
inline bool UserPoolActivityInfo::_internal_user_pool_show() const {
  return user_pool_show_;
}
inline bool UserPoolActivityInfo::user_pool_show() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserPoolActivityInfo.user_pool_show)
  return _internal_user_pool_show();
}
inline void UserPoolActivityInfo::_internal_set_user_pool_show(bool value) {
  
  user_pool_show_ = value;
}
inline void UserPoolActivityInfo::set_user_pool_show(bool value) {
  _internal_set_user_pool_show(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserPoolActivityInfo.user_pool_show)
}

// repeated int32 award_fish = 2;
inline int UserPoolActivityInfo::_internal_award_fish_size() const {
  return award_fish_.size();
}
inline int UserPoolActivityInfo::award_fish_size() const {
  return _internal_award_fish_size();
}
inline void UserPoolActivityInfo::clear_award_fish() {
  award_fish_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserPoolActivityInfo::_internal_award_fish(int index) const {
  return award_fish_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserPoolActivityInfo::award_fish(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.UserPoolActivityInfo.award_fish)
  return _internal_award_fish(index);
}
inline void UserPoolActivityInfo::set_award_fish(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  award_fish_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.UserPoolActivityInfo.award_fish)
}
inline void UserPoolActivityInfo::_internal_add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  award_fish_.Add(value);
}
inline void UserPoolActivityInfo::add_award_fish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_award_fish(value);
  // @@protoc_insertion_point(field_add:BYDLD.UserPoolActivityInfo.award_fish)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserPoolActivityInfo::_internal_award_fish() const {
  return award_fish_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserPoolActivityInfo::award_fish() const {
  // @@protoc_insertion_point(field_list:BYDLD.UserPoolActivityInfo.award_fish)
  return _internal_award_fish();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserPoolActivityInfo::_internal_mutable_award_fish() {
  return &award_fish_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserPoolActivityInfo::mutable_award_fish() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.UserPoolActivityInfo.award_fish)
  return _internal_mutable_award_fish();
}

// repeated .BYDLD.Object3 user_pool_limit = 3;
inline int UserPoolActivityInfo::_internal_user_pool_limit_size() const {
  return user_pool_limit_.size();
}
inline int UserPoolActivityInfo::user_pool_limit_size() const {
  return _internal_user_pool_limit_size();
}
inline void UserPoolActivityInfo::clear_user_pool_limit() {
  user_pool_limit_.Clear();
}
inline ::BYDLD::Object3* UserPoolActivityInfo::mutable_user_pool_limit(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.UserPoolActivityInfo.user_pool_limit)
  return user_pool_limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
UserPoolActivityInfo::mutable_user_pool_limit() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.UserPoolActivityInfo.user_pool_limit)
  return &user_pool_limit_;
}
inline const ::BYDLD::Object3& UserPoolActivityInfo::_internal_user_pool_limit(int index) const {
  return user_pool_limit_.Get(index);
}
inline const ::BYDLD::Object3& UserPoolActivityInfo::user_pool_limit(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.UserPoolActivityInfo.user_pool_limit)
  return _internal_user_pool_limit(index);
}
inline ::BYDLD::Object3* UserPoolActivityInfo::_internal_add_user_pool_limit() {
  return user_pool_limit_.Add();
}
inline ::BYDLD::Object3* UserPoolActivityInfo::add_user_pool_limit() {
  // @@protoc_insertion_point(field_add:BYDLD.UserPoolActivityInfo.user_pool_limit)
  return _internal_add_user_pool_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
UserPoolActivityInfo::user_pool_limit() const {
  // @@protoc_insertion_point(field_list:BYDLD.UserPoolActivityInfo.user_pool_limit)
  return user_pool_limit_;
}

// -------------------------------------------------------------------

// DragonBallConfig

// int32 ratio = 1;
inline void DragonBallConfig::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallConfig::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonBallConfig::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallConfig.ratio)
  return _internal_ratio();
}
inline void DragonBallConfig::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void DragonBallConfig::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallConfig.ratio)
}

// bool next = 2;
inline void DragonBallConfig::clear_next() {
  next_ = false;
}
inline bool DragonBallConfig::_internal_next() const {
  return next_;
}
inline bool DragonBallConfig::next() const {
  // @@protoc_insertion_point(field_get:BYDLD.DragonBallConfig.next)
  return _internal_next();
}
inline void DragonBallConfig::_internal_set_next(bool value) {
  
  next_ = value;
}
inline void DragonBallConfig::set_next(bool value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:BYDLD.DragonBallConfig.next)
}

// -------------------------------------------------------------------

// SCActivityInfo

// .BYDLD.JumpHighArena jump = 1;
inline bool SCActivityInfo::_internal_has_jump() const {
  return this != internal_default_instance() && jump_ != nullptr;
}
inline bool SCActivityInfo::has_jump() const {
  return _internal_has_jump();
}
inline void SCActivityInfo::clear_jump() {
  if (GetArena() == nullptr && jump_ != nullptr) {
    delete jump_;
  }
  jump_ = nullptr;
}
inline const ::BYDLD::JumpHighArena& SCActivityInfo::_internal_jump() const {
  const ::BYDLD::JumpHighArena* p = jump_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::JumpHighArena&>(
      ::BYDLD::_JumpHighArena_default_instance_);
}
inline const ::BYDLD::JumpHighArena& SCActivityInfo::jump() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.jump)
  return _internal_jump();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_jump(
    ::BYDLD::JumpHighArena* jump) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jump_);
  }
  jump_ = jump;
  if (jump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCActivityInfo.jump)
}
inline ::BYDLD::JumpHighArena* SCActivityInfo::release_jump() {
  
  ::BYDLD::JumpHighArena* temp = jump_;
  jump_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::JumpHighArena* SCActivityInfo::unsafe_arena_release_jump() {
  // @@protoc_insertion_point(field_release:BYDLD.SCActivityInfo.jump)
  
  ::BYDLD::JumpHighArena* temp = jump_;
  jump_ = nullptr;
  return temp;
}
inline ::BYDLD::JumpHighArena* SCActivityInfo::_internal_mutable_jump() {
  
  if (jump_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::JumpHighArena>(GetArena());
    jump_ = p;
  }
  return jump_;
}
inline ::BYDLD::JumpHighArena* SCActivityInfo::mutable_jump() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.jump)
  return _internal_mutable_jump();
}
inline void SCActivityInfo::set_allocated_jump(::BYDLD::JumpHighArena* jump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete jump_;
  }
  if (jump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jump);
    if (message_arena != submessage_arena) {
      jump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jump, submessage_arena);
    }
    
  } else {
    
  }
  jump_ = jump;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCActivityInfo.jump)
}

// .BYDLD.GiftBag config = 2;
inline bool SCActivityInfo::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SCActivityInfo::has_config() const {
  return _internal_has_config();
}
inline void SCActivityInfo::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::BYDLD::GiftBag& SCActivityInfo::_internal_config() const {
  const ::BYDLD::GiftBag* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::GiftBag&>(
      ::BYDLD::_GiftBag_default_instance_);
}
inline const ::BYDLD::GiftBag& SCActivityInfo::config() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.config)
  return _internal_config();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_config(
    ::BYDLD::GiftBag* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCActivityInfo.config)
}
inline ::BYDLD::GiftBag* SCActivityInfo::release_config() {
  
  ::BYDLD::GiftBag* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::GiftBag* SCActivityInfo::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:BYDLD.SCActivityInfo.config)
  
  ::BYDLD::GiftBag* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::BYDLD::GiftBag* SCActivityInfo::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::GiftBag>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::BYDLD::GiftBag* SCActivityInfo::mutable_config() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.config)
  return _internal_mutable_config();
}
inline void SCActivityInfo::set_allocated_config(::BYDLD::GiftBag* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCActivityInfo.config)
}

// .BYDLD.NewYearCardActivityInfo card = 3;
inline bool SCActivityInfo::_internal_has_card() const {
  return this != internal_default_instance() && card_ != nullptr;
}
inline bool SCActivityInfo::has_card() const {
  return _internal_has_card();
}
inline void SCActivityInfo::clear_card() {
  if (GetArena() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
}
inline const ::BYDLD::NewYearCardActivityInfo& SCActivityInfo::_internal_card() const {
  const ::BYDLD::NewYearCardActivityInfo* p = card_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::NewYearCardActivityInfo&>(
      ::BYDLD::_NewYearCardActivityInfo_default_instance_);
}
inline const ::BYDLD::NewYearCardActivityInfo& SCActivityInfo::card() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.card)
  return _internal_card();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_card(
    ::BYDLD::NewYearCardActivityInfo* card) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCActivityInfo.card)
}
inline ::BYDLD::NewYearCardActivityInfo* SCActivityInfo::release_card() {
  
  ::BYDLD::NewYearCardActivityInfo* temp = card_;
  card_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::NewYearCardActivityInfo* SCActivityInfo::unsafe_arena_release_card() {
  // @@protoc_insertion_point(field_release:BYDLD.SCActivityInfo.card)
  
  ::BYDLD::NewYearCardActivityInfo* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::BYDLD::NewYearCardActivityInfo* SCActivityInfo::_internal_mutable_card() {
  
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::NewYearCardActivityInfo>(GetArena());
    card_ = p;
  }
  return card_;
}
inline ::BYDLD::NewYearCardActivityInfo* SCActivityInfo::mutable_card() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.card)
  return _internal_mutable_card();
}
inline void SCActivityInfo::set_allocated_card(::BYDLD::NewYearCardActivityInfo* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete card_;
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCActivityInfo.card)
}

// bool award_pool_rank = 4;
inline void SCActivityInfo::clear_award_pool_rank() {
  award_pool_rank_ = false;
}
inline bool SCActivityInfo::_internal_award_pool_rank() const {
  return award_pool_rank_;
}
inline bool SCActivityInfo::award_pool_rank() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.award_pool_rank)
  return _internal_award_pool_rank();
}
inline void SCActivityInfo::_internal_set_award_pool_rank(bool value) {
  
  award_pool_rank_ = value;
}
inline void SCActivityInfo::set_award_pool_rank(bool value) {
  _internal_set_award_pool_rank(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCActivityInfo.award_pool_rank)
}

// .BYDLD.UserPoolActivityInfo user_pool = 5;
inline bool SCActivityInfo::_internal_has_user_pool() const {
  return this != internal_default_instance() && user_pool_ != nullptr;
}
inline bool SCActivityInfo::has_user_pool() const {
  return _internal_has_user_pool();
}
inline void SCActivityInfo::clear_user_pool() {
  if (GetArena() == nullptr && user_pool_ != nullptr) {
    delete user_pool_;
  }
  user_pool_ = nullptr;
}
inline const ::BYDLD::UserPoolActivityInfo& SCActivityInfo::_internal_user_pool() const {
  const ::BYDLD::UserPoolActivityInfo* p = user_pool_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::UserPoolActivityInfo&>(
      ::BYDLD::_UserPoolActivityInfo_default_instance_);
}
inline const ::BYDLD::UserPoolActivityInfo& SCActivityInfo::user_pool() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.user_pool)
  return _internal_user_pool();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_user_pool(
    ::BYDLD::UserPoolActivityInfo* user_pool) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_pool_);
  }
  user_pool_ = user_pool;
  if (user_pool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCActivityInfo.user_pool)
}
inline ::BYDLD::UserPoolActivityInfo* SCActivityInfo::release_user_pool() {
  
  ::BYDLD::UserPoolActivityInfo* temp = user_pool_;
  user_pool_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::UserPoolActivityInfo* SCActivityInfo::unsafe_arena_release_user_pool() {
  // @@protoc_insertion_point(field_release:BYDLD.SCActivityInfo.user_pool)
  
  ::BYDLD::UserPoolActivityInfo* temp = user_pool_;
  user_pool_ = nullptr;
  return temp;
}
inline ::BYDLD::UserPoolActivityInfo* SCActivityInfo::_internal_mutable_user_pool() {
  
  if (user_pool_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::UserPoolActivityInfo>(GetArena());
    user_pool_ = p;
  }
  return user_pool_;
}
inline ::BYDLD::UserPoolActivityInfo* SCActivityInfo::mutable_user_pool() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.user_pool)
  return _internal_mutable_user_pool();
}
inline void SCActivityInfo::set_allocated_user_pool(::BYDLD::UserPoolActivityInfo* user_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_pool_;
  }
  if (user_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_pool);
    if (message_arena != submessage_arena) {
      user_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_pool, submessage_arena);
    }
    
  } else {
    
  }
  user_pool_ = user_pool;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCActivityInfo.user_pool)
}

// bool lucky_draw = 6;
inline void SCActivityInfo::clear_lucky_draw() {
  lucky_draw_ = false;
}
inline bool SCActivityInfo::_internal_lucky_draw() const {
  return lucky_draw_;
}
inline bool SCActivityInfo::lucky_draw() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.lucky_draw)
  return _internal_lucky_draw();
}
inline void SCActivityInfo::_internal_set_lucky_draw(bool value) {
  
  lucky_draw_ = value;
}
inline void SCActivityInfo::set_lucky_draw(bool value) {
  _internal_set_lucky_draw(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCActivityInfo.lucky_draw)
}

// repeated .BYDLD.Object4 dragon_wheel = 7;
inline int SCActivityInfo::_internal_dragon_wheel_size() const {
  return dragon_wheel_.size();
}
inline int SCActivityInfo::dragon_wheel_size() const {
  return _internal_dragon_wheel_size();
}
inline void SCActivityInfo::clear_dragon_wheel() {
  dragon_wheel_.Clear();
}
inline ::BYDLD::Object4* SCActivityInfo::mutable_dragon_wheel(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.dragon_wheel)
  return dragon_wheel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object4 >*
SCActivityInfo::mutable_dragon_wheel() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCActivityInfo.dragon_wheel)
  return &dragon_wheel_;
}
inline const ::BYDLD::Object4& SCActivityInfo::_internal_dragon_wheel(int index) const {
  return dragon_wheel_.Get(index);
}
inline const ::BYDLD::Object4& SCActivityInfo::dragon_wheel(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.dragon_wheel)
  return _internal_dragon_wheel(index);
}
inline ::BYDLD::Object4* SCActivityInfo::_internal_add_dragon_wheel() {
  return dragon_wheel_.Add();
}
inline ::BYDLD::Object4* SCActivityInfo::add_dragon_wheel() {
  // @@protoc_insertion_point(field_add:BYDLD.SCActivityInfo.dragon_wheel)
  return _internal_add_dragon_wheel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object4 >&
SCActivityInfo::dragon_wheel() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCActivityInfo.dragon_wheel)
  return dragon_wheel_;
}

// repeated .BYDLD.Object3 trident_wheel = 8;
inline int SCActivityInfo::_internal_trident_wheel_size() const {
  return trident_wheel_.size();
}
inline int SCActivityInfo::trident_wheel_size() const {
  return _internal_trident_wheel_size();
}
inline void SCActivityInfo::clear_trident_wheel() {
  trident_wheel_.Clear();
}
inline ::BYDLD::Object3* SCActivityInfo::mutable_trident_wheel(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.trident_wheel)
  return trident_wheel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
SCActivityInfo::mutable_trident_wheel() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCActivityInfo.trident_wheel)
  return &trident_wheel_;
}
inline const ::BYDLD::Object3& SCActivityInfo::_internal_trident_wheel(int index) const {
  return trident_wheel_.Get(index);
}
inline const ::BYDLD::Object3& SCActivityInfo::trident_wheel(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.trident_wheel)
  return _internal_trident_wheel(index);
}
inline ::BYDLD::Object3* SCActivityInfo::_internal_add_trident_wheel() {
  return trident_wheel_.Add();
}
inline ::BYDLD::Object3* SCActivityInfo::add_trident_wheel() {
  // @@protoc_insertion_point(field_add:BYDLD.SCActivityInfo.trident_wheel)
  return _internal_add_trident_wheel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
SCActivityInfo::trident_wheel() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCActivityInfo.trident_wheel)
  return trident_wheel_;
}

// repeated .BYDLD.DragonBallConfig dragon_ball = 9;
inline int SCActivityInfo::_internal_dragon_ball_size() const {
  return dragon_ball_.size();
}
inline int SCActivityInfo::dragon_ball_size() const {
  return _internal_dragon_ball_size();
}
inline void SCActivityInfo::clear_dragon_ball() {
  dragon_ball_.Clear();
}
inline ::BYDLD::DragonBallConfig* SCActivityInfo::mutable_dragon_ball(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCActivityInfo.dragon_ball)
  return dragon_ball_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallConfig >*
SCActivityInfo::mutable_dragon_ball() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCActivityInfo.dragon_ball)
  return &dragon_ball_;
}
inline const ::BYDLD::DragonBallConfig& SCActivityInfo::_internal_dragon_ball(int index) const {
  return dragon_ball_.Get(index);
}
inline const ::BYDLD::DragonBallConfig& SCActivityInfo::dragon_ball(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.dragon_ball)
  return _internal_dragon_ball(index);
}
inline ::BYDLD::DragonBallConfig* SCActivityInfo::_internal_add_dragon_ball() {
  return dragon_ball_.Add();
}
inline ::BYDLD::DragonBallConfig* SCActivityInfo::add_dragon_ball() {
  // @@protoc_insertion_point(field_add:BYDLD.SCActivityInfo.dragon_ball)
  return _internal_add_dragon_ball();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DragonBallConfig >&
SCActivityInfo::dragon_ball() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCActivityInfo.dragon_ball)
  return dragon_ball_;
}

// repeated int32 toad_multi = 10;
inline int SCActivityInfo::_internal_toad_multi_size() const {
  return toad_multi_.size();
}
inline int SCActivityInfo::toad_multi_size() const {
  return _internal_toad_multi_size();
}
inline void SCActivityInfo::clear_toad_multi() {
  toad_multi_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::_internal_toad_multi(int index) const {
  return toad_multi_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::toad_multi(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCActivityInfo.toad_multi)
  return _internal_toad_multi(index);
}
inline void SCActivityInfo::set_toad_multi(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  toad_multi_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCActivityInfo.toad_multi)
}
inline void SCActivityInfo::_internal_add_toad_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  toad_multi_.Add(value);
}
inline void SCActivityInfo::add_toad_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_toad_multi(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCActivityInfo.toad_multi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCActivityInfo::_internal_toad_multi() const {
  return toad_multi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCActivityInfo::toad_multi() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCActivityInfo.toad_multi)
  return _internal_toad_multi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCActivityInfo::_internal_mutable_toad_multi() {
  return &toad_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCActivityInfo::mutable_toad_multi() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCActivityInfo.toad_multi)
  return _internal_mutable_toad_multi();
}

// -------------------------------------------------------------------

// SCPropEndNotify

// int32 chair_idx = 1;
inline void SCPropEndNotify::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropEndNotify.chair_idx)
  return _internal_chair_idx();
}
inline void SCPropEndNotify::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCPropEndNotify::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropEndNotify.chair_idx)
}

// int32 prop_id = 2;
inline void SCPropEndNotify::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropEndNotify.prop_id)
  return _internal_prop_id();
}
inline void SCPropEndNotify::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void SCPropEndNotify::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropEndNotify.prop_id)
}

// int32 status = 3;
inline void SCPropEndNotify::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropEndNotify.status)
  return _internal_status();
}
inline void SCPropEndNotify::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCPropEndNotify::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropEndNotify.status)
}

// int32 free_level = 4;
inline void SCPropEndNotify::clear_free_level() {
  free_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::_internal_free_level() const {
  return free_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::free_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropEndNotify.free_level)
  return _internal_free_level();
}
inline void SCPropEndNotify::_internal_set_free_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_level_ = value;
}
inline void SCPropEndNotify::set_free_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropEndNotify.free_level)
}

// int32 free_times = 5;
inline void SCPropEndNotify::clear_free_times() {
  free_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::_internal_free_times() const {
  return free_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropEndNotify::free_times() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropEndNotify.free_times)
  return _internal_free_times();
}
inline void SCPropEndNotify::_internal_set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_times_ = value;
}
inline void SCPropEndNotify::set_free_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropEndNotify.free_times)
}

// -------------------------------------------------------------------

// SCPropDropNotify

// int32 chair_idx = 1;
inline void SCPropDropNotify::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropDropNotify.chair_idx)
  return _internal_chair_idx();
}
inline void SCPropDropNotify::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCPropDropNotify::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropDropNotify.chair_idx)
}

// int32 fish_uid = 2;
inline void SCPropDropNotify::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropDropNotify.fish_uid)
  return _internal_fish_uid();
}
inline void SCPropDropNotify::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCPropDropNotify::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropDropNotify.fish_uid)
}

// int32 prop_id = 3;
inline void SCPropDropNotify::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropDropNotify.prop_id)
  return _internal_prop_id();
}
inline void SCPropDropNotify::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void SCPropDropNotify::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropDropNotify.prop_id)
}

// int32 count = 4;
inline void SCPropDropNotify::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropDropNotify.count)
  return _internal_count();
}
inline void SCPropDropNotify::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCPropDropNotify::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropDropNotify.count)
}

// int32 lock_ratio = 5;
inline void SCPropDropNotify::clear_lock_ratio() {
  lock_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::_internal_lock_ratio() const {
  return lock_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPropDropNotify::lock_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCPropDropNotify.lock_ratio)
  return _internal_lock_ratio();
}
inline void SCPropDropNotify::_internal_set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lock_ratio_ = value;
}
inline void SCPropDropNotify::set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lock_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCPropDropNotify.lock_ratio)
}

// -------------------------------------------------------------------

// Prop

// int32 id = 1;
inline void Prop::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.id)
  return _internal_id();
}
inline void Prop::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Prop::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.id)
}

// int32 count = 2;
inline void Prop::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.count)
  return _internal_count();
}
inline void Prop::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Prop::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.count)
}

// int32 ratio = 3;
inline void Prop::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.ratio)
  return _internal_ratio();
}
inline void Prop::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void Prop::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.ratio)
}

// float x = 4;
inline void Prop::clear_x() {
  x_ = 0;
}
inline float Prop::_internal_x() const {
  return x_;
}
inline float Prop::x() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.x)
  return _internal_x();
}
inline void Prop::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Prop::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.x)
}

// float y = 5;
inline void Prop::clear_y() {
  y_ = 0;
}
inline float Prop::_internal_y() const {
  return y_;
}
inline float Prop::y() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.y)
  return _internal_y();
}
inline void Prop::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Prop::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.y)
}

// float angle = 6;
inline void Prop::clear_angle() {
  angle_ = 0;
}
inline float Prop::_internal_angle() const {
  return angle_;
}
inline float Prop::angle() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.angle)
  return _internal_angle();
}
inline void Prop::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void Prop::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.angle)
}

// int32 status = 7;
inline void Prop::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.status)
  return _internal_status();
}
inline void Prop::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void Prop::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.status)
}

// int32 multiple = 8;
inline void Prop::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.multiple)
  return _internal_multiple();
}
inline void Prop::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void Prop::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.multiple)
}

// int32 crit_multi = 9;
inline void Prop::clear_crit_multi() {
  crit_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_crit_multi() const {
  return crit_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::crit_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.crit_multi)
  return _internal_crit_multi();
}
inline void Prop::_internal_set_crit_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crit_multi_ = value;
}
inline void Prop::set_crit_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crit_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.crit_multi)
}

// int32 ingot_id = 10;
inline void Prop::clear_ingot_id() {
  ingot_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_ingot_id() const {
  return ingot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::ingot_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.ingot_id)
  return _internal_ingot_id();
}
inline void Prop::_internal_set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_id_ = value;
}
inline void Prop::set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.ingot_id)
}

// int32 remain_times = 11;
inline void Prop::clear_remain_times() {
  remain_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_remain_times() const {
  return remain_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::remain_times() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.remain_times)
  return _internal_remain_times();
}
inline void Prop::_internal_set_remain_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_times_ = value;
}
inline void Prop::set_remain_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.remain_times)
}

// int32 total_times = 12;
inline void Prop::clear_total_times() {
  total_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_total_times() const {
  return total_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::total_times() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.total_times)
  return _internal_total_times();
}
inline void Prop::_internal_set_total_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_times_ = value;
}
inline void Prop::set_total_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.total_times)
}

// int32 bullet_id = 13;
inline void Prop::clear_bullet_id() {
  bullet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_bullet_id() const {
  return bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::bullet_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.bullet_id)
  return _internal_bullet_id();
}
inline void Prop::_internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_id_ = value;
}
inline void Prop::set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.bullet_id)
}

// int32 ingot_multi = 14;
inline void Prop::clear_ingot_multi() {
  ingot_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_ingot_multi() const {
  return ingot_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::ingot_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.ingot_multi)
  return _internal_ingot_multi();
}
inline void Prop::_internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_multi_ = value;
}
inline void Prop::set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.ingot_multi)
}

// int32 trident_multi = 15;
inline void Prop::clear_trident_multi() {
  trident_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::_internal_trident_multi() const {
  return trident_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prop::trident_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.Prop.trident_multi)
  return _internal_trident_multi();
}
inline void Prop::_internal_set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident_multi_ = value;
}
inline void Prop::set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.Prop.trident_multi)
}

// -------------------------------------------------------------------

// UserProp

// int32 chair_idx = 1;
inline void UserProp::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserProp::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserProp::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserProp.chair_idx)
  return _internal_chair_idx();
}
inline void UserProp::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void UserProp::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserProp.chair_idx)
}

// repeated .BYDLD.Prop props = 2;
inline int UserProp::_internal_props_size() const {
  return props_.size();
}
inline int UserProp::props_size() const {
  return _internal_props_size();
}
inline void UserProp::clear_props() {
  props_.Clear();
}
inline ::BYDLD::Prop* UserProp::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.UserProp.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Prop >*
UserProp::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.UserProp.props)
  return &props_;
}
inline const ::BYDLD::Prop& UserProp::_internal_props(int index) const {
  return props_.Get(index);
}
inline const ::BYDLD::Prop& UserProp::props(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.UserProp.props)
  return _internal_props(index);
}
inline ::BYDLD::Prop* UserProp::_internal_add_props() {
  return props_.Add();
}
inline ::BYDLD::Prop* UserProp::add_props() {
  // @@protoc_insertion_point(field_add:BYDLD.UserProp.props)
  return _internal_add_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Prop >&
UserProp::props() const {
  // @@protoc_insertion_point(field_list:BYDLD.UserProp.props)
  return props_;
}

// -------------------------------------------------------------------

// UsersProp

// repeated .BYDLD.UserProp user_prop = 1;
inline int UsersProp::_internal_user_prop_size() const {
  return user_prop_.size();
}
inline int UsersProp::user_prop_size() const {
  return _internal_user_prop_size();
}
inline void UsersProp::clear_user_prop() {
  user_prop_.Clear();
}
inline ::BYDLD::UserProp* UsersProp::mutable_user_prop(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.UsersProp.user_prop)
  return user_prop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserProp >*
UsersProp::mutable_user_prop() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.UsersProp.user_prop)
  return &user_prop_;
}
inline const ::BYDLD::UserProp& UsersProp::_internal_user_prop(int index) const {
  return user_prop_.Get(index);
}
inline const ::BYDLD::UserProp& UsersProp::user_prop(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.UsersProp.user_prop)
  return _internal_user_prop(index);
}
inline ::BYDLD::UserProp* UsersProp::_internal_add_user_prop() {
  return user_prop_.Add();
}
inline ::BYDLD::UserProp* UsersProp::add_user_prop() {
  // @@protoc_insertion_point(field_add:BYDLD.UsersProp.user_prop)
  return _internal_add_user_prop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserProp >&
UsersProp::user_prop() const {
  // @@protoc_insertion_point(field_list:BYDLD.UsersProp.user_prop)
  return user_prop_;
}

// -------------------------------------------------------------------

// SSAwardPoolMsg

// int32 uniqueID = 1;
inline void SSAwardPoolMsg::clear_uniqueid() {
  uniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::uniqueid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SSAwardPoolMsg.uniqueID)
  return _internal_uniqueid();
}
inline void SSAwardPoolMsg::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueid_ = value;
}
inline void SSAwardPoolMsg::set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SSAwardPoolMsg.uniqueID)
}

// int32 arenaID = 2;
inline void SSAwardPoolMsg::clear_arenaid() {
  arenaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::_internal_arenaid() const {
  return arenaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::arenaid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SSAwardPoolMsg.arenaID)
  return _internal_arenaid();
}
inline void SSAwardPoolMsg::_internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arenaid_ = value;
}
inline void SSAwardPoolMsg::set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arenaid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SSAwardPoolMsg.arenaID)
}

// int32 poolID = 3;
inline void SSAwardPoolMsg::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::_internal_poolid() const {
  return poolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::poolid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SSAwardPoolMsg.poolID)
  return _internal_poolid();
}
inline void SSAwardPoolMsg::_internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
}
inline void SSAwardPoolMsg::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SSAwardPoolMsg.poolID)
}

// int32 delta = 4;
inline void SSAwardPoolMsg::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::_internal_delta() const {
  return delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSAwardPoolMsg::delta() const {
  // @@protoc_insertion_point(field_get:BYDLD.SSAwardPoolMsg.delta)
  return _internal_delta();
}
inline void SSAwardPoolMsg::_internal_set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
}
inline void SSAwardPoolMsg::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:BYDLD.SSAwardPoolMsg.delta)
}

// -------------------------------------------------------------------

// CSScratchNewYearCard

// int32 chair_idx = 1;
inline void CSScratchNewYearCard::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSScratchNewYearCard::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSScratchNewYearCard::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSScratchNewYearCard.chair_idx)
  return _internal_chair_idx();
}
inline void CSScratchNewYearCard::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSScratchNewYearCard::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSScratchNewYearCard.chair_idx)
}

// -------------------------------------------------------------------

// CSBuyNewYearCard

// int32 buy_count = 1;
inline void CSBuyNewYearCard::clear_buy_count() {
  buy_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyNewYearCard::_internal_buy_count() const {
  return buy_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyNewYearCard::buy_count() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBuyNewYearCard.buy_count)
  return _internal_buy_count();
}
inline void CSBuyNewYearCard::_internal_set_buy_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buy_count_ = value;
}
inline void CSBuyNewYearCard::set_buy_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buy_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBuyNewYearCard.buy_count)
}

// -------------------------------------------------------------------

// NewYearCardMultiple

// string award_no = 1;
inline void NewYearCardMultiple::clear_award_no() {
  award_no_.ClearToEmpty();
}
inline const std::string& NewYearCardMultiple::award_no() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardMultiple.award_no)
  return _internal_award_no();
}
inline void NewYearCardMultiple::set_award_no(const std::string& value) {
  _internal_set_award_no(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardMultiple.award_no)
}
inline std::string* NewYearCardMultiple::mutable_award_no() {
  // @@protoc_insertion_point(field_mutable:BYDLD.NewYearCardMultiple.award_no)
  return _internal_mutable_award_no();
}
inline const std::string& NewYearCardMultiple::_internal_award_no() const {
  return award_no_.Get();
}
inline void NewYearCardMultiple::_internal_set_award_no(const std::string& value) {
  
  award_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewYearCardMultiple::set_award_no(std::string&& value) {
  
  award_no_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.NewYearCardMultiple.award_no)
}
inline void NewYearCardMultiple::set_award_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  award_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.NewYearCardMultiple.award_no)
}
inline void NewYearCardMultiple::set_award_no(const char* value,
    size_t size) {
  
  award_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.NewYearCardMultiple.award_no)
}
inline std::string* NewYearCardMultiple::_internal_mutable_award_no() {
  
  return award_no_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewYearCardMultiple::release_award_no() {
  // @@protoc_insertion_point(field_release:BYDLD.NewYearCardMultiple.award_no)
  return award_no_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewYearCardMultiple::set_allocated_award_no(std::string* award_no) {
  if (award_no != nullptr) {
    
  } else {
    
  }
  award_no_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), award_no,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.NewYearCardMultiple.award_no)
}

// int32 multiple = 2;
inline void NewYearCardMultiple::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardMultiple::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardMultiple::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardMultiple.multiple)
  return _internal_multiple();
}
inline void NewYearCardMultiple::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void NewYearCardMultiple::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardMultiple.multiple)
}

// -------------------------------------------------------------------

// SCScratchNewYearCard

// int32 result = 1;
inline void SCScratchNewYearCard::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::result() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCScratchNewYearCard.result)
  return _internal_result();
}
inline void SCScratchNewYearCard::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCScratchNewYearCard::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCScratchNewYearCard.result)
}

// int32 chair_idx = 2;
inline void SCScratchNewYearCard::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCScratchNewYearCard.chair_idx)
  return _internal_chair_idx();
}
inline void SCScratchNewYearCard::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCScratchNewYearCard::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCScratchNewYearCard.chair_idx)
}

// int64 cur_score = 3;
inline void SCScratchNewYearCard::clear_cur_score() {
  cur_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCScratchNewYearCard::_internal_cur_score() const {
  return cur_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCScratchNewYearCard::cur_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCScratchNewYearCard.cur_score)
  return _internal_cur_score();
}
inline void SCScratchNewYearCard::_internal_set_cur_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cur_score_ = value;
}
inline void SCScratchNewYearCard::set_cur_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cur_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCScratchNewYearCard.cur_score)
}

// int32 base = 4;
inline void SCScratchNewYearCard::clear_base() {
  base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::base() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCScratchNewYearCard.base)
  return _internal_base();
}
inline void SCScratchNewYearCard::_internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ = value;
}
inline void SCScratchNewYearCard::set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCScratchNewYearCard.base)
}

// int32 count = 5;
inline void SCScratchNewYearCard::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCScratchNewYearCard::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCScratchNewYearCard.count)
  return _internal_count();
}
inline void SCScratchNewYearCard::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCScratchNewYearCard::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCScratchNewYearCard.count)
}

// repeated .BYDLD.NewYearCardMultiple multiples = 6;
inline int SCScratchNewYearCard::_internal_multiples_size() const {
  return multiples_.size();
}
inline int SCScratchNewYearCard::multiples_size() const {
  return _internal_multiples_size();
}
inline void SCScratchNewYearCard::clear_multiples() {
  multiples_.Clear();
}
inline ::BYDLD::NewYearCardMultiple* SCScratchNewYearCard::mutable_multiples(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCScratchNewYearCard.multiples)
  return multiples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >*
SCScratchNewYearCard::mutable_multiples() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCScratchNewYearCard.multiples)
  return &multiples_;
}
inline const ::BYDLD::NewYearCardMultiple& SCScratchNewYearCard::_internal_multiples(int index) const {
  return multiples_.Get(index);
}
inline const ::BYDLD::NewYearCardMultiple& SCScratchNewYearCard::multiples(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCScratchNewYearCard.multiples)
  return _internal_multiples(index);
}
inline ::BYDLD::NewYearCardMultiple* SCScratchNewYearCard::_internal_add_multiples() {
  return multiples_.Add();
}
inline ::BYDLD::NewYearCardMultiple* SCScratchNewYearCard::add_multiples() {
  // @@protoc_insertion_point(field_add:BYDLD.SCScratchNewYearCard.multiples)
  return _internal_add_multiples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >&
SCScratchNewYearCard::multiples() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCScratchNewYearCard.multiples)
  return multiples_;
}

// -------------------------------------------------------------------

// CSNewYearCardExchange

// int32 times = 1;
inline void CSNewYearCardExchange::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSNewYearCardExchange::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSNewYearCardExchange::times() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSNewYearCardExchange.times)
  return _internal_times();
}
inline void CSNewYearCardExchange::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void CSNewYearCardExchange::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSNewYearCardExchange.times)
}

// bool exchange_all = 2;
inline void CSNewYearCardExchange::clear_exchange_all() {
  exchange_all_ = false;
}
inline bool CSNewYearCardExchange::_internal_exchange_all() const {
  return exchange_all_;
}
inline bool CSNewYearCardExchange::exchange_all() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSNewYearCardExchange.exchange_all)
  return _internal_exchange_all();
}
inline void CSNewYearCardExchange::_internal_set_exchange_all(bool value) {
  
  exchange_all_ = value;
}
inline void CSNewYearCardExchange::set_exchange_all(bool value) {
  _internal_set_exchange_all(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSNewYearCardExchange.exchange_all)
}

// -------------------------------------------------------------------

// NewYearCardAward

// int32 card_idx = 1;
inline void NewYearCardAward::clear_card_idx() {
  card_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::_internal_card_idx() const {
  return card_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::card_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAward.card_idx)
  return _internal_card_idx();
}
inline void NewYearCardAward::_internal_set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_idx_ = value;
}
inline void NewYearCardAward::set_card_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAward.card_idx)
}

// int32 award = 2;
inline void NewYearCardAward::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAward.award)
  return _internal_award();
}
inline void NewYearCardAward::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void NewYearCardAward::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAward.award)
}

// int32 bless_award = 3;
inline void NewYearCardAward::clear_bless_award() {
  bless_award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::_internal_bless_award() const {
  return bless_award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::bless_award() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAward.bless_award)
  return _internal_bless_award();
}
inline void NewYearCardAward::_internal_set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bless_award_ = value;
}
inline void NewYearCardAward::set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bless_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAward.bless_award)
}

// int32 base = 4;
inline void NewYearCardAward::clear_base() {
  base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAward::base() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAward.base)
  return _internal_base();
}
inline void NewYearCardAward::_internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ = value;
}
inline void NewYearCardAward::set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAward.base)
}

// repeated .BYDLD.NewYearCardMultiple multiples = 5;
inline int NewYearCardAward::_internal_multiples_size() const {
  return multiples_.size();
}
inline int NewYearCardAward::multiples_size() const {
  return _internal_multiples_size();
}
inline void NewYearCardAward::clear_multiples() {
  multiples_.Clear();
}
inline ::BYDLD::NewYearCardMultiple* NewYearCardAward::mutable_multiples(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.NewYearCardAward.multiples)
  return multiples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >*
NewYearCardAward::mutable_multiples() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.NewYearCardAward.multiples)
  return &multiples_;
}
inline const ::BYDLD::NewYearCardMultiple& NewYearCardAward::_internal_multiples(int index) const {
  return multiples_.Get(index);
}
inline const ::BYDLD::NewYearCardMultiple& NewYearCardAward::multiples(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAward.multiples)
  return _internal_multiples(index);
}
inline ::BYDLD::NewYearCardMultiple* NewYearCardAward::_internal_add_multiples() {
  return multiples_.Add();
}
inline ::BYDLD::NewYearCardMultiple* NewYearCardAward::add_multiples() {
  // @@protoc_insertion_point(field_add:BYDLD.NewYearCardAward.multiples)
  return _internal_add_multiples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardMultiple >&
NewYearCardAward::multiples() const {
  // @@protoc_insertion_point(field_list:BYDLD.NewYearCardAward.multiples)
  return multiples_;
}

// -------------------------------------------------------------------

// SCNewYearCardExchange

// int32 chair_idx = 1;
inline void SCNewYearCardExchange::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.chair_idx)
  return _internal_chair_idx();
}
inline void SCNewYearCardExchange::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCNewYearCardExchange::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardExchange.chair_idx)
}

// int32 result = 2;
inline void SCNewYearCardExchange::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::result() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.result)
  return _internal_result();
}
inline void SCNewYearCardExchange::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCNewYearCardExchange::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardExchange.result)
}

// repeated .BYDLD.NewYearCardAward awards = 3;
inline int SCNewYearCardExchange::_internal_awards_size() const {
  return awards_.size();
}
inline int SCNewYearCardExchange::awards_size() const {
  return _internal_awards_size();
}
inline void SCNewYearCardExchange::clear_awards() {
  awards_.Clear();
}
inline ::BYDLD::NewYearCardAward* SCNewYearCardExchange::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCNewYearCardExchange.awards)
  return awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAward >*
SCNewYearCardExchange::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCNewYearCardExchange.awards)
  return &awards_;
}
inline const ::BYDLD::NewYearCardAward& SCNewYearCardExchange::_internal_awards(int index) const {
  return awards_.Get(index);
}
inline const ::BYDLD::NewYearCardAward& SCNewYearCardExchange::awards(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.awards)
  return _internal_awards(index);
}
inline ::BYDLD::NewYearCardAward* SCNewYearCardExchange::_internal_add_awards() {
  return awards_.Add();
}
inline ::BYDLD::NewYearCardAward* SCNewYearCardExchange::add_awards() {
  // @@protoc_insertion_point(field_add:BYDLD.SCNewYearCardExchange.awards)
  return _internal_add_awards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAward >&
SCNewYearCardExchange::awards() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCNewYearCardExchange.awards)
  return awards_;
}

// int64 score = 4;
inline void SCNewYearCardExchange::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCNewYearCardExchange::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCNewYearCardExchange::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.score)
  return _internal_score();
}
inline void SCNewYearCardExchange::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SCNewYearCardExchange::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardExchange.score)
}

// int32 count = 5;
inline void SCNewYearCardExchange::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.count)
  return _internal_count();
}
inline void SCNewYearCardExchange::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCNewYearCardExchange::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardExchange.count)
}

// bool exchange_all = 6;
inline void SCNewYearCardExchange::clear_exchange_all() {
  exchange_all_ = false;
}
inline bool SCNewYearCardExchange::_internal_exchange_all() const {
  return exchange_all_;
}
inline bool SCNewYearCardExchange::exchange_all() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.exchange_all)
  return _internal_exchange_all();
}
inline void SCNewYearCardExchange::_internal_set_exchange_all(bool value) {
  
  exchange_all_ = value;
}
inline void SCNewYearCardExchange::set_exchange_all(bool value) {
  _internal_set_exchange_all(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardExchange.exchange_all)
}

// int32 req_id = 7;
inline void SCNewYearCardExchange::clear_req_id() {
  req_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardExchange::req_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardExchange.req_id)
  return _internal_req_id();
}
inline void SCNewYearCardExchange::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_id_ = value;
}
inline void SCNewYearCardExchange::set_req_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardExchange.req_id)
}

// -------------------------------------------------------------------

// CSNewYearCardAwardRecord

// -------------------------------------------------------------------

// NewYearCardAwardRecord

// int32 time = 1;
inline void NewYearCardAwardRecord::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAwardRecord::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAwardRecord::time() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAwardRecord.time)
  return _internal_time();
}
inline void NewYearCardAwardRecord::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void NewYearCardAwardRecord::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAwardRecord.time)
}

// int32 normal_award = 2;
inline void NewYearCardAwardRecord::clear_normal_award() {
  normal_award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAwardRecord::_internal_normal_award() const {
  return normal_award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAwardRecord::normal_award() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAwardRecord.normal_award)
  return _internal_normal_award();
}
inline void NewYearCardAwardRecord::_internal_set_normal_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  normal_award_ = value;
}
inline void NewYearCardAwardRecord::set_normal_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_normal_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAwardRecord.normal_award)
}

// int32 bless_award = 3;
inline void NewYearCardAwardRecord::clear_bless_award() {
  bless_award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAwardRecord::_internal_bless_award() const {
  return bless_award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewYearCardAwardRecord::bless_award() const {
  // @@protoc_insertion_point(field_get:BYDLD.NewYearCardAwardRecord.bless_award)
  return _internal_bless_award();
}
inline void NewYearCardAwardRecord::_internal_set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bless_award_ = value;
}
inline void NewYearCardAwardRecord::set_bless_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bless_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.NewYearCardAwardRecord.bless_award)
}

// -------------------------------------------------------------------

// SCNewYearCardAwardRecord

// int32 result = 1;
inline void SCNewYearCardAwardRecord::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardAwardRecord::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNewYearCardAwardRecord::result() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardAwardRecord.result)
  return _internal_result();
}
inline void SCNewYearCardAwardRecord::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCNewYearCardAwardRecord::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCNewYearCardAwardRecord.result)
}

// repeated .BYDLD.NewYearCardAwardRecord records = 2;
inline int SCNewYearCardAwardRecord::_internal_records_size() const {
  return records_.size();
}
inline int SCNewYearCardAwardRecord::records_size() const {
  return _internal_records_size();
}
inline void SCNewYearCardAwardRecord::clear_records() {
  records_.Clear();
}
inline ::BYDLD::NewYearCardAwardRecord* SCNewYearCardAwardRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCNewYearCardAwardRecord.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAwardRecord >*
SCNewYearCardAwardRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCNewYearCardAwardRecord.records)
  return &records_;
}
inline const ::BYDLD::NewYearCardAwardRecord& SCNewYearCardAwardRecord::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::BYDLD::NewYearCardAwardRecord& SCNewYearCardAwardRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCNewYearCardAwardRecord.records)
  return _internal_records(index);
}
inline ::BYDLD::NewYearCardAwardRecord* SCNewYearCardAwardRecord::_internal_add_records() {
  return records_.Add();
}
inline ::BYDLD::NewYearCardAwardRecord* SCNewYearCardAwardRecord::add_records() {
  // @@protoc_insertion_point(field_add:BYDLD.SCNewYearCardAwardRecord.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::NewYearCardAwardRecord >&
SCNewYearCardAwardRecord::records() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCNewYearCardAwardRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// SkillTime

// int32 type = 1;
inline void SkillTime::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillTime::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillTime::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.SkillTime.type)
  return _internal_type();
}
inline void SkillTime::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SkillTime::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.SkillTime.type)
}

// int32 time = 2;
inline void SkillTime::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillTime::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillTime::time() const {
  // @@protoc_insertion_point(field_get:BYDLD.SkillTime.time)
  return _internal_time();
}
inline void SkillTime::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void SkillTime::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.SkillTime.time)
}

// -------------------------------------------------------------------

// CSSaveSkillTime

// repeated .BYDLD.SkillTime skil_time = 1;
inline int CSSaveSkillTime::_internal_skil_time_size() const {
  return skil_time_.size();
}
inline int CSSaveSkillTime::skil_time_size() const {
  return _internal_skil_time_size();
}
inline void CSSaveSkillTime::clear_skil_time() {
  skil_time_.Clear();
}
inline ::BYDLD::SkillTime* CSSaveSkillTime::mutable_skil_time(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSSaveSkillTime.skil_time)
  return skil_time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SkillTime >*
CSSaveSkillTime::mutable_skil_time() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CSSaveSkillTime.skil_time)
  return &skil_time_;
}
inline const ::BYDLD::SkillTime& CSSaveSkillTime::_internal_skil_time(int index) const {
  return skil_time_.Get(index);
}
inline const ::BYDLD::SkillTime& CSSaveSkillTime::skil_time(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSaveSkillTime.skil_time)
  return _internal_skil_time(index);
}
inline ::BYDLD::SkillTime* CSSaveSkillTime::_internal_add_skil_time() {
  return skil_time_.Add();
}
inline ::BYDLD::SkillTime* CSSaveSkillTime::add_skil_time() {
  // @@protoc_insertion_point(field_add:BYDLD.CSSaveSkillTime.skil_time)
  return _internal_add_skil_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SkillTime >&
CSSaveSkillTime::skil_time() const {
  // @@protoc_insertion_point(field_list:BYDLD.CSSaveSkillTime.skil_time)
  return skil_time_;
}

// -------------------------------------------------------------------

// CSSuperTridentShoot

// -------------------------------------------------------------------

// SCSuperTridentShoot

// int32 chair_idx = 1;
inline void SCSuperTridentShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSuperTridentShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSuperTridentShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSuperTridentShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCSuperTridentShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSuperTridentShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSuperTridentShoot.chair_idx)
}

// -------------------------------------------------------------------

// CSSuperTridentAttack

// repeated int32 screen_fishes = 1;
inline int CSSuperTridentAttack::_internal_screen_fishes_size() const {
  return screen_fishes_.size();
}
inline int CSSuperTridentAttack::screen_fishes_size() const {
  return _internal_screen_fishes_size();
}
inline void CSSuperTridentAttack::clear_screen_fishes() {
  screen_fishes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSuperTridentAttack::_internal_screen_fishes(int index) const {
  return screen_fishes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSuperTridentAttack::screen_fishes(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSuperTridentAttack.screen_fishes)
  return _internal_screen_fishes(index);
}
inline void CSSuperTridentAttack::set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSuperTridentAttack.screen_fishes)
}
inline void CSSuperTridentAttack::_internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Add(value);
}
inline void CSSuperTridentAttack::add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_screen_fishes(value);
  // @@protoc_insertion_point(field_add:BYDLD.CSSuperTridentAttack.screen_fishes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSSuperTridentAttack::_internal_screen_fishes() const {
  return screen_fishes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSSuperTridentAttack::screen_fishes() const {
  // @@protoc_insertion_point(field_list:BYDLD.CSSuperTridentAttack.screen_fishes)
  return _internal_screen_fishes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSSuperTridentAttack::_internal_mutable_screen_fishes() {
  return &screen_fishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSSuperTridentAttack::mutable_screen_fishes() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CSSuperTridentAttack.screen_fishes)
  return _internal_mutable_screen_fishes();
}

// -------------------------------------------------------------------

// CommonResp

// int32 code = 1;
inline void CommonResp::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonResp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonResp::code() const {
  // @@protoc_insertion_point(field_get:BYDLD.CommonResp.code)
  return _internal_code();
}
inline void CommonResp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CommonResp::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BYDLD.CommonResp.code)
}

// string message = 2;
inline void CommonResp::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CommonResp::message() const {
  // @@protoc_insertion_point(field_get:BYDLD.CommonResp.message)
  return _internal_message();
}
inline void CommonResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:BYDLD.CommonResp.message)
}
inline std::string* CommonResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:BYDLD.CommonResp.message)
  return _internal_mutable_message();
}
inline const std::string& CommonResp::_internal_message() const {
  return message_.Get();
}
inline void CommonResp::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonResp::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.CommonResp.message)
}
inline void CommonResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.CommonResp.message)
}
inline void CommonResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.CommonResp.message)
}
inline std::string* CommonResp::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonResp::release_message() {
  // @@protoc_insertion_point(field_release:BYDLD.CommonResp.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.CommonResp.message)
}

// -------------------------------------------------------------------

// CSAwardPoolRecord

// -------------------------------------------------------------------

// AwardPoolRecord

// string time = 1;
inline void AwardPoolRecord::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& AwardPoolRecord::time() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolRecord.time)
  return _internal_time();
}
inline void AwardPoolRecord::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolRecord.time)
}
inline std::string* AwardPoolRecord::mutable_time() {
  // @@protoc_insertion_point(field_mutable:BYDLD.AwardPoolRecord.time)
  return _internal_mutable_time();
}
inline const std::string& AwardPoolRecord::_internal_time() const {
  return time_.Get();
}
inline void AwardPoolRecord::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardPoolRecord::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.AwardPoolRecord.time)
}
inline void AwardPoolRecord::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.AwardPoolRecord.time)
}
inline void AwardPoolRecord::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.AwardPoolRecord.time)
}
inline std::string* AwardPoolRecord::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardPoolRecord::release_time() {
  // @@protoc_insertion_point(field_release:BYDLD.AwardPoolRecord.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardPoolRecord::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.AwardPoolRecord.time)
}

// string name = 2;
inline void AwardPoolRecord::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AwardPoolRecord::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolRecord.name)
  return _internal_name();
}
inline void AwardPoolRecord::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolRecord.name)
}
inline std::string* AwardPoolRecord::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.AwardPoolRecord.name)
  return _internal_mutable_name();
}
inline const std::string& AwardPoolRecord::_internal_name() const {
  return name_.Get();
}
inline void AwardPoolRecord::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardPoolRecord::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.AwardPoolRecord.name)
}
inline void AwardPoolRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.AwardPoolRecord.name)
}
inline void AwardPoolRecord::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.AwardPoolRecord.name)
}
inline std::string* AwardPoolRecord::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardPoolRecord::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.AwardPoolRecord.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardPoolRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.AwardPoolRecord.name)
}

// int32 poolId = 3;
inline void AwardPoolRecord::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::_internal_poolid() const {
  return poolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::poolid() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolRecord.poolId)
  return _internal_poolid();
}
inline void AwardPoolRecord::_internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
}
inline void AwardPoolRecord::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolRecord.poolId)
}

// int32 award = 4;
inline void AwardPoolRecord::clear_award() {
  award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::_internal_award() const {
  return award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolRecord.award)
  return _internal_award();
}
inline void AwardPoolRecord::_internal_set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_ = value;
}
inline void AwardPoolRecord::set_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolRecord.award)
}

// int32 playerId = 5;
inline void AwardPoolRecord::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardPoolRecord::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardPoolRecord.playerId)
  return _internal_playerid();
}
inline void AwardPoolRecord::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void AwardPoolRecord::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardPoolRecord.playerId)
}

// -------------------------------------------------------------------

// SCAwardPoolRecord

// repeated .BYDLD.AwardPoolRecord records = 1;
inline int SCAwardPoolRecord::_internal_records_size() const {
  return records_.size();
}
inline int SCAwardPoolRecord::records_size() const {
  return _internal_records_size();
}
inline void SCAwardPoolRecord::clear_records() {
  records_.Clear();
}
inline ::BYDLD::AwardPoolRecord* SCAwardPoolRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCAwardPoolRecord.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolRecord >*
SCAwardPoolRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCAwardPoolRecord.records)
  return &records_;
}
inline const ::BYDLD::AwardPoolRecord& SCAwardPoolRecord::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::BYDLD::AwardPoolRecord& SCAwardPoolRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCAwardPoolRecord.records)
  return _internal_records(index);
}
inline ::BYDLD::AwardPoolRecord* SCAwardPoolRecord::_internal_add_records() {
  return records_.Add();
}
inline ::BYDLD::AwardPoolRecord* SCAwardPoolRecord::add_records() {
  // @@protoc_insertion_point(field_add:BYDLD.SCAwardPoolRecord.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardPoolRecord >&
SCAwardPoolRecord::records() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCAwardPoolRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// CSFortuneShoot

// -------------------------------------------------------------------

// SCFortuneShoot

// int32 chair_idx = 1;
inline void SCFortuneShoot::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFortuneShoot::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCFortuneShoot::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCFortuneShoot.chair_idx)
  return _internal_chair_idx();
}
inline void SCFortuneShoot::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCFortuneShoot::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCFortuneShoot.chair_idx)
}

// bool can_shoot = 2;
inline void SCFortuneShoot::clear_can_shoot() {
  can_shoot_ = false;
}
inline bool SCFortuneShoot::_internal_can_shoot() const {
  return can_shoot_;
}
inline bool SCFortuneShoot::can_shoot() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCFortuneShoot.can_shoot)
  return _internal_can_shoot();
}
inline void SCFortuneShoot::_internal_set_can_shoot(bool value) {
  
  can_shoot_ = value;
}
inline void SCFortuneShoot::set_can_shoot(bool value) {
  _internal_set_can_shoot(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCFortuneShoot.can_shoot)
}

// -------------------------------------------------------------------

// IngotInfo

// int32 ingot_id = 1;
inline void IngotInfo::clear_ingot_id() {
  ingot_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IngotInfo::_internal_ingot_id() const {
  return ingot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IngotInfo::ingot_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.IngotInfo.ingot_id)
  return _internal_ingot_id();
}
inline void IngotInfo::_internal_set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_id_ = value;
}
inline void IngotInfo::set_ingot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.IngotInfo.ingot_id)
}

// int32 remain = 2;
inline void IngotInfo::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IngotInfo::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IngotInfo::remain() const {
  // @@protoc_insertion_point(field_get:BYDLD.IngotInfo.remain)
  return _internal_remain();
}
inline void IngotInfo::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void IngotInfo::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:BYDLD.IngotInfo.remain)
}

// int32 total = 3;
inline void IngotInfo::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IngotInfo::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IngotInfo::total() const {
  // @@protoc_insertion_point(field_get:BYDLD.IngotInfo.total)
  return _internal_total();
}
inline void IngotInfo::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void IngotInfo::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:BYDLD.IngotInfo.total)
}

// -------------------------------------------------------------------

// SCSyncFortune

// .BYDLD.IngotInfo ingot_info = 1;
inline bool SCSyncFortune::_internal_has_ingot_info() const {
  return this != internal_default_instance() && ingot_info_ != nullptr;
}
inline bool SCSyncFortune::has_ingot_info() const {
  return _internal_has_ingot_info();
}
inline void SCSyncFortune::clear_ingot_info() {
  if (GetArena() == nullptr && ingot_info_ != nullptr) {
    delete ingot_info_;
  }
  ingot_info_ = nullptr;
}
inline const ::BYDLD::IngotInfo& SCSyncFortune::_internal_ingot_info() const {
  const ::BYDLD::IngotInfo* p = ingot_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::IngotInfo&>(
      ::BYDLD::_IngotInfo_default_instance_);
}
inline const ::BYDLD::IngotInfo& SCSyncFortune::ingot_info() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncFortune.ingot_info)
  return _internal_ingot_info();
}
inline void SCSyncFortune::unsafe_arena_set_allocated_ingot_info(
    ::BYDLD::IngotInfo* ingot_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ingot_info_);
  }
  ingot_info_ = ingot_info;
  if (ingot_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCSyncFortune.ingot_info)
}
inline ::BYDLD::IngotInfo* SCSyncFortune::release_ingot_info() {
  
  ::BYDLD::IngotInfo* temp = ingot_info_;
  ingot_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::IngotInfo* SCSyncFortune::unsafe_arena_release_ingot_info() {
  // @@protoc_insertion_point(field_release:BYDLD.SCSyncFortune.ingot_info)
  
  ::BYDLD::IngotInfo* temp = ingot_info_;
  ingot_info_ = nullptr;
  return temp;
}
inline ::BYDLD::IngotInfo* SCSyncFortune::_internal_mutable_ingot_info() {
  
  if (ingot_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::IngotInfo>(GetArena());
    ingot_info_ = p;
  }
  return ingot_info_;
}
inline ::BYDLD::IngotInfo* SCSyncFortune::mutable_ingot_info() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCSyncFortune.ingot_info)
  return _internal_mutable_ingot_info();
}
inline void SCSyncFortune::set_allocated_ingot_info(::BYDLD::IngotInfo* ingot_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ingot_info_;
  }
  if (ingot_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ingot_info);
    if (message_arena != submessage_arena) {
      ingot_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ingot_info, submessage_arena);
    }
    
  } else {
    
  }
  ingot_info_ = ingot_info;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCSyncFortune.ingot_info)
}

// -------------------------------------------------------------------

// CSUserPoolInfo

// bool open_page = 1;
inline void CSUserPoolInfo::clear_open_page() {
  open_page_ = false;
}
inline bool CSUserPoolInfo::_internal_open_page() const {
  return open_page_;
}
inline bool CSUserPoolInfo::open_page() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserPoolInfo.open_page)
  return _internal_open_page();
}
inline void CSUserPoolInfo::_internal_set_open_page(bool value) {
  
  open_page_ = value;
}
inline void CSUserPoolInfo::set_open_page(bool value) {
  _internal_set_open_page(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserPoolInfo.open_page)
}

// -------------------------------------------------------------------

// GoodsInfo

// int32 prop_id = 1;
inline void GoodsInfo::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsInfo::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsInfo::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.GoodsInfo.prop_id)
  return _internal_prop_id();
}
inline void GoodsInfo::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void GoodsInfo::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.GoodsInfo.prop_id)
}

// int32 prop_num = 2;
inline void GoodsInfo::clear_prop_num() {
  prop_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsInfo::_internal_prop_num() const {
  return prop_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsInfo::prop_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.GoodsInfo.prop_num)
  return _internal_prop_num();
}
inline void GoodsInfo::_internal_set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_num_ = value;
}
inline void GoodsInfo::set_prop_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.GoodsInfo.prop_num)
}

// int32 client_id = 3;
inline void GoodsInfo::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsInfo::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsInfo::client_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.GoodsInfo.client_id)
  return _internal_client_id();
}
inline void GoodsInfo::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void GoodsInfo::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.GoodsInfo.client_id)
}

// -------------------------------------------------------------------

// UserAwardItem

// int32 index = 1;
inline void UserAwardItem::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::index() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserAwardItem.index)
  return _internal_index();
}
inline void UserAwardItem::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void UserAwardItem::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserAwardItem.index)
}

// int32 item_max = 2;
inline void UserAwardItem::clear_item_max() {
  item_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::_internal_item_max() const {
  return item_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAwardItem::item_max() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserAwardItem.item_max)
  return _internal_item_max();
}
inline void UserAwardItem::_internal_set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_max_ = value;
}
inline void UserAwardItem::set_item_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_max(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserAwardItem.item_max)
}

// string name = 3;
inline void UserAwardItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserAwardItem::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.UserAwardItem.name)
  return _internal_name();
}
inline void UserAwardItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.UserAwardItem.name)
}
inline std::string* UserAwardItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.UserAwardItem.name)
  return _internal_mutable_name();
}
inline const std::string& UserAwardItem::_internal_name() const {
  return name_.Get();
}
inline void UserAwardItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAwardItem::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.UserAwardItem.name)
}
inline void UserAwardItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.UserAwardItem.name)
}
inline void UserAwardItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.UserAwardItem.name)
}
inline std::string* UserAwardItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAwardItem::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.UserAwardItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAwardItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.UserAwardItem.name)
}

// repeated .BYDLD.GoodsInfo goods = 4;
inline int UserAwardItem::_internal_goods_size() const {
  return goods_.size();
}
inline int UserAwardItem::goods_size() const {
  return _internal_goods_size();
}
inline void UserAwardItem::clear_goods() {
  goods_.Clear();
}
inline ::BYDLD::GoodsInfo* UserAwardItem::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.UserAwardItem.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GoodsInfo >*
UserAwardItem::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.UserAwardItem.goods)
  return &goods_;
}
inline const ::BYDLD::GoodsInfo& UserAwardItem::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::BYDLD::GoodsInfo& UserAwardItem::goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.UserAwardItem.goods)
  return _internal_goods(index);
}
inline ::BYDLD::GoodsInfo* UserAwardItem::_internal_add_goods() {
  return goods_.Add();
}
inline ::BYDLD::GoodsInfo* UserAwardItem::add_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.UserAwardItem.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::GoodsInfo >&
UserAwardItem::goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.UserAwardItem.goods)
  return goods_;
}

// -------------------------------------------------------------------

// SCUserPoolInfo

// int32 chair_idx = 1;
inline void SCUserPoolInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolInfo.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserPoolInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserPoolInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolInfo.chair_idx)
}

// bool open_page = 2;
inline void SCUserPoolInfo::clear_open_page() {
  open_page_ = false;
}
inline bool SCUserPoolInfo::_internal_open_page() const {
  return open_page_;
}
inline bool SCUserPoolInfo::open_page() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolInfo.open_page)
  return _internal_open_page();
}
inline void SCUserPoolInfo::_internal_set_open_page(bool value) {
  
  open_page_ = value;
}
inline void SCUserPoolInfo::set_open_page(bool value) {
  _internal_set_open_page(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolInfo.open_page)
}

// bool status = 3;
inline void SCUserPoolInfo::clear_status() {
  status_ = false;
}
inline bool SCUserPoolInfo::_internal_status() const {
  return status_;
}
inline bool SCUserPoolInfo::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolInfo.status)
  return _internal_status();
}
inline void SCUserPoolInfo::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SCUserPoolInfo::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolInfo.status)
}

// int32 count = 4;
inline void SCUserPoolInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolInfo.count)
  return _internal_count();
}
inline void SCUserPoolInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCUserPoolInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolInfo.count)
}

// int32 pool_max = 5;
inline void SCUserPoolInfo::clear_pool_max() {
  pool_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::_internal_pool_max() const {
  return pool_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolInfo::pool_max() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolInfo.pool_max)
  return _internal_pool_max();
}
inline void SCUserPoolInfo::_internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pool_max_ = value;
}
inline void SCUserPoolInfo::set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pool_max(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolInfo.pool_max)
}

// repeated .BYDLD.UserAwardItem items = 6;
inline int SCUserPoolInfo::_internal_items_size() const {
  return items_.size();
}
inline int SCUserPoolInfo::items_size() const {
  return _internal_items_size();
}
inline void SCUserPoolInfo::clear_items() {
  items_.Clear();
}
inline ::BYDLD::UserAwardItem* SCUserPoolInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolInfo.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserAwardItem >*
SCUserPoolInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCUserPoolInfo.items)
  return &items_;
}
inline const ::BYDLD::UserAwardItem& SCUserPoolInfo::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::BYDLD::UserAwardItem& SCUserPoolInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolInfo.items)
  return _internal_items(index);
}
inline ::BYDLD::UserAwardItem* SCUserPoolInfo::_internal_add_items() {
  return items_.Add();
}
inline ::BYDLD::UserAwardItem* SCUserPoolInfo::add_items() {
  // @@protoc_insertion_point(field_add:BYDLD.SCUserPoolInfo.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::UserAwardItem >&
SCUserPoolInfo::items() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCUserPoolInfo.items)
  return items_;
}

// -------------------------------------------------------------------

// CSUserPoolStatus

// bool open = 1;
inline void CSUserPoolStatus::clear_open() {
  open_ = false;
}
inline bool CSUserPoolStatus::_internal_open() const {
  return open_;
}
inline bool CSUserPoolStatus::open() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserPoolStatus.open)
  return _internal_open();
}
inline void CSUserPoolStatus::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void CSUserPoolStatus::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserPoolStatus.open)
}

// -------------------------------------------------------------------

// SCUserPoolStatus

// bool open = 1;
inline void SCUserPoolStatus::clear_open() {
  open_ = false;
}
inline bool SCUserPoolStatus::_internal_open() const {
  return open_;
}
inline bool SCUserPoolStatus::open() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolStatus.open)
  return _internal_open();
}
inline void SCUserPoolStatus::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void SCUserPoolStatus::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolStatus.open)
}

// -------------------------------------------------------------------

// CSUserPoolPreDraw

// int32 level = 1;
inline void CSUserPoolPreDraw::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserPoolPreDraw::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSUserPoolPreDraw::level() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserPoolPreDraw.level)
  return _internal_level();
}
inline void CSUserPoolPreDraw::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CSUserPoolPreDraw::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserPoolPreDraw.level)
}

// -------------------------------------------------------------------

// SCUserPoolPreDraw

// int32 code = 1;
inline void SCUserPoolPreDraw::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::code() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolPreDraw.code)
  return _internal_code();
}
inline void SCUserPoolPreDraw::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCUserPoolPreDraw::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolPreDraw.code)
}

// int32 level = 2;
inline void SCUserPoolPreDraw::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolPreDraw::level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolPreDraw.level)
  return _internal_level();
}
inline void SCUserPoolPreDraw::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SCUserPoolPreDraw::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolPreDraw.level)
}

// string msg = 3;
inline void SCUserPoolPreDraw::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SCUserPoolPreDraw::msg() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolPreDraw.msg)
  return _internal_msg();
}
inline void SCUserPoolPreDraw::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolPreDraw.msg)
}
inline std::string* SCUserPoolPreDraw::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolPreDraw.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCUserPoolPreDraw::_internal_msg() const {
  return msg_.Get();
}
inline void SCUserPoolPreDraw::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCUserPoolPreDraw::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCUserPoolPreDraw.msg)
}
inline void SCUserPoolPreDraw::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCUserPoolPreDraw.msg)
}
inline void SCUserPoolPreDraw::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCUserPoolPreDraw.msg)
}
inline std::string* SCUserPoolPreDraw::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCUserPoolPreDraw::release_msg() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolPreDraw.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCUserPoolPreDraw::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolPreDraw.msg)
}

// -------------------------------------------------------------------

// CSUserPoolDraw

// -------------------------------------------------------------------

// SCUserPoolDraw

// int32 chair_idx = 1;
inline void SCUserPoolDraw::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDraw::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDraw::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDraw.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserPoolDraw::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserPoolDraw::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolDraw.chair_idx)
}

// repeated .BYDLD.Object2 goods = 2;
inline int SCUserPoolDraw::_internal_goods_size() const {
  return goods_.size();
}
inline int SCUserPoolDraw::goods_size() const {
  return _internal_goods_size();
}
inline void SCUserPoolDraw::clear_goods() {
  goods_.Clear();
}
inline ::BYDLD::Object2* SCUserPoolDraw::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDraw.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object2 >*
SCUserPoolDraw::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCUserPoolDraw.goods)
  return &goods_;
}
inline const ::BYDLD::Object2& SCUserPoolDraw::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::BYDLD::Object2& SCUserPoolDraw::goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDraw.goods)
  return _internal_goods(index);
}
inline ::BYDLD::Object2* SCUserPoolDraw::_internal_add_goods() {
  return goods_.Add();
}
inline ::BYDLD::Object2* SCUserPoolDraw::add_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.SCUserPoolDraw.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object2 >&
SCUserPoolDraw::goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCUserPoolDraw.goods)
  return goods_;
}

// .BYDLD.Object2 award = 3;
inline bool SCUserPoolDraw::_internal_has_award() const {
  return this != internal_default_instance() && award_ != nullptr;
}
inline bool SCUserPoolDraw::has_award() const {
  return _internal_has_award();
}
inline void SCUserPoolDraw::clear_award() {
  if (GetArena() == nullptr && award_ != nullptr) {
    delete award_;
  }
  award_ = nullptr;
}
inline const ::BYDLD::Object2& SCUserPoolDraw::_internal_award() const {
  const ::BYDLD::Object2* p = award_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object2&>(
      ::BYDLD::_Object2_default_instance_);
}
inline const ::BYDLD::Object2& SCUserPoolDraw::award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDraw.award)
  return _internal_award();
}
inline void SCUserPoolDraw::unsafe_arena_set_allocated_award(
    ::BYDLD::Object2* award) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_);
  }
  award_ = award;
  if (award) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCUserPoolDraw.award)
}
inline ::BYDLD::Object2* SCUserPoolDraw::release_award() {
  
  ::BYDLD::Object2* temp = award_;
  award_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object2* SCUserPoolDraw::unsafe_arena_release_award() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolDraw.award)
  
  ::BYDLD::Object2* temp = award_;
  award_ = nullptr;
  return temp;
}
inline ::BYDLD::Object2* SCUserPoolDraw::_internal_mutable_award() {
  
  if (award_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object2>(GetArena());
    award_ = p;
  }
  return award_;
}
inline ::BYDLD::Object2* SCUserPoolDraw::mutable_award() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDraw.award)
  return _internal_mutable_award();
}
inline void SCUserPoolDraw::set_allocated_award(::BYDLD::Object2* award) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_;
  }
  if (award) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award);
    if (message_arena != submessage_arena) {
      award = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award, submessage_arena);
    }
    
  } else {
    
  }
  award_ = award;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolDraw.award)
}

// .BYDLD.Object3 award_cnt = 4;
inline bool SCUserPoolDraw::_internal_has_award_cnt() const {
  return this != internal_default_instance() && award_cnt_ != nullptr;
}
inline bool SCUserPoolDraw::has_award_cnt() const {
  return _internal_has_award_cnt();
}
inline void SCUserPoolDraw::clear_award_cnt() {
  if (GetArena() == nullptr && award_cnt_ != nullptr) {
    delete award_cnt_;
  }
  award_cnt_ = nullptr;
}
inline const ::BYDLD::Object3& SCUserPoolDraw::_internal_award_cnt() const {
  const ::BYDLD::Object3* p = award_cnt_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object3&>(
      ::BYDLD::_Object3_default_instance_);
}
inline const ::BYDLD::Object3& SCUserPoolDraw::award_cnt() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDraw.award_cnt)
  return _internal_award_cnt();
}
inline void SCUserPoolDraw::unsafe_arena_set_allocated_award_cnt(
    ::BYDLD::Object3* award_cnt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_cnt_);
  }
  award_cnt_ = award_cnt;
  if (award_cnt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCUserPoolDraw.award_cnt)
}
inline ::BYDLD::Object3* SCUserPoolDraw::release_award_cnt() {
  
  ::BYDLD::Object3* temp = award_cnt_;
  award_cnt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object3* SCUserPoolDraw::unsafe_arena_release_award_cnt() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolDraw.award_cnt)
  
  ::BYDLD::Object3* temp = award_cnt_;
  award_cnt_ = nullptr;
  return temp;
}
inline ::BYDLD::Object3* SCUserPoolDraw::_internal_mutable_award_cnt() {
  
  if (award_cnt_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object3>(GetArena());
    award_cnt_ = p;
  }
  return award_cnt_;
}
inline ::BYDLD::Object3* SCUserPoolDraw::mutable_award_cnt() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDraw.award_cnt)
  return _internal_mutable_award_cnt();
}
inline void SCUserPoolDraw::set_allocated_award_cnt(::BYDLD::Object3* award_cnt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_cnt_;
  }
  if (award_cnt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award_cnt);
    if (message_arena != submessage_arena) {
      award_cnt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award_cnt, submessage_arena);
    }
    
  } else {
    
  }
  award_cnt_ = award_cnt;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolDraw.award_cnt)
}

// -------------------------------------------------------------------

// SCUserPoolAdd

// int32 add = 1;
inline void SCUserPoolAdd::clear_add() {
  add_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_add() const {
  return add_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::add() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolAdd.add)
  return _internal_add();
}
inline void SCUserPoolAdd::_internal_set_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_ = value;
}
inline void SCUserPoolAdd::set_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolAdd.add)
}

// int32 count = 2;
inline void SCUserPoolAdd::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolAdd.count)
  return _internal_count();
}
inline void SCUserPoolAdd::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCUserPoolAdd::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolAdd.count)
}

// int32 first_max = 3;
inline void SCUserPoolAdd::clear_first_max() {
  first_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_first_max() const {
  return first_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::first_max() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolAdd.first_max)
  return _internal_first_max();
}
inline void SCUserPoolAdd::_internal_set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  first_max_ = value;
}
inline void SCUserPoolAdd::set_first_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_first_max(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolAdd.first_max)
}

// int32 pool_max = 4;
inline void SCUserPoolAdd::clear_pool_max() {
  pool_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::_internal_pool_max() const {
  return pool_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolAdd::pool_max() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolAdd.pool_max)
  return _internal_pool_max();
}
inline void SCUserPoolAdd::_internal_set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pool_max_ = value;
}
inline void SCUserPoolAdd::set_pool_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pool_max(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolAdd.pool_max)
}

// bool status = 5;
inline void SCUserPoolAdd::clear_status() {
  status_ = false;
}
inline bool SCUserPoolAdd::_internal_status() const {
  return status_;
}
inline bool SCUserPoolAdd::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolAdd.status)
  return _internal_status();
}
inline void SCUserPoolAdd::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SCUserPoolAdd::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolAdd.status)
}

// string level_name = 6;
inline void SCUserPoolAdd::clear_level_name() {
  level_name_.ClearToEmpty();
}
inline const std::string& SCUserPoolAdd::level_name() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolAdd.level_name)
  return _internal_level_name();
}
inline void SCUserPoolAdd::set_level_name(const std::string& value) {
  _internal_set_level_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolAdd.level_name)
}
inline std::string* SCUserPoolAdd::mutable_level_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolAdd.level_name)
  return _internal_mutable_level_name();
}
inline const std::string& SCUserPoolAdd::_internal_level_name() const {
  return level_name_.Get();
}
inline void SCUserPoolAdd::_internal_set_level_name(const std::string& value) {
  
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCUserPoolAdd::set_level_name(std::string&& value) {
  
  level_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCUserPoolAdd.level_name)
}
inline void SCUserPoolAdd::set_level_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCUserPoolAdd.level_name)
}
inline void SCUserPoolAdd::set_level_name(const char* value,
    size_t size) {
  
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCUserPoolAdd.level_name)
}
inline std::string* SCUserPoolAdd::_internal_mutable_level_name() {
  
  return level_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCUserPoolAdd::release_level_name() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolAdd.level_name)
  return level_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCUserPoolAdd::set_allocated_level_name(std::string* level_name) {
  if (level_name != nullptr) {
    
  } else {
    
  }
  level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolAdd.level_name)
}

// -------------------------------------------------------------------

// ResultRank

// int32 idx = 1;
inline void ResultRank::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultRank::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultRank::idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.ResultRank.idx)
  return _internal_idx();
}
inline void ResultRank::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void ResultRank::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.ResultRank.idx)
}

// string icon = 2;
inline void ResultRank::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& ResultRank::icon() const {
  // @@protoc_insertion_point(field_get:BYDLD.ResultRank.icon)
  return _internal_icon();
}
inline void ResultRank::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:BYDLD.ResultRank.icon)
}
inline std::string* ResultRank::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:BYDLD.ResultRank.icon)
  return _internal_mutable_icon();
}
inline const std::string& ResultRank::_internal_icon() const {
  return icon_.Get();
}
inline void ResultRank::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResultRank::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.ResultRank.icon)
}
inline void ResultRank::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.ResultRank.icon)
}
inline void ResultRank::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.ResultRank.icon)
}
inline std::string* ResultRank::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResultRank::release_icon() {
  // @@protoc_insertion_point(field_release:BYDLD.ResultRank.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultRank::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.ResultRank.icon)
}

// string name = 3;
inline void ResultRank::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResultRank::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.ResultRank.name)
  return _internal_name();
}
inline void ResultRank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.ResultRank.name)
}
inline std::string* ResultRank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.ResultRank.name)
  return _internal_mutable_name();
}
inline const std::string& ResultRank::_internal_name() const {
  return name_.Get();
}
inline void ResultRank::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResultRank::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.ResultRank.name)
}
inline void ResultRank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.ResultRank.name)
}
inline void ResultRank::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.ResultRank.name)
}
inline std::string* ResultRank::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResultRank::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.ResultRank.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultRank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.ResultRank.name)
}

// -------------------------------------------------------------------

// SCMatchResult

// int32 matchId = 1;
inline void SCMatchResult::clear_matchid() {
  matchid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::matchid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.matchId)
  return _internal_matchid();
}
inline void SCMatchResult::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchid_ = value;
}
inline void SCMatchResult::set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCMatchResult.matchId)
}

// repeated .BYDLD.ResultRank rank_list = 2;
inline int SCMatchResult::_internal_rank_list_size() const {
  return rank_list_.size();
}
inline int SCMatchResult::rank_list_size() const {
  return _internal_rank_list_size();
}
inline void SCMatchResult::clear_rank_list() {
  rank_list_.Clear();
}
inline ::BYDLD::ResultRank* SCMatchResult::mutable_rank_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMatchResult.rank_list)
  return rank_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ResultRank >*
SCMatchResult::mutable_rank_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCMatchResult.rank_list)
  return &rank_list_;
}
inline const ::BYDLD::ResultRank& SCMatchResult::_internal_rank_list(int index) const {
  return rank_list_.Get(index);
}
inline const ::BYDLD::ResultRank& SCMatchResult::rank_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.rank_list)
  return _internal_rank_list(index);
}
inline ::BYDLD::ResultRank* SCMatchResult::_internal_add_rank_list() {
  return rank_list_.Add();
}
inline ::BYDLD::ResultRank* SCMatchResult::add_rank_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCMatchResult.rank_list)
  return _internal_add_rank_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ResultRank >&
SCMatchResult::rank_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCMatchResult.rank_list)
  return rank_list_;
}

// bool isPack = 3;
inline void SCMatchResult::clear_ispack() {
  ispack_ = false;
}
inline bool SCMatchResult::_internal_ispack() const {
  return ispack_;
}
inline bool SCMatchResult::ispack() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.isPack)
  return _internal_ispack();
}
inline void SCMatchResult::_internal_set_ispack(bool value) {
  
  ispack_ = value;
}
inline void SCMatchResult::set_ispack(bool value) {
  _internal_set_ispack(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCMatchResult.isPack)
}

// int32 oneself_rank = 4;
inline void SCMatchResult::clear_oneself_rank() {
  oneself_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::_internal_oneself_rank() const {
  return oneself_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::oneself_rank() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.oneself_rank)
  return _internal_oneself_rank();
}
inline void SCMatchResult::_internal_set_oneself_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oneself_rank_ = value;
}
inline void SCMatchResult::set_oneself_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oneself_rank(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCMatchResult.oneself_rank)
}

// int32 addition_source = 5;
inline void SCMatchResult::clear_addition_source() {
  addition_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::_internal_addition_source() const {
  return addition_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::addition_source() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.addition_source)
  return _internal_addition_source();
}
inline void SCMatchResult::_internal_set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addition_source_ = value;
}
inline void SCMatchResult::set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addition_source(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCMatchResult.addition_source)
}

// int32 reaward_addition = 6;
inline void SCMatchResult::clear_reaward_addition() {
  reaward_addition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::_internal_reaward_addition() const {
  return reaward_addition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCMatchResult::reaward_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.reaward_addition)
  return _internal_reaward_addition();
}
inline void SCMatchResult::_internal_set_reaward_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reaward_addition_ = value;
}
inline void SCMatchResult::set_reaward_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reaward_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCMatchResult.reaward_addition)
}

// repeated .BYDLD.Object3 match_goods = 7;
inline int SCMatchResult::_internal_match_goods_size() const {
  return match_goods_.size();
}
inline int SCMatchResult::match_goods_size() const {
  return _internal_match_goods_size();
}
inline void SCMatchResult::clear_match_goods() {
  match_goods_.Clear();
}
inline ::BYDLD::Object3* SCMatchResult::mutable_match_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMatchResult.match_goods)
  return match_goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
SCMatchResult::mutable_match_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCMatchResult.match_goods)
  return &match_goods_;
}
inline const ::BYDLD::Object3& SCMatchResult::_internal_match_goods(int index) const {
  return match_goods_.Get(index);
}
inline const ::BYDLD::Object3& SCMatchResult::match_goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.match_goods)
  return _internal_match_goods(index);
}
inline ::BYDLD::Object3* SCMatchResult::_internal_add_match_goods() {
  return match_goods_.Add();
}
inline ::BYDLD::Object3* SCMatchResult::add_match_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.SCMatchResult.match_goods)
  return _internal_add_match_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
SCMatchResult::match_goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCMatchResult.match_goods)
  return match_goods_;
}

// repeated .BYDLD.Object3 pack_goods = 8;
inline int SCMatchResult::_internal_pack_goods_size() const {
  return pack_goods_.size();
}
inline int SCMatchResult::pack_goods_size() const {
  return _internal_pack_goods_size();
}
inline void SCMatchResult::clear_pack_goods() {
  pack_goods_.Clear();
}
inline ::BYDLD::Object3* SCMatchResult::mutable_pack_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMatchResult.pack_goods)
  return pack_goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
SCMatchResult::mutable_pack_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCMatchResult.pack_goods)
  return &pack_goods_;
}
inline const ::BYDLD::Object3& SCMatchResult::_internal_pack_goods(int index) const {
  return pack_goods_.Get(index);
}
inline const ::BYDLD::Object3& SCMatchResult::pack_goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.pack_goods)
  return _internal_pack_goods(index);
}
inline ::BYDLD::Object3* SCMatchResult::_internal_add_pack_goods() {
  return pack_goods_.Add();
}
inline ::BYDLD::Object3* SCMatchResult::add_pack_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.SCMatchResult.pack_goods)
  return _internal_add_pack_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
SCMatchResult::pack_goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCMatchResult.pack_goods)
  return pack_goods_;
}

// repeated .BYDLD.Object3 lucky_goods = 9;
inline int SCMatchResult::_internal_lucky_goods_size() const {
  return lucky_goods_.size();
}
inline int SCMatchResult::lucky_goods_size() const {
  return _internal_lucky_goods_size();
}
inline void SCMatchResult::clear_lucky_goods() {
  lucky_goods_.Clear();
}
inline ::BYDLD::Object3* SCMatchResult::mutable_lucky_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMatchResult.lucky_goods)
  return lucky_goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
SCMatchResult::mutable_lucky_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCMatchResult.lucky_goods)
  return &lucky_goods_;
}
inline const ::BYDLD::Object3& SCMatchResult::_internal_lucky_goods(int index) const {
  return lucky_goods_.Get(index);
}
inline const ::BYDLD::Object3& SCMatchResult::lucky_goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchResult.lucky_goods)
  return _internal_lucky_goods(index);
}
inline ::BYDLD::Object3* SCMatchResult::_internal_add_lucky_goods() {
  return lucky_goods_.Add();
}
inline ::BYDLD::Object3* SCMatchResult::add_lucky_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.SCMatchResult.lucky_goods)
  return _internal_add_lucky_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
SCMatchResult::lucky_goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCMatchResult.lucky_goods)
  return lucky_goods_;
}

// -------------------------------------------------------------------

// MatchPackAddition

// string id = 1;
inline void MatchPackAddition::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MatchPackAddition::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchPackAddition.id)
  return _internal_id();
}
inline void MatchPackAddition::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchPackAddition.id)
}
inline std::string* MatchPackAddition::mutable_id() {
  // @@protoc_insertion_point(field_mutable:BYDLD.MatchPackAddition.id)
  return _internal_mutable_id();
}
inline const std::string& MatchPackAddition::_internal_id() const {
  return id_.Get();
}
inline void MatchPackAddition::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchPackAddition::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.MatchPackAddition.id)
}
inline void MatchPackAddition::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.MatchPackAddition.id)
}
inline void MatchPackAddition::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.MatchPackAddition.id)
}
inline std::string* MatchPackAddition::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchPackAddition::release_id() {
  // @@protoc_insertion_point(field_release:BYDLD.MatchPackAddition.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchPackAddition::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.MatchPackAddition.id)
}

// bool is_buy = 2;
inline void MatchPackAddition::clear_is_buy() {
  is_buy_ = false;
}
inline bool MatchPackAddition::_internal_is_buy() const {
  return is_buy_;
}
inline bool MatchPackAddition::is_buy() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchPackAddition.is_buy)
  return _internal_is_buy();
}
inline void MatchPackAddition::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void MatchPackAddition::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchPackAddition.is_buy)
}

// float score_addition = 3;
inline void MatchPackAddition::clear_score_addition() {
  score_addition_ = 0;
}
inline float MatchPackAddition::_internal_score_addition() const {
  return score_addition_;
}
inline float MatchPackAddition::score_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchPackAddition.score_addition)
  return _internal_score_addition();
}
inline void MatchPackAddition::_internal_set_score_addition(float value) {
  
  score_addition_ = value;
}
inline void MatchPackAddition::set_score_addition(float value) {
  _internal_set_score_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchPackAddition.score_addition)
}

// float reaward_addition = 4;
inline void MatchPackAddition::clear_reaward_addition() {
  reaward_addition_ = 0;
}
inline float MatchPackAddition::_internal_reaward_addition() const {
  return reaward_addition_;
}
inline float MatchPackAddition::reaward_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchPackAddition.reaward_addition)
  return _internal_reaward_addition();
}
inline void MatchPackAddition::_internal_set_reaward_addition(float value) {
  
  reaward_addition_ = value;
}
inline void MatchPackAddition::set_reaward_addition(float value) {
  _internal_set_reaward_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchPackAddition.reaward_addition)
}

// int32 card = 5;
inline void MatchPackAddition::clear_card() {
  card_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::_internal_card() const {
  return card_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::card() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchPackAddition.card)
  return _internal_card();
}
inline void MatchPackAddition::_internal_set_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_ = value;
}
inline void MatchPackAddition::set_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchPackAddition.card)
}

// int32 sec = 6;
inline void MatchPackAddition::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPackAddition::sec() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchPackAddition.sec)
  return _internal_sec();
}
inline void MatchPackAddition::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
}
inline void MatchPackAddition::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchPackAddition.sec)
}

// -------------------------------------------------------------------

// CSMatchPackAddition

// -------------------------------------------------------------------

// SCMatchPackAddition

// repeated .BYDLD.MatchPackAddition addition = 1;
inline int SCMatchPackAddition::_internal_addition_size() const {
  return addition_.size();
}
inline int SCMatchPackAddition::addition_size() const {
  return _internal_addition_size();
}
inline void SCMatchPackAddition::clear_addition() {
  addition_.Clear();
}
inline ::BYDLD::MatchPackAddition* SCMatchPackAddition::mutable_addition(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMatchPackAddition.addition)
  return addition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchPackAddition >*
SCMatchPackAddition::mutable_addition() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCMatchPackAddition.addition)
  return &addition_;
}
inline const ::BYDLD::MatchPackAddition& SCMatchPackAddition::_internal_addition(int index) const {
  return addition_.Get(index);
}
inline const ::BYDLD::MatchPackAddition& SCMatchPackAddition::addition(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchPackAddition.addition)
  return _internal_addition(index);
}
inline ::BYDLD::MatchPackAddition* SCMatchPackAddition::_internal_add_addition() {
  return addition_.Add();
}
inline ::BYDLD::MatchPackAddition* SCMatchPackAddition::add_addition() {
  // @@protoc_insertion_point(field_add:BYDLD.SCMatchPackAddition.addition)
  return _internal_add_addition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchPackAddition >&
SCMatchPackAddition::addition() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCMatchPackAddition.addition)
  return addition_;
}

// -------------------------------------------------------------------

// SCMatchPackInvail

// string packId = 1;
inline void SCMatchPackInvail::clear_packid() {
  packid_.ClearToEmpty();
}
inline const std::string& SCMatchPackInvail::packid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMatchPackInvail.packId)
  return _internal_packid();
}
inline void SCMatchPackInvail::set_packid(const std::string& value) {
  _internal_set_packid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCMatchPackInvail.packId)
}
inline std::string* SCMatchPackInvail::mutable_packid() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMatchPackInvail.packId)
  return _internal_mutable_packid();
}
inline const std::string& SCMatchPackInvail::_internal_packid() const {
  return packid_.Get();
}
inline void SCMatchPackInvail::_internal_set_packid(const std::string& value) {
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCMatchPackInvail::set_packid(std::string&& value) {
  
  packid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCMatchPackInvail.packId)
}
inline void SCMatchPackInvail::set_packid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCMatchPackInvail.packId)
}
inline void SCMatchPackInvail::set_packid(const char* value,
    size_t size) {
  
  packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCMatchPackInvail.packId)
}
inline std::string* SCMatchPackInvail::_internal_mutable_packid() {
  
  return packid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCMatchPackInvail::release_packid() {
  // @@protoc_insertion_point(field_release:BYDLD.SCMatchPackInvail.packId)
  return packid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCMatchPackInvail::set_allocated_packid(std::string* packid) {
  if (packid != nullptr) {
    
  } else {
    
  }
  packid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCMatchPackInvail.packId)
}

// -------------------------------------------------------------------

// HttpResult

// int32 En = 1;
inline void HttpResult::clear_en() {
  en_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpResult::_internal_en() const {
  return en_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HttpResult::en() const {
  // @@protoc_insertion_point(field_get:BYDLD.HttpResult.En)
  return _internal_en();
}
inline void HttpResult::_internal_set_en(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  en_ = value;
}
inline void HttpResult::set_en(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_en(value);
  // @@protoc_insertion_point(field_set:BYDLD.HttpResult.En)
}

// string Data = 2;
inline void HttpResult::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& HttpResult::data() const {
  // @@protoc_insertion_point(field_get:BYDLD.HttpResult.Data)
  return _internal_data();
}
inline void HttpResult::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:BYDLD.HttpResult.Data)
}
inline std::string* HttpResult::mutable_data() {
  // @@protoc_insertion_point(field_mutable:BYDLD.HttpResult.Data)
  return _internal_mutable_data();
}
inline const std::string& HttpResult::_internal_data() const {
  return data_.Get();
}
inline void HttpResult::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HttpResult::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.HttpResult.Data)
}
inline void HttpResult::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.HttpResult.Data)
}
inline void HttpResult::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.HttpResult.Data)
}
inline std::string* HttpResult::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HttpResult::release_data() {
  // @@protoc_insertion_point(field_release:BYDLD.HttpResult.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpResult::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.HttpResult.Data)
}

// -------------------------------------------------------------------

// CSHBonusPool

// int32 mathcId = 1;
inline void CSHBonusPool::clear_mathcid() {
  mathcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHBonusPool::_internal_mathcid() const {
  return mathcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHBonusPool::mathcid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHBonusPool.mathcId)
  return _internal_mathcid();
}
inline void CSHBonusPool::_internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mathcid_ = value;
}
inline void CSHBonusPool::set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mathcid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHBonusPool.mathcId)
}

// int32 timeId = 2;
inline void CSHBonusPool::clear_timeid() {
  timeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHBonusPool::_internal_timeid() const {
  return timeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHBonusPool::timeid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHBonusPool.timeId)
  return _internal_timeid();
}
inline void CSHBonusPool::_internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeid_ = value;
}
inline void CSHBonusPool::set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHBonusPool.timeId)
}

// int32 playerId = 3;
inline void CSHBonusPool::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHBonusPool::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHBonusPool::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHBonusPool.playerId)
  return _internal_playerid();
}
inline void CSHBonusPool::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSHBonusPool::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHBonusPool.playerId)
}

// -------------------------------------------------------------------

// HBonusPool

// string name = 1;
inline void HBonusPool::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HBonusPool::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.HBonusPool.name)
  return _internal_name();
}
inline void HBonusPool::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.HBonusPool.name)
}
inline std::string* HBonusPool::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.HBonusPool.name)
  return _internal_mutable_name();
}
inline const std::string& HBonusPool::_internal_name() const {
  return name_.Get();
}
inline void HBonusPool::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HBonusPool::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.HBonusPool.name)
}
inline void HBonusPool::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.HBonusPool.name)
}
inline void HBonusPool::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.HBonusPool.name)
}
inline std::string* HBonusPool::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HBonusPool::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.HBonusPool.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HBonusPool::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.HBonusPool.name)
}

// int32 value = 2;
inline void HBonusPool::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBonusPool::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBonusPool::value() const {
  // @@protoc_insertion_point(field_get:BYDLD.HBonusPool.value)
  return _internal_value();
}
inline void HBonusPool::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void HBonusPool::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.HBonusPool.value)
}

// int32 count = 3;
inline void HBonusPool::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBonusPool::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBonusPool::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.HBonusPool.count)
  return _internal_count();
}
inline void HBonusPool::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void HBonusPool::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.HBonusPool.count)
}

// -------------------------------------------------------------------

// SCHBonusPool

// repeated .BYDLD.HBonusPool pool = 1;
inline int SCHBonusPool::_internal_pool_size() const {
  return pool_.size();
}
inline int SCHBonusPool::pool_size() const {
  return _internal_pool_size();
}
inline void SCHBonusPool::clear_pool() {
  pool_.Clear();
}
inline ::BYDLD::HBonusPool* SCHBonusPool::mutable_pool(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHBonusPool.pool)
  return pool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HBonusPool >*
SCHBonusPool::mutable_pool() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCHBonusPool.pool)
  return &pool_;
}
inline const ::BYDLD::HBonusPool& SCHBonusPool::_internal_pool(int index) const {
  return pool_.Get(index);
}
inline const ::BYDLD::HBonusPool& SCHBonusPool::pool(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHBonusPool.pool)
  return _internal_pool(index);
}
inline ::BYDLD::HBonusPool* SCHBonusPool::_internal_add_pool() {
  return pool_.Add();
}
inline ::BYDLD::HBonusPool* SCHBonusPool::add_pool() {
  // @@protoc_insertion_point(field_add:BYDLD.SCHBonusPool.pool)
  return _internal_add_pool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HBonusPool >&
SCHBonusPool::pool() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCHBonusPool.pool)
  return pool_;
}

// -------------------------------------------------------------------

// CSHRankBar

// int32 mathcId = 1;
inline void CSHRankBar::clear_mathcid() {
  mathcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRankBar::_internal_mathcid() const {
  return mathcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRankBar::mathcid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHRankBar.mathcId)
  return _internal_mathcid();
}
inline void CSHRankBar::_internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mathcid_ = value;
}
inline void CSHRankBar::set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mathcid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHRankBar.mathcId)
}

// int32 timeId = 2;
inline void CSHRankBar::clear_timeid() {
  timeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRankBar::_internal_timeid() const {
  return timeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRankBar::timeid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHRankBar.timeId)
  return _internal_timeid();
}
inline void CSHRankBar::_internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeid_ = value;
}
inline void CSHRankBar::set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHRankBar.timeId)
}

// int32 playerId = 3;
inline void CSHRankBar::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRankBar::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRankBar::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHRankBar.playerId)
  return _internal_playerid();
}
inline void CSHRankBar::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSHRankBar::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHRankBar.playerId)
}

// -------------------------------------------------------------------

// SCHRankBar

// int32 idx = 1;
inline void SCHRankBar::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRankBar::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRankBar::idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRankBar.idx)
  return _internal_idx();
}
inline void SCHRankBar::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void SCHRankBar::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRankBar.idx)
}

// int32 total = 2;
inline void SCHRankBar::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRankBar::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRankBar::total() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRankBar.total)
  return _internal_total();
}
inline void SCHRankBar::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void SCHRankBar::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRankBar.total)
}

// int32 reaward = 3;
inline void SCHRankBar::clear_reaward() {
  reaward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRankBar::_internal_reaward() const {
  return reaward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRankBar::reaward() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRankBar.reaward)
  return _internal_reaward();
}
inline void SCHRankBar::_internal_set_reaward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reaward_ = value;
}
inline void SCHRankBar::set_reaward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reaward(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRankBar.reaward)
}

// -------------------------------------------------------------------

// RealRank

// int32 idx = 1;
inline void RealRank::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealRank::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealRank::idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.RealRank.idx)
  return _internal_idx();
}
inline void RealRank::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void RealRank::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.RealRank.idx)
}

// string icon = 2;
inline void RealRank::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& RealRank::icon() const {
  // @@protoc_insertion_point(field_get:BYDLD.RealRank.icon)
  return _internal_icon();
}
inline void RealRank::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:BYDLD.RealRank.icon)
}
inline std::string* RealRank::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:BYDLD.RealRank.icon)
  return _internal_mutable_icon();
}
inline const std::string& RealRank::_internal_icon() const {
  return icon_.Get();
}
inline void RealRank::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RealRank::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.RealRank.icon)
}
inline void RealRank::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.RealRank.icon)
}
inline void RealRank::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.RealRank.icon)
}
inline std::string* RealRank::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RealRank::release_icon() {
  // @@protoc_insertion_point(field_release:BYDLD.RealRank.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealRank::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.RealRank.icon)
}

// string name = 3;
inline void RealRank::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RealRank::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.RealRank.name)
  return _internal_name();
}
inline void RealRank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.RealRank.name)
}
inline std::string* RealRank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.RealRank.name)
  return _internal_mutable_name();
}
inline const std::string& RealRank::_internal_name() const {
  return name_.Get();
}
inline void RealRank::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RealRank::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.RealRank.name)
}
inline void RealRank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.RealRank.name)
}
inline void RealRank::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.RealRank.name)
}
inline std::string* RealRank::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RealRank::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.RealRank.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealRank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.RealRank.name)
}

// int32 score = 4;
inline void RealRank::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealRank::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealRank::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.RealRank.score)
  return _internal_score();
}
inline void RealRank::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void RealRank::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.RealRank.score)
}

// repeated .BYDLD.Object3 goods = 5;
inline int RealRank::_internal_goods_size() const {
  return goods_.size();
}
inline int RealRank::goods_size() const {
  return _internal_goods_size();
}
inline void RealRank::clear_goods() {
  goods_.Clear();
}
inline ::BYDLD::Object3* RealRank::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.RealRank.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
RealRank::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.RealRank.goods)
  return &goods_;
}
inline const ::BYDLD::Object3& RealRank::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::BYDLD::Object3& RealRank::goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.RealRank.goods)
  return _internal_goods(index);
}
inline ::BYDLD::Object3* RealRank::_internal_add_goods() {
  return goods_.Add();
}
inline ::BYDLD::Object3* RealRank::add_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.RealRank.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
RealRank::goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.RealRank.goods)
  return goods_;
}

// -------------------------------------------------------------------

// CSHRealRank

// int32 playerId = 1;
inline void CSHRealRank::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRealRank::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRealRank::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHRealRank.playerId)
  return _internal_playerid();
}
inline void CSHRealRank::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSHRealRank::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHRealRank.playerId)
}

// int32 mathcId = 2;
inline void CSHRealRank::clear_mathcid() {
  mathcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRealRank::_internal_mathcid() const {
  return mathcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRealRank::mathcid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHRealRank.mathcId)
  return _internal_mathcid();
}
inline void CSHRealRank::_internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mathcid_ = value;
}
inline void CSHRealRank::set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mathcid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHRealRank.mathcId)
}

// int32 timeId = 3;
inline void CSHRealRank::clear_timeid() {
  timeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRealRank::_internal_timeid() const {
  return timeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHRealRank::timeid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHRealRank.timeId)
  return _internal_timeid();
}
inline void CSHRealRank::_internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeid_ = value;
}
inline void CSHRealRank::set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHRealRank.timeId)
}

// -------------------------------------------------------------------

// SCHRealRank

// repeated .BYDLD.RealRank real_rank = 1;
inline int SCHRealRank::_internal_real_rank_size() const {
  return real_rank_.size();
}
inline int SCHRealRank::real_rank_size() const {
  return _internal_real_rank_size();
}
inline void SCHRealRank::clear_real_rank() {
  real_rank_.Clear();
}
inline ::BYDLD::RealRank* SCHRealRank::mutable_real_rank(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHRealRank.real_rank)
  return real_rank_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RealRank >*
SCHRealRank::mutable_real_rank() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCHRealRank.real_rank)
  return &real_rank_;
}
inline const ::BYDLD::RealRank& SCHRealRank::_internal_real_rank(int index) const {
  return real_rank_.Get(index);
}
inline const ::BYDLD::RealRank& SCHRealRank::real_rank(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.real_rank)
  return _internal_real_rank(index);
}
inline ::BYDLD::RealRank* SCHRealRank::_internal_add_real_rank() {
  return real_rank_.Add();
}
inline ::BYDLD::RealRank* SCHRealRank::add_real_rank() {
  // @@protoc_insertion_point(field_add:BYDLD.SCHRealRank.real_rank)
  return _internal_add_real_rank();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RealRank >&
SCHRealRank::real_rank() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCHRealRank.real_rank)
  return real_rank_;
}

// .BYDLD.RealRank onself_rank = 2;
inline bool SCHRealRank::_internal_has_onself_rank() const {
  return this != internal_default_instance() && onself_rank_ != nullptr;
}
inline bool SCHRealRank::has_onself_rank() const {
  return _internal_has_onself_rank();
}
inline void SCHRealRank::clear_onself_rank() {
  if (GetArena() == nullptr && onself_rank_ != nullptr) {
    delete onself_rank_;
  }
  onself_rank_ = nullptr;
}
inline const ::BYDLD::RealRank& SCHRealRank::_internal_onself_rank() const {
  const ::BYDLD::RealRank* p = onself_rank_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::RealRank&>(
      ::BYDLD::_RealRank_default_instance_);
}
inline const ::BYDLD::RealRank& SCHRealRank::onself_rank() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.onself_rank)
  return _internal_onself_rank();
}
inline void SCHRealRank::unsafe_arena_set_allocated_onself_rank(
    ::BYDLD::RealRank* onself_rank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(onself_rank_);
  }
  onself_rank_ = onself_rank;
  if (onself_rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCHRealRank.onself_rank)
}
inline ::BYDLD::RealRank* SCHRealRank::release_onself_rank() {
  
  ::BYDLD::RealRank* temp = onself_rank_;
  onself_rank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::RealRank* SCHRealRank::unsafe_arena_release_onself_rank() {
  // @@protoc_insertion_point(field_release:BYDLD.SCHRealRank.onself_rank)
  
  ::BYDLD::RealRank* temp = onself_rank_;
  onself_rank_ = nullptr;
  return temp;
}
inline ::BYDLD::RealRank* SCHRealRank::_internal_mutable_onself_rank() {
  
  if (onself_rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::RealRank>(GetArena());
    onself_rank_ = p;
  }
  return onself_rank_;
}
inline ::BYDLD::RealRank* SCHRealRank::mutable_onself_rank() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHRealRank.onself_rank)
  return _internal_mutable_onself_rank();
}
inline void SCHRealRank::set_allocated_onself_rank(::BYDLD::RealRank* onself_rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete onself_rank_;
  }
  if (onself_rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(onself_rank);
    if (message_arena != submessage_arena) {
      onself_rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onself_rank, submessage_arena);
    }
    
  } else {
    
  }
  onself_rank_ = onself_rank;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCHRealRank.onself_rank)
}

// int32 total_num = 3;
inline void SCHRealRank::clear_total_num() {
  total_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::_internal_total_num() const {
  return total_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::total_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.total_num)
  return _internal_total_num();
}
inline void SCHRealRank::_internal_set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_num_ = value;
}
inline void SCHRealRank::set_total_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRealRank.total_num)
}

// int32 score_addition = 4;
inline void SCHRealRank::clear_score_addition() {
  score_addition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::_internal_score_addition() const {
  return score_addition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::score_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.score_addition)
  return _internal_score_addition();
}
inline void SCHRealRank::_internal_set_score_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_addition_ = value;
}
inline void SCHRealRank::set_score_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRealRank.score_addition)
}

// int32 reward_addition = 5;
inline void SCHRealRank::clear_reward_addition() {
  reward_addition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::_internal_reward_addition() const {
  return reward_addition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::reward_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.reward_addition)
  return _internal_reward_addition();
}
inline void SCHRealRank::_internal_set_reward_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_addition_ = value;
}
inline void SCHRealRank::set_reward_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRealRank.reward_addition)
}

// int32 card_addition = 6;
inline void SCHRealRank::clear_card_addition() {
  card_addition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::_internal_card_addition() const {
  return card_addition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::card_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.card_addition)
  return _internal_card_addition();
}
inline void SCHRealRank::_internal_set_card_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_addition_ = value;
}
inline void SCHRealRank::set_card_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRealRank.card_addition)
}

// int32 vip_addition = 7;
inline void SCHRealRank::clear_vip_addition() {
  vip_addition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::_internal_vip_addition() const {
  return vip_addition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHRealRank::vip_addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHRealRank.vip_addition)
  return _internal_vip_addition();
}
inline void SCHRealRank::_internal_set_vip_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_addition_ = value;
}
inline void SCHRealRank::set_vip_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHRealRank.vip_addition)
}

// -------------------------------------------------------------------

// Reward

// int32 idxl = 1;
inline void Reward::clear_idxl() {
  idxl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reward::_internal_idxl() const {
  return idxl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reward::idxl() const {
  // @@protoc_insertion_point(field_get:BYDLD.Reward.idxl)
  return _internal_idxl();
}
inline void Reward::_internal_set_idxl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idxl_ = value;
}
inline void Reward::set_idxl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idxl(value);
  // @@protoc_insertion_point(field_set:BYDLD.Reward.idxl)
}

// int32 idxr = 2;
inline void Reward::clear_idxr() {
  idxr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reward::_internal_idxr() const {
  return idxr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reward::idxr() const {
  // @@protoc_insertion_point(field_get:BYDLD.Reward.idxr)
  return _internal_idxr();
}
inline void Reward::_internal_set_idxr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idxr_ = value;
}
inline void Reward::set_idxr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idxr(value);
  // @@protoc_insertion_point(field_set:BYDLD.Reward.idxr)
}

// repeated .BYDLD.Object3 goods = 3;
inline int Reward::_internal_goods_size() const {
  return goods_.size();
}
inline int Reward::goods_size() const {
  return _internal_goods_size();
}
inline void Reward::clear_goods() {
  goods_.Clear();
}
inline ::BYDLD::Object3* Reward::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.Reward.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
Reward::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.Reward.goods)
  return &goods_;
}
inline const ::BYDLD::Object3& Reward::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::BYDLD::Object3& Reward::goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.Reward.goods)
  return _internal_goods(index);
}
inline ::BYDLD::Object3* Reward::_internal_add_goods() {
  return goods_.Add();
}
inline ::BYDLD::Object3* Reward::add_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.Reward.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
Reward::goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.Reward.goods)
  return goods_;
}

// string lucky = 4;
inline void Reward::clear_lucky() {
  lucky_.ClearToEmpty();
}
inline const std::string& Reward::lucky() const {
  // @@protoc_insertion_point(field_get:BYDLD.Reward.lucky)
  return _internal_lucky();
}
inline void Reward::set_lucky(const std::string& value) {
  _internal_set_lucky(value);
  // @@protoc_insertion_point(field_set:BYDLD.Reward.lucky)
}
inline std::string* Reward::mutable_lucky() {
  // @@protoc_insertion_point(field_mutable:BYDLD.Reward.lucky)
  return _internal_mutable_lucky();
}
inline const std::string& Reward::_internal_lucky() const {
  return lucky_.Get();
}
inline void Reward::_internal_set_lucky(const std::string& value) {
  
  lucky_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reward::set_lucky(std::string&& value) {
  
  lucky_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.Reward.lucky)
}
inline void Reward::set_lucky(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lucky_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.Reward.lucky)
}
inline void Reward::set_lucky(const char* value,
    size_t size) {
  
  lucky_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.Reward.lucky)
}
inline std::string* Reward::_internal_mutable_lucky() {
  
  return lucky_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reward::release_lucky() {
  // @@protoc_insertion_point(field_release:BYDLD.Reward.lucky)
  return lucky_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reward::set_allocated_lucky(std::string* lucky) {
  if (lucky != nullptr) {
    
  } else {
    
  }
  lucky_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lucky,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.Reward.lucky)
}

// -------------------------------------------------------------------

// CSHReward

// int32 mathcId = 1;
inline void CSHReward::clear_mathcid() {
  mathcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHReward::_internal_mathcid() const {
  return mathcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHReward::mathcid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHReward.mathcId)
  return _internal_mathcid();
}
inline void CSHReward::_internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mathcid_ = value;
}
inline void CSHReward::set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mathcid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHReward.mathcId)
}

// int32 timeId = 2;
inline void CSHReward::clear_timeid() {
  timeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHReward::_internal_timeid() const {
  return timeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHReward::timeid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHReward.timeId)
  return _internal_timeid();
}
inline void CSHReward::_internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeid_ = value;
}
inline void CSHReward::set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHReward.timeId)
}

// -------------------------------------------------------------------

// SCHReward

// int32 rewards = 1;
inline void SCHReward::clear_rewards() {
  rewards_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHReward::_internal_rewards() const {
  return rewards_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHReward::rewards() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHReward.rewards)
  return _internal_rewards();
}
inline void SCHReward::_internal_set_rewards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewards_ = value;
}
inline void SCHReward::set_rewards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rewards(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHReward.rewards)
}

// -------------------------------------------------------------------

// CSHMatchInfoTip

// -------------------------------------------------------------------

// MatchInfoTip

// string name = 1;
inline void MatchInfoTip::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MatchInfoTip::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchInfoTip.name)
  return _internal_name();
}
inline void MatchInfoTip::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchInfoTip.name)
}
inline std::string* MatchInfoTip::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.MatchInfoTip.name)
  return _internal_mutable_name();
}
inline const std::string& MatchInfoTip::_internal_name() const {
  return name_.Get();
}
inline void MatchInfoTip::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchInfoTip::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.MatchInfoTip.name)
}
inline void MatchInfoTip::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.MatchInfoTip.name)
}
inline void MatchInfoTip::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.MatchInfoTip.name)
}
inline std::string* MatchInfoTip::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchInfoTip::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.MatchInfoTip.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchInfoTip::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.MatchInfoTip.name)
}

// int32 mathcId = 2;
inline void MatchInfoTip::clear_mathcid() {
  mathcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchInfoTip::_internal_mathcid() const {
  return mathcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchInfoTip::mathcid() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchInfoTip.mathcId)
  return _internal_mathcid();
}
inline void MatchInfoTip::_internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mathcid_ = value;
}
inline void MatchInfoTip::set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mathcid(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchInfoTip.mathcId)
}

// string time = 3;
inline void MatchInfoTip::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& MatchInfoTip::time() const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchInfoTip.time)
  return _internal_time();
}
inline void MatchInfoTip::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.MatchInfoTip.time)
}
inline std::string* MatchInfoTip::mutable_time() {
  // @@protoc_insertion_point(field_mutable:BYDLD.MatchInfoTip.time)
  return _internal_mutable_time();
}
inline const std::string& MatchInfoTip::_internal_time() const {
  return time_.Get();
}
inline void MatchInfoTip::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MatchInfoTip::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.MatchInfoTip.time)
}
inline void MatchInfoTip::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.MatchInfoTip.time)
}
inline void MatchInfoTip::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.MatchInfoTip.time)
}
inline std::string* MatchInfoTip::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MatchInfoTip::release_time() {
  // @@protoc_insertion_point(field_release:BYDLD.MatchInfoTip.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchInfoTip::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.MatchInfoTip.time)
}

// repeated .BYDLD.Object3 goods = 4;
inline int MatchInfoTip::_internal_goods_size() const {
  return goods_.size();
}
inline int MatchInfoTip::goods_size() const {
  return _internal_goods_size();
}
inline void MatchInfoTip::clear_goods() {
  goods_.Clear();
}
inline ::BYDLD::Object3* MatchInfoTip::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.MatchInfoTip.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
MatchInfoTip::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.MatchInfoTip.goods)
  return &goods_;
}
inline const ::BYDLD::Object3& MatchInfoTip::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::BYDLD::Object3& MatchInfoTip::goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.MatchInfoTip.goods)
  return _internal_goods(index);
}
inline ::BYDLD::Object3* MatchInfoTip::_internal_add_goods() {
  return goods_.Add();
}
inline ::BYDLD::Object3* MatchInfoTip::add_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.MatchInfoTip.goods)
  return _internal_add_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
MatchInfoTip::goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.MatchInfoTip.goods)
  return goods_;
}

// -------------------------------------------------------------------

// SCHMatchInfoTip

// repeated .BYDLD.MatchInfoTip matchTips = 1;
inline int SCHMatchInfoTip::_internal_matchtips_size() const {
  return matchtips_.size();
}
inline int SCHMatchInfoTip::matchtips_size() const {
  return _internal_matchtips_size();
}
inline void SCHMatchInfoTip::clear_matchtips() {
  matchtips_.Clear();
}
inline ::BYDLD::MatchInfoTip* SCHMatchInfoTip::mutable_matchtips(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHMatchInfoTip.matchTips)
  return matchtips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchInfoTip >*
SCHMatchInfoTip::mutable_matchtips() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCHMatchInfoTip.matchTips)
  return &matchtips_;
}
inline const ::BYDLD::MatchInfoTip& SCHMatchInfoTip::_internal_matchtips(int index) const {
  return matchtips_.Get(index);
}
inline const ::BYDLD::MatchInfoTip& SCHMatchInfoTip::matchtips(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfoTip.matchTips)
  return _internal_matchtips(index);
}
inline ::BYDLD::MatchInfoTip* SCHMatchInfoTip::_internal_add_matchtips() {
  return matchtips_.Add();
}
inline ::BYDLD::MatchInfoTip* SCHMatchInfoTip::add_matchtips() {
  // @@protoc_insertion_point(field_add:BYDLD.SCHMatchInfoTip.matchTips)
  return _internal_add_matchtips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MatchInfoTip >&
SCHMatchInfoTip::matchtips() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCHMatchInfoTip.matchTips)
  return matchtips_;
}

// -------------------------------------------------------------------

// CSHMatchInfo

// int32 playerId = 1;
inline void CSHMatchInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHMatchInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHMatchInfo::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHMatchInfo.playerId)
  return _internal_playerid();
}
inline void CSHMatchInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSHMatchInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHMatchInfo.playerId)
}

// -------------------------------------------------------------------

// SCHMatchInfo

// string name = 1;
inline void SCHMatchInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SCHMatchInfo::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfo.name)
  return _internal_name();
}
inline void SCHMatchInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHMatchInfo.name)
}
inline std::string* SCHMatchInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHMatchInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SCHMatchInfo::_internal_name() const {
  return name_.Get();
}
inline void SCHMatchInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCHMatchInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCHMatchInfo.name)
}
inline void SCHMatchInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCHMatchInfo.name)
}
inline void SCHMatchInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCHMatchInfo.name)
}
inline std::string* SCHMatchInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCHMatchInfo::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.SCHMatchInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCHMatchInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCHMatchInfo.name)
}

// int32 mathcId = 2;
inline void SCHMatchInfo::clear_mathcid() {
  mathcid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::_internal_mathcid() const {
  return mathcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::mathcid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfo.mathcId)
  return _internal_mathcid();
}
inline void SCHMatchInfo::_internal_set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mathcid_ = value;
}
inline void SCHMatchInfo::set_mathcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mathcid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHMatchInfo.mathcId)
}

// int32 timeId = 3;
inline void SCHMatchInfo::clear_timeid() {
  timeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::_internal_timeid() const {
  return timeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::timeid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfo.timeId)
  return _internal_timeid();
}
inline void SCHMatchInfo::_internal_set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeid_ = value;
}
inline void SCHMatchInfo::set_timeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHMatchInfo.timeId)
}

// int32 status = 4;
inline void SCHMatchInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfo.status)
  return _internal_status();
}
inline void SCHMatchInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCHMatchInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHMatchInfo.status)
}

// int32 down = 5;
inline void SCHMatchInfo::clear_down() {
  down_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::_internal_down() const {
  return down_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHMatchInfo::down() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfo.down)
  return _internal_down();
}
inline void SCHMatchInfo::_internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_ = value;
}
inline void SCHMatchInfo::set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHMatchInfo.down)
}

// string time = 6;
inline void SCHMatchInfo::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& SCHMatchInfo::time() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHMatchInfo.time)
  return _internal_time();
}
inline void SCHMatchInfo::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHMatchInfo.time)
}
inline std::string* SCHMatchInfo::mutable_time() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHMatchInfo.time)
  return _internal_mutable_time();
}
inline const std::string& SCHMatchInfo::_internal_time() const {
  return time_.Get();
}
inline void SCHMatchInfo::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCHMatchInfo::set_time(std::string&& value) {
  
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCHMatchInfo.time)
}
inline void SCHMatchInfo::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCHMatchInfo.time)
}
inline void SCHMatchInfo::set_time(const char* value,
    size_t size) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCHMatchInfo.time)
}
inline std::string* SCHMatchInfo::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCHMatchInfo::release_time() {
  // @@protoc_insertion_point(field_release:BYDLD.SCHMatchInfo.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCHMatchInfo::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCHMatchInfo.time)
}

// -------------------------------------------------------------------

// HistoryRank

// int32 idx = 1;
inline void HistoryRank::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRank::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRank::idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.idx)
  return _internal_idx();
}
inline void HistoryRank::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void HistoryRank::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.HistoryRank.idx)
}

// string icon = 2;
inline void HistoryRank::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& HistoryRank::icon() const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.icon)
  return _internal_icon();
}
inline void HistoryRank::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:BYDLD.HistoryRank.icon)
}
inline std::string* HistoryRank::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:BYDLD.HistoryRank.icon)
  return _internal_mutable_icon();
}
inline const std::string& HistoryRank::_internal_icon() const {
  return icon_.Get();
}
inline void HistoryRank::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryRank::set_icon(std::string&& value) {
  
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.HistoryRank.icon)
}
inline void HistoryRank::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.HistoryRank.icon)
}
inline void HistoryRank::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.HistoryRank.icon)
}
inline std::string* HistoryRank::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryRank::release_icon() {
  // @@protoc_insertion_point(field_release:BYDLD.HistoryRank.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryRank::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.HistoryRank.icon)
}

// string name = 3;
inline void HistoryRank::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HistoryRank::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.name)
  return _internal_name();
}
inline void HistoryRank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.HistoryRank.name)
}
inline std::string* HistoryRank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.HistoryRank.name)
  return _internal_mutable_name();
}
inline const std::string& HistoryRank::_internal_name() const {
  return name_.Get();
}
inline void HistoryRank::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryRank::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.HistoryRank.name)
}
inline void HistoryRank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.HistoryRank.name)
}
inline void HistoryRank::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.HistoryRank.name)
}
inline std::string* HistoryRank::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryRank::release_name() {
  // @@protoc_insertion_point(field_release:BYDLD.HistoryRank.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryRank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.HistoryRank.name)
}

// int32 addition_source = 4;
inline void HistoryRank::clear_addition_source() {
  addition_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRank::_internal_addition_source() const {
  return addition_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRank::addition_source() const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.addition_source)
  return _internal_addition_source();
}
inline void HistoryRank::_internal_set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addition_source_ = value;
}
inline void HistoryRank::set_addition_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addition_source(value);
  // @@protoc_insertion_point(field_set:BYDLD.HistoryRank.addition_source)
}

// int32 addition = 5;
inline void HistoryRank::clear_addition() {
  addition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRank::_internal_addition() const {
  return addition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRank::addition() const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.addition)
  return _internal_addition();
}
inline void HistoryRank::_internal_set_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addition_ = value;
}
inline void HistoryRank::set_addition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addition(value);
  // @@protoc_insertion_point(field_set:BYDLD.HistoryRank.addition)
}

// repeated .BYDLD.Object3 match_goods = 6;
inline int HistoryRank::_internal_match_goods_size() const {
  return match_goods_.size();
}
inline int HistoryRank::match_goods_size() const {
  return _internal_match_goods_size();
}
inline void HistoryRank::clear_match_goods() {
  match_goods_.Clear();
}
inline ::BYDLD::Object3* HistoryRank::mutable_match_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.HistoryRank.match_goods)
  return match_goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
HistoryRank::mutable_match_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.HistoryRank.match_goods)
  return &match_goods_;
}
inline const ::BYDLD::Object3& HistoryRank::_internal_match_goods(int index) const {
  return match_goods_.Get(index);
}
inline const ::BYDLD::Object3& HistoryRank::match_goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.match_goods)
  return _internal_match_goods(index);
}
inline ::BYDLD::Object3* HistoryRank::_internal_add_match_goods() {
  return match_goods_.Add();
}
inline ::BYDLD::Object3* HistoryRank::add_match_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.HistoryRank.match_goods)
  return _internal_add_match_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
HistoryRank::match_goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.HistoryRank.match_goods)
  return match_goods_;
}

// repeated .BYDLD.Object3 pack_goods = 7;
inline int HistoryRank::_internal_pack_goods_size() const {
  return pack_goods_.size();
}
inline int HistoryRank::pack_goods_size() const {
  return _internal_pack_goods_size();
}
inline void HistoryRank::clear_pack_goods() {
  pack_goods_.Clear();
}
inline ::BYDLD::Object3* HistoryRank::mutable_pack_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.HistoryRank.pack_goods)
  return pack_goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
HistoryRank::mutable_pack_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.HistoryRank.pack_goods)
  return &pack_goods_;
}
inline const ::BYDLD::Object3& HistoryRank::_internal_pack_goods(int index) const {
  return pack_goods_.Get(index);
}
inline const ::BYDLD::Object3& HistoryRank::pack_goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.pack_goods)
  return _internal_pack_goods(index);
}
inline ::BYDLD::Object3* HistoryRank::_internal_add_pack_goods() {
  return pack_goods_.Add();
}
inline ::BYDLD::Object3* HistoryRank::add_pack_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.HistoryRank.pack_goods)
  return _internal_add_pack_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
HistoryRank::pack_goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.HistoryRank.pack_goods)
  return pack_goods_;
}

// repeated .BYDLD.Object3 lucky_goods = 8;
inline int HistoryRank::_internal_lucky_goods_size() const {
  return lucky_goods_.size();
}
inline int HistoryRank::lucky_goods_size() const {
  return _internal_lucky_goods_size();
}
inline void HistoryRank::clear_lucky_goods() {
  lucky_goods_.Clear();
}
inline ::BYDLD::Object3* HistoryRank::mutable_lucky_goods(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.HistoryRank.lucky_goods)
  return lucky_goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
HistoryRank::mutable_lucky_goods() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.HistoryRank.lucky_goods)
  return &lucky_goods_;
}
inline const ::BYDLD::Object3& HistoryRank::_internal_lucky_goods(int index) const {
  return lucky_goods_.Get(index);
}
inline const ::BYDLD::Object3& HistoryRank::lucky_goods(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.HistoryRank.lucky_goods)
  return _internal_lucky_goods(index);
}
inline ::BYDLD::Object3* HistoryRank::_internal_add_lucky_goods() {
  return lucky_goods_.Add();
}
inline ::BYDLD::Object3* HistoryRank::add_lucky_goods() {
  // @@protoc_insertion_point(field_add:BYDLD.HistoryRank.lucky_goods)
  return _internal_add_lucky_goods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
HistoryRank::lucky_goods() const {
  // @@protoc_insertion_point(field_list:BYDLD.HistoryRank.lucky_goods)
  return lucky_goods_;
}

// -------------------------------------------------------------------

// CSHHistoryRank

// int32 playerId = 1;
inline void CSHHistoryRank::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHHistoryRank::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHHistoryRank::playerid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHHistoryRank.playerId)
  return _internal_playerid();
}
inline void CSHHistoryRank::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSHHistoryRank::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHHistoryRank.playerId)
}

// int32 matchId = 2;
inline void CSHHistoryRank::clear_matchid() {
  matchid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHHistoryRank::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHHistoryRank::matchid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHHistoryRank.matchId)
  return _internal_matchid();
}
inline void CSHHistoryRank::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchid_ = value;
}
inline void CSHHistoryRank::set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHHistoryRank.matchId)
}

// -------------------------------------------------------------------

// SCHHistoryRank

// int32 matchId = 1;
inline void SCHHistoryRank::clear_matchid() {
  matchid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHHistoryRank::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHHistoryRank::matchid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHHistoryRank.matchId)
  return _internal_matchid();
}
inline void SCHHistoryRank::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchid_ = value;
}
inline void SCHHistoryRank::set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHHistoryRank.matchId)
}

// repeated .BYDLD.HistoryRank rank_list = 2;
inline int SCHHistoryRank::_internal_rank_list_size() const {
  return rank_list_.size();
}
inline int SCHHistoryRank::rank_list_size() const {
  return _internal_rank_list_size();
}
inline void SCHHistoryRank::clear_rank_list() {
  rank_list_.Clear();
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::mutable_rank_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHHistoryRank.rank_list)
  return rank_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HistoryRank >*
SCHHistoryRank::mutable_rank_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCHHistoryRank.rank_list)
  return &rank_list_;
}
inline const ::BYDLD::HistoryRank& SCHHistoryRank::_internal_rank_list(int index) const {
  return rank_list_.Get(index);
}
inline const ::BYDLD::HistoryRank& SCHHistoryRank::rank_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHHistoryRank.rank_list)
  return _internal_rank_list(index);
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::_internal_add_rank_list() {
  return rank_list_.Add();
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::add_rank_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCHHistoryRank.rank_list)
  return _internal_add_rank_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::HistoryRank >&
SCHHistoryRank::rank_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCHHistoryRank.rank_list)
  return rank_list_;
}

// .BYDLD.HistoryRank oneself_rank = 3;
inline bool SCHHistoryRank::_internal_has_oneself_rank() const {
  return this != internal_default_instance() && oneself_rank_ != nullptr;
}
inline bool SCHHistoryRank::has_oneself_rank() const {
  return _internal_has_oneself_rank();
}
inline void SCHHistoryRank::clear_oneself_rank() {
  if (GetArena() == nullptr && oneself_rank_ != nullptr) {
    delete oneself_rank_;
  }
  oneself_rank_ = nullptr;
}
inline const ::BYDLD::HistoryRank& SCHHistoryRank::_internal_oneself_rank() const {
  const ::BYDLD::HistoryRank* p = oneself_rank_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::HistoryRank&>(
      ::BYDLD::_HistoryRank_default_instance_);
}
inline const ::BYDLD::HistoryRank& SCHHistoryRank::oneself_rank() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHHistoryRank.oneself_rank)
  return _internal_oneself_rank();
}
inline void SCHHistoryRank::unsafe_arena_set_allocated_oneself_rank(
    ::BYDLD::HistoryRank* oneself_rank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oneself_rank_);
  }
  oneself_rank_ = oneself_rank;
  if (oneself_rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCHHistoryRank.oneself_rank)
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::release_oneself_rank() {
  
  ::BYDLD::HistoryRank* temp = oneself_rank_;
  oneself_rank_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::unsafe_arena_release_oneself_rank() {
  // @@protoc_insertion_point(field_release:BYDLD.SCHHistoryRank.oneself_rank)
  
  ::BYDLD::HistoryRank* temp = oneself_rank_;
  oneself_rank_ = nullptr;
  return temp;
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::_internal_mutable_oneself_rank() {
  
  if (oneself_rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::HistoryRank>(GetArena());
    oneself_rank_ = p;
  }
  return oneself_rank_;
}
inline ::BYDLD::HistoryRank* SCHHistoryRank::mutable_oneself_rank() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHHistoryRank.oneself_rank)
  return _internal_mutable_oneself_rank();
}
inline void SCHHistoryRank::set_allocated_oneself_rank(::BYDLD::HistoryRank* oneself_rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oneself_rank_;
  }
  if (oneself_rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oneself_rank);
    if (message_arena != submessage_arena) {
      oneself_rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneself_rank, submessage_arena);
    }
    
  } else {
    
  }
  oneself_rank_ = oneself_rank;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCHHistoryRank.oneself_rank)
}

// -------------------------------------------------------------------

// CSHLuckyInfo

// int32 matchId = 1;
inline void CSHLuckyInfo::clear_matchid() {
  matchid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHLuckyInfo::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSHLuckyInfo::matchid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSHLuckyInfo.matchId)
  return _internal_matchid();
}
inline void CSHLuckyInfo::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchid_ = value;
}
inline void CSHLuckyInfo::set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSHLuckyInfo.matchId)
}

// -------------------------------------------------------------------

// LuckyInfo

// int32 lRange = 1;
inline void LuckyInfo::clear_lrange() {
  lrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyInfo::_internal_lrange() const {
  return lrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyInfo::lrange() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyInfo.lRange)
  return _internal_lrange();
}
inline void LuckyInfo::_internal_set_lrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lrange_ = value;
}
inline void LuckyInfo::set_lrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lrange(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyInfo.lRange)
}

// int32 rRange = 2;
inline void LuckyInfo::clear_rrange() {
  rrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyInfo::_internal_rrange() const {
  return rrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyInfo::rrange() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyInfo.rRange)
  return _internal_rrange();
}
inline void LuckyInfo::_internal_set_rrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rrange_ = value;
}
inline void LuckyInfo::set_rrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rrange(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyInfo.rRange)
}

// -------------------------------------------------------------------

// SCHLuckyInfo

// int32 matchId = 1;
inline void SCHLuckyInfo::clear_matchid() {
  matchid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHLuckyInfo::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCHLuckyInfo::matchid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHLuckyInfo.matchId)
  return _internal_matchid();
}
inline void SCHLuckyInfo::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matchid_ = value;
}
inline void SCHLuckyInfo::set_matchid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCHLuckyInfo.matchId)
}

// repeated .BYDLD.LuckyInfo data = 2;
inline int SCHLuckyInfo::_internal_data_size() const {
  return data_.size();
}
inline int SCHLuckyInfo::data_size() const {
  return _internal_data_size();
}
inline void SCHLuckyInfo::clear_data() {
  data_.Clear();
}
inline ::BYDLD::LuckyInfo* SCHLuckyInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCHLuckyInfo.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyInfo >*
SCHLuckyInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCHLuckyInfo.data)
  return &data_;
}
inline const ::BYDLD::LuckyInfo& SCHLuckyInfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::BYDLD::LuckyInfo& SCHLuckyInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCHLuckyInfo.data)
  return _internal_data(index);
}
inline ::BYDLD::LuckyInfo* SCHLuckyInfo::_internal_add_data() {
  return data_.Add();
}
inline ::BYDLD::LuckyInfo* SCHLuckyInfo::add_data() {
  // @@protoc_insertion_point(field_add:BYDLD.SCHLuckyInfo.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyInfo >&
SCHLuckyInfo::data() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCHLuckyInfo.data)
  return data_;
}

// -------------------------------------------------------------------

// AwardDetail

// int32 player_id = 1;
inline void AwardDetail::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::player_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardDetail.player_id)
  return _internal_player_id();
}
inline void AwardDetail::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void AwardDetail::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardDetail.player_id)
}

// int32 nums = 2;
inline void AwardDetail::clear_nums() {
  nums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_nums() const {
  return nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::nums() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardDetail.nums)
  return _internal_nums();
}
inline void AwardDetail::_internal_set_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nums_ = value;
}
inline void AwardDetail::set_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nums(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardDetail.nums)
}

// int32 period = 3;
inline void AwardDetail::clear_period() {
  period_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::period() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardDetail.period)
  return _internal_period();
}
inline void AwardDetail::_internal_set_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  period_ = value;
}
inline void AwardDetail::set_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardDetail.period)
}

// int32 vip = 4;
inline void AwardDetail::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardDetail::vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardDetail.vip)
  return _internal_vip();
}
inline void AwardDetail::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void AwardDetail::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardDetail.vip)
}

// string nick_name = 5;
inline void AwardDetail::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& AwardDetail::nick_name() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardDetail.nick_name)
  return _internal_nick_name();
}
inline void AwardDetail::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardDetail.nick_name)
}
inline std::string* AwardDetail::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.AwardDetail.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& AwardDetail::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void AwardDetail::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardDetail::set_nick_name(std::string&& value) {
  
  nick_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.AwardDetail.nick_name)
}
inline void AwardDetail::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.AwardDetail.nick_name)
}
inline void AwardDetail::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.AwardDetail.nick_name)
}
inline std::string* AwardDetail::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardDetail::release_nick_name() {
  // @@protoc_insertion_point(field_release:BYDLD.AwardDetail.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardDetail::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.AwardDetail.nick_name)
}

// string photo = 6;
inline void AwardDetail::clear_photo() {
  photo_.ClearToEmpty();
}
inline const std::string& AwardDetail::photo() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardDetail.photo)
  return _internal_photo();
}
inline void AwardDetail::set_photo(const std::string& value) {
  _internal_set_photo(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardDetail.photo)
}
inline std::string* AwardDetail::mutable_photo() {
  // @@protoc_insertion_point(field_mutable:BYDLD.AwardDetail.photo)
  return _internal_mutable_photo();
}
inline const std::string& AwardDetail::_internal_photo() const {
  return photo_.Get();
}
inline void AwardDetail::_internal_set_photo(const std::string& value) {
  
  photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AwardDetail::set_photo(std::string&& value) {
  
  photo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.AwardDetail.photo)
}
inline void AwardDetail::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.AwardDetail.photo)
}
inline void AwardDetail::set_photo(const char* value,
    size_t size) {
  
  photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.AwardDetail.photo)
}
inline std::string* AwardDetail::_internal_mutable_photo() {
  
  return photo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AwardDetail::release_photo() {
  // @@protoc_insertion_point(field_release:BYDLD.AwardDetail.photo)
  return photo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AwardDetail::set_allocated_photo(std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), photo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.AwardDetail.photo)
}

// -------------------------------------------------------------------

// SCLuckyAwardNotify

// int32 award_type = 1;
inline void SCLuckyAwardNotify::clear_award_type() {
  award_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyAwardNotify::_internal_award_type() const {
  return award_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyAwardNotify::award_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyAwardNotify.award_type)
  return _internal_award_type();
}
inline void SCLuckyAwardNotify::_internal_set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  award_type_ = value;
}
inline void SCLuckyAwardNotify::set_award_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_award_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyAwardNotify.award_type)
}

// repeated .BYDLD.AwardDetail detail = 2;
inline int SCLuckyAwardNotify::_internal_detail_size() const {
  return detail_.size();
}
inline int SCLuckyAwardNotify::detail_size() const {
  return _internal_detail_size();
}
inline void SCLuckyAwardNotify::clear_detail() {
  detail_.Clear();
}
inline ::BYDLD::AwardDetail* SCLuckyAwardNotify::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyAwardNotify.detail)
  return detail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardDetail >*
SCLuckyAwardNotify::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyAwardNotify.detail)
  return &detail_;
}
inline const ::BYDLD::AwardDetail& SCLuckyAwardNotify::_internal_detail(int index) const {
  return detail_.Get(index);
}
inline const ::BYDLD::AwardDetail& SCLuckyAwardNotify::detail(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyAwardNotify.detail)
  return _internal_detail(index);
}
inline ::BYDLD::AwardDetail* SCLuckyAwardNotify::_internal_add_detail() {
  return detail_.Add();
}
inline ::BYDLD::AwardDetail* SCLuckyAwardNotify::add_detail() {
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyAwardNotify.detail)
  return _internal_add_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardDetail >&
SCLuckyAwardNotify::detail() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyAwardNotify.detail)
  return detail_;
}

// -------------------------------------------------------------------

// AwardProp

// int32 prop_id = 1;
inline void AwardProp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardProp.prop_id)
  return _internal_prop_id();
}
inline void AwardProp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void AwardProp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardProp.prop_id)
}

// int32 num = 2;
inline void AwardProp::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AwardProp::num() const {
  // @@protoc_insertion_point(field_get:BYDLD.AwardProp.num)
  return _internal_num();
}
inline void AwardProp::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void AwardProp::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.AwardProp.num)
}

// -------------------------------------------------------------------

// LuckyTaskInfo

// int32 id = 1;
inline void LuckyTaskInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.id)
  return _internal_id();
}
inline void LuckyTaskInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void LuckyTaskInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.id)
}

// int32 status = 2;
inline void LuckyTaskInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.status)
  return _internal_status();
}
inline void LuckyTaskInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void LuckyTaskInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.status)
}

// int32 score = 3;
inline void LuckyTaskInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.score)
  return _internal_score();
}
inline void LuckyTaskInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void LuckyTaskInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.score)
}

// string text = 4;
inline void LuckyTaskInfo::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& LuckyTaskInfo::text() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.text)
  return _internal_text();
}
inline void LuckyTaskInfo::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.text)
}
inline std::string* LuckyTaskInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable:BYDLD.LuckyTaskInfo.text)
  return _internal_mutable_text();
}
inline const std::string& LuckyTaskInfo::_internal_text() const {
  return text_.Get();
}
inline void LuckyTaskInfo::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LuckyTaskInfo::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.LuckyTaskInfo.text)
}
inline void LuckyTaskInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.LuckyTaskInfo.text)
}
inline void LuckyTaskInfo::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.LuckyTaskInfo.text)
}
inline std::string* LuckyTaskInfo::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LuckyTaskInfo::release_text() {
  // @@protoc_insertion_point(field_release:BYDLD.LuckyTaskInfo.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LuckyTaskInfo::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.LuckyTaskInfo.text)
}

// int32 cur = 5;
inline void LuckyTaskInfo::clear_cur() {
  cur_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_cur() const {
  return cur_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::cur() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.cur)
  return _internal_cur();
}
inline void LuckyTaskInfo::_internal_set_cur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_ = value;
}
inline void LuckyTaskInfo::set_cur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.cur)
}

// int32 total = 6;
inline void LuckyTaskInfo::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyTaskInfo::total() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.total)
  return _internal_total();
}
inline void LuckyTaskInfo::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void LuckyTaskInfo::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.total)
}

// bool show = 7;
inline void LuckyTaskInfo::clear_show() {
  show_ = false;
}
inline bool LuckyTaskInfo::_internal_show() const {
  return show_;
}
inline bool LuckyTaskInfo::show() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyTaskInfo.show)
  return _internal_show();
}
inline void LuckyTaskInfo::_internal_set_show(bool value) {
  
  show_ = value;
}
inline void LuckyTaskInfo::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyTaskInfo.show)
}

// -------------------------------------------------------------------

// CSLuckyDrawInfo

// -------------------------------------------------------------------

// SCLuckyDrawInfo

// int32 hour_remain_sec = 1;
inline void SCLuckyDrawInfo::clear_hour_remain_sec() {
  hour_remain_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_remain_sec() const {
  return hour_remain_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_remain_sec() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.hour_remain_sec)
  return _internal_hour_remain_sec();
}
inline void SCLuckyDrawInfo::_internal_set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_remain_sec_ = value;
}
inline void SCLuckyDrawInfo::set_hour_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour_remain_sec(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.hour_remain_sec)
}

// int32 day_remain_sec = 2;
inline void SCLuckyDrawInfo::clear_day_remain_sec() {
  day_remain_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_remain_sec() const {
  return day_remain_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_remain_sec() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.day_remain_sec)
  return _internal_day_remain_sec();
}
inline void SCLuckyDrawInfo::_internal_set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_remain_sec_ = value;
}
inline void SCLuckyDrawInfo::set_day_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_remain_sec(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.day_remain_sec)
}

// repeated .BYDLD.AwardProp hour_reward = 3;
inline int SCLuckyDrawInfo::_internal_hour_reward_size() const {
  return hour_reward_.size();
}
inline int SCLuckyDrawInfo::hour_reward_size() const {
  return _internal_hour_reward_size();
}
inline void SCLuckyDrawInfo::clear_hour_reward() {
  hour_reward_.Clear();
}
inline ::BYDLD::AwardProp* SCLuckyDrawInfo::mutable_hour_reward(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyDrawInfo.hour_reward)
  return hour_reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >*
SCLuckyDrawInfo::mutable_hour_reward() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyDrawInfo.hour_reward)
  return &hour_reward_;
}
inline const ::BYDLD::AwardProp& SCLuckyDrawInfo::_internal_hour_reward(int index) const {
  return hour_reward_.Get(index);
}
inline const ::BYDLD::AwardProp& SCLuckyDrawInfo::hour_reward(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.hour_reward)
  return _internal_hour_reward(index);
}
inline ::BYDLD::AwardProp* SCLuckyDrawInfo::_internal_add_hour_reward() {
  return hour_reward_.Add();
}
inline ::BYDLD::AwardProp* SCLuckyDrawInfo::add_hour_reward() {
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyDrawInfo.hour_reward)
  return _internal_add_hour_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >&
SCLuckyDrawInfo::hour_reward() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyDrawInfo.hour_reward)
  return hour_reward_;
}

// repeated .BYDLD.AwardProp day_reward = 4;
inline int SCLuckyDrawInfo::_internal_day_reward_size() const {
  return day_reward_.size();
}
inline int SCLuckyDrawInfo::day_reward_size() const {
  return _internal_day_reward_size();
}
inline void SCLuckyDrawInfo::clear_day_reward() {
  day_reward_.Clear();
}
inline ::BYDLD::AwardProp* SCLuckyDrawInfo::mutable_day_reward(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyDrawInfo.day_reward)
  return day_reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >*
SCLuckyDrawInfo::mutable_day_reward() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyDrawInfo.day_reward)
  return &day_reward_;
}
inline const ::BYDLD::AwardProp& SCLuckyDrawInfo::_internal_day_reward(int index) const {
  return day_reward_.Get(index);
}
inline const ::BYDLD::AwardProp& SCLuckyDrawInfo::day_reward(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.day_reward)
  return _internal_day_reward(index);
}
inline ::BYDLD::AwardProp* SCLuckyDrawInfo::_internal_add_day_reward() {
  return day_reward_.Add();
}
inline ::BYDLD::AwardProp* SCLuckyDrawInfo::add_day_reward() {
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyDrawInfo.day_reward)
  return _internal_add_day_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >&
SCLuckyDrawInfo::day_reward() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyDrawInfo.day_reward)
  return day_reward_;
}

// repeated int32 day_lucky_nums = 5;
inline int SCLuckyDrawInfo::_internal_day_lucky_nums_size() const {
  return day_lucky_nums_.size();
}
inline int SCLuckyDrawInfo::day_lucky_nums_size() const {
  return _internal_day_lucky_nums_size();
}
inline void SCLuckyDrawInfo::clear_day_lucky_nums() {
  day_lucky_nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_lucky_nums(int index) const {
  return day_lucky_nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_lucky_nums(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.day_lucky_nums)
  return _internal_day_lucky_nums(index);
}
inline void SCLuckyDrawInfo::set_day_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_lucky_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.day_lucky_nums)
}
inline void SCLuckyDrawInfo::_internal_add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_lucky_nums_.Add(value);
}
inline void SCLuckyDrawInfo::add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_day_lucky_nums(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyDrawInfo.day_lucky_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::_internal_day_lucky_nums() const {
  return day_lucky_nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::day_lucky_nums() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyDrawInfo.day_lucky_nums)
  return _internal_day_lucky_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::_internal_mutable_day_lucky_nums() {
  return &day_lucky_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::mutable_day_lucky_nums() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyDrawInfo.day_lucky_nums)
  return _internal_mutable_day_lucky_nums();
}

// int32 score = 6;
inline void SCLuckyDrawInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.score)
  return _internal_score();
}
inline void SCLuckyDrawInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCLuckyDrawInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.score)
}

// int32 hour_total = 7;
inline void SCLuckyDrawInfo::clear_hour_total() {
  hour_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_total() const {
  return hour_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_total() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.hour_total)
  return _internal_hour_total();
}
inline void SCLuckyDrawInfo::_internal_set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_total_ = value;
}
inline void SCLuckyDrawInfo::set_hour_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour_total(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.hour_total)
}

// int32 day_total = 8;
inline void SCLuckyDrawInfo::clear_day_total() {
  day_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_total() const {
  return day_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_total() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.day_total)
  return _internal_day_total();
}
inline void SCLuckyDrawInfo::_internal_set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_total_ = value;
}
inline void SCLuckyDrawInfo::set_day_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_total(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.day_total)
}

// int32 hour_award_num = 9;
inline void SCLuckyDrawInfo::clear_hour_award_num() {
  hour_award_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_award_num() const {
  return hour_award_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_award_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.hour_award_num)
  return _internal_hour_award_num();
}
inline void SCLuckyDrawInfo::_internal_set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_award_num_ = value;
}
inline void SCLuckyDrawInfo::set_hour_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour_award_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.hour_award_num)
}

// int32 day_award_num = 10;
inline void SCLuckyDrawInfo::clear_day_award_num() {
  day_award_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_day_award_num() const {
  return day_award_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::day_award_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.day_award_num)
  return _internal_day_award_num();
}
inline void SCLuckyDrawInfo::_internal_set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_award_num_ = value;
}
inline void SCLuckyDrawInfo::set_day_award_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_award_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.day_award_num)
}

// int32 next_start_tick = 11;
inline void SCLuckyDrawInfo::clear_next_start_tick() {
  next_start_tick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_next_start_tick() const {
  return next_start_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::next_start_tick() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.next_start_tick)
  return _internal_next_start_tick();
}
inline void SCLuckyDrawInfo::_internal_set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_start_tick_ = value;
}
inline void SCLuckyDrawInfo::set_next_start_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next_start_tick(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.next_start_tick)
}

// repeated .BYDLD.LuckyTaskInfo task_info = 12;
inline int SCLuckyDrawInfo::_internal_task_info_size() const {
  return task_info_.size();
}
inline int SCLuckyDrawInfo::task_info_size() const {
  return _internal_task_info_size();
}
inline void SCLuckyDrawInfo::clear_task_info() {
  task_info_.Clear();
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyDrawInfo::mutable_task_info(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyDrawInfo.task_info)
  return task_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyTaskInfo >*
SCLuckyDrawInfo::mutable_task_info() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyDrawInfo.task_info)
  return &task_info_;
}
inline const ::BYDLD::LuckyTaskInfo& SCLuckyDrawInfo::_internal_task_info(int index) const {
  return task_info_.Get(index);
}
inline const ::BYDLD::LuckyTaskInfo& SCLuckyDrawInfo::task_info(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.task_info)
  return _internal_task_info(index);
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyDrawInfo::_internal_add_task_info() {
  return task_info_.Add();
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyDrawInfo::add_task_info() {
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyDrawInfo.task_info)
  return _internal_add_task_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyTaskInfo >&
SCLuckyDrawInfo::task_info() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyDrawInfo.task_info)
  return task_info_;
}

// int32 exchange_score = 13;
inline void SCLuckyDrawInfo::clear_exchange_score() {
  exchange_score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_exchange_score() const {
  return exchange_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::exchange_score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.exchange_score)
  return _internal_exchange_score();
}
inline void SCLuckyDrawInfo::_internal_set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_score_ = value;
}
inline void SCLuckyDrawInfo::set_exchange_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exchange_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.exchange_score)
}

// int32 next_remain_sec = 14;
inline void SCLuckyDrawInfo::clear_next_remain_sec() {
  next_remain_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_next_remain_sec() const {
  return next_remain_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::next_remain_sec() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.next_remain_sec)
  return _internal_next_remain_sec();
}
inline void SCLuckyDrawInfo::_internal_set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_remain_sec_ = value;
}
inline void SCLuckyDrawInfo::set_next_remain_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next_remain_sec(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.next_remain_sec)
}

// repeated int32 hour_lucky_nums = 15;
inline int SCLuckyDrawInfo::_internal_hour_lucky_nums_size() const {
  return hour_lucky_nums_.size();
}
inline int SCLuckyDrawInfo::hour_lucky_nums_size() const {
  return _internal_hour_lucky_nums_size();
}
inline void SCLuckyDrawInfo::clear_hour_lucky_nums() {
  hour_lucky_nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::_internal_hour_lucky_nums(int index) const {
  return hour_lucky_nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyDrawInfo::hour_lucky_nums(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyDrawInfo.hour_lucky_nums)
  return _internal_hour_lucky_nums(index);
}
inline void SCLuckyDrawInfo::set_hour_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hour_lucky_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyDrawInfo.hour_lucky_nums)
}
inline void SCLuckyDrawInfo::_internal_add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hour_lucky_nums_.Add(value);
}
inline void SCLuckyDrawInfo::add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hour_lucky_nums(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyDrawInfo.hour_lucky_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::_internal_hour_lucky_nums() const {
  return hour_lucky_nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCLuckyDrawInfo::hour_lucky_nums() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyDrawInfo.hour_lucky_nums)
  return _internal_hour_lucky_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::_internal_mutable_hour_lucky_nums() {
  return &hour_lucky_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCLuckyDrawInfo::mutable_hour_lucky_nums() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyDrawInfo.hour_lucky_nums)
  return _internal_mutable_hour_lucky_nums();
}

// -------------------------------------------------------------------

// CSGetLuckyTaskAward

// int32 task_id = 1;
inline void CSGetLuckyTaskAward::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyTaskAward::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyTaskAward::task_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSGetLuckyTaskAward.task_id)
  return _internal_task_id();
}
inline void CSGetLuckyTaskAward::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
}
inline void CSGetLuckyTaskAward::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSGetLuckyTaskAward.task_id)
}

// -------------------------------------------------------------------

// SCLuckyTaskInfo

// .BYDLD.LuckyTaskInfo task = 1;
inline bool SCLuckyTaskInfo::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool SCLuckyTaskInfo::has_task() const {
  return _internal_has_task();
}
inline void SCLuckyTaskInfo::clear_task() {
  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::BYDLD::LuckyTaskInfo& SCLuckyTaskInfo::_internal_task() const {
  const ::BYDLD::LuckyTaskInfo* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::LuckyTaskInfo&>(
      ::BYDLD::_LuckyTaskInfo_default_instance_);
}
inline const ::BYDLD::LuckyTaskInfo& SCLuckyTaskInfo::task() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyTaskInfo.task)
  return _internal_task();
}
inline void SCLuckyTaskInfo::unsafe_arena_set_allocated_task(
    ::BYDLD::LuckyTaskInfo* task) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCLuckyTaskInfo.task)
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyTaskInfo::release_task() {
  
  ::BYDLD::LuckyTaskInfo* temp = task_;
  task_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyTaskInfo::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:BYDLD.SCLuckyTaskInfo.task)
  
  ::BYDLD::LuckyTaskInfo* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyTaskInfo::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::LuckyTaskInfo>(GetArena());
    task_ = p;
  }
  return task_;
}
inline ::BYDLD::LuckyTaskInfo* SCLuckyTaskInfo::mutable_task() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyTaskInfo.task)
  return _internal_mutable_task();
}
inline void SCLuckyTaskInfo::set_allocated_task(::BYDLD::LuckyTaskInfo* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCLuckyTaskInfo.task)
}

// int32 score = 2;
inline void SCLuckyTaskInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyTaskInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyTaskInfo::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyTaskInfo.score)
  return _internal_score();
}
inline void SCLuckyTaskInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCLuckyTaskInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyTaskInfo.score)
}

// int32 code = 3;
inline void SCLuckyTaskInfo::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyTaskInfo::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyTaskInfo::code() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyTaskInfo.code)
  return _internal_code();
}
inline void SCLuckyTaskInfo::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCLuckyTaskInfo::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyTaskInfo.code)
}

// -------------------------------------------------------------------

// CSGetLuckyNum

// int32 times = 1;
inline void CSGetLuckyNum::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyNum::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetLuckyNum::times() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSGetLuckyNum.times)
  return _internal_times();
}
inline void CSGetLuckyNum::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void CSGetLuckyNum::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSGetLuckyNum.times)
}

// -------------------------------------------------------------------

// SCGetLuckyNum

// int32 score = 1;
inline void SCGetLuckyNum::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCGetLuckyNum.score)
  return _internal_score();
}
inline void SCGetLuckyNum::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCGetLuckyNum::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCGetLuckyNum.score)
}

// int32 error_code = 2;
inline void SCGetLuckyNum::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::error_code() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCGetLuckyNum.error_code)
  return _internal_error_code();
}
inline void SCGetLuckyNum::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void SCGetLuckyNum::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCGetLuckyNum.error_code)
}

// repeated int32 lucky_nums = 3;
inline int SCGetLuckyNum::_internal_lucky_nums_size() const {
  return lucky_nums_.size();
}
inline int SCGetLuckyNum::lucky_nums_size() const {
  return _internal_lucky_nums_size();
}
inline void SCGetLuckyNum::clear_lucky_nums() {
  lucky_nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::_internal_lucky_nums(int index) const {
  return lucky_nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetLuckyNum::lucky_nums(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCGetLuckyNum.lucky_nums)
  return _internal_lucky_nums(index);
}
inline void SCGetLuckyNum::set_lucky_nums(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  lucky_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.SCGetLuckyNum.lucky_nums)
}
inline void SCGetLuckyNum::_internal_add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  lucky_nums_.Add(value);
}
inline void SCGetLuckyNum::add_lucky_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_lucky_nums(value);
  // @@protoc_insertion_point(field_add:BYDLD.SCGetLuckyNum.lucky_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGetLuckyNum::_internal_lucky_nums() const {
  return lucky_nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCGetLuckyNum::lucky_nums() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCGetLuckyNum.lucky_nums)
  return _internal_lucky_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGetLuckyNum::_internal_mutable_lucky_nums() {
  return &lucky_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCGetLuckyNum::mutable_lucky_nums() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCGetLuckyNum.lucky_nums)
  return _internal_mutable_lucky_nums();
}

// -------------------------------------------------------------------

// CSLuckyRedDot

// -------------------------------------------------------------------

// SCLuckyRedDot

// bool show = 1;
inline void SCLuckyRedDot::clear_show() {
  show_ = false;
}
inline bool SCLuckyRedDot::_internal_show() const {
  return show_;
}
inline bool SCLuckyRedDot::show() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyRedDot.show)
  return _internal_show();
}
inline void SCLuckyRedDot::_internal_set_show(bool value) {
  
  show_ = value;
}
inline void SCLuckyRedDot::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyRedDot.show)
}

// -------------------------------------------------------------------

// LuckyRecord

// int32 vip = 1;
inline void LuckyRecord::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::vip() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyRecord.vip)
  return _internal_vip();
}
inline void LuckyRecord::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
}
inline void LuckyRecord::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyRecord.vip)
}

// int32 times = 2;
inline void LuckyRecord::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::times() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyRecord.times)
  return _internal_times();
}
inline void LuckyRecord::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void LuckyRecord::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyRecord.times)
}

// int32 lucky_num = 3;
inline void LuckyRecord::clear_lucky_num() {
  lucky_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_lucky_num() const {
  return lucky_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::lucky_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyRecord.lucky_num)
  return _internal_lucky_num();
}
inline void LuckyRecord::_internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lucky_num_ = value;
}
inline void LuckyRecord::set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lucky_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyRecord.lucky_num)
}

// int32 tick = 4;
inline void LuckyRecord::clear_tick() {
  tick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LuckyRecord::tick() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyRecord.tick)
  return _internal_tick();
}
inline void LuckyRecord::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tick_ = value;
}
inline void LuckyRecord::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyRecord.tick)
}

// string nick_name = 5;
inline void LuckyRecord::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& LuckyRecord::nick_name() const {
  // @@protoc_insertion_point(field_get:BYDLD.LuckyRecord.nick_name)
  return _internal_nick_name();
}
inline void LuckyRecord::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.LuckyRecord.nick_name)
}
inline std::string* LuckyRecord::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.LuckyRecord.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& LuckyRecord::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void LuckyRecord::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LuckyRecord::set_nick_name(std::string&& value) {
  
  nick_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.LuckyRecord.nick_name)
}
inline void LuckyRecord::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.LuckyRecord.nick_name)
}
inline void LuckyRecord::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.LuckyRecord.nick_name)
}
inline std::string* LuckyRecord::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LuckyRecord::release_nick_name() {
  // @@protoc_insertion_point(field_release:BYDLD.LuckyRecord.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LuckyRecord::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.LuckyRecord.nick_name)
}

// -------------------------------------------------------------------

// OwnRecord

// repeated .BYDLD.AwardProp reward = 1;
inline int OwnRecord::_internal_reward_size() const {
  return reward_.size();
}
inline int OwnRecord::reward_size() const {
  return _internal_reward_size();
}
inline void OwnRecord::clear_reward() {
  reward_.Clear();
}
inline ::BYDLD::AwardProp* OwnRecord::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.OwnRecord.reward)
  return reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >*
OwnRecord::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.OwnRecord.reward)
  return &reward_;
}
inline const ::BYDLD::AwardProp& OwnRecord::_internal_reward(int index) const {
  return reward_.Get(index);
}
inline const ::BYDLD::AwardProp& OwnRecord::reward(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.OwnRecord.reward)
  return _internal_reward(index);
}
inline ::BYDLD::AwardProp* OwnRecord::_internal_add_reward() {
  return reward_.Add();
}
inline ::BYDLD::AwardProp* OwnRecord::add_reward() {
  // @@protoc_insertion_point(field_add:BYDLD.OwnRecord.reward)
  return _internal_add_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::AwardProp >&
OwnRecord::reward() const {
  // @@protoc_insertion_point(field_list:BYDLD.OwnRecord.reward)
  return reward_;
}

// int32 status = 2;
inline void OwnRecord::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.OwnRecord.status)
  return _internal_status();
}
inline void OwnRecord::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void OwnRecord::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.OwnRecord.status)
}

// int32 tick = 3;
inline void OwnRecord::clear_tick() {
  tick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::tick() const {
  // @@protoc_insertion_point(field_get:BYDLD.OwnRecord.tick)
  return _internal_tick();
}
inline void OwnRecord::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tick_ = value;
}
inline void OwnRecord::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:BYDLD.OwnRecord.tick)
}

// int32 lucky_num = 4;
inline void OwnRecord::clear_lucky_num() {
  lucky_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::_internal_lucky_num() const {
  return lucky_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OwnRecord::lucky_num() const {
  // @@protoc_insertion_point(field_get:BYDLD.OwnRecord.lucky_num)
  return _internal_lucky_num();
}
inline void OwnRecord::_internal_set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lucky_num_ = value;
}
inline void OwnRecord::set_lucky_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lucky_num(value);
  // @@protoc_insertion_point(field_set:BYDLD.OwnRecord.lucky_num)
}

// -------------------------------------------------------------------

// CSLuckyRecord

// int32 type = 1;
inline void CSLuckyRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLuckyRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLuckyRecord::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSLuckyRecord.type)
  return _internal_type();
}
inline void CSLuckyRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CSLuckyRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSLuckyRecord.type)
}

// -------------------------------------------------------------------

// SCLuckyRecord

// int32 type = 1;
inline void SCLuckyRecord::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyRecord::type() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyRecord.type)
  return _internal_type();
}
inline void SCLuckyRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCLuckyRecord::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyRecord.type)
}

// repeated .BYDLD.LuckyRecord record = 2;
inline int SCLuckyRecord::_internal_record_size() const {
  return record_.size();
}
inline int SCLuckyRecord::record_size() const {
  return _internal_record_size();
}
inline void SCLuckyRecord::clear_record() {
  record_.Clear();
}
inline ::BYDLD::LuckyRecord* SCLuckyRecord::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyRecord.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyRecord >*
SCLuckyRecord::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCLuckyRecord.record)
  return &record_;
}
inline const ::BYDLD::LuckyRecord& SCLuckyRecord::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::BYDLD::LuckyRecord& SCLuckyRecord::record(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyRecord.record)
  return _internal_record(index);
}
inline ::BYDLD::LuckyRecord* SCLuckyRecord::_internal_add_record() {
  return record_.Add();
}
inline ::BYDLD::LuckyRecord* SCLuckyRecord::add_record() {
  // @@protoc_insertion_point(field_add:BYDLD.SCLuckyRecord.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::LuckyRecord >&
SCLuckyRecord::record() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCLuckyRecord.record)
  return record_;
}

// -------------------------------------------------------------------

// SCOwnRecord

// repeated .BYDLD.OwnRecord record = 1;
inline int SCOwnRecord::_internal_record_size() const {
  return record_.size();
}
inline int SCOwnRecord::record_size() const {
  return _internal_record_size();
}
inline void SCOwnRecord::clear_record() {
  record_.Clear();
}
inline ::BYDLD::OwnRecord* SCOwnRecord::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCOwnRecord.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OwnRecord >*
SCOwnRecord::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCOwnRecord.record)
  return &record_;
}
inline const ::BYDLD::OwnRecord& SCOwnRecord::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::BYDLD::OwnRecord& SCOwnRecord::record(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCOwnRecord.record)
  return _internal_record(index);
}
inline ::BYDLD::OwnRecord* SCOwnRecord::_internal_add_record() {
  return record_.Add();
}
inline ::BYDLD::OwnRecord* SCOwnRecord::add_record() {
  // @@protoc_insertion_point(field_add:BYDLD.SCOwnRecord.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OwnRecord >&
SCOwnRecord::record() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCOwnRecord.record)
  return record_;
}

// -------------------------------------------------------------------

// CSDragonWheelStart

// int32 stage = 1;
inline void CSDragonWheelStart::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDragonWheelStart::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDragonWheelStart::stage() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSDragonWheelStart.stage)
  return _internal_stage();
}
inline void CSDragonWheelStart::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void CSDragonWheelStart::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSDragonWheelStart.stage)
}

// -------------------------------------------------------------------

// SCDragonWheelStop

// int32 stage = 1;
inline void SCDragonWheelStop::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::stage() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.stage)
  return _internal_stage();
}
inline void SCDragonWheelStop::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SCDragonWheelStop::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.stage)
}

// int32 ratio = 2;
inline void SCDragonWheelStop::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.ratio)
  return _internal_ratio();
}
inline void SCDragonWheelStop::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCDragonWheelStop::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.ratio)
}

// int32 score = 3;
inline void SCDragonWheelStop::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::score() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.score)
  return _internal_score();
}
inline void SCDragonWheelStop::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SCDragonWheelStop::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.score)
}

// int32 atomic_ratio = 4;
inline void SCDragonWheelStop::clear_atomic_ratio() {
  atomic_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_atomic_ratio() const {
  return atomic_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::atomic_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.atomic_ratio)
  return _internal_atomic_ratio();
}
inline void SCDragonWheelStop::_internal_set_atomic_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atomic_ratio_ = value;
}
inline void SCDragonWheelStop::set_atomic_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_atomic_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.atomic_ratio)
}

// int32 fortune_ratio = 5;
inline void SCDragonWheelStop::clear_fortune_ratio() {
  fortune_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_fortune_ratio() const {
  return fortune_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::fortune_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.fortune_ratio)
  return _internal_fortune_ratio();
}
inline void SCDragonWheelStop::_internal_set_fortune_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fortune_ratio_ = value;
}
inline void SCDragonWheelStop::set_fortune_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fortune_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.fortune_ratio)
}

// int32 poseidon_ratio = 6;
inline void SCDragonWheelStop::clear_poseidon_ratio() {
  poseidon_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_poseidon_ratio() const {
  return poseidon_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::poseidon_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.poseidon_ratio)
  return _internal_poseidon_ratio();
}
inline void SCDragonWheelStop::_internal_set_poseidon_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poseidon_ratio_ = value;
}
inline void SCDragonWheelStop::set_poseidon_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poseidon_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.poseidon_ratio)
}

// int32 error = 7;
inline void SCDragonWheelStop::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::error() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.error)
  return _internal_error();
}
inline void SCDragonWheelStop::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void SCDragonWheelStop::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.error)
}

// int32 chair_id = 8;
inline void SCDragonWheelStop::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::chair_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.chair_id)
  return _internal_chair_id();
}
inline void SCDragonWheelStop::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCDragonWheelStop::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.chair_id)
}

// int32 fish_value = 9;
inline void SCDragonWheelStop::clear_fish_value() {
  fish_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_fish_value() const {
  return fish_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::fish_value() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.fish_value)
  return _internal_fish_value();
}
inline void SCDragonWheelStop::_internal_set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_value_ = value;
}
inline void SCDragonWheelStop::set_fish_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_value(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.fish_value)
}

// bool is_prop = 10;
inline void SCDragonWheelStop::clear_is_prop() {
  is_prop_ = false;
}
inline bool SCDragonWheelStop::_internal_is_prop() const {
  return is_prop_;
}
inline bool SCDragonWheelStop::is_prop() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.is_prop)
  return _internal_is_prop();
}
inline void SCDragonWheelStop::_internal_set_is_prop(bool value) {
  
  is_prop_ = value;
}
inline void SCDragonWheelStop::set_is_prop(bool value) {
  _internal_set_is_prop(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.is_prop)
}

// int32 bullet_ratio = 11;
inline void SCDragonWheelStop::clear_bullet_ratio() {
  bullet_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::_internal_bullet_ratio() const {
  return bullet_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonWheelStop::bullet_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonWheelStop.bullet_ratio)
  return _internal_bullet_ratio();
}
inline void SCDragonWheelStop::_internal_set_bullet_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_ratio_ = value;
}
inline void SCDragonWheelStop::set_bullet_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonWheelStop.bullet_ratio)
}

// -------------------------------------------------------------------

// SCSyncHallProp

// repeated .BYDLD.Object3 hall_prop = 1;
inline int SCSyncHallProp::_internal_hall_prop_size() const {
  return hall_prop_.size();
}
inline int SCSyncHallProp::hall_prop_size() const {
  return _internal_hall_prop_size();
}
inline void SCSyncHallProp::clear_hall_prop() {
  hall_prop_.Clear();
}
inline ::BYDLD::Object3* SCSyncHallProp::mutable_hall_prop(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCSyncHallProp.hall_prop)
  return hall_prop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >*
SCSyncHallProp::mutable_hall_prop() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCSyncHallProp.hall_prop)
  return &hall_prop_;
}
inline const ::BYDLD::Object3& SCSyncHallProp::_internal_hall_prop(int index) const {
  return hall_prop_.Get(index);
}
inline const ::BYDLD::Object3& SCSyncHallProp::hall_prop(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncHallProp.hall_prop)
  return _internal_hall_prop(index);
}
inline ::BYDLD::Object3* SCSyncHallProp::_internal_add_hall_prop() {
  return hall_prop_.Add();
}
inline ::BYDLD::Object3* SCSyncHallProp::add_hall_prop() {
  // @@protoc_insertion_point(field_add:BYDLD.SCSyncHallProp.hall_prop)
  return _internal_add_hall_prop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::Object3 >&
SCSyncHallProp::hall_prop() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCSyncHallProp.hall_prop)
  return hall_prop_;
}

// -------------------------------------------------------------------

// CSCheckDragonWheelProp

// int32 prop_id = 1;
inline void CSCheckDragonWheelProp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSCheckDragonWheelProp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSCheckDragonWheelProp::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSCheckDragonWheelProp.prop_id)
  return _internal_prop_id();
}
inline void CSCheckDragonWheelProp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void CSCheckDragonWheelProp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSCheckDragonWheelProp.prop_id)
}

// -------------------------------------------------------------------

// SCCheckDragonWheelProp

// bool can_use = 1;
inline void SCCheckDragonWheelProp::clear_can_use() {
  can_use_ = false;
}
inline bool SCCheckDragonWheelProp::_internal_can_use() const {
  return can_use_;
}
inline bool SCCheckDragonWheelProp::can_use() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCCheckDragonWheelProp.can_use)
  return _internal_can_use();
}
inline void SCCheckDragonWheelProp::_internal_set_can_use(bool value) {
  
  can_use_ = value;
}
inline void SCCheckDragonWheelProp::set_can_use(bool value) {
  _internal_set_can_use(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCCheckDragonWheelProp.can_use)
}

// int32 prop_id = 2;
inline void SCCheckDragonWheelProp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCheckDragonWheelProp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCheckDragonWheelProp::prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCCheckDragonWheelProp.prop_id)
  return _internal_prop_id();
}
inline void SCCheckDragonWheelProp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void SCCheckDragonWheelProp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCCheckDragonWheelProp.prop_id)
}

// int32 chair_id = 3;
inline void SCCheckDragonWheelProp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCheckDragonWheelProp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCheckDragonWheelProp::chair_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCCheckDragonWheelProp.chair_id)
  return _internal_chair_id();
}
inline void SCCheckDragonWheelProp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCCheckDragonWheelProp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCCheckDragonWheelProp.chair_id)
}

// int32 ratio = 4;
inline void SCCheckDragonWheelProp::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCheckDragonWheelProp::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCCheckDragonWheelProp::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCCheckDragonWheelProp.ratio)
  return _internal_ratio();
}
inline void SCCheckDragonWheelProp::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCCheckDragonWheelProp::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCCheckDragonWheelProp.ratio)
}

// -------------------------------------------------------------------

// CSUserPoolDoubleInfo

// -------------------------------------------------------------------

// SCUserPoolDoubleInfo

// int32 cost = 1;
inline void SCUserPoolDoubleInfo::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDoubleInfo::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDoubleInfo::cost() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDoubleInfo.cost)
  return _internal_cost();
}
inline void SCUserPoolDoubleInfo::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void SCUserPoolDoubleInfo::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolDoubleInfo.cost)
}

// .BYDLD.Object2 item_before = 2;
inline bool SCUserPoolDoubleInfo::_internal_has_item_before() const {
  return this != internal_default_instance() && item_before_ != nullptr;
}
inline bool SCUserPoolDoubleInfo::has_item_before() const {
  return _internal_has_item_before();
}
inline void SCUserPoolDoubleInfo::clear_item_before() {
  if (GetArena() == nullptr && item_before_ != nullptr) {
    delete item_before_;
  }
  item_before_ = nullptr;
}
inline const ::BYDLD::Object2& SCUserPoolDoubleInfo::_internal_item_before() const {
  const ::BYDLD::Object2* p = item_before_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object2&>(
      ::BYDLD::_Object2_default_instance_);
}
inline const ::BYDLD::Object2& SCUserPoolDoubleInfo::item_before() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDoubleInfo.item_before)
  return _internal_item_before();
}
inline void SCUserPoolDoubleInfo::unsafe_arena_set_allocated_item_before(
    ::BYDLD::Object2* item_before) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_before_);
  }
  item_before_ = item_before;
  if (item_before) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCUserPoolDoubleInfo.item_before)
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::release_item_before() {
  
  ::BYDLD::Object2* temp = item_before_;
  item_before_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::unsafe_arena_release_item_before() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolDoubleInfo.item_before)
  
  ::BYDLD::Object2* temp = item_before_;
  item_before_ = nullptr;
  return temp;
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::_internal_mutable_item_before() {
  
  if (item_before_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object2>(GetArena());
    item_before_ = p;
  }
  return item_before_;
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::mutable_item_before() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDoubleInfo.item_before)
  return _internal_mutable_item_before();
}
inline void SCUserPoolDoubleInfo::set_allocated_item_before(::BYDLD::Object2* item_before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_before_;
  }
  if (item_before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_before);
    if (message_arena != submessage_arena) {
      item_before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_before, submessage_arena);
    }
    
  } else {
    
  }
  item_before_ = item_before;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolDoubleInfo.item_before)
}

// .BYDLD.Object2 item_double = 3;
inline bool SCUserPoolDoubleInfo::_internal_has_item_double() const {
  return this != internal_default_instance() && item_double_ != nullptr;
}
inline bool SCUserPoolDoubleInfo::has_item_double() const {
  return _internal_has_item_double();
}
inline void SCUserPoolDoubleInfo::clear_item_double() {
  if (GetArena() == nullptr && item_double_ != nullptr) {
    delete item_double_;
  }
  item_double_ = nullptr;
}
inline const ::BYDLD::Object2& SCUserPoolDoubleInfo::_internal_item_double() const {
  const ::BYDLD::Object2* p = item_double_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object2&>(
      ::BYDLD::_Object2_default_instance_);
}
inline const ::BYDLD::Object2& SCUserPoolDoubleInfo::item_double() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDoubleInfo.item_double)
  return _internal_item_double();
}
inline void SCUserPoolDoubleInfo::unsafe_arena_set_allocated_item_double(
    ::BYDLD::Object2* item_double) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_double_);
  }
  item_double_ = item_double;
  if (item_double) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCUserPoolDoubleInfo.item_double)
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::release_item_double() {
  
  ::BYDLD::Object2* temp = item_double_;
  item_double_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::unsafe_arena_release_item_double() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolDoubleInfo.item_double)
  
  ::BYDLD::Object2* temp = item_double_;
  item_double_ = nullptr;
  return temp;
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::_internal_mutable_item_double() {
  
  if (item_double_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object2>(GetArena());
    item_double_ = p;
  }
  return item_double_;
}
inline ::BYDLD::Object2* SCUserPoolDoubleInfo::mutable_item_double() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDoubleInfo.item_double)
  return _internal_mutable_item_double();
}
inline void SCUserPoolDoubleInfo::set_allocated_item_double(::BYDLD::Object2* item_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_double_;
  }
  if (item_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_double);
    if (message_arena != submessage_arena) {
      item_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_double, submessage_arena);
    }
    
  } else {
    
  }
  item_double_ = item_double;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolDoubleInfo.item_double)
}

// -------------------------------------------------------------------

// CSUserPoolDouble

// bool is_double = 1;
inline void CSUserPoolDouble::clear_is_double() {
  is_double_ = false;
}
inline bool CSUserPoolDouble::_internal_is_double() const {
  return is_double_;
}
inline bool CSUserPoolDouble::is_double() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSUserPoolDouble.is_double)
  return _internal_is_double();
}
inline void CSUserPoolDouble::_internal_set_is_double(bool value) {
  
  is_double_ = value;
}
inline void CSUserPoolDouble::set_is_double(bool value) {
  _internal_set_is_double(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSUserPoolDouble.is_double)
}

// -------------------------------------------------------------------

// SCUserPoolDouble

// int32 code = 1;
inline void SCUserPoolDouble::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::code() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDouble.code)
  return _internal_code();
}
inline void SCUserPoolDouble::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCUserPoolDouble::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolDouble.code)
}

// int32 result = 2;
inline void SCUserPoolDouble::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::result() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDouble.result)
  return _internal_result();
}
inline void SCUserPoolDouble::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCUserPoolDouble::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolDouble.result)
}

// int32 chair_idx = 3;
inline void SCUserPoolDouble::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUserPoolDouble::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDouble.chair_idx)
  return _internal_chair_idx();
}
inline void SCUserPoolDouble::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCUserPoolDouble::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUserPoolDouble.chair_idx)
}

// .BYDLD.Object3 item = 4;
inline bool SCUserPoolDouble::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool SCUserPoolDouble::has_item() const {
  return _internal_has_item();
}
inline void SCUserPoolDouble::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::BYDLD::Object3& SCUserPoolDouble::_internal_item() const {
  const ::BYDLD::Object3* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object3&>(
      ::BYDLD::_Object3_default_instance_);
}
inline const ::BYDLD::Object3& SCUserPoolDouble::item() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDouble.item)
  return _internal_item();
}
inline void SCUserPoolDouble::unsafe_arena_set_allocated_item(
    ::BYDLD::Object3* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCUserPoolDouble.item)
}
inline ::BYDLD::Object3* SCUserPoolDouble::release_item() {
  
  ::BYDLD::Object3* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object3* SCUserPoolDouble::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolDouble.item)
  
  ::BYDLD::Object3* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::BYDLD::Object3* SCUserPoolDouble::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object3>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::BYDLD::Object3* SCUserPoolDouble::mutable_item() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDouble.item)
  return _internal_mutable_item();
}
inline void SCUserPoolDouble::set_allocated_item(::BYDLD::Object3* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolDouble.item)
}

// .BYDLD.Object3 extra_item = 5;
inline bool SCUserPoolDouble::_internal_has_extra_item() const {
  return this != internal_default_instance() && extra_item_ != nullptr;
}
inline bool SCUserPoolDouble::has_extra_item() const {
  return _internal_has_extra_item();
}
inline void SCUserPoolDouble::clear_extra_item() {
  if (GetArena() == nullptr && extra_item_ != nullptr) {
    delete extra_item_;
  }
  extra_item_ = nullptr;
}
inline const ::BYDLD::Object3& SCUserPoolDouble::_internal_extra_item() const {
  const ::BYDLD::Object3* p = extra_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object3&>(
      ::BYDLD::_Object3_default_instance_);
}
inline const ::BYDLD::Object3& SCUserPoolDouble::extra_item() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUserPoolDouble.extra_item)
  return _internal_extra_item();
}
inline void SCUserPoolDouble::unsafe_arena_set_allocated_extra_item(
    ::BYDLD::Object3* extra_item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_item_);
  }
  extra_item_ = extra_item;
  if (extra_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCUserPoolDouble.extra_item)
}
inline ::BYDLD::Object3* SCUserPoolDouble::release_extra_item() {
  
  ::BYDLD::Object3* temp = extra_item_;
  extra_item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object3* SCUserPoolDouble::unsafe_arena_release_extra_item() {
  // @@protoc_insertion_point(field_release:BYDLD.SCUserPoolDouble.extra_item)
  
  ::BYDLD::Object3* temp = extra_item_;
  extra_item_ = nullptr;
  return temp;
}
inline ::BYDLD::Object3* SCUserPoolDouble::_internal_mutable_extra_item() {
  
  if (extra_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object3>(GetArena());
    extra_item_ = p;
  }
  return extra_item_;
}
inline ::BYDLD::Object3* SCUserPoolDouble::mutable_extra_item() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCUserPoolDouble.extra_item)
  return _internal_mutable_extra_item();
}
inline void SCUserPoolDouble::set_allocated_extra_item(::BYDLD::Object3* extra_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extra_item_;
  }
  if (extra_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extra_item);
    if (message_arena != submessage_arena) {
      extra_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_item, submessage_arena);
    }
    
  } else {
    
  }
  extra_item_ = extra_item;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCUserPoolDouble.extra_item)
}

// -------------------------------------------------------------------

// CSLuckyPoolInfo

// -------------------------------------------------------------------

// SCLuckyPoolInfo

// int32 count = 1;
inline void SCLuckyPoolInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyPoolInfo.count)
  return _internal_count();
}
inline void SCLuckyPoolInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCLuckyPoolInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyPoolInfo.count)
}

// int32 max = 2;
inline void SCLuckyPoolInfo::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLuckyPoolInfo::max() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyPoolInfo.max)
  return _internal_max();
}
inline void SCLuckyPoolInfo::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void SCLuckyPoolInfo::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCLuckyPoolInfo.max)
}

// -------------------------------------------------------------------

// CSLuckyPoolDraw

// -------------------------------------------------------------------

// SCLuckyPoolDraw

// .BYDLD.Object3 item = 1;
inline bool SCLuckyPoolDraw::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool SCLuckyPoolDraw::has_item() const {
  return _internal_has_item();
}
inline void SCLuckyPoolDraw::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::BYDLD::Object3& SCLuckyPoolDraw::_internal_item() const {
  const ::BYDLD::Object3* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Object3&>(
      ::BYDLD::_Object3_default_instance_);
}
inline const ::BYDLD::Object3& SCLuckyPoolDraw::item() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCLuckyPoolDraw.item)
  return _internal_item();
}
inline void SCLuckyPoolDraw::unsafe_arena_set_allocated_item(
    ::BYDLD::Object3* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCLuckyPoolDraw.item)
}
inline ::BYDLD::Object3* SCLuckyPoolDraw::release_item() {
  
  ::BYDLD::Object3* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Object3* SCLuckyPoolDraw::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:BYDLD.SCLuckyPoolDraw.item)
  
  ::BYDLD::Object3* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::BYDLD::Object3* SCLuckyPoolDraw::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Object3>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::BYDLD::Object3* SCLuckyPoolDraw::mutable_item() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCLuckyPoolDraw.item)
  return _internal_mutable_item();
}
inline void SCLuckyPoolDraw::set_allocated_item(::BYDLD::Object3* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCLuckyPoolDraw.item)
}

// -------------------------------------------------------------------

// TridentRankList

// int32 user_dbid = 1;
inline void TridentRankList::clear_user_dbid() {
  user_dbid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TridentRankList::_internal_user_dbid() const {
  return user_dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TridentRankList::user_dbid() const {
  // @@protoc_insertion_point(field_get:BYDLD.TridentRankList.user_dbid)
  return _internal_user_dbid();
}
inline void TridentRankList::_internal_set_user_dbid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_dbid_ = value;
}
inline void TridentRankList::set_user_dbid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_dbid(value);
  // @@protoc_insertion_point(field_set:BYDLD.TridentRankList.user_dbid)
}

// string nick_name = 2;
inline void TridentRankList::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& TridentRankList::nick_name() const {
  // @@protoc_insertion_point(field_get:BYDLD.TridentRankList.nick_name)
  return _internal_nick_name();
}
inline void TridentRankList::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.TridentRankList.nick_name)
}
inline std::string* TridentRankList::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:BYDLD.TridentRankList.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& TridentRankList::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void TridentRankList::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TridentRankList::set_nick_name(std::string&& value) {
  
  nick_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.TridentRankList.nick_name)
}
inline void TridentRankList::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.TridentRankList.nick_name)
}
inline void TridentRankList::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.TridentRankList.nick_name)
}
inline std::string* TridentRankList::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TridentRankList::release_nick_name() {
  // @@protoc_insertion_point(field_release:BYDLD.TridentRankList.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TridentRankList::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.TridentRankList.nick_name)
}

// int32 continue_times = 3;
inline void TridentRankList::clear_continue_times() {
  continue_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TridentRankList::_internal_continue_times() const {
  return continue_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TridentRankList::continue_times() const {
  // @@protoc_insertion_point(field_get:BYDLD.TridentRankList.continue_times)
  return _internal_continue_times();
}
inline void TridentRankList::_internal_set_continue_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  continue_times_ = value;
}
inline void TridentRankList::set_continue_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_continue_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.TridentRankList.continue_times)
}

// string date_time = 4;
inline void TridentRankList::clear_date_time() {
  date_time_.ClearToEmpty();
}
inline const std::string& TridentRankList::date_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.TridentRankList.date_time)
  return _internal_date_time();
}
inline void TridentRankList::set_date_time(const std::string& value) {
  _internal_set_date_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.TridentRankList.date_time)
}
inline std::string* TridentRankList::mutable_date_time() {
  // @@protoc_insertion_point(field_mutable:BYDLD.TridentRankList.date_time)
  return _internal_mutable_date_time();
}
inline const std::string& TridentRankList::_internal_date_time() const {
  return date_time_.Get();
}
inline void TridentRankList::_internal_set_date_time(const std::string& value) {
  
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TridentRankList::set_date_time(std::string&& value) {
  
  date_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.TridentRankList.date_time)
}
inline void TridentRankList::set_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.TridentRankList.date_time)
}
inline void TridentRankList::set_date_time(const char* value,
    size_t size) {
  
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.TridentRankList.date_time)
}
inline std::string* TridentRankList::_internal_mutable_date_time() {
  
  return date_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TridentRankList::release_date_time() {
  // @@protoc_insertion_point(field_release:BYDLD.TridentRankList.date_time)
  return date_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TridentRankList::set_allocated_date_time(std::string* date_time) {
  if (date_time != nullptr) {
    
  } else {
    
  }
  date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.TridentRankList.date_time)
}

// int32 rank = 5;
inline void TridentRankList::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TridentRankList::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TridentRankList::rank() const {
  // @@protoc_insertion_point(field_get:BYDLD.TridentRankList.rank)
  return _internal_rank();
}
inline void TridentRankList::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void TridentRankList::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:BYDLD.TridentRankList.rank)
}

// -------------------------------------------------------------------

// SCTridentRankResult

// repeated .BYDLD.TridentRankList cur_ranks = 1;
inline int SCTridentRankResult::_internal_cur_ranks_size() const {
  return cur_ranks_.size();
}
inline int SCTridentRankResult::cur_ranks_size() const {
  return _internal_cur_ranks_size();
}
inline void SCTridentRankResult::clear_cur_ranks() {
  cur_ranks_.Clear();
}
inline ::BYDLD::TridentRankList* SCTridentRankResult::mutable_cur_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCTridentRankResult.cur_ranks)
  return cur_ranks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >*
SCTridentRankResult::mutable_cur_ranks() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCTridentRankResult.cur_ranks)
  return &cur_ranks_;
}
inline const ::BYDLD::TridentRankList& SCTridentRankResult::_internal_cur_ranks(int index) const {
  return cur_ranks_.Get(index);
}
inline const ::BYDLD::TridentRankList& SCTridentRankResult::cur_ranks(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentRankResult.cur_ranks)
  return _internal_cur_ranks(index);
}
inline ::BYDLD::TridentRankList* SCTridentRankResult::_internal_add_cur_ranks() {
  return cur_ranks_.Add();
}
inline ::BYDLD::TridentRankList* SCTridentRankResult::add_cur_ranks() {
  // @@protoc_insertion_point(field_add:BYDLD.SCTridentRankResult.cur_ranks)
  return _internal_add_cur_ranks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >&
SCTridentRankResult::cur_ranks() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCTridentRankResult.cur_ranks)
  return cur_ranks_;
}

// repeated .BYDLD.TridentRankList his_ranks = 2;
inline int SCTridentRankResult::_internal_his_ranks_size() const {
  return his_ranks_.size();
}
inline int SCTridentRankResult::his_ranks_size() const {
  return _internal_his_ranks_size();
}
inline void SCTridentRankResult::clear_his_ranks() {
  his_ranks_.Clear();
}
inline ::BYDLD::TridentRankList* SCTridentRankResult::mutable_his_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCTridentRankResult.his_ranks)
  return his_ranks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >*
SCTridentRankResult::mutable_his_ranks() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCTridentRankResult.his_ranks)
  return &his_ranks_;
}
inline const ::BYDLD::TridentRankList& SCTridentRankResult::_internal_his_ranks(int index) const {
  return his_ranks_.Get(index);
}
inline const ::BYDLD::TridentRankList& SCTridentRankResult::his_ranks(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTridentRankResult.his_ranks)
  return _internal_his_ranks(index);
}
inline ::BYDLD::TridentRankList* SCTridentRankResult::_internal_add_his_ranks() {
  return his_ranks_.Add();
}
inline ::BYDLD::TridentRankList* SCTridentRankResult::add_his_ranks() {
  // @@protoc_insertion_point(field_add:BYDLD.SCTridentRankResult.his_ranks)
  return _internal_add_his_ranks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::TridentRankList >&
SCTridentRankResult::his_ranks() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCTridentRankResult.his_ranks)
  return his_ranks_;
}

// -------------------------------------------------------------------

// CSBigSmallWinInfo

// int32 chair_idx = 1;
inline void CSBigSmallWinInfo::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallWinInfo::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallWinInfo::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBigSmallWinInfo.chair_idx)
  return _internal_chair_idx();
}
inline void CSBigSmallWinInfo::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void CSBigSmallWinInfo::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBigSmallWinInfo.chair_idx)
}

// -------------------------------------------------------------------

// SCBigSmallWinInfo

// int32 cur_win_times = 1;
inline void SCBigSmallWinInfo::clear_cur_win_times() {
  cur_win_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallWinInfo::_internal_cur_win_times() const {
  return cur_win_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallWinInfo::cur_win_times() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallWinInfo.cur_win_times)
  return _internal_cur_win_times();
}
inline void SCBigSmallWinInfo::_internal_set_cur_win_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_win_times_ = value;
}
inline void SCBigSmallWinInfo::set_cur_win_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_win_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallWinInfo.cur_win_times)
}

// int32 today_win_times = 2;
inline void SCBigSmallWinInfo::clear_today_win_times() {
  today_win_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallWinInfo::_internal_today_win_times() const {
  return today_win_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBigSmallWinInfo::today_win_times() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallWinInfo.today_win_times)
  return _internal_today_win_times();
}
inline void SCBigSmallWinInfo::_internal_set_today_win_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  today_win_times_ = value;
}
inline void SCBigSmallWinInfo::set_today_win_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_today_win_times(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallWinInfo.today_win_times)
}

// string date_time = 3;
inline void SCBigSmallWinInfo::clear_date_time() {
  date_time_.ClearToEmpty();
}
inline const std::string& SCBigSmallWinInfo::date_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallWinInfo.date_time)
  return _internal_date_time();
}
inline void SCBigSmallWinInfo::set_date_time(const std::string& value) {
  _internal_set_date_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBigSmallWinInfo.date_time)
}
inline std::string* SCBigSmallWinInfo::mutable_date_time() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCBigSmallWinInfo.date_time)
  return _internal_mutable_date_time();
}
inline const std::string& SCBigSmallWinInfo::_internal_date_time() const {
  return date_time_.Get();
}
inline void SCBigSmallWinInfo::_internal_set_date_time(const std::string& value) {
  
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCBigSmallWinInfo::set_date_time(std::string&& value) {
  
  date_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCBigSmallWinInfo.date_time)
}
inline void SCBigSmallWinInfo::set_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCBigSmallWinInfo.date_time)
}
inline void SCBigSmallWinInfo::set_date_time(const char* value,
    size_t size) {
  
  date_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCBigSmallWinInfo.date_time)
}
inline std::string* SCBigSmallWinInfo::_internal_mutable_date_time() {
  
  return date_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCBigSmallWinInfo::release_date_time() {
  // @@protoc_insertion_point(field_release:BYDLD.SCBigSmallWinInfo.date_time)
  return date_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCBigSmallWinInfo::set_allocated_date_time(std::string* date_time) {
  if (date_time != nullptr) {
    
  } else {
    
  }
  date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCBigSmallWinInfo.date_time)
}

// -------------------------------------------------------------------

// CSBigSmallRecord

// int32 max_get = 1;
inline void CSBigSmallRecord::clear_max_get() {
  max_get_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallRecord::_internal_max_get() const {
  return max_get_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBigSmallRecord::max_get() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBigSmallRecord.max_get)
  return _internal_max_get();
}
inline void CSBigSmallRecord::_internal_set_max_get(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_get_ = value;
}
inline void CSBigSmallRecord::set_max_get(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_get(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBigSmallRecord.max_get)
}

// -------------------------------------------------------------------

// BigSmallRecord

// repeated int32 dices = 1;
inline int BigSmallRecord::_internal_dices_size() const {
  return dices_.size();
}
inline int BigSmallRecord::dices_size() const {
  return _internal_dices_size();
}
inline void BigSmallRecord::clear_dices() {
  dices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BigSmallRecord::_internal_dices(int index) const {
  return dices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BigSmallRecord::dices(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.BigSmallRecord.dices)
  return _internal_dices(index);
}
inline void BigSmallRecord::set_dices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dices_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.BigSmallRecord.dices)
}
inline void BigSmallRecord::_internal_add_dices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dices_.Add(value);
}
inline void BigSmallRecord::add_dices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dices(value);
  // @@protoc_insertion_point(field_add:BYDLD.BigSmallRecord.dices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BigSmallRecord::_internal_dices() const {
  return dices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BigSmallRecord::dices() const {
  // @@protoc_insertion_point(field_list:BYDLD.BigSmallRecord.dices)
  return _internal_dices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BigSmallRecord::_internal_mutable_dices() {
  return &dices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BigSmallRecord::mutable_dices() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.BigSmallRecord.dices)
  return _internal_mutable_dices();
}

// -------------------------------------------------------------------

// SCBigSmallRecord

// repeated .BYDLD.BigSmallRecord records = 1;
inline int SCBigSmallRecord::_internal_records_size() const {
  return records_.size();
}
inline int SCBigSmallRecord::records_size() const {
  return _internal_records_size();
}
inline void SCBigSmallRecord::clear_records() {
  records_.Clear();
}
inline ::BYDLD::BigSmallRecord* SCBigSmallRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCBigSmallRecord.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::BigSmallRecord >*
SCBigSmallRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCBigSmallRecord.records)
  return &records_;
}
inline const ::BYDLD::BigSmallRecord& SCBigSmallRecord::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::BYDLD::BigSmallRecord& SCBigSmallRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBigSmallRecord.records)
  return _internal_records(index);
}
inline ::BYDLD::BigSmallRecord* SCBigSmallRecord::_internal_add_records() {
  return records_.Add();
}
inline ::BYDLD::BigSmallRecord* SCBigSmallRecord::add_records() {
  // @@protoc_insertion_point(field_add:BYDLD.SCBigSmallRecord.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::BigSmallRecord >&
SCBigSmallRecord::records() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCBigSmallRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// ItemEnableInfo

// int32 name = 1;
inline void ItemEnableInfo::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemEnableInfo::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemEnableInfo::name() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemEnableInfo.name)
  return _internal_name();
}
inline void ItemEnableInfo::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void ItemEnableInfo::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemEnableInfo.name)
}

// bool enable = 2;
inline void ItemEnableInfo::clear_enable() {
  enable_ = false;
}
inline bool ItemEnableInfo::_internal_enable() const {
  return enable_;
}
inline bool ItemEnableInfo::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemEnableInfo.enable)
  return _internal_enable();
}
inline void ItemEnableInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void ItemEnableInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.ItemEnableInfo.enable)
}

// -------------------------------------------------------------------

// ItemEnableNotice

// repeated .BYDLD.ItemEnableInfo items = 1;
inline int ItemEnableNotice::_internal_items_size() const {
  return items_.size();
}
inline int ItemEnableNotice::items_size() const {
  return _internal_items_size();
}
inline void ItemEnableNotice::clear_items() {
  items_.Clear();
}
inline ::BYDLD::ItemEnableInfo* ItemEnableNotice::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.ItemEnableNotice.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemEnableInfo >*
ItemEnableNotice::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.ItemEnableNotice.items)
  return &items_;
}
inline const ::BYDLD::ItemEnableInfo& ItemEnableNotice::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::BYDLD::ItemEnableInfo& ItemEnableNotice::items(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.ItemEnableNotice.items)
  return _internal_items(index);
}
inline ::BYDLD::ItemEnableInfo* ItemEnableNotice::_internal_add_items() {
  return items_.Add();
}
inline ::BYDLD::ItemEnableInfo* ItemEnableNotice::add_items() {
  // @@protoc_insertion_point(field_add:BYDLD.ItemEnableNotice.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ItemEnableInfo >&
ItemEnableNotice::items() const {
  // @@protoc_insertion_point(field_list:BYDLD.ItemEnableNotice.items)
  return items_;
}

// -------------------------------------------------------------------

// RewardTask

// int32 taskId = 1;
inline void RewardTask::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardTask::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardTask::taskid() const {
  // @@protoc_insertion_point(field_get:BYDLD.RewardTask.taskId)
  return _internal_taskid();
}
inline void RewardTask::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void RewardTask::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:BYDLD.RewardTask.taskId)
}

// int32 status = 2;
inline void RewardTask::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardTask::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardTask::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.RewardTask.status)
  return _internal_status();
}
inline void RewardTask::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void RewardTask::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.RewardTask.status)
}

// -------------------------------------------------------------------

// RewardConf

// int32 taskID = 1;
inline void RewardConf::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardConf::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardConf::taskid() const {
  // @@protoc_insertion_point(field_get:BYDLD.RewardConf.taskID)
  return _internal_taskid();
}
inline void RewardConf::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void RewardConf::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:BYDLD.RewardConf.taskID)
}

// int32 nAward = 2;
inline void RewardConf::clear_naward() {
  naward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardConf::_internal_naward() const {
  return naward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardConf::naward() const {
  // @@protoc_insertion_point(field_get:BYDLD.RewardConf.nAward)
  return _internal_naward();
}
inline void RewardConf::_internal_set_naward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  naward_ = value;
}
inline void RewardConf::set_naward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_naward(value);
  // @@protoc_insertion_point(field_set:BYDLD.RewardConf.nAward)
}

// -------------------------------------------------------------------

// CSReqRewardAddTask

// int32 ID = 1;
inline void CSReqRewardAddTask::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReqRewardAddTask::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReqRewardAddTask::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSReqRewardAddTask.ID)
  return _internal_id();
}
inline void CSReqRewardAddTask::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSReqRewardAddTask::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSReqRewardAddTask.ID)
}

// int32 taskID = 2;
inline void CSReqRewardAddTask::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReqRewardAddTask::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReqRewardAddTask::taskid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSReqRewardAddTask.taskID)
  return _internal_taskid();
}
inline void CSReqRewardAddTask::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void CSReqRewardAddTask::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSReqRewardAddTask.taskID)
}

// -------------------------------------------------------------------

// SCRepRewardTaskList

// int32 ID = 1;
inline void SCRepRewardTaskList::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskList::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskList.ID)
  return _internal_id();
}
inline void SCRepRewardTaskList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCRepRewardTaskList::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRepRewardTaskList.ID)
}

// repeated .BYDLD.RewardTask tList = 2;
inline int SCRepRewardTaskList::_internal_tlist_size() const {
  return tlist_.size();
}
inline int SCRepRewardTaskList::tlist_size() const {
  return _internal_tlist_size();
}
inline void SCRepRewardTaskList::clear_tlist() {
  tlist_.Clear();
}
inline ::BYDLD::RewardTask* SCRepRewardTaskList::mutable_tlist(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCRepRewardTaskList.tList)
  return tlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >*
SCRepRewardTaskList::mutable_tlist() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCRepRewardTaskList.tList)
  return &tlist_;
}
inline const ::BYDLD::RewardTask& SCRepRewardTaskList::_internal_tlist(int index) const {
  return tlist_.Get(index);
}
inline const ::BYDLD::RewardTask& SCRepRewardTaskList::tlist(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskList.tList)
  return _internal_tlist(index);
}
inline ::BYDLD::RewardTask* SCRepRewardTaskList::_internal_add_tlist() {
  return tlist_.Add();
}
inline ::BYDLD::RewardTask* SCRepRewardTaskList::add_tlist() {
  // @@protoc_insertion_point(field_add:BYDLD.SCRepRewardTaskList.tList)
  return _internal_add_tlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >&
SCRepRewardTaskList::tlist() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCRepRewardTaskList.tList)
  return tlist_;
}

// -------------------------------------------------------------------

// SCRewardTaskFinish

// int32 result = 1;
inline void SCRewardTaskFinish::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRewardTaskFinish::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRewardTaskFinish::result() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRewardTaskFinish.result)
  return _internal_result();
}
inline void SCRewardTaskFinish::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SCRewardTaskFinish::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRewardTaskFinish.result)
}

// int32 money = 2;
inline void SCRewardTaskFinish::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRewardTaskFinish::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRewardTaskFinish::money() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRewardTaskFinish.money)
  return _internal_money();
}
inline void SCRewardTaskFinish::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void SCRewardTaskFinish::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRewardTaskFinish.money)
}

// repeated .BYDLD.RewardTask tList = 3;
inline int SCRewardTaskFinish::_internal_tlist_size() const {
  return tlist_.size();
}
inline int SCRewardTaskFinish::tlist_size() const {
  return _internal_tlist_size();
}
inline void SCRewardTaskFinish::clear_tlist() {
  tlist_.Clear();
}
inline ::BYDLD::RewardTask* SCRewardTaskFinish::mutable_tlist(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCRewardTaskFinish.tList)
  return tlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >*
SCRewardTaskFinish::mutable_tlist() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCRewardTaskFinish.tList)
  return &tlist_;
}
inline const ::BYDLD::RewardTask& SCRewardTaskFinish::_internal_tlist(int index) const {
  return tlist_.Get(index);
}
inline const ::BYDLD::RewardTask& SCRewardTaskFinish::tlist(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRewardTaskFinish.tList)
  return _internal_tlist(index);
}
inline ::BYDLD::RewardTask* SCRewardTaskFinish::_internal_add_tlist() {
  return tlist_.Add();
}
inline ::BYDLD::RewardTask* SCRewardTaskFinish::add_tlist() {
  // @@protoc_insertion_point(field_add:BYDLD.SCRewardTaskFinish.tList)
  return _internal_add_tlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardTask >&
SCRewardTaskFinish::tlist() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCRewardTaskFinish.tList)
  return tlist_;
}

// -------------------------------------------------------------------

// SCSyncRewardTaskResult

// int32 chair_id = 1;
inline void SCSyncRewardTaskResult::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::chair_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.chair_id)
  return _internal_chair_id();
}
inline void SCSyncRewardTaskResult::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCSyncRewardTaskResult::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.chair_id)
}

// .BYDLD.SCRewardTaskFinish result = 2;
inline bool SCSyncRewardTaskResult::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SCSyncRewardTaskResult::has_result() const {
  return _internal_has_result();
}
inline void SCSyncRewardTaskResult::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::BYDLD::SCRewardTaskFinish& SCSyncRewardTaskResult::_internal_result() const {
  const ::BYDLD::SCRewardTaskFinish* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::SCRewardTaskFinish&>(
      ::BYDLD::_SCRewardTaskFinish_default_instance_);
}
inline const ::BYDLD::SCRewardTaskFinish& SCSyncRewardTaskResult::result() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.result)
  return _internal_result();
}
inline void SCSyncRewardTaskResult::unsafe_arena_set_allocated_result(
    ::BYDLD::SCRewardTaskFinish* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCSyncRewardTaskResult.result)
}
inline ::BYDLD::SCRewardTaskFinish* SCSyncRewardTaskResult::release_result() {
  
  ::BYDLD::SCRewardTaskFinish* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::SCRewardTaskFinish* SCSyncRewardTaskResult::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:BYDLD.SCSyncRewardTaskResult.result)
  
  ::BYDLD::SCRewardTaskFinish* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::BYDLD::SCRewardTaskFinish* SCSyncRewardTaskResult::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::SCRewardTaskFinish>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::BYDLD::SCRewardTaskFinish* SCSyncRewardTaskResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCSyncRewardTaskResult.result)
  return _internal_mutable_result();
}
inline void SCSyncRewardTaskResult::set_allocated_result(::BYDLD::SCRewardTaskFinish* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCSyncRewardTaskResult.result)
}

// int32 earn = 3;
inline void SCSyncRewardTaskResult::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::earn() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.earn)
  return _internal_earn();
}
inline void SCSyncRewardTaskResult::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void SCSyncRewardTaskResult::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.earn)
}

// int32 fish_id = 4;
inline void SCSyncRewardTaskResult::clear_fish_id() {
  fish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_fish_id() const {
  return fish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::fish_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.fish_id)
  return _internal_fish_id();
}
inline void SCSyncRewardTaskResult::_internal_set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_id_ = value;
}
inline void SCSyncRewardTaskResult::set_fish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.fish_id)
}

// int32 get_peilv = 5;
inline void SCSyncRewardTaskResult::clear_get_peilv() {
  get_peilv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_get_peilv() const {
  return get_peilv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::get_peilv() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.get_peilv)
  return _internal_get_peilv();
}
inline void SCSyncRewardTaskResult::_internal_set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  get_peilv_ = value;
}
inline void SCSyncRewardTaskResult::set_get_peilv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_get_peilv(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.get_peilv)
}

// int32 multiple = 6;
inline void SCSyncRewardTaskResult::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.multiple)
  return _internal_multiple();
}
inline void SCSyncRewardTaskResult::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SCSyncRewardTaskResult::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.multiple)
}

// int32 crit_multiple = 7;
inline void SCSyncRewardTaskResult::clear_crit_multiple() {
  crit_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_crit_multiple() const {
  return crit_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::crit_multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.crit_multiple)
  return _internal_crit_multiple();
}
inline void SCSyncRewardTaskResult::_internal_set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crit_multiple_ = value;
}
inline void SCSyncRewardTaskResult::set_crit_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crit_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.crit_multiple)
}

// int32 ingot_multi = 8;
inline void SCSyncRewardTaskResult::clear_ingot_multi() {
  ingot_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_ingot_multi() const {
  return ingot_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::ingot_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.ingot_multi)
  return _internal_ingot_multi();
}
inline void SCSyncRewardTaskResult::_internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_multi_ = value;
}
inline void SCSyncRewardTaskResult::set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.ingot_multi)
}

// int32 trident_multi = 9;
inline void SCSyncRewardTaskResult::clear_trident_multi() {
  trident_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::_internal_trident_multi() const {
  return trident_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncRewardTaskResult::trident_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncRewardTaskResult.trident_multi)
  return _internal_trident_multi();
}
inline void SCSyncRewardTaskResult::_internal_set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trident_multi_ = value;
}
inline void SCSyncRewardTaskResult::set_trident_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trident_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncRewardTaskResult.trident_multi)
}

// -------------------------------------------------------------------

// CSReqRewardRecord

// int32 ID = 1;
inline void CSReqRewardRecord::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReqRewardRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSReqRewardRecord::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSReqRewardRecord.ID)
  return _internal_id();
}
inline void CSReqRewardRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSReqRewardRecord::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSReqRewardRecord.ID)
}

// -------------------------------------------------------------------

// SCRepRewardTaskRecord

// int32 ID = 1;
inline void SCRepRewardTaskRecord::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskRecord::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskRecord.ID)
  return _internal_id();
}
inline void SCRepRewardTaskRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCRepRewardTaskRecord::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRepRewardTaskRecord.ID)
}

// int32 nRecord = 2;
inline void SCRepRewardTaskRecord::clear_nrecord() {
  nrecord_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskRecord::_internal_nrecord() const {
  return nrecord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskRecord::nrecord() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskRecord.nRecord)
  return _internal_nrecord();
}
inline void SCRepRewardTaskRecord::_internal_set_nrecord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nrecord_ = value;
}
inline void SCRepRewardTaskRecord::set_nrecord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nrecord(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRepRewardTaskRecord.nRecord)
}

// int32 cost = 3;
inline void SCRepRewardTaskRecord::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskRecord::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRepRewardTaskRecord::cost() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskRecord.cost)
  return _internal_cost();
}
inline void SCRepRewardTaskRecord::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void SCRepRewardTaskRecord::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRepRewardTaskRecord.cost)
}

// repeated .BYDLD.SCRewardTaskFinish record = 4;
inline int SCRepRewardTaskRecord::_internal_record_size() const {
  return record_.size();
}
inline int SCRepRewardTaskRecord::record_size() const {
  return _internal_record_size();
}
inline void SCRepRewardTaskRecord::clear_record() {
  record_.Clear();
}
inline ::BYDLD::SCRewardTaskFinish* SCRepRewardTaskRecord::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCRepRewardTaskRecord.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SCRewardTaskFinish >*
SCRepRewardTaskRecord::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCRepRewardTaskRecord.record)
  return &record_;
}
inline const ::BYDLD::SCRewardTaskFinish& SCRepRewardTaskRecord::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::BYDLD::SCRewardTaskFinish& SCRepRewardTaskRecord::record(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskRecord.record)
  return _internal_record(index);
}
inline ::BYDLD::SCRewardTaskFinish* SCRepRewardTaskRecord::_internal_add_record() {
  return record_.Add();
}
inline ::BYDLD::SCRewardTaskFinish* SCRepRewardTaskRecord::add_record() {
  // @@protoc_insertion_point(field_add:BYDLD.SCRepRewardTaskRecord.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::SCRewardTaskFinish >&
SCRepRewardTaskRecord::record() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCRepRewardTaskRecord.record)
  return record_;
}

// repeated .BYDLD.RewardConf confList = 5;
inline int SCRepRewardTaskRecord::_internal_conflist_size() const {
  return conflist_.size();
}
inline int SCRepRewardTaskRecord::conflist_size() const {
  return _internal_conflist_size();
}
inline void SCRepRewardTaskRecord::clear_conflist() {
  conflist_.Clear();
}
inline ::BYDLD::RewardConf* SCRepRewardTaskRecord::mutable_conflist(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCRepRewardTaskRecord.confList)
  return conflist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardConf >*
SCRepRewardTaskRecord::mutable_conflist() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCRepRewardTaskRecord.confList)
  return &conflist_;
}
inline const ::BYDLD::RewardConf& SCRepRewardTaskRecord::_internal_conflist(int index) const {
  return conflist_.Get(index);
}
inline const ::BYDLD::RewardConf& SCRepRewardTaskRecord::conflist(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRepRewardTaskRecord.confList)
  return _internal_conflist(index);
}
inline ::BYDLD::RewardConf* SCRepRewardTaskRecord::_internal_add_conflist() {
  return conflist_.Add();
}
inline ::BYDLD::RewardConf* SCRepRewardTaskRecord::add_conflist() {
  // @@protoc_insertion_point(field_add:BYDLD.SCRepRewardTaskRecord.confList)
  return _internal_add_conflist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::RewardConf >&
SCRepRewardTaskRecord::conflist() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCRepRewardTaskRecord.confList)
  return conflist_;
}

// -------------------------------------------------------------------

// CSRewardChangeAuto

// int32 autoTimes = 1;
inline void CSRewardChangeAuto::clear_autotimes() {
  autotimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRewardChangeAuto::_internal_autotimes() const {
  return autotimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRewardChangeAuto::autotimes() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSRewardChangeAuto.autoTimes)
  return _internal_autotimes();
}
inline void CSRewardChangeAuto::_internal_set_autotimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  autotimes_ = value;
}
inline void CSRewardChangeAuto::set_autotimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_autotimes(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSRewardChangeAuto.autoTimes)
}

// -------------------------------------------------------------------

// SCRewardAutoRep

// int32 status = 1;
inline void SCRewardAutoRep::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRewardAutoRep::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRewardAutoRep::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRewardAutoRep.status)
  return _internal_status();
}
inline void SCRewardAutoRep::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCRewardAutoRep::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRewardAutoRep.status)
}

// bool accept = 2;
inline void SCRewardAutoRep::clear_accept() {
  accept_ = false;
}
inline bool SCRewardAutoRep::_internal_accept() const {
  return accept_;
}
inline bool SCRewardAutoRep::accept() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCRewardAutoRep.accept)
  return _internal_accept();
}
inline void SCRewardAutoRep::_internal_set_accept(bool value) {
  
  accept_ = value;
}
inline void SCRewardAutoRep::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCRewardAutoRep.accept)
}

// -------------------------------------------------------------------

// SCSeaCrabCreate

// int32 chair_id = 1;
inline void SCSeaCrabCreate::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSeaCrabCreate::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSeaCrabCreate::chair_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSeaCrabCreate.chair_id)
  return _internal_chair_id();
}
inline void SCSeaCrabCreate::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCSeaCrabCreate::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSeaCrabCreate.chair_id)
}

// int32 status = 2;
inline void SCSeaCrabCreate::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSeaCrabCreate::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSeaCrabCreate::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSeaCrabCreate.status)
  return _internal_status();
}
inline void SCSeaCrabCreate::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCSeaCrabCreate::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSeaCrabCreate.status)
}

// -------------------------------------------------------------------

// CSSyncCrabStatus

// -------------------------------------------------------------------

// SCSyncCrabStatus

// int32 status = 1;
inline void SCSyncCrabStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::status() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncCrabStatus.status)
  return _internal_status();
}
inline void SCSyncCrabStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SCSyncCrabStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncCrabStatus.status)
}

// int32 chair_id = 2;
inline void SCSyncCrabStatus::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::chair_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncCrabStatus.chair_id)
  return _internal_chair_id();
}
inline void SCSyncCrabStatus::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCSyncCrabStatus::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncCrabStatus.chair_id)
}

// int32 multiple_1 = 3;
inline void SCSyncCrabStatus::clear_multiple_1() {
  multiple_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::_internal_multiple_1() const {
  return multiple_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::multiple_1() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncCrabStatus.multiple_1)
  return _internal_multiple_1();
}
inline void SCSyncCrabStatus::_internal_set_multiple_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_1_ = value;
}
inline void SCSyncCrabStatus::set_multiple_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple_1(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncCrabStatus.multiple_1)
}

// int32 multiple_2 = 4;
inline void SCSyncCrabStatus::clear_multiple_2() {
  multiple_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::_internal_multiple_2() const {
  return multiple_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncCrabStatus::multiple_2() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncCrabStatus.multiple_2)
  return _internal_multiple_2();
}
inline void SCSyncCrabStatus::_internal_set_multiple_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_2_ = value;
}
inline void SCSyncCrabStatus::set_multiple_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple_2(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncCrabStatus.multiple_2)
}

// -------------------------------------------------------------------

// CSDragonBallEnd

// -------------------------------------------------------------------

// SCDragonBallRes

// int32 chair_id = 1;
inline void SCDragonBallRes::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::chair_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonBallRes.chair_id)
  return _internal_chair_id();
}
inline void SCDragonBallRes::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void SCDragonBallRes::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonBallRes.chair_id)
}

// int32 lock_ratio = 2;
inline void SCDragonBallRes::clear_lock_ratio() {
  lock_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::_internal_lock_ratio() const {
  return lock_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::lock_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonBallRes.lock_ratio)
  return _internal_lock_ratio();
}
inline void SCDragonBallRes::_internal_set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lock_ratio_ = value;
}
inline void SCDragonBallRes::set_lock_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lock_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonBallRes.lock_ratio)
}

// int32 base_ratio = 3;
inline void SCDragonBallRes::clear_base_ratio() {
  base_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::_internal_base_ratio() const {
  return base_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::base_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonBallRes.base_ratio)
  return _internal_base_ratio();
}
inline void SCDragonBallRes::_internal_set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ratio_ = value;
}
inline void SCDragonBallRes::set_base_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonBallRes.base_ratio)
}

// int32 total_award = 4;
inline void SCDragonBallRes::clear_total_award() {
  total_award_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::_internal_total_award() const {
  return total_award_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonBallRes::total_award() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDragonBallRes.total_award)
  return _internal_total_award();
}
inline void SCDragonBallRes::_internal_set_total_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_award_ = value;
}
inline void SCDragonBallRes::set_total_award(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_award(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDragonBallRes.total_award)
}

// -------------------------------------------------------------------

// DevouredFish

// int32 fish_uid = 1;
inline void DevouredFish::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevouredFish::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevouredFish::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.DevouredFish.fish_uid)
  return _internal_fish_uid();
}
inline void DevouredFish::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void DevouredFish::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.DevouredFish.fish_uid)
}

// int32 earn = 2;
inline void DevouredFish::clear_earn() {
  earn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevouredFish::_internal_earn() const {
  return earn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevouredFish::earn() const {
  // @@protoc_insertion_point(field_get:BYDLD.DevouredFish.earn)
  return _internal_earn();
}
inline void DevouredFish::_internal_set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  earn_ = value;
}
inline void DevouredFish::set_earn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_earn(value);
  // @@protoc_insertion_point(field_set:BYDLD.DevouredFish.earn)
}

// -------------------------------------------------------------------

// CSDevourHit

// repeated int32 screen_fishes = 1;
inline int CSDevourHit::_internal_screen_fishes_size() const {
  return screen_fishes_.size();
}
inline int CSDevourHit::screen_fishes_size() const {
  return _internal_screen_fishes_size();
}
inline void CSDevourHit::clear_screen_fishes() {
  screen_fishes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDevourHit::_internal_screen_fishes(int index) const {
  return screen_fishes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDevourHit::screen_fishes(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.CSDevourHit.screen_fishes)
  return _internal_screen_fishes(index);
}
inline void CSDevourHit::set_screen_fishes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Set(index, value);
  // @@protoc_insertion_point(field_set:BYDLD.CSDevourHit.screen_fishes)
}
inline void CSDevourHit::_internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  screen_fishes_.Add(value);
}
inline void CSDevourHit::add_screen_fishes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_screen_fishes(value);
  // @@protoc_insertion_point(field_add:BYDLD.CSDevourHit.screen_fishes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSDevourHit::_internal_screen_fishes() const {
  return screen_fishes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSDevourHit::screen_fishes() const {
  // @@protoc_insertion_point(field_list:BYDLD.CSDevourHit.screen_fishes)
  return _internal_screen_fishes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSDevourHit::_internal_mutable_screen_fishes() {
  return &screen_fishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSDevourHit::mutable_screen_fishes() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.CSDevourHit.screen_fishes)
  return _internal_mutable_screen_fishes();
}

// -------------------------------------------------------------------

// SCDevourHit

// repeated .BYDLD.DevouredFish devour_fishes = 1;
inline int SCDevourHit::_internal_devour_fishes_size() const {
  return devour_fishes_.size();
}
inline int SCDevourHit::devour_fishes_size() const {
  return _internal_devour_fishes_size();
}
inline void SCDevourHit::clear_devour_fishes() {
  devour_fishes_.Clear();
}
inline ::BYDLD::DevouredFish* SCDevourHit::mutable_devour_fishes(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCDevourHit.devour_fishes)
  return devour_fishes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DevouredFish >*
SCDevourHit::mutable_devour_fishes() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCDevourHit.devour_fishes)
  return &devour_fishes_;
}
inline const ::BYDLD::DevouredFish& SCDevourHit::_internal_devour_fishes(int index) const {
  return devour_fishes_.Get(index);
}
inline const ::BYDLD::DevouredFish& SCDevourHit::devour_fishes(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDevourHit.devour_fishes)
  return _internal_devour_fishes(index);
}
inline ::BYDLD::DevouredFish* SCDevourHit::_internal_add_devour_fishes() {
  return devour_fishes_.Add();
}
inline ::BYDLD::DevouredFish* SCDevourHit::add_devour_fishes() {
  // @@protoc_insertion_point(field_add:BYDLD.SCDevourHit.devour_fishes)
  return _internal_add_devour_fishes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::DevouredFish >&
SCDevourHit::devour_fishes() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCDevourHit.devour_fishes)
  return devour_fishes_;
}

// int32 crit = 2;
inline void SCDevourHit::clear_crit() {
  crit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDevourHit::_internal_crit() const {
  return crit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDevourHit::crit() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDevourHit.crit)
  return _internal_crit();
}
inline void SCDevourHit::_internal_set_crit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crit_ = value;
}
inline void SCDevourHit::set_crit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crit(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDevourHit.crit)
}

// int32 multiple = 3;
inline void SCDevourHit::clear_multiple() {
  multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDevourHit::_internal_multiple() const {
  return multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDevourHit::multiple() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDevourHit.multiple)
  return _internal_multiple();
}
inline void SCDevourHit::_internal_set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiple_ = value;
}
inline void SCDevourHit::set_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDevourHit.multiple)
}

// int32 ingot_multi = 4;
inline void SCDevourHit::clear_ingot_multi() {
  ingot_multi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDevourHit::_internal_ingot_multi() const {
  return ingot_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDevourHit::ingot_multi() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCDevourHit.ingot_multi)
  return _internal_ingot_multi();
}
inline void SCDevourHit::_internal_set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ingot_multi_ = value;
}
inline void SCDevourHit::set_ingot_multi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ingot_multi(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCDevourHit.ingot_multi)
}

// -------------------------------------------------------------------

// OpenChestReward

// int32 id = 1;
inline void OpenChestReward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChestReward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChestReward::id() const {
  // @@protoc_insertion_point(field_get:BYDLD.OpenChestReward.id)
  return _internal_id();
}
inline void OpenChestReward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void OpenChestReward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.OpenChestReward.id)
}

// .BYDLD.Decimal num = 2;
inline bool OpenChestReward::_internal_has_num() const {
  return this != internal_default_instance() && num_ != nullptr;
}
inline bool OpenChestReward::has_num() const {
  return _internal_has_num();
}
inline void OpenChestReward::clear_num() {
  if (GetArena() == nullptr && num_ != nullptr) {
    delete num_;
  }
  num_ = nullptr;
}
inline const ::BYDLD::Decimal& OpenChestReward::_internal_num() const {
  const ::BYDLD::Decimal* p = num_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::Decimal&>(
      ::BYDLD::_Decimal_default_instance_);
}
inline const ::BYDLD::Decimal& OpenChestReward::num() const {
  // @@protoc_insertion_point(field_get:BYDLD.OpenChestReward.num)
  return _internal_num();
}
inline void OpenChestReward::unsafe_arena_set_allocated_num(
    ::BYDLD::Decimal* num) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_);
  }
  num_ = num;
  if (num) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.OpenChestReward.num)
}
inline ::BYDLD::Decimal* OpenChestReward::release_num() {
  
  ::BYDLD::Decimal* temp = num_;
  num_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::Decimal* OpenChestReward::unsafe_arena_release_num() {
  // @@protoc_insertion_point(field_release:BYDLD.OpenChestReward.num)
  
  ::BYDLD::Decimal* temp = num_;
  num_ = nullptr;
  return temp;
}
inline ::BYDLD::Decimal* OpenChestReward::_internal_mutable_num() {
  
  if (num_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::Decimal>(GetArena());
    num_ = p;
  }
  return num_;
}
inline ::BYDLD::Decimal* OpenChestReward::mutable_num() {
  // @@protoc_insertion_point(field_mutable:BYDLD.OpenChestReward.num)
  return _internal_mutable_num();
}
inline void OpenChestReward::set_allocated_num(::BYDLD::Decimal* num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete num_;
  }
  if (num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(num);
    if (message_arena != submessage_arena) {
      num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    
  } else {
    
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.OpenChestReward.num)
}

// -------------------------------------------------------------------

// SCUpdateChestStatus

// bool is_active = 1;
inline void SCUpdateChestStatus::clear_is_active() {
  is_active_ = false;
}
inline bool SCUpdateChestStatus::_internal_is_active() const {
  return is_active_;
}
inline bool SCUpdateChestStatus::is_active() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUpdateChestStatus.is_active)
  return _internal_is_active();
}
inline void SCUpdateChestStatus::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void SCUpdateChestStatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUpdateChestStatus.is_active)
}

// .BYDLD.ChestType chest_type = 2;
inline void SCUpdateChestStatus::clear_chest_type() {
  chest_type_ = 0;
}
inline ::BYDLD::ChestType SCUpdateChestStatus::_internal_chest_type() const {
  return static_cast< ::BYDLD::ChestType >(chest_type_);
}
inline ::BYDLD::ChestType SCUpdateChestStatus::chest_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUpdateChestStatus.chest_type)
  return _internal_chest_type();
}
inline void SCUpdateChestStatus::_internal_set_chest_type(::BYDLD::ChestType value) {
  
  chest_type_ = value;
}
inline void SCUpdateChestStatus::set_chest_type(::BYDLD::ChestType value) {
  _internal_set_chest_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUpdateChestStatus.chest_type)
}

// int32 total_progress = 3;
inline void SCUpdateChestStatus::clear_total_progress() {
  total_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_total_progress() const {
  return total_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::total_progress() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUpdateChestStatus.total_progress)
  return _internal_total_progress();
}
inline void SCUpdateChestStatus::_internal_set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_progress_ = value;
}
inline void SCUpdateChestStatus::set_total_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_progress(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUpdateChestStatus.total_progress)
}

// int32 remain_progress = 4;
inline void SCUpdateChestStatus::clear_remain_progress() {
  remain_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_remain_progress() const {
  return remain_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::remain_progress() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUpdateChestStatus.remain_progress)
  return _internal_remain_progress();
}
inline void SCUpdateChestStatus::_internal_set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_progress_ = value;
}
inline void SCUpdateChestStatus::set_remain_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_progress(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUpdateChestStatus.remain_progress)
}

// bool guide = 5;
inline void SCUpdateChestStatus::clear_guide() {
  guide_ = false;
}
inline bool SCUpdateChestStatus::_internal_guide() const {
  return guide_;
}
inline bool SCUpdateChestStatus::guide() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUpdateChestStatus.guide)
  return _internal_guide();
}
inline void SCUpdateChestStatus::_internal_set_guide(bool value) {
  
  guide_ = value;
}
inline void SCUpdateChestStatus::set_guide(bool value) {
  _internal_set_guide(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUpdateChestStatus.guide)
}

// int32 available_reward = 6;
inline void SCUpdateChestStatus::clear_available_reward() {
  available_reward_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::_internal_available_reward() const {
  return available_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCUpdateChestStatus::available_reward() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCUpdateChestStatus.available_reward)
  return _internal_available_reward();
}
inline void SCUpdateChestStatus::_internal_set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_reward_ = value;
}
inline void SCUpdateChestStatus::set_available_reward(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available_reward(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCUpdateChestStatus.available_reward)
}

// -------------------------------------------------------------------

// CSChestConfig

// -------------------------------------------------------------------

// ChestBrief

// .BYDLD.ChestType chest_type = 1;
inline void ChestBrief::clear_chest_type() {
  chest_type_ = 0;
}
inline ::BYDLD::ChestType ChestBrief::_internal_chest_type() const {
  return static_cast< ::BYDLD::ChestType >(chest_type_);
}
inline ::BYDLD::ChestType ChestBrief::chest_type() const {
  // @@protoc_insertion_point(field_get:BYDLD.ChestBrief.chest_type)
  return _internal_chest_type();
}
inline void ChestBrief::_internal_set_chest_type(::BYDLD::ChestType value) {
  
  chest_type_ = value;
}
inline void ChestBrief::set_chest_type(::BYDLD::ChestType value) {
  _internal_set_chest_type(value);
  // @@protoc_insertion_point(field_set:BYDLD.ChestBrief.chest_type)
}

// repeated .BYDLD.OpenChestReward reward = 2;
inline int ChestBrief::_internal_reward_size() const {
  return reward_.size();
}
inline int ChestBrief::reward_size() const {
  return _internal_reward_size();
}
inline void ChestBrief::clear_reward() {
  reward_.Clear();
}
inline ::BYDLD::OpenChestReward* ChestBrief::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.ChestBrief.reward)
  return reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >*
ChestBrief::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.ChestBrief.reward)
  return &reward_;
}
inline const ::BYDLD::OpenChestReward& ChestBrief::_internal_reward(int index) const {
  return reward_.Get(index);
}
inline const ::BYDLD::OpenChestReward& ChestBrief::reward(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.ChestBrief.reward)
  return _internal_reward(index);
}
inline ::BYDLD::OpenChestReward* ChestBrief::_internal_add_reward() {
  return reward_.Add();
}
inline ::BYDLD::OpenChestReward* ChestBrief::add_reward() {
  // @@protoc_insertion_point(field_add:BYDLD.ChestBrief.reward)
  return _internal_add_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >&
ChestBrief::reward() const {
  // @@protoc_insertion_point(field_list:BYDLD.ChestBrief.reward)
  return reward_;
}

// -------------------------------------------------------------------

// SCChestConfig

// int32 end_time = 1;
inline void SCChestConfig::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::end_time() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestConfig.end_time)
  return _internal_end_time();
}
inline void SCChestConfig::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void SCChestConfig::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestConfig.end_time)
}

// repeated .BYDLD.ChestBrief chest_brief_list = 2;
inline int SCChestConfig::_internal_chest_brief_list_size() const {
  return chest_brief_list_.size();
}
inline int SCChestConfig::chest_brief_list_size() const {
  return _internal_chest_brief_list_size();
}
inline void SCChestConfig::clear_chest_brief_list() {
  chest_brief_list_.Clear();
}
inline ::BYDLD::ChestBrief* SCChestConfig::mutable_chest_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCChestConfig.chest_brief_list)
  return chest_brief_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ChestBrief >*
SCChestConfig::mutable_chest_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCChestConfig.chest_brief_list)
  return &chest_brief_list_;
}
inline const ::BYDLD::ChestBrief& SCChestConfig::_internal_chest_brief_list(int index) const {
  return chest_brief_list_.Get(index);
}
inline const ::BYDLD::ChestBrief& SCChestConfig::chest_brief_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestConfig.chest_brief_list)
  return _internal_chest_brief_list(index);
}
inline ::BYDLD::ChestBrief* SCChestConfig::_internal_add_chest_brief_list() {
  return chest_brief_list_.Add();
}
inline ::BYDLD::ChestBrief* SCChestConfig::add_chest_brief_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCChestConfig.chest_brief_list)
  return _internal_add_chest_brief_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::ChestBrief >&
SCChestConfig::chest_brief_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCChestConfig.chest_brief_list)
  return chest_brief_list_;
}

// int32 min_ratio = 3;
inline void SCChestConfig::clear_min_ratio() {
  min_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::_internal_min_ratio() const {
  return min_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCChestConfig::min_ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestConfig.min_ratio)
  return _internal_min_ratio();
}
inline void SCChestConfig::_internal_set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ratio_ = value;
}
inline void SCChestConfig::set_min_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestConfig.min_ratio)
}

// bool auto_open = 4;
inline void SCChestConfig::clear_auto_open() {
  auto_open_ = false;
}
inline bool SCChestConfig::_internal_auto_open() const {
  return auto_open_;
}
inline bool SCChestConfig::auto_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestConfig.auto_open)
  return _internal_auto_open();
}
inline void SCChestConfig::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void SCChestConfig::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestConfig.auto_open)
}

// .BYDLD.ChestAutoSelectOption auto_option = 5;
inline void SCChestConfig::clear_auto_option() {
  auto_option_ = 0;
}
inline ::BYDLD::ChestAutoSelectOption SCChestConfig::_internal_auto_option() const {
  return static_cast< ::BYDLD::ChestAutoSelectOption >(auto_option_);
}
inline ::BYDLD::ChestAutoSelectOption SCChestConfig::auto_option() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestConfig.auto_option)
  return _internal_auto_option();
}
inline void SCChestConfig::_internal_set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCChestConfig::set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestConfig.auto_option)
}

// bool is_enable = 6;
inline void SCChestConfig::clear_is_enable() {
  is_enable_ = false;
}
inline bool SCChestConfig::_internal_is_enable() const {
  return is_enable_;
}
inline bool SCChestConfig::is_enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestConfig.is_enable)
  return _internal_is_enable();
}
inline void SCChestConfig::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void SCChestConfig::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestConfig.is_enable)
}

// -------------------------------------------------------------------

// CSOpenChest

// -------------------------------------------------------------------

// SCOpenChest

// repeated .BYDLD.OpenChestReward reward_list = 1;
inline int SCOpenChest::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SCOpenChest::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SCOpenChest::clear_reward_list() {
  reward_list_.Clear();
}
inline ::BYDLD::OpenChestReward* SCOpenChest::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCOpenChest.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >*
SCOpenChest::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCOpenChest.reward_list)
  return &reward_list_;
}
inline const ::BYDLD::OpenChestReward& SCOpenChest::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::BYDLD::OpenChestReward& SCOpenChest::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCOpenChest.reward_list)
  return _internal_reward_list(index);
}
inline ::BYDLD::OpenChestReward* SCOpenChest::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::BYDLD::OpenChestReward* SCOpenChest::add_reward_list() {
  // @@protoc_insertion_point(field_add:BYDLD.SCOpenChest.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::OpenChestReward >&
SCOpenChest::reward_list() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCOpenChest.reward_list)
  return reward_list_;
}

// .BYDLD.ChestAutoSelectOption auto_option = 2;
inline void SCOpenChest::clear_auto_option() {
  auto_option_ = 0;
}
inline ::BYDLD::ChestAutoSelectOption SCOpenChest::_internal_auto_option() const {
  return static_cast< ::BYDLD::ChestAutoSelectOption >(auto_option_);
}
inline ::BYDLD::ChestAutoSelectOption SCOpenChest::auto_option() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCOpenChest.auto_option)
  return _internal_auto_option();
}
inline void SCOpenChest::_internal_set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCOpenChest::set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCOpenChest.auto_option)
}

// -------------------------------------------------------------------

// CSSelectChestReward

// int32 select_index = 1;
inline void CSSelectChestReward::clear_select_index() {
  select_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectChestReward::_internal_select_index() const {
  return select_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSelectChestReward::select_index() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSelectChestReward.select_index)
  return _internal_select_index();
}
inline void CSSelectChestReward::_internal_set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  select_index_ = value;
}
inline void CSSelectChestReward::set_select_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_select_index(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSelectChestReward.select_index)
}

// -------------------------------------------------------------------

// SCSelectChestReward

// .BYDLD.OpenChestReward reward = 1;
inline bool SCSelectChestReward::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool SCSelectChestReward::has_reward() const {
  return _internal_has_reward();
}
inline void SCSelectChestReward::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::BYDLD::OpenChestReward& SCSelectChestReward::_internal_reward() const {
  const ::BYDLD::OpenChestReward* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::BYDLD::OpenChestReward&>(
      ::BYDLD::_OpenChestReward_default_instance_);
}
inline const ::BYDLD::OpenChestReward& SCSelectChestReward::reward() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSelectChestReward.reward)
  return _internal_reward();
}
inline void SCSelectChestReward::unsafe_arena_set_allocated_reward(
    ::BYDLD::OpenChestReward* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BYDLD.SCSelectChestReward.reward)
}
inline ::BYDLD::OpenChestReward* SCSelectChestReward::release_reward() {
  
  ::BYDLD::OpenChestReward* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BYDLD::OpenChestReward* SCSelectChestReward::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:BYDLD.SCSelectChestReward.reward)
  
  ::BYDLD::OpenChestReward* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::BYDLD::OpenChestReward* SCSelectChestReward::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::BYDLD::OpenChestReward>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::BYDLD::OpenChestReward* SCSelectChestReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCSelectChestReward.reward)
  return _internal_mutable_reward();
}
inline void SCSelectChestReward::set_allocated_reward(::BYDLD::OpenChestReward* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCSelectChestReward.reward)
}

// -------------------------------------------------------------------

// CSChestSetAutoSelect

// .BYDLD.ChestAutoSelectOption auto_option = 1;
inline void CSChestSetAutoSelect::clear_auto_option() {
  auto_option_ = 0;
}
inline ::BYDLD::ChestAutoSelectOption CSChestSetAutoSelect::_internal_auto_option() const {
  return static_cast< ::BYDLD::ChestAutoSelectOption >(auto_option_);
}
inline ::BYDLD::ChestAutoSelectOption CSChestSetAutoSelect::auto_option() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSChestSetAutoSelect.auto_option)
  return _internal_auto_option();
}
inline void CSChestSetAutoSelect::_internal_set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void CSChestSetAutoSelect::set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSChestSetAutoSelect.auto_option)
}

// bool auto_open = 2;
inline void CSChestSetAutoSelect::clear_auto_open() {
  auto_open_ = false;
}
inline bool CSChestSetAutoSelect::_internal_auto_open() const {
  return auto_open_;
}
inline bool CSChestSetAutoSelect::auto_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSChestSetAutoSelect.auto_open)
  return _internal_auto_open();
}
inline void CSChestSetAutoSelect::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void CSChestSetAutoSelect::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSChestSetAutoSelect.auto_open)
}

// -------------------------------------------------------------------

// SCChestSetAutoSelect

// .BYDLD.ChestAutoSelectOption auto_option = 1;
inline void SCChestSetAutoSelect::clear_auto_option() {
  auto_option_ = 0;
}
inline ::BYDLD::ChestAutoSelectOption SCChestSetAutoSelect::_internal_auto_option() const {
  return static_cast< ::BYDLD::ChestAutoSelectOption >(auto_option_);
}
inline ::BYDLD::ChestAutoSelectOption SCChestSetAutoSelect::auto_option() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestSetAutoSelect.auto_option)
  return _internal_auto_option();
}
inline void SCChestSetAutoSelect::_internal_set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  
  auto_option_ = value;
}
inline void SCChestSetAutoSelect::set_auto_option(::BYDLD::ChestAutoSelectOption value) {
  _internal_set_auto_option(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestSetAutoSelect.auto_option)
}

// bool auto_open = 2;
inline void SCChestSetAutoSelect::clear_auto_open() {
  auto_open_ = false;
}
inline bool SCChestSetAutoSelect::_internal_auto_open() const {
  return auto_open_;
}
inline bool SCChestSetAutoSelect::auto_open() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestSetAutoSelect.auto_open)
  return _internal_auto_open();
}
inline void SCChestSetAutoSelect::_internal_set_auto_open(bool value) {
  
  auto_open_ = value;
}
inline void SCChestSetAutoSelect::set_auto_open(bool value) {
  _internal_set_auto_open(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestSetAutoSelect.auto_open)
}

// -------------------------------------------------------------------

// CSChestSetEnable

// bool is_enable = 1;
inline void CSChestSetEnable::clear_is_enable() {
  is_enable_ = false;
}
inline bool CSChestSetEnable::_internal_is_enable() const {
  return is_enable_;
}
inline bool CSChestSetEnable::is_enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSChestSetEnable.is_enable)
  return _internal_is_enable();
}
inline void CSChestSetEnable::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void CSChestSetEnable::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSChestSetEnable.is_enable)
}

// -------------------------------------------------------------------

// SCChestSetEnable

// bool is_enable = 1;
inline void SCChestSetEnable::clear_is_enable() {
  is_enable_ = false;
}
inline bool SCChestSetEnable::_internal_is_enable() const {
  return is_enable_;
}
inline bool SCChestSetEnable::is_enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCChestSetEnable.is_enable)
  return _internal_is_enable();
}
inline void SCChestSetEnable::_internal_set_is_enable(bool value) {
  
  is_enable_ = value;
}
inline void SCChestSetEnable::set_is_enable(bool value) {
  _internal_set_is_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCChestSetEnable.is_enable)
}

// -------------------------------------------------------------------

// CSSyncAnimation

// int32 animationId = 1;
inline void CSSyncAnimation::clear_animationid() {
  animationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncAnimation::_internal_animationid() const {
  return animationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncAnimation::animationid() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncAnimation.animationId)
  return _internal_animationid();
}
inline void CSSyncAnimation::_internal_set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  animationid_ = value;
}
inline void CSSyncAnimation::set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_animationid(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncAnimation.animationId)
}

// int32 step = 2;
inline void CSSyncAnimation::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncAnimation::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSyncAnimation::step() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncAnimation.step)
  return _internal_step();
}
inline void CSSyncAnimation::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void CSSyncAnimation::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncAnimation.step)
}

// bool complete = 3;
inline void CSSyncAnimation::clear_complete() {
  complete_ = false;
}
inline bool CSSyncAnimation::_internal_complete() const {
  return complete_;
}
inline bool CSSyncAnimation::complete() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncAnimation.complete)
  return _internal_complete();
}
inline void CSSyncAnimation::_internal_set_complete(bool value) {
  
  complete_ = value;
}
inline void CSSyncAnimation::set_complete(bool value) {
  _internal_set_complete(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncAnimation.complete)
}

// string content = 4;
inline void CSSyncAnimation::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& CSSyncAnimation::content() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSyncAnimation.content)
  return _internal_content();
}
inline void CSSyncAnimation::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSyncAnimation.content)
}
inline std::string* CSSyncAnimation::mutable_content() {
  // @@protoc_insertion_point(field_mutable:BYDLD.CSSyncAnimation.content)
  return _internal_mutable_content();
}
inline const std::string& CSSyncAnimation::_internal_content() const {
  return content_.Get();
}
inline void CSSyncAnimation::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSSyncAnimation::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.CSSyncAnimation.content)
}
inline void CSSyncAnimation::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.CSSyncAnimation.content)
}
inline void CSSyncAnimation::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.CSSyncAnimation.content)
}
inline std::string* CSSyncAnimation::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSSyncAnimation::release_content() {
  // @@protoc_insertion_point(field_release:BYDLD.CSSyncAnimation.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSSyncAnimation::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.CSSyncAnimation.content)
}

// -------------------------------------------------------------------

// SCSyncAnimation

// int32 animationId = 1;
inline void SCSyncAnimation::clear_animationid() {
  animationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnimation::_internal_animationid() const {
  return animationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnimation::animationid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncAnimation.animationId)
  return _internal_animationid();
}
inline void SCSyncAnimation::_internal_set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  animationid_ = value;
}
inline void SCSyncAnimation::set_animationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_animationid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncAnimation.animationId)
}

// int32 step = 2;
inline void SCSyncAnimation::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnimation::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncAnimation::step() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncAnimation.step)
  return _internal_step();
}
inline void SCSyncAnimation::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void SCSyncAnimation::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncAnimation.step)
}

// bool complete = 3;
inline void SCSyncAnimation::clear_complete() {
  complete_ = false;
}
inline bool SCSyncAnimation::_internal_complete() const {
  return complete_;
}
inline bool SCSyncAnimation::complete() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncAnimation.complete)
  return _internal_complete();
}
inline void SCSyncAnimation::_internal_set_complete(bool value) {
  
  complete_ = value;
}
inline void SCSyncAnimation::set_complete(bool value) {
  _internal_set_complete(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncAnimation.complete)
}

// string content = 4;
inline void SCSyncAnimation::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& SCSyncAnimation::content() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSyncAnimation.content)
  return _internal_content();
}
inline void SCSyncAnimation::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSyncAnimation.content)
}
inline std::string* SCSyncAnimation::mutable_content() {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCSyncAnimation.content)
  return _internal_mutable_content();
}
inline const std::string& SCSyncAnimation::_internal_content() const {
  return content_.Get();
}
inline void SCSyncAnimation::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCSyncAnimation::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BYDLD.SCSyncAnimation.content)
}
inline void SCSyncAnimation::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BYDLD.SCSyncAnimation.content)
}
inline void SCSyncAnimation::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BYDLD.SCSyncAnimation.content)
}
inline std::string* SCSyncAnimation::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCSyncAnimation::release_content() {
  // @@protoc_insertion_point(field_release:BYDLD.SCSyncAnimation.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCSyncAnimation::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BYDLD.SCSyncAnimation.content)
}

// -------------------------------------------------------------------

// CSMagicCardList

// -------------------------------------------------------------------

// SCMagicCardList

// repeated .BYDLD.MagicCardInfo magicCardList = 1;
inline int SCMagicCardList::_internal_magiccardlist_size() const {
  return magiccardlist_.size();
}
inline int SCMagicCardList::magiccardlist_size() const {
  return _internal_magiccardlist_size();
}
inline void SCMagicCardList::clear_magiccardlist() {
  magiccardlist_.Clear();
}
inline ::BYDLD::MagicCardInfo* SCMagicCardList::mutable_magiccardlist(int index) {
  // @@protoc_insertion_point(field_mutable:BYDLD.SCMagicCardList.magicCardList)
  return magiccardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >*
SCMagicCardList::mutable_magiccardlist() {
  // @@protoc_insertion_point(field_mutable_list:BYDLD.SCMagicCardList.magicCardList)
  return &magiccardlist_;
}
inline const ::BYDLD::MagicCardInfo& SCMagicCardList::_internal_magiccardlist(int index) const {
  return magiccardlist_.Get(index);
}
inline const ::BYDLD::MagicCardInfo& SCMagicCardList::magiccardlist(int index) const {
  // @@protoc_insertion_point(field_get:BYDLD.SCMagicCardList.magicCardList)
  return _internal_magiccardlist(index);
}
inline ::BYDLD::MagicCardInfo* SCMagicCardList::_internal_add_magiccardlist() {
  return magiccardlist_.Add();
}
inline ::BYDLD::MagicCardInfo* SCMagicCardList::add_magiccardlist() {
  // @@protoc_insertion_point(field_add:BYDLD.SCMagicCardList.magicCardList)
  return _internal_add_magiccardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BYDLD::MagicCardInfo >&
SCMagicCardList::magiccardlist() const {
  // @@protoc_insertion_point(field_list:BYDLD.SCMagicCardList.magicCardList)
  return magiccardlist_;
}

// -------------------------------------------------------------------

// SCTortoiseExplode

// int32 chair_idx = 1;
inline void SCTortoiseExplode::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTortoiseExplode.chair_idx)
  return _internal_chair_idx();
}
inline void SCTortoiseExplode::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCTortoiseExplode::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTortoiseExplode.chair_idx)
}

// int32 fish_uid = 2;
inline void SCTortoiseExplode::clear_fish_uid() {
  fish_uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_fish_uid() const {
  return fish_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::fish_uid() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTortoiseExplode.fish_uid)
  return _internal_fish_uid();
}
inline void SCTortoiseExplode::_internal_set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fish_uid_ = value;
}
inline void SCTortoiseExplode::set_fish_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fish_uid(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTortoiseExplode.fish_uid)
}

// int32 bullet_id = 3;
inline void SCTortoiseExplode::clear_bullet_id() {
  bullet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_bullet_id() const {
  return bullet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::bullet_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTortoiseExplode.bullet_id)
  return _internal_bullet_id();
}
inline void SCTortoiseExplode::_internal_set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullet_id_ = value;
}
inline void SCTortoiseExplode::set_bullet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullet_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTortoiseExplode.bullet_id)
}

// int32 ratio = 4;
inline void SCTortoiseExplode::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::ratio() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTortoiseExplode.ratio)
  return _internal_ratio();
}
inline void SCTortoiseExplode::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCTortoiseExplode::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTortoiseExplode.ratio)
}

// int32 max_effect = 5;
inline void SCTortoiseExplode::clear_max_effect() {
  max_effect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::_internal_max_effect() const {
  return max_effect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTortoiseExplode::max_effect() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTortoiseExplode.max_effect)
  return _internal_max_effect();
}
inline void SCTortoiseExplode::_internal_set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_effect_ = value;
}
inline void SCTortoiseExplode::set_max_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_effect(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTortoiseExplode.max_effect)
}

// bool is_double = 6;
inline void SCTortoiseExplode::clear_is_double() {
  is_double_ = false;
}
inline bool SCTortoiseExplode::_internal_is_double() const {
  return is_double_;
}
inline bool SCTortoiseExplode::is_double() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCTortoiseExplode.is_double)
  return _internal_is_double();
}
inline void SCTortoiseExplode::_internal_set_is_double(bool value) {
  
  is_double_ = value;
}
inline void SCTortoiseExplode::set_is_double(bool value) {
  _internal_set_is_double(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCTortoiseExplode.is_double)
}

// -------------------------------------------------------------------

// CSBuyGun

// int32 gun_level = 1;
inline void CSBuyGun::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyGun::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyGun::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBuyGun.gun_level)
  return _internal_gun_level();
}
inline void CSBuyGun::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void CSBuyGun::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBuyGun.gun_level)
}

// -------------------------------------------------------------------

// SCBuyGun

// bool is_buy = 1;
inline void SCBuyGun::clear_is_buy() {
  is_buy_ = false;
}
inline bool SCBuyGun::_internal_is_buy() const {
  return is_buy_;
}
inline bool SCBuyGun::is_buy() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBuyGun.is_buy)
  return _internal_is_buy();
}
inline void SCBuyGun::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void SCBuyGun::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBuyGun.is_buy)
}

// int32 gun_level = 2;
inline void SCBuyGun::clear_gun_level() {
  gun_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyGun::_internal_gun_level() const {
  return gun_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyGun::gun_level() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBuyGun.gun_level)
  return _internal_gun_level();
}
inline void SCBuyGun::_internal_set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gun_level_ = value;
}
inline void SCBuyGun::set_gun_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gun_level(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBuyGun.gun_level)
}

// -------------------------------------------------------------------

// SCWaterDropInfo

// bool enable = 1;
inline void SCWaterDropInfo::clear_enable() {
  enable_ = false;
}
inline bool SCWaterDropInfo::_internal_enable() const {
  return enable_;
}
inline bool SCWaterDropInfo::enable() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCWaterDropInfo.enable)
  return _internal_enable();
}
inline void SCWaterDropInfo::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SCWaterDropInfo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCWaterDropInfo.enable)
}

// int32 drop_count = 2;
inline void SCWaterDropInfo::clear_drop_count() {
  drop_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::_internal_drop_count() const {
  return drop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::drop_count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCWaterDropInfo.drop_count)
  return _internal_drop_count();
}
inline void SCWaterDropInfo::_internal_set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drop_count_ = value;
}
inline void SCWaterDropInfo::set_drop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drop_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCWaterDropInfo.drop_count)
}

// int32 fragment_count = 3;
inline void SCWaterDropInfo::clear_fragment_count() {
  fragment_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::_internal_fragment_count() const {
  return fragment_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCWaterDropInfo::fragment_count() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCWaterDropInfo.fragment_count)
  return _internal_fragment_count();
}
inline void SCWaterDropInfo::_internal_set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fragment_count_ = value;
}
inline void SCWaterDropInfo::set_fragment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment_count(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCWaterDropInfo.fragment_count)
}

// -------------------------------------------------------------------

// CSBuyWings

// int32 wings_id = 1;
inline void CSBuyWings::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyWings::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSBuyWings::wings_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSBuyWings.wings_id)
  return _internal_wings_id();
}
inline void CSBuyWings::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void CSBuyWings::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSBuyWings.wings_id)
}

// -------------------------------------------------------------------

// SCBuyWings

// int32 wings_id = 1;
inline void SCBuyWings::clear_wings_id() {
  wings_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::_internal_wings_id() const {
  return wings_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCBuyWings::wings_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBuyWings.wings_id)
  return _internal_wings_id();
}
inline void SCBuyWings::_internal_set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_id_ = value;
}
inline void SCBuyWings::set_wings_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBuyWings.wings_id)
}

// bool is_buy = 2;
inline void SCBuyWings::clear_is_buy() {
  is_buy_ = false;
}
inline bool SCBuyWings::_internal_is_buy() const {
  return is_buy_;
}
inline bool SCBuyWings::is_buy() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBuyWings.is_buy)
  return _internal_is_buy();
}
inline void SCBuyWings::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void SCBuyWings::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBuyWings.is_buy)
}

// -------------------------------------------------------------------

// CSSetWings

// int32 wings_prop_id = 1;
inline void CSSetWings::clear_wings_prop_id() {
  wings_prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetWings::_internal_wings_prop_id() const {
  return wings_prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSSetWings::wings_prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSSetWings.wings_prop_id)
  return _internal_wings_prop_id();
}
inline void CSSetWings::_internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_prop_id_ = value;
}
inline void CSSetWings::set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSSetWings.wings_prop_id)
}

// -------------------------------------------------------------------

// SCSetWings

// int32 chair_idx = 1;
inline void SCSetWings::clear_chair_idx() {
  chair_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_chair_idx() const {
  return chair_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::chair_idx() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetWings.chair_idx)
  return _internal_chair_idx();
}
inline void SCSetWings::_internal_set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_idx_ = value;
}
inline void SCSetWings::set_chair_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_idx(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetWings.chair_idx)
}

// int32 wings_prop_id = 2;
inline void SCSetWings::clear_wings_prop_id() {
  wings_prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_wings_prop_id() const {
  return wings_prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::wings_prop_id() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetWings.wings_prop_id)
  return _internal_wings_prop_id();
}
inline void SCSetWings::_internal_set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wings_prop_id_ = value;
}
inline void SCSetWings::set_wings_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wings_prop_id(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetWings.wings_prop_id)
}

// int32 code = 3;
inline void SCSetWings::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSetWings::code() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCSetWings.code)
  return _internal_code();
}
inline void SCSetWings::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SCSetWings::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCSetWings.code)
}

// -------------------------------------------------------------------

// SCBeKicked

// .BYDLD.BeKickedReason reason = 1;
inline void SCBeKicked::clear_reason() {
  reason_ = 0;
}
inline ::BYDLD::BeKickedReason SCBeKicked::_internal_reason() const {
  return static_cast< ::BYDLD::BeKickedReason >(reason_);
}
inline ::BYDLD::BeKickedReason SCBeKicked::reason() const {
  // @@protoc_insertion_point(field_get:BYDLD.SCBeKicked.reason)
  return _internal_reason();
}
inline void SCBeKicked::_internal_set_reason(::BYDLD::BeKickedReason value) {
  
  reason_ = value;
}
inline void SCBeKicked::set_reason(::BYDLD::BeKickedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:BYDLD.SCBeKicked.reason)
}

// -------------------------------------------------------------------

// CSClientTimeValidate

// int32 timestamp = 1;
inline void CSClientTimeValidate::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSClientTimeValidate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSClientTimeValidate::timestamp() const {
  // @@protoc_insertion_point(field_get:BYDLD.CSClientTimeValidate.timestamp)
  return _internal_timestamp();
}
inline void CSClientTimeValidate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void CSClientTimeValidate::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:BYDLD.CSClientTimeValidate.timestamp)
}

// -------------------------------------------------------------------

// SCClientTimeValidate

// -------------------------------------------------------------------

// CSChangeTable

// -------------------------------------------------------------------

// SCChangeTable

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BYDLD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BYDLD::GameCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::GameCommand>() {
  return ::BYDLD::GameCommand_descriptor();
}
template <> struct is_proto_enum< ::BYDLD::ErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::ErrCode>() {
  return ::BYDLD::ErrCode_descriptor();
}
template <> struct is_proto_enum< ::BYDLD::ItemName> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::ItemName>() {
  return ::BYDLD::ItemName_descriptor();
}
template <> struct is_proto_enum< ::BYDLD::AztecGemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::AztecGemType>() {
  return ::BYDLD::AztecGemType_descriptor();
}
template <> struct is_proto_enum< ::BYDLD::ChestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::ChestType>() {
  return ::BYDLD::ChestType_descriptor();
}
template <> struct is_proto_enum< ::BYDLD::ChestAutoSelectOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::ChestAutoSelectOption>() {
  return ::BYDLD::ChestAutoSelectOption_descriptor();
}
template <> struct is_proto_enum< ::BYDLD::BeKickedReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BYDLD::BeKickedReason>() {
  return ::BYDLD::BeKickedReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BYDLD_2eproto
