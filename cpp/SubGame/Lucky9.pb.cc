// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lucky9.proto

#include "Lucky9.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Lucky9_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgEndPlayerInfo_Lucky9_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Lucky9_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgHandCards_Lucky9_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Lucky9_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgPlayerInfo_Lucky9_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Lucky9_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgSendCardInfo_Lucky9_2eproto;
namespace Lucky9 {
class LCMsgTableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgTableState> _instance;
} _LCMsgTableState_default_instance_;
class LCMsgHandCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgHandCards> _instance;
} _LCMsgHandCards_default_instance_;
class LCMsgPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgPlayerInfo> _instance;
} _LCMsgPlayerInfo_default_instance_;
class LCMsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgSceneInfo> _instance;
} _LCMsgSceneInfo_default_instance_;
class LCMsgGameStartRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgGameStartResp> _instance;
} _LCMsgGameStartResp_default_instance_;
class LCMsgNotifyActionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgNotifyActionResp> _instance;
} _LCMsgNotifyActionResp_default_instance_;
class LCMsgActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgAction> _instance;
} _LCMsgAction_default_instance_;
class LCMsgActionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgActionResp> _instance;
} _LCMsgActionResp_default_instance_;
class LCMsgSendCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgSendCardInfo> _instance;
} _LCMsgSendCardInfo_default_instance_;
class LCMsgSendCardRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgSendCardResp> _instance;
} _LCMsgSendCardResp_default_instance_;
class LCMsgEndPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgEndPlayerInfo> _instance;
} _LCMsgEndPlayerInfo_default_instance_;
class LCMsgGameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgGameResult> _instance;
} _LCMsgGameResult_default_instance_;
class LCMsgNotifyPlayerActDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCMsgNotifyPlayerAct> _instance;
} _LCMsgNotifyPlayerAct_default_instance_;
}  // namespace Lucky9
static void InitDefaultsscc_info_LCMsgAction_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgAction_default_instance_;
    new (ptr) ::Lucky9::LCMsgAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgAction_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgAction_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgActionResp_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgActionResp_default_instance_;
    new (ptr) ::Lucky9::LCMsgActionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgActionResp_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgActionResp_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgEndPlayerInfo_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgEndPlayerInfo_default_instance_;
    new (ptr) ::Lucky9::LCMsgEndPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgEndPlayerInfo_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgEndPlayerInfo_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgGameResult_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgGameResult_default_instance_;
    new (ptr) ::Lucky9::LCMsgGameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgGameResult_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LCMsgGameResult_Lucky9_2eproto}, {
      &scc_info_LCMsgEndPlayerInfo_Lucky9_2eproto.base,}};

static void InitDefaultsscc_info_LCMsgGameStartResp_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgGameStartResp_default_instance_;
    new (ptr) ::Lucky9::LCMsgGameStartResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgGameStartResp_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgGameStartResp_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgHandCards_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgHandCards_default_instance_;
    new (ptr) ::Lucky9::LCMsgHandCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgHandCards_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgHandCards_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgNotifyActionResp_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgNotifyActionResp_default_instance_;
    new (ptr) ::Lucky9::LCMsgNotifyActionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgNotifyActionResp_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgNotifyActionResp_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgNotifyPlayerAct_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgNotifyPlayerAct_default_instance_;
    new (ptr) ::Lucky9::LCMsgNotifyPlayerAct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgNotifyPlayerAct_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgNotifyPlayerAct_Lucky9_2eproto}, {}};

static void InitDefaultsscc_info_LCMsgPlayerInfo_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgPlayerInfo_default_instance_;
    new (ptr) ::Lucky9::LCMsgPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgPlayerInfo_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LCMsgPlayerInfo_Lucky9_2eproto}, {
      &scc_info_LCMsgHandCards_Lucky9_2eproto.base,}};

static void InitDefaultsscc_info_LCMsgSceneInfo_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgSceneInfo_default_instance_;
    new (ptr) ::Lucky9::LCMsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgSceneInfo_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LCMsgSceneInfo_Lucky9_2eproto}, {
      &scc_info_LCMsgPlayerInfo_Lucky9_2eproto.base,}};

static void InitDefaultsscc_info_LCMsgSendCardInfo_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgSendCardInfo_default_instance_;
    new (ptr) ::Lucky9::LCMsgSendCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgSendCardInfo_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LCMsgSendCardInfo_Lucky9_2eproto}, {
      &scc_info_LCMsgHandCards_Lucky9_2eproto.base,}};

static void InitDefaultsscc_info_LCMsgSendCardResp_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgSendCardResp_default_instance_;
    new (ptr) ::Lucky9::LCMsgSendCardResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LCMsgSendCardResp_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LCMsgSendCardResp_Lucky9_2eproto}, {
      &scc_info_LCMsgSendCardInfo_Lucky9_2eproto.base,}};

static void InitDefaultsscc_info_LCMsgTableState_Lucky9_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lucky9::_LCMsgTableState_default_instance_;
    new (ptr) ::Lucky9::LCMsgTableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCMsgTableState_Lucky9_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCMsgTableState_Lucky9_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Lucky9_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Lucky9_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Lucky9_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Lucky9_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgTableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgTableState, state_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgTableState, out_ime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgHandCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgHandCards, type_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgHandCards, card_sum_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgHandCards, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, play_status_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, player_bet_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, card_type_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, get_card_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, win_gold_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, win_conut_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgPlayerInfo, handls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, cell_score_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, table_state_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, table_ronud_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, total_enter_gold_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, one_card_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, banker_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, out_time_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, total_time_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSceneInfo, player_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameStartResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameStartResp, total_enter_gold_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameStartResp, cur_enter_gold_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameStartResp, banker_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameStartResp, one_card_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameStartResp, play_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgNotifyActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgNotifyActionResp, current_act_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgNotifyActionResp, oper_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgAction, act_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgAction, bet_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgActionResp, act_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgActionResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgActionResp, bet_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSendCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSendCardInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSendCardInfo, hand_cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSendCardResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgSendCardResp, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgEndPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgEndPlayerInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgEndPlayerInfo, game_score_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgEndPlayerInfo, tax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameResult, bisect_gold_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameResult, bisect_list_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgGameResult, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgNotifyPlayerAct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgNotifyPlayerAct, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Lucky9::LCMsgNotifyPlayerAct, act_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Lucky9::LCMsgTableState)},
  { 7, -1, sizeof(::Lucky9::LCMsgHandCards)},
  { 15, -1, sizeof(::Lucky9::LCMsgPlayerInfo)},
  { 29, -1, sizeof(::Lucky9::LCMsgSceneInfo)},
  { 43, -1, sizeof(::Lucky9::LCMsgGameStartResp)},
  { 53, -1, sizeof(::Lucky9::LCMsgNotifyActionResp)},
  { 60, -1, sizeof(::Lucky9::LCMsgAction)},
  { 67, -1, sizeof(::Lucky9::LCMsgActionResp)},
  { 75, -1, sizeof(::Lucky9::LCMsgSendCardInfo)},
  { 82, -1, sizeof(::Lucky9::LCMsgSendCardResp)},
  { 88, -1, sizeof(::Lucky9::LCMsgEndPlayerInfo)},
  { 96, -1, sizeof(::Lucky9::LCMsgGameResult)},
  { 104, -1, sizeof(::Lucky9::LCMsgNotifyPlayerAct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgTableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgHandCards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgGameStartResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgNotifyActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgSendCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgSendCardResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgEndPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgGameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Lucky9::_LCMsgNotifyPlayerAct_default_instance_),
};

const char descriptor_table_protodef_Lucky9_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Lucky9.proto\022\006Lucky9\"1\n\017LCMsgTableStat"
  "e\022\r\n\005state\030\001 \001(\005\022\017\n\007out_ime\030\002 \001(\005\"\?\n\016LCM"
  "sgHandCards\022\014\n\004type\030\001 \001(\005\022\020\n\010card_sum\030\002 "
  "\001(\005\022\r\n\005cards\030\003 \003(\005\"\314\001\n\017LCMsgPlayerInfo\022\020"
  "\n\010chair_id\030\001 \001(\005\022\023\n\013play_status\030\002 \001(\005\022\022\n"
  "\nplayer_bet\030\003 \001(\003\022\021\n\tcard_type\030\004 \001(\005\022\020\n\010"
  "get_card\030\005 \001(\005\022\014\n\004gold\030\006 \001(\003\022\020\n\010win_gold"
  "\030\007 \001(\003\022\021\n\twin_conut\030\010 \001(\003\022&\n\006handls\030\t \001("
  "\0132\026.Lucky9.LCMsgHandCards\"\350\001\n\016LCMsgScene"
  "Info\022\022\n\ncell_score\030\001 \001(\003\022\023\n\013table_state\030"
  "\002 \001(\005\022\023\n\013table_ronud\030\003 \001(\005\022\030\n\020total_ente"
  "r_gold\030\004 \001(\003\022\020\n\010one_card\030\005 \001(\005\022\027\n\017banker"
  "_chair_id\030\n \001(\005\022\020\n\010out_time\030\013 \001(\005\022\022\n\ntot"
  "al_time\030\014 \001(\005\022-\n\014player_infos\030\017 \003(\0132\027.Lu"
  "cky9.LCMsgPlayerInfo\"\205\001\n\022LCMsgGameStartR"
  "esp\022\030\n\020total_enter_gold\030\002 \001(\005\022\026\n\016cur_ent"
  "er_gold\030\003 \001(\005\022\027\n\017banker_chair_id\030\004 \001(\005\022\020"
  "\n\010one_card\030\005 \001(\005\022\022\n\nplay_index\030\010 \003(\005\"\?\n\025"
  "LCMsgNotifyActionResp\022\023\n\013current_act\030\003 \001"
  "(\005\022\021\n\toper_time\030\004 \001(\005\"-\n\013LCMsgAction\022\013\n\003"
  "act\030\001 \001(\005\022\021\n\tbet_score\030\002 \001(\003\"C\n\017LCMsgAct"
  "ionResp\022\013\n\003act\030\001 \001(\005\022\020\n\010chair_id\030\002 \001(\005\022\021"
  "\n\tbet_score\030\003 \001(\003\"Q\n\021LCMsgSendCardInfo\022\020"
  "\n\010chair_id\030\001 \001(\005\022*\n\nhand_cards\030\002 \001(\0132\026.L"
  "ucky9.LCMsgHandCards\"=\n\021LCMsgSendCardRes"
  "p\022(\n\005infos\030\001 \003(\0132\031.Lucky9.LCMsgSendCardI"
  "nfo\"G\n\022LCMsgEndPlayerInfo\022\020\n\010chair_id\030\001 "
  "\001(\005\022\022\n\ngame_score\030\002 \001(\003\022\013\n\003tax\030\003 \001(\003\"h\n\017"
  "LCMsgGameResult\022\023\n\013bisect_gold\030\001 \001(\003\022\023\n\013"
  "bisect_list\030\002 \003(\005\022+\n\007players\030\003 \003(\0132\032.Luc"
  "ky9.LCMsgEndPlayerInfo\"5\n\024LCMsgNotifyPla"
  "yerAct\022\020\n\010chair_id\030\001 \001(\005\022\013\n\003act\030\002 \001(\005*\235\001"
  "\n\017ELCMsgGameState\022\020\n\014GS_LC9_READY\020\000\022\020\n\014G"
  "S_LC9_START\020\001\022\016\n\nGS_LC9_BET\020\002\022\024\n\020GS_LC9_"
  "SEND_CARD\020\003\022\023\n\017GS_LC9_GET_CARD\020\004\022\030\n\024GS_L"
  "C9_TWO_SEND_CARD\020\005\022\021\n\rGS_LC9_RESULT\020\006*>\n"
  "\021ELCMsgPlayerState\022\014\n\010PS_READY\020\000\022\013\n\007PS_P"
  "LAY\020\001\022\016\n\nPS_TIMEOUT\020\002*)\n\016ELCMsgCardType\022"
  "\r\n\tLC_SINGLE\020\000\022\010\n\004LC_9\020\001*G\n\020ELCMsgGameAc"
  "tion\022\r\n\tInvaldAct\020\000\022\n\n\006AddBet\020\001\022\013\n\007GetCa"
  "rd\020\002\022\013\n\007NotCard\020\004*\230\004\n\017ELCMsgIDSubGame\022\025\n"
  "\021MsgIDSubGame_Null\020\000\022\036\n\032MsgIDSubGame_Gam"
  "eStartResp\020\001\022!\n\035MsgIDSubGame_NotifyActio"
  "nResp\020\002\022\027\n\023MsgIDSubGame_Action\020\003\022\033\n\027MsgI"
  "DSubGame_ActionResp\020\004\022\035\n\031MsgIDSubGame_Se"
  "ndCardResp\020\005\022\037\n\033MsgIDSubGame_GameResultR"
  "esp\020\t\022 \n\034MsgIDSubGame_NotifyStateResp\020\n\022"
  "\034\n\030MsgIDSubGame_TimeOutResp\020\013\022\035\n\031MsgIDSu"
  "bGame_TimeOutReady\020\014\022!\n\035MsgIDSubGame_Tim"
  "eOutReadyResp\020\r\022 \n\034MsgIDSubGame_TimeOutK"
  "ickResp\020\016\022&\n\"MsgIDSubGame_NotifySystemCh"
  "eatResp\020\024\022#\n\037MsgIDSubGame_NotifyCardType"
  "Resp\020\025\022 \n\034MsgIDSubGame_NotifyIsMaxResp\020\026"
  "\022\"\n\036MsgIDSubGame_NotifyLastActResp\020\027b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Lucky9_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Lucky9_2eproto_sccs[13] = {
  &scc_info_LCMsgAction_Lucky9_2eproto.base,
  &scc_info_LCMsgActionResp_Lucky9_2eproto.base,
  &scc_info_LCMsgEndPlayerInfo_Lucky9_2eproto.base,
  &scc_info_LCMsgGameResult_Lucky9_2eproto.base,
  &scc_info_LCMsgGameStartResp_Lucky9_2eproto.base,
  &scc_info_LCMsgHandCards_Lucky9_2eproto.base,
  &scc_info_LCMsgNotifyActionResp_Lucky9_2eproto.base,
  &scc_info_LCMsgNotifyPlayerAct_Lucky9_2eproto.base,
  &scc_info_LCMsgPlayerInfo_Lucky9_2eproto.base,
  &scc_info_LCMsgSceneInfo_Lucky9_2eproto.base,
  &scc_info_LCMsgSendCardInfo_Lucky9_2eproto.base,
  &scc_info_LCMsgSendCardResp_Lucky9_2eproto.base,
  &scc_info_LCMsgTableState_Lucky9_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Lucky9_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Lucky9_2eproto = {
  false, false, descriptor_table_protodef_Lucky9_2eproto, "Lucky9.proto", 2164,
  &descriptor_table_Lucky9_2eproto_once, descriptor_table_Lucky9_2eproto_sccs, descriptor_table_Lucky9_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_Lucky9_2eproto::offsets,
  file_level_metadata_Lucky9_2eproto, 13, file_level_enum_descriptors_Lucky9_2eproto, file_level_service_descriptors_Lucky9_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Lucky9_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Lucky9_2eproto)), true);
namespace Lucky9 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELCMsgGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Lucky9_2eproto);
  return file_level_enum_descriptors_Lucky9_2eproto[0];
}
bool ELCMsgGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELCMsgPlayerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Lucky9_2eproto);
  return file_level_enum_descriptors_Lucky9_2eproto[1];
}
bool ELCMsgPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELCMsgCardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Lucky9_2eproto);
  return file_level_enum_descriptors_Lucky9_2eproto[2];
}
bool ELCMsgCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELCMsgGameAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Lucky9_2eproto);
  return file_level_enum_descriptors_Lucky9_2eproto[3];
}
bool ELCMsgGameAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELCMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Lucky9_2eproto);
  return file_level_enum_descriptors_Lucky9_2eproto[4];
}
bool ELCMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LCMsgTableState::_Internal {
 public:
};

LCMsgTableState::LCMsgTableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgTableState)
}
LCMsgTableState::LCMsgTableState(const LCMsgTableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgTableState)
}

void LCMsgTableState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
}

LCMsgTableState::~LCMsgTableState() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgTableState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgTableState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgTableState::ArenaDtor(void* object) {
  LCMsgTableState* _this = reinterpret_cast< LCMsgTableState* >(object);
  (void)_this;
}
void LCMsgTableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgTableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgTableState& LCMsgTableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgTableState_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgTableState::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgTableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_ime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_ime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgTableState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_ime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgTableState)
  return target;
}

size_t LCMsgTableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgTableState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_ime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgTableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgTableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgTableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgTableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgTableState)
    MergeFrom(*source);
  }
}

void LCMsgTableState::MergeFrom(const LCMsgTableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.out_ime() != 0) {
    _internal_set_out_ime(from._internal_out_ime());
  }
}

void LCMsgTableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgTableState::CopyFrom(const LCMsgTableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgTableState::IsInitialized() const {
  return true;
}

void LCMsgTableState::InternalSwap(LCMsgTableState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgTableState, out_ime_)
      + sizeof(LCMsgTableState::out_ime_)
      - PROTOBUF_FIELD_OFFSET(LCMsgTableState, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgTableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgHandCards::_Internal {
 public:
};

LCMsgHandCards::LCMsgHandCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgHandCards)
}
LCMsgHandCards::LCMsgHandCards(const LCMsgHandCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_sum_) -
    reinterpret_cast<char*>(&type_)) + sizeof(card_sum_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgHandCards)
}

void LCMsgHandCards::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&card_sum_) -
      reinterpret_cast<char*>(&type_)) + sizeof(card_sum_));
}

LCMsgHandCards::~LCMsgHandCards() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgHandCards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgHandCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgHandCards::ArenaDtor(void* object) {
  LCMsgHandCards* _this = reinterpret_cast< LCMsgHandCards* >(object);
  (void)_this;
}
void LCMsgHandCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgHandCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgHandCards& LCMsgHandCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgHandCards_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgHandCards::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_sum_) -
      reinterpret_cast<char*>(&type_)) + sizeof(card_sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgHandCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          card_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgHandCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 card_sum = 2;
  if (this->card_sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_card_sum(), target);
  }

  // repeated int32 cards = 3;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgHandCards)
  return target;
}

size_t LCMsgHandCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgHandCards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cards = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 card_sum = 2;
  if (this->card_sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_sum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgHandCards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgHandCards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgHandCards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgHandCards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgHandCards)
    MergeFrom(*source);
  }
}

void LCMsgHandCards::MergeFrom(const LCMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.card_sum() != 0) {
    _internal_set_card_sum(from._internal_card_sum());
  }
}

void LCMsgHandCards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgHandCards::CopyFrom(const LCMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgHandCards::IsInitialized() const {
  return true;
}

void LCMsgHandCards::InternalSwap(LCMsgHandCards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgHandCards, card_sum_)
      + sizeof(LCMsgHandCards::card_sum_)
      - PROTOBUF_FIELD_OFFSET(LCMsgHandCards, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgHandCards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgPlayerInfo::_Internal {
 public:
  static const ::Lucky9::LCMsgHandCards& handls(const LCMsgPlayerInfo* msg);
};

const ::Lucky9::LCMsgHandCards&
LCMsgPlayerInfo::_Internal::handls(const LCMsgPlayerInfo* msg) {
  return *msg->handls_;
}
LCMsgPlayerInfo::LCMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgPlayerInfo)
}
LCMsgPlayerInfo::LCMsgPlayerInfo(const LCMsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handls()) {
    handls_ = new ::Lucky9::LCMsgHandCards(*from.handls_);
  } else {
    handls_ = nullptr;
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_conut_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(win_conut_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgPlayerInfo)
}

void LCMsgPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LCMsgPlayerInfo_Lucky9_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&handls_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&win_conut_) -
      reinterpret_cast<char*>(&handls_)) + sizeof(win_conut_));
}

LCMsgPlayerInfo::~LCMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete handls_;
}

void LCMsgPlayerInfo::ArenaDtor(void* object) {
  LCMsgPlayerInfo* _this = reinterpret_cast< LCMsgPlayerInfo* >(object);
  (void)_this;
}
void LCMsgPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgPlayerInfo& LCMsgPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgPlayerInfo_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && handls_ != nullptr) {
    delete handls_;
  }
  handls_ = nullptr;
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_conut_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(win_conut_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          play_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 player_bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          player_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          get_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_conut = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          win_conut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Lucky9.LCMsgHandCards handls = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_handls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 play_status = 2;
  if (this->play_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_play_status(), target);
  }

  // int64 player_bet = 3;
  if (this->player_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_player_bet(), target);
  }

  // int32 card_type = 4;
  if (this->card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_card_type(), target);
  }

  // int32 get_card = 5;
  if (this->get_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_get_card(), target);
  }

  // int64 gold = 6;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gold(), target);
  }

  // int64 win_gold = 7;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_win_gold(), target);
  }

  // int64 win_conut = 8;
  if (this->win_conut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_win_conut(), target);
  }

  // .Lucky9.LCMsgHandCards handls = 9;
  if (this->has_handls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::handls(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgPlayerInfo)
  return target;
}

size_t LCMsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Lucky9.LCMsgHandCards handls = 9;
  if (this->has_handls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handls_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 play_status = 2;
  if (this->play_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_status());
  }

  // int64 player_bet = 3;
  if (this->player_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_player_bet());
  }

  // int32 card_type = 4;
  if (this->card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_type());
  }

  // int32 get_card = 5;
  if (this->get_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_card());
  }

  // int64 gold = 6;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 win_gold = 7;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int64 win_conut = 8;
  if (this->win_conut() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_conut());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgPlayerInfo)
    MergeFrom(*source);
  }
}

void LCMsgPlayerInfo::MergeFrom(const LCMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handls()) {
    _internal_mutable_handls()->::Lucky9::LCMsgHandCards::MergeFrom(from._internal_handls());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.play_status() != 0) {
    _internal_set_play_status(from._internal_play_status());
  }
  if (from.player_bet() != 0) {
    _internal_set_player_bet(from._internal_player_bet());
  }
  if (from.card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
  if (from.get_card() != 0) {
    _internal_set_get_card(from._internal_get_card());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.win_conut() != 0) {
    _internal_set_win_conut(from._internal_win_conut());
  }
}

void LCMsgPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgPlayerInfo::CopyFrom(const LCMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgPlayerInfo::IsInitialized() const {
  return true;
}

void LCMsgPlayerInfo::InternalSwap(LCMsgPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgPlayerInfo, win_conut_)
      + sizeof(LCMsgPlayerInfo::win_conut_)
      - PROTOBUF_FIELD_OFFSET(LCMsgPlayerInfo, handls_)>(
          reinterpret_cast<char*>(&handls_),
          reinterpret_cast<char*>(&other->handls_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgSceneInfo::_Internal {
 public:
};

LCMsgSceneInfo::LCMsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgSceneInfo)
}
LCMsgSceneInfo::LCMsgSceneInfo(const LCMsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_score_, &from.cell_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&cell_score_)) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgSceneInfo)
}

void LCMsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LCMsgSceneInfo_Lucky9_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cell_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&cell_score_)) + sizeof(total_time_));
}

LCMsgSceneInfo::~LCMsgSceneInfo() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgSceneInfo::ArenaDtor(void* object) {
  LCMsgSceneInfo* _this = reinterpret_cast< LCMsgSceneInfo* >(object);
  (void)_this;
}
void LCMsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgSceneInfo& LCMsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgSceneInfo_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_infos_.Clear();
  ::memset(&cell_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&cell_score_)) + sizeof(total_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 cell_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cell_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_ronud = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          table_ronud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_enter_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_enter_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 one_card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          one_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_chair_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          banker_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Lucky9.LCMsgPlayerInfo player_infos = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cell_score = 1;
  if (this->cell_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cell_score(), target);
  }

  // int32 table_state = 2;
  if (this->table_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_state(), target);
  }

  // int32 table_ronud = 3;
  if (this->table_ronud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_table_ronud(), target);
  }

  // int64 total_enter_gold = 4;
  if (this->total_enter_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_enter_gold(), target);
  }

  // int32 one_card = 5;
  if (this->one_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_one_card(), target);
  }

  // int32 banker_chair_id = 10;
  if (this->banker_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_banker_chair_id(), target);
  }

  // int32 out_time = 11;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_out_time(), target);
  }

  // int32 total_time = 12;
  if (this->total_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_total_time(), target);
  }

  // repeated .Lucky9.LCMsgPlayerInfo player_infos = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_player_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgSceneInfo)
  return target;
}

size_t LCMsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Lucky9.LCMsgPlayerInfo player_infos = 15;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 cell_score = 1;
  if (this->cell_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cell_score());
  }

  // int32 table_state = 2;
  if (this->table_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_state());
  }

  // int32 table_ronud = 3;
  if (this->table_ronud() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_ronud());
  }

  // int64 total_enter_gold = 4;
  if (this->total_enter_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_enter_gold());
  }

  // int32 one_card = 5;
  if (this->one_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_one_card());
  }

  // int32 banker_chair_id = 10;
  if (this->banker_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_chair_id());
  }

  // int32 out_time = 11;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_time());
  }

  // int32 total_time = 12;
  if (this->total_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgSceneInfo)
    MergeFrom(*source);
  }
}

void LCMsgSceneInfo::MergeFrom(const LCMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
  if (from.cell_score() != 0) {
    _internal_set_cell_score(from._internal_cell_score());
  }
  if (from.table_state() != 0) {
    _internal_set_table_state(from._internal_table_state());
  }
  if (from.table_ronud() != 0) {
    _internal_set_table_ronud(from._internal_table_ronud());
  }
  if (from.total_enter_gold() != 0) {
    _internal_set_total_enter_gold(from._internal_total_enter_gold());
  }
  if (from.one_card() != 0) {
    _internal_set_one_card(from._internal_one_card());
  }
  if (from.banker_chair_id() != 0) {
    _internal_set_banker_chair_id(from._internal_banker_chair_id());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
  if (from.total_time() != 0) {
    _internal_set_total_time(from._internal_total_time());
  }
}

void LCMsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgSceneInfo::CopyFrom(const LCMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgSceneInfo::IsInitialized() const {
  return true;
}

void LCMsgSceneInfo::InternalSwap(LCMsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_infos_.InternalSwap(&other->player_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgSceneInfo, total_time_)
      + sizeof(LCMsgSceneInfo::total_time_)
      - PROTOBUF_FIELD_OFFSET(LCMsgSceneInfo, cell_score_)>(
          reinterpret_cast<char*>(&cell_score_),
          reinterpret_cast<char*>(&other->cell_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgGameStartResp::_Internal {
 public:
};

LCMsgGameStartResp::LCMsgGameStartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  play_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgGameStartResp)
}
LCMsgGameStartResp::LCMsgGameStartResp(const LCMsgGameStartResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      play_index_(from.play_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_enter_gold_, &from.total_enter_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&one_card_) -
    reinterpret_cast<char*>(&total_enter_gold_)) + sizeof(one_card_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgGameStartResp)
}

void LCMsgGameStartResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_enter_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&one_card_) -
      reinterpret_cast<char*>(&total_enter_gold_)) + sizeof(one_card_));
}

LCMsgGameStartResp::~LCMsgGameStartResp() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgGameStartResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgGameStartResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgGameStartResp::ArenaDtor(void* object) {
  LCMsgGameStartResp* _this = reinterpret_cast< LCMsgGameStartResp* >(object);
  (void)_this;
}
void LCMsgGameStartResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgGameStartResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgGameStartResp& LCMsgGameStartResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgGameStartResp_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgGameStartResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_index_.Clear();
  ::memset(&total_enter_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&one_card_) -
      reinterpret_cast<char*>(&total_enter_gold_)) + sizeof(one_card_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgGameStartResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_enter_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_enter_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_enter_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_enter_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_chair_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          banker_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 one_card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          one_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 play_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_play_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_play_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgGameStartResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_enter_gold = 2;
  if (this->total_enter_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_enter_gold(), target);
  }

  // int32 cur_enter_gold = 3;
  if (this->cur_enter_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_enter_gold(), target);
  }

  // int32 banker_chair_id = 4;
  if (this->banker_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_banker_chair_id(), target);
  }

  // int32 one_card = 5;
  if (this->one_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_one_card(), target);
  }

  // repeated int32 play_index = 8;
  {
    int byte_size = _play_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_play_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgGameStartResp)
  return target;
}

size_t LCMsgGameStartResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgGameStartResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 play_index = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->play_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _play_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 total_enter_gold = 2;
  if (this->total_enter_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_enter_gold());
  }

  // int32 cur_enter_gold = 3;
  if (this->cur_enter_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_enter_gold());
  }

  // int32 banker_chair_id = 4;
  if (this->banker_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_chair_id());
  }

  // int32 one_card = 5;
  if (this->one_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_one_card());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgGameStartResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgGameStartResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgGameStartResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgGameStartResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgGameStartResp)
    MergeFrom(*source);
  }
}

void LCMsgGameStartResp::MergeFrom(const LCMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  play_index_.MergeFrom(from.play_index_);
  if (from.total_enter_gold() != 0) {
    _internal_set_total_enter_gold(from._internal_total_enter_gold());
  }
  if (from.cur_enter_gold() != 0) {
    _internal_set_cur_enter_gold(from._internal_cur_enter_gold());
  }
  if (from.banker_chair_id() != 0) {
    _internal_set_banker_chair_id(from._internal_banker_chair_id());
  }
  if (from.one_card() != 0) {
    _internal_set_one_card(from._internal_one_card());
  }
}

void LCMsgGameStartResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgGameStartResp::CopyFrom(const LCMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgGameStartResp::IsInitialized() const {
  return true;
}

void LCMsgGameStartResp::InternalSwap(LCMsgGameStartResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  play_index_.InternalSwap(&other->play_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgGameStartResp, one_card_)
      + sizeof(LCMsgGameStartResp::one_card_)
      - PROTOBUF_FIELD_OFFSET(LCMsgGameStartResp, total_enter_gold_)>(
          reinterpret_cast<char*>(&total_enter_gold_),
          reinterpret_cast<char*>(&other->total_enter_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgGameStartResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgNotifyActionResp::_Internal {
 public:
};

LCMsgNotifyActionResp::LCMsgNotifyActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgNotifyActionResp)
}
LCMsgNotifyActionResp::LCMsgNotifyActionResp(const LCMsgNotifyActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_act_, &from.current_act_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_time_) -
    reinterpret_cast<char*>(&current_act_)) + sizeof(oper_time_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgNotifyActionResp)
}

void LCMsgNotifyActionResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&current_act_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oper_time_) -
      reinterpret_cast<char*>(&current_act_)) + sizeof(oper_time_));
}

LCMsgNotifyActionResp::~LCMsgNotifyActionResp() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgNotifyActionResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgNotifyActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgNotifyActionResp::ArenaDtor(void* object) {
  LCMsgNotifyActionResp* _this = reinterpret_cast< LCMsgNotifyActionResp* >(object);
  (void)_this;
}
void LCMsgNotifyActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgNotifyActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgNotifyActionResp& LCMsgNotifyActionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgNotifyActionResp_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgNotifyActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_act_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_time_) -
      reinterpret_cast<char*>(&current_act_)) + sizeof(oper_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgNotifyActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 current_act = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oper_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oper_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgNotifyActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_act = 3;
  if (this->current_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_act(), target);
  }

  // int32 oper_time = 4;
  if (this->oper_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oper_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgNotifyActionResp)
  return target;
}

size_t LCMsgNotifyActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgNotifyActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 current_act = 3;
  if (this->current_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_act());
  }

  // int32 oper_time = 4;
  if (this->oper_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oper_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgNotifyActionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgNotifyActionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgNotifyActionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgNotifyActionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgNotifyActionResp)
    MergeFrom(*source);
  }
}

void LCMsgNotifyActionResp::MergeFrom(const LCMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current_act() != 0) {
    _internal_set_current_act(from._internal_current_act());
  }
  if (from.oper_time() != 0) {
    _internal_set_oper_time(from._internal_oper_time());
  }
}

void LCMsgNotifyActionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgNotifyActionResp::CopyFrom(const LCMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgNotifyActionResp::IsInitialized() const {
  return true;
}

void LCMsgNotifyActionResp::InternalSwap(LCMsgNotifyActionResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgNotifyActionResp, oper_time_)
      + sizeof(LCMsgNotifyActionResp::oper_time_)
      - PROTOBUF_FIELD_OFFSET(LCMsgNotifyActionResp, current_act_)>(
          reinterpret_cast<char*>(&current_act_),
          reinterpret_cast<char*>(&other->current_act_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgNotifyActionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgAction::_Internal {
 public:
};

LCMsgAction::LCMsgAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgAction)
}
LCMsgAction::LCMsgAction(const LCMsgAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_score_, &from.bet_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&act_) -
    reinterpret_cast<char*>(&bet_score_)) + sizeof(act_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgAction)
}

void LCMsgAction::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&bet_score_)) + sizeof(act_));
}

LCMsgAction::~LCMsgAction() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgAction::ArenaDtor(void* object) {
  LCMsgAction* _this = reinterpret_cast< LCMsgAction* >(object);
  (void)_this;
}
void LCMsgAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgAction& LCMsgAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgAction_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&bet_score_)) + sizeof(act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 act = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 act = 1;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_act(), target);
  }

  // int64 bet_score = 2;
  if (this->bet_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bet_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgAction)
  return target;
}

size_t LCMsgAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet_score = 2;
  if (this->bet_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet_score());
  }

  // int32 act = 1;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgAction)
    MergeFrom(*source);
  }
}

void LCMsgAction::MergeFrom(const LCMsgAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet_score() != 0) {
    _internal_set_bet_score(from._internal_bet_score());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
}

void LCMsgAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgAction::CopyFrom(const LCMsgAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgAction::IsInitialized() const {
  return true;
}

void LCMsgAction::InternalSwap(LCMsgAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgAction, act_)
      + sizeof(LCMsgAction::act_)
      - PROTOBUF_FIELD_OFFSET(LCMsgAction, bet_score_)>(
          reinterpret_cast<char*>(&bet_score_),
          reinterpret_cast<char*>(&other->bet_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgActionResp::_Internal {
 public:
};

LCMsgActionResp::LCMsgActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgActionResp)
}
LCMsgActionResp::LCMsgActionResp(const LCMsgActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&act_, &from.act_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_score_) -
    reinterpret_cast<char*>(&act_)) + sizeof(bet_score_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgActionResp)
}

void LCMsgActionResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&act_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_score_) -
      reinterpret_cast<char*>(&act_)) + sizeof(bet_score_));
}

LCMsgActionResp::~LCMsgActionResp() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgActionResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgActionResp::ArenaDtor(void* object) {
  LCMsgActionResp* _this = reinterpret_cast< LCMsgActionResp* >(object);
  (void)_this;
}
void LCMsgActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgActionResp& LCMsgActionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgActionResp_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&act_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_score_) -
      reinterpret_cast<char*>(&act_)) + sizeof(bet_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 act = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 act = 1;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_act(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int64 bet_score = 3;
  if (this->bet_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_bet_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgActionResp)
  return target;
}

size_t LCMsgActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 act = 1;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int64 bet_score = 3;
  if (this->bet_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgActionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgActionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgActionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgActionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgActionResp)
    MergeFrom(*source);
  }
}

void LCMsgActionResp::MergeFrom(const LCMsgActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.bet_score() != 0) {
    _internal_set_bet_score(from._internal_bet_score());
  }
}

void LCMsgActionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgActionResp::CopyFrom(const LCMsgActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgActionResp::IsInitialized() const {
  return true;
}

void LCMsgActionResp::InternalSwap(LCMsgActionResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgActionResp, bet_score_)
      + sizeof(LCMsgActionResp::bet_score_)
      - PROTOBUF_FIELD_OFFSET(LCMsgActionResp, act_)>(
          reinterpret_cast<char*>(&act_),
          reinterpret_cast<char*>(&other->act_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgActionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgSendCardInfo::_Internal {
 public:
  static const ::Lucky9::LCMsgHandCards& hand_cards(const LCMsgSendCardInfo* msg);
};

const ::Lucky9::LCMsgHandCards&
LCMsgSendCardInfo::_Internal::hand_cards(const LCMsgSendCardInfo* msg) {
  return *msg->hand_cards_;
}
LCMsgSendCardInfo::LCMsgSendCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgSendCardInfo)
}
LCMsgSendCardInfo::LCMsgSendCardInfo(const LCMsgSendCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hand_cards()) {
    hand_cards_ = new ::Lucky9::LCMsgHandCards(*from.hand_cards_);
  } else {
    hand_cards_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgSendCardInfo)
}

void LCMsgSendCardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LCMsgSendCardInfo_Lucky9_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hand_cards_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&hand_cards_)) + sizeof(chair_id_));
}

LCMsgSendCardInfo::~LCMsgSendCardInfo() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgSendCardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgSendCardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hand_cards_;
}

void LCMsgSendCardInfo::ArenaDtor(void* object) {
  LCMsgSendCardInfo* _this = reinterpret_cast< LCMsgSendCardInfo* >(object);
  (void)_this;
}
void LCMsgSendCardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgSendCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgSendCardInfo& LCMsgSendCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgSendCardInfo_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgSendCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgSendCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hand_cards_ != nullptr) {
    delete hand_cards_;
  }
  hand_cards_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgSendCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Lucky9.LCMsgHandCards hand_cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hand_cards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgSendCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgSendCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .Lucky9.LCMsgHandCards hand_cards = 2;
  if (this->has_hand_cards()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hand_cards(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgSendCardInfo)
  return target;
}

size_t LCMsgSendCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgSendCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Lucky9.LCMsgHandCards hand_cards = 2;
  if (this->has_hand_cards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hand_cards_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgSendCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgSendCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgSendCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgSendCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgSendCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgSendCardInfo)
    MergeFrom(*source);
  }
}

void LCMsgSendCardInfo::MergeFrom(const LCMsgSendCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgSendCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hand_cards()) {
    _internal_mutable_hand_cards()->::Lucky9::LCMsgHandCards::MergeFrom(from._internal_hand_cards());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void LCMsgSendCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgSendCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgSendCardInfo::CopyFrom(const LCMsgSendCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgSendCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgSendCardInfo::IsInitialized() const {
  return true;
}

void LCMsgSendCardInfo::InternalSwap(LCMsgSendCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgSendCardInfo, chair_id_)
      + sizeof(LCMsgSendCardInfo::chair_id_)
      - PROTOBUF_FIELD_OFFSET(LCMsgSendCardInfo, hand_cards_)>(
          reinterpret_cast<char*>(&hand_cards_),
          reinterpret_cast<char*>(&other->hand_cards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgSendCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgSendCardResp::_Internal {
 public:
};

LCMsgSendCardResp::LCMsgSendCardResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgSendCardResp)
}
LCMsgSendCardResp::LCMsgSendCardResp(const LCMsgSendCardResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgSendCardResp)
}

void LCMsgSendCardResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LCMsgSendCardResp_Lucky9_2eproto.base);
}

LCMsgSendCardResp::~LCMsgSendCardResp() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgSendCardResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgSendCardResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgSendCardResp::ArenaDtor(void* object) {
  LCMsgSendCardResp* _this = reinterpret_cast< LCMsgSendCardResp* >(object);
  (void)_this;
}
void LCMsgSendCardResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgSendCardResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgSendCardResp& LCMsgSendCardResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgSendCardResp_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgSendCardResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgSendCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgSendCardResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Lucky9.LCMsgSendCardInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgSendCardResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgSendCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Lucky9.LCMsgSendCardInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgSendCardResp)
  return target;
}

size_t LCMsgSendCardResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgSendCardResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Lucky9.LCMsgSendCardInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgSendCardResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgSendCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgSendCardResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgSendCardResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgSendCardResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgSendCardResp)
    MergeFrom(*source);
  }
}

void LCMsgSendCardResp::MergeFrom(const LCMsgSendCardResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgSendCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void LCMsgSendCardResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgSendCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgSendCardResp::CopyFrom(const LCMsgSendCardResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgSendCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgSendCardResp::IsInitialized() const {
  return true;
}

void LCMsgSendCardResp::InternalSwap(LCMsgSendCardResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgSendCardResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgEndPlayerInfo::_Internal {
 public:
};

LCMsgEndPlayerInfo::LCMsgEndPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgEndPlayerInfo)
}
LCMsgEndPlayerInfo::LCMsgEndPlayerInfo(const LCMsgEndPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_score_, &from.game_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&game_score_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgEndPlayerInfo)
}

void LCMsgEndPlayerInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&game_score_)) + sizeof(chair_id_));
}

LCMsgEndPlayerInfo::~LCMsgEndPlayerInfo() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgEndPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgEndPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgEndPlayerInfo::ArenaDtor(void* object) {
  LCMsgEndPlayerInfo* _this = reinterpret_cast< LCMsgEndPlayerInfo* >(object);
  (void)_this;
}
void LCMsgEndPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgEndPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgEndPlayerInfo& LCMsgEndPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgEndPlayerInfo_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgEndPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgEndPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&game_score_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgEndPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 game_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgEndPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgEndPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 game_score = 2;
  if (this->game_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_game_score(), target);
  }

  // int64 tax = 3;
  if (this->tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgEndPlayerInfo)
  return target;
}

size_t LCMsgEndPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgEndPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_score = 2;
  if (this->game_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_game_score());
  }

  // int64 tax = 3;
  if (this->tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tax());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgEndPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgEndPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgEndPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgEndPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgEndPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgEndPlayerInfo)
    MergeFrom(*source);
  }
}

void LCMsgEndPlayerInfo::MergeFrom(const LCMsgEndPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgEndPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_score() != 0) {
    _internal_set_game_score(from._internal_game_score());
  }
  if (from.tax() != 0) {
    _internal_set_tax(from._internal_tax());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void LCMsgEndPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgEndPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgEndPlayerInfo::CopyFrom(const LCMsgEndPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgEndPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgEndPlayerInfo::IsInitialized() const {
  return true;
}

void LCMsgEndPlayerInfo::InternalSwap(LCMsgEndPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgEndPlayerInfo, chair_id_)
      + sizeof(LCMsgEndPlayerInfo::chair_id_)
      - PROTOBUF_FIELD_OFFSET(LCMsgEndPlayerInfo, game_score_)>(
          reinterpret_cast<char*>(&game_score_),
          reinterpret_cast<char*>(&other->game_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgEndPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgGameResult::_Internal {
 public:
};

LCMsgGameResult::LCMsgGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bisect_list_(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgGameResult)
}
LCMsgGameResult::LCMsgGameResult(const LCMsgGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bisect_list_(from.bisect_list_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bisect_gold_ = from.bisect_gold_;
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgGameResult)
}

void LCMsgGameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LCMsgGameResult_Lucky9_2eproto.base);
  bisect_gold_ = PROTOBUF_LONGLONG(0);
}

LCMsgGameResult::~LCMsgGameResult() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgGameResult::ArenaDtor(void* object) {
  LCMsgGameResult* _this = reinterpret_cast< LCMsgGameResult* >(object);
  (void)_this;
}
void LCMsgGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgGameResult& LCMsgGameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgGameResult_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bisect_list_.Clear();
  players_.Clear();
  bisect_gold_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bisect_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bisect_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bisect_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bisect_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bisect_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Lucky9.LCMsgEndPlayerInfo players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bisect_gold = 1;
  if (this->bisect_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bisect_gold(), target);
  }

  // repeated int32 bisect_list = 2;
  {
    int byte_size = _bisect_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bisect_list(), byte_size, target);
    }
  }

  // repeated .Lucky9.LCMsgEndPlayerInfo players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgGameResult)
  return target;
}

size_t LCMsgGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bisect_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bisect_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bisect_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Lucky9.LCMsgEndPlayerInfo players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 bisect_gold = 1;
  if (this->bisect_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bisect_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgGameResult)
    MergeFrom(*source);
  }
}

void LCMsgGameResult::MergeFrom(const LCMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bisect_list_.MergeFrom(from.bisect_list_);
  players_.MergeFrom(from.players_);
  if (from.bisect_gold() != 0) {
    _internal_set_bisect_gold(from._internal_bisect_gold());
  }
}

void LCMsgGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgGameResult::CopyFrom(const LCMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgGameResult::IsInitialized() const {
  return true;
}

void LCMsgGameResult::InternalSwap(LCMsgGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bisect_list_.InternalSwap(&other->bisect_list_);
  players_.InternalSwap(&other->players_);
  swap(bisect_gold_, other->bisect_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LCMsgNotifyPlayerAct::_Internal {
 public:
};

LCMsgNotifyPlayerAct::LCMsgNotifyPlayerAct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Lucky9.LCMsgNotifyPlayerAct)
}
LCMsgNotifyPlayerAct::LCMsgNotifyPlayerAct(const LCMsgNotifyPlayerAct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&act_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
  // @@protoc_insertion_point(copy_constructor:Lucky9.LCMsgNotifyPlayerAct)
}

void LCMsgNotifyPlayerAct::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
}

LCMsgNotifyPlayerAct::~LCMsgNotifyPlayerAct() {
  // @@protoc_insertion_point(destructor:Lucky9.LCMsgNotifyPlayerAct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LCMsgNotifyPlayerAct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LCMsgNotifyPlayerAct::ArenaDtor(void* object) {
  LCMsgNotifyPlayerAct* _this = reinterpret_cast< LCMsgNotifyPlayerAct* >(object);
  (void)_this;
}
void LCMsgNotifyPlayerAct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCMsgNotifyPlayerAct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCMsgNotifyPlayerAct& LCMsgNotifyPlayerAct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCMsgNotifyPlayerAct_Lucky9_2eproto.base);
  return *internal_default_instance();
}


void LCMsgNotifyPlayerAct::Clear() {
// @@protoc_insertion_point(message_clear_start:Lucky9.LCMsgNotifyPlayerAct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCMsgNotifyPlayerAct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 act = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCMsgNotifyPlayerAct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lucky9.LCMsgNotifyPlayerAct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_act(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lucky9.LCMsgNotifyPlayerAct)
  return target;
}

size_t LCMsgNotifyPlayerAct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lucky9.LCMsgNotifyPlayerAct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 act = 2;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCMsgNotifyPlayerAct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lucky9.LCMsgNotifyPlayerAct)
  GOOGLE_DCHECK_NE(&from, this);
  const LCMsgNotifyPlayerAct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCMsgNotifyPlayerAct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lucky9.LCMsgNotifyPlayerAct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lucky9.LCMsgNotifyPlayerAct)
    MergeFrom(*source);
  }
}

void LCMsgNotifyPlayerAct::MergeFrom(const LCMsgNotifyPlayerAct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lucky9.LCMsgNotifyPlayerAct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
}

void LCMsgNotifyPlayerAct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lucky9.LCMsgNotifyPlayerAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMsgNotifyPlayerAct::CopyFrom(const LCMsgNotifyPlayerAct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lucky9.LCMsgNotifyPlayerAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMsgNotifyPlayerAct::IsInitialized() const {
  return true;
}

void LCMsgNotifyPlayerAct::InternalSwap(LCMsgNotifyPlayerAct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCMsgNotifyPlayerAct, act_)
      + sizeof(LCMsgNotifyPlayerAct::act_)
      - PROTOBUF_FIELD_OFFSET(LCMsgNotifyPlayerAct, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCMsgNotifyPlayerAct::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Lucky9
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgTableState* Arena::CreateMaybeMessage< ::Lucky9::LCMsgTableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgTableState >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgHandCards* Arena::CreateMaybeMessage< ::Lucky9::LCMsgHandCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgHandCards >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgPlayerInfo* Arena::CreateMaybeMessage< ::Lucky9::LCMsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgSceneInfo* Arena::CreateMaybeMessage< ::Lucky9::LCMsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgGameStartResp* Arena::CreateMaybeMessage< ::Lucky9::LCMsgGameStartResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgGameStartResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgNotifyActionResp* Arena::CreateMaybeMessage< ::Lucky9::LCMsgNotifyActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgNotifyActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgAction* Arena::CreateMaybeMessage< ::Lucky9::LCMsgAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgAction >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgActionResp* Arena::CreateMaybeMessage< ::Lucky9::LCMsgActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgSendCardInfo* Arena::CreateMaybeMessage< ::Lucky9::LCMsgSendCardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgSendCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgSendCardResp* Arena::CreateMaybeMessage< ::Lucky9::LCMsgSendCardResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgSendCardResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgEndPlayerInfo* Arena::CreateMaybeMessage< ::Lucky9::LCMsgEndPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgEndPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgGameResult* Arena::CreateMaybeMessage< ::Lucky9::LCMsgGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::Lucky9::LCMsgNotifyPlayerAct* Arena::CreateMaybeMessage< ::Lucky9::LCMsgNotifyPlayerAct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Lucky9::LCMsgNotifyPlayerAct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
