// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlaneWar.proto

#include "PlaneWar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Animation_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArenaPieceInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeeConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeeInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlackHoleInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuffInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestBrief_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonPropInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonRedInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonReplayConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMonsterInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dice_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiceConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiceInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiceJson_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropPoker_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EarnRecord_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtraGradeRewardInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FakeTresureInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlameInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FormInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FortuneConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FortuneWheelInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FortuneWheelJson_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GiftInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalReplayConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalVideoInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GoldenToadJson_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradeRankConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GradeRankDetail_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GradeRankInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradeRewardDetail_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradeRewardInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GrantRankItem_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrantRecord_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GunInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitMode_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InteractionItem_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpHighArena_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchRankInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchRewardItem_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSubInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchTask_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissileInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonsterPath_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyMatchReward_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyRankInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChestReward_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenRankItem_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenRecord_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderData_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PackageMarquee_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersonalPoolLevelInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersonalPoolReward_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersonalReplayConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PieceInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiecesStackLimitInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiggyInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiggyReward_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaneInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaneSpecEffect_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_PlayerInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Poker_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolArenaLimit_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropsInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProsInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PurchaseResult_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankReward_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankStatusInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankWareConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReceiveReward_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedOpenInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedRankPlayerInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedUpgradeInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplayConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RoomInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roulette_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouletteInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScratchInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelfVideoInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecEffect_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_StateInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingMonster_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToadInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreasureInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TriggerBullet_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoCommon_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WareGivingInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WareInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeaponConfig_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeaponInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeaponState_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeaponUseCondition_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WingsInfo_PlaneWar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PlaneWar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WingsSpecEffect_PlaneWar_2eproto;
namespace PlaneWar {
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class CSLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLogin> _instance;
} _CSLogin_default_instance_;
class SCLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLogin> _instance;
} _SCLogin_default_instance_;
class CSLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLogout> _instance;
} _CSLogout_default_instance_;
class SCLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLogout> _instance;
} _SCLogout_default_instance_;
class CommonPropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonPropInfo> _instance;
} _CommonPropInfo_default_instance_;
class PosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pos> _instance;
} _Pos_default_instance_;
class BuffInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuffInfo> _instance;
} _BuffInfo_default_instance_;
class BlackHoleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackHoleInfo> _instance;
} _BlackHoleInfo_default_instance_;
class FormInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FormInfo> _instance;
} _FormInfo_default_instance_;
class LockInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockInfo> _instance;
} _LockInfo_default_instance_;
class HitModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitMode> _instance;
} _HitMode_default_instance_;
class WeaponStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeaponState> _instance;
} _WeaponState_default_instance_;
class SettleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettleInfo> _instance;
} _SettleInfo_default_instance_;
class GunInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GunInfo> _instance;
} _GunInfo_default_instance_;
class FlameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlameInfo> _instance;
} _FlameInfo_default_instance_;
class BeeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeeInfo> _instance;
} _BeeInfo_default_instance_;
class WeaponInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeaponInfo> _instance;
} _WeaponInfo_default_instance_;
class SpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecEffect> _instance;
} _SpecEffect_default_instance_;
class DiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dice> _instance;
} _Dice_default_instance_;
class DiceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiceInfo> _instance;
} _DiceInfo_default_instance_;
class StateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateInfo> _instance;
} _StateInfo_default_instance_;
class MissileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissileInfo> _instance;
} _MissileInfo_default_instance_;
class PiggyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiggyInfo> _instance;
} _PiggyInfo_default_instance_;
class ArenaPieceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArenaPieceInfo> _instance;
} _ArenaPieceInfo_default_instance_;
class PieceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PieceInfo> _instance;
} _PieceInfo_default_instance_;
class RouletteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouletteInfo> _instance;
} _RouletteInfo_default_instance_;
class EffectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectInfo> _instance;
} _EffectInfo_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class PlaneSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaneSpecEffect> _instance;
} _PlaneSpecEffect_default_instance_;
class WingsSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WingsSpecEffect> _instance;
} _WingsSpecEffect_default_instance_;
class PlaneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaneInfo> _instance;
} _PlaneInfo_default_instance_;
class InteractionItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractionItem> _instance;
} _InteractionItem_default_instance_;
class RankStatusInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankStatusInfo> _instance;
} _RankStatusInfo_default_instance_;
class WingsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WingsInfo> _instance;
} _WingsInfo_default_instance_;
class RoomInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInfo> _instance;
} _RoomInfo_default_instance_;
class CSReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSReady> _instance;
} _CSReady_default_instance_;
class SCReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCReady> _instance;
} _SCReady_default_instance_;
class SCUserEnterNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserEnterNotify> _instance;
} _SCUserEnterNotify_default_instance_;
class MonsterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterInfo> _instance;
} _MonsterInfo_default_instance_;
class SCMonsterSpawnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMonsterSpawn> _instance;
} _SCMonsterSpawn_default_instance_;
class CSShotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSShot> _instance;
} _CSShot_default_instance_;
class SCShotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCShot> _instance;
} _SCShot_default_instance_;
class CSLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLock> _instance;
} _CSLock_default_instance_;
class SCLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLock> _instance;
} _SCLock_default_instance_;
class PokerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Poker> _instance;
} _Poker_default_instance_;
class DropPokerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropPoker> _instance;
} _DropPoker_default_instance_;
class TriggerBulletDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerBullet> _instance;
} _TriggerBullet_default_instance_;
class RouletteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roulette> _instance;
} _Roulette_default_instance_;
class DropBuffDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropBuff> _instance;
} _DropBuff_default_instance_;
class FakeTresureInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FakeTresureInfo> _instance;
} _FakeTresureInfo_default_instance_;
class TreasureInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreasureInfo> _instance;
} _TreasureInfo_default_instance_;
class FortuneWheelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FortuneWheelInfo> _instance;
} _FortuneWheelInfo_default_instance_;
class ToadInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToadInfo> _instance;
} _ToadInfo_default_instance_;
class FortuneConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FortuneConfig> _instance;
} _FortuneConfig_default_instance_;
class BeeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeeConfig> _instance;
} _BeeConfig_default_instance_;
class CommonReplayConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonReplayConfig> _instance;
} _CommonReplayConfig_default_instance_;
class GlobalReplayConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalReplayConfig> _instance;
} _GlobalReplayConfig_default_instance_;
class PersonalReplayConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersonalReplayConfig> _instance;
} _PersonalReplayConfig_default_instance_;
class ReplayConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayConfig> _instance;
} _ReplayConfig_default_instance_;
class ConnMonsterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnMonsterInfo> _instance;
} _ConnMonsterInfo_default_instance_;
class CSHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHit> _instance;
} _CSHit_default_instance_;
class SCHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHit> _instance;
} _SCHit_default_instance_;
class CSMonsterDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMonsterDestory> _instance;
} _CSMonsterDestory_default_instance_;
class SCMonsterDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMonsterDestory> _instance;
} _SCMonsterDestory_default_instance_;
class CSTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTransform> _instance;
} _CSTransform_default_instance_;
class SCTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTransform> _instance;
} _SCTransform_default_instance_;
class CSPlanePosSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPlanePosSync> _instance;
} _CSPlanePosSync_default_instance_;
class SCPlanePosSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPlanePosSync> _instance;
} _SCPlanePosSync_default_instance_;
class SCStateEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCStateEnd> _instance;
} _SCStateEnd_default_instance_;
class CSModRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSModRatio> _instance;
} _CSModRatio_default_instance_;
class SCModRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCModRatio> _instance;
} _SCModRatio_default_instance_;
class SCGainNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGainNotify> _instance;
} _SCGainNotify_default_instance_;
class SCGainSettleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGainSettle> _instance;
} _SCGainSettle_default_instance_;
class CSSetPlaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetPlane> _instance;
} _CSSetPlane_default_instance_;
class SCSetPlaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetPlane> _instance;
} _SCSetPlane_default_instance_;
class CSSwitchBackGroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSwitchBackGround> _instance;
} _CSSwitchBackGround_default_instance_;
class SCSwitchBackGroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSwitchBackGround> _instance;
} _SCSwitchBackGround_default_instance_;
class MonsterPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterPath> _instance;
} _MonsterPath_default_instance_;
class SCSyncMonsterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncMonsterInfo> _instance;
} _SCSyncMonsterInfo_default_instance_;
class ScratchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScratchInfo> _instance;
} _ScratchInfo_default_instance_;
class CSScratchCardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSScratchCardList> _instance;
} _CSScratchCardList_default_instance_;
class SCScratchCardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCScratchCardList> _instance;
} _SCScratchCardList_default_instance_;
class CSUseScratchCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUseScratchCard> _instance;
} _CSUseScratchCard_default_instance_;
class SCUseScratchCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUseScratchCard> _instance;
} _SCUseScratchCard_default_instance_;
class CSExplodeSettleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSExplodeSettle> _instance;
} _CSExplodeSettle_default_instance_;
class SCExplodeSettleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCExplodeSettle> _instance;
} _SCExplodeSettle_default_instance_;
class CSFallIntoBlackHoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFallIntoBlackHole> _instance;
} _CSFallIntoBlackHole_default_instance_;
class SCFallIntoBlackHoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFallIntoBlackHole> _instance;
} _SCFallIntoBlackHole_default_instance_;
class CSSyncBlackHolePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncBlackHolePos> _instance;
} _CSSyncBlackHolePos_default_instance_;
class SCSyncBlackHolePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncBlackHolePos> _instance;
} _SCSyncBlackHolePos_default_instance_;
class CSInteractionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSInteraction> _instance;
} _CSInteraction_default_instance_;
class SCInteractionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCInteraction> _instance;
} _SCInteraction_default_instance_;
class JumpHighArenaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JumpHighArena> _instance;
} _JumpHighArena_default_instance_;
class PoolArenaLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolArenaLimit> _instance;
} _PoolArenaLimit_default_instance_;
class SCActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCActivityInfo> _instance;
} _SCActivityInfo_default_instance_;
class CSGetTaskRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTaskReward> _instance;
} _CSGetTaskReward_default_instance_;
class SCGetTaskRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTaskReward> _instance;
} _SCGetTaskReward_default_instance_;
class CSGetTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTaskInfo> _instance;
} _CSGetTaskInfo_default_instance_;
class SCGetTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTaskInfo> _instance;
} _SCGetTaskInfo_default_instance_;
class SCNoticeInfoChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNoticeInfoChange> _instance;
} _SCNoticeInfoChange_default_instance_;
class ProsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProsInfo> _instance;
} _ProsInfo_default_instance_;
class SCNoticeHallProsChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNoticeHallProsChange> _instance;
} _SCNoticeHallProsChange_default_instance_;
class TimingMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimingMonster> _instance;
} _TimingMonster_default_instance_;
class SCNoticeTimingMonsterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNoticeTimingMonster> _instance;
} _SCNoticeTimingMonster_default_instance_;
class CSPiggyBankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPiggyBankInfo> _instance;
} _CSPiggyBankInfo_default_instance_;
class SCPiggyBankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPiggyBankInfo> _instance;
} _SCPiggyBankInfo_default_instance_;
class PiggyRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiggyReward> _instance;
} _PiggyReward_default_instance_;
class CSOpenPiggyBankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenPiggyBank> _instance;
} _CSOpenPiggyBank_default_instance_;
class SCOpenPiggyBankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenPiggyBank> _instance;
} _SCOpenPiggyBank_default_instance_;
class CSPiggyBankOpenFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPiggyBankOpenFinish> _instance;
} _CSPiggyBankOpenFinish_default_instance_;
class SCPiggyBankOpenFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPiggyBankOpenFinish> _instance;
} _SCPiggyBankOpenFinish_default_instance_;
class SCPiggyBankChangeNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPiggyBankChangeNotify> _instance;
} _SCPiggyBankChangeNotify_default_instance_;
class CSSetPersonalPoolEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetPersonalPoolEnable> _instance;
} _CSSetPersonalPoolEnable_default_instance_;
class SCSetPersonalPoolEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetPersonalPoolEnable> _instance;
} _SCSetPersonalPoolEnable_default_instance_;
class CSPersonalPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPersonalPoolInfo> _instance;
} _CSPersonalPoolInfo_default_instance_;
class PersonalPoolRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersonalPoolReward> _instance;
} _PersonalPoolReward_default_instance_;
class PersonalPoolLevelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersonalPoolLevelInfo> _instance;
} _PersonalPoolLevelInfo_default_instance_;
class PersonalPoolLuckyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersonalPoolLuckyInfo> _instance;
} _PersonalPoolLuckyInfo_default_instance_;
class SCPersonalPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPersonalPoolInfo> _instance;
} _SCPersonalPoolInfo_default_instance_;
class CSDrawPersonalPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDrawPersonalPool> _instance;
} _CSDrawPersonalPool_default_instance_;
class CSUpgradePoolRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUpgradePoolReward> _instance;
} _CSUpgradePoolReward_default_instance_;
class SCUpgradePoolRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUpgradePoolReward> _instance;
} _SCUpgradePoolReward_default_instance_;
class CSGetPoolLuckyRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetPoolLuckyReward> _instance;
} _CSGetPoolLuckyReward_default_instance_;
class SCGetPoolLuckyRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetPoolLuckyReward> _instance;
} _SCGetPoolLuckyReward_default_instance_;
class SCPersonalPoolChangeNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPersonalPoolChangeNotify> _instance;
} _SCPersonalPoolChangeNotify_default_instance_;
class CSUseMissileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUseMissile> _instance;
} _CSUseMissile_default_instance_;
class SCUseMissileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUseMissile> _instance;
} _SCUseMissile_default_instance_;
class CSMonsterCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMonsterCall> _instance;
} _CSMonsterCall_default_instance_;
class SCMonsterCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMonsterCall> _instance;
} _SCMonsterCall_default_instance_;
class CSClickStaticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSClickStatic> _instance;
} _CSClickStatic_default_instance_;
class SCClickStaticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCClickStatic> _instance;
} _SCClickStatic_default_instance_;
class RankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankInfo> _instance;
} _RankInfo_default_instance_;
class MyRankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyRankInfo> _instance;
} _MyRankInfo_default_instance_;
class CSRankListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSRankList> _instance;
} _CSRankList_default_instance_;
class SCRankListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRankList> _instance;
} _SCRankList_default_instance_;
class TitleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TitleInfo> _instance;
} _TitleInfo_default_instance_;
class SCTitleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTitleList> _instance;
} _SCTitleList_default_instance_;
class CSSelectTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSelectTitle> _instance;
} _CSSelectTitle_default_instance_;
class SCSelectTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSelectTitle> _instance;
} _SCSelectTitle_default_instance_;
class SCTitleActiveNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTitleActiveNotify> _instance;
} _SCTitleActiveNotify_default_instance_;
class SCRoomInfoChangeNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRoomInfoChangeNotify> _instance;
} _SCRoomInfoChangeNotify_default_instance_;
class CSMatchBriefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMatchBrief> _instance;
} _CSMatchBrief_default_instance_;
class SCMatchBriefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchBrief> _instance;
} _SCMatchBrief_default_instance_;
class CSMatchDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMatchDetail> _instance;
} _CSMatchDetail_default_instance_;
class MatchSubInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchSubInfo> _instance;
} _MatchSubInfo_default_instance_;
class MatchRewardItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchRewardItem> _instance;
} _MatchRewardItem_default_instance_;
class MatchRankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchRankInfo> _instance;
} _MatchRankInfo_default_instance_;
class MatchTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchTask> _instance;
} _MatchTask_default_instance_;
class SCMatchDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchDetail> _instance;
} _SCMatchDetail_default_instance_;
class CSMatchRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMatchReward> _instance;
} _CSMatchReward_default_instance_;
class RankRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankReward> _instance;
} _RankReward_default_instance_;
class SCMatchRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchReward> _instance;
} _SCMatchReward_default_instance_;
class MyMatchRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyMatchReward> _instance;
} _MyMatchReward_default_instance_;
class SCMatchRewardNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchRewardNotify> _instance;
} _SCMatchRewardNotify_default_instance_;
class CSGiftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGiftList> _instance;
} _CSGiftList_default_instance_;
class GiftInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GiftInfo> _instance;
} _GiftInfo_default_instance_;
class SCGiftListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGiftList> _instance;
} _SCGiftList_default_instance_;
class SCGiftExpireNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGiftExpireNotify> _instance;
} _SCGiftExpireNotify_default_instance_;
class CSGetMatchTaskRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetMatchTaskReward> _instance;
} _CSGetMatchTaskReward_default_instance_;
class SCGetMatchTaskRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetMatchTaskReward> _instance;
} _SCGetMatchTaskReward_default_instance_;
class WeaponUseConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeaponUseCondition> _instance;
} _WeaponUseCondition_default_instance_;
class WeaponConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeaponConfig> _instance;
} _WeaponConfig_default_instance_;
class CSWeaponPieceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSWeaponPieceInfo> _instance;
} _CSWeaponPieceInfo_default_instance_;
class PiecesStackLimitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PiecesStackLimitInfo> _instance;
} _PiecesStackLimitInfo_default_instance_;
class SCWeaponPieceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCWeaponPieceInfo> _instance;
} _SCWeaponPieceInfo_default_instance_;
class CSBuyWeaponDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyWeapon> _instance;
} _CSBuyWeapon_default_instance_;
class SCBuyWeaponDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyWeapon> _instance;
} _SCBuyWeapon_default_instance_;
class EarnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EarnRecord> _instance;
} _EarnRecord_default_instance_;
class CSWeaponEarnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSWeaponEarnRecord> _instance;
} _CSWeaponEarnRecord_default_instance_;
class SCWeaponEarnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCWeaponEarnRecord> _instance;
} _SCWeaponEarnRecord_default_instance_;
class CSStateForceSettleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSStateForceSettle> _instance;
} _CSStateForceSettle_default_instance_;
class SCStateForceSettleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCStateForceSettle> _instance;
} _SCStateForceSettle_default_instance_;
class SCAddMissedBulletDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAddMissedBullet> _instance;
} _SCAddMissedBullet_default_instance_;
class CSUpdateBulletDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUpdateBulletData> _instance;
} _CSUpdateBulletData_default_instance_;
class SCUpdateBulletDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUpdateBulletData> _instance;
} _SCUpdateBulletData_default_instance_;
class CSUseMissileBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUseMissileBatch> _instance;
} _CSUseMissileBatch_default_instance_;
class SCUseMissileBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUseMissileBatch> _instance;
} _SCUseMissileBatch_default_instance_;
class CSSyncPropsToHallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncPropsToHall> _instance;
} _CSSyncPropsToHall_default_instance_;
class SCSyncPropsToHallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncPropsToHall> _instance;
} _SCSyncPropsToHall_default_instance_;
class CSChangeTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChangeTable> _instance;
} _CSChangeTable_default_instance_;
class SCChangeTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChangeTable> _instance;
} _SCChangeTable_default_instance_;
class CSUseRouletteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUseRoulette> _instance;
} _CSUseRoulette_default_instance_;
class SCUseRouletteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUseRoulette> _instance;
} _SCUseRoulette_default_instance_;
class CSRedEnvelopePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSRedEnvelopePoint> _instance;
} _CSRedEnvelopePoint_default_instance_;
class RedOpenInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedOpenInfo> _instance;
} _RedOpenInfo_default_instance_;
class SCRedEnvelopePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRedEnvelopePoint> _instance;
} _SCRedEnvelopePoint_default_instance_;
class CSRedEnvelopeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSRedEnvelopeInfo> _instance;
} _CSRedEnvelopeInfo_default_instance_;
class RedInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedInfo> _instance;
} _RedInfo_default_instance_;
class SCRedEnvelopeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRedEnvelopeInfo> _instance;
} _SCRedEnvelopeInfo_default_instance_;
class CSOpenRedEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenRedEnvelope> _instance;
} _CSOpenRedEnvelope_default_instance_;
class RedUpgradeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedUpgradeInfo> _instance;
} _RedUpgradeInfo_default_instance_;
class SCOpenRedEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenRedEnvelope> _instance;
} _SCOpenRedEnvelope_default_instance_;
class CSUpgradeRedEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUpgradeRedEnvelope> _instance;
} _CSUpgradeRedEnvelope_default_instance_;
class SCUpgradeRedEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUpgradeRedEnvelope> _instance;
} _SCUpgradeRedEnvelope_default_instance_;
class CSCommonRedEnvelopeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSCommonRedEnvelopeInfo> _instance;
} _CSCommonRedEnvelopeInfo_default_instance_;
class CommonRedInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonRedInfo> _instance;
} _CommonRedInfo_default_instance_;
class SCCommonRedEnvelopeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCCommonRedEnvelopeInfo> _instance;
} _SCCommonRedEnvelopeInfo_default_instance_;
class CSOpenCommonRedEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenCommonRedEnvelope> _instance;
} _CSOpenCommonRedEnvelope_default_instance_;
class SCOpenCommonRedEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenCommonRedEnvelope> _instance;
} _SCOpenCommonRedEnvelope_default_instance_;
class RedRankPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedRankPlayerInfo> _instance;
} _RedRankPlayerInfo_default_instance_;
class CSGrantCommonRedEnvelopeRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGrantCommonRedEnvelopeRank> _instance;
} _CSGrantCommonRedEnvelopeRank_default_instance_;
class GrantRankItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantRankItem> _instance;
} _GrantRankItem_default_instance_;
class SCGrantCommonRedEnvelopeRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGrantCommonRedEnvelopeRank> _instance;
} _SCGrantCommonRedEnvelopeRank_default_instance_;
class CSOpenCommonRedEnvelopeRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenCommonRedEnvelopeRank> _instance;
} _CSOpenCommonRedEnvelopeRank_default_instance_;
class OpenRankItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenRankItem> _instance;
} _OpenRankItem_default_instance_;
class SCOpenCommonRedEnvelopeRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenCommonRedEnvelopeRank> _instance;
} _SCOpenCommonRedEnvelopeRank_default_instance_;
class CSGrantCommonRedEnvelopeRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGrantCommonRedEnvelopeRecord> _instance;
} _CSGrantCommonRedEnvelopeRecord_default_instance_;
class GrantRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrantRecord> _instance;
} _GrantRecord_default_instance_;
class SCGrantCommonRedEnvelopeRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGrantCommonRedEnvelopeRecord> _instance;
} _SCGrantCommonRedEnvelopeRecord_default_instance_;
class CSOpenCommonRedEnvelopeRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenCommonRedEnvelopeRecord> _instance;
} _CSOpenCommonRedEnvelopeRecord_default_instance_;
class OpenRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenRecord> _instance;
} _OpenRecord_default_instance_;
class SCOpenCommonRedEnvelopeRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenCommonRedEnvelopeRecord> _instance;
} _SCOpenCommonRedEnvelopeRecord_default_instance_;
class SCRedEnvelopeOpStatusNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRedEnvelopeOpStatusNotify> _instance;
} _SCRedEnvelopeOpStatusNotify_default_instance_;
class CSSyncWeaponStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncWeaponState> _instance;
} _CSSyncWeaponState_default_instance_;
class SCSyncWeaponStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncWeaponState> _instance;
} _SCSyncWeaponState_default_instance_;
class CSPreHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPreHit> _instance;
} _CSPreHit_default_instance_;
class SCPreHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPreHit> _instance;
} _SCPreHit_default_instance_;
class AnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Animation> _instance;
} _Animation_default_instance_;
class DiceJsonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiceJson> _instance;
} _DiceJson_default_instance_;
class FortuneWheelJsonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FortuneWheelJson> _instance;
} _FortuneWheelJson_default_instance_;
class GoldenToadJsonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoldenToadJson> _instance;
} _GoldenToadJson_default_instance_;
class OrderDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderData> _instance;
} _OrderData_default_instance_;
class CSSyncAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncAnimation> _instance;
} _CSSyncAnimation_default_instance_;
class SCSyncAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncAnimation> _instance;
} _SCSyncAnimation_default_instance_;
class SCGetAnimationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetAnimations> _instance;
} _SCGetAnimations_default_instance_;
class GradeRankDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradeRankDetail> _instance;
} _GradeRankDetail_default_instance_;
class GradeRankConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradeRankConfig> _instance;
} _GradeRankConfig_default_instance_;
class WareGivingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WareGivingInfo> _instance;
} _WareGivingInfo_default_instance_;
class WareInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WareInfo> _instance;
} _WareInfo_default_instance_;
class ExtraGradeRewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtraGradeRewardInfo> _instance;
} _ExtraGradeRewardInfo_default_instance_;
class RankWareConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankWareConfig> _instance;
} _RankWareConfig_default_instance_;
class DiceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiceConfig> _instance;
} _DiceConfig_default_instance_;
class CSSyncConfigsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncConfigs> _instance;
} _CSSyncConfigs_default_instance_;
class SCSyncConfigsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncConfigs> _instance;
} _SCSyncConfigs_default_instance_;
class CSConfirmWeaponExistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSConfirmWeaponExist> _instance;
} _CSConfirmWeaponExist_default_instance_;
class SCConfirmWeaponExistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCConfirmWeaponExist> _instance;
} _SCConfirmWeaponExist_default_instance_;
class CSGetVideoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetVideo> _instance;
} _CSGetVideo_default_instance_;
class SCGetVideoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetVideo> _instance;
} _SCGetVideo_default_instance_;
class VideoCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoCommon> _instance;
} _VideoCommon_default_instance_;
class GlobalVideoInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalVideoInfo> _instance;
} _GlobalVideoInfo_default_instance_;
class SelfVideoInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelfVideoInfo> _instance;
} _SelfVideoInfo_default_instance_;
class CSSelfVideoRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSelfVideoRecord> _instance;
} _CSSelfVideoRecord_default_instance_;
class SCSelfVideoRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSelfVideoRecord> _instance;
} _SCSelfVideoRecord_default_instance_;
class CSVideoRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSVideoRank> _instance;
} _CSVideoRank_default_instance_;
class SCVideoRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCVideoRank> _instance;
} _SCVideoRank_default_instance_;
class ReceiveRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveReward> _instance;
} _ReceiveReward_default_instance_;
class CSReceiveGradeRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSReceiveGradeReward> _instance;
} _CSReceiveGradeReward_default_instance_;
class SCReceiveGradeRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCReceiveGradeReward> _instance;
} _SCReceiveGradeReward_default_instance_;
class GradeRewardDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradeRewardDetail> _instance;
} _GradeRewardDetail_default_instance_;
class GradeRewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradeRewardInfo> _instance;
} _GradeRewardInfo_default_instance_;
class GradeRankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradeRankInfo> _instance;
} _GradeRankInfo_default_instance_;
class CSGetTableUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetTableUserInfo> _instance;
} _CSGetTableUserInfo_default_instance_;
class SCGetTableUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetTableUserInfo> _instance;
} _SCGetTableUserInfo_default_instance_;
class CSGetGradeRewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetGradeRewardInfo> _instance;
} _CSGetGradeRewardInfo_default_instance_;
class SCGetGradeRewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetGradeRewardInfo> _instance;
} _SCGetGradeRewardInfo_default_instance_;
class CSGetGradeRankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetGradeRankInfo> _instance;
} _CSGetGradeRankInfo_default_instance_;
class SCGetGradeRankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetGradeRankInfo> _instance;
} _SCGetGradeRankInfo_default_instance_;
class SCRankUpgradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRankUpgrade> _instance;
} _SCRankUpgrade_default_instance_;
class CSRankSeasonStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSRankSeasonStatus> _instance;
} _CSRankSeasonStatus_default_instance_;
class SCRankSeasonStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCRankSeasonStatus> _instance;
} _SCRankSeasonStatus_default_instance_;
class SCSyncTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncTime> _instance;
} _SCSyncTime_default_instance_;
class SCNoticePropsOverdueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNoticePropsOverdue> _instance;
} _SCNoticePropsOverdue_default_instance_;
class PurchaseResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurchaseResult> _instance;
} _PurchaseResult_default_instance_;
class CSQueryPackagePurchaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSQueryPackagePurchase> _instance;
} _CSQueryPackagePurchase_default_instance_;
class SCQueryPackagePurchaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCQueryPackagePurchase> _instance;
} _SCQueryPackagePurchase_default_instance_;
class PropsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropsInfo> _instance;
} _PropsInfo_default_instance_;
class SCGamePurchasePushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGamePurchasePush> _instance;
} _SCGamePurchasePush_default_instance_;
class PackageMarqueeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackageMarquee> _instance;
} _PackageMarquee_default_instance_;
class CSQueryPackageMarqueeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSQueryPackageMarquee> _instance;
} _CSQueryPackageMarquee_default_instance_;
class SCQueryPackageMarqueeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCQueryPackageMarquee> _instance;
} _SCQueryPackageMarquee_default_instance_;
class CSSetWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetWings> _instance;
} _CSSetWings_default_instance_;
class SCSetWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetWings> _instance;
} _SCSetWings_default_instance_;
class CSVerifySeasonChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSVerifySeasonChange> _instance;
} _CSVerifySeasonChange_default_instance_;
class SCVerifySeasonChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCVerifySeasonChange> _instance;
} _SCVerifySeasonChange_default_instance_;
class CSExistUnReceiveRankRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSExistUnReceiveRankReward> _instance;
} _CSExistUnReceiveRankReward_default_instance_;
class SCExistUnReceiveRankRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCExistUnReceiveRankReward> _instance;
} _SCExistUnReceiveRankReward_default_instance_;
class CSReceiveExtraGradeRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSReceiveExtraGradeReward> _instance;
} _CSReceiveExtraGradeReward_default_instance_;
class SCReceiveExtraGradeRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCReceiveExtraGradeReward> _instance;
} _SCReceiveExtraGradeReward_default_instance_;
class CSGetGradeRankListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetGradeRankList> _instance;
} _CSGetGradeRankList_default_instance_;
class SCGetGradeRankListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetGradeRankList> _instance;
} _SCGetGradeRankList_default_instance_;
class CSBuyPlaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyPlane> _instance;
} _CSBuyPlane_default_instance_;
class SCBuyPlaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyPlane> _instance;
} _SCBuyPlane_default_instance_;
class CSBuyWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyWings> _instance;
} _CSBuyWings_default_instance_;
class SCBuyWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyWings> _instance;
} _SCBuyWings_default_instance_;
class OpenChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenChestReward> _instance;
} _OpenChestReward_default_instance_;
class SCUpdateChestStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUpdateChestStatus> _instance;
} _SCUpdateChestStatus_default_instance_;
class ChestBriefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChestBrief> _instance;
} _ChestBrief_default_instance_;
class SCChestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestConfig> _instance;
} _SCChestConfig_default_instance_;
class SCOpenChestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenChest> _instance;
} _SCOpenChest_default_instance_;
class CSSelectChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSelectChestReward> _instance;
} _CSSelectChestReward_default_instance_;
class CSChestSetAutoSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestSetAutoSelect> _instance;
} _CSChestSetAutoSelect_default_instance_;
class SCChestSetAutoSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestSetAutoSelect> _instance;
} _SCChestSetAutoSelect_default_instance_;
class CSChestSetEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestSetEnable> _instance;
} _CSChestSetEnable_default_instance_;
class SCChestSetEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestSetEnable> _instance;
} _SCChestSetEnable_default_instance_;
class SCWaterDropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCWaterDropInfo> _instance;
} _SCWaterDropInfo_default_instance_;
class TextInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextInfo> _instance;
} _TextInfo_default_instance_;
class CSSyncTextConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncTextConfig> _instance;
} _CSSyncTextConfig_default_instance_;
class SCSyncTextConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncTextConfig> _instance;
} _SCSyncTextConfig_default_instance_;
}  // namespace PlaneWar
static void InitDefaultsscc_info_Animation_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_Animation_default_instance_;
    new (ptr) ::PlaneWar::Animation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Animation_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Animation_PlaneWar_2eproto}, {
      &scc_info_FortuneWheelJson_PlaneWar_2eproto.base,
      &scc_info_GoldenToadJson_PlaneWar_2eproto.base,
      &scc_info_DiceJson_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_ArenaPieceInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ArenaPieceInfo_default_instance_;
    new (ptr) ::PlaneWar::ArenaPieceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArenaPieceInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArenaPieceInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_BeeConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_BeeConfig_default_instance_;
    new (ptr) ::PlaneWar::BeeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeeConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BeeConfig_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_BeeInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_BeeInfo_default_instance_;
    new (ptr) ::PlaneWar::BeeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeeInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BeeInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_BlackHoleInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_BlackHoleInfo_default_instance_;
    new (ptr) ::PlaneWar::BlackHoleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlackHoleInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlackHoleInfo_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_BuffInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_BuffInfo_default_instance_;
    new (ptr) ::PlaneWar::BuffInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuffInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuffInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyPlane_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSBuyPlane_default_instance_;
    new (ptr) ::PlaneWar::CSBuyPlane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyPlane_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyPlane_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyWeapon_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSBuyWeapon_default_instance_;
    new (ptr) ::PlaneWar::CSBuyWeapon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyWeapon_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyWeapon_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyWings_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSBuyWings_default_instance_;
    new (ptr) ::PlaneWar::CSBuyWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyWings_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyWings_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSChangeTable_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSChangeTable_default_instance_;
    new (ptr) ::PlaneWar::CSChangeTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChangeTable_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChangeTable_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSChestSetAutoSelect_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSChestSetAutoSelect_default_instance_;
    new (ptr) ::PlaneWar::CSChestSetAutoSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestSetAutoSelect_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestSetAutoSelect_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSChestSetEnable_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSChestSetEnable_default_instance_;
    new (ptr) ::PlaneWar::CSChestSetEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestSetEnable_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestSetEnable_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSClickStatic_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSClickStatic_default_instance_;
    new (ptr) ::PlaneWar::CSClickStatic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSClickStatic_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSClickStatic_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSCommonRedEnvelopeInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSCommonRedEnvelopeInfo_default_instance_;
    new (ptr) ::PlaneWar::CSCommonRedEnvelopeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSCommonRedEnvelopeInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSCommonRedEnvelopeInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSConfirmWeaponExist_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSConfirmWeaponExist_default_instance_;
    new (ptr) ::PlaneWar::CSConfirmWeaponExist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSConfirmWeaponExist_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSConfirmWeaponExist_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSDrawPersonalPool_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSDrawPersonalPool_default_instance_;
    new (ptr) ::PlaneWar::CSDrawPersonalPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSDrawPersonalPool_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSDrawPersonalPool_PlaneWar_2eproto}, {
      &scc_info_PersonalPoolReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CSExistUnReceiveRankReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSExistUnReceiveRankReward_default_instance_;
    new (ptr) ::PlaneWar::CSExistUnReceiveRankReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSExistUnReceiveRankReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSExistUnReceiveRankReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSExplodeSettle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSExplodeSettle_default_instance_;
    new (ptr) ::PlaneWar::CSExplodeSettle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSExplodeSettle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSExplodeSettle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSFallIntoBlackHole_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSFallIntoBlackHole_default_instance_;
    new (ptr) ::PlaneWar::CSFallIntoBlackHole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFallIntoBlackHole_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFallIntoBlackHole_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetGradeRankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetGradeRankInfo_default_instance_;
    new (ptr) ::PlaneWar::CSGetGradeRankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetGradeRankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetGradeRankInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetGradeRankList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetGradeRankList_default_instance_;
    new (ptr) ::PlaneWar::CSGetGradeRankList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetGradeRankList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetGradeRankList_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetGradeRewardInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetGradeRewardInfo_default_instance_;
    new (ptr) ::PlaneWar::CSGetGradeRewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetGradeRewardInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetGradeRewardInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetMatchTaskReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetMatchTaskReward_default_instance_;
    new (ptr) ::PlaneWar::CSGetMatchTaskReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetMatchTaskReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetMatchTaskReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetPoolLuckyReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetPoolLuckyReward_default_instance_;
    new (ptr) ::PlaneWar::CSGetPoolLuckyReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetPoolLuckyReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetPoolLuckyReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetTableUserInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetTableUserInfo_default_instance_;
    new (ptr) ::PlaneWar::CSGetTableUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetTableUserInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetTableUserInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetTaskInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetTaskInfo_default_instance_;
    new (ptr) ::PlaneWar::CSGetTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetTaskInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetTaskInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetTaskReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetTaskReward_default_instance_;
    new (ptr) ::PlaneWar::CSGetTaskReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetTaskReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetTaskReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGetVideo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGetVideo_default_instance_;
    new (ptr) ::PlaneWar::CSGetVideo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetVideo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetVideo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGiftList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGiftList_default_instance_;
    new (ptr) ::PlaneWar::CSGiftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGiftList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGiftList_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGrantCommonRedEnvelopeRank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGrantCommonRedEnvelopeRank_default_instance_;
    new (ptr) ::PlaneWar::CSGrantCommonRedEnvelopeRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGrantCommonRedEnvelopeRank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGrantCommonRedEnvelopeRank_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSGrantCommonRedEnvelopeRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSGrantCommonRedEnvelopeRecord_default_instance_;
    new (ptr) ::PlaneWar::CSGrantCommonRedEnvelopeRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGrantCommonRedEnvelopeRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGrantCommonRedEnvelopeRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSHit_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSHit_default_instance_;
    new (ptr) ::PlaneWar::CSHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHit_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHit_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSInteraction_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSInteraction_default_instance_;
    new (ptr) ::PlaneWar::CSInteraction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSInteraction_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSInteraction_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSLock_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSLock_default_instance_;
    new (ptr) ::PlaneWar::CSLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLock_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLock_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSLogin_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSLogin_default_instance_;
    new (ptr) ::PlaneWar::CSLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLogin_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLogin_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSLogout_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSLogout_default_instance_;
    new (ptr) ::PlaneWar::CSLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLogout_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLogout_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSMatchBrief_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSMatchBrief_default_instance_;
    new (ptr) ::PlaneWar::CSMatchBrief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMatchBrief_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMatchBrief_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSMatchDetail_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSMatchDetail_default_instance_;
    new (ptr) ::PlaneWar::CSMatchDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMatchDetail_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMatchDetail_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSMatchReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSMatchReward_default_instance_;
    new (ptr) ::PlaneWar::CSMatchReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMatchReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMatchReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSModRatio_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSModRatio_default_instance_;
    new (ptr) ::PlaneWar::CSModRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSModRatio_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSModRatio_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSMonsterCall_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSMonsterCall_default_instance_;
    new (ptr) ::PlaneWar::CSMonsterCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMonsterCall_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMonsterCall_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSMonsterDestory_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSMonsterDestory_default_instance_;
    new (ptr) ::PlaneWar::CSMonsterDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMonsterDestory_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMonsterDestory_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenCommonRedEnvelope_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSOpenCommonRedEnvelope_default_instance_;
    new (ptr) ::PlaneWar::CSOpenCommonRedEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenCommonRedEnvelope_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenCommonRedEnvelope_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenCommonRedEnvelopeRank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSOpenCommonRedEnvelopeRank_default_instance_;
    new (ptr) ::PlaneWar::CSOpenCommonRedEnvelopeRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenCommonRedEnvelopeRank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenCommonRedEnvelopeRank_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenCommonRedEnvelopeRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSOpenCommonRedEnvelopeRecord_default_instance_;
    new (ptr) ::PlaneWar::CSOpenCommonRedEnvelopeRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenCommonRedEnvelopeRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenCommonRedEnvelopeRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenPiggyBank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSOpenPiggyBank_default_instance_;
    new (ptr) ::PlaneWar::CSOpenPiggyBank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenPiggyBank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenPiggyBank_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenRedEnvelope_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSOpenRedEnvelope_default_instance_;
    new (ptr) ::PlaneWar::CSOpenRedEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenRedEnvelope_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenRedEnvelope_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSPersonalPoolInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSPersonalPoolInfo_default_instance_;
    new (ptr) ::PlaneWar::CSPersonalPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPersonalPoolInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPersonalPoolInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSPiggyBankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSPiggyBankInfo_default_instance_;
    new (ptr) ::PlaneWar::CSPiggyBankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPiggyBankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPiggyBankInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSPiggyBankOpenFinish_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSPiggyBankOpenFinish_default_instance_;
    new (ptr) ::PlaneWar::CSPiggyBankOpenFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPiggyBankOpenFinish_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPiggyBankOpenFinish_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSPlanePosSync_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSPlanePosSync_default_instance_;
    new (ptr) ::PlaneWar::CSPlanePosSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSPlanePosSync_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSPlanePosSync_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CSPreHit_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSPreHit_default_instance_;
    new (ptr) ::PlaneWar::CSPreHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPreHit_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPreHit_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSQueryPackageMarquee_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSQueryPackageMarquee_default_instance_;
    new (ptr) ::PlaneWar::CSQueryPackageMarquee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSQueryPackageMarquee_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSQueryPackageMarquee_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSQueryPackagePurchase_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSQueryPackagePurchase_default_instance_;
    new (ptr) ::PlaneWar::CSQueryPackagePurchase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSQueryPackagePurchase_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSQueryPackagePurchase_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSRankList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSRankList_default_instance_;
    new (ptr) ::PlaneWar::CSRankList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSRankList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSRankList_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSRankSeasonStatus_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSRankSeasonStatus_default_instance_;
    new (ptr) ::PlaneWar::CSRankSeasonStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSRankSeasonStatus_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSRankSeasonStatus_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSReady_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSReady_default_instance_;
    new (ptr) ::PlaneWar::CSReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSReady_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSReady_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSReceiveExtraGradeReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSReceiveExtraGradeReward_default_instance_;
    new (ptr) ::PlaneWar::CSReceiveExtraGradeReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSReceiveExtraGradeReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSReceiveExtraGradeReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSReceiveGradeReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSReceiveGradeReward_default_instance_;
    new (ptr) ::PlaneWar::CSReceiveGradeReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSReceiveGradeReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSReceiveGradeReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSRedEnvelopeInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSRedEnvelopeInfo_default_instance_;
    new (ptr) ::PlaneWar::CSRedEnvelopeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSRedEnvelopeInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSRedEnvelopeInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSRedEnvelopePoint_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSRedEnvelopePoint_default_instance_;
    new (ptr) ::PlaneWar::CSRedEnvelopePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSRedEnvelopePoint_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSRedEnvelopePoint_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSScratchCardList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSScratchCardList_default_instance_;
    new (ptr) ::PlaneWar::CSScratchCardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSScratchCardList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSScratchCardList_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSelectChestReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSelectChestReward_default_instance_;
    new (ptr) ::PlaneWar::CSSelectChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSelectChestReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSelectChestReward_PlaneWar_2eproto}, {
      &scc_info_OpenChestReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CSSelectTitle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSelectTitle_default_instance_;
    new (ptr) ::PlaneWar::CSSelectTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSelectTitle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSelectTitle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSelfVideoRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSelfVideoRecord_default_instance_;
    new (ptr) ::PlaneWar::CSSelfVideoRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSelfVideoRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSelfVideoRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSetPersonalPoolEnable_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSetPersonalPoolEnable_default_instance_;
    new (ptr) ::PlaneWar::CSSetPersonalPoolEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetPersonalPoolEnable_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetPersonalPoolEnable_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSetPlane_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSetPlane_default_instance_;
    new (ptr) ::PlaneWar::CSSetPlane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetPlane_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetPlane_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSetWings_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSetWings_default_instance_;
    new (ptr) ::PlaneWar::CSSetWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetWings_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetWings_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSShot_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSShot_default_instance_;
    new (ptr) ::PlaneWar::CSShot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSShot_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSShot_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSStateForceSettle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSStateForceSettle_default_instance_;
    new (ptr) ::PlaneWar::CSStateForceSettle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSStateForceSettle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSStateForceSettle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSwitchBackGround_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSwitchBackGround_default_instance_;
    new (ptr) ::PlaneWar::CSSwitchBackGround();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSwitchBackGround_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSwitchBackGround_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncAnimation_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSyncAnimation_default_instance_;
    new (ptr) ::PlaneWar::CSSyncAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSyncAnimation_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSyncAnimation_PlaneWar_2eproto}, {
      &scc_info_Animation_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CSSyncBlackHolePos_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSyncBlackHolePos_default_instance_;
    new (ptr) ::PlaneWar::CSSyncBlackHolePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSyncBlackHolePos_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSyncBlackHolePos_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CSSyncConfigs_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSyncConfigs_default_instance_;
    new (ptr) ::PlaneWar::CSSyncConfigs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncConfigs_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncConfigs_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncPropsToHall_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSyncPropsToHall_default_instance_;
    new (ptr) ::PlaneWar::CSSyncPropsToHall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncPropsToHall_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncPropsToHall_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncTextConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSyncTextConfig_default_instance_;
    new (ptr) ::PlaneWar::CSSyncTextConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncTextConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncTextConfig_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncWeaponState_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSSyncWeaponState_default_instance_;
    new (ptr) ::PlaneWar::CSSyncWeaponState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSyncWeaponState_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSyncWeaponState_PlaneWar_2eproto}, {
      &scc_info_WeaponState_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CSTransform_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSTransform_default_instance_;
    new (ptr) ::PlaneWar::CSTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTransform_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTransform_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUpdateBulletData_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUpdateBulletData_default_instance_;
    new (ptr) ::PlaneWar::CSUpdateBulletData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUpdateBulletData_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUpdateBulletData_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUpgradePoolReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUpgradePoolReward_default_instance_;
    new (ptr) ::PlaneWar::CSUpgradePoolReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUpgradePoolReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUpgradePoolReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUpgradeRedEnvelope_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUpgradeRedEnvelope_default_instance_;
    new (ptr) ::PlaneWar::CSUpgradeRedEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUpgradeRedEnvelope_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUpgradeRedEnvelope_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUseMissile_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUseMissile_default_instance_;
    new (ptr) ::PlaneWar::CSUseMissile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUseMissile_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUseMissile_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUseMissileBatch_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUseMissileBatch_default_instance_;
    new (ptr) ::PlaneWar::CSUseMissileBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUseMissileBatch_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUseMissileBatch_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUseRoulette_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUseRoulette_default_instance_;
    new (ptr) ::PlaneWar::CSUseRoulette();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUseRoulette_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUseRoulette_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSUseScratchCard_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSUseScratchCard_default_instance_;
    new (ptr) ::PlaneWar::CSUseScratchCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUseScratchCard_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUseScratchCard_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSVerifySeasonChange_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSVerifySeasonChange_default_instance_;
    new (ptr) ::PlaneWar::CSVerifySeasonChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSVerifySeasonChange_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSVerifySeasonChange_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSVideoRank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSVideoRank_default_instance_;
    new (ptr) ::PlaneWar::CSVideoRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSVideoRank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSVideoRank_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSWeaponEarnRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSWeaponEarnRecord_default_instance_;
    new (ptr) ::PlaneWar::CSWeaponEarnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSWeaponEarnRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSWeaponEarnRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CSWeaponPieceInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CSWeaponPieceInfo_default_instance_;
    new (ptr) ::PlaneWar::CSWeaponPieceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSWeaponPieceInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSWeaponPieceInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ChestBrief_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ChestBrief_default_instance_;
    new (ptr) ::PlaneWar::ChestBrief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestBrief_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChestBrief_PlaneWar_2eproto}, {
      &scc_info_OpenChestReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_CommonPropInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CommonPropInfo_default_instance_;
    new (ptr) ::PlaneWar::CommonPropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonPropInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonPropInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CommonRedInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CommonRedInfo_default_instance_;
    new (ptr) ::PlaneWar::CommonRedInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonRedInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonRedInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_CommonReplayConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_CommonReplayConfig_default_instance_;
    new (ptr) ::PlaneWar::CommonReplayConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonReplayConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonReplayConfig_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ConnMonsterInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ConnMonsterInfo_default_instance_;
    new (ptr) ::PlaneWar::ConnMonsterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMonsterInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnMonsterInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_Decimal_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_Decimal_default_instance_;
    new (ptr) ::PlaneWar::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_Dice_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_Dice_default_instance_;
    new (ptr) ::PlaneWar::Dice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dice_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dice_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_DiceConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_DiceConfig_default_instance_;
    new (ptr) ::PlaneWar::DiceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiceConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiceConfig_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_DiceInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_DiceInfo_default_instance_;
    new (ptr) ::PlaneWar::DiceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiceInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiceInfo_PlaneWar_2eproto}, {
      &scc_info_Dice_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_DiceJson_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_DiceJson_default_instance_;
    new (ptr) ::PlaneWar::DiceJson();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiceJson_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DiceJson_PlaneWar_2eproto}, {
      &scc_info_Dice_PlaneWar_2eproto.base,
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_DropBuff_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_DropBuff_default_instance_;
    new (ptr) ::PlaneWar::DropBuff();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropBuff_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DropBuff_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_DropPoker_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_DropPoker_default_instance_;
    new (ptr) ::PlaneWar::DropPoker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropPoker_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropPoker_PlaneWar_2eproto}, {
      &scc_info_Poker_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_EarnRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_EarnRecord_default_instance_;
    new (ptr) ::PlaneWar::EarnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EarnRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EarnRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_EffectInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_EffectInfo_default_instance_;
    new (ptr) ::PlaneWar::EffectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EffectInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ExtraGradeRewardInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ExtraGradeRewardInfo_default_instance_;
    new (ptr) ::PlaneWar::ExtraGradeRewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtraGradeRewardInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtraGradeRewardInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_FakeTresureInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_FakeTresureInfo_default_instance_;
    new (ptr) ::PlaneWar::FakeTresureInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FakeTresureInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FakeTresureInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_FlameInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_FlameInfo_default_instance_;
    new (ptr) ::PlaneWar::FlameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlameInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlameInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_FormInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_FormInfo_default_instance_;
    new (ptr) ::PlaneWar::FormInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FormInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FormInfo_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_FortuneConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_FortuneConfig_default_instance_;
    new (ptr) ::PlaneWar::FortuneConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FortuneConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FortuneConfig_PlaneWar_2eproto}, {
      &scc_info_FortuneWheelInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_FortuneWheelInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_FortuneWheelInfo_default_instance_;
    new (ptr) ::PlaneWar::FortuneWheelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FortuneWheelInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FortuneWheelInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_FortuneWheelJson_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_FortuneWheelJson_default_instance_;
    new (ptr) ::PlaneWar::FortuneWheelJson();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FortuneWheelJson_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FortuneWheelJson_PlaneWar_2eproto}, {
      &scc_info_FortuneWheelInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GiftInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GiftInfo_default_instance_;
    new (ptr) ::PlaneWar::GiftInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GiftInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GiftInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_GlobalReplayConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GlobalReplayConfig_default_instance_;
    new (ptr) ::PlaneWar::GlobalReplayConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalReplayConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GlobalReplayConfig_PlaneWar_2eproto}, {
      &scc_info_CommonReplayConfig_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GlobalVideoInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GlobalVideoInfo_default_instance_;
    new (ptr) ::PlaneWar::GlobalVideoInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalVideoInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GlobalVideoInfo_PlaneWar_2eproto}, {
      &scc_info_VideoCommon_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GoldenToadJson_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GoldenToadJson_default_instance_;
    new (ptr) ::PlaneWar::GoldenToadJson();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GoldenToadJson_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GoldenToadJson_PlaneWar_2eproto}, {
      &scc_info_OrderData_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GradeRankConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GradeRankConfig_default_instance_;
    new (ptr) ::PlaneWar::GradeRankConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradeRankConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GradeRankConfig_PlaneWar_2eproto}, {
      &scc_info_GradeRankDetail_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GradeRankDetail_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GradeRankDetail_default_instance_;
    new (ptr) ::PlaneWar::GradeRankDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GradeRankDetail_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GradeRankDetail_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_GradeRankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GradeRankInfo_default_instance_;
    new (ptr) ::PlaneWar::GradeRankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GradeRankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GradeRankInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_GradeRewardDetail_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GradeRewardDetail_default_instance_;
    new (ptr) ::PlaneWar::GradeRewardDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradeRewardDetail_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GradeRewardDetail_PlaneWar_2eproto}, {
      &scc_info_ReceiveReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GradeRewardInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GradeRewardInfo_default_instance_;
    new (ptr) ::PlaneWar::GradeRewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradeRewardInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GradeRewardInfo_PlaneWar_2eproto}, {
      &scc_info_GradeRewardDetail_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GrantRankItem_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GrantRankItem_default_instance_;
    new (ptr) ::PlaneWar::GrantRankItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GrantRankItem_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GrantRankItem_PlaneWar_2eproto}, {
      &scc_info_RedRankPlayerInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_GrantRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GrantRecord_default_instance_;
    new (ptr) ::PlaneWar::GrantRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrantRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GrantRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_GunInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_GunInfo_default_instance_;
    new (ptr) ::PlaneWar::GunInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GunInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GunInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_HitMode_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_HitMode_default_instance_;
    new (ptr) ::PlaneWar::HitMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitMode_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HitMode_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_InteractionItem_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_InteractionItem_default_instance_;
    new (ptr) ::PlaneWar::InteractionItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InteractionItem_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InteractionItem_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_JumpHighArena_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_JumpHighArena_default_instance_;
    new (ptr) ::PlaneWar::JumpHighArena();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpHighArena_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JumpHighArena_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_LockInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_LockInfo_default_instance_;
    new (ptr) ::PlaneWar::LockInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_MatchRankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MatchRankInfo_default_instance_;
    new (ptr) ::PlaneWar::MatchRankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchRankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchRankInfo_PlaneWar_2eproto}, {
      &scc_info_MatchRewardItem_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_MatchRewardItem_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MatchRewardItem_default_instance_;
    new (ptr) ::PlaneWar::MatchRewardItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchRewardItem_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchRewardItem_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_MatchSubInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MatchSubInfo_default_instance_;
    new (ptr) ::PlaneWar::MatchSubInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSubInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchSubInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_MatchTask_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MatchTask_default_instance_;
    new (ptr) ::PlaneWar::MatchTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchTask_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchTask_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_MissileInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MissileInfo_default_instance_;
    new (ptr) ::PlaneWar::MissileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissileInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MissileInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_MonsterInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MonsterInfo_default_instance_;
    new (ptr) ::PlaneWar::MonsterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonsterInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_MonsterPath_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MonsterPath_default_instance_;
    new (ptr) ::PlaneWar::MonsterPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonsterPath_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MonsterPath_PlaneWar_2eproto}, {
      &scc_info_MonsterInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_MyMatchReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MyMatchReward_default_instance_;
    new (ptr) ::PlaneWar::MyMatchReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyMatchReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MyMatchReward_PlaneWar_2eproto}, {
      &scc_info_MatchRewardItem_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_MyRankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_MyRankInfo_default_instance_;
    new (ptr) ::PlaneWar::MyRankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyRankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyRankInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_OpenChestReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_OpenChestReward_default_instance_;
    new (ptr) ::PlaneWar::OpenChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChestReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpenChestReward_PlaneWar_2eproto}, {
      &scc_info_Decimal_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_OpenRankItem_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_OpenRankItem_default_instance_;
    new (ptr) ::PlaneWar::OpenRankItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenRankItem_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpenRankItem_PlaneWar_2eproto}, {
      &scc_info_RedRankPlayerInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_OpenRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_OpenRecord_default_instance_;
    new (ptr) ::PlaneWar::OpenRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpenRecord_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_OrderData_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_OrderData_default_instance_;
    new (ptr) ::PlaneWar::OrderData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderData_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderData_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PackageMarquee_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PackageMarquee_default_instance_;
    new (ptr) ::PlaneWar::PackageMarquee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PackageMarquee_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PackageMarquee_PlaneWar_2eproto}, {
      &scc_info_PropsInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_PersonalPoolLevelInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PersonalPoolLevelInfo_default_instance_;
    new (ptr) ::PlaneWar::PersonalPoolLevelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersonalPoolLevelInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PersonalPoolLevelInfo_PlaneWar_2eproto}, {
      &scc_info_PersonalPoolReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PersonalPoolLuckyInfo_default_instance_;
    new (ptr) ::PlaneWar::PersonalPoolLuckyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PersonalPoolReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PersonalPoolReward_default_instance_;
    new (ptr) ::PlaneWar::PersonalPoolReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersonalPoolReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersonalPoolReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PersonalReplayConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PersonalReplayConfig_default_instance_;
    new (ptr) ::PlaneWar::PersonalReplayConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersonalReplayConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PersonalReplayConfig_PlaneWar_2eproto}, {
      &scc_info_CommonReplayConfig_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_PieceInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PieceInfo_default_instance_;
    new (ptr) ::PlaneWar::PieceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PieceInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PieceInfo_PlaneWar_2eproto}, {
      &scc_info_ArenaPieceInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_PiecesStackLimitInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PiecesStackLimitInfo_default_instance_;
    new (ptr) ::PlaneWar::PiecesStackLimitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiecesStackLimitInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiecesStackLimitInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PiggyInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PiggyInfo_default_instance_;
    new (ptr) ::PlaneWar::PiggyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiggyInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiggyInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PiggyReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PiggyReward_default_instance_;
    new (ptr) ::PlaneWar::PiggyReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiggyReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PiggyReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PlaneInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PlaneInfo_default_instance_;
    new (ptr) ::PlaneWar::PlaneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaneInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaneInfo_PlaneWar_2eproto}, {
      &scc_info_PlaneSpecEffect_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_PlaneSpecEffect_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PlaneSpecEffect_default_instance_;
    new (ptr) ::PlaneWar::PlaneSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaneSpecEffect_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlaneSpecEffect_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PlayerInfo_default_instance_;
    new (ptr) ::PlaneWar::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_PlayerInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_PlayerInfo_PlaneWar_2eproto}, {
      &scc_info_StateInfo_PlaneWar_2eproto.base,
      &scc_info_PiggyInfo_PlaneWar_2eproto.base,
      &scc_info_MissileInfo_PlaneWar_2eproto.base,
      &scc_info_PieceInfo_PlaneWar_2eproto.base,
      &scc_info_RouletteInfo_PlaneWar_2eproto.base,
      &scc_info_EffectInfo_PlaneWar_2eproto.base,
      &scc_info_Decimal_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_Poker_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_Poker_default_instance_;
    new (ptr) ::PlaneWar::Poker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Poker_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Poker_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PoolArenaLimit_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PoolArenaLimit_default_instance_;
    new (ptr) ::PlaneWar::PoolArenaLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolArenaLimit_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolArenaLimit_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_Pos_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_Pos_default_instance_;
    new (ptr) ::PlaneWar::Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pos_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PropsInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PropsInfo_default_instance_;
    new (ptr) ::PlaneWar::PropsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropsInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropsInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ProsInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ProsInfo_default_instance_;
    new (ptr) ::PlaneWar::ProsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProsInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProsInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_PurchaseResult_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_PurchaseResult_default_instance_;
    new (ptr) ::PlaneWar::PurchaseResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PurchaseResult_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PurchaseResult_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RankInfo_default_instance_;
    new (ptr) ::PlaneWar::RankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RankReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RankReward_default_instance_;
    new (ptr) ::PlaneWar::RankReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RankReward_PlaneWar_2eproto}, {
      &scc_info_MatchRewardItem_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_RankStatusInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RankStatusInfo_default_instance_;
    new (ptr) ::PlaneWar::RankStatusInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankStatusInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankStatusInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RankWareConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RankWareConfig_default_instance_;
    new (ptr) ::PlaneWar::RankWareConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankWareConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RankWareConfig_PlaneWar_2eproto}, {
      &scc_info_WareInfo_PlaneWar_2eproto.base,
      &scc_info_ExtraGradeRewardInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_ReceiveReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ReceiveReward_default_instance_;
    new (ptr) ::PlaneWar::ReceiveReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReceiveReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReceiveReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RedInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RedInfo_default_instance_;
    new (ptr) ::PlaneWar::RedInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RedOpenInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RedOpenInfo_default_instance_;
    new (ptr) ::PlaneWar::RedOpenInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedOpenInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedOpenInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RedRankPlayerInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RedRankPlayerInfo_default_instance_;
    new (ptr) ::PlaneWar::RedRankPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedRankPlayerInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedRankPlayerInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RedUpgradeInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RedUpgradeInfo_default_instance_;
    new (ptr) ::PlaneWar::RedUpgradeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedUpgradeInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedUpgradeInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ReplayConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ReplayConfig_default_instance_;
    new (ptr) ::PlaneWar::ReplayConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplayConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplayConfig_PlaneWar_2eproto}, {
      &scc_info_GlobalReplayConfig_PlaneWar_2eproto.base,
      &scc_info_PersonalReplayConfig_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_RoomInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RoomInfo_default_instance_;
    new (ptr) ::PlaneWar::RoomInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RoomInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RoomInfo_PlaneWar_2eproto}, {
      &scc_info_PlaneInfo_PlaneWar_2eproto.base,
      &scc_info_InteractionItem_PlaneWar_2eproto.base,
      &scc_info_RankStatusInfo_PlaneWar_2eproto.base,
      &scc_info_WingsInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_Roulette_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_Roulette_default_instance_;
    new (ptr) ::PlaneWar::Roulette();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roulette_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Roulette_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_RouletteInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_RouletteInfo_default_instance_;
    new (ptr) ::PlaneWar::RouletteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouletteInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouletteInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCActivityInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCActivityInfo_default_instance_;
    new (ptr) ::PlaneWar::SCActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCActivityInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCActivityInfo_PlaneWar_2eproto}, {
      &scc_info_JumpHighArena_PlaneWar_2eproto.base,
      &scc_info_PoolArenaLimit_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCAddMissedBullet_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCAddMissedBullet_default_instance_;
    new (ptr) ::PlaneWar::SCAddMissedBullet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCAddMissedBullet_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCAddMissedBullet_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCBuyPlane_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCBuyPlane_default_instance_;
    new (ptr) ::PlaneWar::SCBuyPlane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBuyPlane_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBuyPlane_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCBuyWeapon_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCBuyWeapon_default_instance_;
    new (ptr) ::PlaneWar::SCBuyWeapon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SCBuyWeapon_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SCBuyWeapon_PlaneWar_2eproto}, {
      &scc_info_WeaponInfo_PlaneWar_2eproto.base,
      &scc_info_PieceInfo_PlaneWar_2eproto.base,
      &scc_info_WeaponUseCondition_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCBuyWings_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCBuyWings_default_instance_;
    new (ptr) ::PlaneWar::SCBuyWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBuyWings_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBuyWings_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCChangeTable_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCChangeTable_default_instance_;
    new (ptr) ::PlaneWar::SCChangeTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChangeTable_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChangeTable_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCChestConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCChestConfig_default_instance_;
    new (ptr) ::PlaneWar::SCChestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCChestConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCChestConfig_PlaneWar_2eproto}, {
      &scc_info_ChestBrief_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCChestSetAutoSelect_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCChestSetAutoSelect_default_instance_;
    new (ptr) ::PlaneWar::SCChestSetAutoSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChestSetAutoSelect_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChestSetAutoSelect_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCChestSetEnable_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCChestSetEnable_default_instance_;
    new (ptr) ::PlaneWar::SCChestSetEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChestSetEnable_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChestSetEnable_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCClickStatic_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCClickStatic_default_instance_;
    new (ptr) ::PlaneWar::SCClickStatic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCClickStatic_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCClickStatic_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCCommonRedEnvelopeInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCCommonRedEnvelopeInfo_default_instance_;
    new (ptr) ::PlaneWar::SCCommonRedEnvelopeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCCommonRedEnvelopeInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCCommonRedEnvelopeInfo_PlaneWar_2eproto}, {
      &scc_info_CommonRedInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCConfirmWeaponExist_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCConfirmWeaponExist_default_instance_;
    new (ptr) ::PlaneWar::SCConfirmWeaponExist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCConfirmWeaponExist_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCConfirmWeaponExist_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCExistUnReceiveRankReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCExistUnReceiveRankReward_default_instance_;
    new (ptr) ::PlaneWar::SCExistUnReceiveRankReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCExistUnReceiveRankReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCExistUnReceiveRankReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCExplodeSettle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCExplodeSettle_default_instance_;
    new (ptr) ::PlaneWar::SCExplodeSettle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCExplodeSettle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCExplodeSettle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCFallIntoBlackHole_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCFallIntoBlackHole_default_instance_;
    new (ptr) ::PlaneWar::SCFallIntoBlackHole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCFallIntoBlackHole_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCFallIntoBlackHole_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCGainNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGainNotify_default_instance_;
    new (ptr) ::PlaneWar::SCGainNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGainNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGainNotify_PlaneWar_2eproto}, {
      &scc_info_Decimal_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGainSettle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGainSettle_default_instance_;
    new (ptr) ::PlaneWar::SCGainSettle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGainSettle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGainSettle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCGamePurchasePush_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGamePurchasePush_default_instance_;
    new (ptr) ::PlaneWar::SCGamePurchasePush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGamePurchasePush_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGamePurchasePush_PlaneWar_2eproto}, {
      &scc_info_PropsInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetAnimations_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetAnimations_default_instance_;
    new (ptr) ::PlaneWar::SCGetAnimations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetAnimations_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetAnimations_PlaneWar_2eproto}, {
      &scc_info_Animation_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetGradeRankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetGradeRankInfo_default_instance_;
    new (ptr) ::PlaneWar::SCGetGradeRankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetGradeRankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetGradeRankInfo_PlaneWar_2eproto}, {
      &scc_info_GradeRankInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetGradeRankList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetGradeRankList_default_instance_;
    new (ptr) ::PlaneWar::SCGetGradeRankList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetGradeRankList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetGradeRankList_PlaneWar_2eproto}, {
      &scc_info_GradeRankInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetGradeRewardInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetGradeRewardInfo_default_instance_;
    new (ptr) ::PlaneWar::SCGetGradeRewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetGradeRewardInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetGradeRewardInfo_PlaneWar_2eproto}, {
      &scc_info_GradeRewardInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetMatchTaskReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetMatchTaskReward_default_instance_;
    new (ptr) ::PlaneWar::SCGetMatchTaskReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetMatchTaskReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetMatchTaskReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCGetPoolLuckyReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetPoolLuckyReward_default_instance_;
    new (ptr) ::PlaneWar::SCGetPoolLuckyReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetPoolLuckyReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetPoolLuckyReward_PlaneWar_2eproto}, {
      &scc_info_CommonPropInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetTableUserInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetTableUserInfo_default_instance_;
    new (ptr) ::PlaneWar::SCGetTableUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCGetTableUserInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCGetTableUserInfo_PlaneWar_2eproto}, {
      &scc_info_PlayerInfo_PlaneWar_2eproto.base,
      &scc_info_GradeRankInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGetTaskInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetTaskInfo_default_instance_;
    new (ptr) ::PlaneWar::SCGetTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetTaskInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetTaskInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCGetTaskReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetTaskReward_default_instance_;
    new (ptr) ::PlaneWar::SCGetTaskReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetTaskReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetTaskReward_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCGetVideo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGetVideo_default_instance_;
    new (ptr) ::PlaneWar::SCGetVideo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetVideo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetVideo_PlaneWar_2eproto}, {
      &scc_info_MonsterPath_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGiftExpireNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGiftExpireNotify_default_instance_;
    new (ptr) ::PlaneWar::SCGiftExpireNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGiftExpireNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGiftExpireNotify_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCGiftList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGiftList_default_instance_;
    new (ptr) ::PlaneWar::SCGiftList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGiftList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGiftList_PlaneWar_2eproto}, {
      &scc_info_GiftInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGrantCommonRedEnvelopeRank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGrantCommonRedEnvelopeRank_default_instance_;
    new (ptr) ::PlaneWar::SCGrantCommonRedEnvelopeRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGrantCommonRedEnvelopeRank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGrantCommonRedEnvelopeRank_PlaneWar_2eproto}, {
      &scc_info_GrantRankItem_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCGrantCommonRedEnvelopeRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCGrantCommonRedEnvelopeRecord_default_instance_;
    new (ptr) ::PlaneWar::SCGrantCommonRedEnvelopeRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGrantCommonRedEnvelopeRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGrantCommonRedEnvelopeRecord_PlaneWar_2eproto}, {
      &scc_info_GrantRecord_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCHit_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCHit_default_instance_;
    new (ptr) ::PlaneWar::SCHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_SCHit_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_SCHit_PlaneWar_2eproto}, {
      &scc_info_BuffInfo_PlaneWar_2eproto.base,
      &scc_info_TriggerBullet_PlaneWar_2eproto.base,
      &scc_info_DropPoker_PlaneWar_2eproto.base,
      &scc_info_Roulette_PlaneWar_2eproto.base,
      &scc_info_TreasureInfo_PlaneWar_2eproto.base,
      &scc_info_WeaponInfo_PlaneWar_2eproto.base,
      &scc_info_GunInfo_PlaneWar_2eproto.base,
      &scc_info_FortuneWheelInfo_PlaneWar_2eproto.base,
      &scc_info_ToadInfo_PlaneWar_2eproto.base,
      &scc_info_FlameInfo_PlaneWar_2eproto.base,
      &scc_info_BeeInfo_PlaneWar_2eproto.base,
      &scc_info_ConnMonsterInfo_PlaneWar_2eproto.base,
      &scc_info_SpecEffect_PlaneWar_2eproto.base,
      &scc_info_DiceInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCInteraction_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCInteraction_default_instance_;
    new (ptr) ::PlaneWar::SCInteraction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCInteraction_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCInteraction_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCLock_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCLock_default_instance_;
    new (ptr) ::PlaneWar::SCLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLock_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLock_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCLogin_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCLogin_default_instance_;
    new (ptr) ::PlaneWar::SCLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLogin_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLogin_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCLogout_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCLogout_default_instance_;
    new (ptr) ::PlaneWar::SCLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLogout_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLogout_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCMatchBrief_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMatchBrief_default_instance_;
    new (ptr) ::PlaneWar::SCMatchBrief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCMatchBrief_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCMatchBrief_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCMatchDetail_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMatchDetail_default_instance_;
    new (ptr) ::PlaneWar::SCMatchDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SCMatchDetail_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SCMatchDetail_PlaneWar_2eproto}, {
      &scc_info_MatchSubInfo_PlaneWar_2eproto.base,
      &scc_info_MatchRankInfo_PlaneWar_2eproto.base,
      &scc_info_MatchTask_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCMatchReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMatchReward_default_instance_;
    new (ptr) ::PlaneWar::SCMatchReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCMatchReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCMatchReward_PlaneWar_2eproto}, {
      &scc_info_RankReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCMatchRewardNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMatchRewardNotify_default_instance_;
    new (ptr) ::PlaneWar::SCMatchRewardNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCMatchRewardNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCMatchRewardNotify_PlaneWar_2eproto}, {
      &scc_info_MatchRankInfo_PlaneWar_2eproto.base,
      &scc_info_MyMatchReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCModRatio_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCModRatio_default_instance_;
    new (ptr) ::PlaneWar::SCModRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCModRatio_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCModRatio_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCMonsterCall_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMonsterCall_default_instance_;
    new (ptr) ::PlaneWar::SCMonsterCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCMonsterCall_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCMonsterCall_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCMonsterDestory_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMonsterDestory_default_instance_;
    new (ptr) ::PlaneWar::SCMonsterDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCMonsterDestory_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCMonsterDestory_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCMonsterSpawn_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCMonsterSpawn_default_instance_;
    new (ptr) ::PlaneWar::SCMonsterSpawn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCMonsterSpawn_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCMonsterSpawn_PlaneWar_2eproto}, {
      &scc_info_MonsterInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCNoticeHallProsChange_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCNoticeHallProsChange_default_instance_;
    new (ptr) ::PlaneWar::SCNoticeHallProsChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNoticeHallProsChange_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNoticeHallProsChange_PlaneWar_2eproto}, {
      &scc_info_ProsInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCNoticeInfoChange_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCNoticeInfoChange_default_instance_;
    new (ptr) ::PlaneWar::SCNoticeInfoChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNoticeInfoChange_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNoticeInfoChange_PlaneWar_2eproto}, {
      &scc_info_MissileInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCNoticePropsOverdue_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCNoticePropsOverdue_default_instance_;
    new (ptr) ::PlaneWar::SCNoticePropsOverdue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCNoticePropsOverdue_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCNoticePropsOverdue_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCNoticeTimingMonster_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCNoticeTimingMonster_default_instance_;
    new (ptr) ::PlaneWar::SCNoticeTimingMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNoticeTimingMonster_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNoticeTimingMonster_PlaneWar_2eproto}, {
      &scc_info_TimingMonster_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenChest_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCOpenChest_default_instance_;
    new (ptr) ::PlaneWar::SCOpenChest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenChest_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenChest_PlaneWar_2eproto}, {
      &scc_info_OpenChestReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenCommonRedEnvelope_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCOpenCommonRedEnvelope_default_instance_;
    new (ptr) ::PlaneWar::SCOpenCommonRedEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCOpenCommonRedEnvelope_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCOpenCommonRedEnvelope_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCOpenCommonRedEnvelopeRank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCOpenCommonRedEnvelopeRank_default_instance_;
    new (ptr) ::PlaneWar::SCOpenCommonRedEnvelopeRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenCommonRedEnvelopeRank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenCommonRedEnvelopeRank_PlaneWar_2eproto}, {
      &scc_info_OpenRankItem_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenCommonRedEnvelopeRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCOpenCommonRedEnvelopeRecord_default_instance_;
    new (ptr) ::PlaneWar::SCOpenCommonRedEnvelopeRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenCommonRedEnvelopeRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenCommonRedEnvelopeRecord_PlaneWar_2eproto}, {
      &scc_info_OpenRecord_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenPiggyBank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCOpenPiggyBank_default_instance_;
    new (ptr) ::PlaneWar::SCOpenPiggyBank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenPiggyBank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenPiggyBank_PlaneWar_2eproto}, {
      &scc_info_PiggyReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenRedEnvelope_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCOpenRedEnvelope_default_instance_;
    new (ptr) ::PlaneWar::SCOpenRedEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenRedEnvelope_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenRedEnvelope_PlaneWar_2eproto}, {
      &scc_info_RedUpgradeInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCPersonalPoolChangeNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPersonalPoolChangeNotify_default_instance_;
    new (ptr) ::PlaneWar::SCPersonalPoolChangeNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPersonalPoolChangeNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPersonalPoolChangeNotify_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCPersonalPoolInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPersonalPoolInfo_default_instance_;
    new (ptr) ::PlaneWar::SCPersonalPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCPersonalPoolInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCPersonalPoolInfo_PlaneWar_2eproto}, {
      &scc_info_PersonalPoolLevelInfo_PlaneWar_2eproto.base,
      &scc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCPiggyBankChangeNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPiggyBankChangeNotify_default_instance_;
    new (ptr) ::PlaneWar::SCPiggyBankChangeNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPiggyBankChangeNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPiggyBankChangeNotify_PlaneWar_2eproto}, {
      &scc_info_PiggyInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCPiggyBankInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPiggyBankInfo_default_instance_;
    new (ptr) ::PlaneWar::SCPiggyBankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPiggyBankInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPiggyBankInfo_PlaneWar_2eproto}, {
      &scc_info_PiggyInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCPiggyBankOpenFinish_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPiggyBankOpenFinish_default_instance_;
    new (ptr) ::PlaneWar::SCPiggyBankOpenFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPiggyBankOpenFinish_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPiggyBankOpenFinish_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCPlanePosSync_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPlanePosSync_default_instance_;
    new (ptr) ::PlaneWar::SCPlanePosSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPlanePosSync_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPlanePosSync_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCPreHit_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCPreHit_default_instance_;
    new (ptr) ::PlaneWar::SCPreHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPreHit_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPreHit_PlaneWar_2eproto}, {
      &scc_info_HitMode_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCQueryPackageMarquee_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCQueryPackageMarquee_default_instance_;
    new (ptr) ::PlaneWar::SCQueryPackageMarquee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCQueryPackageMarquee_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCQueryPackageMarquee_PlaneWar_2eproto}, {
      &scc_info_PackageMarquee_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCQueryPackagePurchase_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCQueryPackagePurchase_default_instance_;
    new (ptr) ::PlaneWar::SCQueryPackagePurchase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCQueryPackagePurchase_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCQueryPackagePurchase_PlaneWar_2eproto}, {
      &scc_info_PurchaseResult_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCRankList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRankList_default_instance_;
    new (ptr) ::PlaneWar::SCRankList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCRankList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCRankList_PlaneWar_2eproto}, {
      &scc_info_RankInfo_PlaneWar_2eproto.base,
      &scc_info_MyRankInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCRankSeasonStatus_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRankSeasonStatus_default_instance_;
    new (ptr) ::PlaneWar::SCRankSeasonStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCRankSeasonStatus_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCRankSeasonStatus_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCRankUpgrade_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRankUpgrade_default_instance_;
    new (ptr) ::PlaneWar::SCRankUpgrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRankUpgrade_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRankUpgrade_PlaneWar_2eproto}, {
      &scc_info_GradeRankInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCReady_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCReady_default_instance_;
    new (ptr) ::PlaneWar::SCReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCReady_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCReady_PlaneWar_2eproto}, {
      &scc_info_PlayerInfo_PlaneWar_2eproto.base,
      &scc_info_RoomInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCReceiveExtraGradeReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCReceiveExtraGradeReward_default_instance_;
    new (ptr) ::PlaneWar::SCReceiveExtraGradeReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCReceiveExtraGradeReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCReceiveExtraGradeReward_PlaneWar_2eproto}, {
      &scc_info_ReceiveReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCReceiveGradeReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCReceiveGradeReward_default_instance_;
    new (ptr) ::PlaneWar::SCReceiveGradeReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCReceiveGradeReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCReceiveGradeReward_PlaneWar_2eproto}, {
      &scc_info_ReceiveReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCRedEnvelopeInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRedEnvelopeInfo_default_instance_;
    new (ptr) ::PlaneWar::SCRedEnvelopeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRedEnvelopeInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRedEnvelopeInfo_PlaneWar_2eproto}, {
      &scc_info_RedInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCRedEnvelopeOpStatusNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRedEnvelopeOpStatusNotify_default_instance_;
    new (ptr) ::PlaneWar::SCRedEnvelopeOpStatusNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRedEnvelopeOpStatusNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRedEnvelopeOpStatusNotify_PlaneWar_2eproto}, {
      &scc_info_RedUpgradeInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCRedEnvelopePoint_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRedEnvelopePoint_default_instance_;
    new (ptr) ::PlaneWar::SCRedEnvelopePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRedEnvelopePoint_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRedEnvelopePoint_PlaneWar_2eproto}, {
      &scc_info_RedOpenInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCRoomInfoChangeNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCRoomInfoChangeNotify_default_instance_;
    new (ptr) ::PlaneWar::SCRoomInfoChangeNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCRoomInfoChangeNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCRoomInfoChangeNotify_PlaneWar_2eproto}, {
      &scc_info_RoomInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCScratchCardList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCScratchCardList_default_instance_;
    new (ptr) ::PlaneWar::SCScratchCardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCScratchCardList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCScratchCardList_PlaneWar_2eproto}, {
      &scc_info_ScratchInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSelectTitle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSelectTitle_default_instance_;
    new (ptr) ::PlaneWar::SCSelectTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSelectTitle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSelectTitle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSelfVideoRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSelfVideoRecord_default_instance_;
    new (ptr) ::PlaneWar::SCSelfVideoRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSelfVideoRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSelfVideoRecord_PlaneWar_2eproto}, {
      &scc_info_SelfVideoInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSetPersonalPoolEnable_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSetPersonalPoolEnable_default_instance_;
    new (ptr) ::PlaneWar::SCSetPersonalPoolEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetPersonalPoolEnable_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetPersonalPoolEnable_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSetPlane_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSetPlane_default_instance_;
    new (ptr) ::PlaneWar::SCSetPlane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetPlane_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetPlane_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSetWings_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSetWings_default_instance_;
    new (ptr) ::PlaneWar::SCSetWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetWings_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetWings_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCShot_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCShot_default_instance_;
    new (ptr) ::PlaneWar::SCShot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCShot_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCShot_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCStateEnd_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCStateEnd_default_instance_;
    new (ptr) ::PlaneWar::SCStateEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCStateEnd_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCStateEnd_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCStateForceSettle_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCStateForceSettle_default_instance_;
    new (ptr) ::PlaneWar::SCStateForceSettle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCStateForceSettle_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCStateForceSettle_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSwitchBackGround_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSwitchBackGround_default_instance_;
    new (ptr) ::PlaneWar::SCSwitchBackGround();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSwitchBackGround_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSwitchBackGround_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncAnimation_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncAnimation_default_instance_;
    new (ptr) ::PlaneWar::SCSyncAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncAnimation_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncAnimation_PlaneWar_2eproto}, {
      &scc_info_Animation_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncBlackHolePos_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncBlackHolePos_default_instance_;
    new (ptr) ::PlaneWar::SCSyncBlackHolePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncBlackHolePos_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncBlackHolePos_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncConfigs_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncConfigs_default_instance_;
    new (ptr) ::PlaneWar::SCSyncConfigs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_SCSyncConfigs_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_SCSyncConfigs_PlaneWar_2eproto}, {
      &scc_info_FortuneConfig_PlaneWar_2eproto.base,
      &scc_info_BeeConfig_PlaneWar_2eproto.base,
      &scc_info_ReplayConfig_PlaneWar_2eproto.base,
      &scc_info_GradeRankConfig_PlaneWar_2eproto.base,
      &scc_info_RankWareConfig_PlaneWar_2eproto.base,
      &scc_info_DiceConfig_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncMonsterInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncMonsterInfo_default_instance_;
    new (ptr) ::PlaneWar::SCSyncMonsterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncMonsterInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncMonsterInfo_PlaneWar_2eproto}, {
      &scc_info_MonsterPath_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncPropsToHall_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncPropsToHall_default_instance_;
    new (ptr) ::PlaneWar::SCSyncPropsToHall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncPropsToHall_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncPropsToHall_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncTextConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncTextConfig_default_instance_;
    new (ptr) ::PlaneWar::SCSyncTextConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncTextConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncTextConfig_PlaneWar_2eproto}, {
      &scc_info_TextInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncTime_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncTime_default_instance_;
    new (ptr) ::PlaneWar::SCSyncTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncTime_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncTime_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncWeaponState_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCSyncWeaponState_default_instance_;
    new (ptr) ::PlaneWar::SCSyncWeaponState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncWeaponState_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncWeaponState_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCTitleActiveNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCTitleActiveNotify_default_instance_;
    new (ptr) ::PlaneWar::SCTitleActiveNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTitleActiveNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTitleActiveNotify_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCTitleList_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCTitleList_default_instance_;
    new (ptr) ::PlaneWar::SCTitleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTitleList_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTitleList_PlaneWar_2eproto}, {
      &scc_info_TitleInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCTransform_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCTransform_default_instance_;
    new (ptr) ::PlaneWar::SCTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTransform_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTransform_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCUpdateBulletData_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUpdateBulletData_default_instance_;
    new (ptr) ::PlaneWar::SCUpdateBulletData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUpdateBulletData_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUpdateBulletData_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCUpdateChestStatus_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUpdateChestStatus_default_instance_;
    new (ptr) ::PlaneWar::SCUpdateChestStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUpdateChestStatus_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUpdateChestStatus_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCUpgradePoolReward_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUpgradePoolReward_default_instance_;
    new (ptr) ::PlaneWar::SCUpgradePoolReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUpgradePoolReward_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUpgradePoolReward_PlaneWar_2eproto}, {
      &scc_info_PersonalPoolReward_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCUpgradeRedEnvelope_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUpgradeRedEnvelope_default_instance_;
    new (ptr) ::PlaneWar::SCUpgradeRedEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUpgradeRedEnvelope_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUpgradeRedEnvelope_PlaneWar_2eproto}, {
      &scc_info_RedUpgradeInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCUseMissile_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUseMissile_default_instance_;
    new (ptr) ::PlaneWar::SCUseMissile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUseMissile_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUseMissile_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCUseMissileBatch_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUseMissileBatch_default_instance_;
    new (ptr) ::PlaneWar::SCUseMissileBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUseMissileBatch_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUseMissileBatch_PlaneWar_2eproto}, {
      &scc_info_MissileInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCUseRoulette_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUseRoulette_default_instance_;
    new (ptr) ::PlaneWar::SCUseRoulette();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUseRoulette_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUseRoulette_PlaneWar_2eproto}, {
      &scc_info_Roulette_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCUseScratchCard_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUseScratchCard_default_instance_;
    new (ptr) ::PlaneWar::SCUseScratchCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUseScratchCard_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUseScratchCard_PlaneWar_2eproto}, {
      &scc_info_ScratchInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCUserEnterNotify_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCUserEnterNotify_default_instance_;
    new (ptr) ::PlaneWar::SCUserEnterNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserEnterNotify_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserEnterNotify_PlaneWar_2eproto}, {
      &scc_info_PlayerInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCVerifySeasonChange_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCVerifySeasonChange_default_instance_;
    new (ptr) ::PlaneWar::SCVerifySeasonChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCVerifySeasonChange_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCVerifySeasonChange_PlaneWar_2eproto}, {
      &scc_info_GradeRankInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCVideoRank_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCVideoRank_default_instance_;
    new (ptr) ::PlaneWar::SCVideoRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCVideoRank_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCVideoRank_PlaneWar_2eproto}, {
      &scc_info_GlobalVideoInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCWaterDropInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCWaterDropInfo_default_instance_;
    new (ptr) ::PlaneWar::SCWaterDropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCWaterDropInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCWaterDropInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SCWeaponEarnRecord_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCWeaponEarnRecord_default_instance_;
    new (ptr) ::PlaneWar::SCWeaponEarnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCWeaponEarnRecord_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCWeaponEarnRecord_PlaneWar_2eproto}, {
      &scc_info_EarnRecord_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SCWeaponPieceInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SCWeaponPieceInfo_default_instance_;
    new (ptr) ::PlaneWar::SCWeaponPieceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SCWeaponPieceInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SCWeaponPieceInfo_PlaneWar_2eproto}, {
      &scc_info_PieceInfo_PlaneWar_2eproto.base,
      &scc_info_WeaponConfig_PlaneWar_2eproto.base,
      &scc_info_PiecesStackLimitInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SC_SceneInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SC_SceneInfo_default_instance_;
    new (ptr) ::PlaneWar::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ScratchInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ScratchInfo_default_instance_;
    new (ptr) ::PlaneWar::ScratchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScratchInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScratchInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SelfVideoInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SelfVideoInfo_default_instance_;
    new (ptr) ::PlaneWar::SelfVideoInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelfVideoInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SelfVideoInfo_PlaneWar_2eproto}, {
      &scc_info_VideoCommon_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_SettleInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SettleInfo_default_instance_;
    new (ptr) ::PlaneWar::SettleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettleInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_SpecEffect_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_SpecEffect_default_instance_;
    new (ptr) ::PlaneWar::SpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecEffect_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpecEffect_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_StateInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_StateInfo_default_instance_;
    new (ptr) ::PlaneWar::StateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_StateInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_StateInfo_PlaneWar_2eproto}, {
      &scc_info_BuffInfo_PlaneWar_2eproto.base,
      &scc_info_BlackHoleInfo_PlaneWar_2eproto.base,
      &scc_info_FormInfo_PlaneWar_2eproto.base,
      &scc_info_LockInfo_PlaneWar_2eproto.base,
      &scc_info_WeaponInfo_PlaneWar_2eproto.base,
      &scc_info_SettleInfo_PlaneWar_2eproto.base,
      &scc_info_GunInfo_PlaneWar_2eproto.base,
      &scc_info_FlameInfo_PlaneWar_2eproto.base,
      &scc_info_SpecEffect_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_TextInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_TextInfo_default_instance_;
    new (ptr) ::PlaneWar::TextInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_TimingMonster_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_TimingMonster_default_instance_;
    new (ptr) ::PlaneWar::TimingMonster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingMonster_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimingMonster_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_TitleInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_TitleInfo_default_instance_;
    new (ptr) ::PlaneWar::TitleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TitleInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_ToadInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_ToadInfo_default_instance_;
    new (ptr) ::PlaneWar::ToadInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToadInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ToadInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_TreasureInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_TreasureInfo_default_instance_;
    new (ptr) ::PlaneWar::TreasureInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreasureInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TreasureInfo_PlaneWar_2eproto}, {
      &scc_info_FakeTresureInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_TriggerBullet_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_TriggerBullet_default_instance_;
    new (ptr) ::PlaneWar::TriggerBullet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TriggerBullet_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TriggerBullet_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_VideoCommon_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_VideoCommon_default_instance_;
    new (ptr) ::PlaneWar::VideoCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoCommon_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoCommon_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_WareGivingInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WareGivingInfo_default_instance_;
    new (ptr) ::PlaneWar::WareGivingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WareGivingInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WareGivingInfo_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_WareInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WareInfo_default_instance_;
    new (ptr) ::PlaneWar::WareInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WareInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WareInfo_PlaneWar_2eproto}, {
      &scc_info_WareGivingInfo_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_WeaponConfig_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WeaponConfig_default_instance_;
    new (ptr) ::PlaneWar::WeaponConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeaponConfig_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WeaponConfig_PlaneWar_2eproto}, {
      &scc_info_WeaponUseCondition_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_WeaponInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WeaponInfo_default_instance_;
    new (ptr) ::PlaneWar::WeaponInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeaponInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WeaponInfo_PlaneWar_2eproto}, {
      &scc_info_WeaponState_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_WeaponState_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WeaponState_default_instance_;
    new (ptr) ::PlaneWar::WeaponState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeaponState_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WeaponState_PlaneWar_2eproto}, {
      &scc_info_Pos_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_WeaponUseCondition_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WeaponUseCondition_default_instance_;
    new (ptr) ::PlaneWar::WeaponUseCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeaponUseCondition_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeaponUseCondition_PlaneWar_2eproto}, {}};

static void InitDefaultsscc_info_WingsInfo_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WingsInfo_default_instance_;
    new (ptr) ::PlaneWar::WingsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WingsInfo_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WingsInfo_PlaneWar_2eproto}, {
      &scc_info_WingsSpecEffect_PlaneWar_2eproto.base,}};

static void InitDefaultsscc_info_WingsSpecEffect_PlaneWar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PlaneWar::_WingsSpecEffect_default_instance_;
    new (ptr) ::PlaneWar::WingsSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WingsSpecEffect_PlaneWar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WingsSpecEffect_PlaneWar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PlaneWar_2eproto[300];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_PlaneWar_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PlaneWar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PlaneWar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Decimal, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Decimal, denom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SC_SceneInfo, bet_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLogin, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLogin, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLogin, sceneid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLogin, arenaid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLogout, logouttype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLogout, chair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonPropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonPropInfo, propid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonPropInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Pos, x_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Pos, y_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Pos, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, buffuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, iscrit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, compose_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, speedupratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BuffInfo, originuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, iscrit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, monsterlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BlackHoleInfo, originuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FormInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FormInfo, form_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FormInfo, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::LockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::LockInfo, lockuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::LockInfo, colliderindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::HitMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::HitMode, hittype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::HitMode, hitdirection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponState, step_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponState, position_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponState, duration_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponState, movemode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SettleInfo, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SettleInfo, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SettleInfo, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SettleInfo, weaponid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GunInfo, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GunInfo, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GunInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GunInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FlameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FlameInfo, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FlameInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FlameInfo, sourceuidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeInfo, ratiolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeInfo, totalratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, weaponid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, weaponname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, weaponratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponInfo, weaponstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, costmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, earnmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, violence_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, duration_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, maxduration_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SpecEffect, sourcetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Dice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Dice, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Dice, tp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Dice, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceInfo, mode_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceInfo, mul_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceInfo, dicelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, isback_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, bufflist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, blackholelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, forminfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, lockinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, weaponinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, propweaponinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, settlelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, guninfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, flameinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::StateInfo, speceffect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MissileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MissileInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MissileInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, rewardvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, accumulatingvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, settletime_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, settlethreshold_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, maxreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyInfo, nextmaxreward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ArenaPieceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ArenaPieceInfo, arenaid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ArenaPieceInfo, havepiece_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ArenaPieceInfo, needpiece_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ArenaPieceInfo, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PieceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PieceInfo, arenainfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PieceInfo, havediamond_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PieceInfo, needdiamond_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PieceInfo, piecestacklimit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PieceInfo, exchangepiece_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RouletteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RouletteInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RouletteInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EffectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EffectInfo, effectid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EffectInfo, isglobal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, planeid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, playername_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, vip_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, stateinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, memberdays_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, lastviplevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, scratchcardnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, ticket_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, ratiounlock_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, piggyinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, missilelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, callnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, selectedtitle_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, weaponpieceinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, effectid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, roulettelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, wingsid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, effectinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, currentrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, star_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, islastrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlayerInfo, redpacket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, ratiolimit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, hitchangerate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, moneychangerate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, violencerate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, speedrate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneSpecEffect, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsSpecEffect, speedrate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsSpecEffect, ratiolimit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsSpecEffect, hitchangerate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsSpecEffect, moneychangerate_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsSpecEffect, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, planeid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, isvip_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, viplevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, ismember_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, istasklock_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, requireact_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, planespeceffect_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, rankflag_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, price_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PlaneInfo, buff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::InteractionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::InteractionItem, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::InteractionItem, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankStatusInfo, rankenable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankStatusInfo, allowtypelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, wingsid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, wingsspeceffect_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, rankflag_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, price_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WingsInfo, buff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, planelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, scratchcardenable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, interactionlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, piggybankenable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, personalpoolenable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, rewardmonsterlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, rankstatus_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, wingslist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RoomInfo, ratiolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReady, playerlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReady, roominfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUserEnterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUserEnterNotify, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterInfo, monstertype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterInfo, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterInfo, isconnect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterSpawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterSpawn, configid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterSpawn, monsterlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterSpawn, iscall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSShot, angle_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSShot, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSShot, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSShot, scatter_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSShot, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCShot, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCShot, angle_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCShot, score_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCShot, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCShot, scatter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLock, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSLock, colliderindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLock, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLock, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCLock, colliderindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Poker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Poker, value_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Poker, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropPoker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropPoker, pokerlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropPoker, dice_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropPoker, kind_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropPoker, kindmultiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, subtype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, params_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, params2_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, generation_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, pos_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, delay_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, range_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, speed_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, monetary_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, destroydelay_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TriggerBullet, hitratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Roulette, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Roulette, outerindex_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Roulette, innerindex_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Roulette, outerround_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Roulette, innerround_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropBuff, buffuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropBuff, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropBuff, compose_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropBuff, desc_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DropBuff, speedupratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FakeTresureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FakeTresureInfo, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FakeTresureInfo, propid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FakeTresureInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, showtype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, propid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, faketype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TreasureInfo, fakeinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelInfo, stage_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelInfo, next_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelInfo, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ToadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ToadInfo, ratiolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ToadInfo, critical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneConfig, fortunewheelinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeConfig, alist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeConfig, blist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::BeeConfig, clist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonReplayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonReplayConfig, maxlen_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonReplayConfig, limitreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonReplayConfig, limitmul_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalReplayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalReplayConfig, commonreplayconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalReplayConfig, refreshtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalReplayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalReplayConfig, commonreplayconfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReplayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReplayConfig, globalreplayconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReplayConfig, personalreplayconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReplayConfig, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ConnMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ConnMonsterInfo, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ConnMonsterInfo, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ConnMonsterInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ConnMonsterInfo, connmonsterlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, generation_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSHit, deductedmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, iscaptured_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, earn_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, score_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, basevalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, multiplelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, dropbufflist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, triggerbullet_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, droppoker_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, roulette_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, stage_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, dropcard_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, dropcall_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, dropweaponpiece_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, treasurelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, weaponid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, weaponinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, guninfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, fortunewheellist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, toadinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, flameinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, beeinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, connmonsterinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, speceffect_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, diceinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCHit, isprop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSMonsterDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSMonsterDestory, monsteruid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSTransform, form_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTransform, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTransform, form_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPlanePosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPlanePosSync, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPlanePosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPlanePosSync, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPlanePosSync, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateEnd, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateEnd, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateEnd, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSModRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSModRatio, modlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCModRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCModRatio, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCModRatio, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCModRatio, isunlock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, source_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, curmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, gain_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, curticket_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, changeticket_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, changediamond_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, curdiamond_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainNotify, curredpacket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainSettle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainSettle, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainSettle, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGainSettle, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSetPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSetPlane, planeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetPlane, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetPlane, planeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSwitchBackGround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSwitchBackGround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSwitchBackGround, chair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, monster_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, configid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, stepindex_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, roadindex_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, movet_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, dotindex_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, delay_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MonsterPath, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncMonsterInfo, createdpathlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ScratchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ScratchInfo, base_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ScratchInfo, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSScratchCardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCScratchCardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCScratchCardList, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCScratchCardList, firstcard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseScratchCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseScratchCard, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseScratchCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseScratchCard, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseScratchCard, cardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseScratchCard, total_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseScratchCard, remain_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseScratchCard, curmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSExplodeSettle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSExplodeSettle, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExplodeSettle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExplodeSettle, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExplodeSettle, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExplodeSettle, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExplodeSettle, remain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSFallIntoBlackHole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSFallIntoBlackHole, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSFallIntoBlackHole, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCFallIntoBlackHole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCFallIntoBlackHole, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCFallIntoBlackHole, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCFallIntoBlackHole, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncBlackHolePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncBlackHolePos, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncBlackHolePos, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncBlackHolePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncBlackHolePos, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncBlackHolePos, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncBlackHolePos, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSInteraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSInteraction, targetchair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSInteraction, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCInteraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCInteraction, sourcechair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCInteraction, targetchair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCInteraction, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCInteraction, cooldown_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCInteraction, curmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, isopen_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, vip_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, coin_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, gametime_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, tips_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::JumpHighArena, monsterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PoolArenaLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PoolArenaLimit, level_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PoolArenaLimit, arena_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCActivityInfo, jump_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCActivityInfo, limit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCActivityInfo, poollimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetTaskReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskReward, gunratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskReward, award_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskReward, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, gunratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, curnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, totalnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, viplevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, isunlock_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, award_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, isvipunlock_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTaskInfo, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeInfoChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeInfoChange, iscompletetask_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeInfoChange, missilelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeInfoChange, callnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ProsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ProsInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ProsInfo, change_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ProsInfo, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeHallProsChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeHallProsChange, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeHallProsChange, proslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TimingMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TimingMonster, sec_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TimingMonster, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeTimingMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticeTimingMonster, monster_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPiggyBankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPiggyBankInfo, isopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankInfo, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankInfo, isopen_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankInfo, piggyinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyReward, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiggyReward, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenPiggyBank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenPiggyBank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenPiggyBank, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenPiggyBank, rewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenPiggyBank, curmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPiggyBankOpenFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankOpenFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankOpenFinish, chair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPiggyBankChangeNotify, piggyinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSetPersonalPoolEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSetPersonalPoolEnable, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetPersonalPoolEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetPersonalPoolEnable, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPersonalPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPersonalPoolInfo, isopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolReward, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolReward, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolReward, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolReward, clientid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolReward, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLevelInfo, level_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLevelInfo, targetvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLevelInfo, rewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLevelInfo, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLuckyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLuckyInfo, total_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PersonalPoolLuckyInfo, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, isopen_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, poolvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, maxvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, curlevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, levellist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolInfo, luckyinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSDrawPersonalPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSDrawPersonalPool, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSDrawPersonalPool, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSDrawPersonalPool, missreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSDrawPersonalPool, curmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSDrawPersonalPool, upgradecost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpgradePoolReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpgradePoolReward, isupgrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, result_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, curmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, basereward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, extrareward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradePoolReward, addluckyvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetPoolLuckyReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetPoolLuckyReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetPoolLuckyReward, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetPoolLuckyReward, curmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetPoolLuckyReward, cost_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetPoolLuckyReward, rewardlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolChangeNotify, enable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolChangeNotify, curvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolChangeNotify, curlevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolChangeNotify, maxvalue_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPersonalPoolChangeNotify, targetvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseMissile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseMissile, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissile, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissile, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissile, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissile, remainnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissile, curmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSMonsterCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterCall, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterCall, count_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMonsterCall, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSClickStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSClickStatic, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCClickStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankInfo, point_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankInfo, icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyRankInfo, rank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyRankInfo, point_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyRankInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyRankInfo, icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSRankList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSRankList, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankList, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankList, rank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankList, myrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankList, lasttop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TitleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TitleInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TitleInfo, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TitleInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TitleInfo, endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTitleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTitleList, titlelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTitleList, selectedtitleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelectTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelectTitle, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSelectTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSelectTitle, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSelectTitle, chair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTitleActiveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCTitleActiveNotify, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRoomInfoChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRoomInfoChangeNotify, roominfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSMatchBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, matchtype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, matchname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, countdown_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, totalnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, rewardnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, myrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, mypoint_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchBrief, nextrankpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSMatchDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchSubInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchSubInfo, inmatch_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchSubInfo, submatchname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchSubInfo, jackpot_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchSubInfo, totalnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRewardItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRewardItem, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRewardItem, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, point_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, rank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, pointbonus_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, moneybonus_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchRankInfo, rewardlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchTask, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchTask, target_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MatchTask, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, subinfolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, ranklist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, myrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, tiplist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, luckystage_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchDetail, tasklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSMatchReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankReward, from_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankReward, to_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankReward, rewardlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchReward, rankrewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchReward, luckyreward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyMatchReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyMatchReward, rank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyMatchReward, myreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyMatchReward, bonus_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::MyMatchReward, luckyreward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchRewardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchRewardNotify, rewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCMatchRewardNotify, myreward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGiftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GiftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GiftInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GiftInfo, pointbonus_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GiftInfo, moneybonus_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GiftInfo, canbuy_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GiftInfo, buycountdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGiftList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGiftList, giftlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGiftExpireNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGiftExpireNotify, giftid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGiftExpireNotify, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetMatchTaskReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetMatchTaskReward, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetMatchTaskReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetMatchTaskReward, index_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetMatchTaskReward, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponUseCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponUseCondition, viplevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponConfig, weaponid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponConfig, name_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WeaponConfig, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSWeaponPieceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSWeaponPieceInfo, isbrowsing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiecesStackLimitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiecesStackLimitInfo, fromviplevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiecesStackLimitInfo, toviplevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PiecesStackLimitInfo, stacknum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponPieceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponPieceInfo, isbrowsing_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponPieceInfo, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponPieceInfo, pieceinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponPieceInfo, configlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponPieceInfo, stacklimitlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSBuyWeapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWeapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWeapon, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWeapon, weaponid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWeapon, weaponinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWeapon, pieceinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWeapon, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, nick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, icon_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, viplevel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, weaponname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, time_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::EarnRecord, earn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSWeaponEarnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSWeaponEarnRecord, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponEarnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponEarnRecord, recordlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWeaponEarnRecord, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSStateForceSettle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSStateForceSettle, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateForceSettle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateForceSettle, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateForceSettle, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateForceSettle, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCStateForceSettle, remain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCAddMissedBullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCAddMissedBullet, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCAddMissedBullet, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCAddMissedBullet, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCAddMissedBullet, addnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpdateBulletData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpdateBulletData, angle_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpdateBulletData, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpdateBulletData, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpdateBulletData, confid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpdateBulletData, isshooting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, angle_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, sourceuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, confid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateBulletData, isshooting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseMissileBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissileBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissileBatch, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissileBatch, totalreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissileBatch, curmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseMissileBatch, remainmissile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncPropsToHall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncPropsToHall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSChangeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChangeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseRoulette, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUseRoulette, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, costnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, roulette_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUseRoulette, curmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSRedEnvelopePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedOpenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedOpenInfo, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedOpenInfo, unlockviplevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopePoint, curpoint_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopePoint, maxpoint_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopePoint, costpoint_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopePoint, redopenlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSRedEnvelopeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSRedEnvelopeInfo, isopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedInfo, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeInfo, redlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenRedEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenRedEnvelope, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedUpgradeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedUpgradeInfo, leastreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedUpgradeInfo, mayaddreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedUpgradeInfo, maxupgradenum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedUpgradeInfo, remainupgradenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenRedEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenRedEnvelope, rawreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenRedEnvelope, grantthreshold_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenRedEnvelope, upgradeinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpgradeRedEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSUpgradeRedEnvelope, isupgrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradeRedEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradeRedEnvelope, result_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradeRedEnvelope, curreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradeRedEnvelope, grantthreshold_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradeRedEnvelope, addreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpgradeRedEnvelope, upgradeinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSCommonRedEnvelopeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSCommonRedEnvelopeInfo, isopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, expire_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, sourceplayernick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, tryopennum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, cost_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CommonRedInfo, isselfgrant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCCommonRedEnvelopeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCCommonRedEnvelopeInfo, redlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCCommonRedEnvelopeInfo, grantthreshold_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCCommonRedEnvelopeInfo, maxshownum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCCommonRedEnvelopeInfo, maxopennum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCCommonRedEnvelopeInfo, remainopennum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenCommonRedEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenCommonRedEnvelope, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelope, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelope, result_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelope, remainopennum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelope, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedRankPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedRankPlayerInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedRankPlayerInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedRankPlayerInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RedRankPlayerInfo, viplevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGrantCommonRedEnvelopeRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGrantCommonRedEnvelopeRank, from_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGrantCommonRedEnvelopeRank, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRankItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRankItem, rank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRankItem, playerinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRankItem, upgradenum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRankItem, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGrantCommonRedEnvelopeRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGrantCommonRedEnvelopeRank, ranklist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGrantCommonRedEnvelopeRank, selfrank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenCommonRedEnvelopeRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenCommonRedEnvelopeRank, from_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenCommonRedEnvelopeRank, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRankItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRankItem, rank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRankItem, playerinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRankItem, totalreward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRankItem, opennum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelopeRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelopeRank, ranklist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelopeRank, selfrank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGrantCommonRedEnvelopeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRecord, granttime_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRecord, expiretime_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRecord, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRecord, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GrantRecord, openplayernick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGrantCommonRedEnvelopeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGrantCommonRedEnvelopeRecord, recordlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSOpenCommonRedEnvelopeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRecord, sourceplayernick_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRecord, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenRecord, opentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelopeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelopeRecord, recordlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenCommonRedEnvelopeRecord, showrecordnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeOpStatusNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeOpStatusNotify, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeOpStatusNotify, status_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeOpStatusNotify, curmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeOpStatusNotify, upgradeinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRedEnvelopeOpStatusNotify, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncWeaponState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncWeaponState, weaponid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncWeaponState, chairid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncWeaponState, weaponuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncWeaponState, weaponstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncWeaponState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPreHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPreHit, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPreHit, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSPreHit, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPreHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPreHit, weaponuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCPreHit, hitmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, animationid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, animationmsg_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, monsteruid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, bullettype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, earn_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, originuid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, multiplelist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, fortunejson_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, goldentoadjson_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::Animation, dicejson_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceJson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceJson, step_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceJson, dice_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceJson, mullist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceJson, mulposlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelJson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelJson, result_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::FortuneWheelJson, site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GoldenToadJson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GoldenToadJson, orderlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GoldenToadJson, totalratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GoldenToadJson, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GoldenToadJson, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OrderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OrderData, type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OrderData, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncAnimation, animation_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncAnimation, iscomplete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncAnimation, animation_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncAnimation, iscomplete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetAnimations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetAnimations, animations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankDetail, rankindex_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankDetail, rankname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankConfig, graderankdetail_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankConfig, ranklistlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareGivingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareGivingInfo, propid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareGivingInfo, propname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareGivingInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareGivingInfo, norepeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, wareid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, waregivinginfolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, minmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, maxmoney_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, price_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::WareInfo, waregivingproinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ExtraGradeRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ExtraGradeRewardInfo, title_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ExtraGradeRewardInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ExtraGradeRewardInfo, extraexp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankWareConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankWareConfig, commwareinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankWareConfig, advancewareinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankWareConfig, extragraderewardinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankWareConfig, waredesclist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::RankWareConfig, gradedesclist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceConfig, ratiolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::DiceConfig, maxmul_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, fortuneconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, beeconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, replayconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, graderankconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, wareconfig_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncConfigs, diceconfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSConfirmWeaponExist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSConfirmWeaponExist, sourceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCConfirmWeaponExist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCConfirmWeaponExist, exist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetVideo, videoid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetVideo, videotype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, createdpathlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, rewardtype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, money_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, guntype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, arena_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetVideo, weaponid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, reward_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, rewardtype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, timestamp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, videoid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, unread_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, weaponid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::VideoCommon, arenaid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalVideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalVideoInfo, nicename_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalVideoInfo, self_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GlobalVideoInfo, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SelfVideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SelfVideoInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SelfVideoInfo, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelfVideoRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelfVideoRecord, from_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelfVideoRecord, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSelfVideoRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSelfVideoRecord, videolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSelfVideoRecord, refreshtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSVideoRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSVideoRank, from_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSVideoRank, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVideoRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVideoRank, videolist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVideoRank, refreshtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, propid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, num_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, advance_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, minnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, maxnum_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, box_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, uniqueid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, desc_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, timelimit_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, title_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, proptype_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ReceiveReward, special_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSReceiveGradeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveGradeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveGradeReward, receiverewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveGradeReward, unreceiverewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveGradeReward, seasonend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardDetail, rewardinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardDetail, reach_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardDetail, receive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardInfo, rankname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardInfo, commrewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardInfo, advancerewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRewardInfo, first_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, currentrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, star_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, rankname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, historyrank_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, historyrankname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, kingtag_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, currentexp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, nextexp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, extraexp_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, playername_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, availablegift_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, islast_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::GradeRankInfo, isself_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetTableUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetTableUserInfo, chairid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTableUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTableUserInfo, playerinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetTableUserInfo, graderankinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRewardInfo, startidx_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRewardInfo, endidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRewardInfo, graderewardinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRankInfo, graderankinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankUpgrade, graderankinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankUpgrade, advance_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankUpgrade, chair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSRankSeasonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankSeasonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankSeasonStatus, enable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankSeasonStatus, starttime_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankSeasonStatus, endtime_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankSeasonStatus, seasonname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCRankSeasonStatus, season_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncTime, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticePropsOverdue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCNoticePropsOverdue, propid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PurchaseResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PurchaseResult, wareid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PurchaseResult, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSQueryPackagePurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSQueryPackagePurchase, wareidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCQueryPackagePurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCQueryPackagePurchase, purchasereslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PropsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PropsInfo, propid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PropsInfo, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGamePurchasePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGamePurchasePush, propslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PackageMarquee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PackageMarquee, nickname_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PackageMarquee, wareid_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::PackageMarquee, props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSQueryPackageMarquee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCQueryPackageMarquee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCQueryPackageMarquee, marqueemodel_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCQueryPackageMarquee, packagemarqueelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSetWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSetWings, wingid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetWings, chair_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSetWings, wingid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSVerifySeasonChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVerifySeasonChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVerifySeasonChange, change_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVerifySeasonChange, beforegraderankinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVerifySeasonChange, currentgraderankinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVerifySeasonChange, beforeseason_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCVerifySeasonChange, currentseason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSExistUnReceiveRankReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExistUnReceiveRankReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCExistUnReceiveRankReward, exist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSReceiveExtraGradeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSReceiveExtraGradeReward, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveExtraGradeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveExtraGradeReward, receiverewardlist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCReceiveExtraGradeReward, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRankList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRankList, from_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRankList, to_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSGetGradeRankList, season_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRankList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRankList, graderanklist_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRankList, selfrankinfo_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCGetGradeRankList, ord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSBuyPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSBuyPlane, plane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyPlane, plane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSBuyWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSBuyWings, wings_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCBuyWings, wings_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenChestReward, id_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::OpenChestReward, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, is_active_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, chest_type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, total_progress_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, remain_progress_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, guide_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCUpdateChestStatus, available_reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ChestBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ChestBrief, chest_type_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::ChestBrief, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, end_time_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, chest_brief_list_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, min_ratio_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, auto_open_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, auto_option_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestConfig, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenChest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenChest, reward_list_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCOpenChest, auto_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelectChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelectChestReward, select_index_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSelectChestReward, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSChestSetAutoSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSChestSetAutoSelect, auto_option_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSChestSetAutoSelect, auto_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestSetAutoSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestSetAutoSelect, auto_option_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestSetAutoSelect, auto_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSChestSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSChestSetEnable, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCChestSetEnable, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWaterDropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWaterDropInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWaterDropInfo, dropcount_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCWaterDropInfo, fragmentcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TextInfo, index_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::TextInfo, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncTextConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncTextConfig, startidx_),
  PROTOBUF_FIELD_OFFSET(::PlaneWar::CSSyncTextConfig, endidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncTextConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlaneWar::SCSyncTextConfig, textlist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PlaneWar::Decimal)},
  { 7, -1, sizeof(::PlaneWar::SC_SceneInfo)},
  { 13, -1, sizeof(::PlaneWar::CSLogin)},
  { 20, -1, sizeof(::PlaneWar::SCLogin)},
  { 27, -1, sizeof(::PlaneWar::CSLogout)},
  { 32, -1, sizeof(::PlaneWar::SCLogout)},
  { 39, -1, sizeof(::PlaneWar::CommonPropInfo)},
  { 46, -1, sizeof(::PlaneWar::Pos)},
  { 54, -1, sizeof(::PlaneWar::BuffInfo)},
  { 67, -1, sizeof(::PlaneWar::BlackHoleInfo)},
  { 79, -1, sizeof(::PlaneWar::FormInfo)},
  { 86, -1, sizeof(::PlaneWar::LockInfo)},
  { 93, -1, sizeof(::PlaneWar::HitMode)},
  { 100, -1, sizeof(::PlaneWar::WeaponState)},
  { 109, -1, sizeof(::PlaneWar::SettleInfo)},
  { 118, -1, sizeof(::PlaneWar::GunInfo)},
  { 127, -1, sizeof(::PlaneWar::FlameInfo)},
  { 135, -1, sizeof(::PlaneWar::BeeInfo)},
  { 142, -1, sizeof(::PlaneWar::WeaponInfo)},
  { 155, -1, sizeof(::PlaneWar::SpecEffect)},
  { 166, -1, sizeof(::PlaneWar::Dice)},
  { 174, -1, sizeof(::PlaneWar::DiceInfo)},
  { 182, -1, sizeof(::PlaneWar::StateInfo)},
  { 198, -1, sizeof(::PlaneWar::MissileInfo)},
  { 205, -1, sizeof(::PlaneWar::PiggyInfo)},
  { 217, -1, sizeof(::PlaneWar::ArenaPieceInfo)},
  { 226, -1, sizeof(::PlaneWar::PieceInfo)},
  { 236, -1, sizeof(::PlaneWar::RouletteInfo)},
  { 243, -1, sizeof(::PlaneWar::EffectInfo)},
  { 250, -1, sizeof(::PlaneWar::PlayerInfo)},
  { 282, -1, sizeof(::PlaneWar::PlaneSpecEffect)},
  { 293, -1, sizeof(::PlaneWar::WingsSpecEffect)},
  { 303, -1, sizeof(::PlaneWar::PlaneInfo)},
  { 320, -1, sizeof(::PlaneWar::InteractionItem)},
  { 327, -1, sizeof(::PlaneWar::RankStatusInfo)},
  { 334, -1, sizeof(::PlaneWar::WingsInfo)},
  { 346, -1, sizeof(::PlaneWar::RoomInfo)},
  { 360, -1, sizeof(::PlaneWar::CSReady)},
  { 365, -1, sizeof(::PlaneWar::SCReady)},
  { 372, -1, sizeof(::PlaneWar::SCUserEnterNotify)},
  { 378, -1, sizeof(::PlaneWar::MonsterInfo)},
  { 386, -1, sizeof(::PlaneWar::SCMonsterSpawn)},
  { 394, -1, sizeof(::PlaneWar::CSShot)},
  { 404, -1, sizeof(::PlaneWar::SCShot)},
  { 414, -1, sizeof(::PlaneWar::CSLock)},
  { 421, -1, sizeof(::PlaneWar::SCLock)},
  { 429, -1, sizeof(::PlaneWar::Poker)},
  { 436, -1, sizeof(::PlaneWar::DropPoker)},
  { 445, -1, sizeof(::PlaneWar::TriggerBullet)},
  { 464, -1, sizeof(::PlaneWar::Roulette)},
  { 473, -1, sizeof(::PlaneWar::DropBuff)},
  { 483, -1, sizeof(::PlaneWar::FakeTresureInfo)},
  { 491, -1, sizeof(::PlaneWar::TreasureInfo)},
  { 502, -1, sizeof(::PlaneWar::FortuneWheelInfo)},
  { 511, -1, sizeof(::PlaneWar::ToadInfo)},
  { 518, -1, sizeof(::PlaneWar::FortuneConfig)},
  { 524, -1, sizeof(::PlaneWar::BeeConfig)},
  { 532, -1, sizeof(::PlaneWar::CommonReplayConfig)},
  { 540, -1, sizeof(::PlaneWar::GlobalReplayConfig)},
  { 547, -1, sizeof(::PlaneWar::PersonalReplayConfig)},
  { 553, -1, sizeof(::PlaneWar::ReplayConfig)},
  { 561, -1, sizeof(::PlaneWar::ConnMonsterInfo)},
  { 570, -1, sizeof(::PlaneWar::CSHit)},
  { 581, -1, sizeof(::PlaneWar::SCHit)},
  { 616, -1, sizeof(::PlaneWar::CSMonsterDestory)},
  { 622, -1, sizeof(::PlaneWar::SCMonsterDestory)},
  { 627, -1, sizeof(::PlaneWar::CSTransform)},
  { 633, -1, sizeof(::PlaneWar::SCTransform)},
  { 640, -1, sizeof(::PlaneWar::CSPlanePosSync)},
  { 646, -1, sizeof(::PlaneWar::SCPlanePosSync)},
  { 653, -1, sizeof(::PlaneWar::SCStateEnd)},
  { 661, -1, sizeof(::PlaneWar::CSModRatio)},
  { 667, -1, sizeof(::PlaneWar::SCModRatio)},
  { 675, -1, sizeof(::PlaneWar::SCGainNotify)},
  { 688, -1, sizeof(::PlaneWar::SCGainSettle)},
  { 696, -1, sizeof(::PlaneWar::CSSetPlane)},
  { 702, -1, sizeof(::PlaneWar::SCSetPlane)},
  { 709, -1, sizeof(::PlaneWar::CSSwitchBackGround)},
  { 714, -1, sizeof(::PlaneWar::SCSwitchBackGround)},
  { 720, -1, sizeof(::PlaneWar::MonsterPath)},
  { 733, -1, sizeof(::PlaneWar::SCSyncMonsterInfo)},
  { 739, -1, sizeof(::PlaneWar::ScratchInfo)},
  { 746, -1, sizeof(::PlaneWar::CSScratchCardList)},
  { 751, -1, sizeof(::PlaneWar::SCScratchCardList)},
  { 758, -1, sizeof(::PlaneWar::CSUseScratchCard)},
  { 764, -1, sizeof(::PlaneWar::SCUseScratchCard)},
  { 774, -1, sizeof(::PlaneWar::CSExplodeSettle)},
  { 780, -1, sizeof(::PlaneWar::SCExplodeSettle)},
  { 789, -1, sizeof(::PlaneWar::CSFallIntoBlackHole)},
  { 796, -1, sizeof(::PlaneWar::SCFallIntoBlackHole)},
  { 804, -1, sizeof(::PlaneWar::CSSyncBlackHolePos)},
  { 811, -1, sizeof(::PlaneWar::SCSyncBlackHolePos)},
  { 819, -1, sizeof(::PlaneWar::CSInteraction)},
  { 826, -1, sizeof(::PlaneWar::SCInteraction)},
  { 836, -1, sizeof(::PlaneWar::JumpHighArena)},
  { 847, -1, sizeof(::PlaneWar::PoolArenaLimit)},
  { 854, -1, sizeof(::PlaneWar::SCActivityInfo)},
  { 862, -1, sizeof(::PlaneWar::CSGetTaskReward)},
  { 867, -1, sizeof(::PlaneWar::SCGetTaskReward)},
  { 875, -1, sizeof(::PlaneWar::CSGetTaskInfo)},
  { 880, -1, sizeof(::PlaneWar::SCGetTaskInfo)},
  { 893, -1, sizeof(::PlaneWar::SCNoticeInfoChange)},
  { 901, -1, sizeof(::PlaneWar::ProsInfo)},
  { 909, -1, sizeof(::PlaneWar::SCNoticeHallProsChange)},
  { 916, -1, sizeof(::PlaneWar::TimingMonster)},
  { 923, -1, sizeof(::PlaneWar::SCNoticeTimingMonster)},
  { 929, -1, sizeof(::PlaneWar::CSPiggyBankInfo)},
  { 935, -1, sizeof(::PlaneWar::SCPiggyBankInfo)},
  { 943, -1, sizeof(::PlaneWar::PiggyReward)},
  { 950, -1, sizeof(::PlaneWar::CSOpenPiggyBank)},
  { 955, -1, sizeof(::PlaneWar::SCOpenPiggyBank)},
  { 963, -1, sizeof(::PlaneWar::CSPiggyBankOpenFinish)},
  { 968, -1, sizeof(::PlaneWar::SCPiggyBankOpenFinish)},
  { 974, -1, sizeof(::PlaneWar::SCPiggyBankChangeNotify)},
  { 980, -1, sizeof(::PlaneWar::CSSetPersonalPoolEnable)},
  { 986, -1, sizeof(::PlaneWar::SCSetPersonalPoolEnable)},
  { 992, -1, sizeof(::PlaneWar::CSPersonalPoolInfo)},
  { 998, -1, sizeof(::PlaneWar::PersonalPoolReward)},
  { 1008, -1, sizeof(::PlaneWar::PersonalPoolLevelInfo)},
  { 1017, -1, sizeof(::PlaneWar::PersonalPoolLuckyInfo)},
  { 1024, -1, sizeof(::PlaneWar::SCPersonalPoolInfo)},
  { 1037, -1, sizeof(::PlaneWar::CSDrawPersonalPool)},
  { 1047, -1, sizeof(::PlaneWar::CSUpgradePoolReward)},
  { 1053, -1, sizeof(::PlaneWar::SCUpgradePoolReward)},
  { 1064, -1, sizeof(::PlaneWar::CSGetPoolLuckyReward)},
  { 1069, -1, sizeof(::PlaneWar::SCGetPoolLuckyReward)},
  { 1078, -1, sizeof(::PlaneWar::SCPersonalPoolChangeNotify)},
  { 1088, -1, sizeof(::PlaneWar::CSUseMissile)},
  { 1094, -1, sizeof(::PlaneWar::SCUseMissile)},
  { 1104, -1, sizeof(::PlaneWar::CSMonsterCall)},
  { 1109, -1, sizeof(::PlaneWar::SCMonsterCall)},
  { 1117, -1, sizeof(::PlaneWar::CSClickStatic)},
  { 1123, -1, sizeof(::PlaneWar::SCClickStatic)},
  { 1128, -1, sizeof(::PlaneWar::RankInfo)},
  { 1137, -1, sizeof(::PlaneWar::MyRankInfo)},
  { 1146, -1, sizeof(::PlaneWar::CSRankList)},
  { 1152, -1, sizeof(::PlaneWar::SCRankList)},
  { 1161, -1, sizeof(::PlaneWar::TitleInfo)},
  { 1170, -1, sizeof(::PlaneWar::SCTitleList)},
  { 1177, -1, sizeof(::PlaneWar::CSSelectTitle)},
  { 1183, -1, sizeof(::PlaneWar::SCSelectTitle)},
  { 1190, -1, sizeof(::PlaneWar::SCTitleActiveNotify)},
  { 1196, -1, sizeof(::PlaneWar::SCRoomInfoChangeNotify)},
  { 1202, -1, sizeof(::PlaneWar::CSMatchBrief)},
  { 1207, -1, sizeof(::PlaneWar::SCMatchBrief)},
  { 1221, -1, sizeof(::PlaneWar::CSMatchDetail)},
  { 1226, -1, sizeof(::PlaneWar::MatchSubInfo)},
  { 1235, -1, sizeof(::PlaneWar::MatchRewardItem)},
  { 1242, -1, sizeof(::PlaneWar::MatchRankInfo)},
  { 1255, -1, sizeof(::PlaneWar::MatchTask)},
  { 1263, -1, sizeof(::PlaneWar::SCMatchDetail)},
  { 1274, -1, sizeof(::PlaneWar::CSMatchReward)},
  { 1279, -1, sizeof(::PlaneWar::RankReward)},
  { 1287, -1, sizeof(::PlaneWar::SCMatchReward)},
  { 1294, -1, sizeof(::PlaneWar::MyMatchReward)},
  { 1303, -1, sizeof(::PlaneWar::SCMatchRewardNotify)},
  { 1310, -1, sizeof(::PlaneWar::CSGiftList)},
  { 1315, -1, sizeof(::PlaneWar::GiftInfo)},
  { 1325, -1, sizeof(::PlaneWar::SCGiftList)},
  { 1331, -1, sizeof(::PlaneWar::SCGiftExpireNotify)},
  { 1338, -1, sizeof(::PlaneWar::CSGetMatchTaskReward)},
  { 1344, -1, sizeof(::PlaneWar::SCGetMatchTaskReward)},
  { 1351, -1, sizeof(::PlaneWar::WeaponUseCondition)},
  { 1357, -1, sizeof(::PlaneWar::WeaponConfig)},
  { 1365, -1, sizeof(::PlaneWar::CSWeaponPieceInfo)},
  { 1371, -1, sizeof(::PlaneWar::PiecesStackLimitInfo)},
  { 1379, -1, sizeof(::PlaneWar::SCWeaponPieceInfo)},
  { 1389, -1, sizeof(::PlaneWar::CSBuyWeapon)},
  { 1394, -1, sizeof(::PlaneWar::SCBuyWeapon)},
  { 1404, -1, sizeof(::PlaneWar::EarnRecord)},
  { 1416, -1, sizeof(::PlaneWar::CSWeaponEarnRecord)},
  { 1422, -1, sizeof(::PlaneWar::SCWeaponEarnRecord)},
  { 1429, -1, sizeof(::PlaneWar::CSStateForceSettle)},
  { 1435, -1, sizeof(::PlaneWar::SCStateForceSettle)},
  { 1444, -1, sizeof(::PlaneWar::SCAddMissedBullet)},
  { 1453, -1, sizeof(::PlaneWar::CSUpdateBulletData)},
  { 1463, -1, sizeof(::PlaneWar::SCUpdateBulletData)},
  { 1474, -1, sizeof(::PlaneWar::CSUseMissileBatch)},
  { 1479, -1, sizeof(::PlaneWar::SCUseMissileBatch)},
  { 1488, -1, sizeof(::PlaneWar::CSSyncPropsToHall)},
  { 1493, -1, sizeof(::PlaneWar::SCSyncPropsToHall)},
  { 1498, -1, sizeof(::PlaneWar::CSChangeTable)},
  { 1503, -1, sizeof(::PlaneWar::SCChangeTable)},
  { 1508, -1, sizeof(::PlaneWar::CSUseRoulette)},
  { 1514, -1, sizeof(::PlaneWar::SCUseRoulette)},
  { 1526, -1, sizeof(::PlaneWar::CSRedEnvelopePoint)},
  { 1531, -1, sizeof(::PlaneWar::RedOpenInfo)},
  { 1538, -1, sizeof(::PlaneWar::SCRedEnvelopePoint)},
  { 1547, -1, sizeof(::PlaneWar::CSRedEnvelopeInfo)},
  { 1553, -1, sizeof(::PlaneWar::RedInfo)},
  { 1559, -1, sizeof(::PlaneWar::SCRedEnvelopeInfo)},
  { 1565, -1, sizeof(::PlaneWar::CSOpenRedEnvelope)},
  { 1571, -1, sizeof(::PlaneWar::RedUpgradeInfo)},
  { 1580, -1, sizeof(::PlaneWar::SCOpenRedEnvelope)},
  { 1588, -1, sizeof(::PlaneWar::CSUpgradeRedEnvelope)},
  { 1594, -1, sizeof(::PlaneWar::SCUpgradeRedEnvelope)},
  { 1604, -1, sizeof(::PlaneWar::CSCommonRedEnvelopeInfo)},
  { 1610, -1, sizeof(::PlaneWar::CommonRedInfo)},
  { 1622, -1, sizeof(::PlaneWar::SCCommonRedEnvelopeInfo)},
  { 1632, -1, sizeof(::PlaneWar::CSOpenCommonRedEnvelope)},
  { 1638, -1, sizeof(::PlaneWar::SCOpenCommonRedEnvelope)},
  { 1647, -1, sizeof(::PlaneWar::RedRankPlayerInfo)},
  { 1656, -1, sizeof(::PlaneWar::CSGrantCommonRedEnvelopeRank)},
  { 1663, -1, sizeof(::PlaneWar::GrantRankItem)},
  { 1672, -1, sizeof(::PlaneWar::SCGrantCommonRedEnvelopeRank)},
  { 1679, -1, sizeof(::PlaneWar::CSOpenCommonRedEnvelopeRank)},
  { 1686, -1, sizeof(::PlaneWar::OpenRankItem)},
  { 1695, -1, sizeof(::PlaneWar::SCOpenCommonRedEnvelopeRank)},
  { 1702, -1, sizeof(::PlaneWar::CSGrantCommonRedEnvelopeRecord)},
  { 1707, -1, sizeof(::PlaneWar::GrantRecord)},
  { 1717, -1, sizeof(::PlaneWar::SCGrantCommonRedEnvelopeRecord)},
  { 1723, -1, sizeof(::PlaneWar::CSOpenCommonRedEnvelopeRecord)},
  { 1728, -1, sizeof(::PlaneWar::OpenRecord)},
  { 1736, -1, sizeof(::PlaneWar::SCOpenCommonRedEnvelopeRecord)},
  { 1743, -1, sizeof(::PlaneWar::SCRedEnvelopeOpStatusNotify)},
  { 1753, -1, sizeof(::PlaneWar::CSSyncWeaponState)},
  { 1762, -1, sizeof(::PlaneWar::SCSyncWeaponState)},
  { 1767, -1, sizeof(::PlaneWar::CSPreHit)},
  { 1775, -1, sizeof(::PlaneWar::SCPreHit)},
  { 1782, -1, sizeof(::PlaneWar::Animation)},
  { 1799, -1, sizeof(::PlaneWar::DiceJson)},
  { 1808, -1, sizeof(::PlaneWar::FortuneWheelJson)},
  { 1815, -1, sizeof(::PlaneWar::GoldenToadJson)},
  { 1824, -1, sizeof(::PlaneWar::OrderData)},
  { 1831, -1, sizeof(::PlaneWar::CSSyncAnimation)},
  { 1838, -1, sizeof(::PlaneWar::SCSyncAnimation)},
  { 1845, -1, sizeof(::PlaneWar::SCGetAnimations)},
  { 1851, -1, sizeof(::PlaneWar::GradeRankDetail)},
  { 1858, -1, sizeof(::PlaneWar::GradeRankConfig)},
  { 1865, -1, sizeof(::PlaneWar::WareGivingInfo)},
  { 1874, -1, sizeof(::PlaneWar::WareInfo)},
  { 1885, -1, sizeof(::PlaneWar::ExtraGradeRewardInfo)},
  { 1893, -1, sizeof(::PlaneWar::RankWareConfig)},
  { 1903, -1, sizeof(::PlaneWar::DiceConfig)},
  { 1910, -1, sizeof(::PlaneWar::CSSyncConfigs)},
  { 1915, -1, sizeof(::PlaneWar::SCSyncConfigs)},
  { 1926, -1, sizeof(::PlaneWar::CSConfirmWeaponExist)},
  { 1932, -1, sizeof(::PlaneWar::SCConfirmWeaponExist)},
  { 1938, -1, sizeof(::PlaneWar::CSGetVideo)},
  { 1945, -1, sizeof(::PlaneWar::SCGetVideo)},
  { 1960, -1, sizeof(::PlaneWar::VideoCommon)},
  { 1972, -1, sizeof(::PlaneWar::GlobalVideoInfo)},
  { 1980, -1, sizeof(::PlaneWar::SelfVideoInfo)},
  { 1987, -1, sizeof(::PlaneWar::CSSelfVideoRecord)},
  { 1994, -1, sizeof(::PlaneWar::SCSelfVideoRecord)},
  { 2001, -1, sizeof(::PlaneWar::CSVideoRank)},
  { 2008, -1, sizeof(::PlaneWar::SCVideoRank)},
  { 2015, -1, sizeof(::PlaneWar::ReceiveReward)},
  { 2032, -1, sizeof(::PlaneWar::CSReceiveGradeReward)},
  { 2037, -1, sizeof(::PlaneWar::SCReceiveGradeReward)},
  { 2045, -1, sizeof(::PlaneWar::GradeRewardDetail)},
  { 2053, -1, sizeof(::PlaneWar::GradeRewardInfo)},
  { 2062, -1, sizeof(::PlaneWar::GradeRankInfo)},
  { 2080, -1, sizeof(::PlaneWar::CSGetTableUserInfo)},
  { 2086, -1, sizeof(::PlaneWar::SCGetTableUserInfo)},
  { 2093, -1, sizeof(::PlaneWar::CSGetGradeRewardInfo)},
  { 2100, -1, sizeof(::PlaneWar::SCGetGradeRewardInfo)},
  { 2106, -1, sizeof(::PlaneWar::CSGetGradeRankInfo)},
  { 2111, -1, sizeof(::PlaneWar::SCGetGradeRankInfo)},
  { 2117, -1, sizeof(::PlaneWar::SCRankUpgrade)},
  { 2125, -1, sizeof(::PlaneWar::CSRankSeasonStatus)},
  { 2130, -1, sizeof(::PlaneWar::SCRankSeasonStatus)},
  { 2140, -1, sizeof(::PlaneWar::SCSyncTime)},
  { 2146, -1, sizeof(::PlaneWar::SCNoticePropsOverdue)},
  { 2152, -1, sizeof(::PlaneWar::PurchaseResult)},
  { 2159, -1, sizeof(::PlaneWar::CSQueryPackagePurchase)},
  { 2165, -1, sizeof(::PlaneWar::SCQueryPackagePurchase)},
  { 2171, -1, sizeof(::PlaneWar::PropsInfo)},
  { 2178, -1, sizeof(::PlaneWar::SCGamePurchasePush)},
  { 2184, -1, sizeof(::PlaneWar::PackageMarquee)},
  { 2192, -1, sizeof(::PlaneWar::CSQueryPackageMarquee)},
  { 2197, -1, sizeof(::PlaneWar::SCQueryPackageMarquee)},
  { 2204, -1, sizeof(::PlaneWar::CSSetWings)},
  { 2210, -1, sizeof(::PlaneWar::SCSetWings)},
  { 2217, -1, sizeof(::PlaneWar::CSVerifySeasonChange)},
  { 2222, -1, sizeof(::PlaneWar::SCVerifySeasonChange)},
  { 2232, -1, sizeof(::PlaneWar::CSExistUnReceiveRankReward)},
  { 2237, -1, sizeof(::PlaneWar::SCExistUnReceiveRankReward)},
  { 2243, -1, sizeof(::PlaneWar::CSReceiveExtraGradeReward)},
  { 2249, -1, sizeof(::PlaneWar::SCReceiveExtraGradeReward)},
  { 2256, -1, sizeof(::PlaneWar::CSGetGradeRankList)},
  { 2264, -1, sizeof(::PlaneWar::SCGetGradeRankList)},
  { 2272, -1, sizeof(::PlaneWar::CSBuyPlane)},
  { 2278, -1, sizeof(::PlaneWar::SCBuyPlane)},
  { 2284, -1, sizeof(::PlaneWar::CSBuyWings)},
  { 2290, -1, sizeof(::PlaneWar::SCBuyWings)},
  { 2296, -1, sizeof(::PlaneWar::OpenChestReward)},
  { 2303, -1, sizeof(::PlaneWar::SCUpdateChestStatus)},
  { 2314, -1, sizeof(::PlaneWar::ChestBrief)},
  { 2321, -1, sizeof(::PlaneWar::SCChestConfig)},
  { 2332, -1, sizeof(::PlaneWar::SCOpenChest)},
  { 2339, -1, sizeof(::PlaneWar::CSSelectChestReward)},
  { 2346, -1, sizeof(::PlaneWar::CSChestSetAutoSelect)},
  { 2353, -1, sizeof(::PlaneWar::SCChestSetAutoSelect)},
  { 2360, -1, sizeof(::PlaneWar::CSChestSetEnable)},
  { 2366, -1, sizeof(::PlaneWar::SCChestSetEnable)},
  { 2372, -1, sizeof(::PlaneWar::SCWaterDropInfo)},
  { 2380, -1, sizeof(::PlaneWar::TextInfo)},
  { 2387, -1, sizeof(::PlaneWar::CSSyncTextConfig)},
  { 2394, -1, sizeof(::PlaneWar::SCSyncTextConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CommonPropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_Pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_BuffInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_BlackHoleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_FormInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_LockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_HitMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WeaponState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SettleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_FlameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_BeeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WeaponInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_Dice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_DiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_StateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MissileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PiggyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ArenaPieceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PieceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RouletteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_EffectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PlaneSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WingsSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PlaneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_InteractionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RankStatusInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WingsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RoomInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUserEnterNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MonsterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMonsterSpawn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSLock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCLock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_Poker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_DropPoker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_TriggerBullet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_Roulette_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_DropBuff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_FakeTresureInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_TreasureInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_FortuneWheelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ToadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_FortuneConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_BeeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CommonReplayConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GlobalReplayConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PersonalReplayConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ReplayConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ConnMonsterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSMonsterDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMonsterDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSPlanePosSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPlanePosSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCStateEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSModRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCModRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGainNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGainSettle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSetPlane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSetPlane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSwitchBackGround_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSwitchBackGround_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MonsterPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncMonsterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ScratchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSScratchCardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCScratchCardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUseScratchCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUseScratchCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSExplodeSettle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCExplodeSettle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSFallIntoBlackHole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCFallIntoBlackHole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSyncBlackHolePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncBlackHolePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSInteraction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCInteraction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_JumpHighArena_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PoolArenaLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetTaskReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetTaskReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCNoticeInfoChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ProsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCNoticeHallProsChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_TimingMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCNoticeTimingMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSPiggyBankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPiggyBankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PiggyReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSOpenPiggyBank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCOpenPiggyBank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSPiggyBankOpenFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPiggyBankOpenFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPiggyBankChangeNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSetPersonalPoolEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSetPersonalPoolEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSPersonalPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PersonalPoolReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PersonalPoolLevelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PersonalPoolLuckyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPersonalPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSDrawPersonalPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUpgradePoolReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUpgradePoolReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetPoolLuckyReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetPoolLuckyReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPersonalPoolChangeNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUseMissile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUseMissile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSMonsterCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMonsterCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSClickStatic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCClickStatic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MyRankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSRankList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRankList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_TitleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCTitleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSelectTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSelectTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCTitleActiveNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRoomInfoChangeNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSMatchBrief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMatchBrief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSMatchDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MatchSubInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MatchRewardItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MatchRankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MatchTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMatchDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSMatchReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RankReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMatchReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_MyMatchReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCMatchRewardNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGiftList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GiftInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGiftList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGiftExpireNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetMatchTaskReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetMatchTaskReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WeaponUseCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WeaponConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSWeaponPieceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PiecesStackLimitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCWeaponPieceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSBuyWeapon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCBuyWeapon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_EarnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSWeaponEarnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCWeaponEarnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSStateForceSettle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCStateForceSettle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCAddMissedBullet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUpdateBulletData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUpdateBulletData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUseMissileBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUseMissileBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSyncPropsToHall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncPropsToHall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSChangeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCChangeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUseRoulette_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUseRoulette_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSRedEnvelopePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RedOpenInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRedEnvelopePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSRedEnvelopeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRedEnvelopeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSOpenRedEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RedUpgradeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCOpenRedEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSUpgradeRedEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUpgradeRedEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSCommonRedEnvelopeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CommonRedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCCommonRedEnvelopeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSOpenCommonRedEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCOpenCommonRedEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RedRankPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGrantCommonRedEnvelopeRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GrantRankItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGrantCommonRedEnvelopeRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSOpenCommonRedEnvelopeRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_OpenRankItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCOpenCommonRedEnvelopeRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGrantCommonRedEnvelopeRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GrantRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGrantCommonRedEnvelopeRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSOpenCommonRedEnvelopeRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_OpenRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCOpenCommonRedEnvelopeRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRedEnvelopeOpStatusNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSyncWeaponState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncWeaponState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSPreHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCPreHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_Animation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_DiceJson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_FortuneWheelJson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GoldenToadJson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_OrderData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSyncAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetAnimations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GradeRankDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GradeRankConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WareGivingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_WareInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ExtraGradeRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_RankWareConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_DiceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSyncConfigs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncConfigs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSConfirmWeaponExist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCConfirmWeaponExist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetVideo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetVideo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_VideoCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GlobalVideoInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SelfVideoInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSelfVideoRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSelfVideoRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSVideoRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCVideoRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ReceiveReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSReceiveGradeReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCReceiveGradeReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GradeRewardDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GradeRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_GradeRankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetTableUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetTableUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetGradeRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetGradeRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetGradeRankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetGradeRankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRankUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSRankSeasonStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCRankSeasonStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCNoticePropsOverdue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PurchaseResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSQueryPackagePurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCQueryPackagePurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PropsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGamePurchasePush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_PackageMarquee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSQueryPackageMarquee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCQueryPackageMarquee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSetWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSetWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSVerifySeasonChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCVerifySeasonChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSExistUnReceiveRankReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCExistUnReceiveRankReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSReceiveExtraGradeReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCReceiveExtraGradeReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSGetGradeRankList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCGetGradeRankList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSBuyPlane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCBuyPlane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSBuyWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCBuyWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_OpenChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCUpdateChestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_ChestBrief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCChestConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCOpenChest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSelectChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSChestSetAutoSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCChestSetAutoSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSChestSetEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCChestSetEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCWaterDropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_TextInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_CSSyncTextConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PlaneWar::_SCSyncTextConfig_default_instance_),
};

const char descriptor_table_protodef_PlaneWar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016PlaneWar.proto\022\010PlaneWar\"%\n\007Decimal\022\013\n"
  "\003num\030\001 \001(\005\022\r\n\005denom\030\002 \001(\005\" \n\014SC_SceneInf"
  "o\022\020\n\010bet_list\030\001 \003(\005\"*\n\007CSLogin\022\020\n\010player"
  "Id\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\"+\n\007SCLogin\022\017\n\007sc"
  "eneId\030\001 \001(\005\022\017\n\007arenaID\030\002 \001(\005\"\n\n\010CSLogout"
  "\"-\n\010SCLogout\022\022\n\nlogoutType\030\001 \001(\005\022\r\n\005chai"
  "r\030\002 \001(\005\"-\n\016CommonPropInfo\022\016\n\006propID\030\001 \001("
  "\005\022\013\n\003num\030\002 \001(\005\"&\n\003Pos\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002\022\t\n\001z\030\003 \001(\002\"\217\001\n\010BuffInfo\022\017\n\007buffUID\030\001"
  " \001(\005\022\013\n\003num\030\002 \001(\005\022\r\n\005ratio\030\003 \001(\005\022\016\n\006isCr"
  "it\030\004 \001(\010\022\017\n\007compose\030\005 \003(\005\022\014\n\004desc\030\006 \003(\005\022"
  "\024\n\014speedUpRatio\030\007 \001(\005\022\021\n\toriginUID\030\010 \001(\005"
  "\"\214\001\n\rBlackHoleInfo\022\013\n\003uid\030\001 \001(\005\022\013\n\003num\030\002"
  " \001(\005\022\r\n\005ratio\030\003 \001(\005\022\032\n\003pos\030\004 \001(\0132\r.Plane"
  "War.Pos\022\016\n\006isCrit\030\005 \001(\010\022\023\n\013monsterList\030\006"
  " \003(\005\022\021\n\toriginUID\030\007 \001(\005\"4\n\010FormInfo\022\014\n\004f"
  "orm\030\001 \001(\005\022\032\n\003pos\030\002 \001(\0132\r.PlaneWar.Pos\"2\n"
  "\010LockInfo\022\017\n\007lockUID\030\001 \001(\005\022\025\n\rcolliderIn"
  "dex\030\002 \001(\005\"0\n\007HitMode\022\017\n\007hitType\030\001 \001(\005\022\024\n"
  "\014hitDirection\030\002 \001(\005\"`\n\013WeaponState\022\014\n\004st"
  "ep\030\001 \001(\005\022\037\n\010position\030\002 \001(\0132\r.PlaneWar.Po"
  "s\022\020\n\010duration\030\003 \001(\005\022\020\n\010moveMode\030\004 \001(\005\"U\n"
  "\nSettleInfo\022\021\n\toriginUID\030\001 \001(\005\022\022\n\nbullet"
  "Type\030\002 \001(\005\022\016\n\006reward\030\003 \001(\005\022\020\n\010weaponID\030\004"
  " \001(\005\"K\n\007GunInfo\022\021\n\tsourceUID\030\001 \001(\005\022\021\n\tor"
  "iginUID\030\002 \001(\005\022\r\n\005ratio\030\003 \001(\005\022\013\n\003num\030\004 \001("
  "\005\"D\n\tFlameInfo\022\021\n\toriginUID\030\001 \001(\005\022\r\n\005rat"
  "io\030\002 \001(\005\022\025\n\rsourceUIDList\030\003 \003(\005\"0\n\007BeeIn"
  "fo\022\021\n\tratioList\030\001 \003(\005\022\022\n\ntotalRatio\030\002 \001("
  "\005\"\265\001\n\nWeaponInfo\022\020\n\010weaponID\030\001 \001(\005\022\021\n\tso"
  "urceUID\030\002 \001(\005\022\021\n\toriginUID\030\003 \001(\005\022\r\n\005rati"
  "o\030\004 \001(\005\022\013\n\003num\030\005 \001(\005\022\022\n\nweaponName\030\006 \001(\t"
  "\022\023\n\013weaponRatio\030\007 \001(\005\022*\n\013weaponState\030\010 \001"
  "(\0132\025.PlaneWar.WeaponState\"\177\n\nSpecEffect\022"
  "\021\n\tcostMoney\030\001 \001(\005\022\021\n\tearnMoney\030\002 \001(\005\022\020\n"
  "\010violence\030\003 \001(\002\022\020\n\010duration\030\004 \001(\005\022\023\n\013max"
  "Duration\030\005 \001(\005\022\022\n\nsourceType\030\006 \001(\005\"=\n\004Di"
  "ce\022\r\n\005ratio\030\001 \001(\005\022\n\n\002tp\030\002 \001(\005\022\032\n\003pos\030\003 \001"
  "(\0132\r.PlaneWar.Pos\"G\n\010DiceInfo\022\014\n\004mode\030\001 "
  "\001(\005\022\013\n\003mul\030\002 \001(\005\022 \n\010diceList\030\003 \003(\0132\016.Pla"
  "neWar.Dice\"\265\003\n\tStateInfo\022\016\n\006isBack\030\001 \001(\010"
  "\022$\n\010buffList\030\002 \003(\0132\022.PlaneWar.BuffInfo\022."
  "\n\rblackHoleList\030\003 \003(\0132\027.PlaneWar.BlackHo"
  "leInfo\022$\n\010formInfo\030\004 \001(\0132\022.PlaneWar.Form"
  "Info\022$\n\010lockInfo\030\005 \001(\0132\022.PlaneWar.LockIn"
  "fo\022(\n\nweaponInfo\030\006 \001(\0132\024.PlaneWar.Weapon"
  "Info\022,\n\016propWeaponInfo\030\007 \001(\0132\024.PlaneWar."
  "WeaponInfo\022(\n\nsettleList\030\010 \003(\0132\024.PlaneWa"
  "r.SettleInfo\022\"\n\007gunInfo\030\t \001(\0132\021.PlaneWar"
  ".GunInfo\022&\n\tflameInfo\030\n \001(\0132\023.PlaneWar.F"
  "lameInfo\022(\n\nspecEffect\030\013 \001(\0132\024.PlaneWar."
  "SpecEffect\"&\n\013MissileInfo\022\n\n\002id\030\001 \001(\005\022\013\n"
  "\003num\030\002 \001(\005\"\242\001\n\tPiggyInfo\022\016\n\006status\030\001 \001(\005"
  "\022\023\n\013rewardValue\030\002 \001(\005\022\031\n\021accumulatingVal"
  "ue\030\003 \001(\005\022\022\n\nsettleTime\030\004 \001(\t\022\027\n\017settleTh"
  "reshold\030\005 \001(\005\022\021\n\tmaxReward\030\006 \001(\005\022\025\n\rnext"
  "MaxReward\030\007 \001(\005\"V\n\016ArenaPieceInfo\022\017\n\007are"
  "naID\030\001 \001(\005\022\021\n\thavePiece\030\002 \001(\005\022\021\n\tneedPie"
  "ce\030\003 \001(\005\022\r\n\005ratio\030\004 \001(\005\"\222\001\n\tPieceInfo\022+\n"
  "\tarenaInfo\030\001 \003(\0132\030.PlaneWar.ArenaPieceIn"
  "fo\022\023\n\013haveDiamond\030\002 \001(\005\022\023\n\013needDiamond\030\003"
  " \001(\005\022\027\n\017pieceStackLimit\030\004 \001(\005\022\025\n\rexchang"
  "ePiece\030\005 \001(\005\"\'\n\014RouletteInfo\022\n\n\002id\030\001 \001(\005"
  "\022\013\n\003num\030\002 \001(\005\"0\n\nEffectInfo\022\020\n\010effectID\030"
  "\001 \001(\005\022\020\n\010isGlobal\030\002 \001(\010\"\234\005\n\nPlayerInfo\022\r"
  "\n\005ratio\030\001 \001(\005\022\017\n\007planeID\030\002 \001(\005\022\r\n\005score\030"
  "\003 \001(\005\022\r\n\005chair\030\004 \001(\005\022\022\n\nplayerName\030\005 \001(\t"
  "\022\020\n\010playerID\030\006 \001(\005\022\013\n\003vip\030\007 \001(\005\022&\n\tstate"
  "Info\030\010 \001(\0132\023.PlaneWar.StateInfo\022\022\n\nmembe"
  "rDays\030\t \001(\005\022\024\n\014lastVipLevel\030\n \001(\005\022\026\n\016scr"
  "atchCardNum\030\013 \001(\005\022\016\n\006ticket\030\014 \001(\005\022\023\n\013rat"
  "ioUnLock\030\r \001(\010\022&\n\tpiggyInfo\030\016 \001(\0132\023.Plan"
  "eWar.PiggyInfo\022*\n\013missileList\030\017 \003(\0132\025.Pl"
  "aneWar.MissileInfo\022\017\n\007callNum\030\020 \001(\005\022\025\n\rs"
  "electedTitle\030\021 \001(\005\022,\n\017weaponPieceInfo\030\022 "
  "\001(\0132\023.PlaneWar.PieceInfo\022\020\n\010effectID\030\023 \001"
  "(\005\022\014\n\004icon\030\024 \001(\t\022,\n\014rouletteList\030\025 \003(\0132\026"
  ".PlaneWar.RouletteInfo\022\017\n\007wingsId\030\026 \001(\005\022"
  "(\n\neffectInfo\030\027 \001(\0132\024.PlaneWar.EffectInf"
  "o\022\023\n\013currentRank\030\030 \001(\005\022\014\n\004star\030\031 \001(\005\022\022\n\n"
  "isLastRank\030\032 \001(\010\022$\n\tredPacket\030\033 \001(\0132\021.Pl"
  "aneWar.Decimal\"\214\001\n\017PlaneSpecEffect\022\022\n\nra"
  "tioLimit\030\001 \001(\005\022\025\n\rhitChangeRate\030\002 \001(\002\022\027\n"
  "\017moneyChangeRate\030\003 \001(\002\022\024\n\014violenceRate\030\004"
  " \001(\002\022\021\n\tspeedRate\030\005 \001(\002\022\014\n\004type\030\006 \001(\005\"v\n"
  "\017WingsSpecEffect\022\021\n\tspeedRate\030\001 \001(\002\022\022\n\nr"
  "atioLimit\030\002 \001(\005\022\025\n\rhitChangeRate\030\003 \001(\002\022\027"
  "\n\017moneyChangeRate\030\004 \001(\002\022\014\n\004type\030\005 \001(\005\"\230\002"
  "\n\tPlaneInfo\022\017\n\007planeID\030\001 \001(\005\022\r\n\005isVip\030\002 "
  "\001(\010\022\020\n\010vipLevel\030\003 \001(\005\022\020\n\010isMember\030\004 \001(\010\022"
  "\022\n\nisTaskLock\030\005 \001(\010\022\022\n\nrequireAct\030\006 \001(\005\022"
  "\016\n\006enable\030\007 \001(\010\0222\n\017planeSpecEffect\030\010 \001(\013"
  "2\031.PlaneWar.PlaneSpecEffect\022\021\n\ttimestamp"
  "\030\t \001(\005\022\020\n\010rankFlag\030\n \001(\005\022\r\n\005price\030\013 \001(\005\022"
  "\'\n\004buff\030\014 \001(\0132\031.PlaneWar.PlaneSpecEffect"
  "\"+\n\017InteractionItem\022\n\n\002id\030\001 \001(\005\022\014\n\004cost\030"
  "\002 \001(\005\";\n\016RankStatusInfo\022\022\n\nrankEnable\030\001 "
  "\001(\010\022\025\n\rallowTypeList\030\002 \003(\005\"\275\001\n\tWingsInfo"
  "\022\017\n\007wingsId\030\001 \001(\005\022\016\n\006enable\030\002 \001(\010\022\021\n\ttim"
  "estamp\030\003 \001(\005\0222\n\017wingsSpecEffect\030\004 \001(\0132\031."
  "PlaneWar.WingsSpecEffect\022\020\n\010rankFlag\030\005 \001"
  "(\005\022\r\n\005price\030\006 \001(\005\022\'\n\004buff\030\007 \001(\0132\031.PlaneW"
  "ar.WingsSpecEffect\"\272\002\n\010RoomInfo\022&\n\tplane"
  "List\030\001 \003(\0132\023.PlaneWar.PlaneInfo\022\031\n\021scrat"
  "chCardEnable\030\002 \001(\010\0222\n\017interactionList\030\003 "
  "\003(\0132\031.PlaneWar.InteractionItem\022\027\n\017piggyB"
  "ankEnable\030\004 \001(\010\022\032\n\022personalPoolEnable\030\005 "
  "\001(\010\022\031\n\021rewardMonsterList\030\006 \003(\005\022,\n\nrankSt"
  "atus\030\007 \001(\0132\030.PlaneWar.RankStatusInfo\022&\n\t"
  "wingsList\030\010 \003(\0132\023.PlaneWar.WingsInfo\022\021\n\t"
  "ratioList\030\t \003(\005\"\t\n\007CSReady\"Y\n\007SCReady\022(\n"
  "\nplayerList\030\001 \003(\0132\024.PlaneWar.PlayerInfo\022"
  "$\n\010roomInfo\030\002 \001(\0132\022.PlaneWar.RoomInfo\"9\n"
  "\021SCUserEnterNotify\022$\n\006player\030\001 \001(\0132\024.Pla"
  "neWar.PlayerInfo\"I\n\013MonsterInfo\022\023\n\013monst"
  "erType\030\001 \001(\005\022\022\n\nmonsterUID\030\002 \001(\005\022\021\n\tisCo"
  "nnect\030\003 \001(\010\"^\n\016SCMonsterSpawn\022\020\n\010configI"
  "D\030\001 \001(\005\022*\n\013monsterList\030\002 \003(\0132\025.PlaneWar."
  "MonsterInfo\022\016\n\006isCall\030\003 \001(\010\"^\n\006CSShot\022\r\n"
  "\005angle\030\001 \001(\005\022\r\n\005ratio\030\002 \001(\005\022\022\n\nbulletTyp"
  "e\030\003 \001(\005\022\017\n\007scatter\030\004 \001(\005\022\021\n\tsourceUID\030\005 "
  "\001(\005\"Z\n\006SCShot\022\r\n\005chair\030\001 \001(\005\022\r\n\005angle\030\002 "
  "\001(\005\022\r\n\005score\030\003 \001(\005\022\022\n\nbulletType\030\004 \001(\005\022\017"
  "\n\007scatter\030\005 \001(\005\"3\n\006CSLock\022\022\n\nmonsterUID\030"
  "\001 \001(\005\022\025\n\rcolliderIndex\030\002 \001(\005\"B\n\006SCLock\022\r"
  "\n\005chair\030\001 \001(\005\022\022\n\nmonsterUID\030\002 \001(\005\022\025\n\rcol"
  "liderIndex\030\003 \001(\005\"(\n\005Poker\022\r\n\005value\030\001 \001(\005"
  "\022\020\n\010multiple\030\002 \001(\005\"a\n\tDropPoker\022\"\n\tpoker"
  "List\030\001 \003(\0132\017.PlaneWar.Poker\022\014\n\004dice\030\002 \001("
  "\005\022\014\n\004kind\030\003 \001(\005\022\024\n\014kindMultiple\030\004 \001(\005\"\214\002"
  "\n\rTriggerBullet\022\022\n\nbulletType\030\001 \001(\005\022\017\n\007s"
  "ubType\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\016\n\006params\030\004 \003("
  "\005\022\017\n\007params2\030\005 \003(\005\022\021\n\tsourceUID\030\006 \001(\005\022\022\n"
  "\ngeneration\030\007 \001(\005\022\032\n\003pos\030\010 \001(\0132\r.PlaneWa"
  "r.Pos\022\r\n\005delay\030\t \001(\002\022\r\n\005range\030\n \001(\005\022\r\n\005s"
  "peed\030\013 \001(\002\022\020\n\010monetary\030\014 \001(\t\022\024\n\014destroyD"
  "elay\030\r \001(\002\022\020\n\010hitRatio\030\016 \001(\005\"Z\n\010Roulette"
  "\022\022\n\nouterIndex\030\001 \001(\005\022\022\n\ninnerIndex\030\002 \001(\005"
  "\022\022\n\nouterRound\030\003 \003(\005\022\022\n\ninnerRound\030\004 \003(\005"
  "\"]\n\010DropBuff\022\017\n\007buffUID\030\001 \001(\005\022\013\n\003num\030\002 \001"
  "(\005\022\017\n\007compose\030\003 \003(\005\022\014\n\004desc\030\004 \003(\005\022\024\n\014spe"
  "edUpRatio\030\005 \001(\005\"<\n\017FakeTresureInfo\022\014\n\004ty"
  "pe\030\001 \001(\005\022\016\n\006propID\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"\212\001"
  "\n\014TreasureInfo\022\020\n\010showType\030\001 \001(\005\022\014\n\004type"
  "\030\002 \001(\005\022\016\n\006propID\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\020\n\010f"
  "akeType\030\005 \001(\005\022+\n\010fakeInfo\030\006 \001(\0132\031.PlaneW"
  "ar.FakeTresureInfo\"M\n\020FortuneWheelInfo\022\r"
  "\n\005stage\030\001 \001(\005\022\r\n\005ratio\030\002 \001(\005\022\014\n\004next\030\003 \001"
  "(\010\022\r\n\005color\030\004 \001(\005\"/\n\010ToadInfo\022\021\n\tratioLi"
  "st\030\001 \003(\005\022\020\n\010critical\030\002 \001(\005\"E\n\rFortuneCon"
  "fig\0224\n\020fortuneWheelInfo\030\001 \003(\0132\032.PlaneWar"
  ".FortuneWheelInfo\"8\n\tBeeConfig\022\r\n\005aList\030"
  "\001 \003(\005\022\r\n\005bList\030\002 \003(\005\022\r\n\005cList\030\003 \003(\005\"K\n\022C"
  "ommonReplayConfig\022\016\n\006maxLen\030\001 \001(\005\022\023\n\013lim"
  "itReward\030\002 \001(\005\022\020\n\010limitMul\030\003 \001(\005\"c\n\022Glob"
  "alReplayConfig\0228\n\022commonReplayConfig\030\001 \001"
  "(\0132\034.PlaneWar.CommonReplayConfig\022\023\n\013refr"
  "eshTime\030\002 \001(\005\"P\n\024PersonalReplayConfig\0228\n"
  "\022commonReplayConfig\030\001 \001(\0132\034.PlaneWar.Com"
  "monReplayConfig\"\224\001\n\014ReplayConfig\0228\n\022glob"
  "alReplayConfig\030\001 \001(\0132\034.PlaneWar.GlobalRe"
  "playConfig\022<\n\024personalReplayConfig\030\002 \001(\013"
  "2\036.PlaneWar.PersonalReplayConfig\022\014\n\004open"
  "\030\003 \001(\010\"_\n\017ConnMonsterInfo\022\021\n\tsourceUID\030\001"
  " \001(\005\022\021\n\toriginUID\030\002 \001(\005\022\r\n\005ratio\030\003 \001(\005\022\027"
  "\n\017connMonsterList\030\004 \003(\005\"|\n\005CSHit\022\022\n\nmons"
  "terUID\030\001 \001(\005\022\r\n\005ratio\030\002 \001(\005\022\022\n\nbulletTyp"
  "e\030\003 \001(\005\022\021\n\tsourceUID\030\004 \001(\005\022\022\n\ngeneration"
  "\030\005 \001(\005\022\025\n\rdeductedMoney\030\006 \001(\005\"\370\006\n\005SCHit\022"
  "\022\n\nisCaptured\030\001 \001(\010\022\r\n\005chair\030\002 \001(\005\022\022\n\nmo"
  "nsterUID\030\003 \001(\005\022\r\n\005ratio\030\004 \001(\005\022\022\n\nbulletT"
  "ype\030\005 \001(\005\022\014\n\004earn\030\006 \001(\005\022\r\n\005score\030\007 \001(\003\022\021"
  "\n\tbaseValue\030\010 \001(\005\022\024\n\014multipleList\030\t \003(\005\022"
  "(\n\014dropBuffList\030\n \003(\0132\022.PlaneWar.BuffInf"
  "o\022.\n\rtriggerBullet\030\013 \003(\0132\027.PlaneWar.Trig"
  "gerBullet\022&\n\tdropPoker\030\014 \001(\0132\023.PlaneWar."
  "DropPoker\022$\n\010roulette\030\r \001(\0132\022.PlaneWar.R"
  "oulette\022\r\n\005stage\030\016 \001(\005\022\020\n\010dropCard\030\017 \001(\005"
  "\022\021\n\toriginUID\030\020 \001(\005\022\020\n\010dropCall\030\021 \001(\005\022\027\n"
  "\017dropWeaponPiece\030\022 \001(\005\022,\n\014treasureList\030\023"
  " \003(\0132\026.PlaneWar.TreasureInfo\022\020\n\010weaponID"
  "\030\024 \001(\005\022(\n\nweaponInfo\030\025 \001(\0132\024.PlaneWar.We"
  "aponInfo\022\"\n\007gunInfo\030\026 \001(\0132\021.PlaneWar.Gun"
  "Info\0224\n\020fortuneWheelList\030\027 \003(\0132\032.PlaneWa"
  "r.FortuneWheelInfo\022$\n\010toadInfo\030\030 \001(\0132\022.P"
  "laneWar.ToadInfo\022&\n\tflameInfo\030\031 \001(\0132\023.Pl"
  "aneWar.FlameInfo\022\"\n\007beeInfo\030\032 \001(\0132\021.Plan"
  "eWar.BeeInfo\0222\n\017connMonsterInfo\030\033 \001(\0132\031."
  "PlaneWar.ConnMonsterInfo\022(\n\nspecEffect\030\034"
  " \003(\0132\024.PlaneWar.SpecEffect\022$\n\010diceInfo\030\035"
  " \001(\0132\022.PlaneWar.DiceInfo\022\016\n\006isProp\030\036 \001(\010"
  "\"&\n\020CSMonsterDestory\022\022\n\nmonsterUID\030\001 \001(\005"
  "\"\022\n\020SCMonsterDestory\"\033\n\013CSTransform\022\014\n\004f"
  "orm\030\001 \001(\005\"*\n\013SCTransform\022\r\n\005chair\030\001 \001(\005\022"
  "\014\n\004form\030\002 \001(\005\",\n\016CSPlanePosSync\022\032\n\003pos\030\001"
  " \001(\0132\r.PlaneWar.Pos\";\n\016SCPlanePosSync\022\r\n"
  "\005chair\030\001 \001(\005\022\032\n\003pos\030\002 \001(\0132\r.PlaneWar.Pos"
  "\"<\n\nSCStateEnd\022\r\n\005chair\030\001 \001(\005\022\014\n\004type\030\002 "
  "\001(\005\022\021\n\tsourceUID\030\003 \001(\005\"\036\n\nCSModRatio\022\020\n\010"
  "modLevel\030\001 \001(\005\"<\n\nSCModRatio\022\r\n\005chair\030\001 "
  "\001(\005\022\r\n\005ratio\030\002 \001(\005\022\020\n\010isUnlock\030\003 \001(\010\"\273\001\n"
  "\014SCGainNotify\022\016\n\006source\030\001 \001(\005\022\020\n\010curMone"
  "y\030\002 \001(\005\022\014\n\004gain\030\003 \001(\005\022\021\n\tcurTicket\030\004 \001(\005"
  "\022\024\n\014changeTicket\030\005 \001(\005\022\025\n\rchangeDiamond\030"
  "\006 \001(\005\022\022\n\ncurDiamond\030\007 \001(\005\022\'\n\014curRedPacke"
  "t\030\010 \001(\0132\021.PlaneWar.Decimal\"\?\n\014SCGainSett"
  "le\022\r\n\005chair\030\001 \001(\005\022\021\n\toriginUID\030\002 \001(\005\022\r\n\005"
  "ratio\030\003 \001(\005\"\035\n\nCSSetPlane\022\017\n\007planeID\030\001 \001"
  "(\005\",\n\nSCSetPlane\022\r\n\005chair\030\001 \001(\005\022\017\n\007plane"
  "ID\030\002 \001(\005\"\024\n\022CSSwitchBackGround\"#\n\022SCSwit"
  "chBackGround\022\r\n\005chair\030\001 \001(\005\"\254\001\n\013MonsterP"
  "ath\022&\n\007monster\030\001 \001(\0132\025.PlaneWar.MonsterI"
  "nfo\022\020\n\010configID\030\002 \001(\005\022\021\n\tstepIndex\030\003 \001(\005"
  "\022\021\n\troadIndex\030\004 \001(\005\022\r\n\005moveT\030\005 \001(\002\022\020\n\010do"
  "tIndex\030\006 \001(\005\022\r\n\005delay\030\007 \001(\002\022\r\n\005stage\030\010 \001"
  "(\005\"C\n\021SCSyncMonsterInfo\022.\n\017createdPathLi"
  "st\030\001 \003(\0132\025.PlaneWar.MonsterPath\"-\n\013Scrat"
  "chInfo\022\014\n\004base\030\001 \001(\005\022\020\n\010multiple\030\002 \001(\005\"\023"
  "\n\021CSScratchCardList\"J\n\021SCScratchCardList"
  "\022\013\n\003num\030\001 \001(\005\022(\n\tfirstCard\030\002 \001(\0132\025.Plane"
  "War.ScratchInfo\"\037\n\020CSUseScratchCard\022\013\n\003n"
  "um\030\001 \001(\005\"{\n\020SCUseScratchCard\022\r\n\005chair\030\001 "
  "\001(\005\022\'\n\010cardList\030\002 \003(\0132\025.PlaneWar.Scratch"
  "Info\022\r\n\005total\030\003 \001(\005\022\016\n\006remain\030\004 \001(\005\022\020\n\010c"
  "urMoney\030\005 \001(\005\"$\n\017CSExplodeSettle\022\021\n\tsour"
  "ceUID\030\001 \001(\005\"V\n\017SCExplodeSettle\022\r\n\005chair\030"
  "\001 \001(\005\022\021\n\tsourceUID\030\002 \001(\005\022\021\n\toriginUID\030\003 "
  "\001(\005\022\016\n\006remain\030\004 \001(\005\"<\n\023CSFallIntoBlackHo"
  "le\022\022\n\nmonsterUID\030\001 \001(\005\022\021\n\tsourceUID\030\002 \001("
  "\005\"K\n\023SCFallIntoBlackHole\022\r\n\005chair\030\001 \001(\005\022"
  "\022\n\nmonsterUID\030\002 \001(\005\022\021\n\tsourceUID\030\003 \001(\005\"C"
  "\n\022CSSyncBlackHolePos\022\021\n\tsourceUID\030\001 \001(\005\022"
  "\032\n\003pos\030\002 \001(\0132\r.PlaneWar.Pos\"R\n\022SCSyncBla"
  "ckHolePos\022\r\n\005chair\030\001 \001(\005\022\021\n\tsourceUID\030\002 "
  "\001(\005\022\032\n\003pos\030\003 \001(\0132\r.PlaneWar.Pos\"2\n\rCSInt"
  "eraction\022\023\n\013targetChair\030\001 \001(\005\022\014\n\004type\030\002 "
  "\001(\005\"k\n\rSCInteraction\022\023\n\013sourceChair\030\001 \001("
  "\005\022\023\n\013targetChair\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\020\n\010"
  "cooldown\030\004 \001(\005\022\020\n\010curMoney\030\005 \001(\003\"m\n\rJump"
  "HighArena\022\016\n\006isOpen\030\001 \001(\010\022\013\n\003vip\030\002 \001(\005\022\014"
  "\n\004coin\030\003 \001(\005\022\020\n\010gameTime\030\004 \001(\005\022\014\n\004tips\030\005"
  " \001(\t\022\021\n\tmonsterId\030\006 \003(\005\".\n\016PoolArenaLimi"
  "t\022\r\n\005level\030\001 \001(\005\022\r\n\005arena\030\002 \001(\005\"s\n\016SCAct"
  "ivityInfo\022%\n\004jump\030\001 \001(\0132\027.PlaneWar.JumpH"
  "ighArena\022\r\n\005limit\030\002 \001(\005\022+\n\tpoolLimit\030\003 \003"
  "(\0132\030.PlaneWar.PoolArenaLimit\"\021\n\017CSGetTas"
  "kReward\"B\n\017SCGetTaskReward\022\020\n\010gunRatio\030\001"
  " \001(\005\022\r\n\005award\030\002 \001(\005\022\016\n\006ticket\030\003 \001(\005\"\017\n\rC"
  "SGetTaskInfo\"\233\001\n\rSCGetTaskInfo\022\020\n\010gunRat"
  "io\030\001 \001(\005\022\016\n\006curNum\030\002 \001(\005\022\020\n\010totalNum\030\003 \001"
  "(\005\022\020\n\010vipLevel\030\004 \001(\005\022\020\n\010isUnlock\030\005 \001(\005\022\r"
  "\n\005award\030\006 \001(\005\022\023\n\013isVipUnlock\030\007 \001(\010\022\016\n\006ti"
  "cket\030\010 \001(\005\"i\n\022SCNoticeInfoChange\022\026\n\016isCo"
  "mpleteTask\030\001 \001(\010\022*\n\013missileList\030\002 \003(\0132\025."
  "PlaneWar.MissileInfo\022\017\n\007callNum\030\003 \001(\005\"5\n"
  "\010ProsInfo\022\n\n\002id\030\001 \001(\005\022\016\n\006change\030\002 \001(\005\022\r\n"
  "\005value\030\003 \001(\005\"M\n\026SCNoticeHallProsChange\022\r"
  "\n\005chair\030\001 \001(\005\022$\n\010prosList\030\002 \003(\0132\022.PlaneW"
  "ar.ProsInfo\"(\n\rTimingMonster\022\013\n\003sec\030\001 \001("
  "\005\022\n\n\002id\030\002 \001(\005\"F\n\025SCNoticeTimingMonster\022-"
  "\n\014monster_list\030\001 \003(\0132\027.PlaneWar.TimingMo"
  "nster\"!\n\017CSPiggyBankInfo\022\016\n\006isOpen\030\001 \001(\010"
  "\"X\n\017SCPiggyBankInfo\022\r\n\005chair\030\001 \001(\005\022\016\n\006is"
  "Open\030\002 \001(\010\022&\n\tpiggyInfo\030\003 \001(\0132\023.PlaneWar"
  ".PiggyInfo\")\n\013PiggyReward\022\n\n\002id\030\001 \001(\005\022\016\n"
  "\006reward\030\002 \001(\005\"\021\n\017CSOpenPiggyBank\"]\n\017SCOp"
  "enPiggyBank\022\r\n\005chair\030\001 \001(\005\022)\n\nrewardList"
  "\030\002 \003(\0132\025.PlaneWar.PiggyReward\022\020\n\010curMone"
  "y\030\003 \001(\005\"\027\n\025CSPiggyBankOpenFinish\"&\n\025SCPi"
  "ggyBankOpenFinish\022\r\n\005chair\030\001 \001(\005\"A\n\027SCPi"
  "ggyBankChangeNotify\022&\n\tpiggyInfo\030\001 \001(\0132\023"
  ".PlaneWar.PiggyInfo\")\n\027CSSetPersonalPool"
  "Enable\022\016\n\006enable\030\001 \001(\010\")\n\027SCSetPersonalP"
  "oolEnable\022\016\n\006enable\030\001 \001(\010\"$\n\022CSPersonalP"
  "oolInfo\022\016\n\006isOpen\030\001 \001(\010\"[\n\022PersonalPoolR"
  "eward\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\013\n\003num\030\003"
  " \001(\005\022\020\n\010clientID\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\"}\n\025"
  "PersonalPoolLevelInfo\022\r\n\005level\030\001 \001(\005\022\023\n\013"
  "targetValue\030\002 \001(\005\0220\n\nrewardList\030\003 \003(\0132\034."
  "PlaneWar.PersonalPoolReward\022\016\n\006reward\030\004 "
  "\001(\010\"4\n\025PersonalPoolLuckyInfo\022\r\n\005total\030\001 "
  "\001(\005\022\014\n\004cost\030\002 \001(\005\"\342\001\n\022SCPersonalPoolInfo"
  "\022\r\n\005chair\030\001 \001(\005\022\016\n\006isOpen\030\002 \001(\010\022\016\n\006enabl"
  "e\030\003 \001(\010\022\021\n\tpoolValue\030\004 \001(\005\022\020\n\010maxValue\030\005"
  " \001(\005\022\020\n\010curLevel\030\006 \001(\005\0222\n\tlevelList\030\007 \003("
  "\0132\037.PlaneWar.PersonalPoolLevelInfo\0222\n\tlu"
  "ckyInfo\030\010 \001(\0132\037.PlaneWar.PersonalPoolLuc"
  "kyInfo\"\252\001\n\022CSDrawPersonalPool\022\r\n\005chair\030\001"
  " \001(\005\022,\n\006reward\030\002 \001(\0132\034.PlaneWar.Personal"
  "PoolReward\0220\n\nmissReward\030\003 \001(\0132\034.PlaneWa"
  "r.PersonalPoolReward\022\020\n\010curMoney\030\004 \001(\003\022\023"
  "\n\013upgradeCost\030\005 \001(\005\"(\n\023CSUpgradePoolRewa"
  "rd\022\021\n\tisUpgrade\030\001 \001(\010\"\302\001\n\023SCUpgradePoolR"
  "eward\022\r\n\005chair\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\020\n\010"
  "curMoney\030\003 \001(\003\0220\n\nbaseReward\030\004 \001(\0132\034.Pla"
  "neWar.PersonalPoolReward\0221\n\013extraReward\030"
  "\005 \001(\0132\034.PlaneWar.PersonalPoolReward\022\025\n\ra"
  "ddLuckyValue\030\006 \001(\005\"\026\n\024CSGetPoolLuckyRewa"
  "rd\"s\n\024SCGetPoolLuckyReward\022\r\n\005chair\030\001 \001("
  "\005\022\020\n\010curMoney\030\002 \001(\003\022\014\n\004cost\030\003 \001(\005\022,\n\nrew"
  "ardList\030\004 \003(\0132\030.PlaneWar.CommonPropInfo\""
  "w\n\032SCPersonalPoolChangeNotify\022\016\n\006enable\030"
  "\001 \001(\010\022\020\n\010curValue\030\002 \001(\005\022\020\n\010curLevel\030\003 \001("
  "\005\022\020\n\010maxValue\030\004 \001(\005\022\023\n\013targetValue\030\005 \001(\005"
  "\"\032\n\014CSUseMissile\022\n\n\002id\030\001 \001(\005\"^\n\014SCUseMis"
  "sile\022\r\n\005chair\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n\006rewar"
  "d\030\003 \001(\005\022\021\n\tremainNum\030\004 \001(\005\022\020\n\010curMoney\030\005"
  " \001(\003\"\017\n\rCSMonsterCall\";\n\rSCMonsterCall\022\r"
  "\n\005chair\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\014\n\004code\030\003 \001"
  "(\005\"\035\n\rCSClickStatic\022\014\n\004type\030\001 \001(\005\"\017\n\rSCC"
  "lickStatic\"G\n\010RankInfo\022\020\n\010playerId\030\001 \001(\005"
  "\022\r\n\005point\030\002 \001(\005\022\014\n\004nick\030\003 \001(\t\022\014\n\004icon\030\004 "
  "\001(\t\"E\n\nMyRankInfo\022\014\n\004rank\030\001 \001(\005\022\r\n\005point"
  "\030\002 \001(\005\022\014\n\004nick\030\003 \001(\t\022\014\n\004icon\030\004 \001(\t\"\032\n\nCS"
  "RankList\022\014\n\004type\030\001 \001(\005\"\207\001\n\nSCRankList\022\014\n"
  "\004type\030\001 \001(\005\022 \n\004rank\030\002 \001(\0132\022.PlaneWar.Ran"
  "kInfo\022$\n\006myRank\030\003 \001(\0132\024.PlaneWar.MyRankI"
  "nfo\022#\n\007lastTop\030\004 \001(\0132\022.PlaneWar.RankInfo"
  "\"F\n\tTitleInfo\022\n\n\002id\030\001 \001(\005\022\016\n\006status\030\002 \001("
  "\005\022\014\n\004name\030\003 \001(\t\022\017\n\007endTime\030\004 \001(\005\"N\n\013SCTi"
  "tleList\022&\n\ttitleList\030\001 \003(\0132\023.PlaneWar.Ti"
  "tleInfo\022\027\n\017selectedTitleId\030\002 \001(\005\"\033\n\rCSSe"
  "lectTitle\022\n\n\002id\030\001 \001(\005\"*\n\rSCSelectTitle\022\n"
  "\n\002id\030\001 \001(\005\022\r\n\005chair\030\002 \001(\005\"!\n\023SCTitleActi"
  "veNotify\022\n\n\002id\030\001 \001(\005\">\n\026SCRoomInfoChange"
  "Notify\022$\n\010roomInfo\030\001 \001(\0132\022.PlaneWar.Room"
  "Info\"\016\n\014CSMatchBrief\"\264\001\n\014SCMatchBrief\022\016\n"
  "\006status\030\001 \001(\005\022\021\n\tmatchType\030\002 \001(\005\022\021\n\tmatc"
  "hName\030\003 \001(\t\022\021\n\tcountDown\030\004 \001(\005\022\020\n\010totalN"
  "um\030\005 \001(\005\022\021\n\trewardNum\030\006 \001(\005\022\016\n\006myRank\030\007 "
  "\001(\005\022\017\n\007myPoint\030\010 \001(\005\022\025\n\rnextRankPoint\030\t "
  "\001(\005\"\017\n\rCSMatchDetail\"X\n\014MatchSubInfo\022\017\n\007"
  "inMatch\030\001 \001(\010\022\024\n\014subMatchName\030\002 \001(\t\022\017\n\007j"
  "ackpot\030\003 \001(\005\022\020\n\010totalNum\030\004 \001(\005\"*\n\017MatchR"
  "ewardItem\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\261\001\n\rM"
  "atchRankInfo\022\020\n\010playerId\030\001 \001(\005\022\r\n\005point\030"
  "\002 \001(\005\022\014\n\004nick\030\003 \001(\t\022\014\n\004icon\030\004 \001(\t\022\014\n\004ran"
  "k\030\005 \001(\005\022\022\n\npointBonus\030\006 \001(\005\022\022\n\nmoneyBonu"
  "s\030\007 \001(\005\022-\n\nrewardList\030\010 \001(\0132\031.PlaneWar.M"
  "atchRewardItem\";\n\tMatchTask\022\016\n\006status\030\001 "
  "\001(\005\022\016\n\006target\030\002 \001(\005\022\016\n\006reward\030\003 \001(\005\"\334\001\n\r"
  "SCMatchDetail\022+\n\013subInfoList\030\001 \003(\0132\026.Pla"
  "neWar.MatchSubInfo\022)\n\010rankList\030\002 \003(\0132\027.P"
  "laneWar.MatchRankInfo\022\'\n\006myRank\030\003 \001(\0132\027."
  "PlaneWar.MatchRankInfo\022\017\n\007tipList\030\004 \003(\005\022"
  "\022\n\nluckyStage\030\005 \003(\005\022%\n\010taskList\030\006 \003(\0132\023."
  "PlaneWar.MatchTask\"\017\n\rCSMatchReward\"U\n\nR"
  "ankReward\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\022-\n\nr"
  "ewardList\030\003 \001(\0132\031.PlaneWar.MatchRewardIt"
  "em\"R\n\rSCMatchReward\022,\n\016rankRewardList\030\001 "
  "\003(\0132\024.PlaneWar.RankReward\022\023\n\013luckyReward"
  "\030\002 \003(\005\"n\n\rMyMatchReward\022\014\n\004rank\030\001 \001(\005\022+\n"
  "\010myReward\030\002 \003(\0132\031.PlaneWar.MatchRewardIt"
  "em\022\r\n\005bonus\030\003 \001(\005\022\023\n\013luckyReward\030\004 \001(\005\"m"
  "\n\023SCMatchRewardNotify\022+\n\nrewardList\030\001 \001("
  "\0132\027.PlaneWar.MatchRankInfo\022)\n\010myReward\030\002"
  " \001(\0132\027.PlaneWar.MyMatchReward\"\014\n\nCSGiftL"
  "ist\"d\n\010GiftInfo\022\n\n\002id\030\001 \001(\005\022\022\n\npointBonu"
  "s\030\002 \001(\005\022\022\n\nmoneyBonus\030\003 \001(\005\022\016\n\006canBuy\030\004 "
  "\001(\010\022\024\n\014buyCountDown\030\005 \001(\005\"2\n\nSCGiftList\022"
  "$\n\010giftList\030\001 \003(\0132\022.PlaneWar.GiftInfo\"1\n"
  "\022SCGiftExpireNotify\022\016\n\006giftID\030\001 \001(\005\022\013\n\003m"
  "sg\030\002 \001(\t\"%\n\024CSGetMatchTaskReward\022\r\n\005inde"
  "x\030\001 \001(\005\"5\n\024SCGetMatchTaskReward\022\r\n\005index"
  "\030\001 \001(\005\022\016\n\006reward\030\002 \001(\005\"&\n\022WeaponUseCondi"
  "tion\022\020\n\010vipLevel\030\001 \001(\005\"_\n\014WeaponConfig\022\020"
  "\n\010weaponID\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022/\n\tcondit"
  "ion\030\003 \001(\0132\034.PlaneWar.WeaponUseCondition\""
  "\'\n\021CSWeaponPieceInfo\022\022\n\nisBrowsing\030\001 \001(\010"
  "\"R\n\024PiecesStackLimitInfo\022\024\n\014fromVipLevel"
  "\030\001 \001(\005\022\022\n\ntoVipLevel\030\002 \001(\005\022\020\n\010stackNum\030\003"
  " \001(\005\"\302\001\n\021SCWeaponPieceInfo\022\022\n\nisBrowsing"
  "\030\001 \001(\010\022\r\n\005chair\030\002 \001(\005\022&\n\tpieceInfo\030\003 \001(\013"
  "2\023.PlaneWar.PieceInfo\022*\n\nconfigList\030\004 \003("
  "\0132\026.PlaneWar.WeaponConfig\0226\n\016stackLimitL"
  "ist\030\005 \003(\0132\036.PlaneWar.PiecesStackLimitInf"
  "o\"\r\n\013CSBuyWeapon\"\261\001\n\013SCBuyWeapon\022\r\n\005chai"
  "r\030\001 \001(\005\022\020\n\010weaponID\030\002 \001(\005\022(\n\nweaponInfo\030"
  "\003 \001(\0132\024.PlaneWar.WeaponInfo\022&\n\tpieceInfo"
  "\030\004 \001(\0132\023.PlaneWar.PieceInfo\022/\n\tcondition"
  "\030\005 \001(\0132\034.PlaneWar.WeaponUseCondition\"|\n\n"
  "EarnRecord\022\020\n\010playerID\030\001 \001(\005\022\014\n\004nick\030\002 \001"
  "(\t\022\014\n\004icon\030\003 \001(\t\022\020\n\010vipLevel\030\004 \001(\005\022\022\n\nwe"
  "aponName\030\005 \001(\t\022\014\n\004time\030\006 \001(\005\022\014\n\004earn\030\007 \001"
  "(\005\"\"\n\022CSWeaponEarnRecord\022\014\n\004page\030\001 \001(\005\"L"
  "\n\022SCWeaponEarnRecord\022(\n\nrecordList\030\001 \003(\013"
  "2\024.PlaneWar.EarnRecord\022\014\n\004page\030\002 \001(\005\"\'\n\022"
  "CSStateForceSettle\022\021\n\tsourceUID\030\001 \001(\005\"Y\n"
  "\022SCStateForceSettle\022\r\n\005chair\030\001 \001(\005\022\021\n\tso"
  "urceUID\030\002 \001(\005\022\021\n\toriginUID\030\003 \001(\005\022\016\n\006rema"
  "in\030\004 \001(\005\"Y\n\021SCAddMissedBullet\022\r\n\005chair\030\001"
  " \001(\005\022\022\n\nbulletType\030\002 \001(\005\022\021\n\tsourceUID\030\003 "
  "\001(\005\022\016\n\006addNum\030\004 \001(\005\"n\n\022CSUpdateBulletDat"
  "a\022\r\n\005angle\030\001 \001(\002\022\022\n\nbulletType\030\002 \001(\005\022\021\n\t"
  "sourceUID\030\003 \001(\005\022\016\n\006confID\030\004 \001(\005\022\022\n\nisSho"
  "oting\030\005 \001(\010\"}\n\022SCUpdateBulletData\022\r\n\005cha"
  "ir\030\001 \001(\005\022\r\n\005angle\030\002 \001(\002\022\022\n\nbulletType\030\003 "
  "\001(\005\022\021\n\tsourceUID\030\004 \001(\005\022\016\n\006confID\030\005 \001(\005\022\022"
  "\n\nisShooting\030\006 \001(\010\"\023\n\021CSUseMissileBatch\""
  "w\n\021SCUseMissileBatch\022\r\n\005chair\030\001 \001(\005\022\023\n\013t"
  "otalReward\030\002 \001(\005\022\020\n\010curMoney\030\003 \001(\003\022,\n\rre"
  "mainMissile\030\004 \003(\0132\025.PlaneWar.MissileInfo"
  "\"\023\n\021CSSyncPropsToHall\"\023\n\021SCSyncPropsToHa"
  "ll\"\017\n\rCSChangeTable\"\017\n\rSCChangeTable\"\033\n\r"
  "CSUseRoulette\022\n\n\002iD\030\001 \001(\005\"\222\001\n\rSCUseRoule"
  "tte\022\r\n\005chair\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\017\n\007costNu"
  "m\030\003 \001(\005\022\r\n\005ratio\030\004 \001(\005\022$\n\010roulette\030\005 \001(\013"
  "2\022.PlaneWar.Roulette\022\016\n\006reward\030\006 \001(\005\022\020\n\010"
  "curMoney\030\007 \001(\003\"\024\n\022CSRedEnvelopePoint\"N\n\013"
  "RedOpenInfo\022\'\n\006status\030\001 \001(\0162\027.PlaneWar.R"
  "edOpenStatus\022\026\n\016unLockVipLevel\030\002 \001(\005\"w\n\022"
  "SCRedEnvelopePoint\022\020\n\010curPoint\030\001 \001(\005\022\020\n\010"
  "maxPoint\030\002 \001(\005\022\021\n\tcostPoint\030\003 \001(\005\022*\n\013red"
  "OpenList\030\004 \003(\0132\025.PlaneWar.RedOpenInfo\"#\n"
  "\021CSRedEnvelopeInfo\022\016\n\006isOpen\030\001 \001(\010\"\027\n\007Re"
  "dInfo\022\014\n\004cost\030\001 \001(\005\"7\n\021SCRedEnvelopeInfo"
  "\022\"\n\007redList\030\001 \003(\0132\021.PlaneWar.RedInfo\"\"\n\021"
  "CSOpenRedEnvelope\022\r\n\005index\030\001 \001(\005\"l\n\016RedU"
  "pgradeInfo\022\023\n\013leastReward\030\001 \001(\005\022\024\n\014mayAd"
  "dReward\030\002 \001(\005\022\025\n\rmaxUpgradeNum\030\003 \001(\005\022\030\n\020"
  "remainUpgradeNum\030\004 \001(\005\"m\n\021SCOpenRedEnvel"
  "ope\022\021\n\trawReward\030\001 \001(\005\022\026\n\016grantThreshold"
  "\030\002 \001(\005\022-\n\013upgradeInfo\030\003 \001(\0132\030.PlaneWar.R"
  "edUpgradeInfo\")\n\024CSUpgradeRedEnvelope\022\021\n"
  "\tisUpgrade\030\001 \001(\010\"\257\001\n\024SCUpgradeRedEnvelop"
  "e\022*\n\006result\030\001 \001(\0162\032.PlaneWar.UpgradeRedR"
  "esult\022\021\n\tcurReward\030\002 \001(\005\022\026\n\016grantThresho"
  "ld\030\003 \001(\005\022\021\n\taddReward\030\004 \001(\005\022-\n\013upgradeIn"
  "fo\030\005 \001(\0132\030.PlaneWar.RedUpgradeInfo\")\n\027CS"
  "CommonRedEnvelopeInfo\022\016\n\006isOpen\030\001 \001(\010\"\214\001"
  "\n\rCommonRedInfo\022\n\n\002id\030\001 \001(\t\022\016\n\006reward\030\002 "
  "\001(\005\022\016\n\006expire\030\003 \001(\005\022\030\n\020sourcePlayerNick\030"
  "\004 \001(\t\022\022\n\ntryOpenNum\030\005 \001(\005\022\014\n\004cost\030\006 \001(\005\022"
  "\023\n\013isSelfGrant\030\007 \001(\010\"\232\001\n\027SCCommonRedEnve"
  "lopeInfo\022(\n\007redList\030\001 \003(\0132\027.PlaneWar.Com"
  "monRedInfo\022\026\n\016grantThreshold\030\002 \001(\005\022\022\n\nma"
  "xShowNum\030\003 \001(\005\022\022\n\nmaxOpenNum\030\004 \001(\005\022\025\n\rre"
  "mainOpenNum\030\005 \001(\005\"%\n\027CSOpenCommonRedEnve"
  "lope\022\n\n\002id\030\001 \001(\t\"\\\n\027SCOpenCommonRedEnvel"
  "ope\022\n\n\002id\030\001 \001(\t\022\016\n\006result\030\002 \001(\010\022\025\n\rremai"
  "nOpenNum\030\003 \001(\005\022\016\n\006reward\030\004 \001(\005\"S\n\021RedRan"
  "kPlayerInfo\022\020\n\010playerID\030\001 \001(\005\022\014\n\004nick\030\002 "
  "\001(\t\022\014\n\004icon\030\003 \001(\t\022\020\n\010vipLevel\030\004 \001(\005\"8\n\034C"
  "SGrantCommonRedEnvelopeRank\022\014\n\004from\030\001 \001("
  "\005\022\n\n\002to\030\002 \001(\005\"r\n\rGrantRankItem\022\014\n\004rank\030\001"
  " \001(\005\022/\n\nplayerInfo\030\002 \001(\0132\033.PlaneWar.RedR"
  "ankPlayerInfo\022\022\n\nupgradeNum\030\003 \001(\005\022\016\n\006rew"
  "ard\030\004 \001(\005\"t\n\034SCGrantCommonRedEnvelopeRan"
  "k\022)\n\010rankList\030\001 \003(\0132\027.PlaneWar.GrantRank"
  "Item\022)\n\010selfRank\030\002 \001(\0132\027.PlaneWar.GrantR"
  "ankItem\"7\n\033CSOpenCommonRedEnvelopeRank\022\014"
  "\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\"s\n\014OpenRankItem"
  "\022\014\n\004rank\030\001 \001(\005\022/\n\nplayerInfo\030\002 \001(\0132\033.Pla"
  "neWar.RedRankPlayerInfo\022\023\n\013totalReward\030\003"
  " \001(\005\022\017\n\007openNum\030\004 \001(\005\"q\n\033SCOpenCommonRed"
  "EnvelopeRank\022(\n\010rankList\030\001 \003(\0132\026.PlaneWa"
  "r.OpenRankItem\022(\n\010selfRank\030\002 \001(\0132\026.Plane"
  "War.OpenRankItem\" \n\036CSGrantCommonRedEnve"
  "lopeRecord\"\206\001\n\013GrantRecord\022\021\n\tgrantTime\030"
  "\001 \001(\005\022\022\n\nexpireTime\030\002 \001(\005\022\016\n\006reward\030\003 \001("
  "\005\022(\n\006status\030\004 \001(\0162\030.PlaneWar.GrantRedSta"
  "tus\022\026\n\016openPlayerNick\030\005 \001(\t\"K\n\036SCGrantCo"
  "mmonRedEnvelopeRecord\022)\n\nrecordList\030\001 \003("
  "\0132\025.PlaneWar.GrantRecord\"\037\n\035CSOpenCommon"
  "RedEnvelopeRecord\"H\n\nOpenRecord\022\030\n\020sourc"
  "ePlayerNick\030\001 \001(\t\022\016\n\006reward\030\002 \001(\005\022\020\n\010ope"
  "nTime\030\003 \001(\005\"`\n\035SCOpenCommonRedEnvelopeRe"
  "cord\022(\n\nrecordList\030\001 \003(\0132\024.PlaneWar.Open"
  "Record\022\025\n\rshowRecordNum\030\002 \001(\005\"\244\001\n\033SCRedE"
  "nvelopeOpStatusNotify\022\r\n\005chair\030\001 \001(\005\022%\n\006"
  "status\030\002 \001(\0162\025.PlaneWar.RedOpStatus\022\020\n\010c"
  "urMoney\030\003 \001(\003\022-\n\013upgradeInfo\030\004 \001(\0132\030.Pla"
  "neWar.RedUpgradeInfo\022\016\n\006reward\030\005 \001(\005\"u\n\021"
  "CSSyncWeaponState\022\020\n\010weaponId\030\001 \001(\005\022\017\n\007c"
  "hairId\030\002 \001(\005\022\021\n\tweaponUID\030\003 \001(\005\022*\n\013weapo"
  "nState\030\004 \001(\0132\025.PlaneWar.WeaponState\"\023\n\021S"
  "CSyncWeaponState\"@\n\010CSPreHit\022\r\n\005ratio\030\001 "
  "\001(\005\022\022\n\nbulletType\030\002 \001(\005\022\021\n\tsourceUID\030\003 \001"
  "(\005\"A\n\010SCPreHit\022\021\n\tweaponUID\030\001 \001(\005\022\"\n\007hit"
  "Mode\030\002 \001(\0132\021.PlaneWar.HitMode\"\274\002\n\tAnimat"
  "ion\022\023\n\013animationID\030\001 \001(\005\022\024\n\014animationMsg"
  "\030\002 \001(\t\022\r\n\005chair\030\003 \001(\005\022\022\n\nmonsterUID\030\004 \001("
  "\005\022\022\n\nbulletType\030\005 \001(\005\022\014\n\004earn\030\006 \001(\005\022\021\n\to"
  "riginUID\030\007 \001(\005\022\024\n\014multipleList\030\010 \003(\005\022\r\n\005"
  "ratio\030\t \001(\005\022/\n\013fortuneJson\030\n \001(\0132\032.Plane"
  "War.FortuneWheelJson\0220\n\016goldenToadJson\030\013"
  " \001(\0132\030.PlaneWar.GoldenToadJson\022$\n\010diceJs"
  "on\030\014 \001(\0132\022.PlaneWar.DiceJson\"z\n\010DiceJson"
  "\022\014\n\004step\030\001 \001(\005\022\034\n\004dice\030\002 \003(\0132\016.PlaneWar."
  "Dice\022\037\n\007mulList\030\003 \003(\0132\016.PlaneWar.Dice\022!\n"
  "\nmulPosList\030\004 \003(\0132\r.PlaneWar.Pos\"L\n\020Fort"
  "uneWheelJson\022*\n\006result\030\001 \003(\0132\032.PlaneWar."
  "FortuneWheelInfo\022\014\n\004site\030\002 \001(\005\"i\n\016Golden"
  "ToadJson\022&\n\torderList\030\001 \003(\0132\023.PlaneWar.O"
  "rderData\022\022\n\ntotalRatio\030\002 \001(\005\022\r\n\005ratio\030\003 "
  "\001(\005\022\014\n\004step\030\004 \001(\005\"(\n\tOrderData\022\014\n\004type\030\001"
  " \001(\005\022\r\n\005ratio\030\002 \001(\005\"M\n\017CSSyncAnimation\022&"
  "\n\tanimation\030\001 \001(\0132\023.PlaneWar.Animation\022\022"
  "\n\nisComplete\030\002 \001(\010\"M\n\017SCSyncAnimation\022&\n"
  "\tanimation\030\001 \001(\0132\023.PlaneWar.Animation\022\022\n"
  "\nisComplete\030\002 \001(\010\":\n\017SCGetAnimations\022\'\n\n"
  "animations\030\001 \003(\0132\023.PlaneWar.Animation\"6\n"
  "\017GradeRankDetail\022\021\n\trankIndex\030\001 \001(\005\022\020\n\010r"
  "ankName\030\002 \001(\t\"Z\n\017GradeRankConfig\0222\n\017grad"
  "eRankDetail\030\001 \003(\0132\031.PlaneWar.GradeRankDe"
  "tail\022\023\n\013rankListLen\030\002 \001(\005\"S\n\016WareGivingI"
  "nfo\022\016\n\006propId\030\001 \001(\005\022\020\n\010propName\030\002 \001(\t\022\r\n"
  "\005ratio\030\003 \001(\002\022\020\n\010noRepeat\030\004 \001(\010\"\274\001\n\010WareI"
  "nfo\022\016\n\006wareId\030\001 \001(\t\0224\n\022wareGivingInfoLis"
  "t\030\002 \003(\0132\030.PlaneWar.WareGivingInfo\022\020\n\010min"
  "Money\030\003 \001(\005\022\020\n\010maxMoney\030\004 \001(\005\022\r\n\005price\030\005"
  " \001(\005\0227\n\025wareGivingProInfoList\030\006 \003(\0132\030.Pl"
  "aneWar.WareGivingInfo\"E\n\024ExtraGradeRewar"
  "dInfo\022\r\n\005title\030\001 \001(\t\022\014\n\004desc\030\002 \001(\t\022\020\n\010ex"
  "traExp\030\003 \001(\002\"\322\001\n\016RankWareConfig\022(\n\014commW"
  "areInfo\030\001 \001(\0132\022.PlaneWar.WareInfo\022+\n\017adv"
  "anceWareInfo\030\002 \001(\0132\022.PlaneWar.WareInfo\022<"
  "\n\024extraGradeRewardInfo\030\003 \001(\0132\036.PlaneWar."
  "ExtraGradeRewardInfo\022\024\n\014wareDescList\030\004 \003"
  "(\005\022\025\n\rgradeDescList\030\005 \003(\005\"/\n\nDiceConfig\022"
  "\021\n\tratioList\030\001 \003(\005\022\016\n\006maxMul\030\002 \001(\005\"\017\n\rCS"
  "SyncConfigs\"\241\002\n\rSCSyncConfigs\022.\n\rfortune"
  "Config\030\001 \003(\0132\027.PlaneWar.FortuneConfig\022&\n"
  "\tbeeConfig\030\002 \001(\0132\023.PlaneWar.BeeConfig\022,\n"
  "\014replayConfig\030\003 \001(\0132\026.PlaneWar.ReplayCon"
  "fig\0222\n\017gradeRankConfig\030\004 \001(\0132\031.PlaneWar."
  "GradeRankConfig\022,\n\nwareConfig\030\005 \001(\0132\030.Pl"
  "aneWar.RankWareConfig\022(\n\ndiceConfig\030\006 \001("
  "\0132\024.PlaneWar.DiceConfig\")\n\024CSConfirmWeap"
  "onExist\022\021\n\tsourceUID\030\001 \001(\005\"%\n\024SCConfirmW"
  "eaponExist\022\r\n\005exist\030\001 \001(\010\"0\n\nCSGetVideo\022"
  "\017\n\007videoId\030\001 \001(\t\022\021\n\tvideoType\030\002 \001(\005\"\322\001\n\n"
  "SCGetVideo\022.\n\017createdPathList\030\001 \003(\0132\025.Pl"
  "aneWar.MonsterPath\022\022\n\nrewardType\030\002 \001(\005\022\021"
  "\n\ttimestamp\030\003 \001(\003\022\016\n\006reward\030\004 \001(\005\022\r\n\005cha"
  "ir\030\005 \001(\005\022\r\n\005money\030\006 \001(\003\022\r\n\005ratio\030\007 \001(\005\022\017"
  "\n\007gunType\030\010 \001(\005\022\r\n\005arena\030\t \001(\005\022\020\n\010weapon"
  "Id\030\n \001(\005\"\210\001\n\013VideoCommon\022\016\n\006reward\030\001 \001(\005"
  "\022\022\n\nrewardType\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003\022"
  "\017\n\007videoId\030\004 \001(\t\022\016\n\006unread\030\005 \001(\010\022\020\n\010weap"
  "onId\030\006 \001(\005\022\017\n\007arenaId\030\007 \001(\005\"X\n\017GlobalVid"
  "eoInfo\022\020\n\010niceName\030\001 \001(\t\022\014\n\004self\030\002 \001(\010\022%"
  "\n\006common\030\003 \001(\0132\025.PlaneWar.VideoCommon\"E\n"
  "\rSelfVideoInfo\022\r\n\005ratio\030\001 \001(\005\022%\n\006common\030"
  "\002 \001(\0132\025.PlaneWar.VideoCommon\"-\n\021CSSelfVi"
  "deoRecord\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\"T\n\021S"
  "CSelfVideoRecord\022*\n\tvideoList\030\001 \003(\0132\027.Pl"
  "aneWar.SelfVideoInfo\022\023\n\013refreshTime\030\002 \001("
  "\005\"\'\n\013CSVideoRank\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001"
  "(\005\"P\n\013SCVideoRank\022,\n\tvideoList\030\001 \003(\0132\031.P"
  "laneWar.GlobalVideoInfo\022\023\n\013refreshTime\030\002"
  " \001(\005\"\317\001\n\rReceiveReward\022\016\n\006propId\030\001 \001(\005\022\013"
  "\n\003num\030\002 \001(\005\022\017\n\007advance\030\003 \001(\010\022\016\n\006minNum\030\004"
  " \001(\005\022\016\n\006maxNum\030\005 \001(\005\022\013\n\003box\030\006 \001(\010\022\020\n\010uni"
  "queId\030\007 \001(\005\022\014\n\004desc\030\010 \001(\t\022\021\n\ttimeLimit\030\t"
  " \001(\005\022\r\n\005title\030\n \001(\t\022\020\n\010propType\030\013 \001(\005\022\017\n"
  "\007special\030\014 \001(\005\"\026\n\024CSReceiveGradeReward\"\223"
  "\001\n\024SCReceiveGradeReward\0222\n\021receiveReward"
  "List\030\001 \003(\0132\027.PlaneWar.ReceiveReward\0224\n\023u"
  "nReceiveRewardList\030\002 \003(\0132\027.PlaneWar.Rece"
  "iveReward\022\021\n\tseasonEnd\030\003 \001(\010\"`\n\021GradeRew"
  "ardDetail\022+\n\nrewardInfo\030\001 \001(\0132\027.PlaneWar"
  ".ReceiveReward\022\r\n\005reach\030\002 \001(\010\022\017\n\007receive"
  "\030\003 \001(\010\"\237\001\n\017GradeRewardInfo\022\020\n\010rankName\030\001"
  " \001(\t\0223\n\016commRewardList\030\002 \003(\0132\033.PlaneWar."
  "GradeRewardDetail\0226\n\021advanceRewardList\030\003"
  " \003(\0132\033.PlaneWar.GradeRewardDetail\022\r\n\005fir"
  "st\030\004 \001(\010\"\205\002\n\rGradeRankInfo\022\023\n\013currentRan"
  "k\030\001 \001(\005\022\014\n\004star\030\002 \001(\005\022\020\n\010rankName\030\003 \001(\t\022"
  "\023\n\013historyRank\030\004 \001(\005\022\027\n\017historyRankName\030"
  "\005 \001(\t\022\017\n\007kingTag\030\006 \001(\005\022\022\n\ncurrentExp\030\007 \001"
  "(\002\022\017\n\007nextExp\030\010 \001(\002\022\020\n\010extraExp\030\t \001(\002\022\022\n"
  "\nplayerName\030\n \001(\t\022\025\n\ravailableGift\030\013 \001(\005"
  "\022\016\n\006isLast\030\014 \001(\010\022\016\n\006isSelf\030\r \001(\010\"%\n\022CSGe"
  "tTableUserInfo\022\017\n\007chairId\030\001 \001(\005\"n\n\022SCGet"
  "TableUserInfo\022(\n\nplayerInfo\030\001 \001(\0132\024.Plan"
  "eWar.PlayerInfo\022.\n\rgradeRankInfo\030\002 \001(\0132\027"
  ".PlaneWar.GradeRankInfo\"8\n\024CSGetGradeRew"
  "ardInfo\022\020\n\010startIdx\030\001 \001(\005\022\016\n\006endIdx\030\002 \001("
  "\005\"N\n\024SCGetGradeRewardInfo\0226\n\023gradeReward"
  "InfoList\030\001 \003(\0132\031.PlaneWar.GradeRewardInf"
  "o\"\024\n\022CSGetGradeRankInfo\"D\n\022SCGetGradeRan"
  "kInfo\022.\n\rgradeRankInfo\030\001 \001(\0132\027.PlaneWar."
  "GradeRankInfo\"_\n\rSCRankUpgrade\022.\n\rgradeR"
  "ankInfo\030\001 \001(\0132\027.PlaneWar.GradeRankInfo\022\017"
  "\n\007advance\030\002 \001(\010\022\r\n\005chair\030\003 \001(\005\"\024\n\022CSRank"
  "SeasonStatus\"l\n\022SCRankSeasonStatus\022\016\n\006en"
  "able\030\001 \001(\010\022\021\n\tstartTime\030\002 \001(\005\022\017\n\007endTime"
  "\030\003 \001(\005\022\022\n\nseasonName\030\004 \001(\t\022\016\n\006season\030\005 \001"
  "(\005\"\032\n\nSCSyncTime\022\014\n\004time\030\001 \001(\005\"&\n\024SCNoti"
  "cePropsOverdue\022\016\n\006propId\030\001 \001(\005\"0\n\016Purcha"
  "seResult\022\016\n\006wareId\030\001 \001(\t\022\016\n\006status\030\002 \001(\010"
  "\",\n\026CSQueryPackagePurchase\022\022\n\nwareIdList"
  "\030\001 \003(\005\"K\n\026SCQueryPackagePurchase\0221\n\017purc"
  "haseResList\030\001 \003(\0132\030.PlaneWar.PurchaseRes"
  "ult\"(\n\tPropsInfo\022\016\n\006propId\030\001 \001(\005\022\013\n\003num\030"
  "\002 \001(\005\"<\n\022SCGamePurchasePush\022&\n\tpropsList"
  "\030\001 \003(\0132\023.PlaneWar.PropsInfo\"V\n\016PackageMa"
  "rquee\022\020\n\010nickname\030\001 \001(\t\022\016\n\006wareId\030\002 \001(\t\022"
  "\"\n\005props\030\003 \001(\0132\023.PlaneWar.PropsInfo\"\027\n\025C"
  "SQueryPackageMarquee\"c\n\025SCQueryPackageMa"
  "rquee\022\024\n\014marqueeModel\030\001 \001(\t\0224\n\022packageMa"
  "rqueeList\030\002 \003(\0132\030.PlaneWar.PackageMarque"
  "e\"\034\n\nCSSetWings\022\016\n\006wingId\030\001 \001(\005\"+\n\nSCSet"
  "Wings\022\r\n\005chair\030\001 \001(\005\022\016\n\006wingId\030\002 \001(\005\"\026\n\024"
  "CSVerifySeasonChange\"\300\001\n\024SCVerifySeasonC"
  "hange\022\016\n\006change\030\001 \001(\010\0224\n\023beforeGradeRank"
  "Info\030\002 \001(\0132\027.PlaneWar.GradeRankInfo\0225\n\024c"
  "urrentGradeRankInfo\030\003 \001(\0132\027.PlaneWar.Gra"
  "deRankInfo\022\024\n\014beforeSeason\030\004 \001(\005\022\025\n\rcurr"
  "entSeason\030\005 \001(\005\"\034\n\032CSExistUnReceiveRankR"
  "eward\"+\n\032SCExistUnReceiveRankReward\022\r\n\005e"
  "xist\030\001 \001(\010\"(\n\031CSReceiveExtraGradeReward\022"
  "\013\n\003num\030\001 \001(\005\"\\\n\031SCReceiveExtraGradeRewar"
  "d\0222\n\021receiveRewardList\030\001 \003(\0132\027.PlaneWar."
  "ReceiveReward\022\013\n\003num\030\002 \001(\005\">\n\022CSGetGrade"
  "RankList\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\022\016\n\006se"
  "ason\030\003 \001(\005\"\200\001\n\022SCGetGradeRankList\022.\n\rgra"
  "deRankList\030\001 \003(\0132\027.PlaneWar.GradeRankInf"
  "o\022-\n\014selfRankInfo\030\002 \001(\0132\027.PlaneWar.Grade"
  "RankInfo\022\013\n\003ord\030\003 \001(\005\"\036\n\nCSBuyPlane\022\020\n\010p"
  "lane_id\030\001 \001(\005\"\036\n\nSCBuyPlane\022\020\n\010plane_id\030"
  "\001 \001(\005\"\036\n\nCSBuyWings\022\020\n\010wings_id\030\001 \001(\005\"\036\n"
  "\nSCBuyWings\022\020\n\010wings_id\030\001 \001(\005\"=\n\017OpenChe"
  "stReward\022\n\n\002id\030\001 \001(\005\022\036\n\003num\030\002 \001(\0132\021.Plan"
  "eWar.Decimal\"\253\001\n\023SCUpdateChestStatus\022\021\n\t"
  "is_active\030\001 \001(\010\022\'\n\nchest_type\030\002 \001(\0162\023.Pl"
  "aneWar.ChestType\022\026\n\016total_progress\030\003 \001(\005"
  "\022\027\n\017remain_progress\030\004 \001(\005\022\r\n\005guide\030\005 \001(\010"
  "\022\030\n\020available_reward\030\006 \001(\005\"`\n\nChestBrief"
  "\022\'\n\nchest_type\030\001 \001(\0162\023.PlaneWar.ChestTyp"
  "e\022)\n\006reward\030\002 \003(\0132\031.PlaneWar.OpenChestRe"
  "ward\"\300\001\n\rSCChestConfig\022\020\n\010end_time\030\001 \001(\005"
  "\022.\n\020chest_brief_list\030\002 \003(\0132\024.PlaneWar.Ch"
  "estBrief\022\021\n\tmin_ratio\030\003 \001(\005\022\021\n\tauto_open"
  "\030\004 \001(\010\0224\n\013auto_option\030\005 \001(\0162\037.PlaneWar.C"
  "hestAutoSelectOption\022\021\n\tis_enable\030\006 \001(\010\""
  "s\n\013SCOpenChest\022.\n\013reward_list\030\001 \003(\0132\031.Pl"
  "aneWar.OpenChestReward\0224\n\013auto_option\030\002 "
  "\001(\0162\037.PlaneWar.ChestAutoSelectOption\"V\n\023"
  "CSSelectChestReward\022\024\n\014select_index\030\001 \001("
  "\005\022)\n\006reward\030\002 \001(\0132\031.PlaneWar.OpenChestRe"
  "ward\"_\n\024CSChestSetAutoSelect\0224\n\013auto_opt"
  "ion\030\001 \001(\0162\037.PlaneWar.ChestAutoSelectOpti"
  "on\022\021\n\tauto_open\030\002 \001(\010\"_\n\024SCChestSetAutoS"
  "elect\0224\n\013auto_option\030\001 \001(\0162\037.PlaneWar.Ch"
  "estAutoSelectOption\022\021\n\tauto_open\030\002 \001(\010\"%"
  "\n\020CSChestSetEnable\022\021\n\tis_enable\030\001 \001(\010\"%\n"
  "\020SCChestSetEnable\022\021\n\tis_enable\030\001 \001(\010\"K\n\017"
  "SCWaterDropInfo\022\016\n\006enable\030\001 \001(\010\022\021\n\tdropC"
  "ount\030\002 \001(\005\022\025\n\rfragmentCount\030\003 \001(\005\"\'\n\010Tex"
  "tInfo\022\r\n\005index\030\001 \001(\005\022\014\n\004text\030\002 \001(\t\"4\n\020CS"
  "SyncTextConfig\022\020\n\010startIdx\030\001 \001(\005\022\016\n\006endI"
  "dx\030\002 \001(\005\"8\n\020SCSyncTextConfig\022$\n\010textList"
  "\030\001 \003(\0132\022.PlaneWar.TextInfo*\354\021\n\rEMsgIDSub"
  "Game\022\t\n\005Login\020\000\022\n\n\006Logout\020\002\022\t\n\005Ready\020\003\022\020"
  "\n\014MonsterSpawn\020\004\022\010\n\004Shot\020\005\022\007\n\003Hit\020\006\022\022\n\016M"
  "onsterDestory\020\007\022\010\n\004Lock\020\010\022\r\n\tTransform\020\t"
  "\022\020\n\014PlanePosSync\020\n\022\014\n\010StateEnd\020\013\022\014\n\010ModR"
  "atio\020\014\022\016\n\nGainNotify\020\r\022\016\n\nGainSettle\020\016\022\014"
  "\n\010SetPlane\020\017\022\023\n\017UserEnterNotify\020\020\022\024\n\020Swi"
  "tchBackGround\020\021\022\023\n\017SyncMonsterInfo\020\022\022\023\n\017"
  "ScratchCardList\020\023\022\022\n\016UseScratchCard\020\024\022\021\n"
  "\rExplodeSettle\020\025\022\025\n\021FallIntoBlackHole\020\026\022"
  "\024\n\020SyncBlackHolePos\020\027\022\017\n\013Interaction\020\030\022\020"
  "\n\014ActivityInfo\020\031\022\021\n\rGetTaskReward\020\032\022\017\n\013G"
  "etTaskInfo\020\033\022\024\n\020NoticeInfoChange\020\034\022\030\n\024No"
  "ticeHallProsChange\020\035\022\027\n\023NoticeTimingMons"
  "ter\020\036\022\021\n\rPiggyBankInfo\020\037\022\021\n\rOpenPiggyBan"
  "k\020 \022\027\n\023PiggyBankOpenFinish\020!\022\031\n\025PiggyBan"
  "kChangeNotify\020\"\022\031\n\025SetPersonalPoolEnable"
  "\020#\022\024\n\020PersonalPoolInfo\020$\022\024\n\020DrawPersonal"
  "Pool\020%\022\034\n\030PersonalPoolChangeNotify\020&\022\016\n\n"
  "UseMissile\020\'\022\017\n\013MonsterCall\020(\022\017\n\013ClickSt"
  "atic\020)\022\014\n\010RankList\020*\022\020\n\014LastRankList\020+\022\r"
  "\n\tTitleList\020,\022\017\n\013SelectTitle\020-\022\025\n\021TitleA"
  "ctiveNotify\020.\022\030\n\024RoomInfoChangeNotify\020/\022"
  "\016\n\nMatchBrief\0200\022\017\n\013MatchDetail\0201\022\017\n\013Matc"
  "hReward\0202\022\025\n\021MatchRewardNotify\0203\022\014\n\010Gift"
  "List\0204\022\024\n\020GiftExpireNotify\0205\022\026\n\022GetMatch"
  "TaskReward\0206\022\023\n\017WeaponPieceInfo\0207\022\r\n\tBuy"
  "Weapon\0208\022\024\n\020WeaponEarnRecord\0209\022\024\n\020StateF"
  "orceSettle\020:\022\023\n\017AddMissedBullet\020;\022\024\n\020Upd"
  "ateBulletData\020<\022\023\n\017UseMissileBatch\020=\022\023\n\017"
  "SyncPropsToHall\020>\022\017\n\013ChangeTable\020\?\022\025\n\021Up"
  "gradePoolReward\020@\022\026\n\022GetPoolLuckyReward\020"
  "A\022\017\n\013UseRoulette\020B\022\024\n\020RedEnvelopePoint\020C"
  "\022\023\n\017RedEnvelopeInfo\020D\022\023\n\017OpenRedEnvelope"
  "\020E\022\026\n\022UpgradeRedEnvelope\020F\022\031\n\025CommonRedE"
  "nvelopeInfo\020G\022\031\n\025OpenCommonRedEnvelope\020H"
  "\022\036\n\032GrantCommonRedEnvelopeRank\020I\022\035\n\031Open"
  "CommonRedEnvelopeRank\020J\022 \n\034GrantCommonRe"
  "dEnvelopeRecord\020K\022\037\n\033OpenCommonRedEnvelo"
  "peRecord\020L\022\035\n\031RedEnvelopeOpStatusNotify\020"
  "M\022\023\n\017SyncWeaponState\020N\022\n\n\006PreHit\020O\022\021\n\rSy"
  "ncAnimation\020P\022\021\n\rGetAnimations\020Q\022\017\n\013Sync"
  "Configs\020R\022\026\n\022ConfirmWeaponExist\020S\022\014\n\010Get"
  "Video\020T\022\023\n\017SelfVideoRecord\020U\022\r\n\tVideoRan"
  "k\020V\022\024\n\020GetGradeRankInfo\020W\022\026\n\022ReceiveGrad"
  "eReward\020X\022\014\n\010SyncTime\020Y\022\017\n\013RankUpgrade\020Z"
  "\022\024\n\020RankSeasonStatus\020[\022\026\n\022NoticePropsOve"
  "rdue\020\\\022\030\n\024QueryPackagePurchase\020]\022\014\n\010SetW"
  "ings\020^\022\024\n\020GetTableUserInfo\020_\022\026\n\022VerifySe"
  "asonChange\020`\022\034\n\030ExistUnReceiveRankReward"
  "\020a\022\026\n\022GetGradeRewardInfo\020b\022\024\n\020GamePurcha"
  "sePush\020c\022\027\n\023QueryPackageMarquee\020d\022\024\n\020Get"
  "GradeRankList\020e\022\033\n\027ReceiveExtraGradeRewa"
  "rd\020f\022\014\n\010BuyPlane\020g\022\014\n\010BuyWings\020h\022\025\n\021Upda"
  "teChestStatus\020i\022\017\n\013ChestConfig\020j\022\r\n\tOpen"
  "Chest\020k\022\025\n\021SelectChestReward\020l\022\026\n\022ChestS"
  "etAutoSelect\020m\022\022\n\016ChestSetEnable\020n\022\021\n\rWa"
  "terDropInfo\020x\022\022\n\016SyncTextConfig\020y*\260\017\n\tEr"
  "rorCode\022\013\n\007Success\020\000\022\t\n\004Fail\020\350\007\022\022\n\rEnter"
  "RoomFail\020\351\007\022\025\n\020LoadBaseInfoFail\020\352\007\022\024\n\017Lo"
  "adVipInfoFail\020\353\007\022\026\n\021LoadExtraInfoFail\020\354\007"
  "\022\026\n\021CreatePlayerError\020\355\007\022\023\n\016PlayerNotExi"
  "st\020\356\007\022\022\n\rTableNotExist\020\357\007\022\023\n\016MoneyNotEno"
  "ugh\020\360\007\022\020\n\013BulletError\020\361\007\022\024\n\017MonsterNotEx"
  "ist\020\362\007\022\025\n\020PlayerNotInTable\020\363\007\022\031\n\024Scratch"
  "CardNotEnough\020\364\007\022\034\n\027InteractionTypeNotEx"
  "ist\020\365\007\022\033\n\026InteractionNotCooldown\020\366\007\022\033\n\026I"
  "nteractionTargetError\020\367\007\022\026\n\021TokenVerifyF"
  "ailed\020\370\007\022\022\n\rTaskNotEnough\020\371\007\022\025\n\020DiamondN"
  "otEnough\020\372\007\022\024\n\017ConcurrentLogin\020\373\007\022\021\n\014Alr"
  "eadyLogin\020\374\007\022\021\n\014ServerClosed\020\375\007\022\025\n\020Missi"
  "leNotEnough\020\370\n\022\030\n\023PersonalPoolDisable\020\334\013"
  "\022\032\n\025PersonalPoolNotEnough\020\335\013\022\032\n\025Personal"
  "PoolSaveError\020\336\013\022\037\n\032PersonalPoolGetRewar"
  "dError\020\337\013\022\024\n\017NoTmpPoolReward\020\340\013\022\024\n\017PoolU"
  "pgradeFail\020\341\013\022\034\n\027PoolLuckyValueNotEnough"
  "\020\342\013\022\027\n\022PiggyBankNotEnable\020\354\016\022\026\n\021PiggyBan"
  "kNoReward\020\355\016\022\031\n\024PiggyBankRewardError\020\356\016\022"
  "\032\n\025PiggyBankPackageError\020\357\016\022\022\n\rCallNotEn"
  "ough\020\320\017\022\033\n\026CallSpecialMonsterFull\020\321\017\022\033\n\026"
  "CallMonsterScreenLimit\020\322\017\022\021\n\014CallCoolDow"
  "n\020\323\017\022\022\n\rCallExceedMax\020\324\017\022\022\n\rRankTypeErro"
  "r\020\264\020\022\023\n\016RankIndexError\020\265\020\022\026\n\021TitleConfNo"
  "tExist\020\230\021\022\023\n\016TitleNotActive\020\231\021\022\017\n\nNotInM"
  "atch\020\374\021\022\017\n\nNoSuchTask\020\375\021\022\026\n\021HaveGotTaskR"
  "eward\020\376\021\022\023\n\016NotAchieveTask\020\377\021\022\031\n\024WeaponP"
  "ieceNotEnough\020\340\022\022\030\n\023GetWeaponRecordFail\020"
  "\341\022\022\027\n\022WeaponConfNotExist\020\342\022\022\022\n\rCantBuyWe"
  "apon\020\343\022\022\022\n\rOpenChestFail\020\344\022\022\032\n\025SelectChe"
  "stRewardFail\020\345\022\022\026\n\021RouletteNotEnough\020\304\023\022"
  "\031\n\024RouletteConfNotExist\020\305\023\022\"\n\035OpenRedEnv"
  "elopePointNotEnough\020\250\024\022\036\n\031OpenRedEnvelop"
  "eIndexError\020\251\024\022\033\n\026NoTmpRedEnvelopeReward"
  "\020\252\024\022\"\n\035RedEnvelopeUpgradeNumNoEnough\020\253\024\022"
  "!\n\034GetCommonRedEnvelopeInfoFail\020\254\024\022&\n!Op"
  "enCommonRedEnvelopeNumNotEnough\020\255\024\022\036\n\031Op"
  "enCommonRedEnvelopeFail\020\256\024\022\035\n\030CommonRedE"
  "nvelopeInvalid\020\257\024\022 \n\033GetRedEnvelopeGrant"
  "RankFail\020\260\024\022\037\n\032GetRedEnvelopeOpenRankFai"
  "l\020\261\024\022\"\n\035GetRedEnvelopeGrantRecordFail\020\262\024"
  "\022!\n\034GetRedEnvelopeOpenRecordFail\020\263\024\022\022\n\rV"
  "ideoNotExist\020\214\025\022\023\n\016VideoListLimit\020\215\025\022\023\n\016"
  "GradeIsNotOpen\020\216\025\022\026\n\021GetGradeInfoError\020\217"
  "\025\022\025\n\020WingsNotObtained\020\220\025\022\022\n\rUniqueIdErro"
  "r\020\221\025\022\030\n\023AlreadyReceiveError\020\222\025\022\025\n\020NotEno"
  "ughGiftBag\020\223\025\022\034\n\027AlreadyHaveThisPropsErr"
  "\020\224\025\022\017\n\nPropsIdErr\020\225\025\022\026\n\021CanNotBuyPropsEr"
  "r\020\226\025*^\n\rRedOpenStatus\022\017\n\013RedOpenLock\020\000\022\023"
  "\n\017RedOpenUnLocked\020\001\022\024\n\020RedOpenNotActive\020"
  "\002\022\021\n\rRedOpenActive\020\003*K\n\020UpgradeRedResult"
  "\022\022\n\016UpgradeAbandon\020\000\022\017\n\013UpgradeFail\020\001\022\022\n"
  "\016UpgradeSuccess\020\002*b\n\016GrantRedStatus\022\r\n\tR"
  "edOpened\020\000\022\017\n\013RedNoOpened\020\001\022\016\n\nRedNotSho"
  "w\020\002\022\020\n\014RedCountDown\020\003\022\016\n\nRedExpired\020\004*i\n"
  "\013RedOpStatus\022\016\n\nRedOpClose\020\000\022\r\n\tRedOpOpe"
  "n\020\001\022\020\n\014RedOpUpgrade\020\002\022\024\n\020RedOpGrantRewar"
  "d\020\003\022\023\n\017RedOpOpenReward\020\004*`\n\tChestType\022\026\n"
  "\022ChestTypePorcelain\020\000\022\023\n\017ChestTypeBronze"
  "\020\001\022\023\n\017ChestTypeSilver\020\002\022\021\n\rChestTypeGold"
  "\020\003*A\n\025ChestAutoSelectOption\022\010\n\004None\020\000\022\023\n"
  "\017RedPacketTicket\020\001\022\t\n\005Money\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PlaneWar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PlaneWar_2eproto_sccs[300] = {
  &scc_info_Animation_PlaneWar_2eproto.base,
  &scc_info_ArenaPieceInfo_PlaneWar_2eproto.base,
  &scc_info_BeeConfig_PlaneWar_2eproto.base,
  &scc_info_BeeInfo_PlaneWar_2eproto.base,
  &scc_info_BlackHoleInfo_PlaneWar_2eproto.base,
  &scc_info_BuffInfo_PlaneWar_2eproto.base,
  &scc_info_CSBuyPlane_PlaneWar_2eproto.base,
  &scc_info_CSBuyWeapon_PlaneWar_2eproto.base,
  &scc_info_CSBuyWings_PlaneWar_2eproto.base,
  &scc_info_CSChangeTable_PlaneWar_2eproto.base,
  &scc_info_CSChestSetAutoSelect_PlaneWar_2eproto.base,
  &scc_info_CSChestSetEnable_PlaneWar_2eproto.base,
  &scc_info_CSClickStatic_PlaneWar_2eproto.base,
  &scc_info_CSCommonRedEnvelopeInfo_PlaneWar_2eproto.base,
  &scc_info_CSConfirmWeaponExist_PlaneWar_2eproto.base,
  &scc_info_CSDrawPersonalPool_PlaneWar_2eproto.base,
  &scc_info_CSExistUnReceiveRankReward_PlaneWar_2eproto.base,
  &scc_info_CSExplodeSettle_PlaneWar_2eproto.base,
  &scc_info_CSFallIntoBlackHole_PlaneWar_2eproto.base,
  &scc_info_CSGetGradeRankInfo_PlaneWar_2eproto.base,
  &scc_info_CSGetGradeRankList_PlaneWar_2eproto.base,
  &scc_info_CSGetGradeRewardInfo_PlaneWar_2eproto.base,
  &scc_info_CSGetMatchTaskReward_PlaneWar_2eproto.base,
  &scc_info_CSGetPoolLuckyReward_PlaneWar_2eproto.base,
  &scc_info_CSGetTableUserInfo_PlaneWar_2eproto.base,
  &scc_info_CSGetTaskInfo_PlaneWar_2eproto.base,
  &scc_info_CSGetTaskReward_PlaneWar_2eproto.base,
  &scc_info_CSGetVideo_PlaneWar_2eproto.base,
  &scc_info_CSGiftList_PlaneWar_2eproto.base,
  &scc_info_CSGrantCommonRedEnvelopeRank_PlaneWar_2eproto.base,
  &scc_info_CSGrantCommonRedEnvelopeRecord_PlaneWar_2eproto.base,
  &scc_info_CSHit_PlaneWar_2eproto.base,
  &scc_info_CSInteraction_PlaneWar_2eproto.base,
  &scc_info_CSLock_PlaneWar_2eproto.base,
  &scc_info_CSLogin_PlaneWar_2eproto.base,
  &scc_info_CSLogout_PlaneWar_2eproto.base,
  &scc_info_CSMatchBrief_PlaneWar_2eproto.base,
  &scc_info_CSMatchDetail_PlaneWar_2eproto.base,
  &scc_info_CSMatchReward_PlaneWar_2eproto.base,
  &scc_info_CSModRatio_PlaneWar_2eproto.base,
  &scc_info_CSMonsterCall_PlaneWar_2eproto.base,
  &scc_info_CSMonsterDestory_PlaneWar_2eproto.base,
  &scc_info_CSOpenCommonRedEnvelope_PlaneWar_2eproto.base,
  &scc_info_CSOpenCommonRedEnvelopeRank_PlaneWar_2eproto.base,
  &scc_info_CSOpenCommonRedEnvelopeRecord_PlaneWar_2eproto.base,
  &scc_info_CSOpenPiggyBank_PlaneWar_2eproto.base,
  &scc_info_CSOpenRedEnvelope_PlaneWar_2eproto.base,
  &scc_info_CSPersonalPoolInfo_PlaneWar_2eproto.base,
  &scc_info_CSPiggyBankInfo_PlaneWar_2eproto.base,
  &scc_info_CSPiggyBankOpenFinish_PlaneWar_2eproto.base,
  &scc_info_CSPlanePosSync_PlaneWar_2eproto.base,
  &scc_info_CSPreHit_PlaneWar_2eproto.base,
  &scc_info_CSQueryPackageMarquee_PlaneWar_2eproto.base,
  &scc_info_CSQueryPackagePurchase_PlaneWar_2eproto.base,
  &scc_info_CSRankList_PlaneWar_2eproto.base,
  &scc_info_CSRankSeasonStatus_PlaneWar_2eproto.base,
  &scc_info_CSReady_PlaneWar_2eproto.base,
  &scc_info_CSReceiveExtraGradeReward_PlaneWar_2eproto.base,
  &scc_info_CSReceiveGradeReward_PlaneWar_2eproto.base,
  &scc_info_CSRedEnvelopeInfo_PlaneWar_2eproto.base,
  &scc_info_CSRedEnvelopePoint_PlaneWar_2eproto.base,
  &scc_info_CSScratchCardList_PlaneWar_2eproto.base,
  &scc_info_CSSelectChestReward_PlaneWar_2eproto.base,
  &scc_info_CSSelectTitle_PlaneWar_2eproto.base,
  &scc_info_CSSelfVideoRecord_PlaneWar_2eproto.base,
  &scc_info_CSSetPersonalPoolEnable_PlaneWar_2eproto.base,
  &scc_info_CSSetPlane_PlaneWar_2eproto.base,
  &scc_info_CSSetWings_PlaneWar_2eproto.base,
  &scc_info_CSShot_PlaneWar_2eproto.base,
  &scc_info_CSStateForceSettle_PlaneWar_2eproto.base,
  &scc_info_CSSwitchBackGround_PlaneWar_2eproto.base,
  &scc_info_CSSyncAnimation_PlaneWar_2eproto.base,
  &scc_info_CSSyncBlackHolePos_PlaneWar_2eproto.base,
  &scc_info_CSSyncConfigs_PlaneWar_2eproto.base,
  &scc_info_CSSyncPropsToHall_PlaneWar_2eproto.base,
  &scc_info_CSSyncTextConfig_PlaneWar_2eproto.base,
  &scc_info_CSSyncWeaponState_PlaneWar_2eproto.base,
  &scc_info_CSTransform_PlaneWar_2eproto.base,
  &scc_info_CSUpdateBulletData_PlaneWar_2eproto.base,
  &scc_info_CSUpgradePoolReward_PlaneWar_2eproto.base,
  &scc_info_CSUpgradeRedEnvelope_PlaneWar_2eproto.base,
  &scc_info_CSUseMissile_PlaneWar_2eproto.base,
  &scc_info_CSUseMissileBatch_PlaneWar_2eproto.base,
  &scc_info_CSUseRoulette_PlaneWar_2eproto.base,
  &scc_info_CSUseScratchCard_PlaneWar_2eproto.base,
  &scc_info_CSVerifySeasonChange_PlaneWar_2eproto.base,
  &scc_info_CSVideoRank_PlaneWar_2eproto.base,
  &scc_info_CSWeaponEarnRecord_PlaneWar_2eproto.base,
  &scc_info_CSWeaponPieceInfo_PlaneWar_2eproto.base,
  &scc_info_ChestBrief_PlaneWar_2eproto.base,
  &scc_info_CommonPropInfo_PlaneWar_2eproto.base,
  &scc_info_CommonRedInfo_PlaneWar_2eproto.base,
  &scc_info_CommonReplayConfig_PlaneWar_2eproto.base,
  &scc_info_ConnMonsterInfo_PlaneWar_2eproto.base,
  &scc_info_Decimal_PlaneWar_2eproto.base,
  &scc_info_Dice_PlaneWar_2eproto.base,
  &scc_info_DiceConfig_PlaneWar_2eproto.base,
  &scc_info_DiceInfo_PlaneWar_2eproto.base,
  &scc_info_DiceJson_PlaneWar_2eproto.base,
  &scc_info_DropBuff_PlaneWar_2eproto.base,
  &scc_info_DropPoker_PlaneWar_2eproto.base,
  &scc_info_EarnRecord_PlaneWar_2eproto.base,
  &scc_info_EffectInfo_PlaneWar_2eproto.base,
  &scc_info_ExtraGradeRewardInfo_PlaneWar_2eproto.base,
  &scc_info_FakeTresureInfo_PlaneWar_2eproto.base,
  &scc_info_FlameInfo_PlaneWar_2eproto.base,
  &scc_info_FormInfo_PlaneWar_2eproto.base,
  &scc_info_FortuneConfig_PlaneWar_2eproto.base,
  &scc_info_FortuneWheelInfo_PlaneWar_2eproto.base,
  &scc_info_FortuneWheelJson_PlaneWar_2eproto.base,
  &scc_info_GiftInfo_PlaneWar_2eproto.base,
  &scc_info_GlobalReplayConfig_PlaneWar_2eproto.base,
  &scc_info_GlobalVideoInfo_PlaneWar_2eproto.base,
  &scc_info_GoldenToadJson_PlaneWar_2eproto.base,
  &scc_info_GradeRankConfig_PlaneWar_2eproto.base,
  &scc_info_GradeRankDetail_PlaneWar_2eproto.base,
  &scc_info_GradeRankInfo_PlaneWar_2eproto.base,
  &scc_info_GradeRewardDetail_PlaneWar_2eproto.base,
  &scc_info_GradeRewardInfo_PlaneWar_2eproto.base,
  &scc_info_GrantRankItem_PlaneWar_2eproto.base,
  &scc_info_GrantRecord_PlaneWar_2eproto.base,
  &scc_info_GunInfo_PlaneWar_2eproto.base,
  &scc_info_HitMode_PlaneWar_2eproto.base,
  &scc_info_InteractionItem_PlaneWar_2eproto.base,
  &scc_info_JumpHighArena_PlaneWar_2eproto.base,
  &scc_info_LockInfo_PlaneWar_2eproto.base,
  &scc_info_MatchRankInfo_PlaneWar_2eproto.base,
  &scc_info_MatchRewardItem_PlaneWar_2eproto.base,
  &scc_info_MatchSubInfo_PlaneWar_2eproto.base,
  &scc_info_MatchTask_PlaneWar_2eproto.base,
  &scc_info_MissileInfo_PlaneWar_2eproto.base,
  &scc_info_MonsterInfo_PlaneWar_2eproto.base,
  &scc_info_MonsterPath_PlaneWar_2eproto.base,
  &scc_info_MyMatchReward_PlaneWar_2eproto.base,
  &scc_info_MyRankInfo_PlaneWar_2eproto.base,
  &scc_info_OpenChestReward_PlaneWar_2eproto.base,
  &scc_info_OpenRankItem_PlaneWar_2eproto.base,
  &scc_info_OpenRecord_PlaneWar_2eproto.base,
  &scc_info_OrderData_PlaneWar_2eproto.base,
  &scc_info_PackageMarquee_PlaneWar_2eproto.base,
  &scc_info_PersonalPoolLevelInfo_PlaneWar_2eproto.base,
  &scc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto.base,
  &scc_info_PersonalPoolReward_PlaneWar_2eproto.base,
  &scc_info_PersonalReplayConfig_PlaneWar_2eproto.base,
  &scc_info_PieceInfo_PlaneWar_2eproto.base,
  &scc_info_PiecesStackLimitInfo_PlaneWar_2eproto.base,
  &scc_info_PiggyInfo_PlaneWar_2eproto.base,
  &scc_info_PiggyReward_PlaneWar_2eproto.base,
  &scc_info_PlaneInfo_PlaneWar_2eproto.base,
  &scc_info_PlaneSpecEffect_PlaneWar_2eproto.base,
  &scc_info_PlayerInfo_PlaneWar_2eproto.base,
  &scc_info_Poker_PlaneWar_2eproto.base,
  &scc_info_PoolArenaLimit_PlaneWar_2eproto.base,
  &scc_info_Pos_PlaneWar_2eproto.base,
  &scc_info_PropsInfo_PlaneWar_2eproto.base,
  &scc_info_ProsInfo_PlaneWar_2eproto.base,
  &scc_info_PurchaseResult_PlaneWar_2eproto.base,
  &scc_info_RankInfo_PlaneWar_2eproto.base,
  &scc_info_RankReward_PlaneWar_2eproto.base,
  &scc_info_RankStatusInfo_PlaneWar_2eproto.base,
  &scc_info_RankWareConfig_PlaneWar_2eproto.base,
  &scc_info_ReceiveReward_PlaneWar_2eproto.base,
  &scc_info_RedInfo_PlaneWar_2eproto.base,
  &scc_info_RedOpenInfo_PlaneWar_2eproto.base,
  &scc_info_RedRankPlayerInfo_PlaneWar_2eproto.base,
  &scc_info_RedUpgradeInfo_PlaneWar_2eproto.base,
  &scc_info_ReplayConfig_PlaneWar_2eproto.base,
  &scc_info_RoomInfo_PlaneWar_2eproto.base,
  &scc_info_Roulette_PlaneWar_2eproto.base,
  &scc_info_RouletteInfo_PlaneWar_2eproto.base,
  &scc_info_SCActivityInfo_PlaneWar_2eproto.base,
  &scc_info_SCAddMissedBullet_PlaneWar_2eproto.base,
  &scc_info_SCBuyPlane_PlaneWar_2eproto.base,
  &scc_info_SCBuyWeapon_PlaneWar_2eproto.base,
  &scc_info_SCBuyWings_PlaneWar_2eproto.base,
  &scc_info_SCChangeTable_PlaneWar_2eproto.base,
  &scc_info_SCChestConfig_PlaneWar_2eproto.base,
  &scc_info_SCChestSetAutoSelect_PlaneWar_2eproto.base,
  &scc_info_SCChestSetEnable_PlaneWar_2eproto.base,
  &scc_info_SCClickStatic_PlaneWar_2eproto.base,
  &scc_info_SCCommonRedEnvelopeInfo_PlaneWar_2eproto.base,
  &scc_info_SCConfirmWeaponExist_PlaneWar_2eproto.base,
  &scc_info_SCExistUnReceiveRankReward_PlaneWar_2eproto.base,
  &scc_info_SCExplodeSettle_PlaneWar_2eproto.base,
  &scc_info_SCFallIntoBlackHole_PlaneWar_2eproto.base,
  &scc_info_SCGainNotify_PlaneWar_2eproto.base,
  &scc_info_SCGainSettle_PlaneWar_2eproto.base,
  &scc_info_SCGamePurchasePush_PlaneWar_2eproto.base,
  &scc_info_SCGetAnimations_PlaneWar_2eproto.base,
  &scc_info_SCGetGradeRankInfo_PlaneWar_2eproto.base,
  &scc_info_SCGetGradeRankList_PlaneWar_2eproto.base,
  &scc_info_SCGetGradeRewardInfo_PlaneWar_2eproto.base,
  &scc_info_SCGetMatchTaskReward_PlaneWar_2eproto.base,
  &scc_info_SCGetPoolLuckyReward_PlaneWar_2eproto.base,
  &scc_info_SCGetTableUserInfo_PlaneWar_2eproto.base,
  &scc_info_SCGetTaskInfo_PlaneWar_2eproto.base,
  &scc_info_SCGetTaskReward_PlaneWar_2eproto.base,
  &scc_info_SCGetVideo_PlaneWar_2eproto.base,
  &scc_info_SCGiftExpireNotify_PlaneWar_2eproto.base,
  &scc_info_SCGiftList_PlaneWar_2eproto.base,
  &scc_info_SCGrantCommonRedEnvelopeRank_PlaneWar_2eproto.base,
  &scc_info_SCGrantCommonRedEnvelopeRecord_PlaneWar_2eproto.base,
  &scc_info_SCHit_PlaneWar_2eproto.base,
  &scc_info_SCInteraction_PlaneWar_2eproto.base,
  &scc_info_SCLock_PlaneWar_2eproto.base,
  &scc_info_SCLogin_PlaneWar_2eproto.base,
  &scc_info_SCLogout_PlaneWar_2eproto.base,
  &scc_info_SCMatchBrief_PlaneWar_2eproto.base,
  &scc_info_SCMatchDetail_PlaneWar_2eproto.base,
  &scc_info_SCMatchReward_PlaneWar_2eproto.base,
  &scc_info_SCMatchRewardNotify_PlaneWar_2eproto.base,
  &scc_info_SCModRatio_PlaneWar_2eproto.base,
  &scc_info_SCMonsterCall_PlaneWar_2eproto.base,
  &scc_info_SCMonsterDestory_PlaneWar_2eproto.base,
  &scc_info_SCMonsterSpawn_PlaneWar_2eproto.base,
  &scc_info_SCNoticeHallProsChange_PlaneWar_2eproto.base,
  &scc_info_SCNoticeInfoChange_PlaneWar_2eproto.base,
  &scc_info_SCNoticePropsOverdue_PlaneWar_2eproto.base,
  &scc_info_SCNoticeTimingMonster_PlaneWar_2eproto.base,
  &scc_info_SCOpenChest_PlaneWar_2eproto.base,
  &scc_info_SCOpenCommonRedEnvelope_PlaneWar_2eproto.base,
  &scc_info_SCOpenCommonRedEnvelopeRank_PlaneWar_2eproto.base,
  &scc_info_SCOpenCommonRedEnvelopeRecord_PlaneWar_2eproto.base,
  &scc_info_SCOpenPiggyBank_PlaneWar_2eproto.base,
  &scc_info_SCOpenRedEnvelope_PlaneWar_2eproto.base,
  &scc_info_SCPersonalPoolChangeNotify_PlaneWar_2eproto.base,
  &scc_info_SCPersonalPoolInfo_PlaneWar_2eproto.base,
  &scc_info_SCPiggyBankChangeNotify_PlaneWar_2eproto.base,
  &scc_info_SCPiggyBankInfo_PlaneWar_2eproto.base,
  &scc_info_SCPiggyBankOpenFinish_PlaneWar_2eproto.base,
  &scc_info_SCPlanePosSync_PlaneWar_2eproto.base,
  &scc_info_SCPreHit_PlaneWar_2eproto.base,
  &scc_info_SCQueryPackageMarquee_PlaneWar_2eproto.base,
  &scc_info_SCQueryPackagePurchase_PlaneWar_2eproto.base,
  &scc_info_SCRankList_PlaneWar_2eproto.base,
  &scc_info_SCRankSeasonStatus_PlaneWar_2eproto.base,
  &scc_info_SCRankUpgrade_PlaneWar_2eproto.base,
  &scc_info_SCReady_PlaneWar_2eproto.base,
  &scc_info_SCReceiveExtraGradeReward_PlaneWar_2eproto.base,
  &scc_info_SCReceiveGradeReward_PlaneWar_2eproto.base,
  &scc_info_SCRedEnvelopeInfo_PlaneWar_2eproto.base,
  &scc_info_SCRedEnvelopeOpStatusNotify_PlaneWar_2eproto.base,
  &scc_info_SCRedEnvelopePoint_PlaneWar_2eproto.base,
  &scc_info_SCRoomInfoChangeNotify_PlaneWar_2eproto.base,
  &scc_info_SCScratchCardList_PlaneWar_2eproto.base,
  &scc_info_SCSelectTitle_PlaneWar_2eproto.base,
  &scc_info_SCSelfVideoRecord_PlaneWar_2eproto.base,
  &scc_info_SCSetPersonalPoolEnable_PlaneWar_2eproto.base,
  &scc_info_SCSetPlane_PlaneWar_2eproto.base,
  &scc_info_SCSetWings_PlaneWar_2eproto.base,
  &scc_info_SCShot_PlaneWar_2eproto.base,
  &scc_info_SCStateEnd_PlaneWar_2eproto.base,
  &scc_info_SCStateForceSettle_PlaneWar_2eproto.base,
  &scc_info_SCSwitchBackGround_PlaneWar_2eproto.base,
  &scc_info_SCSyncAnimation_PlaneWar_2eproto.base,
  &scc_info_SCSyncBlackHolePos_PlaneWar_2eproto.base,
  &scc_info_SCSyncConfigs_PlaneWar_2eproto.base,
  &scc_info_SCSyncMonsterInfo_PlaneWar_2eproto.base,
  &scc_info_SCSyncPropsToHall_PlaneWar_2eproto.base,
  &scc_info_SCSyncTextConfig_PlaneWar_2eproto.base,
  &scc_info_SCSyncTime_PlaneWar_2eproto.base,
  &scc_info_SCSyncWeaponState_PlaneWar_2eproto.base,
  &scc_info_SCTitleActiveNotify_PlaneWar_2eproto.base,
  &scc_info_SCTitleList_PlaneWar_2eproto.base,
  &scc_info_SCTransform_PlaneWar_2eproto.base,
  &scc_info_SCUpdateBulletData_PlaneWar_2eproto.base,
  &scc_info_SCUpdateChestStatus_PlaneWar_2eproto.base,
  &scc_info_SCUpgradePoolReward_PlaneWar_2eproto.base,
  &scc_info_SCUpgradeRedEnvelope_PlaneWar_2eproto.base,
  &scc_info_SCUseMissile_PlaneWar_2eproto.base,
  &scc_info_SCUseMissileBatch_PlaneWar_2eproto.base,
  &scc_info_SCUseRoulette_PlaneWar_2eproto.base,
  &scc_info_SCUseScratchCard_PlaneWar_2eproto.base,
  &scc_info_SCUserEnterNotify_PlaneWar_2eproto.base,
  &scc_info_SCVerifySeasonChange_PlaneWar_2eproto.base,
  &scc_info_SCVideoRank_PlaneWar_2eproto.base,
  &scc_info_SCWaterDropInfo_PlaneWar_2eproto.base,
  &scc_info_SCWeaponEarnRecord_PlaneWar_2eproto.base,
  &scc_info_SCWeaponPieceInfo_PlaneWar_2eproto.base,
  &scc_info_SC_SceneInfo_PlaneWar_2eproto.base,
  &scc_info_ScratchInfo_PlaneWar_2eproto.base,
  &scc_info_SelfVideoInfo_PlaneWar_2eproto.base,
  &scc_info_SettleInfo_PlaneWar_2eproto.base,
  &scc_info_SpecEffect_PlaneWar_2eproto.base,
  &scc_info_StateInfo_PlaneWar_2eproto.base,
  &scc_info_TextInfo_PlaneWar_2eproto.base,
  &scc_info_TimingMonster_PlaneWar_2eproto.base,
  &scc_info_TitleInfo_PlaneWar_2eproto.base,
  &scc_info_ToadInfo_PlaneWar_2eproto.base,
  &scc_info_TreasureInfo_PlaneWar_2eproto.base,
  &scc_info_TriggerBullet_PlaneWar_2eproto.base,
  &scc_info_VideoCommon_PlaneWar_2eproto.base,
  &scc_info_WareGivingInfo_PlaneWar_2eproto.base,
  &scc_info_WareInfo_PlaneWar_2eproto.base,
  &scc_info_WeaponConfig_PlaneWar_2eproto.base,
  &scc_info_WeaponInfo_PlaneWar_2eproto.base,
  &scc_info_WeaponState_PlaneWar_2eproto.base,
  &scc_info_WeaponUseCondition_PlaneWar_2eproto.base,
  &scc_info_WingsInfo_PlaneWar_2eproto.base,
  &scc_info_WingsSpecEffect_PlaneWar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PlaneWar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlaneWar_2eproto = {
  false, false, descriptor_table_protodef_PlaneWar_2eproto, "PlaneWar.proto", 30997,
  &descriptor_table_PlaneWar_2eproto_once, descriptor_table_PlaneWar_2eproto_sccs, descriptor_table_PlaneWar_2eproto_deps, 300, 0,
  schemas, file_default_instances, TableStruct_PlaneWar_2eproto::offsets,
  file_level_metadata_PlaneWar_2eproto, 300, file_level_enum_descriptors_PlaneWar_2eproto, file_level_service_descriptors_PlaneWar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PlaneWar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PlaneWar_2eproto)), true);
namespace PlaneWar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 120:
    case 121:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1400:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2100:
    case 2101:
    case 2200:
    case 2201:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2500:
    case 2501:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2705:
    case 2706:
    case 2707:
    case 2708:
    case 2709:
    case 2710:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedOpenStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[2];
}
bool RedOpenStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpgradeRedResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[3];
}
bool UpgradeRedResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrantRedStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[4];
}
bool GrantRedStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedOpStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[5];
}
bool RedOpStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[6];
}
bool ChestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestAutoSelectOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PlaneWar_2eproto);
  return file_level_enum_descriptors_PlaneWar_2eproto[7];
}
bool ChestAutoSelectOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&denom_) -
    reinterpret_cast<char*>(&num_)) + sizeof(denom_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&denom_) -
      reinterpret_cast<char*>(&num_)) + sizeof(denom_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:PlaneWar.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denom_) -
      reinterpret_cast<char*>(&num_)) + sizeof(denom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 denom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          denom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 denom = 2;
  if (this->denom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_denom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 denom = 2;
  if (this->denom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_denom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.denom() != 0) {
    _internal_set_denom(from._internal_denom());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, denom_)
      + sizeof(Decimal::denom_)
      - PROTOBUF_FIELD_OFFSET(Decimal, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_list_(from.bet_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet_list = 1;
  {
    int byte_size = _bet_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_list_.MergeFrom(from.bet_list_);
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_list_.InternalSwap(&other->bet_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLogin::_Internal {
 public:
};

CSLogin::CSLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSLogin)
}
CSLogin::CSLogin(const CSLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSLogin)
}

void CSLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSLogin_PlaneWar_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0;
}

CSLogin::~CSLogin() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSLogin::ArenaDtor(void* object) {
  CSLogin* _this = reinterpret_cast< CSLogin* >(object);
  (void)_this;
}
void CSLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLogin& CSLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLogin_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.CSLogin.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.CSLogin.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSLogin)
  return target;
}

size_t CSLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSLogin)
    MergeFrom(*source);
  }
}

void CSLogin::MergeFrom(const CSLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLogin::CopyFrom(const CSLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLogin::IsInitialized() const {
  return true;
}

void CSLogin::InternalSwap(CSLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLogin::_Internal {
 public:
};

SCLogin::SCLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCLogin)
}
SCLogin::SCLogin(const SCLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sceneid_, &from.sceneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&arenaid_) -
    reinterpret_cast<char*>(&sceneid_)) + sizeof(arenaid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCLogin)
}

void SCLogin::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sceneid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&arenaid_) -
      reinterpret_cast<char*>(&sceneid_)) + sizeof(arenaid_));
}

SCLogin::~SCLogin() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLogin::ArenaDtor(void* object) {
  SCLogin* _this = reinterpret_cast< SCLogin* >(object);
  (void)_this;
}
void SCLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLogin& SCLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLogin_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sceneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arenaid_) -
      reinterpret_cast<char*>(&sceneid_)) + sizeof(arenaid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sceneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arenaID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arenaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sceneId = 1;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sceneid(), target);
  }

  // int32 arenaID = 2;
  if (this->arenaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arenaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCLogin)
  return target;
}

size_t SCLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sceneId = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sceneid());
  }

  // int32 arenaID = 2;
  if (this->arenaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arenaid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCLogin)
    MergeFrom(*source);
  }
}

void SCLogin::MergeFrom(const SCLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (from.arenaid() != 0) {
    _internal_set_arenaid(from._internal_arenaid());
  }
}

void SCLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLogin::CopyFrom(const SCLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLogin::IsInitialized() const {
  return true;
}

void SCLogin::InternalSwap(SCLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLogin, arenaid_)
      + sizeof(SCLogin::arenaid_)
      - PROTOBUF_FIELD_OFFSET(SCLogin, sceneid_)>(
          reinterpret_cast<char*>(&sceneid_),
          reinterpret_cast<char*>(&other->sceneid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLogout::_Internal {
 public:
};

CSLogout::CSLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSLogout)
}
CSLogout::CSLogout(const CSLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSLogout)
}

void CSLogout::SharedCtor() {
}

CSLogout::~CSLogout() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLogout::ArenaDtor(void* object) {
  CSLogout* _this = reinterpret_cast< CSLogout* >(object);
  (void)_this;
}
void CSLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLogout& CSLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLogout_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSLogout)
  return target;
}

size_t CSLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSLogout)
    MergeFrom(*source);
  }
}

void CSLogout::MergeFrom(const CSLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLogout::CopyFrom(const CSLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLogout::IsInitialized() const {
  return true;
}

void CSLogout::InternalSwap(CSLogout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLogout::_Internal {
 public:
};

SCLogout::SCLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCLogout)
}
SCLogout::SCLogout(const SCLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logouttype_, &from.logouttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&logouttype_)) + sizeof(chair_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCLogout)
}

void SCLogout::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&logouttype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&logouttype_)) + sizeof(chair_));
}

SCLogout::~SCLogout() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLogout::ArenaDtor(void* object) {
  SCLogout* _this = reinterpret_cast< SCLogout* >(object);
  (void)_this;
}
void SCLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLogout& SCLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLogout_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&logouttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&logouttype_)) + sizeof(chair_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 logoutType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          logouttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 logoutType = 1;
  if (this->logouttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logouttype(), target);
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCLogout)
  return target;
}

size_t SCLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 logoutType = 1;
  if (this->logouttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logouttype());
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCLogout)
    MergeFrom(*source);
  }
}

void SCLogout::MergeFrom(const SCLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logouttype() != 0) {
    _internal_set_logouttype(from._internal_logouttype());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLogout::CopyFrom(const SCLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLogout::IsInitialized() const {
  return true;
}

void SCLogout::InternalSwap(SCLogout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLogout, chair_)
      + sizeof(SCLogout::chair_)
      - PROTOBUF_FIELD_OFFSET(SCLogout, logouttype_)>(
          reinterpret_cast<char*>(&logouttype_),
          reinterpret_cast<char*>(&other->logouttype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonPropInfo::_Internal {
 public:
};

CommonPropInfo::CommonPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CommonPropInfo)
}
CommonPropInfo::CommonPropInfo(const CommonPropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&propid_, &from.propid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&propid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CommonPropInfo)
}

void CommonPropInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(num_));
}

CommonPropInfo::~CommonPropInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CommonPropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonPropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommonPropInfo::ArenaDtor(void* object) {
  CommonPropInfo* _this = reinterpret_cast< CommonPropInfo* >(object);
  (void)_this;
}
void CommonPropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonPropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonPropInfo& CommonPropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonPropInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CommonPropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CommonPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&propid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonPropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonPropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CommonPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propID = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CommonPropInfo)
  return target;
}

size_t CommonPropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CommonPropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 propID = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonPropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CommonPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonPropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonPropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CommonPropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CommonPropInfo)
    MergeFrom(*source);
  }
}

void CommonPropInfo::MergeFrom(const CommonPropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CommonPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void CommonPropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CommonPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPropInfo::CopyFrom(const CommonPropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CommonPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPropInfo::IsInitialized() const {
  return true;
}

void CommonPropInfo::InternalSwap(CommonPropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonPropInfo, num_)
      + sizeof(CommonPropInfo::num_)
      - PROTOBUF_FIELD_OFFSET(CommonPropInfo, propid_)>(
          reinterpret_cast<char*>(&propid_),
          reinterpret_cast<char*>(&other->propid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonPropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pos::_Internal {
 public:
};

Pos::Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.Pos)
}
Pos::Pos(const Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.Pos)
}

void Pos::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:PlaneWar.Pos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pos::ArenaDtor(void* object) {
  Pos* _this = reinterpret_cast< Pos* >(object);
  (void)_this;
}
void Pos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pos& Pos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pos_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.Pos)
  return target;
}

size_t Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.Pos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Pos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.Pos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.Pos)
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  return true;
}

void Pos::InternalSwap(Pos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pos, z_)
      + sizeof(Pos::z_)
      - PROTOBUF_FIELD_OFFSET(Pos, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuffInfo::_Internal {
 public:
};

BuffInfo::BuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compose_(arena),
  desc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.BuffInfo)
}
BuffInfo::BuffInfo(const BuffInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compose_(from.compose_),
      desc_(from.desc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buffuid_, &from.buffuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&originuid_) -
    reinterpret_cast<char*>(&buffuid_)) + sizeof(originuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.BuffInfo)
}

void BuffInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&buffuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&originuid_) -
      reinterpret_cast<char*>(&buffuid_)) + sizeof(originuid_));
}

BuffInfo::~BuffInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.BuffInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuffInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BuffInfo::ArenaDtor(void* object) {
  BuffInfo* _this = reinterpret_cast< BuffInfo* >(object);
  (void)_this;
}
void BuffInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuffInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuffInfo& BuffInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuffInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void BuffInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.BuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compose_.Clear();
  desc_.Clear();
  ::memset(&buffuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originuid_) -
      reinterpret_cast<char*>(&buffuid_)) + sizeof(originuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuffInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buffUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isCrit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          iscrit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 compose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_compose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_compose(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_desc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_desc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speedUpRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          speedupratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuffInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.BuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffUID = 1;
  if (this->buffuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffuid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // bool isCrit = 4;
  if (this->iscrit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_iscrit(), target);
  }

  // repeated int32 compose = 5;
  {
    int byte_size = _compose_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_compose(), byte_size, target);
    }
  }

  // repeated int32 desc = 6;
  {
    int byte_size = _desc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_desc(), byte_size, target);
    }
  }

  // int32 speedUpRatio = 7;
  if (this->speedupratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_speedupratio(), target);
  }

  // int32 originUID = 8;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_originuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.BuffInfo)
  return target;
}

size_t BuffInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.BuffInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 compose = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->compose_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _compose_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 desc = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->desc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _desc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 buffUID = 1;
  if (this->buffuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffuid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // bool isCrit = 4;
  if (this->iscrit() != 0) {
    total_size += 1 + 1;
  }

  // int32 speedUpRatio = 7;
  if (this->speedupratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speedupratio());
  }

  // int32 originUID = 8;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuffInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.BuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BuffInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuffInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.BuffInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.BuffInfo)
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.BuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compose_.MergeFrom(from.compose_);
  desc_.MergeFrom(from.desc_);
  if (from.buffuid() != 0) {
    _internal_set_buffuid(from._internal_buffuid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.iscrit() != 0) {
    _internal_set_iscrit(from._internal_iscrit());
  }
  if (from.speedupratio() != 0) {
    _internal_set_speedupratio(from._internal_speedupratio());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
}

void BuffInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.BuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.BuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {
  return true;
}

void BuffInfo::InternalSwap(BuffInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compose_.InternalSwap(&other->compose_);
  desc_.InternalSwap(&other->desc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuffInfo, originuid_)
      + sizeof(BuffInfo::originuid_)
      - PROTOBUF_FIELD_OFFSET(BuffInfo, buffuid_)>(
          reinterpret_cast<char*>(&buffuid_),
          reinterpret_cast<char*>(&other->buffuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuffInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackHoleInfo::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const BlackHoleInfo* msg);
};

const ::PlaneWar::Pos&
BlackHoleInfo::_Internal::pos(const BlackHoleInfo* msg) {
  return *msg->pos_;
}
BlackHoleInfo::BlackHoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monsterlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.BlackHoleInfo)
}
BlackHoleInfo::BlackHoleInfo(const BlackHoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monsterlist_(from.monsterlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&originuid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(originuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.BlackHoleInfo)
}

void BlackHoleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackHoleInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&originuid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(originuid_));
}

BlackHoleInfo::~BlackHoleInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.BlackHoleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackHoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void BlackHoleInfo::ArenaDtor(void* object) {
  BlackHoleInfo* _this = reinterpret_cast< BlackHoleInfo* >(object);
  (void)_this;
}
void BlackHoleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackHoleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackHoleInfo& BlackHoleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackHoleInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void BlackHoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.BlackHoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monsterlist_.Clear();
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originuid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(originuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackHoleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isCrit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iscrit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 monsterList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_monsterlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_monsterlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackHoleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.BlackHoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // .PlaneWar.Pos pos = 4;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  // bool isCrit = 5;
  if (this->iscrit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_iscrit(), target);
  }

  // repeated int32 monsterList = 6;
  {
    int byte_size = _monsterlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_monsterlist(), byte_size, target);
    }
  }

  // int32 originUID = 7;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_originuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.BlackHoleInfo)
  return target;
}

size_t BlackHoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.BlackHoleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 monsterList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->monsterlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _monsterlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .PlaneWar.Pos pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // bool isCrit = 5;
  if (this->iscrit() != 0) {
    total_size += 1 + 1;
  }

  // int32 originUID = 7;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackHoleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.BlackHoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackHoleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackHoleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.BlackHoleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.BlackHoleInfo)
    MergeFrom(*source);
  }
}

void BlackHoleInfo::MergeFrom(const BlackHoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.BlackHoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monsterlist_.MergeFrom(from.monsterlist_);
  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.iscrit() != 0) {
    _internal_set_iscrit(from._internal_iscrit());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
}

void BlackHoleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.BlackHoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackHoleInfo::CopyFrom(const BlackHoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.BlackHoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackHoleInfo::IsInitialized() const {
  return true;
}

void BlackHoleInfo::InternalSwap(BlackHoleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monsterlist_.InternalSwap(&other->monsterlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackHoleInfo, originuid_)
      + sizeof(BlackHoleInfo::originuid_)
      - PROTOBUF_FIELD_OFFSET(BlackHoleInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackHoleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FormInfo::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const FormInfo* msg);
};

const ::PlaneWar::Pos&
FormInfo::_Internal::pos(const FormInfo* msg) {
  return *msg->pos_;
}
FormInfo::FormInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.FormInfo)
}
FormInfo::FormInfo(const FormInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  form_ = from.form_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.FormInfo)
}

void FormInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FormInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&form_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(form_));
}

FormInfo::~FormInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.FormInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void FormInfo::ArenaDtor(void* object) {
  FormInfo* _this = reinterpret_cast< FormInfo* >(object);
  (void)_this;
}
void FormInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FormInfo& FormInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FormInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void FormInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.FormInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  form_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 form = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          form_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.FormInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 form = 1;
  if (this->form() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_form(), target);
  }

  // .PlaneWar.Pos pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.FormInfo)
  return target;
}

size_t FormInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.FormInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 form = 1;
  if (this->form() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_form());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.FormInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FormInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.FormInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.FormInfo)
    MergeFrom(*source);
  }
}

void FormInfo::MergeFrom(const FormInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.FormInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.form() != 0) {
    _internal_set_form(from._internal_form());
  }
}

void FormInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.FormInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormInfo::CopyFrom(const FormInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.FormInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormInfo::IsInitialized() const {
  return true;
}

void FormInfo::InternalSwap(FormInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormInfo, form_)
      + sizeof(FormInfo::form_)
      - PROTOBUF_FIELD_OFFSET(FormInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LockInfo::_Internal {
 public:
};

LockInfo::LockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.LockInfo)
}
LockInfo::LockInfo(const LockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lockuid_, &from.lockuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&colliderindex_) -
    reinterpret_cast<char*>(&lockuid_)) + sizeof(colliderindex_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.LockInfo)
}

void LockInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lockuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&colliderindex_) -
      reinterpret_cast<char*>(&lockuid_)) + sizeof(colliderindex_));
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.LockInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockInfo::ArenaDtor(void* object) {
  LockInfo* _this = reinterpret_cast< LockInfo* >(object);
  (void)_this;
}
void LockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockInfo& LockInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lockuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colliderindex_) -
      reinterpret_cast<char*>(&lockuid_)) + sizeof(colliderindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lockUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lockuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 colliderIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          colliderindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lockUID = 1;
  if (this->lockuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lockuid(), target);
  }

  // int32 colliderIndex = 2;
  if (this->colliderindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_colliderindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.LockInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lockUID = 1;
  if (this->lockuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lockuid());
  }

  // int32 colliderIndex = 2;
  if (this->colliderindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colliderindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.LockInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.LockInfo)
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lockuid() != 0) {
    _internal_set_lockuid(from._internal_lockuid());
  }
  if (from.colliderindex() != 0) {
    _internal_set_colliderindex(from._internal_colliderindex());
  }
}

void LockInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {
  return true;
}

void LockInfo::InternalSwap(LockInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockInfo, colliderindex_)
      + sizeof(LockInfo::colliderindex_)
      - PROTOBUF_FIELD_OFFSET(LockInfo, lockuid_)>(
          reinterpret_cast<char*>(&lockuid_),
          reinterpret_cast<char*>(&other->lockuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HitMode::_Internal {
 public:
};

HitMode::HitMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.HitMode)
}
HitMode::HitMode(const HitMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hittype_, &from.hittype_,
    static_cast<size_t>(reinterpret_cast<char*>(&hitdirection_) -
    reinterpret_cast<char*>(&hittype_)) + sizeof(hitdirection_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.HitMode)
}

void HitMode::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hittype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hitdirection_) -
      reinterpret_cast<char*>(&hittype_)) + sizeof(hitdirection_));
}

HitMode::~HitMode() {
  // @@protoc_insertion_point(destructor:PlaneWar.HitMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitMode::ArenaDtor(void* object) {
  HitMode* _this = reinterpret_cast< HitMode* >(object);
  (void)_this;
}
void HitMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitMode& HitMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitMode_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void HitMode::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.HitMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hittype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hitdirection_) -
      reinterpret_cast<char*>(&hittype_)) + sizeof(hitdirection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hitType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hittype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hitDirection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hitdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.HitMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hitType = 1;
  if (this->hittype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hittype(), target);
  }

  // int32 hitDirection = 2;
  if (this->hitdirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hitdirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.HitMode)
  return target;
}

size_t HitMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.HitMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hitType = 1;
  if (this->hittype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hittype());
  }

  // int32 hitDirection = 2;
  if (this->hitdirection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hitdirection());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.HitMode)
  GOOGLE_DCHECK_NE(&from, this);
  const HitMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.HitMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.HitMode)
    MergeFrom(*source);
  }
}

void HitMode::MergeFrom(const HitMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.HitMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hittype() != 0) {
    _internal_set_hittype(from._internal_hittype());
  }
  if (from.hitdirection() != 0) {
    _internal_set_hitdirection(from._internal_hitdirection());
  }
}

void HitMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.HitMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitMode::CopyFrom(const HitMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.HitMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitMode::IsInitialized() const {
  return true;
}

void HitMode::InternalSwap(HitMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitMode, hitdirection_)
      + sizeof(HitMode::hitdirection_)
      - PROTOBUF_FIELD_OFFSET(HitMode, hittype_)>(
          reinterpret_cast<char*>(&hittype_),
          reinterpret_cast<char*>(&other->hittype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WeaponState::_Internal {
 public:
  static const ::PlaneWar::Pos& position(const WeaponState* msg);
};

const ::PlaneWar::Pos&
WeaponState::_Internal::position(const WeaponState* msg) {
  return *msg->position_;
}
WeaponState::WeaponState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WeaponState)
}
WeaponState::WeaponState(const WeaponState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::PlaneWar::Pos(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&movemode_) -
    reinterpret_cast<char*>(&step_)) + sizeof(movemode_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WeaponState)
}

void WeaponState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeaponState_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&movemode_) -
      reinterpret_cast<char*>(&position_)) + sizeof(movemode_));
}

WeaponState::~WeaponState() {
  // @@protoc_insertion_point(destructor:PlaneWar.WeaponState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeaponState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void WeaponState::ArenaDtor(void* object) {
  WeaponState* _this = reinterpret_cast< WeaponState* >(object);
  (void)_this;
}
void WeaponState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeaponState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeaponState& WeaponState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeaponState_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WeaponState::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WeaponState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movemode_) -
      reinterpret_cast<char*>(&step_)) + sizeof(movemode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moveMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          movemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeaponState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WeaponState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step = 1;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_step(), target);
  }

  // .PlaneWar.Pos position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // int32 duration = 3;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  // int32 moveMode = 4;
  if (this->movemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_movemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WeaponState)
  return target;
}

size_t WeaponState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WeaponState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 step = 1;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  // int32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  // int32 moveMode = 4;
  if (this->movemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_movemode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeaponState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeaponState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WeaponState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WeaponState)
    MergeFrom(*source);
  }
}

void WeaponState::MergeFrom(const WeaponState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::PlaneWar::Pos::MergeFrom(from._internal_position());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.movemode() != 0) {
    _internal_set_movemode(from._internal_movemode());
  }
}

void WeaponState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponState::CopyFrom(const WeaponState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponState::IsInitialized() const {
  return true;
}

void WeaponState::InternalSwap(WeaponState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponState, movemode_)
      + sizeof(WeaponState::movemode_)
      - PROTOBUF_FIELD_OFFSET(WeaponState, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SettleInfo::_Internal {
 public:
};

SettleInfo::SettleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SettleInfo)
}
SettleInfo::SettleInfo(const SettleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&originuid_, &from.originuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
    reinterpret_cast<char*>(&originuid_)) + sizeof(weaponid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SettleInfo)
}

void SettleInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&originuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&originuid_)) + sizeof(weaponid_));
}

SettleInfo::~SettleInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SettleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SettleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SettleInfo::ArenaDtor(void* object) {
  SettleInfo* _this = reinterpret_cast< SettleInfo* >(object);
  (void)_this;
}
void SettleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SettleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettleInfo& SettleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettleInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SettleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&originuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&originuid_)) + sizeof(weaponid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 originUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weaponID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SettleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 originUID = 1;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_originuid(), target);
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullettype(), target);
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward(), target);
  }

  // int32 weaponID = 4;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_weaponid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SettleInfo)
  return target;
}

size_t SettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SettleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 originUID = 1;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 weaponID = 4;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SettleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SettleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SettleInfo)
    MergeFrom(*source);
  }
}

void SettleInfo::MergeFrom(const SettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
}

void SettleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettleInfo::CopyFrom(const SettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettleInfo::IsInitialized() const {
  return true;
}

void SettleInfo::InternalSwap(SettleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettleInfo, weaponid_)
      + sizeof(SettleInfo::weaponid_)
      - PROTOBUF_FIELD_OFFSET(SettleInfo, originuid_)>(
          reinterpret_cast<char*>(&originuid_),
          reinterpret_cast<char*>(&other->originuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SettleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GunInfo::_Internal {
 public:
};

GunInfo::GunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GunInfo)
}
GunInfo::GunInfo(const GunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sourceuid_, &from.sourceuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&sourceuid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GunInfo)
}

void GunInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&sourceuid_)) + sizeof(num_));
}

GunInfo::~GunInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.GunInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GunInfo::ArenaDtor(void* object) {
  GunInfo* _this = reinterpret_cast< GunInfo* >(object);
  (void)_this;
}
void GunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GunInfo& GunInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GunInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sourceuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&sourceuid_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GunInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourceuid(), target);
  }

  // int32 originUID = 2;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_originuid(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // int32 num = 4;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GunInfo)
  return target;
}

size_t GunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GunInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 originUID = 2;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 num = 4;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GunInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GunInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GunInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GunInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GunInfo)
    MergeFrom(*source);
  }
}

void GunInfo::MergeFrom(const GunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void GunInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunInfo::CopyFrom(const GunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunInfo::IsInitialized() const {
  return true;
}

void GunInfo::InternalSwap(GunInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GunInfo, num_)
      + sizeof(GunInfo::num_)
      - PROTOBUF_FIELD_OFFSET(GunInfo, sourceuid_)>(
          reinterpret_cast<char*>(&sourceuid_),
          reinterpret_cast<char*>(&other->sourceuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GunInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FlameInfo::_Internal {
 public:
};

FlameInfo::FlameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sourceuidlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.FlameInfo)
}
FlameInfo::FlameInfo(const FlameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sourceuidlist_(from.sourceuidlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&originuid_, &from.originuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&originuid_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.FlameInfo)
}

void FlameInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&originuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&originuid_)) + sizeof(ratio_));
}

FlameInfo::~FlameInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.FlameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlameInfo::ArenaDtor(void* object) {
  FlameInfo* _this = reinterpret_cast< FlameInfo* >(object);
  (void)_this;
}
void FlameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlameInfo& FlameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlameInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void FlameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.FlameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceuidlist_.Clear();
  ::memset(&originuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&originuid_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 originUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 sourceUIDList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sourceuidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_sourceuidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.FlameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 originUID = 1;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_originuid(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // repeated int32 sourceUIDList = 3;
  {
    int byte_size = _sourceuidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_sourceuidlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.FlameInfo)
  return target;
}

size_t FlameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.FlameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 sourceUIDList = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sourceuidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sourceuidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 originUID = 1;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.FlameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FlameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.FlameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.FlameInfo)
    MergeFrom(*source);
  }
}

void FlameInfo::MergeFrom(const FlameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.FlameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourceuidlist_.MergeFrom(from.sourceuidlist_);
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void FlameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.FlameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlameInfo::CopyFrom(const FlameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.FlameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlameInfo::IsInitialized() const {
  return true;
}

void FlameInfo::InternalSwap(FlameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sourceuidlist_.InternalSwap(&other->sourceuidlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlameInfo, ratio_)
      + sizeof(FlameInfo::ratio_)
      - PROTOBUF_FIELD_OFFSET(FlameInfo, originuid_)>(
          reinterpret_cast<char*>(&originuid_),
          reinterpret_cast<char*>(&other->originuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BeeInfo::_Internal {
 public:
};

BeeInfo::BeeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ratiolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.BeeInfo)
}
BeeInfo::BeeInfo(const BeeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ratiolist_(from.ratiolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  totalratio_ = from.totalratio_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.BeeInfo)
}

void BeeInfo::SharedCtor() {
  totalratio_ = 0;
}

BeeInfo::~BeeInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.BeeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BeeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BeeInfo::ArenaDtor(void* object) {
  BeeInfo* _this = reinterpret_cast< BeeInfo* >(object);
  (void)_this;
}
void BeeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeeInfo& BeeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeeInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void BeeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.BeeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratiolist_.Clear();
  totalratio_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ratioList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratiolist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalRatio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.BeeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ratioList = 1;
  {
    int byte_size = _ratiolist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ratiolist(), byte_size, target);
    }
  }

  // int32 totalRatio = 2;
  if (this->totalratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.BeeInfo)
  return target;
}

size_t BeeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.BeeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ratioList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratiolist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratiolist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 totalRatio = 2;
  if (this->totalratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.BeeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BeeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.BeeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.BeeInfo)
    MergeFrom(*source);
  }
}

void BeeInfo::MergeFrom(const BeeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.BeeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratiolist_.MergeFrom(from.ratiolist_);
  if (from.totalratio() != 0) {
    _internal_set_totalratio(from._internal_totalratio());
  }
}

void BeeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.BeeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeeInfo::CopyFrom(const BeeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.BeeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeeInfo::IsInitialized() const {
  return true;
}

void BeeInfo::InternalSwap(BeeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ratiolist_.InternalSwap(&other->ratiolist_);
  swap(totalratio_, other->totalratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WeaponInfo::_Internal {
 public:
  static const ::PlaneWar::WeaponState& weaponstate(const WeaponInfo* msg);
};

const ::PlaneWar::WeaponState&
WeaponInfo::_Internal::weaponstate(const WeaponInfo* msg) {
  return *msg->weaponstate_;
}
WeaponInfo::WeaponInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WeaponInfo)
}
WeaponInfo::WeaponInfo(const WeaponInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  weaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_weaponname().empty()) {
    weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_weaponname(), 
      GetArena());
  }
  if (from._internal_has_weaponstate()) {
    weaponstate_ = new ::PlaneWar::WeaponState(*from.weaponstate_);
  } else {
    weaponstate_ = nullptr;
  }
  ::memcpy(&weaponid_, &from.weaponid_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponratio_) -
    reinterpret_cast<char*>(&weaponid_)) + sizeof(weaponratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WeaponInfo)
}

void WeaponInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeaponInfo_PlaneWar_2eproto.base);
  weaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&weaponstate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponratio_) -
      reinterpret_cast<char*>(&weaponstate_)) + sizeof(weaponratio_));
}

WeaponInfo::~WeaponInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.WeaponInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeaponInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  weaponname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete weaponstate_;
}

void WeaponInfo::ArenaDtor(void* object) {
  WeaponInfo* _this = reinterpret_cast< WeaponInfo* >(object);
  (void)_this;
}
void WeaponInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeaponInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeaponInfo& WeaponInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeaponInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WeaponInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WeaponInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weaponname_.ClearToEmpty();
  if (GetArena() == nullptr && weaponstate_ != nullptr) {
    delete weaponstate_;
  }
  weaponstate_ = nullptr;
  ::memset(&weaponid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponratio_) -
      reinterpret_cast<char*>(&weaponid_)) + sizeof(weaponratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 weaponID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string weaponName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_weaponname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.WeaponInfo.weaponName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weaponRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          weaponratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponState weaponState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeaponInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WeaponInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weaponID = 1;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weaponid(), target);
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceuid(), target);
  }

  // int32 originUID = 3;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_originuid(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  // int32 num = 5;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num(), target);
  }

  // string weaponName = 6;
  if (this->weaponname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weaponname().data(), static_cast<int>(this->_internal_weaponname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.WeaponInfo.weaponName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_weaponname(), target);
  }

  // int32 weaponRatio = 7;
  if (this->weaponratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_weaponratio(), target);
  }

  // .PlaneWar.WeaponState weaponState = 8;
  if (this->has_weaponstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::weaponstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WeaponInfo)
  return target;
}

size_t WeaponInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WeaponInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string weaponName = 6;
  if (this->weaponname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weaponname());
  }

  // .PlaneWar.WeaponState weaponState = 8;
  if (this->has_weaponstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weaponstate_);
  }

  // int32 weaponID = 1;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 originUID = 3;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 num = 5;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 weaponRatio = 7;
  if (this->weaponratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeaponInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WeaponInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeaponInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WeaponInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WeaponInfo)
    MergeFrom(*source);
  }
}

void WeaponInfo::MergeFrom(const WeaponInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WeaponInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.weaponname().size() > 0) {
    _internal_set_weaponname(from._internal_weaponname());
  }
  if (from.has_weaponstate()) {
    _internal_mutable_weaponstate()->::PlaneWar::WeaponState::MergeFrom(from._internal_weaponstate());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.weaponratio() != 0) {
    _internal_set_weaponratio(from._internal_weaponratio());
  }
}

void WeaponInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WeaponInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponInfo::CopyFrom(const WeaponInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WeaponInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponInfo::IsInitialized() const {
  return true;
}

void WeaponInfo::InternalSwap(WeaponInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weaponname_.Swap(&other->weaponname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponInfo, weaponratio_)
      + sizeof(WeaponInfo::weaponratio_)
      - PROTOBUF_FIELD_OFFSET(WeaponInfo, weaponstate_)>(
          reinterpret_cast<char*>(&weaponstate_),
          reinterpret_cast<char*>(&other->weaponstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpecEffect::_Internal {
 public:
};

SpecEffect::SpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SpecEffect)
}
SpecEffect::SpecEffect(const SpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&costmoney_, &from.costmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourcetype_) -
    reinterpret_cast<char*>(&costmoney_)) + sizeof(sourcetype_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SpecEffect)
}

void SpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&costmoney_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourcetype_) -
      reinterpret_cast<char*>(&costmoney_)) + sizeof(sourcetype_));
}

SpecEffect::~SpecEffect() {
  // @@protoc_insertion_point(destructor:PlaneWar.SpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecEffect::ArenaDtor(void* object) {
  SpecEffect* _this = reinterpret_cast< SpecEffect* >(object);
  (void)_this;
}
void SpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecEffect& SpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecEffect_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&costmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourcetype_) -
      reinterpret_cast<char*>(&costmoney_)) + sizeof(sourcetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 costMoney = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          costmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earnMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earnmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float violence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          violence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxDuration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sourcetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 costMoney = 1;
  if (this->costmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_costmoney(), target);
  }

  // int32 earnMoney = 2;
  if (this->earnmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earnmoney(), target);
  }

  // float violence = 3;
  if (!(this->violence() <= 0 && this->violence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_violence(), target);
  }

  // int32 duration = 4;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_duration(), target);
  }

  // int32 maxDuration = 5;
  if (this->maxduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxduration(), target);
  }

  // int32 sourceType = 6;
  if (this->sourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sourcetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SpecEffect)
  return target;
}

size_t SpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 costMoney = 1;
  if (this->costmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costmoney());
  }

  // int32 earnMoney = 2;
  if (this->earnmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earnmoney());
  }

  // float violence = 3;
  if (!(this->violence() <= 0 && this->violence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 duration = 4;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  // int32 maxDuration = 5;
  if (this->maxduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxduration());
  }

  // int32 sourceType = 6;
  if (this->sourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourcetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SpecEffect)
    MergeFrom(*source);
  }
}

void SpecEffect::MergeFrom(const SpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.costmoney() != 0) {
    _internal_set_costmoney(from._internal_costmoney());
  }
  if (from.earnmoney() != 0) {
    _internal_set_earnmoney(from._internal_earnmoney());
  }
  if (!(from.violence() <= 0 && from.violence() >= 0)) {
    _internal_set_violence(from._internal_violence());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.maxduration() != 0) {
    _internal_set_maxduration(from._internal_maxduration());
  }
  if (from.sourcetype() != 0) {
    _internal_set_sourcetype(from._internal_sourcetype());
  }
}

void SpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecEffect::CopyFrom(const SpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecEffect::IsInitialized() const {
  return true;
}

void SpecEffect::InternalSwap(SpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecEffect, sourcetype_)
      + sizeof(SpecEffect::sourcetype_)
      - PROTOBUF_FIELD_OFFSET(SpecEffect, costmoney_)>(
          reinterpret_cast<char*>(&costmoney_),
          reinterpret_cast<char*>(&other->costmoney_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Dice::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const Dice* msg);
};

const ::PlaneWar::Pos&
Dice::_Internal::pos(const Dice* msg) {
  return *msg->pos_;
}
Dice::Dice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.Dice)
}
Dice::Dice(const Dice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&tp_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(tp_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.Dice)
}

void Dice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dice_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(tp_));
}

Dice::~Dice() {
  // @@protoc_insertion_point(destructor:PlaneWar.Dice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void Dice::ArenaDtor(void* object) {
  Dice* _this = reinterpret_cast< Dice* >(object);
  (void)_this;
}
void Dice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dice& Dice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dice_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void Dice::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.Dice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tp_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(tp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.Dice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // int32 tp = 2;
  if (this->tp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tp(), target);
  }

  // .PlaneWar.Pos pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.Dice)
  return target;
}

size_t Dice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.Dice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 tp = 2;
  if (this->tp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.Dice)
  GOOGLE_DCHECK_NE(&from, this);
  const Dice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.Dice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.Dice)
    MergeFrom(*source);
  }
}

void Dice::MergeFrom(const Dice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.Dice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.tp() != 0) {
    _internal_set_tp(from._internal_tp());
  }
}

void Dice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.Dice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dice::CopyFrom(const Dice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.Dice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dice::IsInitialized() const {
  return true;
}

void Dice::InternalSwap(Dice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dice, tp_)
      + sizeof(Dice::tp_)
      - PROTOBUF_FIELD_OFFSET(Dice, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiceInfo::_Internal {
 public:
};

DiceInfo::DiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dicelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.DiceInfo)
}
DiceInfo::DiceInfo(const DiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dicelist_(from.dicelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&mul_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(mul_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.DiceInfo)
}

void DiceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiceInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mul_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(mul_));
}

DiceInfo::~DiceInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.DiceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiceInfo::ArenaDtor(void* object) {
  DiceInfo* _this = reinterpret_cast< DiceInfo* >(object);
  (void)_this;
}
void DiceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiceInfo& DiceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiceInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void DiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.DiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dicelist_.Clear();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mul_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(mul_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mul = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.Dice diceList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dicelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.DiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // int32 mul = 2;
  if (this->mul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mul(), target);
  }

  // repeated .PlaneWar.Dice diceList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dicelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dicelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.DiceInfo)
  return target;
}

size_t DiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.DiceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.Dice diceList = 3;
  total_size += 1UL * this->_internal_dicelist_size();
  for (const auto& msg : this->dicelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 mul = 2;
  if (this->mul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.DiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.DiceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.DiceInfo)
    MergeFrom(*source);
  }
}

void DiceInfo::MergeFrom(const DiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.DiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dicelist_.MergeFrom(from.dicelist_);
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.mul() != 0) {
    _internal_set_mul(from._internal_mul());
  }
}

void DiceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.DiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceInfo::CopyFrom(const DiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.DiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceInfo::IsInitialized() const {
  return true;
}

void DiceInfo::InternalSwap(DiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dicelist_.InternalSwap(&other->dicelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiceInfo, mul_)
      + sizeof(DiceInfo::mul_)
      - PROTOBUF_FIELD_OFFSET(DiceInfo, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateInfo::_Internal {
 public:
  static const ::PlaneWar::FormInfo& forminfo(const StateInfo* msg);
  static const ::PlaneWar::LockInfo& lockinfo(const StateInfo* msg);
  static const ::PlaneWar::WeaponInfo& weaponinfo(const StateInfo* msg);
  static const ::PlaneWar::WeaponInfo& propweaponinfo(const StateInfo* msg);
  static const ::PlaneWar::GunInfo& guninfo(const StateInfo* msg);
  static const ::PlaneWar::FlameInfo& flameinfo(const StateInfo* msg);
  static const ::PlaneWar::SpecEffect& speceffect(const StateInfo* msg);
};

const ::PlaneWar::FormInfo&
StateInfo::_Internal::forminfo(const StateInfo* msg) {
  return *msg->forminfo_;
}
const ::PlaneWar::LockInfo&
StateInfo::_Internal::lockinfo(const StateInfo* msg) {
  return *msg->lockinfo_;
}
const ::PlaneWar::WeaponInfo&
StateInfo::_Internal::weaponinfo(const StateInfo* msg) {
  return *msg->weaponinfo_;
}
const ::PlaneWar::WeaponInfo&
StateInfo::_Internal::propweaponinfo(const StateInfo* msg) {
  return *msg->propweaponinfo_;
}
const ::PlaneWar::GunInfo&
StateInfo::_Internal::guninfo(const StateInfo* msg) {
  return *msg->guninfo_;
}
const ::PlaneWar::FlameInfo&
StateInfo::_Internal::flameinfo(const StateInfo* msg) {
  return *msg->flameinfo_;
}
const ::PlaneWar::SpecEffect&
StateInfo::_Internal::speceffect(const StateInfo* msg) {
  return *msg->speceffect_;
}
StateInfo::StateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bufflist_(arena),
  blackholelist_(arena),
  settlelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.StateInfo)
}
StateInfo::StateInfo(const StateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bufflist_(from.bufflist_),
      blackholelist_(from.blackholelist_),
      settlelist_(from.settlelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forminfo()) {
    forminfo_ = new ::PlaneWar::FormInfo(*from.forminfo_);
  } else {
    forminfo_ = nullptr;
  }
  if (from._internal_has_lockinfo()) {
    lockinfo_ = new ::PlaneWar::LockInfo(*from.lockinfo_);
  } else {
    lockinfo_ = nullptr;
  }
  if (from._internal_has_weaponinfo()) {
    weaponinfo_ = new ::PlaneWar::WeaponInfo(*from.weaponinfo_);
  } else {
    weaponinfo_ = nullptr;
  }
  if (from._internal_has_propweaponinfo()) {
    propweaponinfo_ = new ::PlaneWar::WeaponInfo(*from.propweaponinfo_);
  } else {
    propweaponinfo_ = nullptr;
  }
  if (from._internal_has_guninfo()) {
    guninfo_ = new ::PlaneWar::GunInfo(*from.guninfo_);
  } else {
    guninfo_ = nullptr;
  }
  if (from._internal_has_flameinfo()) {
    flameinfo_ = new ::PlaneWar::FlameInfo(*from.flameinfo_);
  } else {
    flameinfo_ = nullptr;
  }
  if (from._internal_has_speceffect()) {
    speceffect_ = new ::PlaneWar::SpecEffect(*from.speceffect_);
  } else {
    speceffect_ = nullptr;
  }
  isback_ = from.isback_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.StateInfo)
}

void StateInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&forminfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isback_) -
      reinterpret_cast<char*>(&forminfo_)) + sizeof(isback_));
}

StateInfo::~StateInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.StateInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete forminfo_;
  if (this != internal_default_instance()) delete lockinfo_;
  if (this != internal_default_instance()) delete weaponinfo_;
  if (this != internal_default_instance()) delete propweaponinfo_;
  if (this != internal_default_instance()) delete guninfo_;
  if (this != internal_default_instance()) delete flameinfo_;
  if (this != internal_default_instance()) delete speceffect_;
}

void StateInfo::ArenaDtor(void* object) {
  StateInfo* _this = reinterpret_cast< StateInfo* >(object);
  (void)_this;
}
void StateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateInfo& StateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void StateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.StateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bufflist_.Clear();
  blackholelist_.Clear();
  settlelist_.Clear();
  if (GetArena() == nullptr && forminfo_ != nullptr) {
    delete forminfo_;
  }
  forminfo_ = nullptr;
  if (GetArena() == nullptr && lockinfo_ != nullptr) {
    delete lockinfo_;
  }
  lockinfo_ = nullptr;
  if (GetArena() == nullptr && weaponinfo_ != nullptr) {
    delete weaponinfo_;
  }
  weaponinfo_ = nullptr;
  if (GetArena() == nullptr && propweaponinfo_ != nullptr) {
    delete propweaponinfo_;
  }
  propweaponinfo_ = nullptr;
  if (GetArena() == nullptr && guninfo_ != nullptr) {
    delete guninfo_;
  }
  guninfo_ = nullptr;
  if (GetArena() == nullptr && flameinfo_ != nullptr) {
    delete flameinfo_;
  }
  flameinfo_ = nullptr;
  if (GetArena() == nullptr && speceffect_ != nullptr) {
    delete speceffect_;
  }
  speceffect_ = nullptr;
  isback_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isBack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.BuffInfo buffList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bufflist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.BlackHoleInfo blackHoleList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blackholelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.FormInfo formInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.LockInfo lockInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lockinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponInfo weaponInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponInfo propWeaponInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_propweaponinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.SettleInfo settleList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settlelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GunInfo gunInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_guninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.FlameInfo flameInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_flameinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.SpecEffect specEffect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_speceffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.StateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isBack = 1;
  if (this->isback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isback(), target);
  }

  // repeated .PlaneWar.BuffInfo buffList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bufflist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bufflist(i), target, stream);
  }

  // repeated .PlaneWar.BlackHoleInfo blackHoleList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blackholelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_blackholelist(i), target, stream);
  }

  // .PlaneWar.FormInfo formInfo = 4;
  if (this->has_forminfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forminfo(this), target, stream);
  }

  // .PlaneWar.LockInfo lockInfo = 5;
  if (this->has_lockinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lockinfo(this), target, stream);
  }

  // .PlaneWar.WeaponInfo weaponInfo = 6;
  if (this->has_weaponinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::weaponinfo(this), target, stream);
  }

  // .PlaneWar.WeaponInfo propWeaponInfo = 7;
  if (this->has_propweaponinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::propweaponinfo(this), target, stream);
  }

  // repeated .PlaneWar.SettleInfo settleList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settlelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_settlelist(i), target, stream);
  }

  // .PlaneWar.GunInfo gunInfo = 9;
  if (this->has_guninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::guninfo(this), target, stream);
  }

  // .PlaneWar.FlameInfo flameInfo = 10;
  if (this->has_flameinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::flameinfo(this), target, stream);
  }

  // .PlaneWar.SpecEffect specEffect = 11;
  if (this->has_speceffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::speceffect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.StateInfo)
  return target;
}

size_t StateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.StateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.BuffInfo buffList = 2;
  total_size += 1UL * this->_internal_bufflist_size();
  for (const auto& msg : this->bufflist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.BlackHoleInfo blackHoleList = 3;
  total_size += 1UL * this->_internal_blackholelist_size();
  for (const auto& msg : this->blackholelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.SettleInfo settleList = 8;
  total_size += 1UL * this->_internal_settlelist_size();
  for (const auto& msg : this->settlelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.FormInfo formInfo = 4;
  if (this->has_forminfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forminfo_);
  }

  // .PlaneWar.LockInfo lockInfo = 5;
  if (this->has_lockinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lockinfo_);
  }

  // .PlaneWar.WeaponInfo weaponInfo = 6;
  if (this->has_weaponinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weaponinfo_);
  }

  // .PlaneWar.WeaponInfo propWeaponInfo = 7;
  if (this->has_propweaponinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *propweaponinfo_);
  }

  // .PlaneWar.GunInfo gunInfo = 9;
  if (this->has_guninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guninfo_);
  }

  // .PlaneWar.FlameInfo flameInfo = 10;
  if (this->has_flameinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flameinfo_);
  }

  // .PlaneWar.SpecEffect specEffect = 11;
  if (this->has_speceffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speceffect_);
  }

  // bool isBack = 1;
  if (this->isback() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.StateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.StateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.StateInfo)
    MergeFrom(*source);
  }
}

void StateInfo::MergeFrom(const StateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.StateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bufflist_.MergeFrom(from.bufflist_);
  blackholelist_.MergeFrom(from.blackholelist_);
  settlelist_.MergeFrom(from.settlelist_);
  if (from.has_forminfo()) {
    _internal_mutable_forminfo()->::PlaneWar::FormInfo::MergeFrom(from._internal_forminfo());
  }
  if (from.has_lockinfo()) {
    _internal_mutable_lockinfo()->::PlaneWar::LockInfo::MergeFrom(from._internal_lockinfo());
  }
  if (from.has_weaponinfo()) {
    _internal_mutable_weaponinfo()->::PlaneWar::WeaponInfo::MergeFrom(from._internal_weaponinfo());
  }
  if (from.has_propweaponinfo()) {
    _internal_mutable_propweaponinfo()->::PlaneWar::WeaponInfo::MergeFrom(from._internal_propweaponinfo());
  }
  if (from.has_guninfo()) {
    _internal_mutable_guninfo()->::PlaneWar::GunInfo::MergeFrom(from._internal_guninfo());
  }
  if (from.has_flameinfo()) {
    _internal_mutable_flameinfo()->::PlaneWar::FlameInfo::MergeFrom(from._internal_flameinfo());
  }
  if (from.has_speceffect()) {
    _internal_mutable_speceffect()->::PlaneWar::SpecEffect::MergeFrom(from._internal_speceffect());
  }
  if (from.isback() != 0) {
    _internal_set_isback(from._internal_isback());
  }
}

void StateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateInfo::CopyFrom(const StateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateInfo::IsInitialized() const {
  return true;
}

void StateInfo::InternalSwap(StateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bufflist_.InternalSwap(&other->bufflist_);
  blackholelist_.InternalSwap(&other->blackholelist_);
  settlelist_.InternalSwap(&other->settlelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateInfo, isback_)
      + sizeof(StateInfo::isback_)
      - PROTOBUF_FIELD_OFFSET(StateInfo, forminfo_)>(
          reinterpret_cast<char*>(&forminfo_),
          reinterpret_cast<char*>(&other->forminfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MissileInfo::_Internal {
 public:
};

MissileInfo::MissileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MissileInfo)
}
MissileInfo::MissileInfo(const MissileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MissileInfo)
}

void MissileInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

MissileInfo::~MissileInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.MissileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MissileInfo::ArenaDtor(void* object) {
  MissileInfo* _this = reinterpret_cast< MissileInfo* >(object);
  (void)_this;
}
void MissileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissileInfo& MissileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissileInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MissileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MissileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MissileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MissileInfo)
  return target;
}

size_t MissileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MissileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MissileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MissileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MissileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MissileInfo)
    MergeFrom(*source);
  }
}

void MissileInfo::MergeFrom(const MissileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MissileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void MissileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MissileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissileInfo::CopyFrom(const MissileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MissileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissileInfo::IsInitialized() const {
  return true;
}

void MissileInfo::InternalSwap(MissileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissileInfo, num_)
      + sizeof(MissileInfo::num_)
      - PROTOBUF_FIELD_OFFSET(MissileInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PiggyInfo::_Internal {
 public:
};

PiggyInfo::PiggyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PiggyInfo)
}
PiggyInfo::PiggyInfo(const PiggyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  settletime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settletime().empty()) {
    settletime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settletime(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextmaxreward_) -
    reinterpret_cast<char*>(&status_)) + sizeof(nextmaxreward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PiggyInfo)
}

void PiggyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PiggyInfo_PlaneWar_2eproto.base);
  settletime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nextmaxreward_) -
      reinterpret_cast<char*>(&status_)) + sizeof(nextmaxreward_));
}

PiggyInfo::~PiggyInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PiggyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiggyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  settletime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PiggyInfo::ArenaDtor(void* object) {
  PiggyInfo* _this = reinterpret_cast< PiggyInfo* >(object);
  (void)_this;
}
void PiggyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiggyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiggyInfo& PiggyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiggyInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PiggyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PiggyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settletime_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextmaxreward_) -
      reinterpret_cast<char*>(&status_)) + sizeof(nextmaxreward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiggyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rewardValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rewardvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accumulatingValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          accumulatingvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settleTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_settletime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PiggyInfo.settleTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 settleThreshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          settlethreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxReward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nextMaxReward = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nextmaxreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiggyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PiggyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 rewardValue = 2;
  if (this->rewardvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rewardvalue(), target);
  }

  // int32 accumulatingValue = 3;
  if (this->accumulatingvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_accumulatingvalue(), target);
  }

  // string settleTime = 4;
  if (this->settletime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settletime().data(), static_cast<int>(this->_internal_settletime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PiggyInfo.settleTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_settletime(), target);
  }

  // int32 settleThreshold = 5;
  if (this->settlethreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_settlethreshold(), target);
  }

  // int32 maxReward = 6;
  if (this->maxreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maxreward(), target);
  }

  // int32 nextMaxReward = 7;
  if (this->nextmaxreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nextmaxreward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PiggyInfo)
  return target;
}

size_t PiggyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PiggyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string settleTime = 4;
  if (this->settletime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settletime());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 rewardValue = 2;
  if (this->rewardvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewardvalue());
  }

  // int32 accumulatingValue = 3;
  if (this->accumulatingvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accumulatingvalue());
  }

  // int32 settleThreshold = 5;
  if (this->settlethreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_settlethreshold());
  }

  // int32 maxReward = 6;
  if (this->maxreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxreward());
  }

  // int32 nextMaxReward = 7;
  if (this->nextmaxreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nextmaxreward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiggyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PiggyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PiggyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiggyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PiggyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PiggyInfo)
    MergeFrom(*source);
  }
}

void PiggyInfo::MergeFrom(const PiggyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PiggyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.settletime().size() > 0) {
    _internal_set_settletime(from._internal_settletime());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.rewardvalue() != 0) {
    _internal_set_rewardvalue(from._internal_rewardvalue());
  }
  if (from.accumulatingvalue() != 0) {
    _internal_set_accumulatingvalue(from._internal_accumulatingvalue());
  }
  if (from.settlethreshold() != 0) {
    _internal_set_settlethreshold(from._internal_settlethreshold());
  }
  if (from.maxreward() != 0) {
    _internal_set_maxreward(from._internal_maxreward());
  }
  if (from.nextmaxreward() != 0) {
    _internal_set_nextmaxreward(from._internal_nextmaxreward());
  }
}

void PiggyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PiggyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiggyInfo::CopyFrom(const PiggyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PiggyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiggyInfo::IsInitialized() const {
  return true;
}

void PiggyInfo::InternalSwap(PiggyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settletime_.Swap(&other->settletime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiggyInfo, nextmaxreward_)
      + sizeof(PiggyInfo::nextmaxreward_)
      - PROTOBUF_FIELD_OFFSET(PiggyInfo, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiggyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArenaPieceInfo::_Internal {
 public:
};

ArenaPieceInfo::ArenaPieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ArenaPieceInfo)
}
ArenaPieceInfo::ArenaPieceInfo(const ArenaPieceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&arenaid_, &from.arenaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&arenaid_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ArenaPieceInfo)
}

void ArenaPieceInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&arenaid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&arenaid_)) + sizeof(ratio_));
}

ArenaPieceInfo::~ArenaPieceInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.ArenaPieceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArenaPieceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArenaPieceInfo::ArenaDtor(void* object) {
  ArenaPieceInfo* _this = reinterpret_cast< ArenaPieceInfo* >(object);
  (void)_this;
}
void ArenaPieceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArenaPieceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArenaPieceInfo& ArenaPieceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArenaPieceInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ArenaPieceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ArenaPieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&arenaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&arenaid_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArenaPieceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arenaID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arenaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 havePiece = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          havepiece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 needPiece = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          needpiece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArenaPieceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ArenaPieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arenaID = 1;
  if (this->arenaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arenaid(), target);
  }

  // int32 havePiece = 2;
  if (this->havepiece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_havepiece(), target);
  }

  // int32 needPiece = 3;
  if (this->needpiece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_needpiece(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ArenaPieceInfo)
  return target;
}

size_t ArenaPieceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ArenaPieceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arenaID = 1;
  if (this->arenaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arenaid());
  }

  // int32 havePiece = 2;
  if (this->havepiece() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_havepiece());
  }

  // int32 needPiece = 3;
  if (this->needpiece() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_needpiece());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArenaPieceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ArenaPieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArenaPieceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArenaPieceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ArenaPieceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ArenaPieceInfo)
    MergeFrom(*source);
  }
}

void ArenaPieceInfo::MergeFrom(const ArenaPieceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ArenaPieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arenaid() != 0) {
    _internal_set_arenaid(from._internal_arenaid());
  }
  if (from.havepiece() != 0) {
    _internal_set_havepiece(from._internal_havepiece());
  }
  if (from.needpiece() != 0) {
    _internal_set_needpiece(from._internal_needpiece());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void ArenaPieceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ArenaPieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaPieceInfo::CopyFrom(const ArenaPieceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ArenaPieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaPieceInfo::IsInitialized() const {
  return true;
}

void ArenaPieceInfo::InternalSwap(ArenaPieceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArenaPieceInfo, ratio_)
      + sizeof(ArenaPieceInfo::ratio_)
      - PROTOBUF_FIELD_OFFSET(ArenaPieceInfo, arenaid_)>(
          reinterpret_cast<char*>(&arenaid_),
          reinterpret_cast<char*>(&other->arenaid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArenaPieceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PieceInfo::_Internal {
 public:
};

PieceInfo::PieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arenainfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PieceInfo)
}
PieceInfo::PieceInfo(const PieceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arenainfo_(from.arenainfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&havediamond_, &from.havediamond_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchangepiece_) -
    reinterpret_cast<char*>(&havediamond_)) + sizeof(exchangepiece_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PieceInfo)
}

void PieceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PieceInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&havediamond_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&exchangepiece_) -
      reinterpret_cast<char*>(&havediamond_)) + sizeof(exchangepiece_));
}

PieceInfo::~PieceInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PieceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PieceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PieceInfo::ArenaDtor(void* object) {
  PieceInfo* _this = reinterpret_cast< PieceInfo* >(object);
  (void)_this;
}
void PieceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PieceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PieceInfo& PieceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PieceInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PieceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arenainfo_.Clear();
  ::memset(&havediamond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchangepiece_) -
      reinterpret_cast<char*>(&havediamond_)) + sizeof(exchangepiece_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PieceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.ArenaPieceInfo arenaInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arenainfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 haveDiamond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          havediamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 needDiamond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          needdiamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pieceStackLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          piecestacklimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchangePiece = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exchangepiece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PieceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.ArenaPieceInfo arenaInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arenainfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arenainfo(i), target, stream);
  }

  // int32 haveDiamond = 2;
  if (this->havediamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_havediamond(), target);
  }

  // int32 needDiamond = 3;
  if (this->needdiamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_needdiamond(), target);
  }

  // int32 pieceStackLimit = 4;
  if (this->piecestacklimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_piecestacklimit(), target);
  }

  // int32 exchangePiece = 5;
  if (this->exchangepiece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_exchangepiece(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PieceInfo)
  return target;
}

size_t PieceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PieceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.ArenaPieceInfo arenaInfo = 1;
  total_size += 1UL * this->_internal_arenainfo_size();
  for (const auto& msg : this->arenainfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 haveDiamond = 2;
  if (this->havediamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_havediamond());
  }

  // int32 needDiamond = 3;
  if (this->needdiamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_needdiamond());
  }

  // int32 pieceStackLimit = 4;
  if (this->piecestacklimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_piecestacklimit());
  }

  // int32 exchangePiece = 5;
  if (this->exchangepiece() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exchangepiece());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PieceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PieceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PieceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PieceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PieceInfo)
    MergeFrom(*source);
  }
}

void PieceInfo::MergeFrom(const PieceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arenainfo_.MergeFrom(from.arenainfo_);
  if (from.havediamond() != 0) {
    _internal_set_havediamond(from._internal_havediamond());
  }
  if (from.needdiamond() != 0) {
    _internal_set_needdiamond(from._internal_needdiamond());
  }
  if (from.piecestacklimit() != 0) {
    _internal_set_piecestacklimit(from._internal_piecestacklimit());
  }
  if (from.exchangepiece() != 0) {
    _internal_set_exchangepiece(from._internal_exchangepiece());
  }
}

void PieceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PieceInfo::CopyFrom(const PieceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PieceInfo::IsInitialized() const {
  return true;
}

void PieceInfo::InternalSwap(PieceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arenainfo_.InternalSwap(&other->arenainfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PieceInfo, exchangepiece_)
      + sizeof(PieceInfo::exchangepiece_)
      - PROTOBUF_FIELD_OFFSET(PieceInfo, havediamond_)>(
          reinterpret_cast<char*>(&havediamond_),
          reinterpret_cast<char*>(&other->havediamond_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PieceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RouletteInfo::_Internal {
 public:
};

RouletteInfo::RouletteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RouletteInfo)
}
RouletteInfo::RouletteInfo(const RouletteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RouletteInfo)
}

void RouletteInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

RouletteInfo::~RouletteInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RouletteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouletteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouletteInfo::ArenaDtor(void* object) {
  RouletteInfo* _this = reinterpret_cast< RouletteInfo* >(object);
  (void)_this;
}
void RouletteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouletteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouletteInfo& RouletteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouletteInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RouletteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RouletteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouletteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouletteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RouletteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RouletteInfo)
  return target;
}

size_t RouletteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RouletteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouletteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RouletteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RouletteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouletteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RouletteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RouletteInfo)
    MergeFrom(*source);
  }
}

void RouletteInfo::MergeFrom(const RouletteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RouletteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void RouletteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RouletteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouletteInfo::CopyFrom(const RouletteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RouletteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouletteInfo::IsInitialized() const {
  return true;
}

void RouletteInfo::InternalSwap(RouletteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouletteInfo, num_)
      + sizeof(RouletteInfo::num_)
      - PROTOBUF_FIELD_OFFSET(RouletteInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouletteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EffectInfo::_Internal {
 public:
};

EffectInfo::EffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.EffectInfo)
}
EffectInfo::EffectInfo(const EffectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&effectid_, &from.effectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isglobal_) -
    reinterpret_cast<char*>(&effectid_)) + sizeof(isglobal_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.EffectInfo)
}

void EffectInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&effectid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isglobal_) -
      reinterpret_cast<char*>(&effectid_)) + sizeof(isglobal_));
}

EffectInfo::~EffectInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.EffectInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EffectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EffectInfo::ArenaDtor(void* object) {
  EffectInfo* _this = reinterpret_cast< EffectInfo* >(object);
  (void)_this;
}
void EffectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EffectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectInfo& EffectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void EffectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.EffectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&effectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isglobal_) -
      reinterpret_cast<char*>(&effectid_)) + sizeof(isglobal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 effectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          effectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isGlobal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isglobal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.EffectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 effectID = 1;
  if (this->effectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_effectid(), target);
  }

  // bool isGlobal = 2;
  if (this->isglobal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isglobal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.EffectInfo)
  return target;
}

size_t EffectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.EffectInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 effectID = 1;
  if (this->effectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effectid());
  }

  // bool isGlobal = 2;
  if (this->isglobal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.EffectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.EffectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.EffectInfo)
    MergeFrom(*source);
  }
}

void EffectInfo::MergeFrom(const EffectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.EffectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.effectid() != 0) {
    _internal_set_effectid(from._internal_effectid());
  }
  if (from.isglobal() != 0) {
    _internal_set_isglobal(from._internal_isglobal());
  }
}

void EffectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.EffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectInfo::CopyFrom(const EffectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.EffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectInfo::IsInitialized() const {
  return true;
}

void EffectInfo::InternalSwap(EffectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectInfo, isglobal_)
      + sizeof(EffectInfo::isglobal_)
      - PROTOBUF_FIELD_OFFSET(EffectInfo, effectid_)>(
          reinterpret_cast<char*>(&effectid_),
          reinterpret_cast<char*>(&other->effectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::PlaneWar::StateInfo& stateinfo(const PlayerInfo* msg);
  static const ::PlaneWar::PiggyInfo& piggyinfo(const PlayerInfo* msg);
  static const ::PlaneWar::PieceInfo& weaponpieceinfo(const PlayerInfo* msg);
  static const ::PlaneWar::EffectInfo& effectinfo(const PlayerInfo* msg);
  static const ::PlaneWar::Decimal& redpacket(const PlayerInfo* msg);
};

const ::PlaneWar::StateInfo&
PlayerInfo::_Internal::stateinfo(const PlayerInfo* msg) {
  return *msg->stateinfo_;
}
const ::PlaneWar::PiggyInfo&
PlayerInfo::_Internal::piggyinfo(const PlayerInfo* msg) {
  return *msg->piggyinfo_;
}
const ::PlaneWar::PieceInfo&
PlayerInfo::_Internal::weaponpieceinfo(const PlayerInfo* msg) {
  return *msg->weaponpieceinfo_;
}
const ::PlaneWar::EffectInfo&
PlayerInfo::_Internal::effectinfo(const PlayerInfo* msg) {
  return *msg->effectinfo_;
}
const ::PlaneWar::Decimal&
PlayerInfo::_Internal::redpacket(const PlayerInfo* msg) {
  return *msg->redpacket_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missilelist_(arena),
  roulettelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missilelist_(from.missilelist_),
      roulettelist_(from.roulettelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playername().empty()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  if (from._internal_has_stateinfo()) {
    stateinfo_ = new ::PlaneWar::StateInfo(*from.stateinfo_);
  } else {
    stateinfo_ = nullptr;
  }
  if (from._internal_has_piggyinfo()) {
    piggyinfo_ = new ::PlaneWar::PiggyInfo(*from.piggyinfo_);
  } else {
    piggyinfo_ = nullptr;
  }
  if (from._internal_has_weaponpieceinfo()) {
    weaponpieceinfo_ = new ::PlaneWar::PieceInfo(*from.weaponpieceinfo_);
  } else {
    weaponpieceinfo_ = nullptr;
  }
  if (from._internal_has_effectinfo()) {
    effectinfo_ = new ::PlaneWar::EffectInfo(*from.effectinfo_);
  } else {
    effectinfo_ = nullptr;
  }
  if (from._internal_has_redpacket()) {
    redpacket_ = new ::PlaneWar::Decimal(*from.redpacket_);
  } else {
    redpacket_ = nullptr;
  }
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(star_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfo_PlaneWar_2eproto.base);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stateinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&star_) -
      reinterpret_cast<char*>(&stateinfo_)) + sizeof(star_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stateinfo_;
  if (this != internal_default_instance()) delete piggyinfo_;
  if (this != internal_default_instance()) delete weaponpieceinfo_;
  if (this != internal_default_instance()) delete effectinfo_;
  if (this != internal_default_instance()) delete redpacket_;
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missilelist_.Clear();
  roulettelist_.Clear();
  playername_.ClearToEmpty();
  icon_.ClearToEmpty();
  if (GetArena() == nullptr && stateinfo_ != nullptr) {
    delete stateinfo_;
  }
  stateinfo_ = nullptr;
  if (GetArena() == nullptr && piggyinfo_ != nullptr) {
    delete piggyinfo_;
  }
  piggyinfo_ = nullptr;
  if (GetArena() == nullptr && weaponpieceinfo_ != nullptr) {
    delete weaponpieceinfo_;
  }
  weaponpieceinfo_ = nullptr;
  if (GetArena() == nullptr && effectinfo_ != nullptr) {
    delete effectinfo_;
  }
  effectinfo_ = nullptr;
  if (GetArena() == nullptr && redpacket_ != nullptr) {
    delete redpacket_;
  }
  redpacket_ = nullptr;
  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(star_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 planeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          planeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PlayerInfo.playerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.StateInfo stateInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stateinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 memberDays = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          memberdays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastVipLevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lastviplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scratchCardNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          scratchcardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ratioUnLock = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ratiounlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PiggyInfo piggyInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_piggyinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MissileInfo missileList = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missilelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 callNum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          callnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selectedTitle = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          selectedtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PieceInfo weaponPieceInfo = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponpieceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effectID = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          effectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PlayerInfo.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.RouletteInfo rouletteList = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roulettelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 wingsId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          wingsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.EffectInfo effectInfo = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_effectinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentRank = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          currentrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLastRank = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          islastrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Decimal redPacket = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_redpacket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // int32 planeID = 2;
  if (this->planeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_planeid(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 chair = 4;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chair(), target);
  }

  // string playerName = 5;
  if (this->playername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PlayerInfo.playerName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_playername(), target);
  }

  // int32 playerID = 6;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_playerid(), target);
  }

  // int32 vip = 7;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vip(), target);
  }

  // .PlaneWar.StateInfo stateInfo = 8;
  if (this->has_stateinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stateinfo(this), target, stream);
  }

  // int32 memberDays = 9;
  if (this->memberdays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_memberdays(), target);
  }

  // int32 lastVipLevel = 10;
  if (this->lastviplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_lastviplevel(), target);
  }

  // int32 scratchCardNum = 11;
  if (this->scratchcardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_scratchcardnum(), target);
  }

  // int32 ticket = 12;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ticket(), target);
  }

  // bool ratioUnLock = 13;
  if (this->ratiounlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_ratiounlock(), target);
  }

  // .PlaneWar.PiggyInfo piggyInfo = 14;
  if (this->has_piggyinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::piggyinfo(this), target, stream);
  }

  // repeated .PlaneWar.MissileInfo missileList = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missilelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_missilelist(i), target, stream);
  }

  // int32 callNum = 16;
  if (this->callnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_callnum(), target);
  }

  // int32 selectedTitle = 17;
  if (this->selectedtitle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_selectedtitle(), target);
  }

  // .PlaneWar.PieceInfo weaponPieceInfo = 18;
  if (this->has_weaponpieceinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::weaponpieceinfo(this), target, stream);
  }

  // int32 effectID = 19;
  if (this->effectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_effectid(), target);
  }

  // string icon = 20;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PlayerInfo.icon");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_icon(), target);
  }

  // repeated .PlaneWar.RouletteInfo rouletteList = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roulettelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_roulettelist(i), target, stream);
  }

  // int32 wingsId = 22;
  if (this->wingsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_wingsid(), target);
  }

  // .PlaneWar.EffectInfo effectInfo = 23;
  if (this->has_effectinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::effectinfo(this), target, stream);
  }

  // int32 currentRank = 24;
  if (this->currentrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_currentrank(), target);
  }

  // int32 star = 25;
  if (this->star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_star(), target);
  }

  // bool isLastRank = 26;
  if (this->islastrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_islastrank(), target);
  }

  // .PlaneWar.Decimal redPacket = 27;
  if (this->has_redpacket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::redpacket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MissileInfo missileList = 15;
  total_size += 1UL * this->_internal_missilelist_size();
  for (const auto& msg : this->missilelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.RouletteInfo rouletteList = 21;
  total_size += 2UL * this->_internal_roulettelist_size();
  for (const auto& msg : this->roulettelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string playerName = 5;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // string icon = 20;
  if (this->icon().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // .PlaneWar.StateInfo stateInfo = 8;
  if (this->has_stateinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stateinfo_);
  }

  // .PlaneWar.PiggyInfo piggyInfo = 14;
  if (this->has_piggyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *piggyinfo_);
  }

  // .PlaneWar.PieceInfo weaponPieceInfo = 18;
  if (this->has_weaponpieceinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weaponpieceinfo_);
  }

  // .PlaneWar.EffectInfo effectInfo = 23;
  if (this->has_effectinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effectinfo_);
  }

  // .PlaneWar.Decimal redPacket = 27;
  if (this->has_redpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redpacket_);
  }

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 planeID = 2;
  if (this->planeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_planeid());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 chair = 4;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 playerID = 6;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 vip = 7;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 memberDays = 9;
  if (this->memberdays() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_memberdays());
  }

  // int32 lastVipLevel = 10;
  if (this->lastviplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastviplevel());
  }

  // int32 scratchCardNum = 11;
  if (this->scratchcardnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scratchcardnum());
  }

  // int32 ticket = 12;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  // int32 callNum = 16;
  if (this->callnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_callnum());
  }

  // int32 selectedTitle = 17;
  if (this->selectedtitle() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selectedtitle());
  }

  // int32 effectID = 19;
  if (this->effectid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effectid());
  }

  // bool ratioUnLock = 13;
  if (this->ratiounlock() != 0) {
    total_size += 1 + 1;
  }

  // bool isLastRank = 26;
  if (this->islastrank() != 0) {
    total_size += 2 + 1;
  }

  // int32 wingsId = 22;
  if (this->wingsid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wingsid());
  }

  // int32 currentRank = 24;
  if (this->currentrank() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentrank());
  }

  // int32 star = 25;
  if (this->star() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missilelist_.MergeFrom(from.missilelist_);
  roulettelist_.MergeFrom(from.roulettelist_);
  if (from.playername().size() > 0) {
    _internal_set_playername(from._internal_playername());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.has_stateinfo()) {
    _internal_mutable_stateinfo()->::PlaneWar::StateInfo::MergeFrom(from._internal_stateinfo());
  }
  if (from.has_piggyinfo()) {
    _internal_mutable_piggyinfo()->::PlaneWar::PiggyInfo::MergeFrom(from._internal_piggyinfo());
  }
  if (from.has_weaponpieceinfo()) {
    _internal_mutable_weaponpieceinfo()->::PlaneWar::PieceInfo::MergeFrom(from._internal_weaponpieceinfo());
  }
  if (from.has_effectinfo()) {
    _internal_mutable_effectinfo()->::PlaneWar::EffectInfo::MergeFrom(from._internal_effectinfo());
  }
  if (from.has_redpacket()) {
    _internal_mutable_redpacket()->::PlaneWar::Decimal::MergeFrom(from._internal_redpacket());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.planeid() != 0) {
    _internal_set_planeid(from._internal_planeid());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.memberdays() != 0) {
    _internal_set_memberdays(from._internal_memberdays());
  }
  if (from.lastviplevel() != 0) {
    _internal_set_lastviplevel(from._internal_lastviplevel());
  }
  if (from.scratchcardnum() != 0) {
    _internal_set_scratchcardnum(from._internal_scratchcardnum());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.callnum() != 0) {
    _internal_set_callnum(from._internal_callnum());
  }
  if (from.selectedtitle() != 0) {
    _internal_set_selectedtitle(from._internal_selectedtitle());
  }
  if (from.effectid() != 0) {
    _internal_set_effectid(from._internal_effectid());
  }
  if (from.ratiounlock() != 0) {
    _internal_set_ratiounlock(from._internal_ratiounlock());
  }
  if (from.islastrank() != 0) {
    _internal_set_islastrank(from._internal_islastrank());
  }
  if (from.wingsid() != 0) {
    _internal_set_wingsid(from._internal_wingsid());
  }
  if (from.currentrank() != 0) {
    _internal_set_currentrank(from._internal_currentrank());
  }
  if (from.star() != 0) {
    _internal_set_star(from._internal_star());
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  missilelist_.InternalSwap(&other->missilelist_);
  roulettelist_.InternalSwap(&other->roulettelist_);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, star_)
      + sizeof(PlayerInfo::star_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, stateinfo_)>(
          reinterpret_cast<char*>(&stateinfo_),
          reinterpret_cast<char*>(&other->stateinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaneSpecEffect::_Internal {
 public:
};

PlaneSpecEffect::PlaneSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PlaneSpecEffect)
}
PlaneSpecEffect::PlaneSpecEffect(const PlaneSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratiolimit_, &from.ratiolimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&ratiolimit_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PlaneSpecEffect)
}

void PlaneSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratiolimit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(type_));
}

PlaneSpecEffect::~PlaneSpecEffect() {
  // @@protoc_insertion_point(destructor:PlaneWar.PlaneSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaneSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaneSpecEffect::ArenaDtor(void* object) {
  PlaneSpecEffect* _this = reinterpret_cast< PlaneSpecEffect* >(object);
  (void)_this;
}
void PlaneSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaneSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaneSpecEffect& PlaneSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaneSpecEffect_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PlaneSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PlaneSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratiolimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaneSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratioLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratiolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hitChangeRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hitchangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moneyChangeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          moneychangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float violenceRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          violencerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speedRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaneSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PlaneSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratiolimit(), target);
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_hitchangerate(), target);
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_moneychangerate(), target);
  }

  // float violenceRate = 4;
  if (!(this->violencerate() <= 0 && this->violencerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_violencerate(), target);
  }

  // float speedRate = 5;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speedrate(), target);
  }

  // int32 type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PlaneSpecEffect)
  return target;
}

size_t PlaneSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PlaneSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiolimit());
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float violenceRate = 4;
  if (!(this->violencerate() <= 0 && this->violencerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float speedRate = 5;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaneSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PlaneSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaneSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PlaneSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PlaneSpecEffect)
    MergeFrom(*source);
  }
}

void PlaneSpecEffect::MergeFrom(const PlaneSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PlaneSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratiolimit() != 0) {
    _internal_set_ratiolimit(from._internal_ratiolimit());
  }
  if (!(from.hitchangerate() <= 0 && from.hitchangerate() >= 0)) {
    _internal_set_hitchangerate(from._internal_hitchangerate());
  }
  if (!(from.moneychangerate() <= 0 && from.moneychangerate() >= 0)) {
    _internal_set_moneychangerate(from._internal_moneychangerate());
  }
  if (!(from.violencerate() <= 0 && from.violencerate() >= 0)) {
    _internal_set_violencerate(from._internal_violencerate());
  }
  if (!(from.speedrate() <= 0 && from.speedrate() >= 0)) {
    _internal_set_speedrate(from._internal_speedrate());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PlaneSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PlaneSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneSpecEffect::CopyFrom(const PlaneSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PlaneSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneSpecEffect::IsInitialized() const {
  return true;
}

void PlaneSpecEffect::InternalSwap(PlaneSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaneSpecEffect, type_)
      + sizeof(PlaneSpecEffect::type_)
      - PROTOBUF_FIELD_OFFSET(PlaneSpecEffect, ratiolimit_)>(
          reinterpret_cast<char*>(&ratiolimit_),
          reinterpret_cast<char*>(&other->ratiolimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaneSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WingsSpecEffect::_Internal {
 public:
};

WingsSpecEffect::WingsSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WingsSpecEffect)
}
WingsSpecEffect::WingsSpecEffect(const WingsSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speedrate_, &from.speedrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&speedrate_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WingsSpecEffect)
}

void WingsSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&speedrate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&speedrate_)) + sizeof(type_));
}

WingsSpecEffect::~WingsSpecEffect() {
  // @@protoc_insertion_point(destructor:PlaneWar.WingsSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WingsSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WingsSpecEffect::ArenaDtor(void* object) {
  WingsSpecEffect* _this = reinterpret_cast< WingsSpecEffect* >(object);
  (void)_this;
}
void WingsSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WingsSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WingsSpecEffect& WingsSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WingsSpecEffect_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WingsSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WingsSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speedrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&speedrate_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WingsSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float speedRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          speedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 ratioLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratiolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hitChangeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          hitchangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moneyChangeRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          moneychangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WingsSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WingsSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speedRate = 1;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speedrate(), target);
  }

  // int32 ratioLimit = 2;
  if (this->ratiolimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratiolimit(), target);
  }

  // float hitChangeRate = 3;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_hitchangerate(), target);
  }

  // float moneyChangeRate = 4;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_moneychangerate(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WingsSpecEffect)
  return target;
}

size_t WingsSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WingsSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speedRate = 1;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 ratioLimit = 2;
  if (this->ratiolimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiolimit());
  }

  // float hitChangeRate = 3;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float moneyChangeRate = 4;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WingsSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WingsSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const WingsSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WingsSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WingsSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WingsSpecEffect)
    MergeFrom(*source);
  }
}

void WingsSpecEffect::MergeFrom(const WingsSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WingsSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speedrate() <= 0 && from.speedrate() >= 0)) {
    _internal_set_speedrate(from._internal_speedrate());
  }
  if (from.ratiolimit() != 0) {
    _internal_set_ratiolimit(from._internal_ratiolimit());
  }
  if (!(from.hitchangerate() <= 0 && from.hitchangerate() >= 0)) {
    _internal_set_hitchangerate(from._internal_hitchangerate());
  }
  if (!(from.moneychangerate() <= 0 && from.moneychangerate() >= 0)) {
    _internal_set_moneychangerate(from._internal_moneychangerate());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void WingsSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WingsSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingsSpecEffect::CopyFrom(const WingsSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WingsSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingsSpecEffect::IsInitialized() const {
  return true;
}

void WingsSpecEffect::InternalSwap(WingsSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WingsSpecEffect, type_)
      + sizeof(WingsSpecEffect::type_)
      - PROTOBUF_FIELD_OFFSET(WingsSpecEffect, speedrate_)>(
          reinterpret_cast<char*>(&speedrate_),
          reinterpret_cast<char*>(&other->speedrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WingsSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaneInfo::_Internal {
 public:
  static const ::PlaneWar::PlaneSpecEffect& planespeceffect(const PlaneInfo* msg);
  static const ::PlaneWar::PlaneSpecEffect& buff(const PlaneInfo* msg);
};

const ::PlaneWar::PlaneSpecEffect&
PlaneInfo::_Internal::planespeceffect(const PlaneInfo* msg) {
  return *msg->planespeceffect_;
}
const ::PlaneWar::PlaneSpecEffect&
PlaneInfo::_Internal::buff(const PlaneInfo* msg) {
  return *msg->buff_;
}
PlaneInfo::PlaneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PlaneInfo)
}
PlaneInfo::PlaneInfo(const PlaneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planespeceffect()) {
    planespeceffect_ = new ::PlaneWar::PlaneSpecEffect(*from.planespeceffect_);
  } else {
    planespeceffect_ = nullptr;
  }
  if (from._internal_has_buff()) {
    buff_ = new ::PlaneWar::PlaneSpecEffect(*from.buff_);
  } else {
    buff_ = nullptr;
  }
  ::memcpy(&planeid_, &from.planeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&planeid_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PlaneInfo)
}

void PlaneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaneInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&planespeceffect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&planespeceffect_)) + sizeof(price_));
}

PlaneInfo::~PlaneInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PlaneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete planespeceffect_;
  if (this != internal_default_instance()) delete buff_;
}

void PlaneInfo::ArenaDtor(void* object) {
  PlaneInfo* _this = reinterpret_cast< PlaneInfo* >(object);
  (void)_this;
}
void PlaneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaneInfo& PlaneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaneInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PlaneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PlaneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && planespeceffect_ != nullptr) {
    delete planespeceffect_;
  }
  planespeceffect_ = nullptr;
  if (GetArena() == nullptr && buff_ != nullptr) {
    delete buff_;
  }
  buff_ = nullptr;
  ::memset(&planeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&planeid_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 planeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          planeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isVip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vipLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isMember = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ismember_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isTaskLock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          istasklock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 requireAct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          requireact_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PlaneSpecEffect planeSpecEffect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_planespeceffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rankFlag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rankflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PlaneSpecEffect buff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PlaneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 planeID = 1;
  if (this->planeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_planeid(), target);
  }

  // bool isVip = 2;
  if (this->isvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isvip(), target);
  }

  // int32 vipLevel = 3;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_viplevel(), target);
  }

  // bool isMember = 4;
  if (this->ismember() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ismember(), target);
  }

  // bool isTaskLock = 5;
  if (this->istasklock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_istasklock(), target);
  }

  // int32 requireAct = 6;
  if (this->requireact() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_requireact(), target);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enable(), target);
  }

  // .PlaneWar.PlaneSpecEffect planeSpecEffect = 8;
  if (this->has_planespeceffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::planespeceffect(this), target, stream);
  }

  // int32 timestamp = 9;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_timestamp(), target);
  }

  // int32 rankFlag = 10;
  if (this->rankflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_rankflag(), target);
  }

  // int32 price = 11;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_price(), target);
  }

  // .PlaneWar.PlaneSpecEffect buff = 12;
  if (this->has_buff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::buff(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PlaneInfo)
  return target;
}

size_t PlaneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PlaneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PlaneSpecEffect planeSpecEffect = 8;
  if (this->has_planespeceffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planespeceffect_);
  }

  // .PlaneWar.PlaneSpecEffect buff = 12;
  if (this->has_buff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_);
  }

  // int32 planeID = 1;
  if (this->planeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_planeid());
  }

  // int32 vipLevel = 3;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  // bool isVip = 2;
  if (this->isvip() != 0) {
    total_size += 1 + 1;
  }

  // bool isMember = 4;
  if (this->ismember() != 0) {
    total_size += 1 + 1;
  }

  // bool isTaskLock = 5;
  if (this->istasklock() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 requireAct = 6;
  if (this->requireact() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requireact());
  }

  // int32 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  // int32 rankFlag = 10;
  if (this->rankflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rankflag());
  }

  // int32 price = 11;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PlaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PlaneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PlaneInfo)
    MergeFrom(*source);
  }
}

void PlaneInfo::MergeFrom(const PlaneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PlaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_planespeceffect()) {
    _internal_mutable_planespeceffect()->::PlaneWar::PlaneSpecEffect::MergeFrom(from._internal_planespeceffect());
  }
  if (from.has_buff()) {
    _internal_mutable_buff()->::PlaneWar::PlaneSpecEffect::MergeFrom(from._internal_buff());
  }
  if (from.planeid() != 0) {
    _internal_set_planeid(from._internal_planeid());
  }
  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
  if (from.isvip() != 0) {
    _internal_set_isvip(from._internal_isvip());
  }
  if (from.ismember() != 0) {
    _internal_set_ismember(from._internal_ismember());
  }
  if (from.istasklock() != 0) {
    _internal_set_istasklock(from._internal_istasklock());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.requireact() != 0) {
    _internal_set_requireact(from._internal_requireact());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.rankflag() != 0) {
    _internal_set_rankflag(from._internal_rankflag());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void PlaneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PlaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneInfo::CopyFrom(const PlaneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PlaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneInfo::IsInitialized() const {
  return true;
}

void PlaneInfo::InternalSwap(PlaneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaneInfo, price_)
      + sizeof(PlaneInfo::price_)
      - PROTOBUF_FIELD_OFFSET(PlaneInfo, planespeceffect_)>(
          reinterpret_cast<char*>(&planespeceffect_),
          reinterpret_cast<char*>(&other->planespeceffect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractionItem::_Internal {
 public:
};

InteractionItem::InteractionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.InteractionItem)
}
InteractionItem::InteractionItem(const InteractionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.InteractionItem)
}

void InteractionItem::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
}

InteractionItem::~InteractionItem() {
  // @@protoc_insertion_point(destructor:PlaneWar.InteractionItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InteractionItem::ArenaDtor(void* object) {
  InteractionItem* _this = reinterpret_cast< InteractionItem* >(object);
  (void)_this;
}
void InteractionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractionItem& InteractionItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractionItem_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void InteractionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.InteractionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractionItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.InteractionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 cost = 2;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.InteractionItem)
  return target;
}

size_t InteractionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.InteractionItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 cost = 2;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractionItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.InteractionItem)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractionItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractionItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.InteractionItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.InteractionItem)
    MergeFrom(*source);
  }
}

void InteractionItem::MergeFrom(const InteractionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.InteractionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void InteractionItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.InteractionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractionItem::CopyFrom(const InteractionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.InteractionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractionItem::IsInitialized() const {
  return true;
}

void InteractionItem::InternalSwap(InteractionItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InteractionItem, cost_)
      + sizeof(InteractionItem::cost_)
      - PROTOBUF_FIELD_OFFSET(InteractionItem, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractionItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RankStatusInfo::_Internal {
 public:
};

RankStatusInfo::RankStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allowtypelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RankStatusInfo)
}
RankStatusInfo::RankStatusInfo(const RankStatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allowtypelist_(from.allowtypelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rankenable_ = from.rankenable_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RankStatusInfo)
}

void RankStatusInfo::SharedCtor() {
  rankenable_ = false;
}

RankStatusInfo::~RankStatusInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RankStatusInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankStatusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RankStatusInfo::ArenaDtor(void* object) {
  RankStatusInfo* _this = reinterpret_cast< RankStatusInfo* >(object);
  (void)_this;
}
void RankStatusInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankStatusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankStatusInfo& RankStatusInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankStatusInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RankStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RankStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowtypelist_.Clear();
  rankenable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankStatusInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool rankEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rankenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 allowTypeList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_allowtypelist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_allowtypelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankStatusInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RankStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rankEnable = 1;
  if (this->rankenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rankenable(), target);
  }

  // repeated int32 allowTypeList = 2;
  {
    int byte_size = _allowtypelist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_allowtypelist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RankStatusInfo)
  return target;
}

size_t RankStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RankStatusInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 allowTypeList = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->allowtypelist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _allowtypelist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool rankEnable = 1;
  if (this->rankenable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankStatusInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RankStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RankStatusInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankStatusInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RankStatusInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RankStatusInfo)
    MergeFrom(*source);
  }
}

void RankStatusInfo::MergeFrom(const RankStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RankStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowtypelist_.MergeFrom(from.allowtypelist_);
  if (from.rankenable() != 0) {
    _internal_set_rankenable(from._internal_rankenable());
  }
}

void RankStatusInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RankStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankStatusInfo::CopyFrom(const RankStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RankStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankStatusInfo::IsInitialized() const {
  return true;
}

void RankStatusInfo::InternalSwap(RankStatusInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  allowtypelist_.InternalSwap(&other->allowtypelist_);
  swap(rankenable_, other->rankenable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankStatusInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WingsInfo::_Internal {
 public:
  static const ::PlaneWar::WingsSpecEffect& wingsspeceffect(const WingsInfo* msg);
  static const ::PlaneWar::WingsSpecEffect& buff(const WingsInfo* msg);
};

const ::PlaneWar::WingsSpecEffect&
WingsInfo::_Internal::wingsspeceffect(const WingsInfo* msg) {
  return *msg->wingsspeceffect_;
}
const ::PlaneWar::WingsSpecEffect&
WingsInfo::_Internal::buff(const WingsInfo* msg) {
  return *msg->buff_;
}
WingsInfo::WingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WingsInfo)
}
WingsInfo::WingsInfo(const WingsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wingsspeceffect()) {
    wingsspeceffect_ = new ::PlaneWar::WingsSpecEffect(*from.wingsspeceffect_);
  } else {
    wingsspeceffect_ = nullptr;
  }
  if (from._internal_has_buff()) {
    buff_ = new ::PlaneWar::WingsSpecEffect(*from.buff_);
  } else {
    buff_ = nullptr;
  }
  ::memcpy(&wingsid_, &from.wingsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&wingsid_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WingsInfo)
}

void WingsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WingsInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wingsspeceffect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&wingsspeceffect_)) + sizeof(price_));
}

WingsInfo::~WingsInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.WingsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WingsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete wingsspeceffect_;
  if (this != internal_default_instance()) delete buff_;
}

void WingsInfo::ArenaDtor(void* object) {
  WingsInfo* _this = reinterpret_cast< WingsInfo* >(object);
  (void)_this;
}
void WingsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WingsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WingsInfo& WingsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WingsInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WingsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && wingsspeceffect_ != nullptr) {
    delete wingsspeceffect_;
  }
  wingsspeceffect_ = nullptr;
  if (GetArena() == nullptr && buff_ != nullptr) {
    delete buff_;
  }
  buff_ = nullptr;
  ::memset(&wingsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&wingsid_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WingsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wingsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wingsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WingsSpecEffect wingsSpecEffect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_wingsspeceffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rankFlag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rankflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WingsSpecEffect buff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WingsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wingsId = 1;
  if (this->wingsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wingsid(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // int32 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // .PlaneWar.WingsSpecEffect wingsSpecEffect = 4;
  if (this->has_wingsspeceffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::wingsspeceffect(this), target, stream);
  }

  // int32 rankFlag = 5;
  if (this->rankflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rankflag(), target);
  }

  // int32 price = 6;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_price(), target);
  }

  // .PlaneWar.WingsSpecEffect buff = 7;
  if (this->has_buff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::buff(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WingsInfo)
  return target;
}

size_t WingsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WingsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.WingsSpecEffect wingsSpecEffect = 4;
  if (this->has_wingsspeceffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wingsspeceffect_);
  }

  // .PlaneWar.WingsSpecEffect buff = 7;
  if (this->has_buff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_);
  }

  // int32 wingsId = 1;
  if (this->wingsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wingsid());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  // int32 rankFlag = 5;
  if (this->rankflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rankflag());
  }

  // int32 price = 6;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WingsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WingsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WingsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WingsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WingsInfo)
    MergeFrom(*source);
  }
}

void WingsInfo::MergeFrom(const WingsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wingsspeceffect()) {
    _internal_mutable_wingsspeceffect()->::PlaneWar::WingsSpecEffect::MergeFrom(from._internal_wingsspeceffect());
  }
  if (from.has_buff()) {
    _internal_mutable_buff()->::PlaneWar::WingsSpecEffect::MergeFrom(from._internal_buff());
  }
  if (from.wingsid() != 0) {
    _internal_set_wingsid(from._internal_wingsid());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.rankflag() != 0) {
    _internal_set_rankflag(from._internal_rankflag());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void WingsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingsInfo::CopyFrom(const WingsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingsInfo::IsInitialized() const {
  return true;
}

void WingsInfo::InternalSwap(WingsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WingsInfo, price_)
      + sizeof(WingsInfo::price_)
      - PROTOBUF_FIELD_OFFSET(WingsInfo, wingsspeceffect_)>(
          reinterpret_cast<char*>(&wingsspeceffect_),
          reinterpret_cast<char*>(&other->wingsspeceffect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WingsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoomInfo::_Internal {
 public:
  static const ::PlaneWar::RankStatusInfo& rankstatus(const RoomInfo* msg);
};

const ::PlaneWar::RankStatusInfo&
RoomInfo::_Internal::rankstatus(const RoomInfo* msg) {
  return *msg->rankstatus_;
}
RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  planelist_(arena),
  interactionlist_(arena),
  rewardmonsterlist_(arena),
  wingslist_(arena),
  ratiolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      planelist_(from.planelist_),
      interactionlist_(from.interactionlist_),
      rewardmonsterlist_(from.rewardmonsterlist_),
      wingslist_(from.wingslist_),
      ratiolist_(from.ratiolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rankstatus()) {
    rankstatus_ = new ::PlaneWar::RankStatusInfo(*from.rankstatus_);
  } else {
    rankstatus_ = nullptr;
  }
  ::memcpy(&scratchcardenable_, &from.scratchcardenable_,
    static_cast<size_t>(reinterpret_cast<char*>(&personalpoolenable_) -
    reinterpret_cast<char*>(&scratchcardenable_)) + sizeof(personalpoolenable_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rankstatus_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&personalpoolenable_) -
      reinterpret_cast<char*>(&rankstatus_)) + sizeof(personalpoolenable_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RoomInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rankstatus_;
}

void RoomInfo::ArenaDtor(void* object) {
  RoomInfo* _this = reinterpret_cast< RoomInfo* >(object);
  (void)_this;
}
void RoomInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInfo& RoomInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planelist_.Clear();
  interactionlist_.Clear();
  rewardmonsterlist_.Clear();
  wingslist_.Clear();
  ratiolist_.Clear();
  if (GetArena() == nullptr && rankstatus_ != nullptr) {
    delete rankstatus_;
  }
  rankstatus_ = nullptr;
  ::memset(&scratchcardenable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&personalpoolenable_) -
      reinterpret_cast<char*>(&scratchcardenable_)) + sizeof(personalpoolenable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.PlaneInfo planeList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_planelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool scratchCardEnable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scratchcardenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.InteractionItem interactionList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interactionlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool piggyBankEnable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          piggybankenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool personalPoolEnable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          personalpoolenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rewardMonsterList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rewardmonsterlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_rewardmonsterlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RankStatusInfo rankStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rankstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.WingsInfo wingsList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wingslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 ratioList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratiolist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.PlaneInfo planeList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_planelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_planelist(i), target, stream);
  }

  // bool scratchCardEnable = 2;
  if (this->scratchcardenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_scratchcardenable(), target);
  }

  // repeated .PlaneWar.InteractionItem interactionList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interactionlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_interactionlist(i), target, stream);
  }

  // bool piggyBankEnable = 4;
  if (this->piggybankenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_piggybankenable(), target);
  }

  // bool personalPoolEnable = 5;
  if (this->personalpoolenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_personalpoolenable(), target);
  }

  // repeated int32 rewardMonsterList = 6;
  {
    int byte_size = _rewardmonsterlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_rewardmonsterlist(), byte_size, target);
    }
  }

  // .PlaneWar.RankStatusInfo rankStatus = 7;
  if (this->has_rankstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rankstatus(this), target, stream);
  }

  // repeated .PlaneWar.WingsInfo wingsList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wingslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_wingslist(i), target, stream);
  }

  // repeated int32 ratioList = 9;
  {
    int byte_size = _ratiolist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_ratiolist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RoomInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PlaneInfo planeList = 1;
  total_size += 1UL * this->_internal_planelist_size();
  for (const auto& msg : this->planelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.InteractionItem interactionList = 3;
  total_size += 1UL * this->_internal_interactionlist_size();
  for (const auto& msg : this->interactionlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 rewardMonsterList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rewardmonsterlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rewardmonsterlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .PlaneWar.WingsInfo wingsList = 8;
  total_size += 1UL * this->_internal_wingslist_size();
  for (const auto& msg : this->wingslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ratioList = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratiolist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratiolist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .PlaneWar.RankStatusInfo rankStatus = 7;
  if (this->has_rankstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rankstatus_);
  }

  // bool scratchCardEnable = 2;
  if (this->scratchcardenable() != 0) {
    total_size += 1 + 1;
  }

  // bool piggyBankEnable = 4;
  if (this->piggybankenable() != 0) {
    total_size += 1 + 1;
  }

  // bool personalPoolEnable = 5;
  if (this->personalpoolenable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RoomInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planelist_.MergeFrom(from.planelist_);
  interactionlist_.MergeFrom(from.interactionlist_);
  rewardmonsterlist_.MergeFrom(from.rewardmonsterlist_);
  wingslist_.MergeFrom(from.wingslist_);
  ratiolist_.MergeFrom(from.ratiolist_);
  if (from.has_rankstatus()) {
    _internal_mutable_rankstatus()->::PlaneWar::RankStatusInfo::MergeFrom(from._internal_rankstatus());
  }
  if (from.scratchcardenable() != 0) {
    _internal_set_scratchcardenable(from._internal_scratchcardenable());
  }
  if (from.piggybankenable() != 0) {
    _internal_set_piggybankenable(from._internal_piggybankenable());
  }
  if (from.personalpoolenable() != 0) {
    _internal_set_personalpoolenable(from._internal_personalpoolenable());
  }
}

void RoomInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  planelist_.InternalSwap(&other->planelist_);
  interactionlist_.InternalSwap(&other->interactionlist_);
  rewardmonsterlist_.InternalSwap(&other->rewardmonsterlist_);
  wingslist_.InternalSwap(&other->wingslist_);
  ratiolist_.InternalSwap(&other->ratiolist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, personalpoolenable_)
      + sizeof(RoomInfo::personalpoolenable_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, rankstatus_)>(
          reinterpret_cast<char*>(&rankstatus_),
          reinterpret_cast<char*>(&other->rankstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSReady::_Internal {
 public:
};

CSReady::CSReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSReady)
}
CSReady::CSReady(const CSReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSReady)
}

void CSReady::SharedCtor() {
}

CSReady::~CSReady() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSReady::ArenaDtor(void* object) {
  CSReady* _this = reinterpret_cast< CSReady* >(object);
  (void)_this;
}
void CSReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSReady& CSReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSReady_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSReady::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSReady)
  return target;
}

size_t CSReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSReady)
  GOOGLE_DCHECK_NE(&from, this);
  const CSReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSReady)
    MergeFrom(*source);
  }
}

void CSReady::MergeFrom(const CSReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReady::CopyFrom(const CSReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReady::IsInitialized() const {
  return true;
}

void CSReady::InternalSwap(CSReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCReady::_Internal {
 public:
  static const ::PlaneWar::RoomInfo& roominfo(const SCReady* msg);
};

const ::PlaneWar::RoomInfo&
SCReady::_Internal::roominfo(const SCReady* msg) {
  return *msg->roominfo_;
}
SCReady::SCReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playerlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCReady)
}
SCReady::SCReady(const SCReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerlist_(from.playerlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::PlaneWar::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCReady)
}

void SCReady::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCReady_PlaneWar_2eproto.base);
  roominfo_ = nullptr;
}

SCReady::~SCReady() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
}

void SCReady::ArenaDtor(void* object) {
  SCReady* _this = reinterpret_cast< SCReady* >(object);
  (void)_this;
}
void SCReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCReady& SCReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCReady_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCReady::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerlist_.Clear();
  if (GetArena() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.PlayerInfo playerList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RoomInfo roomInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.PlayerInfo playerList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_playerlist(i), target, stream);
  }

  // .PlaneWar.RoomInfo roomInfo = 2;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roominfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCReady)
  return target;
}

size_t SCReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PlayerInfo playerList = 1;
  total_size += 1UL * this->_internal_playerlist_size();
  for (const auto& msg : this->playerlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.RoomInfo roomInfo = 2;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCReady)
  GOOGLE_DCHECK_NE(&from, this);
  const SCReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCReady)
    MergeFrom(*source);
  }
}

void SCReady::MergeFrom(const SCReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerlist_.MergeFrom(from.playerlist_);
  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::PlaneWar::RoomInfo::MergeFrom(from._internal_roominfo());
  }
}

void SCReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCReady::CopyFrom(const SCReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCReady::IsInitialized() const {
  return true;
}

void SCReady::InternalSwap(SCReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  playerlist_.InternalSwap(&other->playerlist_);
  swap(roominfo_, other->roominfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserEnterNotify::_Internal {
 public:
  static const ::PlaneWar::PlayerInfo& player(const SCUserEnterNotify* msg);
};

const ::PlaneWar::PlayerInfo&
SCUserEnterNotify::_Internal::player(const SCUserEnterNotify* msg) {
  return *msg->player_;
}
SCUserEnterNotify::SCUserEnterNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUserEnterNotify)
}
SCUserEnterNotify::SCUserEnterNotify(const SCUserEnterNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::PlaneWar::PlayerInfo(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUserEnterNotify)
}

void SCUserEnterNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserEnterNotify_PlaneWar_2eproto.base);
  player_ = nullptr;
}

SCUserEnterNotify::~SCUserEnterNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUserEnterNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserEnterNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void SCUserEnterNotify::ArenaDtor(void* object) {
  SCUserEnterNotify* _this = reinterpret_cast< SCUserEnterNotify* >(object);
  (void)_this;
}
void SCUserEnterNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserEnterNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserEnterNotify& SCUserEnterNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserEnterNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUserEnterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUserEnterNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserEnterNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.PlayerInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserEnterNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUserEnterNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.PlayerInfo player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUserEnterNotify)
  return target;
}

size_t SCUserEnterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUserEnterNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PlayerInfo player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserEnterNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUserEnterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserEnterNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserEnterNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUserEnterNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUserEnterNotify)
    MergeFrom(*source);
  }
}

void SCUserEnterNotify::MergeFrom(const SCUserEnterNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUserEnterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::PlaneWar::PlayerInfo::MergeFrom(from._internal_player());
  }
}

void SCUserEnterNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUserEnterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserEnterNotify::CopyFrom(const SCUserEnterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUserEnterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserEnterNotify::IsInitialized() const {
  return true;
}

void SCUserEnterNotify::InternalSwap(SCUserEnterNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserEnterNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MonsterInfo::_Internal {
 public:
};

MonsterInfo::MonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MonsterInfo)
}
MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monstertype_, &from.monstertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&isconnect_) -
    reinterpret_cast<char*>(&monstertype_)) + sizeof(isconnect_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MonsterInfo)
}

void MonsterInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monstertype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isconnect_) -
      reinterpret_cast<char*>(&monstertype_)) + sizeof(isconnect_));
}

MonsterInfo::~MonsterInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.MonsterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonsterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MonsterInfo::ArenaDtor(void* object) {
  MonsterInfo* _this = reinterpret_cast< MonsterInfo* >(object);
  (void)_this;
}
void MonsterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonsterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterInfo& MonsterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monstertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isconnect_) -
      reinterpret_cast<char*>(&monstertype_)) + sizeof(isconnect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 monsterType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monstertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monsterUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isConnect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterType = 1;
  if (this->monstertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monstertype(), target);
  }

  // int32 monsterUID = 2;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monsteruid(), target);
  }

  // bool isConnect = 3;
  if (this->isconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isconnect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MonsterInfo)
  return target;
}

size_t MonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MonsterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterType = 1;
  if (this->monstertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monstertype());
  }

  // int32 monsterUID = 2;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // bool isConnect = 3;
  if (this->isconnect() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MonsterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MonsterInfo)
    MergeFrom(*source);
  }
}

void MonsterInfo::MergeFrom(const MonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monstertype() != 0) {
    _internal_set_monstertype(from._internal_monstertype());
  }
  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.isconnect() != 0) {
    _internal_set_isconnect(from._internal_isconnect());
  }
}

void MonsterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  return true;
}

void MonsterInfo::InternalSwap(MonsterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterInfo, isconnect_)
      + sizeof(MonsterInfo::isconnect_)
      - PROTOBUF_FIELD_OFFSET(MonsterInfo, monstertype_)>(
          reinterpret_cast<char*>(&monstertype_),
          reinterpret_cast<char*>(&other->monstertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMonsterSpawn::_Internal {
 public:
};

SCMonsterSpawn::SCMonsterSpawn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monsterlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMonsterSpawn)
}
SCMonsterSpawn::SCMonsterSpawn(const SCMonsterSpawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monsterlist_(from.monsterlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&configid_, &from.configid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscall_) -
    reinterpret_cast<char*>(&configid_)) + sizeof(iscall_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMonsterSpawn)
}

void SCMonsterSpawn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMonsterSpawn_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&configid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&iscall_) -
      reinterpret_cast<char*>(&configid_)) + sizeof(iscall_));
}

SCMonsterSpawn::~SCMonsterSpawn() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMonsterSpawn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMonsterSpawn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMonsterSpawn::ArenaDtor(void* object) {
  SCMonsterSpawn* _this = reinterpret_cast< SCMonsterSpawn* >(object);
  (void)_this;
}
void SCMonsterSpawn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMonsterSpawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMonsterSpawn& SCMonsterSpawn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMonsterSpawn_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMonsterSpawn::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMonsterSpawn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monsterlist_.Clear();
  ::memset(&configid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscall_) -
      reinterpret_cast<char*>(&configid_)) + sizeof(iscall_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMonsterSpawn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 configID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          configid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MonsterInfo monsterList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monsterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isCall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iscall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMonsterSpawn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMonsterSpawn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 configID = 1;
  if (this->configid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_configid(), target);
  }

  // repeated .PlaneWar.MonsterInfo monsterList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monsterlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_monsterlist(i), target, stream);
  }

  // bool isCall = 3;
  if (this->iscall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_iscall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMonsterSpawn)
  return target;
}

size_t SCMonsterSpawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMonsterSpawn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MonsterInfo monsterList = 2;
  total_size += 1UL * this->_internal_monsterlist_size();
  for (const auto& msg : this->monsterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 configID = 1;
  if (this->configid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_configid());
  }

  // bool isCall = 3;
  if (this->iscall() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMonsterSpawn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMonsterSpawn)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMonsterSpawn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMonsterSpawn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMonsterSpawn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMonsterSpawn)
    MergeFrom(*source);
  }
}

void SCMonsterSpawn::MergeFrom(const SCMonsterSpawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMonsterSpawn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monsterlist_.MergeFrom(from.monsterlist_);
  if (from.configid() != 0) {
    _internal_set_configid(from._internal_configid());
  }
  if (from.iscall() != 0) {
    _internal_set_iscall(from._internal_iscall());
  }
}

void SCMonsterSpawn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMonsterSpawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMonsterSpawn::CopyFrom(const SCMonsterSpawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMonsterSpawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMonsterSpawn::IsInitialized() const {
  return true;
}

void SCMonsterSpawn::InternalSwap(SCMonsterSpawn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monsterlist_.InternalSwap(&other->monsterlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCMonsterSpawn, iscall_)
      + sizeof(SCMonsterSpawn::iscall_)
      - PROTOBUF_FIELD_OFFSET(SCMonsterSpawn, configid_)>(
          reinterpret_cast<char*>(&configid_),
          reinterpret_cast<char*>(&other->configid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMonsterSpawn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSShot::_Internal {
 public:
};

CSShot::CSShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSShot)
}
CSShot::CSShot(const CSShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(sourceuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSShot)
}

void CSShot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(sourceuid_));
}

CSShot::~CSShot() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSShot::ArenaDtor(void* object) {
  CSShot* _this = reinterpret_cast< CSShot* >(object);
  (void)_this;
}
void CSShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSShot& CSShot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSShot_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSShot::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(sourceuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scatter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scatter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_angle(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // int32 bulletType = 3;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bullettype(), target);
  }

  // int32 scatter = 4;
  if (this->scatter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_scatter(), target);
  }

  // int32 sourceUID = 5;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSShot)
  return target;
}

size_t CSShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 bulletType = 3;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 scatter = 4;
  if (this->scatter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scatter());
  }

  // int32 sourceUID = 5;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSShot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSShot)
    MergeFrom(*source);
  }
}

void CSShot::MergeFrom(const CSShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.scatter() != 0) {
    _internal_set_scatter(from._internal_scatter());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShot::CopyFrom(const CSShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShot::IsInitialized() const {
  return true;
}

void CSShot::InternalSwap(CSShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSShot, sourceuid_)
      + sizeof(CSShot::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(CSShot, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCShot::_Internal {
 public:
};

SCShot::SCShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCShot)
}
SCShot::SCShot(const SCShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&scatter_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(scatter_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCShot)
}

void SCShot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scatter_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(scatter_));
}

SCShot::~SCShot() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCShot::ArenaDtor(void* object) {
  SCShot* _this = reinterpret_cast< SCShot* >(object);
  (void)_this;
}
void SCShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCShot& SCShot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCShot_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCShot::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scatter_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(scatter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scatter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          scatter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_angle(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 bulletType = 4;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bullettype(), target);
  }

  // int32 scatter = 5;
  if (this->scatter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_scatter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCShot)
  return target;
}

size_t SCShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 bulletType = 4;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 scatter = 5;
  if (this->scatter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scatter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCShot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCShot)
    MergeFrom(*source);
  }
}

void SCShot::MergeFrom(const SCShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.scatter() != 0) {
    _internal_set_scatter(from._internal_scatter());
  }
}

void SCShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCShot::CopyFrom(const SCShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCShot::IsInitialized() const {
  return true;
}

void SCShot::InternalSwap(SCShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCShot, scatter_)
      + sizeof(SCShot::scatter_)
      - PROTOBUF_FIELD_OFFSET(SCShot, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLock::_Internal {
 public:
};

CSLock::CSLock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSLock)
}
CSLock::CSLock(const CSLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monsteruid_, &from.monsteruid_,
    static_cast<size_t>(reinterpret_cast<char*>(&colliderindex_) -
    reinterpret_cast<char*>(&monsteruid_)) + sizeof(colliderindex_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSLock)
}

void CSLock::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monsteruid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&colliderindex_) -
      reinterpret_cast<char*>(&monsteruid_)) + sizeof(colliderindex_));
}

CSLock::~CSLock() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSLock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLock::ArenaDtor(void* object) {
  CSLock* _this = reinterpret_cast< CSLock* >(object);
  (void)_this;
}
void CSLock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLock& CSLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLock_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSLock::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monsteruid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colliderindex_) -
      reinterpret_cast<char*>(&monsteruid_)) + sizeof(colliderindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 monsterUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 colliderIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          colliderindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsteruid(), target);
  }

  // int32 colliderIndex = 2;
  if (this->colliderindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_colliderindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSLock)
  return target;
}

size_t CSLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSLock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 colliderIndex = 2;
  if (this->colliderindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colliderindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSLock)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSLock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSLock)
    MergeFrom(*source);
  }
}

void CSLock::MergeFrom(const CSLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.colliderindex() != 0) {
    _internal_set_colliderindex(from._internal_colliderindex());
  }
}

void CSLock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLock::CopyFrom(const CSLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLock::IsInitialized() const {
  return true;
}

void CSLock::InternalSwap(CSLock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSLock, colliderindex_)
      + sizeof(CSLock::colliderindex_)
      - PROTOBUF_FIELD_OFFSET(CSLock, monsteruid_)>(
          reinterpret_cast<char*>(&monsteruid_),
          reinterpret_cast<char*>(&other->monsteruid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLock::_Internal {
 public:
};

SCLock::SCLock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCLock)
}
SCLock::SCLock(const SCLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&colliderindex_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(colliderindex_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCLock)
}

void SCLock::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&colliderindex_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(colliderindex_));
}

SCLock::~SCLock() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCLock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLock::ArenaDtor(void* object) {
  SCLock* _this = reinterpret_cast< SCLock* >(object);
  (void)_this;
}
void SCLock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLock& SCLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLock_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCLock::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colliderindex_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(colliderindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monsterUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 colliderIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          colliderindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 monsterUID = 2;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monsteruid(), target);
  }

  // int32 colliderIndex = 3;
  if (this->colliderindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_colliderindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCLock)
  return target;
}

size_t SCLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCLock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 monsterUID = 2;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 colliderIndex = 3;
  if (this->colliderindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colliderindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCLock)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCLock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCLock)
    MergeFrom(*source);
  }
}

void SCLock::MergeFrom(const SCLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.colliderindex() != 0) {
    _internal_set_colliderindex(from._internal_colliderindex());
  }
}

void SCLock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLock::CopyFrom(const SCLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLock::IsInitialized() const {
  return true;
}

void SCLock::InternalSwap(SCLock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLock, colliderindex_)
      + sizeof(SCLock::colliderindex_)
      - PROTOBUF_FIELD_OFFSET(SCLock, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Poker::_Internal {
 public:
};

Poker::Poker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.Poker)
}
Poker::Poker(const Poker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&value_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.Poker)
}

void Poker::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&value_)) + sizeof(multiple_));
}

Poker::~Poker() {
  // @@protoc_insertion_point(destructor:PlaneWar.Poker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Poker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Poker::ArenaDtor(void* object) {
  Poker* _this = reinterpret_cast< Poker* >(object);
  (void)_this;
}
void Poker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Poker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Poker& Poker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Poker_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void Poker::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.Poker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&value_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Poker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Poker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.Poker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.Poker)
  return target;
}

size_t Poker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.Poker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Poker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.Poker)
  GOOGLE_DCHECK_NE(&from, this);
  const Poker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Poker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.Poker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.Poker)
    MergeFrom(*source);
  }
}

void Poker::MergeFrom(const Poker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.Poker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void Poker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.Poker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Poker::CopyFrom(const Poker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.Poker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poker::IsInitialized() const {
  return true;
}

void Poker::InternalSwap(Poker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Poker, multiple_)
      + sizeof(Poker::multiple_)
      - PROTOBUF_FIELD_OFFSET(Poker, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Poker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DropPoker::_Internal {
 public:
};

DropPoker::DropPoker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pokerlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.DropPoker)
}
DropPoker::DropPoker(const DropPoker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pokerlist_(from.pokerlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dice_, &from.dice_,
    static_cast<size_t>(reinterpret_cast<char*>(&kindmultiple_) -
    reinterpret_cast<char*>(&dice_)) + sizeof(kindmultiple_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.DropPoker)
}

void DropPoker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropPoker_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dice_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kindmultiple_) -
      reinterpret_cast<char*>(&dice_)) + sizeof(kindmultiple_));
}

DropPoker::~DropPoker() {
  // @@protoc_insertion_point(destructor:PlaneWar.DropPoker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropPoker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DropPoker::ArenaDtor(void* object) {
  DropPoker* _this = reinterpret_cast< DropPoker* >(object);
  (void)_this;
}
void DropPoker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropPoker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropPoker& DropPoker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropPoker_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void DropPoker::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.DropPoker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pokerlist_.Clear();
  ::memset(&dice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kindmultiple_) -
      reinterpret_cast<char*>(&dice_)) + sizeof(kindmultiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropPoker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.Poker pokerList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pokerlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 dice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kindMultiple = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kindmultiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropPoker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.DropPoker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.Poker pokerList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pokerlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pokerlist(i), target, stream);
  }

  // int32 dice = 2;
  if (this->dice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dice(), target);
  }

  // int32 kind = 3;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_kind(), target);
  }

  // int32 kindMultiple = 4;
  if (this->kindmultiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_kindmultiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.DropPoker)
  return target;
}

size_t DropPoker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.DropPoker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.Poker pokerList = 1;
  total_size += 1UL * this->_internal_pokerlist_size();
  for (const auto& msg : this->pokerlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 dice = 2;
  if (this->dice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dice());
  }

  // int32 kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  // int32 kindMultiple = 4;
  if (this->kindmultiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kindmultiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropPoker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.DropPoker)
  GOOGLE_DCHECK_NE(&from, this);
  const DropPoker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropPoker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.DropPoker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.DropPoker)
    MergeFrom(*source);
  }
}

void DropPoker::MergeFrom(const DropPoker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.DropPoker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pokerlist_.MergeFrom(from.pokerlist_);
  if (from.dice() != 0) {
    _internal_set_dice(from._internal_dice());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.kindmultiple() != 0) {
    _internal_set_kindmultiple(from._internal_kindmultiple());
  }
}

void DropPoker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.DropPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropPoker::CopyFrom(const DropPoker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.DropPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropPoker::IsInitialized() const {
  return true;
}

void DropPoker::InternalSwap(DropPoker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pokerlist_.InternalSwap(&other->pokerlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropPoker, kindmultiple_)
      + sizeof(DropPoker::kindmultiple_)
      - PROTOBUF_FIELD_OFFSET(DropPoker, dice_)>(
          reinterpret_cast<char*>(&dice_),
          reinterpret_cast<char*>(&other->dice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropPoker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TriggerBullet::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const TriggerBullet* msg);
};

const ::PlaneWar::Pos&
TriggerBullet::_Internal::pos(const TriggerBullet* msg) {
  return *msg->pos_;
}
TriggerBullet::TriggerBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena),
  params2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.TriggerBullet)
}
TriggerBullet::TriggerBullet(const TriggerBullet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_),
      params2_(from.params2_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  monetary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_monetary().empty()) {
    monetary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_monetary(), 
      GetArena());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&bullettype_, &from.bullettype_,
    static_cast<size_t>(reinterpret_cast<char*>(&hitratio_) -
    reinterpret_cast<char*>(&bullettype_)) + sizeof(hitratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.TriggerBullet)
}

void TriggerBullet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TriggerBullet_PlaneWar_2eproto.base);
  monetary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hitratio_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(hitratio_));
}

TriggerBullet::~TriggerBullet() {
  // @@protoc_insertion_point(destructor:PlaneWar.TriggerBullet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TriggerBullet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  monetary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void TriggerBullet::ArenaDtor(void* object) {
  TriggerBullet* _this = reinterpret_cast< TriggerBullet* >(object);
  (void)_this;
}
void TriggerBullet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TriggerBullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerBullet& TriggerBullet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerBullet_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void TriggerBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.TriggerBullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  params2_.Clear();
  monetary_.ClearToEmpty();
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&bullettype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hitratio_) -
      reinterpret_cast<char*>(&bullettype_)) + sizeof(hitratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TriggerBullet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bulletType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_params(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 params2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_params2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_params2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 generation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float delay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string monetary = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_monetary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.TriggerBullet.monetary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float destroyDelay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          destroydelay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 hitRatio = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          hitratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerBullet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.TriggerBullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bulletType = 1;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bullettype(), target);
  }

  // int32 subType = 2;
  if (this->subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_subtype(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // repeated int32 params = 4;
  {
    int byte_size = _params_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_params(), byte_size, target);
    }
  }

  // repeated int32 params2 = 5;
  {
    int byte_size = _params2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_params2(), byte_size, target);
    }
  }

  // int32 sourceUID = 6;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sourceuid(), target);
  }

  // int32 generation = 7;
  if (this->generation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_generation(), target);
  }

  // .PlaneWar.Pos pos = 8;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pos(this), target, stream);
  }

  // float delay = 9;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_delay(), target);
  }

  // int32 range = 10;
  if (this->range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_range(), target);
  }

  // float speed = 11;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_speed(), target);
  }

  // string monetary = 12;
  if (this->monetary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_monetary().data(), static_cast<int>(this->_internal_monetary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.TriggerBullet.monetary");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_monetary(), target);
  }

  // float destroyDelay = 13;
  if (!(this->destroydelay() <= 0 && this->destroydelay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_destroydelay(), target);
  }

  // int32 hitRatio = 14;
  if (this->hitratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_hitratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.TriggerBullet)
  return target;
}

size_t TriggerBullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.TriggerBullet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 params = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->params_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 params2 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->params2_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _params2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string monetary = 12;
  if (this->monetary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_monetary());
  }

  // .PlaneWar.Pos pos = 8;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 bulletType = 1;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 subType = 2;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 sourceUID = 6;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 generation = 7;
  if (this->generation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_generation());
  }

  // float delay = 9;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 range = 10;
  if (this->range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range());
  }

  // float speed = 11;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float destroyDelay = 13;
  if (!(this->destroydelay() <= 0 && this->destroydelay() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hitRatio = 14;
  if (this->hitratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hitratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerBullet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.TriggerBullet)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerBullet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerBullet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.TriggerBullet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.TriggerBullet)
    MergeFrom(*source);
  }
}

void TriggerBullet::MergeFrom(const TriggerBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.TriggerBullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  params2_.MergeFrom(from.params2_);
  if (from.monetary().size() > 0) {
    _internal_set_monetary(from._internal_monetary());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.generation() != 0) {
    _internal_set_generation(from._internal_generation());
  }
  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    _internal_set_delay(from._internal_delay());
  }
  if (from.range() != 0) {
    _internal_set_range(from._internal_range());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.destroydelay() <= 0 && from.destroydelay() >= 0)) {
    _internal_set_destroydelay(from._internal_destroydelay());
  }
  if (from.hitratio() != 0) {
    _internal_set_hitratio(from._internal_hitratio());
  }
}

void TriggerBullet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.TriggerBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerBullet::CopyFrom(const TriggerBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.TriggerBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerBullet::IsInitialized() const {
  return true;
}

void TriggerBullet::InternalSwap(TriggerBullet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  params2_.InternalSwap(&other->params2_);
  monetary_.Swap(&other->monetary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerBullet, hitratio_)
      + sizeof(TriggerBullet::hitratio_)
      - PROTOBUF_FIELD_OFFSET(TriggerBullet, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerBullet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Roulette::_Internal {
 public:
};

Roulette::Roulette(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outerround_(arena),
  innerround_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.Roulette)
}
Roulette::Roulette(const Roulette& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outerround_(from.outerround_),
      innerround_(from.innerround_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&outerindex_, &from.outerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&innerindex_) -
    reinterpret_cast<char*>(&outerindex_)) + sizeof(innerindex_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.Roulette)
}

void Roulette::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&outerindex_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&innerindex_) -
      reinterpret_cast<char*>(&outerindex_)) + sizeof(innerindex_));
}

Roulette::~Roulette() {
  // @@protoc_insertion_point(destructor:PlaneWar.Roulette)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roulette::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roulette::ArenaDtor(void* object) {
  Roulette* _this = reinterpret_cast< Roulette* >(object);
  (void)_this;
}
void Roulette::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roulette::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roulette& Roulette::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roulette_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void Roulette::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.Roulette)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outerround_.Clear();
  innerround_.Clear();
  ::memset(&outerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&innerindex_) -
      reinterpret_cast<char*>(&outerindex_)) + sizeof(innerindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roulette::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 outerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          outerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 innerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          innerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 outerRound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_outerround(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_outerround(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 innerRound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_innerround(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_innerround(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roulette::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.Roulette)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 outerIndex = 1;
  if (this->outerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_outerindex(), target);
  }

  // int32 innerIndex = 2;
  if (this->innerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_innerindex(), target);
  }

  // repeated int32 outerRound = 3;
  {
    int byte_size = _outerround_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_outerround(), byte_size, target);
    }
  }

  // repeated int32 innerRound = 4;
  {
    int byte_size = _innerround_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_innerround(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.Roulette)
  return target;
}

size_t Roulette::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.Roulette)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 outerRound = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->outerround_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _outerround_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 innerRound = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->innerround_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _innerround_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 outerIndex = 1;
  if (this->outerindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outerindex());
  }

  // int32 innerIndex = 2;
  if (this->innerindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_innerindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roulette::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.Roulette)
  GOOGLE_DCHECK_NE(&from, this);
  const Roulette* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roulette>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.Roulette)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.Roulette)
    MergeFrom(*source);
  }
}

void Roulette::MergeFrom(const Roulette& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.Roulette)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outerround_.MergeFrom(from.outerround_);
  innerround_.MergeFrom(from.innerround_);
  if (from.outerindex() != 0) {
    _internal_set_outerindex(from._internal_outerindex());
  }
  if (from.innerindex() != 0) {
    _internal_set_innerindex(from._internal_innerindex());
  }
}

void Roulette::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.Roulette)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roulette::CopyFrom(const Roulette& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.Roulette)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roulette::IsInitialized() const {
  return true;
}

void Roulette::InternalSwap(Roulette* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outerround_.InternalSwap(&other->outerround_);
  innerround_.InternalSwap(&other->innerround_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roulette, innerindex_)
      + sizeof(Roulette::innerindex_)
      - PROTOBUF_FIELD_OFFSET(Roulette, outerindex_)>(
          reinterpret_cast<char*>(&outerindex_),
          reinterpret_cast<char*>(&other->outerindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roulette::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DropBuff::_Internal {
 public:
};

DropBuff::DropBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compose_(arena),
  desc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.DropBuff)
}
DropBuff::DropBuff(const DropBuff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compose_(from.compose_),
      desc_(from.desc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buffuid_, &from.buffuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&speedupratio_) -
    reinterpret_cast<char*>(&buffuid_)) + sizeof(speedupratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.DropBuff)
}

void DropBuff::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&buffuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&speedupratio_) -
      reinterpret_cast<char*>(&buffuid_)) + sizeof(speedupratio_));
}

DropBuff::~DropBuff() {
  // @@protoc_insertion_point(destructor:PlaneWar.DropBuff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropBuff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DropBuff::ArenaDtor(void* object) {
  DropBuff* _this = reinterpret_cast< DropBuff* >(object);
  (void)_this;
}
void DropBuff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropBuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropBuff& DropBuff::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropBuff_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void DropBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.DropBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compose_.Clear();
  desc_.Clear();
  ::memset(&buffuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speedupratio_) -
      reinterpret_cast<char*>(&buffuid_)) + sizeof(speedupratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropBuff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 buffUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 compose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_compose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_compose(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_desc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_desc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speedUpRatio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          speedupratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropBuff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.DropBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buffUID = 1;
  if (this->buffuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buffuid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // repeated int32 compose = 3;
  {
    int byte_size = _compose_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_compose(), byte_size, target);
    }
  }

  // repeated int32 desc = 4;
  {
    int byte_size = _desc_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_desc(), byte_size, target);
    }
  }

  // int32 speedUpRatio = 5;
  if (this->speedupratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_speedupratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.DropBuff)
  return target;
}

size_t DropBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.DropBuff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 compose = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->compose_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _compose_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 desc = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->desc_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _desc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 buffUID = 1;
  if (this->buffuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffuid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 speedUpRatio = 5;
  if (this->speedupratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speedupratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropBuff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.DropBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const DropBuff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropBuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.DropBuff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.DropBuff)
    MergeFrom(*source);
  }
}

void DropBuff::MergeFrom(const DropBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.DropBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compose_.MergeFrom(from.compose_);
  desc_.MergeFrom(from.desc_);
  if (from.buffuid() != 0) {
    _internal_set_buffuid(from._internal_buffuid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.speedupratio() != 0) {
    _internal_set_speedupratio(from._internal_speedupratio());
  }
}

void DropBuff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.DropBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropBuff::CopyFrom(const DropBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.DropBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropBuff::IsInitialized() const {
  return true;
}

void DropBuff::InternalSwap(DropBuff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compose_.InternalSwap(&other->compose_);
  desc_.InternalSwap(&other->desc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropBuff, speedupratio_)
      + sizeof(DropBuff::speedupratio_)
      - PROTOBUF_FIELD_OFFSET(DropBuff, buffuid_)>(
          reinterpret_cast<char*>(&buffuid_),
          reinterpret_cast<char*>(&other->buffuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropBuff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FakeTresureInfo::_Internal {
 public:
};

FakeTresureInfo::FakeTresureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.FakeTresureInfo)
}
FakeTresureInfo::FakeTresureInfo(const FakeTresureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.FakeTresureInfo)
}

void FakeTresureInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_));
}

FakeTresureInfo::~FakeTresureInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.FakeTresureInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FakeTresureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FakeTresureInfo::ArenaDtor(void* object) {
  FakeTresureInfo* _this = reinterpret_cast< FakeTresureInfo* >(object);
  (void)_this;
}
void FakeTresureInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FakeTresureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FakeTresureInfo& FakeTresureInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FakeTresureInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void FakeTresureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.FakeTresureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FakeTresureInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 propID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FakeTresureInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.FakeTresureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 propID = 2;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propid(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.FakeTresureInfo)
  return target;
}

size_t FakeTresureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.FakeTresureInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 propID = 2;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FakeTresureInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.FakeTresureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FakeTresureInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FakeTresureInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.FakeTresureInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.FakeTresureInfo)
    MergeFrom(*source);
  }
}

void FakeTresureInfo::MergeFrom(const FakeTresureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.FakeTresureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void FakeTresureInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.FakeTresureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FakeTresureInfo::CopyFrom(const FakeTresureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.FakeTresureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FakeTresureInfo::IsInitialized() const {
  return true;
}

void FakeTresureInfo::InternalSwap(FakeTresureInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FakeTresureInfo, num_)
      + sizeof(FakeTresureInfo::num_)
      - PROTOBUF_FIELD_OFFSET(FakeTresureInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FakeTresureInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TreasureInfo::_Internal {
 public:
  static const ::PlaneWar::FakeTresureInfo& fakeinfo(const TreasureInfo* msg);
};

const ::PlaneWar::FakeTresureInfo&
TreasureInfo::_Internal::fakeinfo(const TreasureInfo* msg) {
  return *msg->fakeinfo_;
}
TreasureInfo::TreasureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.TreasureInfo)
}
TreasureInfo::TreasureInfo(const TreasureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fakeinfo()) {
    fakeinfo_ = new ::PlaneWar::FakeTresureInfo(*from.fakeinfo_);
  } else {
    fakeinfo_ = nullptr;
  }
  ::memcpy(&showtype_, &from.showtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&faketype_) -
    reinterpret_cast<char*>(&showtype_)) + sizeof(faketype_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.TreasureInfo)
}

void TreasureInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreasureInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fakeinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&faketype_) -
      reinterpret_cast<char*>(&fakeinfo_)) + sizeof(faketype_));
}

TreasureInfo::~TreasureInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.TreasureInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TreasureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fakeinfo_;
}

void TreasureInfo::ArenaDtor(void* object) {
  TreasureInfo* _this = reinterpret_cast< TreasureInfo* >(object);
  (void)_this;
}
void TreasureInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreasureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreasureInfo& TreasureInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreasureInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void TreasureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.TreasureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fakeinfo_ != nullptr) {
    delete fakeinfo_;
  }
  fakeinfo_ = nullptr;
  ::memset(&showtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&faketype_) -
      reinterpret_cast<char*>(&showtype_)) + sizeof(faketype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreasureInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 showType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          showtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 propID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fakeType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          faketype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.FakeTresureInfo fakeInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fakeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreasureInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.TreasureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 showType = 1;
  if (this->showtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_showtype(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 propID = 3;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_propid(), target);
  }

  // int32 num = 4;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  // int32 fakeType = 5;
  if (this->faketype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_faketype(), target);
  }

  // .PlaneWar.FakeTresureInfo fakeInfo = 6;
  if (this->has_fakeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fakeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.TreasureInfo)
  return target;
}

size_t TreasureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.TreasureInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.FakeTresureInfo fakeInfo = 6;
  if (this->has_fakeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fakeinfo_);
  }

  // int32 showType = 1;
  if (this->showtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showtype());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 propID = 3;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 num = 4;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 fakeType = 5;
  if (this->faketype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_faketype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreasureInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.TreasureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TreasureInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreasureInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.TreasureInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.TreasureInfo)
    MergeFrom(*source);
  }
}

void TreasureInfo::MergeFrom(const TreasureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.TreasureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fakeinfo()) {
    _internal_mutable_fakeinfo()->::PlaneWar::FakeTresureInfo::MergeFrom(from._internal_fakeinfo());
  }
  if (from.showtype() != 0) {
    _internal_set_showtype(from._internal_showtype());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.faketype() != 0) {
    _internal_set_faketype(from._internal_faketype());
  }
}

void TreasureInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.TreasureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureInfo::CopyFrom(const TreasureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.TreasureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureInfo::IsInitialized() const {
  return true;
}

void TreasureInfo::InternalSwap(TreasureInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreasureInfo, faketype_)
      + sizeof(TreasureInfo::faketype_)
      - PROTOBUF_FIELD_OFFSET(TreasureInfo, fakeinfo_)>(
          reinterpret_cast<char*>(&fakeinfo_),
          reinterpret_cast<char*>(&other->fakeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreasureInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FortuneWheelInfo::_Internal {
 public:
};

FortuneWheelInfo::FortuneWheelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.FortuneWheelInfo)
}
FortuneWheelInfo::FortuneWheelInfo(const FortuneWheelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.FortuneWheelInfo)
}

void FortuneWheelInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(color_));
}

FortuneWheelInfo::~FortuneWheelInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.FortuneWheelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FortuneWheelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FortuneWheelInfo::ArenaDtor(void* object) {
  FortuneWheelInfo* _this = reinterpret_cast< FortuneWheelInfo* >(object);
  (void)_this;
}
void FortuneWheelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FortuneWheelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FortuneWheelInfo& FortuneWheelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FortuneWheelInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void FortuneWheelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.FortuneWheelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FortuneWheelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FortuneWheelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.FortuneWheelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stage(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // bool next = 3;
  if (this->next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_next(), target);
  }

  // int32 color = 4;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.FortuneWheelInfo)
  return target;
}

size_t FortuneWheelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.FortuneWheelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // bool next = 3;
  if (this->next() != 0) {
    total_size += 1 + 1;
  }

  // int32 color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FortuneWheelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.FortuneWheelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FortuneWheelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FortuneWheelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.FortuneWheelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.FortuneWheelInfo)
    MergeFrom(*source);
  }
}

void FortuneWheelInfo::MergeFrom(const FortuneWheelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.FortuneWheelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.next() != 0) {
    _internal_set_next(from._internal_next());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void FortuneWheelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.FortuneWheelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FortuneWheelInfo::CopyFrom(const FortuneWheelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.FortuneWheelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FortuneWheelInfo::IsInitialized() const {
  return true;
}

void FortuneWheelInfo::InternalSwap(FortuneWheelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FortuneWheelInfo, color_)
      + sizeof(FortuneWheelInfo::color_)
      - PROTOBUF_FIELD_OFFSET(FortuneWheelInfo, stage_)>(
          reinterpret_cast<char*>(&stage_),
          reinterpret_cast<char*>(&other->stage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FortuneWheelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToadInfo::_Internal {
 public:
};

ToadInfo::ToadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ratiolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ToadInfo)
}
ToadInfo::ToadInfo(const ToadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ratiolist_(from.ratiolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  critical_ = from.critical_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ToadInfo)
}

void ToadInfo::SharedCtor() {
  critical_ = 0;
}

ToadInfo::~ToadInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.ToadInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToadInfo::ArenaDtor(void* object) {
  ToadInfo* _this = reinterpret_cast< ToadInfo* >(object);
  (void)_this;
}
void ToadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToadInfo& ToadInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToadInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ToadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ToadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratiolist_.Clear();
  critical_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ratioList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratiolist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 critical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ToadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ratioList = 1;
  {
    int byte_size = _ratiolist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ratiolist(), byte_size, target);
    }
  }

  // int32 critical = 2;
  if (this->critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_critical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ToadInfo)
  return target;
}

size_t ToadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ToadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ratioList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratiolist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratiolist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 critical = 2;
  if (this->critical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_critical());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ToadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ToadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ToadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ToadInfo)
    MergeFrom(*source);
  }
}

void ToadInfo::MergeFrom(const ToadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ToadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratiolist_.MergeFrom(from.ratiolist_);
  if (from.critical() != 0) {
    _internal_set_critical(from._internal_critical());
  }
}

void ToadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ToadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToadInfo::CopyFrom(const ToadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ToadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToadInfo::IsInitialized() const {
  return true;
}

void ToadInfo::InternalSwap(ToadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ratiolist_.InternalSwap(&other->ratiolist_);
  swap(critical_, other->critical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToadInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FortuneConfig::_Internal {
 public:
};

FortuneConfig::FortuneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fortunewheelinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.FortuneConfig)
}
FortuneConfig::FortuneConfig(const FortuneConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fortunewheelinfo_(from.fortunewheelinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.FortuneConfig)
}

void FortuneConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FortuneConfig_PlaneWar_2eproto.base);
}

FortuneConfig::~FortuneConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.FortuneConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FortuneConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FortuneConfig::ArenaDtor(void* object) {
  FortuneConfig* _this = reinterpret_cast< FortuneConfig* >(object);
  (void)_this;
}
void FortuneConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FortuneConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FortuneConfig& FortuneConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FortuneConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void FortuneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.FortuneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fortunewheelinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FortuneConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.FortuneWheelInfo fortuneWheelInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fortunewheelinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FortuneConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.FortuneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.FortuneWheelInfo fortuneWheelInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fortunewheelinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fortunewheelinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.FortuneConfig)
  return target;
}

size_t FortuneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.FortuneConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.FortuneWheelInfo fortuneWheelInfo = 1;
  total_size += 1UL * this->_internal_fortunewheelinfo_size();
  for (const auto& msg : this->fortunewheelinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FortuneConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.FortuneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FortuneConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FortuneConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.FortuneConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.FortuneConfig)
    MergeFrom(*source);
  }
}

void FortuneConfig::MergeFrom(const FortuneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.FortuneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fortunewheelinfo_.MergeFrom(from.fortunewheelinfo_);
}

void FortuneConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.FortuneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FortuneConfig::CopyFrom(const FortuneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.FortuneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FortuneConfig::IsInitialized() const {
  return true;
}

void FortuneConfig::InternalSwap(FortuneConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fortunewheelinfo_.InternalSwap(&other->fortunewheelinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FortuneConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BeeConfig::_Internal {
 public:
};

BeeConfig::BeeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alist_(arena),
  blist_(arena),
  clist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.BeeConfig)
}
BeeConfig::BeeConfig(const BeeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alist_(from.alist_),
      blist_(from.blist_),
      clist_(from.clist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.BeeConfig)
}

void BeeConfig::SharedCtor() {
}

BeeConfig::~BeeConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.BeeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BeeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BeeConfig::ArenaDtor(void* object) {
  BeeConfig* _this = reinterpret_cast< BeeConfig* >(object);
  (void)_this;
}
void BeeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeeConfig& BeeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeeConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void BeeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.BeeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alist_.Clear();
  blist_.Clear();
  clist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 aList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_alist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_alist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_blist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_clist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_clist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.BeeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 aList = 1;
  {
    int byte_size = _alist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_alist(), byte_size, target);
    }
  }

  // repeated int32 bList = 2;
  {
    int byte_size = _blist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_blist(), byte_size, target);
    }
  }

  // repeated int32 cList = 3;
  {
    int byte_size = _clist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_clist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.BeeConfig)
  return target;
}

size_t BeeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.BeeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 aList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->alist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _alist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bList = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->blist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _blist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cList = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->clist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _clist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.BeeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BeeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.BeeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.BeeConfig)
    MergeFrom(*source);
  }
}

void BeeConfig::MergeFrom(const BeeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.BeeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alist_.MergeFrom(from.alist_);
  blist_.MergeFrom(from.blist_);
  clist_.MergeFrom(from.clist_);
}

void BeeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.BeeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeeConfig::CopyFrom(const BeeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.BeeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeeConfig::IsInitialized() const {
  return true;
}

void BeeConfig::InternalSwap(BeeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alist_.InternalSwap(&other->alist_);
  blist_.InternalSwap(&other->blist_);
  clist_.InternalSwap(&other->clist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonReplayConfig::_Internal {
 public:
};

CommonReplayConfig::CommonReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CommonReplayConfig)
}
CommonReplayConfig::CommonReplayConfig(const CommonReplayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxlen_, &from.maxlen_,
    static_cast<size_t>(reinterpret_cast<char*>(&limitmul_) -
    reinterpret_cast<char*>(&maxlen_)) + sizeof(limitmul_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CommonReplayConfig)
}

void CommonReplayConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limitmul_) -
      reinterpret_cast<char*>(&maxlen_)) + sizeof(limitmul_));
}

CommonReplayConfig::~CommonReplayConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.CommonReplayConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonReplayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommonReplayConfig::ArenaDtor(void* object) {
  CommonReplayConfig* _this = reinterpret_cast< CommonReplayConfig* >(object);
  (void)_this;
}
void CommonReplayConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonReplayConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonReplayConfig& CommonReplayConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonReplayConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CommonReplayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CommonReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maxlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitmul_) -
      reinterpret_cast<char*>(&maxlen_)) + sizeof(limitmul_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonReplayConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 maxLen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limitReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limitreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limitMul = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limitmul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonReplayConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CommonReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 maxLen = 1;
  if (this->maxlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_maxlen(), target);
  }

  // int32 limitReward = 2;
  if (this->limitreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limitreward(), target);
  }

  // int32 limitMul = 3;
  if (this->limitmul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_limitmul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CommonReplayConfig)
  return target;
}

size_t CommonReplayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CommonReplayConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 maxLen = 1;
  if (this->maxlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxlen());
  }

  // int32 limitReward = 2;
  if (this->limitreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limitreward());
  }

  // int32 limitMul = 3;
  if (this->limitmul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limitmul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReplayConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CommonReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReplayConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonReplayConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CommonReplayConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CommonReplayConfig)
    MergeFrom(*source);
  }
}

void CommonReplayConfig::MergeFrom(const CommonReplayConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CommonReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maxlen() != 0) {
    _internal_set_maxlen(from._internal_maxlen());
  }
  if (from.limitreward() != 0) {
    _internal_set_limitreward(from._internal_limitreward());
  }
  if (from.limitmul() != 0) {
    _internal_set_limitmul(from._internal_limitmul());
  }
}

void CommonReplayConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CommonReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReplayConfig::CopyFrom(const CommonReplayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CommonReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReplayConfig::IsInitialized() const {
  return true;
}

void CommonReplayConfig::InternalSwap(CommonReplayConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonReplayConfig, limitmul_)
      + sizeof(CommonReplayConfig::limitmul_)
      - PROTOBUF_FIELD_OFFSET(CommonReplayConfig, maxlen_)>(
          reinterpret_cast<char*>(&maxlen_),
          reinterpret_cast<char*>(&other->maxlen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonReplayConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GlobalReplayConfig::_Internal {
 public:
  static const ::PlaneWar::CommonReplayConfig& commonreplayconfig(const GlobalReplayConfig* msg);
};

const ::PlaneWar::CommonReplayConfig&
GlobalReplayConfig::_Internal::commonreplayconfig(const GlobalReplayConfig* msg) {
  return *msg->commonreplayconfig_;
}
GlobalReplayConfig::GlobalReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GlobalReplayConfig)
}
GlobalReplayConfig::GlobalReplayConfig(const GlobalReplayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonreplayconfig()) {
    commonreplayconfig_ = new ::PlaneWar::CommonReplayConfig(*from.commonreplayconfig_);
  } else {
    commonreplayconfig_ = nullptr;
  }
  refreshtime_ = from.refreshtime_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GlobalReplayConfig)
}

void GlobalReplayConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalReplayConfig_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&commonreplayconfig_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&refreshtime_) -
      reinterpret_cast<char*>(&commonreplayconfig_)) + sizeof(refreshtime_));
}

GlobalReplayConfig::~GlobalReplayConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.GlobalReplayConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalReplayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commonreplayconfig_;
}

void GlobalReplayConfig::ArenaDtor(void* object) {
  GlobalReplayConfig* _this = reinterpret_cast< GlobalReplayConfig* >(object);
  (void)_this;
}
void GlobalReplayConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalReplayConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalReplayConfig& GlobalReplayConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalReplayConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GlobalReplayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GlobalReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commonreplayconfig_ != nullptr) {
    delete commonreplayconfig_;
  }
  commonreplayconfig_ = nullptr;
  refreshtime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalReplayConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonreplayconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 refreshTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refreshtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalReplayConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GlobalReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
  if (this->has_commonreplayconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonreplayconfig(this), target, stream);
  }

  // int32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_refreshtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GlobalReplayConfig)
  return target;
}

size_t GlobalReplayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GlobalReplayConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
  if (this->has_commonreplayconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonreplayconfig_);
  }

  // int32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refreshtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalReplayConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GlobalReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalReplayConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalReplayConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GlobalReplayConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GlobalReplayConfig)
    MergeFrom(*source);
  }
}

void GlobalReplayConfig::MergeFrom(const GlobalReplayConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GlobalReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commonreplayconfig()) {
    _internal_mutable_commonreplayconfig()->::PlaneWar::CommonReplayConfig::MergeFrom(from._internal_commonreplayconfig());
  }
  if (from.refreshtime() != 0) {
    _internal_set_refreshtime(from._internal_refreshtime());
  }
}

void GlobalReplayConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GlobalReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalReplayConfig::CopyFrom(const GlobalReplayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GlobalReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalReplayConfig::IsInitialized() const {
  return true;
}

void GlobalReplayConfig::InternalSwap(GlobalReplayConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalReplayConfig, refreshtime_)
      + sizeof(GlobalReplayConfig::refreshtime_)
      - PROTOBUF_FIELD_OFFSET(GlobalReplayConfig, commonreplayconfig_)>(
          reinterpret_cast<char*>(&commonreplayconfig_),
          reinterpret_cast<char*>(&other->commonreplayconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalReplayConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PersonalReplayConfig::_Internal {
 public:
  static const ::PlaneWar::CommonReplayConfig& commonreplayconfig(const PersonalReplayConfig* msg);
};

const ::PlaneWar::CommonReplayConfig&
PersonalReplayConfig::_Internal::commonreplayconfig(const PersonalReplayConfig* msg) {
  return *msg->commonreplayconfig_;
}
PersonalReplayConfig::PersonalReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PersonalReplayConfig)
}
PersonalReplayConfig::PersonalReplayConfig(const PersonalReplayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonreplayconfig()) {
    commonreplayconfig_ = new ::PlaneWar::CommonReplayConfig(*from.commonreplayconfig_);
  } else {
    commonreplayconfig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PersonalReplayConfig)
}

void PersonalReplayConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersonalReplayConfig_PlaneWar_2eproto.base);
  commonreplayconfig_ = nullptr;
}

PersonalReplayConfig::~PersonalReplayConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.PersonalReplayConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersonalReplayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commonreplayconfig_;
}

void PersonalReplayConfig::ArenaDtor(void* object) {
  PersonalReplayConfig* _this = reinterpret_cast< PersonalReplayConfig* >(object);
  (void)_this;
}
void PersonalReplayConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersonalReplayConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersonalReplayConfig& PersonalReplayConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersonalReplayConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PersonalReplayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PersonalReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commonreplayconfig_ != nullptr) {
    delete commonreplayconfig_;
  }
  commonreplayconfig_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonalReplayConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonreplayconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersonalReplayConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PersonalReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
  if (this->has_commonreplayconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonreplayconfig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PersonalReplayConfig)
  return target;
}

size_t PersonalReplayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PersonalReplayConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.CommonReplayConfig commonReplayConfig = 1;
  if (this->has_commonreplayconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonreplayconfig_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonalReplayConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PersonalReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonalReplayConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersonalReplayConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PersonalReplayConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PersonalReplayConfig)
    MergeFrom(*source);
  }
}

void PersonalReplayConfig::MergeFrom(const PersonalReplayConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PersonalReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commonreplayconfig()) {
    _internal_mutable_commonreplayconfig()->::PlaneWar::CommonReplayConfig::MergeFrom(from._internal_commonreplayconfig());
  }
}

void PersonalReplayConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PersonalReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalReplayConfig::CopyFrom(const PersonalReplayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PersonalReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalReplayConfig::IsInitialized() const {
  return true;
}

void PersonalReplayConfig::InternalSwap(PersonalReplayConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(commonreplayconfig_, other->commonreplayconfig_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonalReplayConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayConfig::_Internal {
 public:
  static const ::PlaneWar::GlobalReplayConfig& globalreplayconfig(const ReplayConfig* msg);
  static const ::PlaneWar::PersonalReplayConfig& personalreplayconfig(const ReplayConfig* msg);
};

const ::PlaneWar::GlobalReplayConfig&
ReplayConfig::_Internal::globalreplayconfig(const ReplayConfig* msg) {
  return *msg->globalreplayconfig_;
}
const ::PlaneWar::PersonalReplayConfig&
ReplayConfig::_Internal::personalreplayconfig(const ReplayConfig* msg) {
  return *msg->personalreplayconfig_;
}
ReplayConfig::ReplayConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ReplayConfig)
}
ReplayConfig::ReplayConfig(const ReplayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_globalreplayconfig()) {
    globalreplayconfig_ = new ::PlaneWar::GlobalReplayConfig(*from.globalreplayconfig_);
  } else {
    globalreplayconfig_ = nullptr;
  }
  if (from._internal_has_personalreplayconfig()) {
    personalreplayconfig_ = new ::PlaneWar::PersonalReplayConfig(*from.personalreplayconfig_);
  } else {
    personalreplayconfig_ = nullptr;
  }
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ReplayConfig)
}

void ReplayConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayConfig_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&globalreplayconfig_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&globalreplayconfig_)) + sizeof(open_));
}

ReplayConfig::~ReplayConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.ReplayConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete globalreplayconfig_;
  if (this != internal_default_instance()) delete personalreplayconfig_;
}

void ReplayConfig::ArenaDtor(void* object) {
  ReplayConfig* _this = reinterpret_cast< ReplayConfig* >(object);
  (void)_this;
}
void ReplayConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayConfig& ReplayConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ReplayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && globalreplayconfig_ != nullptr) {
    delete globalreplayconfig_;
  }
  globalreplayconfig_ = nullptr;
  if (GetArena() == nullptr && personalreplayconfig_ != nullptr) {
    delete personalreplayconfig_;
  }
  personalreplayconfig_ = nullptr;
  open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.GlobalReplayConfig globalReplayConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalreplayconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PersonalReplayConfig personalReplayConfig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_personalreplayconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ReplayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.GlobalReplayConfig globalReplayConfig = 1;
  if (this->has_globalreplayconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::globalreplayconfig(this), target, stream);
  }

  // .PlaneWar.PersonalReplayConfig personalReplayConfig = 2;
  if (this->has_personalreplayconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::personalreplayconfig(this), target, stream);
  }

  // bool open = 3;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ReplayConfig)
  return target;
}

size_t ReplayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ReplayConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.GlobalReplayConfig globalReplayConfig = 1;
  if (this->has_globalreplayconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *globalreplayconfig_);
  }

  // .PlaneWar.PersonalReplayConfig personalReplayConfig = 2;
  if (this->has_personalreplayconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *personalreplayconfig_);
  }

  // bool open = 3;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ReplayConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ReplayConfig)
    MergeFrom(*source);
  }
}

void ReplayConfig::MergeFrom(const ReplayConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ReplayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_globalreplayconfig()) {
    _internal_mutable_globalreplayconfig()->::PlaneWar::GlobalReplayConfig::MergeFrom(from._internal_globalreplayconfig());
  }
  if (from.has_personalreplayconfig()) {
    _internal_mutable_personalreplayconfig()->::PlaneWar::PersonalReplayConfig::MergeFrom(from._internal_personalreplayconfig());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void ReplayConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayConfig::CopyFrom(const ReplayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ReplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayConfig::IsInitialized() const {
  return true;
}

void ReplayConfig::InternalSwap(ReplayConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayConfig, open_)
      + sizeof(ReplayConfig::open_)
      - PROTOBUF_FIELD_OFFSET(ReplayConfig, globalreplayconfig_)>(
          reinterpret_cast<char*>(&globalreplayconfig_),
          reinterpret_cast<char*>(&other->globalreplayconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnMonsterInfo::_Internal {
 public:
};

ConnMonsterInfo::ConnMonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  connmonsterlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ConnMonsterInfo)
}
ConnMonsterInfo::ConnMonsterInfo(const ConnMonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connmonsterlist_(from.connmonsterlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sourceuid_, &from.sourceuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&sourceuid_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ConnMonsterInfo)
}

void ConnMonsterInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&sourceuid_)) + sizeof(ratio_));
}

ConnMonsterInfo::~ConnMonsterInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.ConnMonsterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnMonsterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnMonsterInfo::ArenaDtor(void* object) {
  ConnMonsterInfo* _this = reinterpret_cast< ConnMonsterInfo* >(object);
  (void)_this;
}
void ConnMonsterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnMonsterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnMonsterInfo& ConnMonsterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnMonsterInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ConnMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ConnMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connmonsterlist_.Clear();
  ::memset(&sourceuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&sourceuid_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnMonsterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 connMonsterList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_connmonsterlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_connmonsterlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnMonsterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ConnMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourceuid(), target);
  }

  // int32 originUID = 2;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_originuid(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // repeated int32 connMonsterList = 4;
  {
    int byte_size = _connmonsterlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_connmonsterlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ConnMonsterInfo)
  return target;
}

size_t ConnMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ConnMonsterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 connMonsterList = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->connmonsterlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _connmonsterlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 originUID = 2;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnMonsterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ConnMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnMonsterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnMonsterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ConnMonsterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ConnMonsterInfo)
    MergeFrom(*source);
  }
}

void ConnMonsterInfo::MergeFrom(const ConnMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ConnMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connmonsterlist_.MergeFrom(from.connmonsterlist_);
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void ConnMonsterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ConnMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMonsterInfo::CopyFrom(const ConnMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ConnMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMonsterInfo::IsInitialized() const {
  return true;
}

void ConnMonsterInfo::InternalSwap(ConnMonsterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connmonsterlist_.InternalSwap(&other->connmonsterlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnMonsterInfo, ratio_)
      + sizeof(ConnMonsterInfo::ratio_)
      - PROTOBUF_FIELD_OFFSET(ConnMonsterInfo, sourceuid_)>(
          reinterpret_cast<char*>(&sourceuid_),
          reinterpret_cast<char*>(&other->sourceuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnMonsterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHit::_Internal {
 public:
};

CSHit::CSHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSHit)
}
CSHit::CSHit(const CSHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monsteruid_, &from.monsteruid_,
    static_cast<size_t>(reinterpret_cast<char*>(&deductedmoney_) -
    reinterpret_cast<char*>(&monsteruid_)) + sizeof(deductedmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSHit)
}

void CSHit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monsteruid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&deductedmoney_) -
      reinterpret_cast<char*>(&monsteruid_)) + sizeof(deductedmoney_));
}

CSHit::~CSHit() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHit::ArenaDtor(void* object) {
  CSHit* _this = reinterpret_cast< CSHit* >(object);
  (void)_this;
}
void CSHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHit& CSHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHit_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSHit::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monsteruid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deductedmoney_) -
      reinterpret_cast<char*>(&monsteruid_)) + sizeof(deductedmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 monsterUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 generation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deductedMoney = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          deductedmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsteruid(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // int32 bulletType = 3;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bullettype(), target);
  }

  // int32 sourceUID = 4;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sourceuid(), target);
  }

  // int32 generation = 5;
  if (this->generation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_generation(), target);
  }

  // int32 deductedMoney = 6;
  if (this->deductedmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_deductedmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSHit)
  return target;
}

size_t CSHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 bulletType = 3;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 sourceUID = 4;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 generation = 5;
  if (this->generation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_generation());
  }

  // int32 deductedMoney = 6;
  if (this->deductedmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deductedmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSHit)
    MergeFrom(*source);
  }
}

void CSHit::MergeFrom(const CSHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.generation() != 0) {
    _internal_set_generation(from._internal_generation());
  }
  if (from.deductedmoney() != 0) {
    _internal_set_deductedmoney(from._internal_deductedmoney());
  }
}

void CSHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHit::CopyFrom(const CSHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHit::IsInitialized() const {
  return true;
}

void CSHit::InternalSwap(CSHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHit, deductedmoney_)
      + sizeof(CSHit::deductedmoney_)
      - PROTOBUF_FIELD_OFFSET(CSHit, monsteruid_)>(
          reinterpret_cast<char*>(&monsteruid_),
          reinterpret_cast<char*>(&other->monsteruid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHit::_Internal {
 public:
  static const ::PlaneWar::DropPoker& droppoker(const SCHit* msg);
  static const ::PlaneWar::Roulette& roulette(const SCHit* msg);
  static const ::PlaneWar::WeaponInfo& weaponinfo(const SCHit* msg);
  static const ::PlaneWar::GunInfo& guninfo(const SCHit* msg);
  static const ::PlaneWar::ToadInfo& toadinfo(const SCHit* msg);
  static const ::PlaneWar::FlameInfo& flameinfo(const SCHit* msg);
  static const ::PlaneWar::BeeInfo& beeinfo(const SCHit* msg);
  static const ::PlaneWar::ConnMonsterInfo& connmonsterinfo(const SCHit* msg);
  static const ::PlaneWar::DiceInfo& diceinfo(const SCHit* msg);
};

const ::PlaneWar::DropPoker&
SCHit::_Internal::droppoker(const SCHit* msg) {
  return *msg->droppoker_;
}
const ::PlaneWar::Roulette&
SCHit::_Internal::roulette(const SCHit* msg) {
  return *msg->roulette_;
}
const ::PlaneWar::WeaponInfo&
SCHit::_Internal::weaponinfo(const SCHit* msg) {
  return *msg->weaponinfo_;
}
const ::PlaneWar::GunInfo&
SCHit::_Internal::guninfo(const SCHit* msg) {
  return *msg->guninfo_;
}
const ::PlaneWar::ToadInfo&
SCHit::_Internal::toadinfo(const SCHit* msg) {
  return *msg->toadinfo_;
}
const ::PlaneWar::FlameInfo&
SCHit::_Internal::flameinfo(const SCHit* msg) {
  return *msg->flameinfo_;
}
const ::PlaneWar::BeeInfo&
SCHit::_Internal::beeinfo(const SCHit* msg) {
  return *msg->beeinfo_;
}
const ::PlaneWar::ConnMonsterInfo&
SCHit::_Internal::connmonsterinfo(const SCHit* msg) {
  return *msg->connmonsterinfo_;
}
const ::PlaneWar::DiceInfo&
SCHit::_Internal::diceinfo(const SCHit* msg) {
  return *msg->diceinfo_;
}
SCHit::SCHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multiplelist_(arena),
  dropbufflist_(arena),
  triggerbullet_(arena),
  treasurelist_(arena),
  fortunewheellist_(arena),
  speceffect_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCHit)
}
SCHit::SCHit(const SCHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multiplelist_(from.multiplelist_),
      dropbufflist_(from.dropbufflist_),
      triggerbullet_(from.triggerbullet_),
      treasurelist_(from.treasurelist_),
      fortunewheellist_(from.fortunewheellist_),
      speceffect_(from.speceffect_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_droppoker()) {
    droppoker_ = new ::PlaneWar::DropPoker(*from.droppoker_);
  } else {
    droppoker_ = nullptr;
  }
  if (from._internal_has_roulette()) {
    roulette_ = new ::PlaneWar::Roulette(*from.roulette_);
  } else {
    roulette_ = nullptr;
  }
  if (from._internal_has_weaponinfo()) {
    weaponinfo_ = new ::PlaneWar::WeaponInfo(*from.weaponinfo_);
  } else {
    weaponinfo_ = nullptr;
  }
  if (from._internal_has_guninfo()) {
    guninfo_ = new ::PlaneWar::GunInfo(*from.guninfo_);
  } else {
    guninfo_ = nullptr;
  }
  if (from._internal_has_toadinfo()) {
    toadinfo_ = new ::PlaneWar::ToadInfo(*from.toadinfo_);
  } else {
    toadinfo_ = nullptr;
  }
  if (from._internal_has_flameinfo()) {
    flameinfo_ = new ::PlaneWar::FlameInfo(*from.flameinfo_);
  } else {
    flameinfo_ = nullptr;
  }
  if (from._internal_has_beeinfo()) {
    beeinfo_ = new ::PlaneWar::BeeInfo(*from.beeinfo_);
  } else {
    beeinfo_ = nullptr;
  }
  if (from._internal_has_connmonsterinfo()) {
    connmonsterinfo_ = new ::PlaneWar::ConnMonsterInfo(*from.connmonsterinfo_);
  } else {
    connmonsterinfo_ = nullptr;
  }
  if (from._internal_has_diceinfo()) {
    diceinfo_ = new ::PlaneWar::DiceInfo(*from.diceinfo_);
  } else {
    diceinfo_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(weaponid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCHit)
}

void SCHit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHit_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&droppoker_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&droppoker_)) + sizeof(weaponid_));
}

SCHit::~SCHit() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete droppoker_;
  if (this != internal_default_instance()) delete roulette_;
  if (this != internal_default_instance()) delete weaponinfo_;
  if (this != internal_default_instance()) delete guninfo_;
  if (this != internal_default_instance()) delete toadinfo_;
  if (this != internal_default_instance()) delete flameinfo_;
  if (this != internal_default_instance()) delete beeinfo_;
  if (this != internal_default_instance()) delete connmonsterinfo_;
  if (this != internal_default_instance()) delete diceinfo_;
}

void SCHit::ArenaDtor(void* object) {
  SCHit* _this = reinterpret_cast< SCHit* >(object);
  (void)_this;
}
void SCHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHit& SCHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHit_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCHit::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiplelist_.Clear();
  dropbufflist_.Clear();
  triggerbullet_.Clear();
  treasurelist_.Clear();
  fortunewheellist_.Clear();
  speceffect_.Clear();
  if (GetArena() == nullptr && droppoker_ != nullptr) {
    delete droppoker_;
  }
  droppoker_ = nullptr;
  if (GetArena() == nullptr && roulette_ != nullptr) {
    delete roulette_;
  }
  roulette_ = nullptr;
  if (GetArena() == nullptr && weaponinfo_ != nullptr) {
    delete weaponinfo_;
  }
  weaponinfo_ = nullptr;
  if (GetArena() == nullptr && guninfo_ != nullptr) {
    delete guninfo_;
  }
  guninfo_ = nullptr;
  if (GetArena() == nullptr && toadinfo_ != nullptr) {
    delete toadinfo_;
  }
  toadinfo_ = nullptr;
  if (GetArena() == nullptr && flameinfo_ != nullptr) {
    delete flameinfo_;
  }
  flameinfo_ = nullptr;
  if (GetArena() == nullptr && beeinfo_ != nullptr) {
    delete beeinfo_;
  }
  beeinfo_ = nullptr;
  if (GetArena() == nullptr && connmonsterinfo_ != nullptr) {
    delete connmonsterinfo_;
  }
  connmonsterinfo_ = nullptr;
  if (GetArena() == nullptr && diceinfo_ != nullptr) {
    delete diceinfo_;
  }
  diceinfo_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(weaponid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isCaptured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iscaptured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monsterUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 baseValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          basevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 multipleList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_multiplelist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_multiplelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.BuffInfo dropBuffList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dropbufflist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.TriggerBullet triggerBullet = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggerbullet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.DropPoker dropPoker = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_droppoker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Roulette roulette = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_roulette(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dropCard = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          dropcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dropCall = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          dropcall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dropWeaponPiece = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          dropweaponpiece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.TreasureInfo treasureList = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_treasurelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 weaponID = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponInfo weaponInfo = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GunInfo gunInfo = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_guninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.FortuneWheelInfo fortuneWheelList = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fortunewheellist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ToadInfo toadInfo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_toadinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.FlameInfo flameInfo = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_flameinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.BeeInfo beeInfo = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_beeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ConnMonsterInfo connMonsterInfo = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_connmonsterinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.SpecEffect specEffect = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_speceffect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.DiceInfo diceInfo = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_diceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isProp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          isprop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCaptured = 1;
  if (this->iscaptured() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iscaptured(), target);
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair(), target);
  }

  // int32 monsterUID = 3;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_monsteruid(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  // int32 bulletType = 5;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bullettype(), target);
  }

  // int32 earn = 6;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_earn(), target);
  }

  // int64 score = 7;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_score(), target);
  }

  // int32 baseValue = 8;
  if (this->basevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_basevalue(), target);
  }

  // repeated int32 multipleList = 9;
  {
    int byte_size = _multiplelist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_multiplelist(), byte_size, target);
    }
  }

  // repeated .PlaneWar.BuffInfo dropBuffList = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dropbufflist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_dropbufflist(i), target, stream);
  }

  // repeated .PlaneWar.TriggerBullet triggerBullet = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_triggerbullet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_triggerbullet(i), target, stream);
  }

  // .PlaneWar.DropPoker dropPoker = 12;
  if (this->has_droppoker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::droppoker(this), target, stream);
  }

  // .PlaneWar.Roulette roulette = 13;
  if (this->has_roulette()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::roulette(this), target, stream);
  }

  // int32 stage = 14;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_stage(), target);
  }

  // int32 dropCard = 15;
  if (this->dropcard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_dropcard(), target);
  }

  // int32 originUID = 16;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_originuid(), target);
  }

  // int32 dropCall = 17;
  if (this->dropcall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_dropcall(), target);
  }

  // int32 dropWeaponPiece = 18;
  if (this->dropweaponpiece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_dropweaponpiece(), target);
  }

  // repeated .PlaneWar.TreasureInfo treasureList = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_treasurelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_treasurelist(i), target, stream);
  }

  // int32 weaponID = 20;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_weaponid(), target);
  }

  // .PlaneWar.WeaponInfo weaponInfo = 21;
  if (this->has_weaponinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::weaponinfo(this), target, stream);
  }

  // .PlaneWar.GunInfo gunInfo = 22;
  if (this->has_guninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::guninfo(this), target, stream);
  }

  // repeated .PlaneWar.FortuneWheelInfo fortuneWheelList = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fortunewheellist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_fortunewheellist(i), target, stream);
  }

  // .PlaneWar.ToadInfo toadInfo = 24;
  if (this->has_toadinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::toadinfo(this), target, stream);
  }

  // .PlaneWar.FlameInfo flameInfo = 25;
  if (this->has_flameinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::flameinfo(this), target, stream);
  }

  // .PlaneWar.BeeInfo beeInfo = 26;
  if (this->has_beeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::beeinfo(this), target, stream);
  }

  // .PlaneWar.ConnMonsterInfo connMonsterInfo = 27;
  if (this->has_connmonsterinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::connmonsterinfo(this), target, stream);
  }

  // repeated .PlaneWar.SpecEffect specEffect = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speceffect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_speceffect(i), target, stream);
  }

  // .PlaneWar.DiceInfo diceInfo = 29;
  if (this->has_diceinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::diceinfo(this), target, stream);
  }

  // bool isProp = 30;
  if (this->isprop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_isprop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCHit)
  return target;
}

size_t SCHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 multipleList = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->multiplelist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _multiplelist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .PlaneWar.BuffInfo dropBuffList = 10;
  total_size += 1UL * this->_internal_dropbufflist_size();
  for (const auto& msg : this->dropbufflist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.TriggerBullet triggerBullet = 11;
  total_size += 1UL * this->_internal_triggerbullet_size();
  for (const auto& msg : this->triggerbullet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.TreasureInfo treasureList = 19;
  total_size += 2UL * this->_internal_treasurelist_size();
  for (const auto& msg : this->treasurelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.FortuneWheelInfo fortuneWheelList = 23;
  total_size += 2UL * this->_internal_fortunewheellist_size();
  for (const auto& msg : this->fortunewheellist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.SpecEffect specEffect = 28;
  total_size += 2UL * this->_internal_speceffect_size();
  for (const auto& msg : this->speceffect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.DropPoker dropPoker = 12;
  if (this->has_droppoker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *droppoker_);
  }

  // .PlaneWar.Roulette roulette = 13;
  if (this->has_roulette()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roulette_);
  }

  // .PlaneWar.WeaponInfo weaponInfo = 21;
  if (this->has_weaponinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weaponinfo_);
  }

  // .PlaneWar.GunInfo gunInfo = 22;
  if (this->has_guninfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guninfo_);
  }

  // .PlaneWar.ToadInfo toadInfo = 24;
  if (this->has_toadinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *toadinfo_);
  }

  // .PlaneWar.FlameInfo flameInfo = 25;
  if (this->has_flameinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flameinfo_);
  }

  // .PlaneWar.BeeInfo beeInfo = 26;
  if (this->has_beeinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beeinfo_);
  }

  // .PlaneWar.ConnMonsterInfo connMonsterInfo = 27;
  if (this->has_connmonsterinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connmonsterinfo_);
  }

  // .PlaneWar.DiceInfo diceInfo = 29;
  if (this->has_diceinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diceinfo_);
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 monsterUID = 3;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 bulletType = 5;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int64 score = 7;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 earn = 6;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // int32 baseValue = 8;
  if (this->basevalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_basevalue());
  }

  // int32 stage = 14;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 dropCard = 15;
  if (this->dropcard() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropcard());
  }

  // bool isCaptured = 1;
  if (this->iscaptured() != 0) {
    total_size += 1 + 1;
  }

  // bool isProp = 30;
  if (this->isprop() != 0) {
    total_size += 2 + 1;
  }

  // int32 originUID = 16;
  if (this->originuid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 dropCall = 17;
  if (this->dropcall() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropcall());
  }

  // int32 dropWeaponPiece = 18;
  if (this->dropweaponpiece() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropweaponpiece());
  }

  // int32 weaponID = 20;
  if (this->weaponid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCHit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCHit)
    MergeFrom(*source);
  }
}

void SCHit::MergeFrom(const SCHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiplelist_.MergeFrom(from.multiplelist_);
  dropbufflist_.MergeFrom(from.dropbufflist_);
  triggerbullet_.MergeFrom(from.triggerbullet_);
  treasurelist_.MergeFrom(from.treasurelist_);
  fortunewheellist_.MergeFrom(from.fortunewheellist_);
  speceffect_.MergeFrom(from.speceffect_);
  if (from.has_droppoker()) {
    _internal_mutable_droppoker()->::PlaneWar::DropPoker::MergeFrom(from._internal_droppoker());
  }
  if (from.has_roulette()) {
    _internal_mutable_roulette()->::PlaneWar::Roulette::MergeFrom(from._internal_roulette());
  }
  if (from.has_weaponinfo()) {
    _internal_mutable_weaponinfo()->::PlaneWar::WeaponInfo::MergeFrom(from._internal_weaponinfo());
  }
  if (from.has_guninfo()) {
    _internal_mutable_guninfo()->::PlaneWar::GunInfo::MergeFrom(from._internal_guninfo());
  }
  if (from.has_toadinfo()) {
    _internal_mutable_toadinfo()->::PlaneWar::ToadInfo::MergeFrom(from._internal_toadinfo());
  }
  if (from.has_flameinfo()) {
    _internal_mutable_flameinfo()->::PlaneWar::FlameInfo::MergeFrom(from._internal_flameinfo());
  }
  if (from.has_beeinfo()) {
    _internal_mutable_beeinfo()->::PlaneWar::BeeInfo::MergeFrom(from._internal_beeinfo());
  }
  if (from.has_connmonsterinfo()) {
    _internal_mutable_connmonsterinfo()->::PlaneWar::ConnMonsterInfo::MergeFrom(from._internal_connmonsterinfo());
  }
  if (from.has_diceinfo()) {
    _internal_mutable_diceinfo()->::PlaneWar::DiceInfo::MergeFrom(from._internal_diceinfo());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.basevalue() != 0) {
    _internal_set_basevalue(from._internal_basevalue());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.dropcard() != 0) {
    _internal_set_dropcard(from._internal_dropcard());
  }
  if (from.iscaptured() != 0) {
    _internal_set_iscaptured(from._internal_iscaptured());
  }
  if (from.isprop() != 0) {
    _internal_set_isprop(from._internal_isprop());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.dropcall() != 0) {
    _internal_set_dropcall(from._internal_dropcall());
  }
  if (from.dropweaponpiece() != 0) {
    _internal_set_dropweaponpiece(from._internal_dropweaponpiece());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
}

void SCHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHit::CopyFrom(const SCHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHit::IsInitialized() const {
  return true;
}

void SCHit::InternalSwap(SCHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multiplelist_.InternalSwap(&other->multiplelist_);
  dropbufflist_.InternalSwap(&other->dropbufflist_);
  triggerbullet_.InternalSwap(&other->triggerbullet_);
  treasurelist_.InternalSwap(&other->treasurelist_);
  fortunewheellist_.InternalSwap(&other->fortunewheellist_);
  speceffect_.InternalSwap(&other->speceffect_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHit, weaponid_)
      + sizeof(SCHit::weaponid_)
      - PROTOBUF_FIELD_OFFSET(SCHit, droppoker_)>(
          reinterpret_cast<char*>(&droppoker_),
          reinterpret_cast<char*>(&other->droppoker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMonsterDestory::_Internal {
 public:
};

CSMonsterDestory::CSMonsterDestory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSMonsterDestory)
}
CSMonsterDestory::CSMonsterDestory(const CSMonsterDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  monsteruid_ = from.monsteruid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSMonsterDestory)
}

void CSMonsterDestory::SharedCtor() {
  monsteruid_ = 0;
}

CSMonsterDestory::~CSMonsterDestory() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSMonsterDestory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMonsterDestory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMonsterDestory::ArenaDtor(void* object) {
  CSMonsterDestory* _this = reinterpret_cast< CSMonsterDestory* >(object);
  (void)_this;
}
void CSMonsterDestory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMonsterDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMonsterDestory& CSMonsterDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMonsterDestory_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSMonsterDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSMonsterDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monsteruid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMonsterDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 monsterUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMonsterDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSMonsterDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsteruid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSMonsterDestory)
  return target;
}

size_t CSMonsterDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSMonsterDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMonsterDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSMonsterDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMonsterDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMonsterDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSMonsterDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSMonsterDestory)
    MergeFrom(*source);
  }
}

void CSMonsterDestory::MergeFrom(const CSMonsterDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSMonsterDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
}

void CSMonsterDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSMonsterDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterDestory::CopyFrom(const CSMonsterDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSMonsterDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterDestory::IsInitialized() const {
  return true;
}

void CSMonsterDestory::InternalSwap(CSMonsterDestory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(monsteruid_, other->monsteruid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMonsterDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMonsterDestory::_Internal {
 public:
};

SCMonsterDestory::SCMonsterDestory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMonsterDestory)
}
SCMonsterDestory::SCMonsterDestory(const SCMonsterDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMonsterDestory)
}

void SCMonsterDestory::SharedCtor() {
}

SCMonsterDestory::~SCMonsterDestory() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMonsterDestory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMonsterDestory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMonsterDestory::ArenaDtor(void* object) {
  SCMonsterDestory* _this = reinterpret_cast< SCMonsterDestory* >(object);
  (void)_this;
}
void SCMonsterDestory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMonsterDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMonsterDestory& SCMonsterDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMonsterDestory_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMonsterDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMonsterDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMonsterDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMonsterDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMonsterDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMonsterDestory)
  return target;
}

size_t SCMonsterDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMonsterDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMonsterDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMonsterDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMonsterDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMonsterDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMonsterDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMonsterDestory)
    MergeFrom(*source);
  }
}

void SCMonsterDestory::MergeFrom(const SCMonsterDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMonsterDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCMonsterDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMonsterDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMonsterDestory::CopyFrom(const SCMonsterDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMonsterDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMonsterDestory::IsInitialized() const {
  return true;
}

void SCMonsterDestory::InternalSwap(SCMonsterDestory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMonsterDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTransform::_Internal {
 public:
};

CSTransform::CSTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSTransform)
}
CSTransform::CSTransform(const CSTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  form_ = from.form_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSTransform)
}

void CSTransform::SharedCtor() {
  form_ = 0;
}

CSTransform::~CSTransform() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTransform::ArenaDtor(void* object) {
  CSTransform* _this = reinterpret_cast< CSTransform* >(object);
  (void)_this;
}
void CSTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTransform& CSTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTransform_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  form_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 form = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          form_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 form = 1;
  if (this->form() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_form(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSTransform)
  return target;
}

size_t CSTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 form = 1;
  if (this->form() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_form());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSTransform)
    MergeFrom(*source);
  }
}

void CSTransform::MergeFrom(const CSTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.form() != 0) {
    _internal_set_form(from._internal_form());
  }
}

void CSTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTransform::CopyFrom(const CSTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTransform::IsInitialized() const {
  return true;
}

void CSTransform::InternalSwap(CSTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(form_, other->form_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTransform::_Internal {
 public:
};

SCTransform::SCTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCTransform)
}
SCTransform::SCTransform(const SCTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&form_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(form_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCTransform)
}

void SCTransform::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&form_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(form_));
}

SCTransform::~SCTransform() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTransform::ArenaDtor(void* object) {
  SCTransform* _this = reinterpret_cast< SCTransform* >(object);
  (void)_this;
}
void SCTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTransform& SCTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTransform_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&form_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(form_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 form = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          form_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 form = 2;
  if (this->form() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_form(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCTransform)
  return target;
}

size_t SCTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 form = 2;
  if (this->form() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_form());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCTransform)
    MergeFrom(*source);
  }
}

void SCTransform::MergeFrom(const SCTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.form() != 0) {
    _internal_set_form(from._internal_form());
  }
}

void SCTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTransform::CopyFrom(const SCTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTransform::IsInitialized() const {
  return true;
}

void SCTransform::InternalSwap(SCTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTransform, form_)
      + sizeof(SCTransform::form_)
      - PROTOBUF_FIELD_OFFSET(SCTransform, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPlanePosSync::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const CSPlanePosSync* msg);
};

const ::PlaneWar::Pos&
CSPlanePosSync::_Internal::pos(const CSPlanePosSync* msg) {
  return *msg->pos_;
}
CSPlanePosSync::CSPlanePosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSPlanePosSync)
}
CSPlanePosSync::CSPlanePosSync(const CSPlanePosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSPlanePosSync)
}

void CSPlanePosSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSPlanePosSync_PlaneWar_2eproto.base);
  pos_ = nullptr;
}

CSPlanePosSync::~CSPlanePosSync() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSPlanePosSync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPlanePosSync::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void CSPlanePosSync::ArenaDtor(void* object) {
  CSPlanePosSync* _this = reinterpret_cast< CSPlanePosSync* >(object);
  (void)_this;
}
void CSPlanePosSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPlanePosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPlanePosSync& CSPlanePosSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPlanePosSync_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSPlanePosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSPlanePosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPlanePosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPlanePosSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSPlanePosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSPlanePosSync)
  return target;
}

size_t CSPlanePosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSPlanePosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPlanePosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSPlanePosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPlanePosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPlanePosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSPlanePosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSPlanePosSync)
    MergeFrom(*source);
  }
}

void CSPlanePosSync::MergeFrom(const CSPlanePosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSPlanePosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
}

void CSPlanePosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSPlanePosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlanePosSync::CopyFrom(const CSPlanePosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSPlanePosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlanePosSync::IsInitialized() const {
  return true;
}

void CSPlanePosSync::InternalSwap(CSPlanePosSync* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPlanePosSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPlanePosSync::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const SCPlanePosSync* msg);
};

const ::PlaneWar::Pos&
SCPlanePosSync::_Internal::pos(const SCPlanePosSync* msg) {
  return *msg->pos_;
}
SCPlanePosSync::SCPlanePosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPlanePosSync)
}
SCPlanePosSync::SCPlanePosSync(const SCPlanePosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  chair_ = from.chair_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPlanePosSync)
}

void SCPlanePosSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPlanePosSync_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(chair_));
}

SCPlanePosSync::~SCPlanePosSync() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPlanePosSync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPlanePosSync::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void SCPlanePosSync::ArenaDtor(void* object) {
  SCPlanePosSync* _this = reinterpret_cast< SCPlanePosSync* >(object);
  (void)_this;
}
void SCPlanePosSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPlanePosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPlanePosSync& SCPlanePosSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPlanePosSync_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPlanePosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPlanePosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  chair_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPlanePosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPlanePosSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPlanePosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // .PlaneWar.Pos pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPlanePosSync)
  return target;
}

size_t SCPlanePosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPlanePosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPlanePosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPlanePosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPlanePosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPlanePosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPlanePosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPlanePosSync)
    MergeFrom(*source);
  }
}

void SCPlanePosSync::MergeFrom(const SCPlanePosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPlanePosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCPlanePosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPlanePosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPlanePosSync::CopyFrom(const SCPlanePosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPlanePosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPlanePosSync::IsInitialized() const {
  return true;
}

void SCPlanePosSync::InternalSwap(SCPlanePosSync* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPlanePosSync, chair_)
      + sizeof(SCPlanePosSync::chair_)
      - PROTOBUF_FIELD_OFFSET(SCPlanePosSync, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPlanePosSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCStateEnd::_Internal {
 public:
};

SCStateEnd::SCStateEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCStateEnd)
}
SCStateEnd::SCStateEnd(const SCStateEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCStateEnd)
}

void SCStateEnd::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
}

SCStateEnd::~SCStateEnd() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCStateEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCStateEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCStateEnd::ArenaDtor(void* object) {
  SCStateEnd* _this = reinterpret_cast< SCStateEnd* >(object);
  (void)_this;
}
void SCStateEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCStateEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCStateEnd& SCStateEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCStateEnd_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCStateEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCStateEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCStateEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCStateEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCStateEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCStateEnd)
  return target;
}

size_t SCStateEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCStateEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCStateEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCStateEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const SCStateEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCStateEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCStateEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCStateEnd)
    MergeFrom(*source);
  }
}

void SCStateEnd::MergeFrom(const SCStateEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCStateEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void SCStateEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCStateEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCStateEnd::CopyFrom(const SCStateEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCStateEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCStateEnd::IsInitialized() const {
  return true;
}

void SCStateEnd::InternalSwap(SCStateEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCStateEnd, sourceuid_)
      + sizeof(SCStateEnd::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(SCStateEnd, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCStateEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSModRatio::_Internal {
 public:
};

CSModRatio::CSModRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSModRatio)
}
CSModRatio::CSModRatio(const CSModRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modlevel_ = from.modlevel_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSModRatio)
}

void CSModRatio::SharedCtor() {
  modlevel_ = 0;
}

CSModRatio::~CSModRatio() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSModRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSModRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSModRatio::ArenaDtor(void* object) {
  CSModRatio* _this = reinterpret_cast< CSModRatio* >(object);
  (void)_this;
}
void CSModRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSModRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSModRatio& CSModRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSModRatio_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSModRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSModRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modlevel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSModRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 modLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSModRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSModRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modLevel = 1;
  if (this->modlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSModRatio)
  return target;
}

size_t CSModRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSModRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 modLevel = 1;
  if (this->modlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modlevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSModRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSModRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const CSModRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSModRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSModRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSModRatio)
    MergeFrom(*source);
  }
}

void CSModRatio::MergeFrom(const CSModRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSModRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modlevel() != 0) {
    _internal_set_modlevel(from._internal_modlevel());
  }
}

void CSModRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSModRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSModRatio::CopyFrom(const CSModRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSModRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSModRatio::IsInitialized() const {
  return true;
}

void CSModRatio::InternalSwap(CSModRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(modlevel_, other->modlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSModRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCModRatio::_Internal {
 public:
};

SCModRatio::SCModRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCModRatio)
}
SCModRatio::SCModRatio(const SCModRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&isunlock_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(isunlock_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCModRatio)
}

void SCModRatio::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isunlock_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(isunlock_));
}

SCModRatio::~SCModRatio() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCModRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCModRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCModRatio::ArenaDtor(void* object) {
  SCModRatio* _this = reinterpret_cast< SCModRatio* >(object);
  (void)_this;
}
void SCModRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCModRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCModRatio& SCModRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCModRatio_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCModRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCModRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isunlock_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(isunlock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCModRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isUnlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isunlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCModRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCModRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // bool isUnlock = 3;
  if (this->isunlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isunlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCModRatio)
  return target;
}

size_t SCModRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCModRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // bool isUnlock = 3;
  if (this->isunlock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCModRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCModRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const SCModRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCModRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCModRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCModRatio)
    MergeFrom(*source);
  }
}

void SCModRatio::MergeFrom(const SCModRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCModRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.isunlock() != 0) {
    _internal_set_isunlock(from._internal_isunlock());
  }
}

void SCModRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCModRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCModRatio::CopyFrom(const SCModRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCModRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCModRatio::IsInitialized() const {
  return true;
}

void SCModRatio::InternalSwap(SCModRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCModRatio, isunlock_)
      + sizeof(SCModRatio::isunlock_)
      - PROTOBUF_FIELD_OFFSET(SCModRatio, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCModRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGainNotify::_Internal {
 public:
  static const ::PlaneWar::Decimal& curredpacket(const SCGainNotify* msg);
};

const ::PlaneWar::Decimal&
SCGainNotify::_Internal::curredpacket(const SCGainNotify* msg) {
  return *msg->curredpacket_;
}
SCGainNotify::SCGainNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGainNotify)
}
SCGainNotify::SCGainNotify(const SCGainNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curredpacket()) {
    curredpacket_ = new ::PlaneWar::Decimal(*from.curredpacket_);
  } else {
    curredpacket_ = nullptr;
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&curdiamond_) -
    reinterpret_cast<char*>(&source_)) + sizeof(curdiamond_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGainNotify)
}

void SCGainNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGainNotify_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&curredpacket_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curdiamond_) -
      reinterpret_cast<char*>(&curredpacket_)) + sizeof(curdiamond_));
}

SCGainNotify::~SCGainNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGainNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGainNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curredpacket_;
}

void SCGainNotify::ArenaDtor(void* object) {
  SCGainNotify* _this = reinterpret_cast< SCGainNotify* >(object);
  (void)_this;
}
void SCGainNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGainNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGainNotify& SCGainNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGainNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGainNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGainNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && curredpacket_ != nullptr) {
    delete curredpacket_;
  }
  curredpacket_ = nullptr;
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curdiamond_) -
      reinterpret_cast<char*>(&source_)) + sizeof(curdiamond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGainNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curTicket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          curticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 changeTicket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          changeticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 changeDiamond = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          changediamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curDiamond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          curdiamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Decimal curRedPacket = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_curredpacket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGainNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGainNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 source = 1;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source(), target);
  }

  // int32 curMoney = 2;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curmoney(), target);
  }

  // int32 gain = 3;
  if (this->gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gain(), target);
  }

  // int32 curTicket = 4;
  if (this->curticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_curticket(), target);
  }

  // int32 changeTicket = 5;
  if (this->changeticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_changeticket(), target);
  }

  // int32 changeDiamond = 6;
  if (this->changediamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_changediamond(), target);
  }

  // int32 curDiamond = 7;
  if (this->curdiamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_curdiamond(), target);
  }

  // .PlaneWar.Decimal curRedPacket = 8;
  if (this->has_curredpacket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::curredpacket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGainNotify)
  return target;
}

size_t SCGainNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGainNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Decimal curRedPacket = 8;
  if (this->has_curredpacket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curredpacket_);
  }

  // int32 source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source());
  }

  // int32 curMoney = 2;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curmoney());
  }

  // int32 gain = 3;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain());
  }

  // int32 curTicket = 4;
  if (this->curticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curticket());
  }

  // int32 changeTicket = 5;
  if (this->changeticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changeticket());
  }

  // int32 changeDiamond = 6;
  if (this->changediamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changediamond());
  }

  // int32 curDiamond = 7;
  if (this->curdiamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curdiamond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGainNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGainNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGainNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGainNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGainNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGainNotify)
    MergeFrom(*source);
  }
}

void SCGainNotify::MergeFrom(const SCGainNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGainNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_curredpacket()) {
    _internal_mutable_curredpacket()->::PlaneWar::Decimal::MergeFrom(from._internal_curredpacket());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
  if (from.gain() != 0) {
    _internal_set_gain(from._internal_gain());
  }
  if (from.curticket() != 0) {
    _internal_set_curticket(from._internal_curticket());
  }
  if (from.changeticket() != 0) {
    _internal_set_changeticket(from._internal_changeticket());
  }
  if (from.changediamond() != 0) {
    _internal_set_changediamond(from._internal_changediamond());
  }
  if (from.curdiamond() != 0) {
    _internal_set_curdiamond(from._internal_curdiamond());
  }
}

void SCGainNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGainNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGainNotify::CopyFrom(const SCGainNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGainNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGainNotify::IsInitialized() const {
  return true;
}

void SCGainNotify::InternalSwap(SCGainNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGainNotify, curdiamond_)
      + sizeof(SCGainNotify::curdiamond_)
      - PROTOBUF_FIELD_OFFSET(SCGainNotify, curredpacket_)>(
          reinterpret_cast<char*>(&curredpacket_),
          reinterpret_cast<char*>(&other->curredpacket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGainNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGainSettle::_Internal {
 public:
};

SCGainSettle::SCGainSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGainSettle)
}
SCGainSettle::SCGainSettle(const SCGainSettle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGainSettle)
}

void SCGainSettle::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(ratio_));
}

SCGainSettle::~SCGainSettle() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGainSettle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGainSettle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGainSettle::ArenaDtor(void* object) {
  SCGainSettle* _this = reinterpret_cast< SCGainSettle* >(object);
  (void)_this;
}
void SCGainSettle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGainSettle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGainSettle& SCGainSettle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGainSettle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGainSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGainSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGainSettle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGainSettle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGainSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 originUID = 2;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_originuid(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGainSettle)
  return target;
}

size_t SCGainSettle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGainSettle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 originUID = 2;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGainSettle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGainSettle)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGainSettle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGainSettle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGainSettle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGainSettle)
    MergeFrom(*source);
  }
}

void SCGainSettle::MergeFrom(const SCGainSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGainSettle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void SCGainSettle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGainSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGainSettle::CopyFrom(const SCGainSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGainSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGainSettle::IsInitialized() const {
  return true;
}

void SCGainSettle::InternalSwap(SCGainSettle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGainSettle, ratio_)
      + sizeof(SCGainSettle::ratio_)
      - PROTOBUF_FIELD_OFFSET(SCGainSettle, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGainSettle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetPlane::_Internal {
 public:
};

CSSetPlane::CSSetPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSetPlane)
}
CSSetPlane::CSSetPlane(const CSSetPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  planeid_ = from.planeid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSetPlane)
}

void CSSetPlane::SharedCtor() {
  planeid_ = 0;
}

CSSetPlane::~CSSetPlane() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSetPlane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetPlane::ArenaDtor(void* object) {
  CSSetPlane* _this = reinterpret_cast< CSSetPlane* >(object);
  (void)_this;
}
void CSSetPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetPlane& CSSetPlane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetPlane_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSetPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSetPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planeid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 planeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          planeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetPlane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSetPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 planeID = 1;
  if (this->planeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_planeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSetPlane)
  return target;
}

size_t CSSetPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSetPlane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 planeID = 1;
  if (this->planeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_planeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSetPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSetPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSetPlane)
    MergeFrom(*source);
  }
}

void CSSetPlane::MergeFrom(const CSSetPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSetPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.planeid() != 0) {
    _internal_set_planeid(from._internal_planeid());
  }
}

void CSSetPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSetPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetPlane::CopyFrom(const CSSetPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSetPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetPlane::IsInitialized() const {
  return true;
}

void CSSetPlane::InternalSwap(CSSetPlane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(planeid_, other->planeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetPlane::_Internal {
 public:
};

SCSetPlane::SCSetPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSetPlane)
}
SCSetPlane::SCSetPlane(const SCSetPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&planeid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(planeid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSetPlane)
}

void SCSetPlane::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&planeid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(planeid_));
}

SCSetPlane::~SCSetPlane() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSetPlane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetPlane::ArenaDtor(void* object) {
  SCSetPlane* _this = reinterpret_cast< SCSetPlane* >(object);
  (void)_this;
}
void SCSetPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetPlane& SCSetPlane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetPlane_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSetPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSetPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planeid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(planeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 planeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          planeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetPlane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSetPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 planeID = 2;
  if (this->planeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_planeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSetPlane)
  return target;
}

size_t SCSetPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSetPlane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 planeID = 2;
  if (this->planeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_planeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSetPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSetPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSetPlane)
    MergeFrom(*source);
  }
}

void SCSetPlane::MergeFrom(const SCSetPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSetPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.planeid() != 0) {
    _internal_set_planeid(from._internal_planeid());
  }
}

void SCSetPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSetPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetPlane::CopyFrom(const SCSetPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSetPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetPlane::IsInitialized() const {
  return true;
}

void SCSetPlane::InternalSwap(SCSetPlane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetPlane, planeid_)
      + sizeof(SCSetPlane::planeid_)
      - PROTOBUF_FIELD_OFFSET(SCSetPlane, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSwitchBackGround::_Internal {
 public:
};

CSSwitchBackGround::CSSwitchBackGround(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSwitchBackGround)
}
CSSwitchBackGround::CSSwitchBackGround(const CSSwitchBackGround& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSwitchBackGround)
}

void CSSwitchBackGround::SharedCtor() {
}

CSSwitchBackGround::~CSSwitchBackGround() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSwitchBackGround)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSwitchBackGround::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSwitchBackGround::ArenaDtor(void* object) {
  CSSwitchBackGround* _this = reinterpret_cast< CSSwitchBackGround* >(object);
  (void)_this;
}
void CSSwitchBackGround::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSwitchBackGround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSwitchBackGround& CSSwitchBackGround::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSwitchBackGround_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSwitchBackGround::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSwitchBackGround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSwitchBackGround::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSwitchBackGround::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSwitchBackGround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSwitchBackGround)
  return target;
}

size_t CSSwitchBackGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSwitchBackGround)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSwitchBackGround::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSwitchBackGround)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSwitchBackGround* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSwitchBackGround>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSwitchBackGround)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSwitchBackGround)
    MergeFrom(*source);
  }
}

void CSSwitchBackGround::MergeFrom(const CSSwitchBackGround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSwitchBackGround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSwitchBackGround::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSwitchBackGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSwitchBackGround::CopyFrom(const CSSwitchBackGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSwitchBackGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSwitchBackGround::IsInitialized() const {
  return true;
}

void CSSwitchBackGround::InternalSwap(CSSwitchBackGround* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSwitchBackGround::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSwitchBackGround::_Internal {
 public:
};

SCSwitchBackGround::SCSwitchBackGround(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSwitchBackGround)
}
SCSwitchBackGround::SCSwitchBackGround(const SCSwitchBackGround& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_ = from.chair_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSwitchBackGround)
}

void SCSwitchBackGround::SharedCtor() {
  chair_ = 0;
}

SCSwitchBackGround::~SCSwitchBackGround() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSwitchBackGround)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSwitchBackGround::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSwitchBackGround::ArenaDtor(void* object) {
  SCSwitchBackGround* _this = reinterpret_cast< SCSwitchBackGround* >(object);
  (void)_this;
}
void SCSwitchBackGround::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSwitchBackGround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSwitchBackGround& SCSwitchBackGround::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSwitchBackGround_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSwitchBackGround::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSwitchBackGround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSwitchBackGround::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSwitchBackGround::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSwitchBackGround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSwitchBackGround)
  return target;
}

size_t SCSwitchBackGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSwitchBackGround)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSwitchBackGround::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSwitchBackGround)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSwitchBackGround* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSwitchBackGround>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSwitchBackGround)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSwitchBackGround)
    MergeFrom(*source);
  }
}

void SCSwitchBackGround::MergeFrom(const SCSwitchBackGround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSwitchBackGround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCSwitchBackGround::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSwitchBackGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSwitchBackGround::CopyFrom(const SCSwitchBackGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSwitchBackGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSwitchBackGround::IsInitialized() const {
  return true;
}

void SCSwitchBackGround::InternalSwap(SCSwitchBackGround* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_, other->chair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSwitchBackGround::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MonsterPath::_Internal {
 public:
  static const ::PlaneWar::MonsterInfo& monster(const MonsterPath* msg);
};

const ::PlaneWar::MonsterInfo&
MonsterPath::_Internal::monster(const MonsterPath* msg) {
  return *msg->monster_;
}
MonsterPath::MonsterPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MonsterPath)
}
MonsterPath::MonsterPath(const MonsterPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_monster()) {
    monster_ = new ::PlaneWar::MonsterInfo(*from.monster_);
  } else {
    monster_ = nullptr;
  }
  ::memcpy(&configid_, &from.configid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
    reinterpret_cast<char*>(&configid_)) + sizeof(stage_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MonsterPath)
}

void MonsterPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonsterPath_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monster_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&monster_)) + sizeof(stage_));
}

MonsterPath::~MonsterPath() {
  // @@protoc_insertion_point(destructor:PlaneWar.MonsterPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonsterPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete monster_;
}

void MonsterPath::ArenaDtor(void* object) {
  MonsterPath* _this = reinterpret_cast< MonsterPath* >(object);
  (void)_this;
}
void MonsterPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonsterPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterPath& MonsterPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterPath_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MonsterPath::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MonsterPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && monster_ != nullptr) {
    delete monster_;
  }
  monster_ = nullptr;
  ::memset(&configid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&configid_)) + sizeof(stage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.MonsterInfo monster = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_monster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 configID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          configid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stepIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stepindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roadIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          roadindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float moveT = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          movet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 dotIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dotindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 stage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MonsterPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.MonsterInfo monster = 1;
  if (this->has_monster()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::monster(this), target, stream);
  }

  // int32 configID = 2;
  if (this->configid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_configid(), target);
  }

  // int32 stepIndex = 3;
  if (this->stepindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stepindex(), target);
  }

  // int32 roadIndex = 4;
  if (this->roadindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_roadindex(), target);
  }

  // float moveT = 5;
  if (!(this->movet() <= 0 && this->movet() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_movet(), target);
  }

  // int32 dotIndex = 6;
  if (this->dotindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dotindex(), target);
  }

  // float delay = 7;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_delay(), target);
  }

  // int32 stage = 8;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MonsterPath)
  return target;
}

size_t MonsterPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MonsterPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.MonsterInfo monster = 1;
  if (this->has_monster()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monster_);
  }

  // int32 configID = 2;
  if (this->configid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_configid());
  }

  // int32 stepIndex = 3;
  if (this->stepindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stepindex());
  }

  // int32 roadIndex = 4;
  if (this->roadindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roadindex());
  }

  // float moveT = 5;
  if (!(this->movet() <= 0 && this->movet() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 dotIndex = 6;
  if (this->dotindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dotindex());
  }

  // float delay = 7;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 stage = 8;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MonsterPath)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MonsterPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MonsterPath)
    MergeFrom(*source);
  }
}

void MonsterPath::MergeFrom(const MonsterPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MonsterPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_monster()) {
    _internal_mutable_monster()->::PlaneWar::MonsterInfo::MergeFrom(from._internal_monster());
  }
  if (from.configid() != 0) {
    _internal_set_configid(from._internal_configid());
  }
  if (from.stepindex() != 0) {
    _internal_set_stepindex(from._internal_stepindex());
  }
  if (from.roadindex() != 0) {
    _internal_set_roadindex(from._internal_roadindex());
  }
  if (!(from.movet() <= 0 && from.movet() >= 0)) {
    _internal_set_movet(from._internal_movet());
  }
  if (from.dotindex() != 0) {
    _internal_set_dotindex(from._internal_dotindex());
  }
  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    _internal_set_delay(from._internal_delay());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void MonsterPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MonsterPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterPath::CopyFrom(const MonsterPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MonsterPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterPath::IsInitialized() const {
  return true;
}

void MonsterPath::InternalSwap(MonsterPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterPath, stage_)
      + sizeof(MonsterPath::stage_)
      - PROTOBUF_FIELD_OFFSET(MonsterPath, monster_)>(
          reinterpret_cast<char*>(&monster_),
          reinterpret_cast<char*>(&other->monster_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncMonsterInfo::_Internal {
 public:
};

SCSyncMonsterInfo::SCSyncMonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  createdpathlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncMonsterInfo)
}
SCSyncMonsterInfo::SCSyncMonsterInfo(const SCSyncMonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      createdpathlist_(from.createdpathlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncMonsterInfo)
}

void SCSyncMonsterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncMonsterInfo_PlaneWar_2eproto.base);
}

SCSyncMonsterInfo::~SCSyncMonsterInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncMonsterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncMonsterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncMonsterInfo::ArenaDtor(void* object) {
  SCSyncMonsterInfo* _this = reinterpret_cast< SCSyncMonsterInfo* >(object);
  (void)_this;
}
void SCSyncMonsterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncMonsterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncMonsterInfo& SCSyncMonsterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncMonsterInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  createdpathlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncMonsterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.MonsterPath createdPathList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_createdpathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncMonsterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.MonsterPath createdPathList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_createdpathlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_createdpathlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncMonsterInfo)
  return target;
}

size_t SCSyncMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncMonsterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MonsterPath createdPathList = 1;
  total_size += 1UL * this->_internal_createdpathlist_size();
  for (const auto& msg : this->createdpathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncMonsterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncMonsterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncMonsterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncMonsterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncMonsterInfo)
    MergeFrom(*source);
  }
}

void SCSyncMonsterInfo::MergeFrom(const SCSyncMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  createdpathlist_.MergeFrom(from.createdpathlist_);
}

void SCSyncMonsterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncMonsterInfo::CopyFrom(const SCSyncMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncMonsterInfo::IsInitialized() const {
  return true;
}

void SCSyncMonsterInfo::InternalSwap(SCSyncMonsterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  createdpathlist_.InternalSwap(&other->createdpathlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncMonsterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScratchInfo::_Internal {
 public:
};

ScratchInfo::ScratchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ScratchInfo)
}
ScratchInfo::ScratchInfo(const ScratchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_, &from.base_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&base_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ScratchInfo)
}

void ScratchInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&base_)) + sizeof(multiple_));
}

ScratchInfo::~ScratchInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.ScratchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScratchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScratchInfo::ArenaDtor(void* object) {
  ScratchInfo* _this = reinterpret_cast< ScratchInfo* >(object);
  (void)_this;
}
void ScratchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScratchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScratchInfo& ScratchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScratchInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ScratchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ScratchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&base_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScratchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScratchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ScratchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 base = 1;
  if (this->base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_base(), target);
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ScratchInfo)
  return target;
}

size_t ScratchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ScratchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 base = 1;
  if (this->base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base());
  }

  // int32 multiple = 2;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScratchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ScratchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScratchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScratchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ScratchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ScratchInfo)
    MergeFrom(*source);
  }
}

void ScratchInfo::MergeFrom(const ScratchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ScratchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base() != 0) {
    _internal_set_base(from._internal_base());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void ScratchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ScratchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScratchInfo::CopyFrom(const ScratchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ScratchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScratchInfo::IsInitialized() const {
  return true;
}

void ScratchInfo::InternalSwap(ScratchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScratchInfo, multiple_)
      + sizeof(ScratchInfo::multiple_)
      - PROTOBUF_FIELD_OFFSET(ScratchInfo, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScratchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSScratchCardList::_Internal {
 public:
};

CSScratchCardList::CSScratchCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSScratchCardList)
}
CSScratchCardList::CSScratchCardList(const CSScratchCardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSScratchCardList)
}

void CSScratchCardList::SharedCtor() {
}

CSScratchCardList::~CSScratchCardList() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSScratchCardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSScratchCardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSScratchCardList::ArenaDtor(void* object) {
  CSScratchCardList* _this = reinterpret_cast< CSScratchCardList* >(object);
  (void)_this;
}
void CSScratchCardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSScratchCardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSScratchCardList& CSScratchCardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSScratchCardList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSScratchCardList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSScratchCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSScratchCardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSScratchCardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSScratchCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSScratchCardList)
  return target;
}

size_t CSScratchCardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSScratchCardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSScratchCardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSScratchCardList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSScratchCardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSScratchCardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSScratchCardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSScratchCardList)
    MergeFrom(*source);
  }
}

void CSScratchCardList::MergeFrom(const CSScratchCardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSScratchCardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSScratchCardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSScratchCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSScratchCardList::CopyFrom(const CSScratchCardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSScratchCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSScratchCardList::IsInitialized() const {
  return true;
}

void CSScratchCardList::InternalSwap(CSScratchCardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSScratchCardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCScratchCardList::_Internal {
 public:
  static const ::PlaneWar::ScratchInfo& firstcard(const SCScratchCardList* msg);
};

const ::PlaneWar::ScratchInfo&
SCScratchCardList::_Internal::firstcard(const SCScratchCardList* msg) {
  return *msg->firstcard_;
}
SCScratchCardList::SCScratchCardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCScratchCardList)
}
SCScratchCardList::SCScratchCardList(const SCScratchCardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_firstcard()) {
    firstcard_ = new ::PlaneWar::ScratchInfo(*from.firstcard_);
  } else {
    firstcard_ = nullptr;
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCScratchCardList)
}

void SCScratchCardList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCScratchCardList_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&firstcard_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&firstcard_)) + sizeof(num_));
}

SCScratchCardList::~SCScratchCardList() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCScratchCardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCScratchCardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete firstcard_;
}

void SCScratchCardList::ArenaDtor(void* object) {
  SCScratchCardList* _this = reinterpret_cast< SCScratchCardList* >(object);
  (void)_this;
}
void SCScratchCardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCScratchCardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCScratchCardList& SCScratchCardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCScratchCardList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCScratchCardList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCScratchCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && firstcard_ != nullptr) {
    delete firstcard_;
  }
  firstcard_ = nullptr;
  num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCScratchCardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ScratchInfo firstCard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstcard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCScratchCardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCScratchCardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // .PlaneWar.ScratchInfo firstCard = 2;
  if (this->has_firstcard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::firstcard(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCScratchCardList)
  return target;
}

size_t SCScratchCardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCScratchCardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.ScratchInfo firstCard = 2;
  if (this->has_firstcard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *firstcard_);
  }

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCScratchCardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCScratchCardList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCScratchCardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCScratchCardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCScratchCardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCScratchCardList)
    MergeFrom(*source);
  }
}

void SCScratchCardList::MergeFrom(const SCScratchCardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCScratchCardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_firstcard()) {
    _internal_mutable_firstcard()->::PlaneWar::ScratchInfo::MergeFrom(from._internal_firstcard());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void SCScratchCardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCScratchCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCScratchCardList::CopyFrom(const SCScratchCardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCScratchCardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCScratchCardList::IsInitialized() const {
  return true;
}

void SCScratchCardList::InternalSwap(SCScratchCardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCScratchCardList, num_)
      + sizeof(SCScratchCardList::num_)
      - PROTOBUF_FIELD_OFFSET(SCScratchCardList, firstcard_)>(
          reinterpret_cast<char*>(&firstcard_),
          reinterpret_cast<char*>(&other->firstcard_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCScratchCardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUseScratchCard::_Internal {
 public:
};

CSUseScratchCard::CSUseScratchCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUseScratchCard)
}
CSUseScratchCard::CSUseScratchCard(const CSUseScratchCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUseScratchCard)
}

void CSUseScratchCard::SharedCtor() {
  num_ = 0;
}

CSUseScratchCard::~CSUseScratchCard() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUseScratchCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUseScratchCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUseScratchCard::ArenaDtor(void* object) {
  CSUseScratchCard* _this = reinterpret_cast< CSUseScratchCard* >(object);
  (void)_this;
}
void CSUseScratchCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUseScratchCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUseScratchCard& CSUseScratchCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUseScratchCard_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUseScratchCard::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUseScratchCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUseScratchCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUseScratchCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUseScratchCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUseScratchCard)
  return target;
}

size_t CSUseScratchCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUseScratchCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUseScratchCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUseScratchCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUseScratchCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUseScratchCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUseScratchCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUseScratchCard)
    MergeFrom(*source);
  }
}

void CSUseScratchCard::MergeFrom(const CSUseScratchCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUseScratchCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void CSUseScratchCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUseScratchCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUseScratchCard::CopyFrom(const CSUseScratchCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUseScratchCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUseScratchCard::IsInitialized() const {
  return true;
}

void CSUseScratchCard::InternalSwap(CSUseScratchCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUseScratchCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUseScratchCard::_Internal {
 public:
};

SCUseScratchCard::SCUseScratchCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUseScratchCard)
}
SCUseScratchCard::SCUseScratchCard(const SCUseScratchCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cardlist_(from.cardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUseScratchCard)
}

void SCUseScratchCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUseScratchCard_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
}

SCUseScratchCard::~SCUseScratchCard() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUseScratchCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUseScratchCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUseScratchCard::ArenaDtor(void* object) {
  SCUseScratchCard* _this = reinterpret_cast< SCUseScratchCard* >(object);
  (void)_this;
}
void SCUseScratchCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUseScratchCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUseScratchCard& SCUseScratchCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUseScratchCard_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUseScratchCard::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUseScratchCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardlist_.Clear();
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUseScratchCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.ScratchInfo cardList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curMoney = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUseScratchCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUseScratchCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // repeated .PlaneWar.ScratchInfo cardList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cardlist(i), target, stream);
  }

  // int32 total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  // int32 remain = 4;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain(), target);
  }

  // int32 curMoney = 5;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_curmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUseScratchCard)
  return target;
}

size_t SCUseScratchCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUseScratchCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.ScratchInfo cardList = 2;
  total_size += 1UL * this->_internal_cardlist_size();
  for (const auto& msg : this->cardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 remain = 4;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  // int32 curMoney = 5;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUseScratchCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUseScratchCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUseScratchCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUseScratchCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUseScratchCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUseScratchCard)
    MergeFrom(*source);
  }
}

void SCUseScratchCard::MergeFrom(const SCUseScratchCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUseScratchCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardlist_.MergeFrom(from.cardlist_);
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
}

void SCUseScratchCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUseScratchCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUseScratchCard::CopyFrom(const SCUseScratchCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUseScratchCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUseScratchCard::IsInitialized() const {
  return true;
}

void SCUseScratchCard::InternalSwap(SCUseScratchCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cardlist_.InternalSwap(&other->cardlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUseScratchCard, curmoney_)
      + sizeof(SCUseScratchCard::curmoney_)
      - PROTOBUF_FIELD_OFFSET(SCUseScratchCard, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUseScratchCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSExplodeSettle::_Internal {
 public:
};

CSExplodeSettle::CSExplodeSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSExplodeSettle)
}
CSExplodeSettle::CSExplodeSettle(const CSExplodeSettle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceuid_ = from.sourceuid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSExplodeSettle)
}

void CSExplodeSettle::SharedCtor() {
  sourceuid_ = 0;
}

CSExplodeSettle::~CSExplodeSettle() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSExplodeSettle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSExplodeSettle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSExplodeSettle::ArenaDtor(void* object) {
  CSExplodeSettle* _this = reinterpret_cast< CSExplodeSettle* >(object);
  (void)_this;
}
void CSExplodeSettle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSExplodeSettle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSExplodeSettle& CSExplodeSettle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSExplodeSettle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSExplodeSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSExplodeSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSExplodeSettle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSExplodeSettle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSExplodeSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSExplodeSettle)
  return target;
}

size_t CSExplodeSettle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSExplodeSettle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSExplodeSettle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSExplodeSettle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSExplodeSettle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSExplodeSettle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSExplodeSettle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSExplodeSettle)
    MergeFrom(*source);
  }
}

void CSExplodeSettle::MergeFrom(const CSExplodeSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSExplodeSettle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSExplodeSettle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSExplodeSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExplodeSettle::CopyFrom(const CSExplodeSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSExplodeSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExplodeSettle::IsInitialized() const {
  return true;
}

void CSExplodeSettle::InternalSwap(CSExplodeSettle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sourceuid_, other->sourceuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSExplodeSettle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCExplodeSettle::_Internal {
 public:
};

SCExplodeSettle::SCExplodeSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCExplodeSettle)
}
SCExplodeSettle::SCExplodeSettle(const SCExplodeSettle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&remain_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(remain_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCExplodeSettle)
}

void SCExplodeSettle::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&remain_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(remain_));
}

SCExplodeSettle::~SCExplodeSettle() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCExplodeSettle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCExplodeSettle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCExplodeSettle::ArenaDtor(void* object) {
  SCExplodeSettle* _this = reinterpret_cast< SCExplodeSettle* >(object);
  (void)_this;
}
void SCExplodeSettle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCExplodeSettle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCExplodeSettle& SCExplodeSettle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCExplodeSettle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCExplodeSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCExplodeSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(remain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCExplodeSettle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCExplodeSettle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCExplodeSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceuid(), target);
  }

  // int32 originUID = 3;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_originuid(), target);
  }

  // int32 remain = 4;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCExplodeSettle)
  return target;
}

size_t SCExplodeSettle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCExplodeSettle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 originUID = 3;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 remain = 4;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCExplodeSettle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCExplodeSettle)
  GOOGLE_DCHECK_NE(&from, this);
  const SCExplodeSettle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCExplodeSettle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCExplodeSettle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCExplodeSettle)
    MergeFrom(*source);
  }
}

void SCExplodeSettle::MergeFrom(const SCExplodeSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCExplodeSettle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
}

void SCExplodeSettle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCExplodeSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCExplodeSettle::CopyFrom(const SCExplodeSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCExplodeSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCExplodeSettle::IsInitialized() const {
  return true;
}

void SCExplodeSettle::InternalSwap(SCExplodeSettle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCExplodeSettle, remain_)
      + sizeof(SCExplodeSettle::remain_)
      - PROTOBUF_FIELD_OFFSET(SCExplodeSettle, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCExplodeSettle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFallIntoBlackHole::_Internal {
 public:
};

CSFallIntoBlackHole::CSFallIntoBlackHole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSFallIntoBlackHole)
}
CSFallIntoBlackHole::CSFallIntoBlackHole(const CSFallIntoBlackHole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monsteruid_, &from.monsteruid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
    reinterpret_cast<char*>(&monsteruid_)) + sizeof(sourceuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSFallIntoBlackHole)
}

void CSFallIntoBlackHole::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&monsteruid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&monsteruid_)) + sizeof(sourceuid_));
}

CSFallIntoBlackHole::~CSFallIntoBlackHole() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSFallIntoBlackHole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFallIntoBlackHole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFallIntoBlackHole::ArenaDtor(void* object) {
  CSFallIntoBlackHole* _this = reinterpret_cast< CSFallIntoBlackHole* >(object);
  (void)_this;
}
void CSFallIntoBlackHole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFallIntoBlackHole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFallIntoBlackHole& CSFallIntoBlackHole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFallIntoBlackHole_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSFallIntoBlackHole::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSFallIntoBlackHole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monsteruid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&monsteruid_)) + sizeof(sourceuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFallIntoBlackHole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 monsterUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFallIntoBlackHole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSFallIntoBlackHole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsteruid(), target);
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSFallIntoBlackHole)
  return target;
}

size_t CSFallIntoBlackHole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSFallIntoBlackHole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monsterUID = 1;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFallIntoBlackHole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSFallIntoBlackHole)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFallIntoBlackHole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFallIntoBlackHole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSFallIntoBlackHole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSFallIntoBlackHole)
    MergeFrom(*source);
  }
}

void CSFallIntoBlackHole::MergeFrom(const CSFallIntoBlackHole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSFallIntoBlackHole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSFallIntoBlackHole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSFallIntoBlackHole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFallIntoBlackHole::CopyFrom(const CSFallIntoBlackHole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSFallIntoBlackHole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFallIntoBlackHole::IsInitialized() const {
  return true;
}

void CSFallIntoBlackHole::InternalSwap(CSFallIntoBlackHole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSFallIntoBlackHole, sourceuid_)
      + sizeof(CSFallIntoBlackHole::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(CSFallIntoBlackHole, monsteruid_)>(
          reinterpret_cast<char*>(&monsteruid_),
          reinterpret_cast<char*>(&other->monsteruid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFallIntoBlackHole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFallIntoBlackHole::_Internal {
 public:
};

SCFallIntoBlackHole::SCFallIntoBlackHole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCFallIntoBlackHole)
}
SCFallIntoBlackHole::SCFallIntoBlackHole(const SCFallIntoBlackHole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCFallIntoBlackHole)
}

void SCFallIntoBlackHole::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
}

SCFallIntoBlackHole::~SCFallIntoBlackHole() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCFallIntoBlackHole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFallIntoBlackHole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCFallIntoBlackHole::ArenaDtor(void* object) {
  SCFallIntoBlackHole* _this = reinterpret_cast< SCFallIntoBlackHole* >(object);
  (void)_this;
}
void SCFallIntoBlackHole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFallIntoBlackHole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFallIntoBlackHole& SCFallIntoBlackHole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFallIntoBlackHole_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCFallIntoBlackHole::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCFallIntoBlackHole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFallIntoBlackHole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monsterUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFallIntoBlackHole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCFallIntoBlackHole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 monsterUID = 2;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monsteruid(), target);
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCFallIntoBlackHole)
  return target;
}

size_t SCFallIntoBlackHole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCFallIntoBlackHole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 monsterUID = 2;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFallIntoBlackHole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCFallIntoBlackHole)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFallIntoBlackHole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFallIntoBlackHole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCFallIntoBlackHole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCFallIntoBlackHole)
    MergeFrom(*source);
  }
}

void SCFallIntoBlackHole::MergeFrom(const SCFallIntoBlackHole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCFallIntoBlackHole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void SCFallIntoBlackHole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCFallIntoBlackHole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFallIntoBlackHole::CopyFrom(const SCFallIntoBlackHole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCFallIntoBlackHole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFallIntoBlackHole::IsInitialized() const {
  return true;
}

void SCFallIntoBlackHole::InternalSwap(SCFallIntoBlackHole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCFallIntoBlackHole, sourceuid_)
      + sizeof(SCFallIntoBlackHole::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(SCFallIntoBlackHole, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFallIntoBlackHole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncBlackHolePos::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const CSSyncBlackHolePos* msg);
};

const ::PlaneWar::Pos&
CSSyncBlackHolePos::_Internal::pos(const CSSyncBlackHolePos* msg) {
  return *msg->pos_;
}
CSSyncBlackHolePos::CSSyncBlackHolePos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSyncBlackHolePos)
}
CSSyncBlackHolePos::CSSyncBlackHolePos(const CSSyncBlackHolePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  sourceuid_ = from.sourceuid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSyncBlackHolePos)
}

void CSSyncBlackHolePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncBlackHolePos_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(sourceuid_));
}

CSSyncBlackHolePos::~CSSyncBlackHolePos() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSyncBlackHolePos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncBlackHolePos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void CSSyncBlackHolePos::ArenaDtor(void* object) {
  CSSyncBlackHolePos* _this = reinterpret_cast< CSSyncBlackHolePos* >(object);
  (void)_this;
}
void CSSyncBlackHolePos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncBlackHolePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncBlackHolePos& CSSyncBlackHolePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncBlackHolePos_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSyncBlackHolePos::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSyncBlackHolePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  sourceuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncBlackHolePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncBlackHolePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSyncBlackHolePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourceuid(), target);
  }

  // .PlaneWar.Pos pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSyncBlackHolePos)
  return target;
}

size_t CSSyncBlackHolePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSyncBlackHolePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncBlackHolePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSyncBlackHolePos)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncBlackHolePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncBlackHolePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSyncBlackHolePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSyncBlackHolePos)
    MergeFrom(*source);
  }
}

void CSSyncBlackHolePos::MergeFrom(const CSSyncBlackHolePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSyncBlackHolePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSSyncBlackHolePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSyncBlackHolePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncBlackHolePos::CopyFrom(const CSSyncBlackHolePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSyncBlackHolePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncBlackHolePos::IsInitialized() const {
  return true;
}

void CSSyncBlackHolePos::InternalSwap(CSSyncBlackHolePos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncBlackHolePos, sourceuid_)
      + sizeof(CSSyncBlackHolePos::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(CSSyncBlackHolePos, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncBlackHolePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncBlackHolePos::_Internal {
 public:
  static const ::PlaneWar::Pos& pos(const SCSyncBlackHolePos* msg);
};

const ::PlaneWar::Pos&
SCSyncBlackHolePos::_Internal::pos(const SCSyncBlackHolePos* msg) {
  return *msg->pos_;
}
SCSyncBlackHolePos::SCSyncBlackHolePos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncBlackHolePos)
}
SCSyncBlackHolePos::SCSyncBlackHolePos(const SCSyncBlackHolePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PlaneWar::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncBlackHolePos)
}

void SCSyncBlackHolePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncBlackHolePos_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(sourceuid_));
}

SCSyncBlackHolePos::~SCSyncBlackHolePos() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncBlackHolePos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncBlackHolePos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void SCSyncBlackHolePos::ArenaDtor(void* object) {
  SCSyncBlackHolePos* _this = reinterpret_cast< SCSyncBlackHolePos* >(object);
  (void)_this;
}
void SCSyncBlackHolePos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncBlackHolePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncBlackHolePos& SCSyncBlackHolePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncBlackHolePos_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncBlackHolePos::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncBlackHolePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(sourceuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncBlackHolePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Pos pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncBlackHolePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncBlackHolePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceuid(), target);
  }

  // .PlaneWar.Pos pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncBlackHolePos)
  return target;
}

size_t SCSyncBlackHolePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncBlackHolePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Pos pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncBlackHolePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncBlackHolePos)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncBlackHolePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncBlackHolePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncBlackHolePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncBlackHolePos)
    MergeFrom(*source);
  }
}

void SCSyncBlackHolePos::MergeFrom(const SCSyncBlackHolePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncBlackHolePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::PlaneWar::Pos::MergeFrom(from._internal_pos());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void SCSyncBlackHolePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncBlackHolePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncBlackHolePos::CopyFrom(const SCSyncBlackHolePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncBlackHolePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncBlackHolePos::IsInitialized() const {
  return true;
}

void SCSyncBlackHolePos::InternalSwap(SCSyncBlackHolePos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncBlackHolePos, sourceuid_)
      + sizeof(SCSyncBlackHolePos::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(SCSyncBlackHolePos, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncBlackHolePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSInteraction::_Internal {
 public:
};

CSInteraction::CSInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSInteraction)
}
CSInteraction::CSInteraction(const CSInteraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&targetchair_, &from.targetchair_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&targetchair_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSInteraction)
}

void CSInteraction::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&targetchair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&targetchair_)) + sizeof(type_));
}

CSInteraction::~CSInteraction() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSInteraction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSInteraction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSInteraction::ArenaDtor(void* object) {
  CSInteraction* _this = reinterpret_cast< CSInteraction* >(object);
  (void)_this;
}
void CSInteraction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSInteraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSInteraction& CSInteraction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSInteraction_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&targetchair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&targetchair_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSInteraction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 targetChair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          targetchair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSInteraction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 targetChair = 1;
  if (this->targetchair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_targetchair(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSInteraction)
  return target;
}

size_t CSInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSInteraction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 targetChair = 1;
  if (this->targetchair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetchair());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSInteraction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  const CSInteraction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSInteraction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSInteraction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSInteraction)
    MergeFrom(*source);
  }
}

void CSInteraction::MergeFrom(const CSInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.targetchair() != 0) {
    _internal_set_targetchair(from._internal_targetchair());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSInteraction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSInteraction::CopyFrom(const CSInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInteraction::IsInitialized() const {
  return true;
}

void CSInteraction::InternalSwap(CSInteraction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSInteraction, type_)
      + sizeof(CSInteraction::type_)
      - PROTOBUF_FIELD_OFFSET(CSInteraction, targetchair_)>(
          reinterpret_cast<char*>(&targetchair_),
          reinterpret_cast<char*>(&other->targetchair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSInteraction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCInteraction::_Internal {
 public:
};

SCInteraction::SCInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCInteraction)
}
SCInteraction::SCInteraction(const SCInteraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sourcechair_, &from.sourcechair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
    reinterpret_cast<char*>(&sourcechair_)) + sizeof(curmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCInteraction)
}

void SCInteraction::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sourcechair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&sourcechair_)) + sizeof(curmoney_));
}

SCInteraction::~SCInteraction() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCInteraction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCInteraction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCInteraction::ArenaDtor(void* object) {
  SCInteraction* _this = reinterpret_cast< SCInteraction* >(object);
  (void)_this;
}
void SCInteraction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCInteraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCInteraction& SCInteraction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCInteraction_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sourcechair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&sourcechair_)) + sizeof(curmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCInteraction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceChair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourcechair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetChair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetchair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cooldown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCInteraction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceChair = 1;
  if (this->sourcechair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourcechair(), target);
  }

  // int32 targetChair = 2;
  if (this->targetchair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetchair(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 cooldown = 4;
  if (this->cooldown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cooldown(), target);
  }

  // int64 curMoney = 5;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_curmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCInteraction)
  return target;
}

size_t SCInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCInteraction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sourceChair = 1;
  if (this->sourcechair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourcechair());
  }

  // int32 targetChair = 2;
  if (this->targetchair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetchair());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 cooldown = 4;
  if (this->cooldown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cooldown());
  }

  // int64 curMoney = 5;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCInteraction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  const SCInteraction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCInteraction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCInteraction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCInteraction)
    MergeFrom(*source);
  }
}

void SCInteraction::MergeFrom(const SCInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcechair() != 0) {
    _internal_set_sourcechair(from._internal_sourcechair());
  }
  if (from.targetchair() != 0) {
    _internal_set_targetchair(from._internal_targetchair());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.cooldown() != 0) {
    _internal_set_cooldown(from._internal_cooldown());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
}

void SCInteraction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCInteraction::CopyFrom(const SCInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCInteraction::IsInitialized() const {
  return true;
}

void SCInteraction::InternalSwap(SCInteraction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCInteraction, curmoney_)
      + sizeof(SCInteraction::curmoney_)
      - PROTOBUF_FIELD_OFFSET(SCInteraction, sourcechair_)>(
          reinterpret_cast<char*>(&sourcechair_),
          reinterpret_cast<char*>(&other->sourcechair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCInteraction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JumpHighArena::_Internal {
 public:
};

JumpHighArena::JumpHighArena(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monsterid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.JumpHighArena)
}
JumpHighArena::JumpHighArena(const JumpHighArena& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monsterid_(from.monsterid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tips().empty()) {
    tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tips(), 
      GetArena());
  }
  ::memcpy(&isopen_, &from.isopen_,
    static_cast<size_t>(reinterpret_cast<char*>(&gametime_) -
    reinterpret_cast<char*>(&isopen_)) + sizeof(gametime_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.JumpHighArena)
}

void JumpHighArena::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JumpHighArena_PlaneWar_2eproto.base);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&isopen_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gametime_) -
      reinterpret_cast<char*>(&isopen_)) + sizeof(gametime_));
}

JumpHighArena::~JumpHighArena() {
  // @@protoc_insertion_point(destructor:PlaneWar.JumpHighArena)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JumpHighArena::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JumpHighArena::ArenaDtor(void* object) {
  JumpHighArena* _this = reinterpret_cast< JumpHighArena* >(object);
  (void)_this;
}
void JumpHighArena::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JumpHighArena::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JumpHighArena& JumpHighArena::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JumpHighArena_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void JumpHighArena::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.JumpHighArena)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monsterid_.Clear();
  tips_.ClearToEmpty();
  ::memset(&isopen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gametime_) -
      reinterpret_cast<char*>(&isopen_)) + sizeof(gametime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JumpHighArena::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tips = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tips();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.JumpHighArena.tips"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 monsterId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_monsterid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_monsterid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JumpHighArena::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.JumpHighArena)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isopen(), target);
  }

  // int32 vip = 2;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vip(), target);
  }

  // int32 coin = 3;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_coin(), target);
  }

  // int32 gameTime = 4;
  if (this->gametime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gametime(), target);
  }

  // string tips = 5;
  if (this->tips().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tips().data(), static_cast<int>(this->_internal_tips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.JumpHighArena.tips");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tips(), target);
  }

  // repeated int32 monsterId = 6;
  {
    int byte_size = _monsterid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_monsterid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.JumpHighArena)
  return target;
}

size_t JumpHighArena::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.JumpHighArena)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 monsterId = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->monsterid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _monsterid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string tips = 5;
  if (this->tips().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tips());
  }

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  // int32 vip = 2;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 coin = 3;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin());
  }

  // int32 gameTime = 4;
  if (this->gametime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gametime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JumpHighArena::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.JumpHighArena)
  GOOGLE_DCHECK_NE(&from, this);
  const JumpHighArena* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JumpHighArena>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.JumpHighArena)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.JumpHighArena)
    MergeFrom(*source);
  }
}

void JumpHighArena::MergeFrom(const JumpHighArena& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.JumpHighArena)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monsterid_.MergeFrom(from.monsterid_);
  if (from.tips().size() > 0) {
    _internal_set_tips(from._internal_tips());
  }
  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.gametime() != 0) {
    _internal_set_gametime(from._internal_gametime());
  }
}

void JumpHighArena::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.JumpHighArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpHighArena::CopyFrom(const JumpHighArena& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.JumpHighArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpHighArena::IsInitialized() const {
  return true;
}

void JumpHighArena::InternalSwap(JumpHighArena* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monsterid_.InternalSwap(&other->monsterid_);
  tips_.Swap(&other->tips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JumpHighArena, gametime_)
      + sizeof(JumpHighArena::gametime_)
      - PROTOBUF_FIELD_OFFSET(JumpHighArena, isopen_)>(
          reinterpret_cast<char*>(&isopen_),
          reinterpret_cast<char*>(&other->isopen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JumpHighArena::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoolArenaLimit::_Internal {
 public:
};

PoolArenaLimit::PoolArenaLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PoolArenaLimit)
}
PoolArenaLimit::PoolArenaLimit(const PoolArenaLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&arena_) -
    reinterpret_cast<char*>(&level_)) + sizeof(arena_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PoolArenaLimit)
}

void PoolArenaLimit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&arena_) -
      reinterpret_cast<char*>(&level_)) + sizeof(arena_));
}

PoolArenaLimit::~PoolArenaLimit() {
  // @@protoc_insertion_point(destructor:PlaneWar.PoolArenaLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoolArenaLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoolArenaLimit::ArenaDtor(void* object) {
  PoolArenaLimit* _this = reinterpret_cast< PoolArenaLimit* >(object);
  (void)_this;
}
void PoolArenaLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoolArenaLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolArenaLimit& PoolArenaLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolArenaLimit_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PoolArenaLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PoolArenaLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arena_) -
      reinterpret_cast<char*>(&level_)) + sizeof(arena_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolArenaLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arena = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arena_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolArenaLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PoolArenaLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 arena = 2;
  if (this->arena() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arena(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PoolArenaLimit)
  return target;
}

size_t PoolArenaLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PoolArenaLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 arena = 2;
  if (this->arena() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arena());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolArenaLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PoolArenaLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolArenaLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolArenaLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PoolArenaLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PoolArenaLimit)
    MergeFrom(*source);
  }
}

void PoolArenaLimit::MergeFrom(const PoolArenaLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PoolArenaLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.arena() != 0) {
    _internal_set_arena(from._internal_arena());
  }
}

void PoolArenaLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PoolArenaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolArenaLimit::CopyFrom(const PoolArenaLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PoolArenaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolArenaLimit::IsInitialized() const {
  return true;
}

void PoolArenaLimit::InternalSwap(PoolArenaLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoolArenaLimit, arena_)
      + sizeof(PoolArenaLimit::arena_)
      - PROTOBUF_FIELD_OFFSET(PoolArenaLimit, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolArenaLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCActivityInfo::_Internal {
 public:
  static const ::PlaneWar::JumpHighArena& jump(const SCActivityInfo* msg);
};

const ::PlaneWar::JumpHighArena&
SCActivityInfo::_Internal::jump(const SCActivityInfo* msg) {
  return *msg->jump_;
}
SCActivityInfo::SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  poollimit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCActivityInfo)
}
SCActivityInfo::SCActivityInfo(const SCActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poollimit_(from.poollimit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_jump()) {
    jump_ = new ::PlaneWar::JumpHighArena(*from.jump_);
  } else {
    jump_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCActivityInfo)
}

void SCActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCActivityInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&jump_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&jump_)) + sizeof(limit_));
}

SCActivityInfo::~SCActivityInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete jump_;
}

void SCActivityInfo::ArenaDtor(void* object) {
  SCActivityInfo* _this = reinterpret_cast< SCActivityInfo* >(object);
  (void)_this;
}
void SCActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCActivityInfo& SCActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCActivityInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poollimit_.Clear();
  if (GetArena() == nullptr && jump_ != nullptr) {
    delete jump_;
  }
  jump_ = nullptr;
  limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.JumpHighArena jump = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_jump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.PoolArenaLimit poolLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poollimit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.JumpHighArena jump = 1;
  if (this->has_jump()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::jump(this), target, stream);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // repeated .PlaneWar.PoolArenaLimit poolLimit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_poollimit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_poollimit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCActivityInfo)
  return target;
}

size_t SCActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PoolArenaLimit poolLimit = 3;
  total_size += 1UL * this->_internal_poollimit_size();
  for (const auto& msg : this->poollimit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.JumpHighArena jump = 1;
  if (this->has_jump()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jump_);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCActivityInfo)
    MergeFrom(*source);
  }
}

void SCActivityInfo::MergeFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poollimit_.MergeFrom(from.poollimit_);
  if (from.has_jump()) {
    _internal_mutable_jump()->::PlaneWar::JumpHighArena::MergeFrom(from._internal_jump());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void SCActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCActivityInfo::CopyFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCActivityInfo::IsInitialized() const {
  return true;
}

void SCActivityInfo::InternalSwap(SCActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  poollimit_.InternalSwap(&other->poollimit_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCActivityInfo, limit_)
      + sizeof(SCActivityInfo::limit_)
      - PROTOBUF_FIELD_OFFSET(SCActivityInfo, jump_)>(
          reinterpret_cast<char*>(&jump_),
          reinterpret_cast<char*>(&other->jump_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTaskReward::_Internal {
 public:
};

CSGetTaskReward::CSGetTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetTaskReward)
}
CSGetTaskReward::CSGetTaskReward(const CSGetTaskReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetTaskReward)
}

void CSGetTaskReward::SharedCtor() {
}

CSGetTaskReward::~CSGetTaskReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetTaskReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTaskReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetTaskReward::ArenaDtor(void* object) {
  CSGetTaskReward* _this = reinterpret_cast< CSGetTaskReward* >(object);
  (void)_this;
}
void CSGetTaskReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTaskReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTaskReward& CSGetTaskReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTaskReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetTaskReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTaskReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTaskReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetTaskReward)
  return target;
}

size_t CSGetTaskReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetTaskReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTaskReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTaskReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTaskReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetTaskReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetTaskReward)
    MergeFrom(*source);
  }
}

void CSGetTaskReward::MergeFrom(const CSGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetTaskReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTaskReward::CopyFrom(const CSGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTaskReward::IsInitialized() const {
  return true;
}

void CSGetTaskReward::InternalSwap(CSGetTaskReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTaskReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTaskReward::_Internal {
 public:
};

SCGetTaskReward::SCGetTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetTaskReward)
}
SCGetTaskReward::SCGetTaskReward(const SCGetTaskReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gunratio_, &from.gunratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&gunratio_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetTaskReward)
}

void SCGetTaskReward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gunratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gunratio_)) + sizeof(ticket_));
}

SCGetTaskReward::~SCGetTaskReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetTaskReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTaskReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetTaskReward::ArenaDtor(void* object) {
  SCGetTaskReward* _this = reinterpret_cast< SCGetTaskReward* >(object);
  (void)_this;
}
void SCGetTaskReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTaskReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTaskReward& SCGetTaskReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTaskReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetTaskReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gunratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gunratio_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTaskReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gunRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gunratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTaskReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gunRatio = 1;
  if (this->gunratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gunratio(), target);
  }

  // int32 award = 2;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_award(), target);
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetTaskReward)
  return target;
}

size_t SCGetTaskReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetTaskReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gunRatio = 1;
  if (this->gunratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gunratio());
  }

  // int32 award = 2;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTaskReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTaskReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTaskReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetTaskReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetTaskReward)
    MergeFrom(*source);
  }
}

void SCGetTaskReward::MergeFrom(const SCGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gunratio() != 0) {
    _internal_set_gunratio(from._internal_gunratio());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCGetTaskReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTaskReward::CopyFrom(const SCGetTaskReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTaskReward::IsInitialized() const {
  return true;
}

void SCGetTaskReward::InternalSwap(SCGetTaskReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetTaskReward, ticket_)
      + sizeof(SCGetTaskReward::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCGetTaskReward, gunratio_)>(
          reinterpret_cast<char*>(&gunratio_),
          reinterpret_cast<char*>(&other->gunratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTaskReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTaskInfo::_Internal {
 public:
};

CSGetTaskInfo::CSGetTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetTaskInfo)
}
CSGetTaskInfo::CSGetTaskInfo(const CSGetTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetTaskInfo)
}

void CSGetTaskInfo::SharedCtor() {
}

CSGetTaskInfo::~CSGetTaskInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetTaskInfo::ArenaDtor(void* object) {
  CSGetTaskInfo* _this = reinterpret_cast< CSGetTaskInfo* >(object);
  (void)_this;
}
void CSGetTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTaskInfo& CSGetTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTaskInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetTaskInfo)
  return target;
}

size_t CSGetTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetTaskInfo)
    MergeFrom(*source);
  }
}

void CSGetTaskInfo::MergeFrom(const CSGetTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTaskInfo::CopyFrom(const CSGetTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTaskInfo::IsInitialized() const {
  return true;
}

void CSGetTaskInfo::InternalSwap(CSGetTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTaskInfo::_Internal {
 public:
};

SCGetTaskInfo::SCGetTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetTaskInfo)
}
SCGetTaskInfo::SCGetTaskInfo(const SCGetTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gunratio_, &from.gunratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&gunratio_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetTaskInfo)
}

void SCGetTaskInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gunratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gunratio_)) + sizeof(ticket_));
}

SCGetTaskInfo::~SCGetTaskInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetTaskInfo::ArenaDtor(void* object) {
  SCGetTaskInfo* _this = reinterpret_cast< SCGetTaskInfo* >(object);
  (void)_this;
}
void SCGetTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTaskInfo& SCGetTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTaskInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gunratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gunratio_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gunRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gunratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vipLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isUnlock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isunlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isVipUnlock = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isvipunlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gunRatio = 1;
  if (this->gunratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gunratio(), target);
  }

  // int32 curNum = 2;
  if (this->curnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curnum(), target);
  }

  // int32 totalNum = 3;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_totalnum(), target);
  }

  // int32 vipLevel = 4;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_viplevel(), target);
  }

  // int32 isUnlock = 5;
  if (this->isunlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_isunlock(), target);
  }

  // int32 award = 6;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_award(), target);
  }

  // bool isVipUnlock = 7;
  if (this->isvipunlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isvipunlock(), target);
  }

  // int32 ticket = 8;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetTaskInfo)
  return target;
}

size_t SCGetTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gunRatio = 1;
  if (this->gunratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gunratio());
  }

  // int32 curNum = 2;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curnum());
  }

  // int32 totalNum = 3;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  // int32 vipLevel = 4;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  // int32 isUnlock = 5;
  if (this->isunlock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isunlock());
  }

  // int32 award = 6;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // bool isVipUnlock = 7;
  if (this->isvipunlock() != 0) {
    total_size += 1 + 1;
  }

  // int32 ticket = 8;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetTaskInfo)
    MergeFrom(*source);
  }
}

void SCGetTaskInfo::MergeFrom(const SCGetTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gunratio() != 0) {
    _internal_set_gunratio(from._internal_gunratio());
  }
  if (from.curnum() != 0) {
    _internal_set_curnum(from._internal_curnum());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
  if (from.isunlock() != 0) {
    _internal_set_isunlock(from._internal_isunlock());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.isvipunlock() != 0) {
    _internal_set_isvipunlock(from._internal_isvipunlock());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCGetTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTaskInfo::CopyFrom(const SCGetTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTaskInfo::IsInitialized() const {
  return true;
}

void SCGetTaskInfo::InternalSwap(SCGetTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetTaskInfo, ticket_)
      + sizeof(SCGetTaskInfo::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCGetTaskInfo, gunratio_)>(
          reinterpret_cast<char*>(&gunratio_),
          reinterpret_cast<char*>(&other->gunratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNoticeInfoChange::_Internal {
 public:
};

SCNoticeInfoChange::SCNoticeInfoChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missilelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCNoticeInfoChange)
}
SCNoticeInfoChange::SCNoticeInfoChange(const SCNoticeInfoChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missilelist_(from.missilelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iscompletetask_, &from.iscompletetask_,
    static_cast<size_t>(reinterpret_cast<char*>(&callnum_) -
    reinterpret_cast<char*>(&iscompletetask_)) + sizeof(callnum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCNoticeInfoChange)
}

void SCNoticeInfoChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNoticeInfoChange_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&iscompletetask_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&callnum_) -
      reinterpret_cast<char*>(&iscompletetask_)) + sizeof(callnum_));
}

SCNoticeInfoChange::~SCNoticeInfoChange() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCNoticeInfoChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNoticeInfoChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNoticeInfoChange::ArenaDtor(void* object) {
  SCNoticeInfoChange* _this = reinterpret_cast< SCNoticeInfoChange* >(object);
  (void)_this;
}
void SCNoticeInfoChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNoticeInfoChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNoticeInfoChange& SCNoticeInfoChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNoticeInfoChange_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCNoticeInfoChange::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCNoticeInfoChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missilelist_.Clear();
  ::memset(&iscompletetask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callnum_) -
      reinterpret_cast<char*>(&iscompletetask_)) + sizeof(callnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNoticeInfoChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isCompleteTask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iscompletetask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MissileInfo missileList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missilelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 callNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          callnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNoticeInfoChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCNoticeInfoChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCompleteTask = 1;
  if (this->iscompletetask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iscompletetask(), target);
  }

  // repeated .PlaneWar.MissileInfo missileList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missilelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_missilelist(i), target, stream);
  }

  // int32 callNum = 3;
  if (this->callnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_callnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCNoticeInfoChange)
  return target;
}

size_t SCNoticeInfoChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCNoticeInfoChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MissileInfo missileList = 2;
  total_size += 1UL * this->_internal_missilelist_size();
  for (const auto& msg : this->missilelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool isCompleteTask = 1;
  if (this->iscompletetask() != 0) {
    total_size += 1 + 1;
  }

  // int32 callNum = 3;
  if (this->callnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_callnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNoticeInfoChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCNoticeInfoChange)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNoticeInfoChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNoticeInfoChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCNoticeInfoChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCNoticeInfoChange)
    MergeFrom(*source);
  }
}

void SCNoticeInfoChange::MergeFrom(const SCNoticeInfoChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCNoticeInfoChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missilelist_.MergeFrom(from.missilelist_);
  if (from.iscompletetask() != 0) {
    _internal_set_iscompletetask(from._internal_iscompletetask());
  }
  if (from.callnum() != 0) {
    _internal_set_callnum(from._internal_callnum());
  }
}

void SCNoticeInfoChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCNoticeInfoChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNoticeInfoChange::CopyFrom(const SCNoticeInfoChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCNoticeInfoChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNoticeInfoChange::IsInitialized() const {
  return true;
}

void SCNoticeInfoChange::InternalSwap(SCNoticeInfoChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  missilelist_.InternalSwap(&other->missilelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNoticeInfoChange, callnum_)
      + sizeof(SCNoticeInfoChange::callnum_)
      - PROTOBUF_FIELD_OFFSET(SCNoticeInfoChange, iscompletetask_)>(
          reinterpret_cast<char*>(&iscompletetask_),
          reinterpret_cast<char*>(&other->iscompletetask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNoticeInfoChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProsInfo::_Internal {
 public:
};

ProsInfo::ProsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ProsInfo)
}
ProsInfo::ProsInfo(const ProsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ProsInfo)
}

void ProsInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

ProsInfo::~ProsInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.ProsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProsInfo::ArenaDtor(void* object) {
  ProsInfo* _this = reinterpret_cast< ProsInfo* >(object);
  (void)_this;
}
void ProsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProsInfo& ProsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProsInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ProsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ProsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ProsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 change = 2;
  if (this->change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_change(), target);
  }

  // int32 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ProsInfo)
  return target;
}

size_t ProsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ProsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 change = 2;
  if (this->change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change());
  }

  // int32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ProsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ProsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ProsInfo)
    MergeFrom(*source);
  }
}

void ProsInfo::MergeFrom(const ProsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ProsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.change() != 0) {
    _internal_set_change(from._internal_change());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ProsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ProsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProsInfo::CopyFrom(const ProsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ProsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProsInfo::IsInitialized() const {
  return true;
}

void ProsInfo::InternalSwap(ProsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProsInfo, value_)
      + sizeof(ProsInfo::value_)
      - PROTOBUF_FIELD_OFFSET(ProsInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNoticeHallProsChange::_Internal {
 public:
};

SCNoticeHallProsChange::SCNoticeHallProsChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCNoticeHallProsChange)
}
SCNoticeHallProsChange::SCNoticeHallProsChange(const SCNoticeHallProsChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proslist_(from.proslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_ = from.chair_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCNoticeHallProsChange)
}

void SCNoticeHallProsChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNoticeHallProsChange_PlaneWar_2eproto.base);
  chair_ = 0;
}

SCNoticeHallProsChange::~SCNoticeHallProsChange() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCNoticeHallProsChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNoticeHallProsChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNoticeHallProsChange::ArenaDtor(void* object) {
  SCNoticeHallProsChange* _this = reinterpret_cast< SCNoticeHallProsChange* >(object);
  (void)_this;
}
void SCNoticeHallProsChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNoticeHallProsChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNoticeHallProsChange& SCNoticeHallProsChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNoticeHallProsChange_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCNoticeHallProsChange::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCNoticeHallProsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proslist_.Clear();
  chair_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNoticeHallProsChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.ProsInfo prosList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNoticeHallProsChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCNoticeHallProsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // repeated .PlaneWar.ProsInfo prosList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_proslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCNoticeHallProsChange)
  return target;
}

size_t SCNoticeHallProsChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCNoticeHallProsChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.ProsInfo prosList = 2;
  total_size += 1UL * this->_internal_proslist_size();
  for (const auto& msg : this->proslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNoticeHallProsChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCNoticeHallProsChange)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNoticeHallProsChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNoticeHallProsChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCNoticeHallProsChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCNoticeHallProsChange)
    MergeFrom(*source);
  }
}

void SCNoticeHallProsChange::MergeFrom(const SCNoticeHallProsChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCNoticeHallProsChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proslist_.MergeFrom(from.proslist_);
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCNoticeHallProsChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCNoticeHallProsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNoticeHallProsChange::CopyFrom(const SCNoticeHallProsChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCNoticeHallProsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNoticeHallProsChange::IsInitialized() const {
  return true;
}

void SCNoticeHallProsChange::InternalSwap(SCNoticeHallProsChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proslist_.InternalSwap(&other->proslist_);
  swap(chair_, other->chair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNoticeHallProsChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimingMonster::_Internal {
 public:
};

TimingMonster::TimingMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.TimingMonster)
}
TimingMonster::TimingMonster(const TimingMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.TimingMonster)
}

void TimingMonster::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sec_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(id_));
}

TimingMonster::~TimingMonster() {
  // @@protoc_insertion_point(destructor:PlaneWar.TimingMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimingMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimingMonster::ArenaDtor(void* object) {
  TimingMonster* _this = reinterpret_cast< TimingMonster* >(object);
  (void)_this;
}
void TimingMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimingMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimingMonster& TimingMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimingMonster_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void TimingMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.TimingMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimingMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimingMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.TimingMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sec = 1;
  if (this->sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sec(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.TimingMonster)
  return target;
}

size_t TimingMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.TimingMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sec = 1;
  if (this->sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimingMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.TimingMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const TimingMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimingMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.TimingMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.TimingMonster)
    MergeFrom(*source);
  }
}

void TimingMonster::MergeFrom(const TimingMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.TimingMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void TimingMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.TimingMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingMonster::CopyFrom(const TimingMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.TimingMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingMonster::IsInitialized() const {
  return true;
}

void TimingMonster::InternalSwap(TimingMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimingMonster, id_)
      + sizeof(TimingMonster::id_)
      - PROTOBUF_FIELD_OFFSET(TimingMonster, sec_)>(
          reinterpret_cast<char*>(&sec_),
          reinterpret_cast<char*>(&other->sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimingMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNoticeTimingMonster::_Internal {
 public:
};

SCNoticeTimingMonster::SCNoticeTimingMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monster_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCNoticeTimingMonster)
}
SCNoticeTimingMonster::SCNoticeTimingMonster(const SCNoticeTimingMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monster_list_(from.monster_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCNoticeTimingMonster)
}

void SCNoticeTimingMonster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNoticeTimingMonster_PlaneWar_2eproto.base);
}

SCNoticeTimingMonster::~SCNoticeTimingMonster() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCNoticeTimingMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNoticeTimingMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNoticeTimingMonster::ArenaDtor(void* object) {
  SCNoticeTimingMonster* _this = reinterpret_cast< SCNoticeTimingMonster* >(object);
  (void)_this;
}
void SCNoticeTimingMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNoticeTimingMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNoticeTimingMonster& SCNoticeTimingMonster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNoticeTimingMonster_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCNoticeTimingMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCNoticeTimingMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNoticeTimingMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.TimingMonster monster_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monster_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNoticeTimingMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCNoticeTimingMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.TimingMonster monster_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monster_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_monster_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCNoticeTimingMonster)
  return target;
}

size_t SCNoticeTimingMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCNoticeTimingMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.TimingMonster monster_list = 1;
  total_size += 1UL * this->_internal_monster_list_size();
  for (const auto& msg : this->monster_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNoticeTimingMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCNoticeTimingMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNoticeTimingMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNoticeTimingMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCNoticeTimingMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCNoticeTimingMonster)
    MergeFrom(*source);
  }
}

void SCNoticeTimingMonster::MergeFrom(const SCNoticeTimingMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCNoticeTimingMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monster_list_.MergeFrom(from.monster_list_);
}

void SCNoticeTimingMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCNoticeTimingMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNoticeTimingMonster::CopyFrom(const SCNoticeTimingMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCNoticeTimingMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNoticeTimingMonster::IsInitialized() const {
  return true;
}

void SCNoticeTimingMonster::InternalSwap(SCNoticeTimingMonster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monster_list_.InternalSwap(&other->monster_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNoticeTimingMonster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPiggyBankInfo::_Internal {
 public:
};

CSPiggyBankInfo::CSPiggyBankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSPiggyBankInfo)
}
CSPiggyBankInfo::CSPiggyBankInfo(const CSPiggyBankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isopen_ = from.isopen_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSPiggyBankInfo)
}

void CSPiggyBankInfo::SharedCtor() {
  isopen_ = false;
}

CSPiggyBankInfo::~CSPiggyBankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSPiggyBankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPiggyBankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPiggyBankInfo::ArenaDtor(void* object) {
  CSPiggyBankInfo* _this = reinterpret_cast< CSPiggyBankInfo* >(object);
  (void)_this;
}
void CSPiggyBankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPiggyBankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPiggyBankInfo& CSPiggyBankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPiggyBankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSPiggyBankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSPiggyBankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isopen_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPiggyBankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPiggyBankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSPiggyBankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isopen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSPiggyBankInfo)
  return target;
}

size_t CSPiggyBankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSPiggyBankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPiggyBankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSPiggyBankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPiggyBankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPiggyBankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSPiggyBankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSPiggyBankInfo)
    MergeFrom(*source);
  }
}

void CSPiggyBankInfo::MergeFrom(const CSPiggyBankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSPiggyBankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
}

void CSPiggyBankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSPiggyBankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPiggyBankInfo::CopyFrom(const CSPiggyBankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSPiggyBankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPiggyBankInfo::IsInitialized() const {
  return true;
}

void CSPiggyBankInfo::InternalSwap(CSPiggyBankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isopen_, other->isopen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPiggyBankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPiggyBankInfo::_Internal {
 public:
  static const ::PlaneWar::PiggyInfo& piggyinfo(const SCPiggyBankInfo* msg);
};

const ::PlaneWar::PiggyInfo&
SCPiggyBankInfo::_Internal::piggyinfo(const SCPiggyBankInfo* msg) {
  return *msg->piggyinfo_;
}
SCPiggyBankInfo::SCPiggyBankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPiggyBankInfo)
}
SCPiggyBankInfo::SCPiggyBankInfo(const SCPiggyBankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_piggyinfo()) {
    piggyinfo_ = new ::PlaneWar::PiggyInfo(*from.piggyinfo_);
  } else {
    piggyinfo_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&isopen_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(isopen_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPiggyBankInfo)
}

void SCPiggyBankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPiggyBankInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&piggyinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isopen_) -
      reinterpret_cast<char*>(&piggyinfo_)) + sizeof(isopen_));
}

SCPiggyBankInfo::~SCPiggyBankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPiggyBankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPiggyBankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete piggyinfo_;
}

void SCPiggyBankInfo::ArenaDtor(void* object) {
  SCPiggyBankInfo* _this = reinterpret_cast< SCPiggyBankInfo* >(object);
  (void)_this;
}
void SCPiggyBankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPiggyBankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPiggyBankInfo& SCPiggyBankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPiggyBankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPiggyBankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPiggyBankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && piggyinfo_ != nullptr) {
    delete piggyinfo_;
  }
  piggyinfo_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isopen_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(isopen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPiggyBankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOpen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PiggyInfo piggyInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_piggyinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPiggyBankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPiggyBankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // bool isOpen = 2;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isopen(), target);
  }

  // .PlaneWar.PiggyInfo piggyInfo = 3;
  if (this->has_piggyinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::piggyinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPiggyBankInfo)
  return target;
}

size_t SCPiggyBankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPiggyBankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PiggyInfo piggyInfo = 3;
  if (this->has_piggyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *piggyinfo_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // bool isOpen = 2;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPiggyBankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPiggyBankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPiggyBankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPiggyBankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPiggyBankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPiggyBankInfo)
    MergeFrom(*source);
  }
}

void SCPiggyBankInfo::MergeFrom(const SCPiggyBankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPiggyBankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_piggyinfo()) {
    _internal_mutable_piggyinfo()->::PlaneWar::PiggyInfo::MergeFrom(from._internal_piggyinfo());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
}

void SCPiggyBankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPiggyBankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPiggyBankInfo::CopyFrom(const SCPiggyBankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPiggyBankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPiggyBankInfo::IsInitialized() const {
  return true;
}

void SCPiggyBankInfo::InternalSwap(SCPiggyBankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPiggyBankInfo, isopen_)
      + sizeof(SCPiggyBankInfo::isopen_)
      - PROTOBUF_FIELD_OFFSET(SCPiggyBankInfo, piggyinfo_)>(
          reinterpret_cast<char*>(&piggyinfo_),
          reinterpret_cast<char*>(&other->piggyinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPiggyBankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PiggyReward::_Internal {
 public:
};

PiggyReward::PiggyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PiggyReward)
}
PiggyReward::PiggyReward(const PiggyReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&id_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PiggyReward)
}

void PiggyReward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reward_));
}

PiggyReward::~PiggyReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.PiggyReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiggyReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiggyReward::ArenaDtor(void* object) {
  PiggyReward* _this = reinterpret_cast< PiggyReward* >(object);
  (void)_this;
}
void PiggyReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiggyReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiggyReward& PiggyReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiggyReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PiggyReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PiggyReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiggyReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiggyReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PiggyReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PiggyReward)
  return target;
}

size_t PiggyReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PiggyReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiggyReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PiggyReward)
  GOOGLE_DCHECK_NE(&from, this);
  const PiggyReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiggyReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PiggyReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PiggyReward)
    MergeFrom(*source);
  }
}

void PiggyReward::MergeFrom(const PiggyReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PiggyReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void PiggyReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PiggyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiggyReward::CopyFrom(const PiggyReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PiggyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiggyReward::IsInitialized() const {
  return true;
}

void PiggyReward::InternalSwap(PiggyReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiggyReward, reward_)
      + sizeof(PiggyReward::reward_)
      - PROTOBUF_FIELD_OFFSET(PiggyReward, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiggyReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenPiggyBank::_Internal {
 public:
};

CSOpenPiggyBank::CSOpenPiggyBank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSOpenPiggyBank)
}
CSOpenPiggyBank::CSOpenPiggyBank(const CSOpenPiggyBank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSOpenPiggyBank)
}

void CSOpenPiggyBank::SharedCtor() {
}

CSOpenPiggyBank::~CSOpenPiggyBank() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSOpenPiggyBank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenPiggyBank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOpenPiggyBank::ArenaDtor(void* object) {
  CSOpenPiggyBank* _this = reinterpret_cast< CSOpenPiggyBank* >(object);
  (void)_this;
}
void CSOpenPiggyBank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenPiggyBank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenPiggyBank& CSOpenPiggyBank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenPiggyBank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSOpenPiggyBank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSOpenPiggyBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenPiggyBank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenPiggyBank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSOpenPiggyBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSOpenPiggyBank)
  return target;
}

size_t CSOpenPiggyBank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSOpenPiggyBank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenPiggyBank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSOpenPiggyBank)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenPiggyBank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenPiggyBank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSOpenPiggyBank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSOpenPiggyBank)
    MergeFrom(*source);
  }
}

void CSOpenPiggyBank::MergeFrom(const CSOpenPiggyBank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSOpenPiggyBank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSOpenPiggyBank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSOpenPiggyBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenPiggyBank::CopyFrom(const CSOpenPiggyBank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSOpenPiggyBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenPiggyBank::IsInitialized() const {
  return true;
}

void CSOpenPiggyBank::InternalSwap(CSOpenPiggyBank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenPiggyBank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenPiggyBank::_Internal {
 public:
};

SCOpenPiggyBank::SCOpenPiggyBank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCOpenPiggyBank)
}
SCOpenPiggyBank::SCOpenPiggyBank(const SCOpenPiggyBank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewardlist_(from.rewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCOpenPiggyBank)
}

void SCOpenPiggyBank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenPiggyBank_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
}

SCOpenPiggyBank::~SCOpenPiggyBank() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCOpenPiggyBank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenPiggyBank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOpenPiggyBank::ArenaDtor(void* object) {
  SCOpenPiggyBank* _this = reinterpret_cast< SCOpenPiggyBank* >(object);
  (void)_this;
}
void SCOpenPiggyBank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenPiggyBank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenPiggyBank& SCOpenPiggyBank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenPiggyBank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCOpenPiggyBank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCOpenPiggyBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewardlist_.Clear();
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenPiggyBank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.PiggyReward rewardList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 curMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenPiggyBank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCOpenPiggyBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // repeated .PlaneWar.PiggyReward rewardList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rewardlist(i), target, stream);
  }

  // int32 curMoney = 3;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCOpenPiggyBank)
  return target;
}

size_t SCOpenPiggyBank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCOpenPiggyBank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PiggyReward rewardList = 2;
  total_size += 1UL * this->_internal_rewardlist_size();
  for (const auto& msg : this->rewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 curMoney = 3;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenPiggyBank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCOpenPiggyBank)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenPiggyBank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenPiggyBank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCOpenPiggyBank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCOpenPiggyBank)
    MergeFrom(*source);
  }
}

void SCOpenPiggyBank::MergeFrom(const SCOpenPiggyBank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCOpenPiggyBank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewardlist_.MergeFrom(from.rewardlist_);
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
}

void SCOpenPiggyBank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCOpenPiggyBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenPiggyBank::CopyFrom(const SCOpenPiggyBank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCOpenPiggyBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenPiggyBank::IsInitialized() const {
  return true;
}

void SCOpenPiggyBank::InternalSwap(SCOpenPiggyBank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rewardlist_.InternalSwap(&other->rewardlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCOpenPiggyBank, curmoney_)
      + sizeof(SCOpenPiggyBank::curmoney_)
      - PROTOBUF_FIELD_OFFSET(SCOpenPiggyBank, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenPiggyBank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPiggyBankOpenFinish::_Internal {
 public:
};

CSPiggyBankOpenFinish::CSPiggyBankOpenFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSPiggyBankOpenFinish)
}
CSPiggyBankOpenFinish::CSPiggyBankOpenFinish(const CSPiggyBankOpenFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSPiggyBankOpenFinish)
}

void CSPiggyBankOpenFinish::SharedCtor() {
}

CSPiggyBankOpenFinish::~CSPiggyBankOpenFinish() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSPiggyBankOpenFinish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPiggyBankOpenFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPiggyBankOpenFinish::ArenaDtor(void* object) {
  CSPiggyBankOpenFinish* _this = reinterpret_cast< CSPiggyBankOpenFinish* >(object);
  (void)_this;
}
void CSPiggyBankOpenFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPiggyBankOpenFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPiggyBankOpenFinish& CSPiggyBankOpenFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPiggyBankOpenFinish_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSPiggyBankOpenFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSPiggyBankOpenFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPiggyBankOpenFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPiggyBankOpenFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSPiggyBankOpenFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSPiggyBankOpenFinish)
  return target;
}

size_t CSPiggyBankOpenFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSPiggyBankOpenFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPiggyBankOpenFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSPiggyBankOpenFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPiggyBankOpenFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPiggyBankOpenFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSPiggyBankOpenFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSPiggyBankOpenFinish)
    MergeFrom(*source);
  }
}

void CSPiggyBankOpenFinish::MergeFrom(const CSPiggyBankOpenFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSPiggyBankOpenFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSPiggyBankOpenFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSPiggyBankOpenFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPiggyBankOpenFinish::CopyFrom(const CSPiggyBankOpenFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSPiggyBankOpenFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPiggyBankOpenFinish::IsInitialized() const {
  return true;
}

void CSPiggyBankOpenFinish::InternalSwap(CSPiggyBankOpenFinish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPiggyBankOpenFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPiggyBankOpenFinish::_Internal {
 public:
};

SCPiggyBankOpenFinish::SCPiggyBankOpenFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPiggyBankOpenFinish)
}
SCPiggyBankOpenFinish::SCPiggyBankOpenFinish(const SCPiggyBankOpenFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_ = from.chair_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPiggyBankOpenFinish)
}

void SCPiggyBankOpenFinish::SharedCtor() {
  chair_ = 0;
}

SCPiggyBankOpenFinish::~SCPiggyBankOpenFinish() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPiggyBankOpenFinish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPiggyBankOpenFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPiggyBankOpenFinish::ArenaDtor(void* object) {
  SCPiggyBankOpenFinish* _this = reinterpret_cast< SCPiggyBankOpenFinish* >(object);
  (void)_this;
}
void SCPiggyBankOpenFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPiggyBankOpenFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPiggyBankOpenFinish& SCPiggyBankOpenFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPiggyBankOpenFinish_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPiggyBankOpenFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPiggyBankOpenFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPiggyBankOpenFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPiggyBankOpenFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPiggyBankOpenFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPiggyBankOpenFinish)
  return target;
}

size_t SCPiggyBankOpenFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPiggyBankOpenFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPiggyBankOpenFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPiggyBankOpenFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPiggyBankOpenFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPiggyBankOpenFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPiggyBankOpenFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPiggyBankOpenFinish)
    MergeFrom(*source);
  }
}

void SCPiggyBankOpenFinish::MergeFrom(const SCPiggyBankOpenFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPiggyBankOpenFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCPiggyBankOpenFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPiggyBankOpenFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPiggyBankOpenFinish::CopyFrom(const SCPiggyBankOpenFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPiggyBankOpenFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPiggyBankOpenFinish::IsInitialized() const {
  return true;
}

void SCPiggyBankOpenFinish::InternalSwap(SCPiggyBankOpenFinish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_, other->chair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPiggyBankOpenFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPiggyBankChangeNotify::_Internal {
 public:
  static const ::PlaneWar::PiggyInfo& piggyinfo(const SCPiggyBankChangeNotify* msg);
};

const ::PlaneWar::PiggyInfo&
SCPiggyBankChangeNotify::_Internal::piggyinfo(const SCPiggyBankChangeNotify* msg) {
  return *msg->piggyinfo_;
}
SCPiggyBankChangeNotify::SCPiggyBankChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPiggyBankChangeNotify)
}
SCPiggyBankChangeNotify::SCPiggyBankChangeNotify(const SCPiggyBankChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_piggyinfo()) {
    piggyinfo_ = new ::PlaneWar::PiggyInfo(*from.piggyinfo_);
  } else {
    piggyinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPiggyBankChangeNotify)
}

void SCPiggyBankChangeNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPiggyBankChangeNotify_PlaneWar_2eproto.base);
  piggyinfo_ = nullptr;
}

SCPiggyBankChangeNotify::~SCPiggyBankChangeNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPiggyBankChangeNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPiggyBankChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete piggyinfo_;
}

void SCPiggyBankChangeNotify::ArenaDtor(void* object) {
  SCPiggyBankChangeNotify* _this = reinterpret_cast< SCPiggyBankChangeNotify* >(object);
  (void)_this;
}
void SCPiggyBankChangeNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPiggyBankChangeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPiggyBankChangeNotify& SCPiggyBankChangeNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPiggyBankChangeNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPiggyBankChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPiggyBankChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && piggyinfo_ != nullptr) {
    delete piggyinfo_;
  }
  piggyinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPiggyBankChangeNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.PiggyInfo piggyInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_piggyinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPiggyBankChangeNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPiggyBankChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.PiggyInfo piggyInfo = 1;
  if (this->has_piggyinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::piggyinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPiggyBankChangeNotify)
  return target;
}

size_t SCPiggyBankChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPiggyBankChangeNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PiggyInfo piggyInfo = 1;
  if (this->has_piggyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *piggyinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPiggyBankChangeNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPiggyBankChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPiggyBankChangeNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPiggyBankChangeNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPiggyBankChangeNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPiggyBankChangeNotify)
    MergeFrom(*source);
  }
}

void SCPiggyBankChangeNotify::MergeFrom(const SCPiggyBankChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPiggyBankChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_piggyinfo()) {
    _internal_mutable_piggyinfo()->::PlaneWar::PiggyInfo::MergeFrom(from._internal_piggyinfo());
  }
}

void SCPiggyBankChangeNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPiggyBankChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPiggyBankChangeNotify::CopyFrom(const SCPiggyBankChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPiggyBankChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPiggyBankChangeNotify::IsInitialized() const {
  return true;
}

void SCPiggyBankChangeNotify::InternalSwap(SCPiggyBankChangeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(piggyinfo_, other->piggyinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPiggyBankChangeNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetPersonalPoolEnable::_Internal {
 public:
};

CSSetPersonalPoolEnable::CSSetPersonalPoolEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSetPersonalPoolEnable)
}
CSSetPersonalPoolEnable::CSSetPersonalPoolEnable(const CSSetPersonalPoolEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSetPersonalPoolEnable)
}

void CSSetPersonalPoolEnable::SharedCtor() {
  enable_ = false;
}

CSSetPersonalPoolEnable::~CSSetPersonalPoolEnable() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSetPersonalPoolEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetPersonalPoolEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetPersonalPoolEnable::ArenaDtor(void* object) {
  CSSetPersonalPoolEnable* _this = reinterpret_cast< CSSetPersonalPoolEnable* >(object);
  (void)_this;
}
void CSSetPersonalPoolEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetPersonalPoolEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetPersonalPoolEnable& CSSetPersonalPoolEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetPersonalPoolEnable_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSetPersonalPoolEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSetPersonalPoolEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetPersonalPoolEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetPersonalPoolEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSetPersonalPoolEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSetPersonalPoolEnable)
  return target;
}

size_t CSSetPersonalPoolEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSetPersonalPoolEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetPersonalPoolEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSetPersonalPoolEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetPersonalPoolEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetPersonalPoolEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSetPersonalPoolEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSetPersonalPoolEnable)
    MergeFrom(*source);
  }
}

void CSSetPersonalPoolEnable::MergeFrom(const CSSetPersonalPoolEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSetPersonalPoolEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void CSSetPersonalPoolEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSetPersonalPoolEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetPersonalPoolEnable::CopyFrom(const CSSetPersonalPoolEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSetPersonalPoolEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetPersonalPoolEnable::IsInitialized() const {
  return true;
}

void CSSetPersonalPoolEnable::InternalSwap(CSSetPersonalPoolEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetPersonalPoolEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetPersonalPoolEnable::_Internal {
 public:
};

SCSetPersonalPoolEnable::SCSetPersonalPoolEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSetPersonalPoolEnable)
}
SCSetPersonalPoolEnable::SCSetPersonalPoolEnable(const SCSetPersonalPoolEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSetPersonalPoolEnable)
}

void SCSetPersonalPoolEnable::SharedCtor() {
  enable_ = false;
}

SCSetPersonalPoolEnable::~SCSetPersonalPoolEnable() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSetPersonalPoolEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetPersonalPoolEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetPersonalPoolEnable::ArenaDtor(void* object) {
  SCSetPersonalPoolEnable* _this = reinterpret_cast< SCSetPersonalPoolEnable* >(object);
  (void)_this;
}
void SCSetPersonalPoolEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetPersonalPoolEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetPersonalPoolEnable& SCSetPersonalPoolEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetPersonalPoolEnable_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSetPersonalPoolEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSetPersonalPoolEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetPersonalPoolEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetPersonalPoolEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSetPersonalPoolEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSetPersonalPoolEnable)
  return target;
}

size_t SCSetPersonalPoolEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSetPersonalPoolEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetPersonalPoolEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSetPersonalPoolEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetPersonalPoolEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetPersonalPoolEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSetPersonalPoolEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSetPersonalPoolEnable)
    MergeFrom(*source);
  }
}

void SCSetPersonalPoolEnable::MergeFrom(const SCSetPersonalPoolEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSetPersonalPoolEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void SCSetPersonalPoolEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSetPersonalPoolEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetPersonalPoolEnable::CopyFrom(const SCSetPersonalPoolEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSetPersonalPoolEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetPersonalPoolEnable::IsInitialized() const {
  return true;
}

void SCSetPersonalPoolEnable::InternalSwap(SCSetPersonalPoolEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetPersonalPoolEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPersonalPoolInfo::_Internal {
 public:
};

CSPersonalPoolInfo::CSPersonalPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSPersonalPoolInfo)
}
CSPersonalPoolInfo::CSPersonalPoolInfo(const CSPersonalPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isopen_ = from.isopen_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSPersonalPoolInfo)
}

void CSPersonalPoolInfo::SharedCtor() {
  isopen_ = false;
}

CSPersonalPoolInfo::~CSPersonalPoolInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSPersonalPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPersonalPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPersonalPoolInfo::ArenaDtor(void* object) {
  CSPersonalPoolInfo* _this = reinterpret_cast< CSPersonalPoolInfo* >(object);
  (void)_this;
}
void CSPersonalPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPersonalPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPersonalPoolInfo& CSPersonalPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPersonalPoolInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSPersonalPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSPersonalPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isopen_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPersonalPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPersonalPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSPersonalPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isopen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSPersonalPoolInfo)
  return target;
}

size_t CSPersonalPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSPersonalPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPersonalPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSPersonalPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPersonalPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPersonalPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSPersonalPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSPersonalPoolInfo)
    MergeFrom(*source);
  }
}

void CSPersonalPoolInfo::MergeFrom(const CSPersonalPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSPersonalPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
}

void CSPersonalPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSPersonalPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPersonalPoolInfo::CopyFrom(const CSPersonalPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSPersonalPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPersonalPoolInfo::IsInitialized() const {
  return true;
}

void CSPersonalPoolInfo::InternalSwap(CSPersonalPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isopen_, other->isopen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPersonalPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PersonalPoolReward::_Internal {
 public:
};

PersonalPoolReward::PersonalPoolReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PersonalPoolReward)
}
PersonalPoolReward::PersonalPoolReward(const PersonalPoolReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PersonalPoolReward)
}

void PersonalPoolReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersonalPoolReward_PlaneWar_2eproto.base);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_));
}

PersonalPoolReward::~PersonalPoolReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.PersonalPoolReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersonalPoolReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PersonalPoolReward::ArenaDtor(void* object) {
  PersonalPoolReward* _this = reinterpret_cast< PersonalPoolReward* >(object);
  (void)_this;
}
void PersonalPoolReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersonalPoolReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersonalPoolReward& PersonalPoolReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersonalPoolReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PersonalPoolReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PersonalPoolReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonalPoolReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PersonalPoolReward.clientID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PersonalPoolReward.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersonalPoolReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PersonalPoolReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // string clientID = 4;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PersonalPoolReward.clientID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clientid(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PersonalPoolReward.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PersonalPoolReward)
  return target;
}

size_t PersonalPoolReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PersonalPoolReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientID = 4;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonalPoolReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PersonalPoolReward)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonalPoolReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersonalPoolReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PersonalPoolReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PersonalPoolReward)
    MergeFrom(*source);
  }
}

void PersonalPoolReward::MergeFrom(const PersonalPoolReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PersonalPoolReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientid().size() > 0) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void PersonalPoolReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PersonalPoolReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalPoolReward::CopyFrom(const PersonalPoolReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PersonalPoolReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalPoolReward::IsInitialized() const {
  return true;
}

void PersonalPoolReward::InternalSwap(PersonalPoolReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonalPoolReward, num_)
      + sizeof(PersonalPoolReward::num_)
      - PROTOBUF_FIELD_OFFSET(PersonalPoolReward, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonalPoolReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PersonalPoolLevelInfo::_Internal {
 public:
};

PersonalPoolLevelInfo::PersonalPoolLevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PersonalPoolLevelInfo)
}
PersonalPoolLevelInfo::PersonalPoolLevelInfo(const PersonalPoolLevelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewardlist_(from.rewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&level_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PersonalPoolLevelInfo)
}

void PersonalPoolLevelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersonalPoolLevelInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&level_)) + sizeof(reward_));
}

PersonalPoolLevelInfo::~PersonalPoolLevelInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PersonalPoolLevelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersonalPoolLevelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PersonalPoolLevelInfo::ArenaDtor(void* object) {
  PersonalPoolLevelInfo* _this = reinterpret_cast< PersonalPoolLevelInfo* >(object);
  (void)_this;
}
void PersonalPoolLevelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersonalPoolLevelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersonalPoolLevelInfo& PersonalPoolLevelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersonalPoolLevelInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PersonalPoolLevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PersonalPoolLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewardlist_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&level_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonalPoolLevelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.PersonalPoolReward rewardList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersonalPoolLevelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PersonalPoolLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 targetValue = 2;
  if (this->targetvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetvalue(), target);
  }

  // repeated .PlaneWar.PersonalPoolReward rewardList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewardlist(i), target, stream);
  }

  // bool reward = 4;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PersonalPoolLevelInfo)
  return target;
}

size_t PersonalPoolLevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PersonalPoolLevelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PersonalPoolReward rewardList = 3;
  total_size += 1UL * this->_internal_rewardlist_size();
  for (const auto& msg : this->rewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 targetValue = 2;
  if (this->targetvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetvalue());
  }

  // bool reward = 4;
  if (this->reward() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonalPoolLevelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PersonalPoolLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonalPoolLevelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersonalPoolLevelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PersonalPoolLevelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PersonalPoolLevelInfo)
    MergeFrom(*source);
  }
}

void PersonalPoolLevelInfo::MergeFrom(const PersonalPoolLevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PersonalPoolLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewardlist_.MergeFrom(from.rewardlist_);
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.targetvalue() != 0) {
    _internal_set_targetvalue(from._internal_targetvalue());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void PersonalPoolLevelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PersonalPoolLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalPoolLevelInfo::CopyFrom(const PersonalPoolLevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PersonalPoolLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalPoolLevelInfo::IsInitialized() const {
  return true;
}

void PersonalPoolLevelInfo::InternalSwap(PersonalPoolLevelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rewardlist_.InternalSwap(&other->rewardlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonalPoolLevelInfo, reward_)
      + sizeof(PersonalPoolLevelInfo::reward_)
      - PROTOBUF_FIELD_OFFSET(PersonalPoolLevelInfo, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonalPoolLevelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PersonalPoolLuckyInfo::_Internal {
 public:
};

PersonalPoolLuckyInfo::PersonalPoolLuckyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PersonalPoolLuckyInfo)
}
PersonalPoolLuckyInfo::PersonalPoolLuckyInfo(const PersonalPoolLuckyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&total_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PersonalPoolLuckyInfo)
}

void PersonalPoolLuckyInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&total_)) + sizeof(cost_));
}

PersonalPoolLuckyInfo::~PersonalPoolLuckyInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PersonalPoolLuckyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersonalPoolLuckyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PersonalPoolLuckyInfo::ArenaDtor(void* object) {
  PersonalPoolLuckyInfo* _this = reinterpret_cast< PersonalPoolLuckyInfo* >(object);
  (void)_this;
}
void PersonalPoolLuckyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersonalPoolLuckyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersonalPoolLuckyInfo& PersonalPoolLuckyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersonalPoolLuckyInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PersonalPoolLuckyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PersonalPoolLuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&total_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonalPoolLuckyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersonalPoolLuckyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PersonalPoolLuckyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total(), target);
  }

  // int32 cost = 2;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PersonalPoolLuckyInfo)
  return target;
}

size_t PersonalPoolLuckyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PersonalPoolLuckyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 cost = 2;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersonalPoolLuckyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PersonalPoolLuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PersonalPoolLuckyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersonalPoolLuckyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PersonalPoolLuckyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PersonalPoolLuckyInfo)
    MergeFrom(*source);
  }
}

void PersonalPoolLuckyInfo::MergeFrom(const PersonalPoolLuckyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PersonalPoolLuckyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void PersonalPoolLuckyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PersonalPoolLuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalPoolLuckyInfo::CopyFrom(const PersonalPoolLuckyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PersonalPoolLuckyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalPoolLuckyInfo::IsInitialized() const {
  return true;
}

void PersonalPoolLuckyInfo::InternalSwap(PersonalPoolLuckyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonalPoolLuckyInfo, cost_)
      + sizeof(PersonalPoolLuckyInfo::cost_)
      - PROTOBUF_FIELD_OFFSET(PersonalPoolLuckyInfo, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonalPoolLuckyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPersonalPoolInfo::_Internal {
 public:
  static const ::PlaneWar::PersonalPoolLuckyInfo& luckyinfo(const SCPersonalPoolInfo* msg);
};

const ::PlaneWar::PersonalPoolLuckyInfo&
SCPersonalPoolInfo::_Internal::luckyinfo(const SCPersonalPoolInfo* msg) {
  return *msg->luckyinfo_;
}
SCPersonalPoolInfo::SCPersonalPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  levellist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPersonalPoolInfo)
}
SCPersonalPoolInfo::SCPersonalPoolInfo(const SCPersonalPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      levellist_(from.levellist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_luckyinfo()) {
    luckyinfo_ = new ::PlaneWar::PersonalPoolLuckyInfo(*from.luckyinfo_);
  } else {
    luckyinfo_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curlevel_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(curlevel_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPersonalPoolInfo)
}

void SCPersonalPoolInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPersonalPoolInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&luckyinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curlevel_) -
      reinterpret_cast<char*>(&luckyinfo_)) + sizeof(curlevel_));
}

SCPersonalPoolInfo::~SCPersonalPoolInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPersonalPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPersonalPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete luckyinfo_;
}

void SCPersonalPoolInfo::ArenaDtor(void* object) {
  SCPersonalPoolInfo* _this = reinterpret_cast< SCPersonalPoolInfo* >(object);
  (void)_this;
}
void SCPersonalPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPersonalPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPersonalPoolInfo& SCPersonalPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPersonalPoolInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPersonalPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPersonalPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levellist_.Clear();
  if (GetArena() == nullptr && luckyinfo_ != nullptr) {
    delete luckyinfo_;
  }
  luckyinfo_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curlevel_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPersonalPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOpen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 poolValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          poolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          curlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.PersonalPoolLevelInfo levelList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_levellist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PersonalPoolLuckyInfo luckyInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_luckyinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPersonalPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPersonalPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // bool isOpen = 2;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isopen(), target);
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable(), target);
  }

  // int32 poolValue = 4;
  if (this->poolvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_poolvalue(), target);
  }

  // int32 maxValue = 5;
  if (this->maxvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxvalue(), target);
  }

  // int32 curLevel = 6;
  if (this->curlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_curlevel(), target);
  }

  // repeated .PlaneWar.PersonalPoolLevelInfo levelList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_levellist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_levellist(i), target, stream);
  }

  // .PlaneWar.PersonalPoolLuckyInfo luckyInfo = 8;
  if (this->has_luckyinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::luckyinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPersonalPoolInfo)
  return target;
}

size_t SCPersonalPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPersonalPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PersonalPoolLevelInfo levelList = 7;
  total_size += 1UL * this->_internal_levellist_size();
  for (const auto& msg : this->levellist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.PersonalPoolLuckyInfo luckyInfo = 8;
  if (this->has_luckyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *luckyinfo_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // bool isOpen = 2;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 poolValue = 4;
  if (this->poolvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poolvalue());
  }

  // int32 maxValue = 5;
  if (this->maxvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxvalue());
  }

  // int32 curLevel = 6;
  if (this->curlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curlevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPersonalPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPersonalPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPersonalPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPersonalPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPersonalPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPersonalPoolInfo)
    MergeFrom(*source);
  }
}

void SCPersonalPoolInfo::MergeFrom(const SCPersonalPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPersonalPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levellist_.MergeFrom(from.levellist_);
  if (from.has_luckyinfo()) {
    _internal_mutable_luckyinfo()->::PlaneWar::PersonalPoolLuckyInfo::MergeFrom(from._internal_luckyinfo());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.poolvalue() != 0) {
    _internal_set_poolvalue(from._internal_poolvalue());
  }
  if (from.maxvalue() != 0) {
    _internal_set_maxvalue(from._internal_maxvalue());
  }
  if (from.curlevel() != 0) {
    _internal_set_curlevel(from._internal_curlevel());
  }
}

void SCPersonalPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPersonalPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPersonalPoolInfo::CopyFrom(const SCPersonalPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPersonalPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPersonalPoolInfo::IsInitialized() const {
  return true;
}

void SCPersonalPoolInfo::InternalSwap(SCPersonalPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  levellist_.InternalSwap(&other->levellist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPersonalPoolInfo, curlevel_)
      + sizeof(SCPersonalPoolInfo::curlevel_)
      - PROTOBUF_FIELD_OFFSET(SCPersonalPoolInfo, luckyinfo_)>(
          reinterpret_cast<char*>(&luckyinfo_),
          reinterpret_cast<char*>(&other->luckyinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPersonalPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDrawPersonalPool::_Internal {
 public:
  static const ::PlaneWar::PersonalPoolReward& reward(const CSDrawPersonalPool* msg);
  static const ::PlaneWar::PersonalPoolReward& missreward(const CSDrawPersonalPool* msg);
};

const ::PlaneWar::PersonalPoolReward&
CSDrawPersonalPool::_Internal::reward(const CSDrawPersonalPool* msg) {
  return *msg->reward_;
}
const ::PlaneWar::PersonalPoolReward&
CSDrawPersonalPool::_Internal::missreward(const CSDrawPersonalPool* msg) {
  return *msg->missreward_;
}
CSDrawPersonalPool::CSDrawPersonalPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSDrawPersonalPool)
}
CSDrawPersonalPool::CSDrawPersonalPool(const CSDrawPersonalPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::PlaneWar::PersonalPoolReward(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  if (from._internal_has_missreward()) {
    missreward_ = new ::PlaneWar::PersonalPoolReward(*from.missreward_);
  } else {
    missreward_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSDrawPersonalPool)
}

void CSDrawPersonalPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSDrawPersonalPool_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(curmoney_));
}

CSDrawPersonalPool::~CSDrawPersonalPool() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSDrawPersonalPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDrawPersonalPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
  if (this != internal_default_instance()) delete missreward_;
}

void CSDrawPersonalPool::ArenaDtor(void* object) {
  CSDrawPersonalPool* _this = reinterpret_cast< CSDrawPersonalPool* >(object);
  (void)_this;
}
void CSDrawPersonalPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDrawPersonalPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDrawPersonalPool& CSDrawPersonalPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDrawPersonalPool_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSDrawPersonalPool::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSDrawPersonalPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  if (GetArena() == nullptr && missreward_ != nullptr) {
    delete missreward_;
  }
  missreward_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDrawPersonalPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PersonalPoolReward reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PersonalPoolReward missReward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_missreward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upgradeCost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          upgradecost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDrawPersonalPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSDrawPersonalPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // .PlaneWar.PersonalPoolReward reward = 2;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reward(this), target, stream);
  }

  // .PlaneWar.PersonalPoolReward missReward = 3;
  if (this->has_missreward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::missreward(this), target, stream);
  }

  // int64 curMoney = 4;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_curmoney(), target);
  }

  // int32 upgradeCost = 5;
  if (this->upgradecost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_upgradecost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSDrawPersonalPool)
  return target;
}

size_t CSDrawPersonalPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSDrawPersonalPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PersonalPoolReward reward = 2;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // .PlaneWar.PersonalPoolReward missReward = 3;
  if (this->has_missreward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *missreward_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 upgradeCost = 5;
  if (this->upgradecost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upgradecost());
  }

  // int64 curMoney = 4;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDrawPersonalPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSDrawPersonalPool)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDrawPersonalPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDrawPersonalPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSDrawPersonalPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSDrawPersonalPool)
    MergeFrom(*source);
  }
}

void CSDrawPersonalPool::MergeFrom(const CSDrawPersonalPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSDrawPersonalPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::PlaneWar::PersonalPoolReward::MergeFrom(from._internal_reward());
  }
  if (from.has_missreward()) {
    _internal_mutable_missreward()->::PlaneWar::PersonalPoolReward::MergeFrom(from._internal_missreward());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.upgradecost() != 0) {
    _internal_set_upgradecost(from._internal_upgradecost());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
}

void CSDrawPersonalPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSDrawPersonalPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDrawPersonalPool::CopyFrom(const CSDrawPersonalPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSDrawPersonalPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDrawPersonalPool::IsInitialized() const {
  return true;
}

void CSDrawPersonalPool::InternalSwap(CSDrawPersonalPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDrawPersonalPool, curmoney_)
      + sizeof(CSDrawPersonalPool::curmoney_)
      - PROTOBUF_FIELD_OFFSET(CSDrawPersonalPool, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDrawPersonalPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUpgradePoolReward::_Internal {
 public:
};

CSUpgradePoolReward::CSUpgradePoolReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUpgradePoolReward)
}
CSUpgradePoolReward::CSUpgradePoolReward(const CSUpgradePoolReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isupgrade_ = from.isupgrade_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUpgradePoolReward)
}

void CSUpgradePoolReward::SharedCtor() {
  isupgrade_ = false;
}

CSUpgradePoolReward::~CSUpgradePoolReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUpgradePoolReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUpgradePoolReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUpgradePoolReward::ArenaDtor(void* object) {
  CSUpgradePoolReward* _this = reinterpret_cast< CSUpgradePoolReward* >(object);
  (void)_this;
}
void CSUpgradePoolReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUpgradePoolReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUpgradePoolReward& CSUpgradePoolReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUpgradePoolReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUpgradePoolReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUpgradePoolReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isupgrade_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUpgradePoolReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isUpgrade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isupgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUpgradePoolReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUpgradePoolReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isUpgrade = 1;
  if (this->isupgrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isupgrade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUpgradePoolReward)
  return target;
}

size_t CSUpgradePoolReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUpgradePoolReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isUpgrade = 1;
  if (this->isupgrade() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUpgradePoolReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUpgradePoolReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUpgradePoolReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUpgradePoolReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUpgradePoolReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUpgradePoolReward)
    MergeFrom(*source);
  }
}

void CSUpgradePoolReward::MergeFrom(const CSUpgradePoolReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUpgradePoolReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isupgrade() != 0) {
    _internal_set_isupgrade(from._internal_isupgrade());
  }
}

void CSUpgradePoolReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUpgradePoolReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUpgradePoolReward::CopyFrom(const CSUpgradePoolReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUpgradePoolReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpgradePoolReward::IsInitialized() const {
  return true;
}

void CSUpgradePoolReward::InternalSwap(CSUpgradePoolReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isupgrade_, other->isupgrade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUpgradePoolReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUpgradePoolReward::_Internal {
 public:
  static const ::PlaneWar::PersonalPoolReward& basereward(const SCUpgradePoolReward* msg);
  static const ::PlaneWar::PersonalPoolReward& extrareward(const SCUpgradePoolReward* msg);
};

const ::PlaneWar::PersonalPoolReward&
SCUpgradePoolReward::_Internal::basereward(const SCUpgradePoolReward* msg) {
  return *msg->basereward_;
}
const ::PlaneWar::PersonalPoolReward&
SCUpgradePoolReward::_Internal::extrareward(const SCUpgradePoolReward* msg) {
  return *msg->extrareward_;
}
SCUpgradePoolReward::SCUpgradePoolReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUpgradePoolReward)
}
SCUpgradePoolReward::SCUpgradePoolReward(const SCUpgradePoolReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basereward()) {
    basereward_ = new ::PlaneWar::PersonalPoolReward(*from.basereward_);
  } else {
    basereward_ = nullptr;
  }
  if (from._internal_has_extrareward()) {
    extrareward_ = new ::PlaneWar::PersonalPoolReward(*from.extrareward_);
  } else {
    extrareward_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&addluckyvalue_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(addluckyvalue_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUpgradePoolReward)
}

void SCUpgradePoolReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUpgradePoolReward_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basereward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addluckyvalue_) -
      reinterpret_cast<char*>(&basereward_)) + sizeof(addluckyvalue_));
}

SCUpgradePoolReward::~SCUpgradePoolReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUpgradePoolReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUpgradePoolReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basereward_;
  if (this != internal_default_instance()) delete extrareward_;
}

void SCUpgradePoolReward::ArenaDtor(void* object) {
  SCUpgradePoolReward* _this = reinterpret_cast< SCUpgradePoolReward* >(object);
  (void)_this;
}
void SCUpgradePoolReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUpgradePoolReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUpgradePoolReward& SCUpgradePoolReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUpgradePoolReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUpgradePoolReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUpgradePoolReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && basereward_ != nullptr) {
    delete basereward_;
  }
  basereward_ = nullptr;
  if (GetArena() == nullptr && extrareward_ != nullptr) {
    delete extrareward_;
  }
  extrareward_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addluckyvalue_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(addluckyvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUpgradePoolReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PersonalPoolReward baseReward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_basereward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PersonalPoolReward extraReward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrareward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addLuckyValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          addluckyvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUpgradePoolReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUpgradePoolReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // int64 curMoney = 3;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_curmoney(), target);
  }

  // .PlaneWar.PersonalPoolReward baseReward = 4;
  if (this->has_basereward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::basereward(this), target, stream);
  }

  // .PlaneWar.PersonalPoolReward extraReward = 5;
  if (this->has_extrareward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::extrareward(this), target, stream);
  }

  // int32 addLuckyValue = 6;
  if (this->addluckyvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_addluckyvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUpgradePoolReward)
  return target;
}

size_t SCUpgradePoolReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUpgradePoolReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PersonalPoolReward baseReward = 4;
  if (this->has_basereward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basereward_);
  }

  // .PlaneWar.PersonalPoolReward extraReward = 5;
  if (this->has_extrareward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extrareward_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int64 curMoney = 3;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  // int32 addLuckyValue = 6;
  if (this->addluckyvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addluckyvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUpgradePoolReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUpgradePoolReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUpgradePoolReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUpgradePoolReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUpgradePoolReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUpgradePoolReward)
    MergeFrom(*source);
  }
}

void SCUpgradePoolReward::MergeFrom(const SCUpgradePoolReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUpgradePoolReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basereward()) {
    _internal_mutable_basereward()->::PlaneWar::PersonalPoolReward::MergeFrom(from._internal_basereward());
  }
  if (from.has_extrareward()) {
    _internal_mutable_extrareward()->::PlaneWar::PersonalPoolReward::MergeFrom(from._internal_extrareward());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
  if (from.addluckyvalue() != 0) {
    _internal_set_addluckyvalue(from._internal_addluckyvalue());
  }
}

void SCUpgradePoolReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUpgradePoolReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpgradePoolReward::CopyFrom(const SCUpgradePoolReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUpgradePoolReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpgradePoolReward::IsInitialized() const {
  return true;
}

void SCUpgradePoolReward::InternalSwap(SCUpgradePoolReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUpgradePoolReward, addluckyvalue_)
      + sizeof(SCUpgradePoolReward::addluckyvalue_)
      - PROTOBUF_FIELD_OFFSET(SCUpgradePoolReward, basereward_)>(
          reinterpret_cast<char*>(&basereward_),
          reinterpret_cast<char*>(&other->basereward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUpgradePoolReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetPoolLuckyReward::_Internal {
 public:
};

CSGetPoolLuckyReward::CSGetPoolLuckyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetPoolLuckyReward)
}
CSGetPoolLuckyReward::CSGetPoolLuckyReward(const CSGetPoolLuckyReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetPoolLuckyReward)
}

void CSGetPoolLuckyReward::SharedCtor() {
}

CSGetPoolLuckyReward::~CSGetPoolLuckyReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetPoolLuckyReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetPoolLuckyReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetPoolLuckyReward::ArenaDtor(void* object) {
  CSGetPoolLuckyReward* _this = reinterpret_cast< CSGetPoolLuckyReward* >(object);
  (void)_this;
}
void CSGetPoolLuckyReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetPoolLuckyReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetPoolLuckyReward& CSGetPoolLuckyReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetPoolLuckyReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetPoolLuckyReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetPoolLuckyReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetPoolLuckyReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetPoolLuckyReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetPoolLuckyReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetPoolLuckyReward)
  return target;
}

size_t CSGetPoolLuckyReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetPoolLuckyReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetPoolLuckyReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetPoolLuckyReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetPoolLuckyReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetPoolLuckyReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetPoolLuckyReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetPoolLuckyReward)
    MergeFrom(*source);
  }
}

void CSGetPoolLuckyReward::MergeFrom(const CSGetPoolLuckyReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetPoolLuckyReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetPoolLuckyReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetPoolLuckyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetPoolLuckyReward::CopyFrom(const CSGetPoolLuckyReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetPoolLuckyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetPoolLuckyReward::IsInitialized() const {
  return true;
}

void CSGetPoolLuckyReward::InternalSwap(CSGetPoolLuckyReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetPoolLuckyReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetPoolLuckyReward::_Internal {
 public:
};

SCGetPoolLuckyReward::SCGetPoolLuckyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetPoolLuckyReward)
}
SCGetPoolLuckyReward::SCGetPoolLuckyReward(const SCGetPoolLuckyReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewardlist_(from.rewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&curmoney_, &from.curmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&curmoney_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetPoolLuckyReward)
}

void SCGetPoolLuckyReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetPoolLuckyReward_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&curmoney_)) + sizeof(cost_));
}

SCGetPoolLuckyReward::~SCGetPoolLuckyReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetPoolLuckyReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetPoolLuckyReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetPoolLuckyReward::ArenaDtor(void* object) {
  SCGetPoolLuckyReward* _this = reinterpret_cast< SCGetPoolLuckyReward* >(object);
  (void)_this;
}
void SCGetPoolLuckyReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetPoolLuckyReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetPoolLuckyReward& SCGetPoolLuckyReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetPoolLuckyReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetPoolLuckyReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetPoolLuckyReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewardlist_.Clear();
  ::memset(&curmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&curmoney_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetPoolLuckyReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.CommonPropInfo rewardList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetPoolLuckyReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetPoolLuckyReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int64 curMoney = 2;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_curmoney(), target);
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cost(), target);
  }

  // repeated .PlaneWar.CommonPropInfo rewardList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rewardlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetPoolLuckyReward)
  return target;
}

size_t SCGetPoolLuckyReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetPoolLuckyReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.CommonPropInfo rewardList = 4;
  total_size += 1UL * this->_internal_rewardlist_size();
  for (const auto& msg : this->rewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 curMoney = 2;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetPoolLuckyReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetPoolLuckyReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetPoolLuckyReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetPoolLuckyReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetPoolLuckyReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetPoolLuckyReward)
    MergeFrom(*source);
  }
}

void SCGetPoolLuckyReward::MergeFrom(const SCGetPoolLuckyReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetPoolLuckyReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewardlist_.MergeFrom(from.rewardlist_);
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void SCGetPoolLuckyReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetPoolLuckyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetPoolLuckyReward::CopyFrom(const SCGetPoolLuckyReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetPoolLuckyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetPoolLuckyReward::IsInitialized() const {
  return true;
}

void SCGetPoolLuckyReward::InternalSwap(SCGetPoolLuckyReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rewardlist_.InternalSwap(&other->rewardlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetPoolLuckyReward, cost_)
      + sizeof(SCGetPoolLuckyReward::cost_)
      - PROTOBUF_FIELD_OFFSET(SCGetPoolLuckyReward, curmoney_)>(
          reinterpret_cast<char*>(&curmoney_),
          reinterpret_cast<char*>(&other->curmoney_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetPoolLuckyReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPersonalPoolChangeNotify::_Internal {
 public:
};

SCPersonalPoolChangeNotify::SCPersonalPoolChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPersonalPoolChangeNotify)
}
SCPersonalPoolChangeNotify::SCPersonalPoolChangeNotify(const SCPersonalPoolChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetvalue_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(targetvalue_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPersonalPoolChangeNotify)
}

void SCPersonalPoolChangeNotify::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&targetvalue_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(targetvalue_));
}

SCPersonalPoolChangeNotify::~SCPersonalPoolChangeNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPersonalPoolChangeNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPersonalPoolChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPersonalPoolChangeNotify::ArenaDtor(void* object) {
  SCPersonalPoolChangeNotify* _this = reinterpret_cast< SCPersonalPoolChangeNotify* >(object);
  (void)_this;
}
void SCPersonalPoolChangeNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPersonalPoolChangeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPersonalPoolChangeNotify& SCPersonalPoolChangeNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPersonalPoolChangeNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPersonalPoolChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPersonalPoolChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetvalue_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(targetvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPersonalPoolChangeNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPersonalPoolChangeNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPersonalPoolChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 curValue = 2;
  if (this->curvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curvalue(), target);
  }

  // int32 curLevel = 3;
  if (this->curlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curlevel(), target);
  }

  // int32 maxValue = 4;
  if (this->maxvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxvalue(), target);
  }

  // int32 targetValue = 5;
  if (this->targetvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_targetvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPersonalPoolChangeNotify)
  return target;
}

size_t SCPersonalPoolChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPersonalPoolChangeNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 curValue = 2;
  if (this->curvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curvalue());
  }

  // int32 curLevel = 3;
  if (this->curlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curlevel());
  }

  // int32 maxValue = 4;
  if (this->maxvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxvalue());
  }

  // int32 targetValue = 5;
  if (this->targetvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPersonalPoolChangeNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPersonalPoolChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPersonalPoolChangeNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPersonalPoolChangeNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPersonalPoolChangeNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPersonalPoolChangeNotify)
    MergeFrom(*source);
  }
}

void SCPersonalPoolChangeNotify::MergeFrom(const SCPersonalPoolChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPersonalPoolChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.curvalue() != 0) {
    _internal_set_curvalue(from._internal_curvalue());
  }
  if (from.curlevel() != 0) {
    _internal_set_curlevel(from._internal_curlevel());
  }
  if (from.maxvalue() != 0) {
    _internal_set_maxvalue(from._internal_maxvalue());
  }
  if (from.targetvalue() != 0) {
    _internal_set_targetvalue(from._internal_targetvalue());
  }
}

void SCPersonalPoolChangeNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPersonalPoolChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPersonalPoolChangeNotify::CopyFrom(const SCPersonalPoolChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPersonalPoolChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPersonalPoolChangeNotify::IsInitialized() const {
  return true;
}

void SCPersonalPoolChangeNotify::InternalSwap(SCPersonalPoolChangeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPersonalPoolChangeNotify, targetvalue_)
      + sizeof(SCPersonalPoolChangeNotify::targetvalue_)
      - PROTOBUF_FIELD_OFFSET(SCPersonalPoolChangeNotify, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPersonalPoolChangeNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUseMissile::_Internal {
 public:
};

CSUseMissile::CSUseMissile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUseMissile)
}
CSUseMissile::CSUseMissile(const CSUseMissile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUseMissile)
}

void CSUseMissile::SharedCtor() {
  id_ = 0;
}

CSUseMissile::~CSUseMissile() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUseMissile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUseMissile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUseMissile::ArenaDtor(void* object) {
  CSUseMissile* _this = reinterpret_cast< CSUseMissile* >(object);
  (void)_this;
}
void CSUseMissile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUseMissile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUseMissile& CSUseMissile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUseMissile_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUseMissile::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUseMissile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUseMissile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUseMissile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUseMissile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUseMissile)
  return target;
}

size_t CSUseMissile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUseMissile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUseMissile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUseMissile)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUseMissile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUseMissile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUseMissile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUseMissile)
    MergeFrom(*source);
  }
}

void CSUseMissile::MergeFrom(const CSUseMissile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUseMissile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSUseMissile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUseMissile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUseMissile::CopyFrom(const CSUseMissile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUseMissile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUseMissile::IsInitialized() const {
  return true;
}

void CSUseMissile::InternalSwap(CSUseMissile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUseMissile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUseMissile::_Internal {
 public:
};

SCUseMissile::SCUseMissile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUseMissile)
}
SCUseMissile::SCUseMissile(const SCUseMissile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUseMissile)
}

void SCUseMissile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
}

SCUseMissile::~SCUseMissile() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUseMissile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUseMissile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUseMissile::ArenaDtor(void* object) {
  SCUseMissile* _this = reinterpret_cast< SCUseMissile* >(object);
  (void)_this;
}
void SCUseMissile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUseMissile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUseMissile& SCUseMissile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUseMissile_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUseMissile::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUseMissile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUseMissile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remainNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remainnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUseMissile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUseMissile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward(), target);
  }

  // int32 remainNum = 4;
  if (this->remainnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remainnum(), target);
  }

  // int64 curMoney = 5;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_curmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUseMissile)
  return target;
}

size_t SCUseMissile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUseMissile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 remainNum = 4;
  if (this->remainnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remainnum());
  }

  // int64 curMoney = 5;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUseMissile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUseMissile)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUseMissile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUseMissile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUseMissile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUseMissile)
    MergeFrom(*source);
  }
}

void SCUseMissile::MergeFrom(const SCUseMissile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUseMissile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.remainnum() != 0) {
    _internal_set_remainnum(from._internal_remainnum());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
}

void SCUseMissile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUseMissile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUseMissile::CopyFrom(const SCUseMissile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUseMissile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUseMissile::IsInitialized() const {
  return true;
}

void SCUseMissile::InternalSwap(SCUseMissile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUseMissile, curmoney_)
      + sizeof(SCUseMissile::curmoney_)
      - PROTOBUF_FIELD_OFFSET(SCUseMissile, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUseMissile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMonsterCall::_Internal {
 public:
};

CSMonsterCall::CSMonsterCall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSMonsterCall)
}
CSMonsterCall::CSMonsterCall(const CSMonsterCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSMonsterCall)
}

void CSMonsterCall::SharedCtor() {
}

CSMonsterCall::~CSMonsterCall() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSMonsterCall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMonsterCall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMonsterCall::ArenaDtor(void* object) {
  CSMonsterCall* _this = reinterpret_cast< CSMonsterCall* >(object);
  (void)_this;
}
void CSMonsterCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMonsterCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMonsterCall& CSMonsterCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMonsterCall_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSMonsterCall::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSMonsterCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMonsterCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMonsterCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSMonsterCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSMonsterCall)
  return target;
}

size_t CSMonsterCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSMonsterCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMonsterCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSMonsterCall)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMonsterCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMonsterCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSMonsterCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSMonsterCall)
    MergeFrom(*source);
  }
}

void CSMonsterCall::MergeFrom(const CSMonsterCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSMonsterCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMonsterCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSMonsterCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterCall::CopyFrom(const CSMonsterCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSMonsterCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterCall::IsInitialized() const {
  return true;
}

void CSMonsterCall::InternalSwap(CSMonsterCall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMonsterCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMonsterCall::_Internal {
 public:
};

SCMonsterCall::SCMonsterCall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMonsterCall)
}
SCMonsterCall::SCMonsterCall(const SCMonsterCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMonsterCall)
}

void SCMonsterCall::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(code_));
}

SCMonsterCall::~SCMonsterCall() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMonsterCall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMonsterCall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMonsterCall::ArenaDtor(void* object) {
  SCMonsterCall* _this = reinterpret_cast< SCMonsterCall* >(object);
  (void)_this;
}
void SCMonsterCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMonsterCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMonsterCall& SCMonsterCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMonsterCall_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMonsterCall::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMonsterCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMonsterCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMonsterCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMonsterCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMonsterCall)
  return target;
}

size_t SCMonsterCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMonsterCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMonsterCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMonsterCall)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMonsterCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMonsterCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMonsterCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMonsterCall)
    MergeFrom(*source);
  }
}

void SCMonsterCall::MergeFrom(const SCMonsterCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMonsterCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCMonsterCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMonsterCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMonsterCall::CopyFrom(const SCMonsterCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMonsterCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMonsterCall::IsInitialized() const {
  return true;
}

void SCMonsterCall::InternalSwap(SCMonsterCall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCMonsterCall, code_)
      + sizeof(SCMonsterCall::code_)
      - PROTOBUF_FIELD_OFFSET(SCMonsterCall, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMonsterCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSClickStatic::_Internal {
 public:
};

CSClickStatic::CSClickStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSClickStatic)
}
CSClickStatic::CSClickStatic(const CSClickStatic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSClickStatic)
}

void CSClickStatic::SharedCtor() {
  type_ = 0;
}

CSClickStatic::~CSClickStatic() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSClickStatic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSClickStatic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSClickStatic::ArenaDtor(void* object) {
  CSClickStatic* _this = reinterpret_cast< CSClickStatic* >(object);
  (void)_this;
}
void CSClickStatic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSClickStatic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSClickStatic& CSClickStatic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSClickStatic_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSClickStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSClickStatic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSClickStatic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSClickStatic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSClickStatic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSClickStatic)
  return target;
}

size_t CSClickStatic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSClickStatic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSClickStatic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSClickStatic)
  GOOGLE_DCHECK_NE(&from, this);
  const CSClickStatic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSClickStatic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSClickStatic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSClickStatic)
    MergeFrom(*source);
  }
}

void CSClickStatic::MergeFrom(const CSClickStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSClickStatic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSClickStatic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSClickStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSClickStatic::CopyFrom(const CSClickStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSClickStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClickStatic::IsInitialized() const {
  return true;
}

void CSClickStatic::InternalSwap(CSClickStatic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSClickStatic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCClickStatic::_Internal {
 public:
};

SCClickStatic::SCClickStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCClickStatic)
}
SCClickStatic::SCClickStatic(const SCClickStatic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCClickStatic)
}

void SCClickStatic::SharedCtor() {
}

SCClickStatic::~SCClickStatic() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCClickStatic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCClickStatic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCClickStatic::ArenaDtor(void* object) {
  SCClickStatic* _this = reinterpret_cast< SCClickStatic* >(object);
  (void)_this;
}
void SCClickStatic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCClickStatic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCClickStatic& SCClickStatic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCClickStatic_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCClickStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCClickStatic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCClickStatic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCClickStatic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCClickStatic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCClickStatic)
  return target;
}

size_t SCClickStatic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCClickStatic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCClickStatic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCClickStatic)
  GOOGLE_DCHECK_NE(&from, this);
  const SCClickStatic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCClickStatic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCClickStatic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCClickStatic)
    MergeFrom(*source);
  }
}

void SCClickStatic::MergeFrom(const SCClickStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCClickStatic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCClickStatic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCClickStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCClickStatic::CopyFrom(const SCClickStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCClickStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCClickStatic::IsInitialized() const {
  return true;
}

void SCClickStatic::InternalSwap(SCClickStatic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCClickStatic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RankInfo::_Internal {
 public:
};

RankInfo::RankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RankInfo)
}
RankInfo::RankInfo(const RankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(point_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RankInfo)
}

void RankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankInfo_PlaneWar_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(point_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankInfo::ArenaDtor(void* object) {
  RankInfo* _this = reinterpret_cast< RankInfo* >(object);
  (void)_this;
}
void RankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankInfo& RankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  icon_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.RankInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.RankInfo.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 point = 2;
  if (this->point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_point(), target);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.RankInfo.nick");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick(), target);
  }

  // string icon = 4;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.RankInfo.icon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RankInfo)
  return target;
}

size_t RankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string icon = 4;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RankInfo)
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {
    _internal_set_nick(from._internal_nick());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.point() != 0) {
    _internal_set_point(from._internal_point());
  }
}

void RankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {
  return true;
}

void RankInfo::InternalSwap(RankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankInfo, point_)
      + sizeof(RankInfo::point_)
      - PROTOBUF_FIELD_OFFSET(RankInfo, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MyRankInfo::_Internal {
 public:
};

MyRankInfo::MyRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MyRankInfo)
}
MyRankInfo::MyRankInfo(const MyRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(point_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MyRankInfo)
}

void MyRankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyRankInfo_PlaneWar_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(point_));
}

MyRankInfo::~MyRankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.MyRankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MyRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MyRankInfo::ArenaDtor(void* object) {
  MyRankInfo* _this = reinterpret_cast< MyRankInfo* >(object);
  (void)_this;
}
void MyRankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyRankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyRankInfo& MyRankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyRankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MyRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MyRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  icon_.ClearToEmpty();
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyRankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.MyRankInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.MyRankInfo.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyRankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MyRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // int32 point = 2;
  if (this->point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_point(), target);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.MyRankInfo.nick");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick(), target);
  }

  // string icon = 4;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.MyRankInfo.icon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MyRankInfo)
  return target;
}

size_t MyRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MyRankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string icon = 4;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyRankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MyRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MyRankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyRankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MyRankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MyRankInfo)
    MergeFrom(*source);
  }
}

void MyRankInfo::MergeFrom(const MyRankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MyRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {
    _internal_set_nick(from._internal_nick());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.point() != 0) {
    _internal_set_point(from._internal_point());
  }
}

void MyRankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MyRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyRankInfo::CopyFrom(const MyRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MyRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyRankInfo::IsInitialized() const {
  return true;
}

void MyRankInfo::InternalSwap(MyRankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyRankInfo, point_)
      + sizeof(MyRankInfo::point_)
      - PROTOBUF_FIELD_OFFSET(MyRankInfo, rank_)>(
          reinterpret_cast<char*>(&rank_),
          reinterpret_cast<char*>(&other->rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyRankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSRankList::_Internal {
 public:
};

CSRankList::CSRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSRankList)
}
CSRankList::CSRankList(const CSRankList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSRankList)
}

void CSRankList::SharedCtor() {
  type_ = 0;
}

CSRankList::~CSRankList() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSRankList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSRankList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSRankList::ArenaDtor(void* object) {
  CSRankList* _this = reinterpret_cast< CSRankList* >(object);
  (void)_this;
}
void CSRankList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSRankList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSRankList& CSRankList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSRankList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSRankList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRankList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSRankList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSRankList)
  return target;
}

size_t CSRankList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSRankList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSRankList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSRankList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSRankList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSRankList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSRankList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSRankList)
    MergeFrom(*source);
  }
}

void CSRankList::MergeFrom(const CSRankList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSRankList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSRankList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRankList::CopyFrom(const CSRankList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankList::IsInitialized() const {
  return true;
}

void CSRankList::InternalSwap(CSRankList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRankList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRankList::_Internal {
 public:
  static const ::PlaneWar::RankInfo& rank(const SCRankList* msg);
  static const ::PlaneWar::MyRankInfo& myrank(const SCRankList* msg);
  static const ::PlaneWar::RankInfo& lasttop(const SCRankList* msg);
};

const ::PlaneWar::RankInfo&
SCRankList::_Internal::rank(const SCRankList* msg) {
  return *msg->rank_;
}
const ::PlaneWar::MyRankInfo&
SCRankList::_Internal::myrank(const SCRankList* msg) {
  return *msg->myrank_;
}
const ::PlaneWar::RankInfo&
SCRankList::_Internal::lasttop(const SCRankList* msg) {
  return *msg->lasttop_;
}
SCRankList::SCRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRankList)
}
SCRankList::SCRankList(const SCRankList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rank()) {
    rank_ = new ::PlaneWar::RankInfo(*from.rank_);
  } else {
    rank_ = nullptr;
  }
  if (from._internal_has_myrank()) {
    myrank_ = new ::PlaneWar::MyRankInfo(*from.myrank_);
  } else {
    myrank_ = nullptr;
  }
  if (from._internal_has_lasttop()) {
    lasttop_ = new ::PlaneWar::RankInfo(*from.lasttop_);
  } else {
    lasttop_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRankList)
}

void SCRankList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRankList_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(type_));
}

SCRankList::~SCRankList() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRankList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRankList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rank_;
  if (this != internal_default_instance()) delete myrank_;
  if (this != internal_default_instance()) delete lasttop_;
}

void SCRankList::ArenaDtor(void* object) {
  SCRankList* _this = reinterpret_cast< SCRankList* >(object);
  (void)_this;
}
void SCRankList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRankList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRankList& SCRankList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRankList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRankList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rank_ != nullptr) {
    delete rank_;
  }
  rank_ = nullptr;
  if (GetArena() == nullptr && myrank_ != nullptr) {
    delete myrank_;
  }
  myrank_ = nullptr;
  if (GetArena() == nullptr && lasttop_ != nullptr) {
    delete lasttop_;
  }
  lasttop_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRankList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RankInfo rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.MyRankInfo myRank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_myrank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RankInfo lastTop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lasttop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRankList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .PlaneWar.RankInfo rank = 2;
  if (this->has_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rank(this), target, stream);
  }

  // .PlaneWar.MyRankInfo myRank = 3;
  if (this->has_myrank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::myrank(this), target, stream);
  }

  // .PlaneWar.RankInfo lastTop = 4;
  if (this->has_lasttop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lasttop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRankList)
  return target;
}

size_t SCRankList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRankList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RankInfo rank = 2;
  if (this->has_rank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rank_);
  }

  // .PlaneWar.MyRankInfo myRank = 3;
  if (this->has_myrank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *myrank_);
  }

  // .PlaneWar.RankInfo lastTop = 4;
  if (this->has_lasttop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lasttop_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRankList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRankList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRankList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRankList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRankList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRankList)
    MergeFrom(*source);
  }
}

void SCRankList::MergeFrom(const SCRankList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRankList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rank()) {
    _internal_mutable_rank()->::PlaneWar::RankInfo::MergeFrom(from._internal_rank());
  }
  if (from.has_myrank()) {
    _internal_mutable_myrank()->::PlaneWar::MyRankInfo::MergeFrom(from._internal_myrank());
  }
  if (from.has_lasttop()) {
    _internal_mutable_lasttop()->::PlaneWar::RankInfo::MergeFrom(from._internal_lasttop());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SCRankList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRankList::CopyFrom(const SCRankList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRankList::IsInitialized() const {
  return true;
}

void SCRankList::InternalSwap(SCRankList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRankList, type_)
      + sizeof(SCRankList::type_)
      - PROTOBUF_FIELD_OFFSET(SCRankList, rank_)>(
          reinterpret_cast<char*>(&rank_),
          reinterpret_cast<char*>(&other->rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRankList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TitleInfo::_Internal {
 public:
};

TitleInfo::TitleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.TitleInfo)
}
TitleInfo::TitleInfo(const TitleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&id_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.TitleInfo)
}

void TitleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TitleInfo_PlaneWar_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&id_)) + sizeof(endtime_));
}

TitleInfo::~TitleInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.TitleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TitleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TitleInfo::ArenaDtor(void* object) {
  TitleInfo* _this = reinterpret_cast< TitleInfo* >(object);
  (void)_this;
}
void TitleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TitleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TitleInfo& TitleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TitleInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void TitleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.TitleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&id_)) + sizeof(endtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TitleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.TitleInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TitleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.TitleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.TitleInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 endTime = 4;
  if (this->endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.TitleInfo)
  return target;
}

size_t TitleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.TitleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 endTime = 4;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TitleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.TitleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TitleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TitleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.TitleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.TitleInfo)
    MergeFrom(*source);
  }
}

void TitleInfo::MergeFrom(const TitleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.TitleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
}

void TitleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.TitleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfo::CopyFrom(const TitleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.TitleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfo::IsInitialized() const {
  return true;
}

void TitleInfo::InternalSwap(TitleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TitleInfo, endtime_)
      + sizeof(TitleInfo::endtime_)
      - PROTOBUF_FIELD_OFFSET(TitleInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTitleList::_Internal {
 public:
};

SCTitleList::SCTitleList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  titlelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCTitleList)
}
SCTitleList::SCTitleList(const SCTitleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      titlelist_(from.titlelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selectedtitleid_ = from.selectedtitleid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCTitleList)
}

void SCTitleList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTitleList_PlaneWar_2eproto.base);
  selectedtitleid_ = 0;
}

SCTitleList::~SCTitleList() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCTitleList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTitleList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTitleList::ArenaDtor(void* object) {
  SCTitleList* _this = reinterpret_cast< SCTitleList* >(object);
  (void)_this;
}
void SCTitleList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTitleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTitleList& SCTitleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTitleList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCTitleList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCTitleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  titlelist_.Clear();
  selectedtitleid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTitleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.TitleInfo titleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_titlelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 selectedTitleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          selectedtitleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTitleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCTitleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.TitleInfo titleList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_titlelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_titlelist(i), target, stream);
  }

  // int32 selectedTitleId = 2;
  if (this->selectedtitleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_selectedtitleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCTitleList)
  return target;
}

size_t SCTitleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCTitleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.TitleInfo titleList = 1;
  total_size += 1UL * this->_internal_titlelist_size();
  for (const auto& msg : this->titlelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 selectedTitleId = 2;
  if (this->selectedtitleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selectedtitleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTitleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCTitleList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTitleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTitleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCTitleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCTitleList)
    MergeFrom(*source);
  }
}

void SCTitleList::MergeFrom(const SCTitleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCTitleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  titlelist_.MergeFrom(from.titlelist_);
  if (from.selectedtitleid() != 0) {
    _internal_set_selectedtitleid(from._internal_selectedtitleid());
  }
}

void SCTitleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCTitleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTitleList::CopyFrom(const SCTitleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCTitleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTitleList::IsInitialized() const {
  return true;
}

void SCTitleList::InternalSwap(SCTitleList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  titlelist_.InternalSwap(&other->titlelist_);
  swap(selectedtitleid_, other->selectedtitleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTitleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSelectTitle::_Internal {
 public:
};

CSSelectTitle::CSSelectTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSelectTitle)
}
CSSelectTitle::CSSelectTitle(const CSSelectTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSelectTitle)
}

void CSSelectTitle::SharedCtor() {
  id_ = 0;
}

CSSelectTitle::~CSSelectTitle() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSelectTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSelectTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSelectTitle::ArenaDtor(void* object) {
  CSSelectTitle* _this = reinterpret_cast< CSSelectTitle* >(object);
  (void)_this;
}
void CSSelectTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSelectTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSelectTitle& CSSelectTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSelectTitle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSelectTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSelectTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSelectTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSelectTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSelectTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSelectTitle)
  return target;
}

size_t CSSelectTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSelectTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSelectTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSelectTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSelectTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSelectTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSelectTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSelectTitle)
    MergeFrom(*source);
  }
}

void CSSelectTitle::MergeFrom(const CSSelectTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSelectTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSSelectTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSelectTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSelectTitle::CopyFrom(const CSSelectTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSelectTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSelectTitle::IsInitialized() const {
  return true;
}

void CSSelectTitle::InternalSwap(CSSelectTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSelectTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSelectTitle::_Internal {
 public:
};

SCSelectTitle::SCSelectTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSelectTitle)
}
SCSelectTitle::SCSelectTitle(const SCSelectTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&id_)) + sizeof(chair_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSelectTitle)
}

void SCSelectTitle::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&id_)) + sizeof(chair_));
}

SCSelectTitle::~SCSelectTitle() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSelectTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSelectTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSelectTitle::ArenaDtor(void* object) {
  SCSelectTitle* _this = reinterpret_cast< SCSelectTitle* >(object);
  (void)_this;
}
void SCSelectTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSelectTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSelectTitle& SCSelectTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSelectTitle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSelectTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSelectTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&id_)) + sizeof(chair_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSelectTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSelectTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSelectTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSelectTitle)
  return target;
}

size_t SCSelectTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSelectTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSelectTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSelectTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSelectTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSelectTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSelectTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSelectTitle)
    MergeFrom(*source);
  }
}

void SCSelectTitle::MergeFrom(const SCSelectTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSelectTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCSelectTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSelectTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSelectTitle::CopyFrom(const SCSelectTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSelectTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSelectTitle::IsInitialized() const {
  return true;
}

void SCSelectTitle::InternalSwap(SCSelectTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSelectTitle, chair_)
      + sizeof(SCSelectTitle::chair_)
      - PROTOBUF_FIELD_OFFSET(SCSelectTitle, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSelectTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTitleActiveNotify::_Internal {
 public:
};

SCTitleActiveNotify::SCTitleActiveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCTitleActiveNotify)
}
SCTitleActiveNotify::SCTitleActiveNotify(const SCTitleActiveNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCTitleActiveNotify)
}

void SCTitleActiveNotify::SharedCtor() {
  id_ = 0;
}

SCTitleActiveNotify::~SCTitleActiveNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCTitleActiveNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTitleActiveNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTitleActiveNotify::ArenaDtor(void* object) {
  SCTitleActiveNotify* _this = reinterpret_cast< SCTitleActiveNotify* >(object);
  (void)_this;
}
void SCTitleActiveNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTitleActiveNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTitleActiveNotify& SCTitleActiveNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTitleActiveNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCTitleActiveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCTitleActiveNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTitleActiveNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTitleActiveNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCTitleActiveNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCTitleActiveNotify)
  return target;
}

size_t SCTitleActiveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCTitleActiveNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTitleActiveNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCTitleActiveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTitleActiveNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTitleActiveNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCTitleActiveNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCTitleActiveNotify)
    MergeFrom(*source);
  }
}

void SCTitleActiveNotify::MergeFrom(const SCTitleActiveNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCTitleActiveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SCTitleActiveNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCTitleActiveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTitleActiveNotify::CopyFrom(const SCTitleActiveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCTitleActiveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTitleActiveNotify::IsInitialized() const {
  return true;
}

void SCTitleActiveNotify::InternalSwap(SCTitleActiveNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTitleActiveNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRoomInfoChangeNotify::_Internal {
 public:
  static const ::PlaneWar::RoomInfo& roominfo(const SCRoomInfoChangeNotify* msg);
};

const ::PlaneWar::RoomInfo&
SCRoomInfoChangeNotify::_Internal::roominfo(const SCRoomInfoChangeNotify* msg) {
  return *msg->roominfo_;
}
SCRoomInfoChangeNotify::SCRoomInfoChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRoomInfoChangeNotify)
}
SCRoomInfoChangeNotify::SCRoomInfoChangeNotify(const SCRoomInfoChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    roominfo_ = new ::PlaneWar::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRoomInfoChangeNotify)
}

void SCRoomInfoChangeNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRoomInfoChangeNotify_PlaneWar_2eproto.base);
  roominfo_ = nullptr;
}

SCRoomInfoChangeNotify::~SCRoomInfoChangeNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRoomInfoChangeNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRoomInfoChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roominfo_;
}

void SCRoomInfoChangeNotify::ArenaDtor(void* object) {
  SCRoomInfoChangeNotify* _this = reinterpret_cast< SCRoomInfoChangeNotify* >(object);
  (void)_this;
}
void SCRoomInfoChangeNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRoomInfoChangeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRoomInfoChangeNotify& SCRoomInfoChangeNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRoomInfoChangeNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRoomInfoChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRoomInfoChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRoomInfoChangeNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.RoomInfo roomInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRoomInfoChangeNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRoomInfoChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roominfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRoomInfoChangeNotify)
  return target;
}

size_t SCRoomInfoChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRoomInfoChangeNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RoomInfo roomInfo = 1;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRoomInfoChangeNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRoomInfoChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRoomInfoChangeNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRoomInfoChangeNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRoomInfoChangeNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRoomInfoChangeNotify)
    MergeFrom(*source);
  }
}

void SCRoomInfoChangeNotify::MergeFrom(const SCRoomInfoChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRoomInfoChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    _internal_mutable_roominfo()->::PlaneWar::RoomInfo::MergeFrom(from._internal_roominfo());
  }
}

void SCRoomInfoChangeNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRoomInfoChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRoomInfoChangeNotify::CopyFrom(const SCRoomInfoChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRoomInfoChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRoomInfoChangeNotify::IsInitialized() const {
  return true;
}

void SCRoomInfoChangeNotify::InternalSwap(SCRoomInfoChangeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roominfo_, other->roominfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRoomInfoChangeNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMatchBrief::_Internal {
 public:
};

CSMatchBrief::CSMatchBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSMatchBrief)
}
CSMatchBrief::CSMatchBrief(const CSMatchBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSMatchBrief)
}

void CSMatchBrief::SharedCtor() {
}

CSMatchBrief::~CSMatchBrief() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSMatchBrief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMatchBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMatchBrief::ArenaDtor(void* object) {
  CSMatchBrief* _this = reinterpret_cast< CSMatchBrief* >(object);
  (void)_this;
}
void CSMatchBrief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMatchBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMatchBrief& CSMatchBrief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMatchBrief_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSMatchBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSMatchBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMatchBrief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMatchBrief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSMatchBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSMatchBrief)
  return target;
}

size_t CSMatchBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSMatchBrief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMatchBrief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSMatchBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMatchBrief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMatchBrief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSMatchBrief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSMatchBrief)
    MergeFrom(*source);
  }
}

void CSMatchBrief::MergeFrom(const CSMatchBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSMatchBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMatchBrief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSMatchBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMatchBrief::CopyFrom(const CSMatchBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSMatchBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMatchBrief::IsInitialized() const {
  return true;
}

void CSMatchBrief::InternalSwap(CSMatchBrief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMatchBrief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchBrief::_Internal {
 public:
};

SCMatchBrief::SCMatchBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMatchBrief)
}
SCMatchBrief::SCMatchBrief(const SCMatchBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchname().empty()) {
    matchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_matchname(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextrankpoint_) -
    reinterpret_cast<char*>(&status_)) + sizeof(nextrankpoint_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMatchBrief)
}

void SCMatchBrief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchBrief_PlaneWar_2eproto.base);
  matchname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nextrankpoint_) -
      reinterpret_cast<char*>(&status_)) + sizeof(nextrankpoint_));
}

SCMatchBrief::~SCMatchBrief() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMatchBrief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  matchname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCMatchBrief::ArenaDtor(void* object) {
  SCMatchBrief* _this = reinterpret_cast< SCMatchBrief* >(object);
  (void)_this;
}
void SCMatchBrief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchBrief& SCMatchBrief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchBrief_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMatchBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMatchBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchname_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextrankpoint_) -
      reinterpret_cast<char*>(&status_)) + sizeof(nextrankpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchBrief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 matchType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matchtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string matchName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_matchname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.SCMatchBrief.matchName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countDown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          countdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rewardNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rewardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 myRank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          myrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 myPoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mypoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nextRankPoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nextrankpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchBrief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMatchBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 matchType = 2;
  if (this->matchtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchtype(), target);
  }

  // string matchName = 3;
  if (this->matchname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchname().data(), static_cast<int>(this->_internal_matchname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.SCMatchBrief.matchName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_matchname(), target);
  }

  // int32 countDown = 4;
  if (this->countdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_countdown(), target);
  }

  // int32 totalNum = 5;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalnum(), target);
  }

  // int32 rewardNum = 6;
  if (this->rewardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rewardnum(), target);
  }

  // int32 myRank = 7;
  if (this->myrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_myrank(), target);
  }

  // int32 myPoint = 8;
  if (this->mypoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mypoint(), target);
  }

  // int32 nextRankPoint = 9;
  if (this->nextrankpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_nextrankpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMatchBrief)
  return target;
}

size_t SCMatchBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMatchBrief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string matchName = 3;
  if (this->matchname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchname());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 matchType = 2;
  if (this->matchtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matchtype());
  }

  // int32 countDown = 4;
  if (this->countdown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countdown());
  }

  // int32 totalNum = 5;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  // int32 rewardNum = 6;
  if (this->rewardnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewardnum());
  }

  // int32 myRank = 7;
  if (this->myrank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_myrank());
  }

  // int32 myPoint = 8;
  if (this->mypoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mypoint());
  }

  // int32 nextRankPoint = 9;
  if (this->nextrankpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nextrankpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchBrief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMatchBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchBrief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchBrief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMatchBrief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMatchBrief)
    MergeFrom(*source);
  }
}

void SCMatchBrief::MergeFrom(const SCMatchBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMatchBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matchname().size() > 0) {
    _internal_set_matchname(from._internal_matchname());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.matchtype() != 0) {
    _internal_set_matchtype(from._internal_matchtype());
  }
  if (from.countdown() != 0) {
    _internal_set_countdown(from._internal_countdown());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
  if (from.rewardnum() != 0) {
    _internal_set_rewardnum(from._internal_rewardnum());
  }
  if (from.myrank() != 0) {
    _internal_set_myrank(from._internal_myrank());
  }
  if (from.mypoint() != 0) {
    _internal_set_mypoint(from._internal_mypoint());
  }
  if (from.nextrankpoint() != 0) {
    _internal_set_nextrankpoint(from._internal_nextrankpoint());
  }
}

void SCMatchBrief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMatchBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchBrief::CopyFrom(const SCMatchBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMatchBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchBrief::IsInitialized() const {
  return true;
}

void SCMatchBrief::InternalSwap(SCMatchBrief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matchname_.Swap(&other->matchname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCMatchBrief, nextrankpoint_)
      + sizeof(SCMatchBrief::nextrankpoint_)
      - PROTOBUF_FIELD_OFFSET(SCMatchBrief, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchBrief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMatchDetail::_Internal {
 public:
};

CSMatchDetail::CSMatchDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSMatchDetail)
}
CSMatchDetail::CSMatchDetail(const CSMatchDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSMatchDetail)
}

void CSMatchDetail::SharedCtor() {
}

CSMatchDetail::~CSMatchDetail() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSMatchDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMatchDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMatchDetail::ArenaDtor(void* object) {
  CSMatchDetail* _this = reinterpret_cast< CSMatchDetail* >(object);
  (void)_this;
}
void CSMatchDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMatchDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMatchDetail& CSMatchDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMatchDetail_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSMatchDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSMatchDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMatchDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMatchDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSMatchDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSMatchDetail)
  return target;
}

size_t CSMatchDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSMatchDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMatchDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSMatchDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMatchDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMatchDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSMatchDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSMatchDetail)
    MergeFrom(*source);
  }
}

void CSMatchDetail::MergeFrom(const CSMatchDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSMatchDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMatchDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSMatchDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMatchDetail::CopyFrom(const CSMatchDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSMatchDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMatchDetail::IsInitialized() const {
  return true;
}

void CSMatchDetail::InternalSwap(CSMatchDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMatchDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchSubInfo::_Internal {
 public:
};

MatchSubInfo::MatchSubInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MatchSubInfo)
}
MatchSubInfo::MatchSubInfo(const MatchSubInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  submatchname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_submatchname().empty()) {
    submatchname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_submatchname(), 
      GetArena());
  }
  ::memcpy(&inmatch_, &from.inmatch_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalnum_) -
    reinterpret_cast<char*>(&inmatch_)) + sizeof(totalnum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MatchSubInfo)
}

void MatchSubInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchSubInfo_PlaneWar_2eproto.base);
  submatchname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&inmatch_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totalnum_) -
      reinterpret_cast<char*>(&inmatch_)) + sizeof(totalnum_));
}

MatchSubInfo::~MatchSubInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.MatchSubInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchSubInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  submatchname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchSubInfo::ArenaDtor(void* object) {
  MatchSubInfo* _this = reinterpret_cast< MatchSubInfo* >(object);
  (void)_this;
}
void MatchSubInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchSubInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchSubInfo& MatchSubInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchSubInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MatchSubInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MatchSubInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submatchname_.ClearToEmpty();
  ::memset(&inmatch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalnum_) -
      reinterpret_cast<char*>(&inmatch_)) + sizeof(totalnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchSubInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool inMatch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          inmatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subMatchName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_submatchname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.MatchSubInfo.subMatchName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 jackpot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          jackpot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchSubInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MatchSubInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool inMatch = 1;
  if (this->inmatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_inmatch(), target);
  }

  // string subMatchName = 2;
  if (this->submatchname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_submatchname().data(), static_cast<int>(this->_internal_submatchname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.MatchSubInfo.subMatchName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_submatchname(), target);
  }

  // int32 jackpot = 3;
  if (this->jackpot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_jackpot(), target);
  }

  // int32 totalNum = 4;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_totalnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MatchSubInfo)
  return target;
}

size_t MatchSubInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MatchSubInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subMatchName = 2;
  if (this->submatchname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submatchname());
  }

  // bool inMatch = 1;
  if (this->inmatch() != 0) {
    total_size += 1 + 1;
  }

  // int32 jackpot = 3;
  if (this->jackpot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jackpot());
  }

  // int32 totalNum = 4;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchSubInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MatchSubInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchSubInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchSubInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MatchSubInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MatchSubInfo)
    MergeFrom(*source);
  }
}

void MatchSubInfo::MergeFrom(const MatchSubInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MatchSubInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.submatchname().size() > 0) {
    _internal_set_submatchname(from._internal_submatchname());
  }
  if (from.inmatch() != 0) {
    _internal_set_inmatch(from._internal_inmatch());
  }
  if (from.jackpot() != 0) {
    _internal_set_jackpot(from._internal_jackpot());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
}

void MatchSubInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MatchSubInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSubInfo::CopyFrom(const MatchSubInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MatchSubInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSubInfo::IsInitialized() const {
  return true;
}

void MatchSubInfo::InternalSwap(MatchSubInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  submatchname_.Swap(&other->submatchname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchSubInfo, totalnum_)
      + sizeof(MatchSubInfo::totalnum_)
      - PROTOBUF_FIELD_OFFSET(MatchSubInfo, inmatch_)>(
          reinterpret_cast<char*>(&inmatch_),
          reinterpret_cast<char*>(&other->inmatch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchSubInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchRewardItem::_Internal {
 public:
};

MatchRewardItem::MatchRewardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MatchRewardItem)
}
MatchRewardItem::MatchRewardItem(const MatchRewardItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MatchRewardItem)
}

void MatchRewardItem::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

MatchRewardItem::~MatchRewardItem() {
  // @@protoc_insertion_point(destructor:PlaneWar.MatchRewardItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchRewardItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchRewardItem::ArenaDtor(void* object) {
  MatchRewardItem* _this = reinterpret_cast< MatchRewardItem* >(object);
  (void)_this;
}
void MatchRewardItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchRewardItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchRewardItem& MatchRewardItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchRewardItem_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MatchRewardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MatchRewardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchRewardItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchRewardItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MatchRewardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MatchRewardItem)
  return target;
}

size_t MatchRewardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MatchRewardItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchRewardItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MatchRewardItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchRewardItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchRewardItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MatchRewardItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MatchRewardItem)
    MergeFrom(*source);
  }
}

void MatchRewardItem::MergeFrom(const MatchRewardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MatchRewardItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void MatchRewardItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MatchRewardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRewardItem::CopyFrom(const MatchRewardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MatchRewardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRewardItem::IsInitialized() const {
  return true;
}

void MatchRewardItem::InternalSwap(MatchRewardItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchRewardItem, num_)
      + sizeof(MatchRewardItem::num_)
      - PROTOBUF_FIELD_OFFSET(MatchRewardItem, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchRewardItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchRankInfo::_Internal {
 public:
  static const ::PlaneWar::MatchRewardItem& rewardlist(const MatchRankInfo* msg);
};

const ::PlaneWar::MatchRewardItem&
MatchRankInfo::_Internal::rewardlist(const MatchRankInfo* msg) {
  return *msg->rewardlist_;
}
MatchRankInfo::MatchRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MatchRankInfo)
}
MatchRankInfo::MatchRankInfo(const MatchRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  if (from._internal_has_rewardlist()) {
    rewardlist_ = new ::PlaneWar::MatchRewardItem(*from.rewardlist_);
  } else {
    rewardlist_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moneybonus_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(moneybonus_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MatchRankInfo)
}

void MatchRankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchRankInfo_PlaneWar_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rewardlist_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&moneybonus_) -
      reinterpret_cast<char*>(&rewardlist_)) + sizeof(moneybonus_));
}

MatchRankInfo::~MatchRankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.MatchRankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rewardlist_;
}

void MatchRankInfo::ArenaDtor(void* object) {
  MatchRankInfo* _this = reinterpret_cast< MatchRankInfo* >(object);
  (void)_this;
}
void MatchRankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchRankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchRankInfo& MatchRankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchRankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MatchRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MatchRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  icon_.ClearToEmpty();
  if (GetArena() == nullptr && rewardlist_ != nullptr) {
    delete rewardlist_;
  }
  rewardlist_ = nullptr;
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneybonus_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(moneybonus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchRankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.MatchRankInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.MatchRankInfo.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pointBonus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pointbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moneyBonus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          moneybonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.MatchRewardItem rewardList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewardlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchRankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MatchRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 point = 2;
  if (this->point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_point(), target);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.MatchRankInfo.nick");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick(), target);
  }

  // string icon = 4;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.MatchRankInfo.icon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon(), target);
  }

  // int32 rank = 5;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rank(), target);
  }

  // int32 pointBonus = 6;
  if (this->pointbonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pointbonus(), target);
  }

  // int32 moneyBonus = 7;
  if (this->moneybonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_moneybonus(), target);
  }

  // .PlaneWar.MatchRewardItem rewardList = 8;
  if (this->has_rewardlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rewardlist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MatchRankInfo)
  return target;
}

size_t MatchRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MatchRankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string icon = 4;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // .PlaneWar.MatchRewardItem rewardList = 8;
  if (this->has_rewardlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewardlist_);
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_point());
  }

  // int32 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 pointBonus = 6;
  if (this->pointbonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pointbonus());
  }

  // int32 moneyBonus = 7;
  if (this->moneybonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneybonus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchRankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MatchRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchRankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchRankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MatchRankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MatchRankInfo)
    MergeFrom(*source);
  }
}

void MatchRankInfo::MergeFrom(const MatchRankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MatchRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {
    _internal_set_nick(from._internal_nick());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.has_rewardlist()) {
    _internal_mutable_rewardlist()->::PlaneWar::MatchRewardItem::MergeFrom(from._internal_rewardlist());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.point() != 0) {
    _internal_set_point(from._internal_point());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.pointbonus() != 0) {
    _internal_set_pointbonus(from._internal_pointbonus());
  }
  if (from.moneybonus() != 0) {
    _internal_set_moneybonus(from._internal_moneybonus());
  }
}

void MatchRankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MatchRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRankInfo::CopyFrom(const MatchRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MatchRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRankInfo::IsInitialized() const {
  return true;
}

void MatchRankInfo::InternalSwap(MatchRankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchRankInfo, moneybonus_)
      + sizeof(MatchRankInfo::moneybonus_)
      - PROTOBUF_FIELD_OFFSET(MatchRankInfo, rewardlist_)>(
          reinterpret_cast<char*>(&rewardlist_),
          reinterpret_cast<char*>(&other->rewardlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchRankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchTask::_Internal {
 public:
};

MatchTask::MatchTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MatchTask)
}
MatchTask::MatchTask(const MatchTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&status_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MatchTask)
}

void MatchTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&status_)) + sizeof(reward_));
}

MatchTask::~MatchTask() {
  // @@protoc_insertion_point(destructor:PlaneWar.MatchTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchTask::ArenaDtor(void* object) {
  MatchTask* _this = reinterpret_cast< MatchTask* >(object);
  (void)_this;
}
void MatchTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchTask& MatchTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchTask_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MatchTask::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MatchTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&status_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MatchTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 target = 2;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target(), target);
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MatchTask)
  return target;
}

size_t MatchTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MatchTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MatchTask)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MatchTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MatchTask)
    MergeFrom(*source);
  }
}

void MatchTask::MergeFrom(const MatchTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MatchTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void MatchTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MatchTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchTask::CopyFrom(const MatchTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MatchTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTask::IsInitialized() const {
  return true;
}

void MatchTask::InternalSwap(MatchTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchTask, reward_)
      + sizeof(MatchTask::reward_)
      - PROTOBUF_FIELD_OFFSET(MatchTask, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchDetail::_Internal {
 public:
  static const ::PlaneWar::MatchRankInfo& myrank(const SCMatchDetail* msg);
};

const ::PlaneWar::MatchRankInfo&
SCMatchDetail::_Internal::myrank(const SCMatchDetail* msg) {
  return *msg->myrank_;
}
SCMatchDetail::SCMatchDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subinfolist_(arena),
  ranklist_(arena),
  tiplist_(arena),
  luckystage_(arena),
  tasklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMatchDetail)
}
SCMatchDetail::SCMatchDetail(const SCMatchDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subinfolist_(from.subinfolist_),
      ranklist_(from.ranklist_),
      tiplist_(from.tiplist_),
      luckystage_(from.luckystage_),
      tasklist_(from.tasklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_myrank()) {
    myrank_ = new ::PlaneWar::MatchRankInfo(*from.myrank_);
  } else {
    myrank_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMatchDetail)
}

void SCMatchDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchDetail_PlaneWar_2eproto.base);
  myrank_ = nullptr;
}

SCMatchDetail::~SCMatchDetail() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMatchDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete myrank_;
}

void SCMatchDetail::ArenaDtor(void* object) {
  SCMatchDetail* _this = reinterpret_cast< SCMatchDetail* >(object);
  (void)_this;
}
void SCMatchDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchDetail& SCMatchDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchDetail_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMatchDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMatchDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subinfolist_.Clear();
  ranklist_.Clear();
  tiplist_.Clear();
  luckystage_.Clear();
  tasklist_.Clear();
  if (GetArena() == nullptr && myrank_ != nullptr) {
    delete myrank_;
  }
  myrank_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.MatchSubInfo subInfoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MatchRankInfo rankList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.MatchRankInfo myRank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_myrank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 tipList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tiplist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_tiplist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 luckyStage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_luckystage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_luckystage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MatchTask taskList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMatchDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.MatchSubInfo subInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subinfolist(i), target, stream);
  }

  // repeated .PlaneWar.MatchRankInfo rankList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ranklist(i), target, stream);
  }

  // .PlaneWar.MatchRankInfo myRank = 3;
  if (this->has_myrank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::myrank(this), target, stream);
  }

  // repeated int32 tipList = 4;
  {
    int byte_size = _tiplist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_tiplist(), byte_size, target);
    }
  }

  // repeated int32 luckyStage = 5;
  {
    int byte_size = _luckystage_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_luckystage(), byte_size, target);
    }
  }

  // repeated .PlaneWar.MatchTask taskList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tasklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMatchDetail)
  return target;
}

size_t SCMatchDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMatchDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MatchSubInfo subInfoList = 1;
  total_size += 1UL * this->_internal_subinfolist_size();
  for (const auto& msg : this->subinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.MatchRankInfo rankList = 2;
  total_size += 1UL * this->_internal_ranklist_size();
  for (const auto& msg : this->ranklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 tipList = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tiplist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tiplist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 luckyStage = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->luckystage_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _luckystage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .PlaneWar.MatchTask taskList = 6;
  total_size += 1UL * this->_internal_tasklist_size();
  for (const auto& msg : this->tasklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.MatchRankInfo myRank = 3;
  if (this->has_myrank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *myrank_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMatchDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMatchDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMatchDetail)
    MergeFrom(*source);
  }
}

void SCMatchDetail::MergeFrom(const SCMatchDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMatchDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subinfolist_.MergeFrom(from.subinfolist_);
  ranklist_.MergeFrom(from.ranklist_);
  tiplist_.MergeFrom(from.tiplist_);
  luckystage_.MergeFrom(from.luckystage_);
  tasklist_.MergeFrom(from.tasklist_);
  if (from.has_myrank()) {
    _internal_mutable_myrank()->::PlaneWar::MatchRankInfo::MergeFrom(from._internal_myrank());
  }
}

void SCMatchDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMatchDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchDetail::CopyFrom(const SCMatchDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMatchDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchDetail::IsInitialized() const {
  return true;
}

void SCMatchDetail::InternalSwap(SCMatchDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subinfolist_.InternalSwap(&other->subinfolist_);
  ranklist_.InternalSwap(&other->ranklist_);
  tiplist_.InternalSwap(&other->tiplist_);
  luckystage_.InternalSwap(&other->luckystage_);
  tasklist_.InternalSwap(&other->tasklist_);
  swap(myrank_, other->myrank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMatchReward::_Internal {
 public:
};

CSMatchReward::CSMatchReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSMatchReward)
}
CSMatchReward::CSMatchReward(const CSMatchReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSMatchReward)
}

void CSMatchReward::SharedCtor() {
}

CSMatchReward::~CSMatchReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSMatchReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMatchReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMatchReward::ArenaDtor(void* object) {
  CSMatchReward* _this = reinterpret_cast< CSMatchReward* >(object);
  (void)_this;
}
void CSMatchReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMatchReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMatchReward& CSMatchReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMatchReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSMatchReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSMatchReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMatchReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMatchReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSMatchReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSMatchReward)
  return target;
}

size_t CSMatchReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSMatchReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMatchReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSMatchReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMatchReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMatchReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSMatchReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSMatchReward)
    MergeFrom(*source);
  }
}

void CSMatchReward::MergeFrom(const CSMatchReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSMatchReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMatchReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSMatchReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMatchReward::CopyFrom(const CSMatchReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSMatchReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMatchReward::IsInitialized() const {
  return true;
}

void CSMatchReward::InternalSwap(CSMatchReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMatchReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RankReward::_Internal {
 public:
  static const ::PlaneWar::MatchRewardItem& rewardlist(const RankReward* msg);
};

const ::PlaneWar::MatchRewardItem&
RankReward::_Internal::rewardlist(const RankReward* msg) {
  return *msg->rewardlist_;
}
RankReward::RankReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RankReward)
}
RankReward::RankReward(const RankReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rewardlist()) {
    rewardlist_ = new ::PlaneWar::MatchRewardItem(*from.rewardlist_);
  } else {
    rewardlist_ = nullptr;
  }
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RankReward)
}

void RankReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankReward_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rewardlist_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&rewardlist_)) + sizeof(to_));
}

RankReward::~RankReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.RankReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rewardlist_;
}

void RankReward::ArenaDtor(void* object) {
  RankReward* _this = reinterpret_cast< RankReward* >(object);
  (void)_this;
}
void RankReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankReward& RankReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RankReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RankReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rewardlist_ != nullptr) {
    delete rewardlist_;
  }
  rewardlist_ = nullptr;
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.MatchRewardItem rewardList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewardlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RankReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // .PlaneWar.MatchRewardItem rewardList = 3;
  if (this->has_rewardlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rewardlist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RankReward)
  return target;
}

size_t RankReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RankReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.MatchRewardItem rewardList = 3;
  if (this->has_rewardlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewardlist_);
  }

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RankReward)
  GOOGLE_DCHECK_NE(&from, this);
  const RankReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RankReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RankReward)
    MergeFrom(*source);
  }
}

void RankReward::MergeFrom(const RankReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RankReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rewardlist()) {
    _internal_mutable_rewardlist()->::PlaneWar::MatchRewardItem::MergeFrom(from._internal_rewardlist());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void RankReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RankReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankReward::CopyFrom(const RankReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RankReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankReward::IsInitialized() const {
  return true;
}

void RankReward::InternalSwap(RankReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankReward, to_)
      + sizeof(RankReward::to_)
      - PROTOBUF_FIELD_OFFSET(RankReward, rewardlist_)>(
          reinterpret_cast<char*>(&rewardlist_),
          reinterpret_cast<char*>(&other->rewardlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchReward::_Internal {
 public:
};

SCMatchReward::SCMatchReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rankrewardlist_(arena),
  luckyreward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMatchReward)
}
SCMatchReward::SCMatchReward(const SCMatchReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rankrewardlist_(from.rankrewardlist_),
      luckyreward_(from.luckyreward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMatchReward)
}

void SCMatchReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchReward_PlaneWar_2eproto.base);
}

SCMatchReward::~SCMatchReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMatchReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMatchReward::ArenaDtor(void* object) {
  SCMatchReward* _this = reinterpret_cast< SCMatchReward* >(object);
  (void)_this;
}
void SCMatchReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchReward& SCMatchReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMatchReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMatchReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankrewardlist_.Clear();
  luckyreward_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.RankReward rankRewardList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankrewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 luckyReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_luckyreward(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_luckyreward(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMatchReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.RankReward rankRewardList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rankrewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rankrewardlist(i), target, stream);
  }

  // repeated int32 luckyReward = 2;
  {
    int byte_size = _luckyreward_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_luckyreward(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMatchReward)
  return target;
}

size_t SCMatchReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMatchReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.RankReward rankRewardList = 1;
  total_size += 1UL * this->_internal_rankrewardlist_size();
  for (const auto& msg : this->rankrewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 luckyReward = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->luckyreward_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _luckyreward_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMatchReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMatchReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMatchReward)
    MergeFrom(*source);
  }
}

void SCMatchReward::MergeFrom(const SCMatchReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMatchReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankrewardlist_.MergeFrom(from.rankrewardlist_);
  luckyreward_.MergeFrom(from.luckyreward_);
}

void SCMatchReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMatchReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchReward::CopyFrom(const SCMatchReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMatchReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchReward::IsInitialized() const {
  return true;
}

void SCMatchReward::InternalSwap(SCMatchReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rankrewardlist_.InternalSwap(&other->rankrewardlist_);
  luckyreward_.InternalSwap(&other->luckyreward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MyMatchReward::_Internal {
 public:
};

MyMatchReward::MyMatchReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  myreward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.MyMatchReward)
}
MyMatchReward::MyMatchReward(const MyMatchReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      myreward_(from.myreward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&luckyreward_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(luckyreward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.MyMatchReward)
}

void MyMatchReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyMatchReward_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&luckyreward_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(luckyreward_));
}

MyMatchReward::~MyMatchReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.MyMatchReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MyMatchReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MyMatchReward::ArenaDtor(void* object) {
  MyMatchReward* _this = reinterpret_cast< MyMatchReward* >(object);
  (void)_this;
}
void MyMatchReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyMatchReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyMatchReward& MyMatchReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyMatchReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void MyMatchReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.MyMatchReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myreward_.Clear();
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&luckyreward_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(luckyreward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyMatchReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MatchRewardItem myReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_myreward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 bonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 luckyReward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          luckyreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyMatchReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.MyMatchReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // repeated .PlaneWar.MatchRewardItem myReward = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_myreward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_myreward(i), target, stream);
  }

  // int32 bonus = 3;
  if (this->bonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bonus(), target);
  }

  // int32 luckyReward = 4;
  if (this->luckyreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_luckyreward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.MyMatchReward)
  return target;
}

size_t MyMatchReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.MyMatchReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MatchRewardItem myReward = 2;
  total_size += 1UL * this->_internal_myreward_size();
  for (const auto& msg : this->myreward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 bonus = 3;
  if (this->bonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bonus());
  }

  // int32 luckyReward = 4;
  if (this->luckyreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_luckyreward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyMatchReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.MyMatchReward)
  GOOGLE_DCHECK_NE(&from, this);
  const MyMatchReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyMatchReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.MyMatchReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.MyMatchReward)
    MergeFrom(*source);
  }
}

void MyMatchReward::MergeFrom(const MyMatchReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.MyMatchReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  myreward_.MergeFrom(from.myreward_);
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.bonus() != 0) {
    _internal_set_bonus(from._internal_bonus());
  }
  if (from.luckyreward() != 0) {
    _internal_set_luckyreward(from._internal_luckyreward());
  }
}

void MyMatchReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.MyMatchReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyMatchReward::CopyFrom(const MyMatchReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.MyMatchReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyMatchReward::IsInitialized() const {
  return true;
}

void MyMatchReward::InternalSwap(MyMatchReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  myreward_.InternalSwap(&other->myreward_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyMatchReward, luckyreward_)
      + sizeof(MyMatchReward::luckyreward_)
      - PROTOBUF_FIELD_OFFSET(MyMatchReward, rank_)>(
          reinterpret_cast<char*>(&rank_),
          reinterpret_cast<char*>(&other->rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyMatchReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchRewardNotify::_Internal {
 public:
  static const ::PlaneWar::MatchRankInfo& rewardlist(const SCMatchRewardNotify* msg);
  static const ::PlaneWar::MyMatchReward& myreward(const SCMatchRewardNotify* msg);
};

const ::PlaneWar::MatchRankInfo&
SCMatchRewardNotify::_Internal::rewardlist(const SCMatchRewardNotify* msg) {
  return *msg->rewardlist_;
}
const ::PlaneWar::MyMatchReward&
SCMatchRewardNotify::_Internal::myreward(const SCMatchRewardNotify* msg) {
  return *msg->myreward_;
}
SCMatchRewardNotify::SCMatchRewardNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCMatchRewardNotify)
}
SCMatchRewardNotify::SCMatchRewardNotify(const SCMatchRewardNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rewardlist()) {
    rewardlist_ = new ::PlaneWar::MatchRankInfo(*from.rewardlist_);
  } else {
    rewardlist_ = nullptr;
  }
  if (from._internal_has_myreward()) {
    myreward_ = new ::PlaneWar::MyMatchReward(*from.myreward_);
  } else {
    myreward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCMatchRewardNotify)
}

void SCMatchRewardNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchRewardNotify_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rewardlist_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&myreward_) -
      reinterpret_cast<char*>(&rewardlist_)) + sizeof(myreward_));
}

SCMatchRewardNotify::~SCMatchRewardNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCMatchRewardNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchRewardNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rewardlist_;
  if (this != internal_default_instance()) delete myreward_;
}

void SCMatchRewardNotify::ArenaDtor(void* object) {
  SCMatchRewardNotify* _this = reinterpret_cast< SCMatchRewardNotify* >(object);
  (void)_this;
}
void SCMatchRewardNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchRewardNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchRewardNotify& SCMatchRewardNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchRewardNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCMatchRewardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCMatchRewardNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rewardlist_ != nullptr) {
    delete rewardlist_;
  }
  rewardlist_ = nullptr;
  if (GetArena() == nullptr && myreward_ != nullptr) {
    delete myreward_;
  }
  myreward_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchRewardNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.MatchRankInfo rewardList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewardlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.MyMatchReward myReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_myreward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchRewardNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCMatchRewardNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.MatchRankInfo rewardList = 1;
  if (this->has_rewardlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rewardlist(this), target, stream);
  }

  // .PlaneWar.MyMatchReward myReward = 2;
  if (this->has_myreward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::myreward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCMatchRewardNotify)
  return target;
}

size_t SCMatchRewardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCMatchRewardNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.MatchRankInfo rewardList = 1;
  if (this->has_rewardlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewardlist_);
  }

  // .PlaneWar.MyMatchReward myReward = 2;
  if (this->has_myreward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *myreward_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchRewardNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCMatchRewardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchRewardNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchRewardNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCMatchRewardNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCMatchRewardNotify)
    MergeFrom(*source);
  }
}

void SCMatchRewardNotify::MergeFrom(const SCMatchRewardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCMatchRewardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rewardlist()) {
    _internal_mutable_rewardlist()->::PlaneWar::MatchRankInfo::MergeFrom(from._internal_rewardlist());
  }
  if (from.has_myreward()) {
    _internal_mutable_myreward()->::PlaneWar::MyMatchReward::MergeFrom(from._internal_myreward());
  }
}

void SCMatchRewardNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCMatchRewardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchRewardNotify::CopyFrom(const SCMatchRewardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCMatchRewardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchRewardNotify::IsInitialized() const {
  return true;
}

void SCMatchRewardNotify::InternalSwap(SCMatchRewardNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCMatchRewardNotify, myreward_)
      + sizeof(SCMatchRewardNotify::myreward_)
      - PROTOBUF_FIELD_OFFSET(SCMatchRewardNotify, rewardlist_)>(
          reinterpret_cast<char*>(&rewardlist_),
          reinterpret_cast<char*>(&other->rewardlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchRewardNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGiftList::_Internal {
 public:
};

CSGiftList::CSGiftList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGiftList)
}
CSGiftList::CSGiftList(const CSGiftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGiftList)
}

void CSGiftList::SharedCtor() {
}

CSGiftList::~CSGiftList() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGiftList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGiftList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGiftList::ArenaDtor(void* object) {
  CSGiftList* _this = reinterpret_cast< CSGiftList* >(object);
  (void)_this;
}
void CSGiftList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGiftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGiftList& CSGiftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGiftList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGiftList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGiftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGiftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGiftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGiftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGiftList)
  return target;
}

size_t CSGiftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGiftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGiftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGiftList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGiftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGiftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGiftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGiftList)
    MergeFrom(*source);
  }
}

void CSGiftList::MergeFrom(const CSGiftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGiftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGiftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGiftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGiftList::CopyFrom(const CSGiftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGiftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGiftList::IsInitialized() const {
  return true;
}

void CSGiftList::InternalSwap(CSGiftList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGiftList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GiftInfo::_Internal {
 public:
};

GiftInfo::GiftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GiftInfo)
}
GiftInfo::GiftInfo(const GiftInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&buycountdown_) -
    reinterpret_cast<char*>(&id_)) + sizeof(buycountdown_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GiftInfo)
}

void GiftInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&buycountdown_) -
      reinterpret_cast<char*>(&id_)) + sizeof(buycountdown_));
}

GiftInfo::~GiftInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.GiftInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GiftInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GiftInfo::ArenaDtor(void* object) {
  GiftInfo* _this = reinterpret_cast< GiftInfo* >(object);
  (void)_this;
}
void GiftInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GiftInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GiftInfo& GiftInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GiftInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GiftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GiftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buycountdown_) -
      reinterpret_cast<char*>(&id_)) + sizeof(buycountdown_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GiftInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pointBonus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pointbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moneyBonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          moneybonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool canBuy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          canbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buyCountDown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          buycountdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GiftInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GiftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 pointBonus = 2;
  if (this->pointbonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pointbonus(), target);
  }

  // int32 moneyBonus = 3;
  if (this->moneybonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_moneybonus(), target);
  }

  // bool canBuy = 4;
  if (this->canbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_canbuy(), target);
  }

  // int32 buyCountDown = 5;
  if (this->buycountdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_buycountdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GiftInfo)
  return target;
}

size_t GiftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GiftInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 pointBonus = 2;
  if (this->pointbonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pointbonus());
  }

  // int32 moneyBonus = 3;
  if (this->moneybonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moneybonus());
  }

  // bool canBuy = 4;
  if (this->canbuy() != 0) {
    total_size += 1 + 1;
  }

  // int32 buyCountDown = 5;
  if (this->buycountdown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buycountdown());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GiftInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GiftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GiftInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GiftInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GiftInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GiftInfo)
    MergeFrom(*source);
  }
}

void GiftInfo::MergeFrom(const GiftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GiftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pointbonus() != 0) {
    _internal_set_pointbonus(from._internal_pointbonus());
  }
  if (from.moneybonus() != 0) {
    _internal_set_moneybonus(from._internal_moneybonus());
  }
  if (from.canbuy() != 0) {
    _internal_set_canbuy(from._internal_canbuy());
  }
  if (from.buycountdown() != 0) {
    _internal_set_buycountdown(from._internal_buycountdown());
  }
}

void GiftInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GiftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftInfo::CopyFrom(const GiftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GiftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftInfo::IsInitialized() const {
  return true;
}

void GiftInfo::InternalSwap(GiftInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GiftInfo, buycountdown_)
      + sizeof(GiftInfo::buycountdown_)
      - PROTOBUF_FIELD_OFFSET(GiftInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GiftInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGiftList::_Internal {
 public:
};

SCGiftList::SCGiftList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  giftlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGiftList)
}
SCGiftList::SCGiftList(const SCGiftList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      giftlist_(from.giftlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGiftList)
}

void SCGiftList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGiftList_PlaneWar_2eproto.base);
}

SCGiftList::~SCGiftList() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGiftList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGiftList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGiftList::ArenaDtor(void* object) {
  SCGiftList* _this = reinterpret_cast< SCGiftList* >(object);
  (void)_this;
}
void SCGiftList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGiftList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGiftList& SCGiftList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGiftList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGiftList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGiftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  giftlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGiftList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GiftInfo giftList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_giftlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGiftList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGiftList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GiftInfo giftList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_giftlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_giftlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGiftList)
  return target;
}

size_t SCGiftList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGiftList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GiftInfo giftList = 1;
  total_size += 1UL * this->_internal_giftlist_size();
  for (const auto& msg : this->giftlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGiftList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGiftList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGiftList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGiftList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGiftList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGiftList)
    MergeFrom(*source);
  }
}

void SCGiftList::MergeFrom(const SCGiftList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGiftList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  giftlist_.MergeFrom(from.giftlist_);
}

void SCGiftList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGiftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGiftList::CopyFrom(const SCGiftList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGiftList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGiftList::IsInitialized() const {
  return true;
}

void SCGiftList::InternalSwap(SCGiftList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  giftlist_.InternalSwap(&other->giftlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGiftList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGiftExpireNotify::_Internal {
 public:
};

SCGiftExpireNotify::SCGiftExpireNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGiftExpireNotify)
}
SCGiftExpireNotify::SCGiftExpireNotify(const SCGiftExpireNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  giftid_ = from.giftid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGiftExpireNotify)
}

void SCGiftExpireNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGiftExpireNotify_PlaneWar_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  giftid_ = 0;
}

SCGiftExpireNotify::~SCGiftExpireNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGiftExpireNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGiftExpireNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCGiftExpireNotify::ArenaDtor(void* object) {
  SCGiftExpireNotify* _this = reinterpret_cast< SCGiftExpireNotify* >(object);
  (void)_this;
}
void SCGiftExpireNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGiftExpireNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGiftExpireNotify& SCGiftExpireNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGiftExpireNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGiftExpireNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGiftExpireNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  giftid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGiftExpireNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 giftID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          giftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.SCGiftExpireNotify.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGiftExpireNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGiftExpireNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 giftID = 1;
  if (this->giftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_giftid(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.SCGiftExpireNotify.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGiftExpireNotify)
  return target;
}

size_t SCGiftExpireNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGiftExpireNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 giftID = 1;
  if (this->giftid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_giftid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGiftExpireNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGiftExpireNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGiftExpireNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGiftExpireNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGiftExpireNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGiftExpireNotify)
    MergeFrom(*source);
  }
}

void SCGiftExpireNotify::MergeFrom(const SCGiftExpireNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGiftExpireNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.giftid() != 0) {
    _internal_set_giftid(from._internal_giftid());
  }
}

void SCGiftExpireNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGiftExpireNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGiftExpireNotify::CopyFrom(const SCGiftExpireNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGiftExpireNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGiftExpireNotify::IsInitialized() const {
  return true;
}

void SCGiftExpireNotify::InternalSwap(SCGiftExpireNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(giftid_, other->giftid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGiftExpireNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetMatchTaskReward::_Internal {
 public:
};

CSGetMatchTaskReward::CSGetMatchTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetMatchTaskReward)
}
CSGetMatchTaskReward::CSGetMatchTaskReward(const CSGetMatchTaskReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetMatchTaskReward)
}

void CSGetMatchTaskReward::SharedCtor() {
  index_ = 0;
}

CSGetMatchTaskReward::~CSGetMatchTaskReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetMatchTaskReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetMatchTaskReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetMatchTaskReward::ArenaDtor(void* object) {
  CSGetMatchTaskReward* _this = reinterpret_cast< CSGetMatchTaskReward* >(object);
  (void)_this;
}
void CSGetMatchTaskReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetMatchTaskReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetMatchTaskReward& CSGetMatchTaskReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetMatchTaskReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetMatchTaskReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetMatchTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetMatchTaskReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetMatchTaskReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetMatchTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetMatchTaskReward)
  return target;
}

size_t CSGetMatchTaskReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetMatchTaskReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetMatchTaskReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetMatchTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetMatchTaskReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetMatchTaskReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetMatchTaskReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetMatchTaskReward)
    MergeFrom(*source);
  }
}

void CSGetMatchTaskReward::MergeFrom(const CSGetMatchTaskReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetMatchTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void CSGetMatchTaskReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetMatchTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetMatchTaskReward::CopyFrom(const CSGetMatchTaskReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetMatchTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetMatchTaskReward::IsInitialized() const {
  return true;
}

void CSGetMatchTaskReward::InternalSwap(CSGetMatchTaskReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetMatchTaskReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetMatchTaskReward::_Internal {
 public:
};

SCGetMatchTaskReward::SCGetMatchTaskReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetMatchTaskReward)
}
SCGetMatchTaskReward::SCGetMatchTaskReward(const SCGetMatchTaskReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&index_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetMatchTaskReward)
}

void SCGetMatchTaskReward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&index_)) + sizeof(reward_));
}

SCGetMatchTaskReward::~SCGetMatchTaskReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetMatchTaskReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetMatchTaskReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetMatchTaskReward::ArenaDtor(void* object) {
  SCGetMatchTaskReward* _this = reinterpret_cast< SCGetMatchTaskReward* >(object);
  (void)_this;
}
void SCGetMatchTaskReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetMatchTaskReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetMatchTaskReward& SCGetMatchTaskReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetMatchTaskReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetMatchTaskReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetMatchTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&index_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetMatchTaskReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetMatchTaskReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetMatchTaskReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetMatchTaskReward)
  return target;
}

size_t SCGetMatchTaskReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetMatchTaskReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetMatchTaskReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetMatchTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetMatchTaskReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetMatchTaskReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetMatchTaskReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetMatchTaskReward)
    MergeFrom(*source);
  }
}

void SCGetMatchTaskReward::MergeFrom(const SCGetMatchTaskReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetMatchTaskReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void SCGetMatchTaskReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetMatchTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetMatchTaskReward::CopyFrom(const SCGetMatchTaskReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetMatchTaskReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetMatchTaskReward::IsInitialized() const {
  return true;
}

void SCGetMatchTaskReward::InternalSwap(SCGetMatchTaskReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetMatchTaskReward, reward_)
      + sizeof(SCGetMatchTaskReward::reward_)
      - PROTOBUF_FIELD_OFFSET(SCGetMatchTaskReward, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetMatchTaskReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WeaponUseCondition::_Internal {
 public:
};

WeaponUseCondition::WeaponUseCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WeaponUseCondition)
}
WeaponUseCondition::WeaponUseCondition(const WeaponUseCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  viplevel_ = from.viplevel_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WeaponUseCondition)
}

void WeaponUseCondition::SharedCtor() {
  viplevel_ = 0;
}

WeaponUseCondition::~WeaponUseCondition() {
  // @@protoc_insertion_point(destructor:PlaneWar.WeaponUseCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeaponUseCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WeaponUseCondition::ArenaDtor(void* object) {
  WeaponUseCondition* _this = reinterpret_cast< WeaponUseCondition* >(object);
  (void)_this;
}
void WeaponUseCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeaponUseCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeaponUseCondition& WeaponUseCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeaponUseCondition_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WeaponUseCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WeaponUseCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viplevel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponUseCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vipLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeaponUseCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WeaponUseCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vipLevel = 1;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viplevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WeaponUseCondition)
  return target;
}

size_t WeaponUseCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WeaponUseCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vipLevel = 1;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeaponUseCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WeaponUseCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponUseCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeaponUseCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WeaponUseCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WeaponUseCondition)
    MergeFrom(*source);
  }
}

void WeaponUseCondition::MergeFrom(const WeaponUseCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WeaponUseCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
}

void WeaponUseCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WeaponUseCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponUseCondition::CopyFrom(const WeaponUseCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WeaponUseCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponUseCondition::IsInitialized() const {
  return true;
}

void WeaponUseCondition::InternalSwap(WeaponUseCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(viplevel_, other->viplevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponUseCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WeaponConfig::_Internal {
 public:
  static const ::PlaneWar::WeaponUseCondition& condition(const WeaponConfig* msg);
};

const ::PlaneWar::WeaponUseCondition&
WeaponConfig::_Internal::condition(const WeaponConfig* msg) {
  return *msg->condition_;
}
WeaponConfig::WeaponConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WeaponConfig)
}
WeaponConfig::WeaponConfig(const WeaponConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::PlaneWar::WeaponUseCondition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  weaponid_ = from.weaponid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WeaponConfig)
}

void WeaponConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeaponConfig_PlaneWar_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&condition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(weaponid_));
}

WeaponConfig::~WeaponConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.WeaponConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeaponConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void WeaponConfig::ArenaDtor(void* object) {
  WeaponConfig* _this = reinterpret_cast< WeaponConfig* >(object);
  (void)_this;
}
void WeaponConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeaponConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeaponConfig& WeaponConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeaponConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WeaponConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WeaponConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  weaponid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 weaponID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.WeaponConfig.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponUseCondition condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeaponConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WeaponConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weaponID = 1;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weaponid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.WeaponConfig.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .PlaneWar.WeaponUseCondition condition = 3;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WeaponConfig)
  return target;
}

size_t WeaponConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WeaponConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .PlaneWar.WeaponUseCondition condition = 3;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // int32 weaponID = 1;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeaponConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WeaponConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeaponConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WeaponConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WeaponConfig)
    MergeFrom(*source);
  }
}

void WeaponConfig::MergeFrom(const WeaponConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WeaponConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_condition()) {
    _internal_mutable_condition()->::PlaneWar::WeaponUseCondition::MergeFrom(from._internal_condition());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
}

void WeaponConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WeaponConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponConfig::CopyFrom(const WeaponConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WeaponConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponConfig::IsInitialized() const {
  return true;
}

void WeaponConfig::InternalSwap(WeaponConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponConfig, weaponid_)
      + sizeof(WeaponConfig::weaponid_)
      - PROTOBUF_FIELD_OFFSET(WeaponConfig, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSWeaponPieceInfo::_Internal {
 public:
};

CSWeaponPieceInfo::CSWeaponPieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSWeaponPieceInfo)
}
CSWeaponPieceInfo::CSWeaponPieceInfo(const CSWeaponPieceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isbrowsing_ = from.isbrowsing_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSWeaponPieceInfo)
}

void CSWeaponPieceInfo::SharedCtor() {
  isbrowsing_ = false;
}

CSWeaponPieceInfo::~CSWeaponPieceInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSWeaponPieceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSWeaponPieceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSWeaponPieceInfo::ArenaDtor(void* object) {
  CSWeaponPieceInfo* _this = reinterpret_cast< CSWeaponPieceInfo* >(object);
  (void)_this;
}
void CSWeaponPieceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSWeaponPieceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSWeaponPieceInfo& CSWeaponPieceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSWeaponPieceInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSWeaponPieceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSWeaponPieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isbrowsing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSWeaponPieceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isBrowsing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isbrowsing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSWeaponPieceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSWeaponPieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isBrowsing = 1;
  if (this->isbrowsing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isbrowsing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSWeaponPieceInfo)
  return target;
}

size_t CSWeaponPieceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSWeaponPieceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isBrowsing = 1;
  if (this->isbrowsing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSWeaponPieceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSWeaponPieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSWeaponPieceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSWeaponPieceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSWeaponPieceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSWeaponPieceInfo)
    MergeFrom(*source);
  }
}

void CSWeaponPieceInfo::MergeFrom(const CSWeaponPieceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSWeaponPieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isbrowsing() != 0) {
    _internal_set_isbrowsing(from._internal_isbrowsing());
  }
}

void CSWeaponPieceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSWeaponPieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWeaponPieceInfo::CopyFrom(const CSWeaponPieceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSWeaponPieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWeaponPieceInfo::IsInitialized() const {
  return true;
}

void CSWeaponPieceInfo::InternalSwap(CSWeaponPieceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isbrowsing_, other->isbrowsing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSWeaponPieceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PiecesStackLimitInfo::_Internal {
 public:
};

PiecesStackLimitInfo::PiecesStackLimitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PiecesStackLimitInfo)
}
PiecesStackLimitInfo::PiecesStackLimitInfo(const PiecesStackLimitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fromviplevel_, &from.fromviplevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&stacknum_) -
    reinterpret_cast<char*>(&fromviplevel_)) + sizeof(stacknum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PiecesStackLimitInfo)
}

void PiecesStackLimitInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fromviplevel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stacknum_) -
      reinterpret_cast<char*>(&fromviplevel_)) + sizeof(stacknum_));
}

PiecesStackLimitInfo::~PiecesStackLimitInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PiecesStackLimitInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PiecesStackLimitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PiecesStackLimitInfo::ArenaDtor(void* object) {
  PiecesStackLimitInfo* _this = reinterpret_cast< PiecesStackLimitInfo* >(object);
  (void)_this;
}
void PiecesStackLimitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiecesStackLimitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiecesStackLimitInfo& PiecesStackLimitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PiecesStackLimitInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PiecesStackLimitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PiecesStackLimitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fromviplevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stacknum_) -
      reinterpret_cast<char*>(&fromviplevel_)) + sizeof(stacknum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiecesStackLimitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fromVipLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fromviplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toVipLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          toviplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stackNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stacknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiecesStackLimitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PiecesStackLimitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fromVipLevel = 1;
  if (this->fromviplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fromviplevel(), target);
  }

  // int32 toVipLevel = 2;
  if (this->toviplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_toviplevel(), target);
  }

  // int32 stackNum = 3;
  if (this->stacknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stacknum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PiecesStackLimitInfo)
  return target;
}

size_t PiecesStackLimitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PiecesStackLimitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fromVipLevel = 1;
  if (this->fromviplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fromviplevel());
  }

  // int32 toVipLevel = 2;
  if (this->toviplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toviplevel());
  }

  // int32 stackNum = 3;
  if (this->stacknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stacknum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecesStackLimitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PiecesStackLimitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecesStackLimitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PiecesStackLimitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PiecesStackLimitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PiecesStackLimitInfo)
    MergeFrom(*source);
  }
}

void PiecesStackLimitInfo::MergeFrom(const PiecesStackLimitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PiecesStackLimitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromviplevel() != 0) {
    _internal_set_fromviplevel(from._internal_fromviplevel());
  }
  if (from.toviplevel() != 0) {
    _internal_set_toviplevel(from._internal_toviplevel());
  }
  if (from.stacknum() != 0) {
    _internal_set_stacknum(from._internal_stacknum());
  }
}

void PiecesStackLimitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PiecesStackLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecesStackLimitInfo::CopyFrom(const PiecesStackLimitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PiecesStackLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecesStackLimitInfo::IsInitialized() const {
  return true;
}

void PiecesStackLimitInfo::InternalSwap(PiecesStackLimitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiecesStackLimitInfo, stacknum_)
      + sizeof(PiecesStackLimitInfo::stacknum_)
      - PROTOBUF_FIELD_OFFSET(PiecesStackLimitInfo, fromviplevel_)>(
          reinterpret_cast<char*>(&fromviplevel_),
          reinterpret_cast<char*>(&other->fromviplevel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiecesStackLimitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCWeaponPieceInfo::_Internal {
 public:
  static const ::PlaneWar::PieceInfo& pieceinfo(const SCWeaponPieceInfo* msg);
};

const ::PlaneWar::PieceInfo&
SCWeaponPieceInfo::_Internal::pieceinfo(const SCWeaponPieceInfo* msg) {
  return *msg->pieceinfo_;
}
SCWeaponPieceInfo::SCWeaponPieceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configlist_(arena),
  stacklimitlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCWeaponPieceInfo)
}
SCWeaponPieceInfo::SCWeaponPieceInfo(const SCWeaponPieceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configlist_(from.configlist_),
      stacklimitlist_(from.stacklimitlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pieceinfo()) {
    pieceinfo_ = new ::PlaneWar::PieceInfo(*from.pieceinfo_);
  } else {
    pieceinfo_ = nullptr;
  }
  ::memcpy(&isbrowsing_, &from.isbrowsing_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&isbrowsing_)) + sizeof(chair_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCWeaponPieceInfo)
}

void SCWeaponPieceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCWeaponPieceInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pieceinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&pieceinfo_)) + sizeof(chair_));
}

SCWeaponPieceInfo::~SCWeaponPieceInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCWeaponPieceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCWeaponPieceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pieceinfo_;
}

void SCWeaponPieceInfo::ArenaDtor(void* object) {
  SCWeaponPieceInfo* _this = reinterpret_cast< SCWeaponPieceInfo* >(object);
  (void)_this;
}
void SCWeaponPieceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCWeaponPieceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCWeaponPieceInfo& SCWeaponPieceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCWeaponPieceInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCWeaponPieceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCWeaponPieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configlist_.Clear();
  stacklimitlist_.Clear();
  if (GetArena() == nullptr && pieceinfo_ != nullptr) {
    delete pieceinfo_;
  }
  pieceinfo_ = nullptr;
  ::memset(&isbrowsing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&isbrowsing_)) + sizeof(chair_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCWeaponPieceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isBrowsing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isbrowsing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PieceInfo pieceInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pieceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.WeaponConfig configList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.PiecesStackLimitInfo stackLimitList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stacklimitlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCWeaponPieceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCWeaponPieceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isBrowsing = 1;
  if (this->isbrowsing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isbrowsing(), target);
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair(), target);
  }

  // .PlaneWar.PieceInfo pieceInfo = 3;
  if (this->has_pieceinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pieceinfo(this), target, stream);
  }

  // repeated .PlaneWar.WeaponConfig configList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_configlist(i), target, stream);
  }

  // repeated .PlaneWar.PiecesStackLimitInfo stackLimitList = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stacklimitlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stacklimitlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCWeaponPieceInfo)
  return target;
}

size_t SCWeaponPieceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCWeaponPieceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.WeaponConfig configList = 4;
  total_size += 1UL * this->_internal_configlist_size();
  for (const auto& msg : this->configlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.PiecesStackLimitInfo stackLimitList = 5;
  total_size += 1UL * this->_internal_stacklimitlist_size();
  for (const auto& msg : this->stacklimitlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.PieceInfo pieceInfo = 3;
  if (this->has_pieceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pieceinfo_);
  }

  // bool isBrowsing = 1;
  if (this->isbrowsing() != 0) {
    total_size += 1 + 1;
  }

  // int32 chair = 2;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCWeaponPieceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCWeaponPieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCWeaponPieceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCWeaponPieceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCWeaponPieceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCWeaponPieceInfo)
    MergeFrom(*source);
  }
}

void SCWeaponPieceInfo::MergeFrom(const SCWeaponPieceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCWeaponPieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configlist_.MergeFrom(from.configlist_);
  stacklimitlist_.MergeFrom(from.stacklimitlist_);
  if (from.has_pieceinfo()) {
    _internal_mutable_pieceinfo()->::PlaneWar::PieceInfo::MergeFrom(from._internal_pieceinfo());
  }
  if (from.isbrowsing() != 0) {
    _internal_set_isbrowsing(from._internal_isbrowsing());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCWeaponPieceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCWeaponPieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCWeaponPieceInfo::CopyFrom(const SCWeaponPieceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCWeaponPieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCWeaponPieceInfo::IsInitialized() const {
  return true;
}

void SCWeaponPieceInfo::InternalSwap(SCWeaponPieceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  configlist_.InternalSwap(&other->configlist_);
  stacklimitlist_.InternalSwap(&other->stacklimitlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCWeaponPieceInfo, chair_)
      + sizeof(SCWeaponPieceInfo::chair_)
      - PROTOBUF_FIELD_OFFSET(SCWeaponPieceInfo, pieceinfo_)>(
          reinterpret_cast<char*>(&pieceinfo_),
          reinterpret_cast<char*>(&other->pieceinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCWeaponPieceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyWeapon::_Internal {
 public:
};

CSBuyWeapon::CSBuyWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSBuyWeapon)
}
CSBuyWeapon::CSBuyWeapon(const CSBuyWeapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSBuyWeapon)
}

void CSBuyWeapon::SharedCtor() {
}

CSBuyWeapon::~CSBuyWeapon() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSBuyWeapon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyWeapon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyWeapon::ArenaDtor(void* object) {
  CSBuyWeapon* _this = reinterpret_cast< CSBuyWeapon* >(object);
  (void)_this;
}
void CSBuyWeapon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyWeapon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyWeapon& CSBuyWeapon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyWeapon_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSBuyWeapon::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSBuyWeapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyWeapon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyWeapon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSBuyWeapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSBuyWeapon)
  return target;
}

size_t CSBuyWeapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSBuyWeapon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyWeapon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSBuyWeapon)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyWeapon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyWeapon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSBuyWeapon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSBuyWeapon)
    MergeFrom(*source);
  }
}

void CSBuyWeapon::MergeFrom(const CSBuyWeapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSBuyWeapon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSBuyWeapon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSBuyWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyWeapon::CopyFrom(const CSBuyWeapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSBuyWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyWeapon::IsInitialized() const {
  return true;
}

void CSBuyWeapon::InternalSwap(CSBuyWeapon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyWeapon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyWeapon::_Internal {
 public:
  static const ::PlaneWar::WeaponInfo& weaponinfo(const SCBuyWeapon* msg);
  static const ::PlaneWar::PieceInfo& pieceinfo(const SCBuyWeapon* msg);
  static const ::PlaneWar::WeaponUseCondition& condition(const SCBuyWeapon* msg);
};

const ::PlaneWar::WeaponInfo&
SCBuyWeapon::_Internal::weaponinfo(const SCBuyWeapon* msg) {
  return *msg->weaponinfo_;
}
const ::PlaneWar::PieceInfo&
SCBuyWeapon::_Internal::pieceinfo(const SCBuyWeapon* msg) {
  return *msg->pieceinfo_;
}
const ::PlaneWar::WeaponUseCondition&
SCBuyWeapon::_Internal::condition(const SCBuyWeapon* msg) {
  return *msg->condition_;
}
SCBuyWeapon::SCBuyWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCBuyWeapon)
}
SCBuyWeapon::SCBuyWeapon(const SCBuyWeapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weaponinfo()) {
    weaponinfo_ = new ::PlaneWar::WeaponInfo(*from.weaponinfo_);
  } else {
    weaponinfo_ = nullptr;
  }
  if (from._internal_has_pieceinfo()) {
    pieceinfo_ = new ::PlaneWar::PieceInfo(*from.pieceinfo_);
  } else {
    pieceinfo_ = nullptr;
  }
  if (from._internal_has_condition()) {
    condition_ = new ::PlaneWar::WeaponUseCondition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(weaponid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCBuyWeapon)
}

void SCBuyWeapon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCBuyWeapon_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&weaponinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&weaponinfo_)) + sizeof(weaponid_));
}

SCBuyWeapon::~SCBuyWeapon() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCBuyWeapon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyWeapon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete weaponinfo_;
  if (this != internal_default_instance()) delete pieceinfo_;
  if (this != internal_default_instance()) delete condition_;
}

void SCBuyWeapon::ArenaDtor(void* object) {
  SCBuyWeapon* _this = reinterpret_cast< SCBuyWeapon* >(object);
  (void)_this;
}
void SCBuyWeapon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyWeapon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyWeapon& SCBuyWeapon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyWeapon_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCBuyWeapon::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCBuyWeapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && weaponinfo_ != nullptr) {
    delete weaponinfo_;
  }
  weaponinfo_ = nullptr;
  if (GetArena() == nullptr && pieceinfo_ != nullptr) {
    delete pieceinfo_;
  }
  pieceinfo_ = nullptr;
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(weaponid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyWeapon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weaponID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponInfo weaponInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PieceInfo pieceInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pieceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponUseCondition condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyWeapon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCBuyWeapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 weaponID = 2;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weaponid(), target);
  }

  // .PlaneWar.WeaponInfo weaponInfo = 3;
  if (this->has_weaponinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::weaponinfo(this), target, stream);
  }

  // .PlaneWar.PieceInfo pieceInfo = 4;
  if (this->has_pieceinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pieceinfo(this), target, stream);
  }

  // .PlaneWar.WeaponUseCondition condition = 5;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCBuyWeapon)
  return target;
}

size_t SCBuyWeapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCBuyWeapon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.WeaponInfo weaponInfo = 3;
  if (this->has_weaponinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weaponinfo_);
  }

  // .PlaneWar.PieceInfo pieceInfo = 4;
  if (this->has_pieceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pieceinfo_);
  }

  // .PlaneWar.WeaponUseCondition condition = 5;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 weaponID = 2;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyWeapon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCBuyWeapon)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyWeapon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyWeapon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCBuyWeapon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCBuyWeapon)
    MergeFrom(*source);
  }
}

void SCBuyWeapon::MergeFrom(const SCBuyWeapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCBuyWeapon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weaponinfo()) {
    _internal_mutable_weaponinfo()->::PlaneWar::WeaponInfo::MergeFrom(from._internal_weaponinfo());
  }
  if (from.has_pieceinfo()) {
    _internal_mutable_pieceinfo()->::PlaneWar::PieceInfo::MergeFrom(from._internal_pieceinfo());
  }
  if (from.has_condition()) {
    _internal_mutable_condition()->::PlaneWar::WeaponUseCondition::MergeFrom(from._internal_condition());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
}

void SCBuyWeapon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCBuyWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyWeapon::CopyFrom(const SCBuyWeapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCBuyWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyWeapon::IsInitialized() const {
  return true;
}

void SCBuyWeapon::InternalSwap(SCBuyWeapon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBuyWeapon, weaponid_)
      + sizeof(SCBuyWeapon::weaponid_)
      - PROTOBUF_FIELD_OFFSET(SCBuyWeapon, weaponinfo_)>(
          reinterpret_cast<char*>(&weaponinfo_),
          reinterpret_cast<char*>(&other->weaponinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyWeapon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EarnRecord::_Internal {
 public:
};

EarnRecord::EarnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.EarnRecord)
}
EarnRecord::EarnRecord(const EarnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  weaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_weaponname().empty()) {
    weaponname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_weaponname(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(earn_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.EarnRecord)
}

void EarnRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EarnRecord_PlaneWar_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(earn_));
}

EarnRecord::~EarnRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.EarnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EarnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weaponname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EarnRecord::ArenaDtor(void* object) {
  EarnRecord* _this = reinterpret_cast< EarnRecord* >(object);
  (void)_this;
}
void EarnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EarnRecord& EarnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EarnRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void EarnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.EarnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  icon_.ClearToEmpty();
  weaponname_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(earn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.EarnRecord.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.EarnRecord.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vipLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string weaponName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_weaponname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.EarnRecord.weaponName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EarnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.EarnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.EarnRecord.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.EarnRecord.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // int32 vipLevel = 4;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_viplevel(), target);
  }

  // string weaponName = 5;
  if (this->weaponname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weaponname().data(), static_cast<int>(this->_internal_weaponname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.EarnRecord.weaponName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_weaponname(), target);
  }

  // int32 time = 6;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time(), target);
  }

  // int32 earn = 7;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_earn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.EarnRecord)
  return target;
}

size_t EarnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.EarnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string weaponName = 5;
  if (this->weaponname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weaponname());
  }

  // int32 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 vipLevel = 4;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  // int32 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 earn = 7;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EarnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.EarnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const EarnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EarnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.EarnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.EarnRecord)
    MergeFrom(*source);
  }
}

void EarnRecord::MergeFrom(const EarnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.EarnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {
    _internal_set_nick(from._internal_nick());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.weaponname().size() > 0) {
    _internal_set_weaponname(from._internal_weaponname());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
}

void EarnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.EarnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EarnRecord::CopyFrom(const EarnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.EarnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarnRecord::IsInitialized() const {
  return true;
}

void EarnRecord::InternalSwap(EarnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  weaponname_.Swap(&other->weaponname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarnRecord, earn_)
      + sizeof(EarnRecord::earn_)
      - PROTOBUF_FIELD_OFFSET(EarnRecord, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSWeaponEarnRecord::_Internal {
 public:
};

CSWeaponEarnRecord::CSWeaponEarnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSWeaponEarnRecord)
}
CSWeaponEarnRecord::CSWeaponEarnRecord(const CSWeaponEarnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSWeaponEarnRecord)
}

void CSWeaponEarnRecord::SharedCtor() {
  page_ = 0;
}

CSWeaponEarnRecord::~CSWeaponEarnRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSWeaponEarnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSWeaponEarnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSWeaponEarnRecord::ArenaDtor(void* object) {
  CSWeaponEarnRecord* _this = reinterpret_cast< CSWeaponEarnRecord* >(object);
  (void)_this;
}
void CSWeaponEarnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSWeaponEarnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSWeaponEarnRecord& CSWeaponEarnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSWeaponEarnRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSWeaponEarnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSWeaponEarnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSWeaponEarnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSWeaponEarnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSWeaponEarnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSWeaponEarnRecord)
  return target;
}

size_t CSWeaponEarnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSWeaponEarnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSWeaponEarnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSWeaponEarnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSWeaponEarnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSWeaponEarnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSWeaponEarnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSWeaponEarnRecord)
    MergeFrom(*source);
  }
}

void CSWeaponEarnRecord::MergeFrom(const CSWeaponEarnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSWeaponEarnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void CSWeaponEarnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSWeaponEarnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWeaponEarnRecord::CopyFrom(const CSWeaponEarnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSWeaponEarnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWeaponEarnRecord::IsInitialized() const {
  return true;
}

void CSWeaponEarnRecord::InternalSwap(CSWeaponEarnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSWeaponEarnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCWeaponEarnRecord::_Internal {
 public:
};

SCWeaponEarnRecord::SCWeaponEarnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  recordlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCWeaponEarnRecord)
}
SCWeaponEarnRecord::SCWeaponEarnRecord(const SCWeaponEarnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recordlist_(from.recordlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCWeaponEarnRecord)
}

void SCWeaponEarnRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCWeaponEarnRecord_PlaneWar_2eproto.base);
  page_ = 0;
}

SCWeaponEarnRecord::~SCWeaponEarnRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCWeaponEarnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCWeaponEarnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCWeaponEarnRecord::ArenaDtor(void* object) {
  SCWeaponEarnRecord* _this = reinterpret_cast< SCWeaponEarnRecord* >(object);
  (void)_this;
}
void SCWeaponEarnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCWeaponEarnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCWeaponEarnRecord& SCWeaponEarnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCWeaponEarnRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCWeaponEarnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCWeaponEarnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recordlist_.Clear();
  page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCWeaponEarnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.EarnRecord recordList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recordlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCWeaponEarnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCWeaponEarnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.EarnRecord recordList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recordlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_recordlist(i), target, stream);
  }

  // int32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCWeaponEarnRecord)
  return target;
}

size_t SCWeaponEarnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCWeaponEarnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.EarnRecord recordList = 1;
  total_size += 1UL * this->_internal_recordlist_size();
  for (const auto& msg : this->recordlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCWeaponEarnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCWeaponEarnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCWeaponEarnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCWeaponEarnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCWeaponEarnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCWeaponEarnRecord)
    MergeFrom(*source);
  }
}

void SCWeaponEarnRecord::MergeFrom(const SCWeaponEarnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCWeaponEarnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recordlist_.MergeFrom(from.recordlist_);
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void SCWeaponEarnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCWeaponEarnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCWeaponEarnRecord::CopyFrom(const SCWeaponEarnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCWeaponEarnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCWeaponEarnRecord::IsInitialized() const {
  return true;
}

void SCWeaponEarnRecord::InternalSwap(SCWeaponEarnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recordlist_.InternalSwap(&other->recordlist_);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCWeaponEarnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSStateForceSettle::_Internal {
 public:
};

CSStateForceSettle::CSStateForceSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSStateForceSettle)
}
CSStateForceSettle::CSStateForceSettle(const CSStateForceSettle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceuid_ = from.sourceuid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSStateForceSettle)
}

void CSStateForceSettle::SharedCtor() {
  sourceuid_ = 0;
}

CSStateForceSettle::~CSStateForceSettle() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSStateForceSettle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSStateForceSettle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSStateForceSettle::ArenaDtor(void* object) {
  CSStateForceSettle* _this = reinterpret_cast< CSStateForceSettle* >(object);
  (void)_this;
}
void CSStateForceSettle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSStateForceSettle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSStateForceSettle& CSStateForceSettle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSStateForceSettle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSStateForceSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSStateForceSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSStateForceSettle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSStateForceSettle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSStateForceSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSStateForceSettle)
  return target;
}

size_t CSStateForceSettle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSStateForceSettle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSStateForceSettle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSStateForceSettle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSStateForceSettle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSStateForceSettle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSStateForceSettle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSStateForceSettle)
    MergeFrom(*source);
  }
}

void CSStateForceSettle::MergeFrom(const CSStateForceSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSStateForceSettle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSStateForceSettle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSStateForceSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStateForceSettle::CopyFrom(const CSStateForceSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSStateForceSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStateForceSettle::IsInitialized() const {
  return true;
}

void CSStateForceSettle::InternalSwap(CSStateForceSettle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sourceuid_, other->sourceuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSStateForceSettle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCStateForceSettle::_Internal {
 public:
};

SCStateForceSettle::SCStateForceSettle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCStateForceSettle)
}
SCStateForceSettle::SCStateForceSettle(const SCStateForceSettle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&remain_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(remain_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCStateForceSettle)
}

void SCStateForceSettle::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&remain_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(remain_));
}

SCStateForceSettle::~SCStateForceSettle() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCStateForceSettle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCStateForceSettle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCStateForceSettle::ArenaDtor(void* object) {
  SCStateForceSettle* _this = reinterpret_cast< SCStateForceSettle* >(object);
  (void)_this;
}
void SCStateForceSettle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCStateForceSettle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCStateForceSettle& SCStateForceSettle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCStateForceSettle_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCStateForceSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCStateForceSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(remain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCStateForceSettle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCStateForceSettle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCStateForceSettle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceuid(), target);
  }

  // int32 originUID = 3;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_originuid(), target);
  }

  // int32 remain = 4;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCStateForceSettle)
  return target;
}

size_t SCStateForceSettle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCStateForceSettle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 sourceUID = 2;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 originUID = 3;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 remain = 4;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCStateForceSettle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCStateForceSettle)
  GOOGLE_DCHECK_NE(&from, this);
  const SCStateForceSettle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCStateForceSettle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCStateForceSettle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCStateForceSettle)
    MergeFrom(*source);
  }
}

void SCStateForceSettle::MergeFrom(const SCStateForceSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCStateForceSettle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
}

void SCStateForceSettle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCStateForceSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCStateForceSettle::CopyFrom(const SCStateForceSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCStateForceSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCStateForceSettle::IsInitialized() const {
  return true;
}

void SCStateForceSettle::InternalSwap(SCStateForceSettle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCStateForceSettle, remain_)
      + sizeof(SCStateForceSettle::remain_)
      - PROTOBUF_FIELD_OFFSET(SCStateForceSettle, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCStateForceSettle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAddMissedBullet::_Internal {
 public:
};

SCAddMissedBullet::SCAddMissedBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCAddMissedBullet)
}
SCAddMissedBullet::SCAddMissedBullet(const SCAddMissedBullet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&addnum_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(addnum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCAddMissedBullet)
}

void SCAddMissedBullet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addnum_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(addnum_));
}

SCAddMissedBullet::~SCAddMissedBullet() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCAddMissedBullet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAddMissedBullet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCAddMissedBullet::ArenaDtor(void* object) {
  SCAddMissedBullet* _this = reinterpret_cast< SCAddMissedBullet* >(object);
  (void)_this;
}
void SCAddMissedBullet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAddMissedBullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAddMissedBullet& SCAddMissedBullet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAddMissedBullet_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCAddMissedBullet::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCAddMissedBullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addnum_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(addnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAddMissedBullet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          addnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAddMissedBullet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCAddMissedBullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullettype(), target);
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sourceuid(), target);
  }

  // int32 addNum = 4;
  if (this->addnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_addnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCAddMissedBullet)
  return target;
}

size_t SCAddMissedBullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCAddMissedBullet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 addNum = 4;
  if (this->addnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAddMissedBullet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCAddMissedBullet)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAddMissedBullet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAddMissedBullet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCAddMissedBullet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCAddMissedBullet)
    MergeFrom(*source);
  }
}

void SCAddMissedBullet::MergeFrom(const SCAddMissedBullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCAddMissedBullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.addnum() != 0) {
    _internal_set_addnum(from._internal_addnum());
  }
}

void SCAddMissedBullet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCAddMissedBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAddMissedBullet::CopyFrom(const SCAddMissedBullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCAddMissedBullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAddMissedBullet::IsInitialized() const {
  return true;
}

void SCAddMissedBullet::InternalSwap(SCAddMissedBullet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCAddMissedBullet, addnum_)
      + sizeof(SCAddMissedBullet::addnum_)
      - PROTOBUF_FIELD_OFFSET(SCAddMissedBullet, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAddMissedBullet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUpdateBulletData::_Internal {
 public:
};

CSUpdateBulletData::CSUpdateBulletData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUpdateBulletData)
}
CSUpdateBulletData::CSUpdateBulletData(const CSUpdateBulletData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&isshooting_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(isshooting_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUpdateBulletData)
}

void CSUpdateBulletData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isshooting_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(isshooting_));
}

CSUpdateBulletData::~CSUpdateBulletData() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUpdateBulletData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUpdateBulletData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUpdateBulletData::ArenaDtor(void* object) {
  CSUpdateBulletData* _this = reinterpret_cast< CSUpdateBulletData* >(object);
  (void)_this;
}
void CSUpdateBulletData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUpdateBulletData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUpdateBulletData& CSUpdateBulletData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUpdateBulletData_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUpdateBulletData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUpdateBulletData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshooting_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(isshooting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUpdateBulletData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          confid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isShooting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isshooting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUpdateBulletData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUpdateBulletData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullettype(), target);
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sourceuid(), target);
  }

  // int32 confID = 4;
  if (this->confid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_confid(), target);
  }

  // bool isShooting = 5;
  if (this->isshooting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isshooting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUpdateBulletData)
  return target;
}

size_t CSUpdateBulletData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUpdateBulletData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 confID = 4;
  if (this->confid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confid());
  }

  // bool isShooting = 5;
  if (this->isshooting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUpdateBulletData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUpdateBulletData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUpdateBulletData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUpdateBulletData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUpdateBulletData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUpdateBulletData)
    MergeFrom(*source);
  }
}

void CSUpdateBulletData::MergeFrom(const CSUpdateBulletData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUpdateBulletData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.confid() != 0) {
    _internal_set_confid(from._internal_confid());
  }
  if (from.isshooting() != 0) {
    _internal_set_isshooting(from._internal_isshooting());
  }
}

void CSUpdateBulletData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUpdateBulletData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUpdateBulletData::CopyFrom(const CSUpdateBulletData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUpdateBulletData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpdateBulletData::IsInitialized() const {
  return true;
}

void CSUpdateBulletData::InternalSwap(CSUpdateBulletData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSUpdateBulletData, isshooting_)
      + sizeof(CSUpdateBulletData::isshooting_)
      - PROTOBUF_FIELD_OFFSET(CSUpdateBulletData, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUpdateBulletData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUpdateBulletData::_Internal {
 public:
};

SCUpdateBulletData::SCUpdateBulletData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUpdateBulletData)
}
SCUpdateBulletData::SCUpdateBulletData(const SCUpdateBulletData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&isshooting_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(isshooting_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUpdateBulletData)
}

void SCUpdateBulletData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isshooting_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(isshooting_));
}

SCUpdateBulletData::~SCUpdateBulletData() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUpdateBulletData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUpdateBulletData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUpdateBulletData::ArenaDtor(void* object) {
  SCUpdateBulletData* _this = reinterpret_cast< SCUpdateBulletData* >(object);
  (void)_this;
}
void SCUpdateBulletData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUpdateBulletData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUpdateBulletData& SCUpdateBulletData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUpdateBulletData_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUpdateBulletData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUpdateBulletData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshooting_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(isshooting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUpdateBulletData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          confid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isShooting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isshooting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUpdateBulletData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUpdateBulletData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // float angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angle(), target);
  }

  // int32 bulletType = 3;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bullettype(), target);
  }

  // int32 sourceUID = 4;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sourceuid(), target);
  }

  // int32 confID = 5;
  if (this->confid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_confid(), target);
  }

  // bool isShooting = 6;
  if (this->isshooting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isshooting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUpdateBulletData)
  return target;
}

size_t SCUpdateBulletData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUpdateBulletData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // float angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 bulletType = 3;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 sourceUID = 4;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  // int32 confID = 5;
  if (this->confid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confid());
  }

  // bool isShooting = 6;
  if (this->isshooting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUpdateBulletData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUpdateBulletData)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUpdateBulletData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUpdateBulletData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUpdateBulletData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUpdateBulletData)
    MergeFrom(*source);
  }
}

void SCUpdateBulletData::MergeFrom(const SCUpdateBulletData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUpdateBulletData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
  if (from.confid() != 0) {
    _internal_set_confid(from._internal_confid());
  }
  if (from.isshooting() != 0) {
    _internal_set_isshooting(from._internal_isshooting());
  }
}

void SCUpdateBulletData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUpdateBulletData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpdateBulletData::CopyFrom(const SCUpdateBulletData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUpdateBulletData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpdateBulletData::IsInitialized() const {
  return true;
}

void SCUpdateBulletData::InternalSwap(SCUpdateBulletData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUpdateBulletData, isshooting_)
      + sizeof(SCUpdateBulletData::isshooting_)
      - PROTOBUF_FIELD_OFFSET(SCUpdateBulletData, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUpdateBulletData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUseMissileBatch::_Internal {
 public:
};

CSUseMissileBatch::CSUseMissileBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUseMissileBatch)
}
CSUseMissileBatch::CSUseMissileBatch(const CSUseMissileBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUseMissileBatch)
}

void CSUseMissileBatch::SharedCtor() {
}

CSUseMissileBatch::~CSUseMissileBatch() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUseMissileBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUseMissileBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUseMissileBatch::ArenaDtor(void* object) {
  CSUseMissileBatch* _this = reinterpret_cast< CSUseMissileBatch* >(object);
  (void)_this;
}
void CSUseMissileBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUseMissileBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUseMissileBatch& CSUseMissileBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUseMissileBatch_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUseMissileBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUseMissileBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUseMissileBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUseMissileBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUseMissileBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUseMissileBatch)
  return target;
}

size_t CSUseMissileBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUseMissileBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUseMissileBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUseMissileBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUseMissileBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUseMissileBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUseMissileBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUseMissileBatch)
    MergeFrom(*source);
  }
}

void CSUseMissileBatch::MergeFrom(const CSUseMissileBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUseMissileBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSUseMissileBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUseMissileBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUseMissileBatch::CopyFrom(const CSUseMissileBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUseMissileBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUseMissileBatch::IsInitialized() const {
  return true;
}

void CSUseMissileBatch::InternalSwap(CSUseMissileBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUseMissileBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUseMissileBatch::_Internal {
 public:
};

SCUseMissileBatch::SCUseMissileBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remainmissile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUseMissileBatch)
}
SCUseMissileBatch::SCUseMissileBatch(const SCUseMissileBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remainmissile_(from.remainmissile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUseMissileBatch)
}

void SCUseMissileBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUseMissileBatch_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
}

SCUseMissileBatch::~SCUseMissileBatch() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUseMissileBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUseMissileBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUseMissileBatch::ArenaDtor(void* object) {
  SCUseMissileBatch* _this = reinterpret_cast< SCUseMissileBatch* >(object);
  (void)_this;
}
void SCUseMissileBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUseMissileBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUseMissileBatch& SCUseMissileBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUseMissileBatch_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUseMissileBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUseMissileBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remainmissile_.Clear();
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmoney_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(curmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUseMissileBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.MissileInfo remainMissile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remainmissile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUseMissileBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUseMissileBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 totalReward = 2;
  if (this->totalreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalreward(), target);
  }

  // int64 curMoney = 3;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_curmoney(), target);
  }

  // repeated .PlaneWar.MissileInfo remainMissile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remainmissile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_remainmissile(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUseMissileBatch)
  return target;
}

size_t SCUseMissileBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUseMissileBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MissileInfo remainMissile = 4;
  total_size += 1UL * this->_internal_remainmissile_size();
  for (const auto& msg : this->remainmissile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 totalReward = 2;
  if (this->totalreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalreward());
  }

  // int64 curMoney = 3;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUseMissileBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUseMissileBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUseMissileBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUseMissileBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUseMissileBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUseMissileBatch)
    MergeFrom(*source);
  }
}

void SCUseMissileBatch::MergeFrom(const SCUseMissileBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUseMissileBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remainmissile_.MergeFrom(from.remainmissile_);
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.totalreward() != 0) {
    _internal_set_totalreward(from._internal_totalreward());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
}

void SCUseMissileBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUseMissileBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUseMissileBatch::CopyFrom(const SCUseMissileBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUseMissileBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUseMissileBatch::IsInitialized() const {
  return true;
}

void SCUseMissileBatch::InternalSwap(SCUseMissileBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remainmissile_.InternalSwap(&other->remainmissile_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUseMissileBatch, curmoney_)
      + sizeof(SCUseMissileBatch::curmoney_)
      - PROTOBUF_FIELD_OFFSET(SCUseMissileBatch, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUseMissileBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncPropsToHall::_Internal {
 public:
};

CSSyncPropsToHall::CSSyncPropsToHall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSyncPropsToHall)
}
CSSyncPropsToHall::CSSyncPropsToHall(const CSSyncPropsToHall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSyncPropsToHall)
}

void CSSyncPropsToHall::SharedCtor() {
}

CSSyncPropsToHall::~CSSyncPropsToHall() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSyncPropsToHall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncPropsToHall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncPropsToHall::ArenaDtor(void* object) {
  CSSyncPropsToHall* _this = reinterpret_cast< CSSyncPropsToHall* >(object);
  (void)_this;
}
void CSSyncPropsToHall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncPropsToHall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncPropsToHall& CSSyncPropsToHall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncPropsToHall_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSyncPropsToHall::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSyncPropsToHall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncPropsToHall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncPropsToHall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSyncPropsToHall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSyncPropsToHall)
  return target;
}

size_t CSSyncPropsToHall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSyncPropsToHall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncPropsToHall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSyncPropsToHall)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncPropsToHall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncPropsToHall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSyncPropsToHall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSyncPropsToHall)
    MergeFrom(*source);
  }
}

void CSSyncPropsToHall::MergeFrom(const CSSyncPropsToHall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSyncPropsToHall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSyncPropsToHall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSyncPropsToHall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncPropsToHall::CopyFrom(const CSSyncPropsToHall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSyncPropsToHall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncPropsToHall::IsInitialized() const {
  return true;
}

void CSSyncPropsToHall::InternalSwap(CSSyncPropsToHall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncPropsToHall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncPropsToHall::_Internal {
 public:
};

SCSyncPropsToHall::SCSyncPropsToHall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncPropsToHall)
}
SCSyncPropsToHall::SCSyncPropsToHall(const SCSyncPropsToHall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncPropsToHall)
}

void SCSyncPropsToHall::SharedCtor() {
}

SCSyncPropsToHall::~SCSyncPropsToHall() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncPropsToHall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncPropsToHall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncPropsToHall::ArenaDtor(void* object) {
  SCSyncPropsToHall* _this = reinterpret_cast< SCSyncPropsToHall* >(object);
  (void)_this;
}
void SCSyncPropsToHall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncPropsToHall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncPropsToHall& SCSyncPropsToHall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncPropsToHall_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncPropsToHall::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncPropsToHall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncPropsToHall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncPropsToHall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncPropsToHall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncPropsToHall)
  return target;
}

size_t SCSyncPropsToHall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncPropsToHall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncPropsToHall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncPropsToHall)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncPropsToHall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncPropsToHall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncPropsToHall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncPropsToHall)
    MergeFrom(*source);
  }
}

void SCSyncPropsToHall::MergeFrom(const SCSyncPropsToHall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncPropsToHall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCSyncPropsToHall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncPropsToHall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncPropsToHall::CopyFrom(const SCSyncPropsToHall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncPropsToHall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncPropsToHall::IsInitialized() const {
  return true;
}

void SCSyncPropsToHall::InternalSwap(SCSyncPropsToHall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncPropsToHall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChangeTable::_Internal {
 public:
};

CSChangeTable::CSChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSChangeTable)
}
CSChangeTable::CSChangeTable(const CSChangeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSChangeTable)
}

void CSChangeTable::SharedCtor() {
}

CSChangeTable::~CSChangeTable() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSChangeTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChangeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChangeTable::ArenaDtor(void* object) {
  CSChangeTable* _this = reinterpret_cast< CSChangeTable* >(object);
  (void)_this;
}
void CSChangeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChangeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChangeTable& CSChangeTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChangeTable_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSChangeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChangeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChangeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSChangeTable)
  return target;
}

size_t CSChangeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSChangeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChangeTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChangeTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChangeTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSChangeTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSChangeTable)
    MergeFrom(*source);
  }
}

void CSChangeTable::MergeFrom(const CSChangeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSChangeTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChangeTable::CopyFrom(const CSChangeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangeTable::IsInitialized() const {
  return true;
}

void CSChangeTable::InternalSwap(CSChangeTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChangeTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChangeTable::_Internal {
 public:
};

SCChangeTable::SCChangeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCChangeTable)
}
SCChangeTable::SCChangeTable(const SCChangeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCChangeTable)
}

void SCChangeTable::SharedCtor() {
}

SCChangeTable::~SCChangeTable() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCChangeTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChangeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChangeTable::ArenaDtor(void* object) {
  SCChangeTable* _this = reinterpret_cast< SCChangeTable* >(object);
  (void)_this;
}
void SCChangeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChangeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChangeTable& SCChangeTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChangeTable_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCChangeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChangeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChangeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCChangeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCChangeTable)
  return target;
}

size_t SCChangeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCChangeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChangeTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChangeTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChangeTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCChangeTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCChangeTable)
    MergeFrom(*source);
  }
}

void SCChangeTable::MergeFrom(const SCChangeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCChangeTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCChangeTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChangeTable::CopyFrom(const SCChangeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCChangeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChangeTable::IsInitialized() const {
  return true;
}

void SCChangeTable::InternalSwap(SCChangeTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChangeTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUseRoulette::_Internal {
 public:
};

CSUseRoulette::CSUseRoulette(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUseRoulette)
}
CSUseRoulette::CSUseRoulette(const CSUseRoulette& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUseRoulette)
}

void CSUseRoulette::SharedCtor() {
  id_ = 0;
}

CSUseRoulette::~CSUseRoulette() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUseRoulette)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUseRoulette::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUseRoulette::ArenaDtor(void* object) {
  CSUseRoulette* _this = reinterpret_cast< CSUseRoulette* >(object);
  (void)_this;
}
void CSUseRoulette::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUseRoulette::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUseRoulette& CSUseRoulette::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUseRoulette_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUseRoulette::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUseRoulette)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUseRoulette::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 iD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUseRoulette::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUseRoulette)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iD = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUseRoulette)
  return target;
}

size_t CSUseRoulette::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUseRoulette)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iD = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUseRoulette::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUseRoulette)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUseRoulette* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUseRoulette>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUseRoulette)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUseRoulette)
    MergeFrom(*source);
  }
}

void CSUseRoulette::MergeFrom(const CSUseRoulette& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUseRoulette)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSUseRoulette::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUseRoulette)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUseRoulette::CopyFrom(const CSUseRoulette& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUseRoulette)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUseRoulette::IsInitialized() const {
  return true;
}

void CSUseRoulette::InternalSwap(CSUseRoulette* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUseRoulette::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUseRoulette::_Internal {
 public:
  static const ::PlaneWar::Roulette& roulette(const SCUseRoulette* msg);
};

const ::PlaneWar::Roulette&
SCUseRoulette::_Internal::roulette(const SCUseRoulette* msg) {
  return *msg->roulette_;
}
SCUseRoulette::SCUseRoulette(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUseRoulette)
}
SCUseRoulette::SCUseRoulette(const SCUseRoulette& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roulette()) {
    roulette_ = new ::PlaneWar::Roulette(*from.roulette_);
  } else {
    roulette_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUseRoulette)
}

void SCUseRoulette::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUseRoulette_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roulette_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&roulette_)) + sizeof(reward_));
}

SCUseRoulette::~SCUseRoulette() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUseRoulette)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUseRoulette::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roulette_;
}

void SCUseRoulette::ArenaDtor(void* object) {
  SCUseRoulette* _this = reinterpret_cast< SCUseRoulette* >(object);
  (void)_this;
}
void SCUseRoulette::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUseRoulette::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUseRoulette& SCUseRoulette::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUseRoulette_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUseRoulette::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUseRoulette)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && roulette_ != nullptr) {
    delete roulette_;
  }
  roulette_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUseRoulette::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 costNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          costnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Roulette roulette = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_roulette(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUseRoulette::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUseRoulette)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 costNum = 3;
  if (this->costnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_costnum(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  // .PlaneWar.Roulette roulette = 5;
  if (this->has_roulette()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::roulette(this), target, stream);
  }

  // int32 reward = 6;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_reward(), target);
  }

  // int64 curMoney = 7;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_curmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUseRoulette)
  return target;
}

size_t SCUseRoulette::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUseRoulette)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Roulette roulette = 5;
  if (this->has_roulette()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roulette_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 costNum = 3;
  if (this->costnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costnum());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int64 curMoney = 7;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  // int32 reward = 6;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUseRoulette::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUseRoulette)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUseRoulette* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUseRoulette>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUseRoulette)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUseRoulette)
    MergeFrom(*source);
  }
}

void SCUseRoulette::MergeFrom(const SCUseRoulette& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUseRoulette)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roulette()) {
    _internal_mutable_roulette()->::PlaneWar::Roulette::MergeFrom(from._internal_roulette());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.costnum() != 0) {
    _internal_set_costnum(from._internal_costnum());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void SCUseRoulette::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUseRoulette)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUseRoulette::CopyFrom(const SCUseRoulette& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUseRoulette)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUseRoulette::IsInitialized() const {
  return true;
}

void SCUseRoulette::InternalSwap(SCUseRoulette* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUseRoulette, reward_)
      + sizeof(SCUseRoulette::reward_)
      - PROTOBUF_FIELD_OFFSET(SCUseRoulette, roulette_)>(
          reinterpret_cast<char*>(&roulette_),
          reinterpret_cast<char*>(&other->roulette_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUseRoulette::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSRedEnvelopePoint::_Internal {
 public:
};

CSRedEnvelopePoint::CSRedEnvelopePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSRedEnvelopePoint)
}
CSRedEnvelopePoint::CSRedEnvelopePoint(const CSRedEnvelopePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSRedEnvelopePoint)
}

void CSRedEnvelopePoint::SharedCtor() {
}

CSRedEnvelopePoint::~CSRedEnvelopePoint() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSRedEnvelopePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSRedEnvelopePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSRedEnvelopePoint::ArenaDtor(void* object) {
  CSRedEnvelopePoint* _this = reinterpret_cast< CSRedEnvelopePoint* >(object);
  (void)_this;
}
void CSRedEnvelopePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSRedEnvelopePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSRedEnvelopePoint& CSRedEnvelopePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSRedEnvelopePoint_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSRedEnvelopePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSRedEnvelopePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRedEnvelopePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSRedEnvelopePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSRedEnvelopePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSRedEnvelopePoint)
  return target;
}

size_t CSRedEnvelopePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSRedEnvelopePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSRedEnvelopePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSRedEnvelopePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CSRedEnvelopePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSRedEnvelopePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSRedEnvelopePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSRedEnvelopePoint)
    MergeFrom(*source);
  }
}

void CSRedEnvelopePoint::MergeFrom(const CSRedEnvelopePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSRedEnvelopePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSRedEnvelopePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSRedEnvelopePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRedEnvelopePoint::CopyFrom(const CSRedEnvelopePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSRedEnvelopePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRedEnvelopePoint::IsInitialized() const {
  return true;
}

void CSRedEnvelopePoint::InternalSwap(CSRedEnvelopePoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRedEnvelopePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RedOpenInfo::_Internal {
 public:
};

RedOpenInfo::RedOpenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RedOpenInfo)
}
RedOpenInfo::RedOpenInfo(const RedOpenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlockviplevel_) -
    reinterpret_cast<char*>(&status_)) + sizeof(unlockviplevel_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RedOpenInfo)
}

void RedOpenInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unlockviplevel_) -
      reinterpret_cast<char*>(&status_)) + sizeof(unlockviplevel_));
}

RedOpenInfo::~RedOpenInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RedOpenInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedOpenInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedOpenInfo::ArenaDtor(void* object) {
  RedOpenInfo* _this = reinterpret_cast< RedOpenInfo* >(object);
  (void)_this;
}
void RedOpenInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedOpenInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedOpenInfo& RedOpenInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedOpenInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RedOpenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RedOpenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlockviplevel_) -
      reinterpret_cast<char*>(&status_)) + sizeof(unlockviplevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedOpenInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.RedOpenStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::PlaneWar::RedOpenStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 unLockVipLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unlockviplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedOpenInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RedOpenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.RedOpenStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // int32 unLockVipLevel = 2;
  if (this->unlockviplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_unlockviplevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RedOpenInfo)
  return target;
}

size_t RedOpenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RedOpenInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RedOpenStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 unLockVipLevel = 2;
  if (this->unlockviplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unlockviplevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedOpenInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RedOpenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedOpenInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedOpenInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RedOpenInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RedOpenInfo)
    MergeFrom(*source);
  }
}

void RedOpenInfo::MergeFrom(const RedOpenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RedOpenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.unlockviplevel() != 0) {
    _internal_set_unlockviplevel(from._internal_unlockviplevel());
  }
}

void RedOpenInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RedOpenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedOpenInfo::CopyFrom(const RedOpenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RedOpenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedOpenInfo::IsInitialized() const {
  return true;
}

void RedOpenInfo::InternalSwap(RedOpenInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedOpenInfo, unlockviplevel_)
      + sizeof(RedOpenInfo::unlockviplevel_)
      - PROTOBUF_FIELD_OFFSET(RedOpenInfo, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedOpenInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRedEnvelopePoint::_Internal {
 public:
};

SCRedEnvelopePoint::SCRedEnvelopePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  redopenlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRedEnvelopePoint)
}
SCRedEnvelopePoint::SCRedEnvelopePoint(const SCRedEnvelopePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      redopenlist_(from.redopenlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&curpoint_, &from.curpoint_,
    static_cast<size_t>(reinterpret_cast<char*>(&costpoint_) -
    reinterpret_cast<char*>(&curpoint_)) + sizeof(costpoint_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRedEnvelopePoint)
}

void SCRedEnvelopePoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRedEnvelopePoint_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&curpoint_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&costpoint_) -
      reinterpret_cast<char*>(&curpoint_)) + sizeof(costpoint_));
}

SCRedEnvelopePoint::~SCRedEnvelopePoint() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRedEnvelopePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRedEnvelopePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRedEnvelopePoint::ArenaDtor(void* object) {
  SCRedEnvelopePoint* _this = reinterpret_cast< SCRedEnvelopePoint* >(object);
  (void)_this;
}
void SCRedEnvelopePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRedEnvelopePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRedEnvelopePoint& SCRedEnvelopePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRedEnvelopePoint_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRedEnvelopePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRedEnvelopePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redopenlist_.Clear();
  ::memset(&curpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costpoint_) -
      reinterpret_cast<char*>(&curpoint_)) + sizeof(costpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRedEnvelopePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 curPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 costPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          costpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.RedOpenInfo redOpenList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redopenlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRedEnvelopePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRedEnvelopePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curPoint = 1;
  if (this->curpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_curpoint(), target);
  }

  // int32 maxPoint = 2;
  if (this->maxpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxpoint(), target);
  }

  // int32 costPoint = 3;
  if (this->costpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_costpoint(), target);
  }

  // repeated .PlaneWar.RedOpenInfo redOpenList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_redopenlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_redopenlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRedEnvelopePoint)
  return target;
}

size_t SCRedEnvelopePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRedEnvelopePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.RedOpenInfo redOpenList = 4;
  total_size += 1UL * this->_internal_redopenlist_size();
  for (const auto& msg : this->redopenlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 curPoint = 1;
  if (this->curpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curpoint());
  }

  // int32 maxPoint = 2;
  if (this->maxpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxpoint());
  }

  // int32 costPoint = 3;
  if (this->costpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRedEnvelopePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRedEnvelopePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRedEnvelopePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRedEnvelopePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRedEnvelopePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRedEnvelopePoint)
    MergeFrom(*source);
  }
}

void SCRedEnvelopePoint::MergeFrom(const SCRedEnvelopePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRedEnvelopePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redopenlist_.MergeFrom(from.redopenlist_);
  if (from.curpoint() != 0) {
    _internal_set_curpoint(from._internal_curpoint());
  }
  if (from.maxpoint() != 0) {
    _internal_set_maxpoint(from._internal_maxpoint());
  }
  if (from.costpoint() != 0) {
    _internal_set_costpoint(from._internal_costpoint());
  }
}

void SCRedEnvelopePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRedEnvelopePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRedEnvelopePoint::CopyFrom(const SCRedEnvelopePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRedEnvelopePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRedEnvelopePoint::IsInitialized() const {
  return true;
}

void SCRedEnvelopePoint::InternalSwap(SCRedEnvelopePoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  redopenlist_.InternalSwap(&other->redopenlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRedEnvelopePoint, costpoint_)
      + sizeof(SCRedEnvelopePoint::costpoint_)
      - PROTOBUF_FIELD_OFFSET(SCRedEnvelopePoint, curpoint_)>(
          reinterpret_cast<char*>(&curpoint_),
          reinterpret_cast<char*>(&other->curpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRedEnvelopePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSRedEnvelopeInfo::_Internal {
 public:
};

CSRedEnvelopeInfo::CSRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSRedEnvelopeInfo)
}
CSRedEnvelopeInfo::CSRedEnvelopeInfo(const CSRedEnvelopeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isopen_ = from.isopen_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSRedEnvelopeInfo)
}

void CSRedEnvelopeInfo::SharedCtor() {
  isopen_ = false;
}

CSRedEnvelopeInfo::~CSRedEnvelopeInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSRedEnvelopeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSRedEnvelopeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSRedEnvelopeInfo::ArenaDtor(void* object) {
  CSRedEnvelopeInfo* _this = reinterpret_cast< CSRedEnvelopeInfo* >(object);
  (void)_this;
}
void CSRedEnvelopeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSRedEnvelopeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSRedEnvelopeInfo& CSRedEnvelopeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSRedEnvelopeInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSRedEnvelopeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isopen_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRedEnvelopeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSRedEnvelopeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isopen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSRedEnvelopeInfo)
  return target;
}

size_t CSRedEnvelopeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSRedEnvelopeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSRedEnvelopeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSRedEnvelopeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSRedEnvelopeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSRedEnvelopeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSRedEnvelopeInfo)
    MergeFrom(*source);
  }
}

void CSRedEnvelopeInfo::MergeFrom(const CSRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
}

void CSRedEnvelopeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRedEnvelopeInfo::CopyFrom(const CSRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRedEnvelopeInfo::IsInitialized() const {
  return true;
}

void CSRedEnvelopeInfo::InternalSwap(CSRedEnvelopeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isopen_, other->isopen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRedEnvelopeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RedInfo::_Internal {
 public:
};

RedInfo::RedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RedInfo)
}
RedInfo::RedInfo(const RedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RedInfo)
}

void RedInfo::SharedCtor() {
  cost_ = 0;
}

RedInfo::~RedInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedInfo::ArenaDtor(void* object) {
  RedInfo* _this = reinterpret_cast< RedInfo* >(object);
  (void)_this;
}
void RedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedInfo& RedInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost = 1;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RedInfo)
  return target;
}

size_t RedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cost = 1;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RedInfo)
    MergeFrom(*source);
  }
}

void RedInfo::MergeFrom(const RedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void RedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedInfo::CopyFrom(const RedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedInfo::IsInitialized() const {
  return true;
}

void RedInfo::InternalSwap(RedInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(cost_, other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRedEnvelopeInfo::_Internal {
 public:
};

SCRedEnvelopeInfo::SCRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  redlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRedEnvelopeInfo)
}
SCRedEnvelopeInfo::SCRedEnvelopeInfo(const SCRedEnvelopeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      redlist_(from.redlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRedEnvelopeInfo)
}

void SCRedEnvelopeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRedEnvelopeInfo_PlaneWar_2eproto.base);
}

SCRedEnvelopeInfo::~SCRedEnvelopeInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRedEnvelopeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRedEnvelopeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCRedEnvelopeInfo::ArenaDtor(void* object) {
  SCRedEnvelopeInfo* _this = reinterpret_cast< SCRedEnvelopeInfo* >(object);
  (void)_this;
}
void SCRedEnvelopeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRedEnvelopeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRedEnvelopeInfo& SCRedEnvelopeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRedEnvelopeInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRedEnvelopeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRedEnvelopeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.RedInfo redList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRedEnvelopeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.RedInfo redList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_redlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_redlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRedEnvelopeInfo)
  return target;
}

size_t SCRedEnvelopeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRedEnvelopeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.RedInfo redList = 1;
  total_size += 1UL * this->_internal_redlist_size();
  for (const auto& msg : this->redlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRedEnvelopeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRedEnvelopeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRedEnvelopeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRedEnvelopeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRedEnvelopeInfo)
    MergeFrom(*source);
  }
}

void SCRedEnvelopeInfo::MergeFrom(const SCRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redlist_.MergeFrom(from.redlist_);
}

void SCRedEnvelopeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRedEnvelopeInfo::CopyFrom(const SCRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRedEnvelopeInfo::IsInitialized() const {
  return true;
}

void SCRedEnvelopeInfo::InternalSwap(SCRedEnvelopeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  redlist_.InternalSwap(&other->redlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRedEnvelopeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenRedEnvelope::_Internal {
 public:
};

CSOpenRedEnvelope::CSOpenRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSOpenRedEnvelope)
}
CSOpenRedEnvelope::CSOpenRedEnvelope(const CSOpenRedEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSOpenRedEnvelope)
}

void CSOpenRedEnvelope::SharedCtor() {
  index_ = 0;
}

CSOpenRedEnvelope::~CSOpenRedEnvelope() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSOpenRedEnvelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenRedEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOpenRedEnvelope::ArenaDtor(void* object) {
  CSOpenRedEnvelope* _this = reinterpret_cast< CSOpenRedEnvelope* >(object);
  (void)_this;
}
void CSOpenRedEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenRedEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenRedEnvelope& CSOpenRedEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenRedEnvelope_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSOpenRedEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSOpenRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenRedEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenRedEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSOpenRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSOpenRedEnvelope)
  return target;
}

size_t CSOpenRedEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSOpenRedEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenRedEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSOpenRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenRedEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenRedEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSOpenRedEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSOpenRedEnvelope)
    MergeFrom(*source);
  }
}

void CSOpenRedEnvelope::MergeFrom(const CSOpenRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSOpenRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void CSOpenRedEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSOpenRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenRedEnvelope::CopyFrom(const CSOpenRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSOpenRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenRedEnvelope::IsInitialized() const {
  return true;
}

void CSOpenRedEnvelope::InternalSwap(CSOpenRedEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenRedEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RedUpgradeInfo::_Internal {
 public:
};

RedUpgradeInfo::RedUpgradeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RedUpgradeInfo)
}
RedUpgradeInfo::RedUpgradeInfo(const RedUpgradeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leastreward_, &from.leastreward_,
    static_cast<size_t>(reinterpret_cast<char*>(&remainupgradenum_) -
    reinterpret_cast<char*>(&leastreward_)) + sizeof(remainupgradenum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RedUpgradeInfo)
}

void RedUpgradeInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&leastreward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&remainupgradenum_) -
      reinterpret_cast<char*>(&leastreward_)) + sizeof(remainupgradenum_));
}

RedUpgradeInfo::~RedUpgradeInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RedUpgradeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedUpgradeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedUpgradeInfo::ArenaDtor(void* object) {
  RedUpgradeInfo* _this = reinterpret_cast< RedUpgradeInfo* >(object);
  (void)_this;
}
void RedUpgradeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedUpgradeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedUpgradeInfo& RedUpgradeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedUpgradeInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RedUpgradeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RedUpgradeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leastreward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainupgradenum_) -
      reinterpret_cast<char*>(&leastreward_)) + sizeof(remainupgradenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedUpgradeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 leastReward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leastreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mayAddReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mayaddreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxUpgradeNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxupgradenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remainUpgradeNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remainupgradenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedUpgradeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RedUpgradeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leastReward = 1;
  if (this->leastreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leastreward(), target);
  }

  // int32 mayAddReward = 2;
  if (this->mayaddreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mayaddreward(), target);
  }

  // int32 maxUpgradeNum = 3;
  if (this->maxupgradenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxupgradenum(), target);
  }

  // int32 remainUpgradeNum = 4;
  if (this->remainupgradenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remainupgradenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RedUpgradeInfo)
  return target;
}

size_t RedUpgradeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RedUpgradeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 leastReward = 1;
  if (this->leastreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leastreward());
  }

  // int32 mayAddReward = 2;
  if (this->mayaddreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mayaddreward());
  }

  // int32 maxUpgradeNum = 3;
  if (this->maxupgradenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxupgradenum());
  }

  // int32 remainUpgradeNum = 4;
  if (this->remainupgradenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remainupgradenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedUpgradeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RedUpgradeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedUpgradeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedUpgradeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RedUpgradeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RedUpgradeInfo)
    MergeFrom(*source);
  }
}

void RedUpgradeInfo::MergeFrom(const RedUpgradeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RedUpgradeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leastreward() != 0) {
    _internal_set_leastreward(from._internal_leastreward());
  }
  if (from.mayaddreward() != 0) {
    _internal_set_mayaddreward(from._internal_mayaddreward());
  }
  if (from.maxupgradenum() != 0) {
    _internal_set_maxupgradenum(from._internal_maxupgradenum());
  }
  if (from.remainupgradenum() != 0) {
    _internal_set_remainupgradenum(from._internal_remainupgradenum());
  }
}

void RedUpgradeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RedUpgradeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedUpgradeInfo::CopyFrom(const RedUpgradeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RedUpgradeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedUpgradeInfo::IsInitialized() const {
  return true;
}

void RedUpgradeInfo::InternalSwap(RedUpgradeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedUpgradeInfo, remainupgradenum_)
      + sizeof(RedUpgradeInfo::remainupgradenum_)
      - PROTOBUF_FIELD_OFFSET(RedUpgradeInfo, leastreward_)>(
          reinterpret_cast<char*>(&leastreward_),
          reinterpret_cast<char*>(&other->leastreward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedUpgradeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenRedEnvelope::_Internal {
 public:
  static const ::PlaneWar::RedUpgradeInfo& upgradeinfo(const SCOpenRedEnvelope* msg);
};

const ::PlaneWar::RedUpgradeInfo&
SCOpenRedEnvelope::_Internal::upgradeinfo(const SCOpenRedEnvelope* msg) {
  return *msg->upgradeinfo_;
}
SCOpenRedEnvelope::SCOpenRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCOpenRedEnvelope)
}
SCOpenRedEnvelope::SCOpenRedEnvelope(const SCOpenRedEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upgradeinfo()) {
    upgradeinfo_ = new ::PlaneWar::RedUpgradeInfo(*from.upgradeinfo_);
  } else {
    upgradeinfo_ = nullptr;
  }
  ::memcpy(&rawreward_, &from.rawreward_,
    static_cast<size_t>(reinterpret_cast<char*>(&grantthreshold_) -
    reinterpret_cast<char*>(&rawreward_)) + sizeof(grantthreshold_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCOpenRedEnvelope)
}

void SCOpenRedEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenRedEnvelope_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&upgradeinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&grantthreshold_) -
      reinterpret_cast<char*>(&upgradeinfo_)) + sizeof(grantthreshold_));
}

SCOpenRedEnvelope::~SCOpenRedEnvelope() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCOpenRedEnvelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenRedEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete upgradeinfo_;
}

void SCOpenRedEnvelope::ArenaDtor(void* object) {
  SCOpenRedEnvelope* _this = reinterpret_cast< SCOpenRedEnvelope* >(object);
  (void)_this;
}
void SCOpenRedEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenRedEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenRedEnvelope& SCOpenRedEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenRedEnvelope_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCOpenRedEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCOpenRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && upgradeinfo_ != nullptr) {
    delete upgradeinfo_;
  }
  upgradeinfo_ = nullptr;
  ::memset(&rawreward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grantthreshold_) -
      reinterpret_cast<char*>(&rawreward_)) + sizeof(grantthreshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenRedEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rawReward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rawreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grantThreshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grantthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RedUpgradeInfo upgradeInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenRedEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCOpenRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rawReward = 1;
  if (this->rawreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rawreward(), target);
  }

  // int32 grantThreshold = 2;
  if (this->grantthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_grantthreshold(), target);
  }

  // .PlaneWar.RedUpgradeInfo upgradeInfo = 3;
  if (this->has_upgradeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::upgradeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCOpenRedEnvelope)
  return target;
}

size_t SCOpenRedEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCOpenRedEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RedUpgradeInfo upgradeInfo = 3;
  if (this->has_upgradeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upgradeinfo_);
  }

  // int32 rawReward = 1;
  if (this->rawreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rawreward());
  }

  // int32 grantThreshold = 2;
  if (this->grantthreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grantthreshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenRedEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCOpenRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenRedEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenRedEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCOpenRedEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCOpenRedEnvelope)
    MergeFrom(*source);
  }
}

void SCOpenRedEnvelope::MergeFrom(const SCOpenRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCOpenRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_upgradeinfo()) {
    _internal_mutable_upgradeinfo()->::PlaneWar::RedUpgradeInfo::MergeFrom(from._internal_upgradeinfo());
  }
  if (from.rawreward() != 0) {
    _internal_set_rawreward(from._internal_rawreward());
  }
  if (from.grantthreshold() != 0) {
    _internal_set_grantthreshold(from._internal_grantthreshold());
  }
}

void SCOpenRedEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCOpenRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenRedEnvelope::CopyFrom(const SCOpenRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCOpenRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenRedEnvelope::IsInitialized() const {
  return true;
}

void SCOpenRedEnvelope::InternalSwap(SCOpenRedEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCOpenRedEnvelope, grantthreshold_)
      + sizeof(SCOpenRedEnvelope::grantthreshold_)
      - PROTOBUF_FIELD_OFFSET(SCOpenRedEnvelope, upgradeinfo_)>(
          reinterpret_cast<char*>(&upgradeinfo_),
          reinterpret_cast<char*>(&other->upgradeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenRedEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUpgradeRedEnvelope::_Internal {
 public:
};

CSUpgradeRedEnvelope::CSUpgradeRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSUpgradeRedEnvelope)
}
CSUpgradeRedEnvelope::CSUpgradeRedEnvelope(const CSUpgradeRedEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isupgrade_ = from.isupgrade_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSUpgradeRedEnvelope)
}

void CSUpgradeRedEnvelope::SharedCtor() {
  isupgrade_ = false;
}

CSUpgradeRedEnvelope::~CSUpgradeRedEnvelope() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSUpgradeRedEnvelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUpgradeRedEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUpgradeRedEnvelope::ArenaDtor(void* object) {
  CSUpgradeRedEnvelope* _this = reinterpret_cast< CSUpgradeRedEnvelope* >(object);
  (void)_this;
}
void CSUpgradeRedEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUpgradeRedEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUpgradeRedEnvelope& CSUpgradeRedEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUpgradeRedEnvelope_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSUpgradeRedEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSUpgradeRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isupgrade_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUpgradeRedEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isUpgrade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isupgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUpgradeRedEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSUpgradeRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isUpgrade = 1;
  if (this->isupgrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isupgrade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSUpgradeRedEnvelope)
  return target;
}

size_t CSUpgradeRedEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSUpgradeRedEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isUpgrade = 1;
  if (this->isupgrade() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUpgradeRedEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSUpgradeRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUpgradeRedEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUpgradeRedEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSUpgradeRedEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSUpgradeRedEnvelope)
    MergeFrom(*source);
  }
}

void CSUpgradeRedEnvelope::MergeFrom(const CSUpgradeRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSUpgradeRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isupgrade() != 0) {
    _internal_set_isupgrade(from._internal_isupgrade());
  }
}

void CSUpgradeRedEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSUpgradeRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUpgradeRedEnvelope::CopyFrom(const CSUpgradeRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSUpgradeRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpgradeRedEnvelope::IsInitialized() const {
  return true;
}

void CSUpgradeRedEnvelope::InternalSwap(CSUpgradeRedEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isupgrade_, other->isupgrade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUpgradeRedEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUpgradeRedEnvelope::_Internal {
 public:
  static const ::PlaneWar::RedUpgradeInfo& upgradeinfo(const SCUpgradeRedEnvelope* msg);
};

const ::PlaneWar::RedUpgradeInfo&
SCUpgradeRedEnvelope::_Internal::upgradeinfo(const SCUpgradeRedEnvelope* msg) {
  return *msg->upgradeinfo_;
}
SCUpgradeRedEnvelope::SCUpgradeRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUpgradeRedEnvelope)
}
SCUpgradeRedEnvelope::SCUpgradeRedEnvelope(const SCUpgradeRedEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upgradeinfo()) {
    upgradeinfo_ = new ::PlaneWar::RedUpgradeInfo(*from.upgradeinfo_);
  } else {
    upgradeinfo_ = nullptr;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&addreward_) -
    reinterpret_cast<char*>(&result_)) + sizeof(addreward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUpgradeRedEnvelope)
}

void SCUpgradeRedEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUpgradeRedEnvelope_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&upgradeinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addreward_) -
      reinterpret_cast<char*>(&upgradeinfo_)) + sizeof(addreward_));
}

SCUpgradeRedEnvelope::~SCUpgradeRedEnvelope() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUpgradeRedEnvelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUpgradeRedEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete upgradeinfo_;
}

void SCUpgradeRedEnvelope::ArenaDtor(void* object) {
  SCUpgradeRedEnvelope* _this = reinterpret_cast< SCUpgradeRedEnvelope* >(object);
  (void)_this;
}
void SCUpgradeRedEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUpgradeRedEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUpgradeRedEnvelope& SCUpgradeRedEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUpgradeRedEnvelope_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUpgradeRedEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUpgradeRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && upgradeinfo_ != nullptr) {
    delete upgradeinfo_;
  }
  upgradeinfo_ = nullptr;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addreward_) -
      reinterpret_cast<char*>(&result_)) + sizeof(addreward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUpgradeRedEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.UpgradeRedResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::PlaneWar::UpgradeRedResult>(val));
        } else goto handle_unusual;
        continue;
      // int32 curReward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          curreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grantThreshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grantthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addReward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          addreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RedUpgradeInfo upgradeInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUpgradeRedEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUpgradeRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.UpgradeRedResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 curReward = 2;
  if (this->curreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_curreward(), target);
  }

  // int32 grantThreshold = 3;
  if (this->grantthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_grantthreshold(), target);
  }

  // int32 addReward = 4;
  if (this->addreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_addreward(), target);
  }

  // .PlaneWar.RedUpgradeInfo upgradeInfo = 5;
  if (this->has_upgradeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::upgradeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUpgradeRedEnvelope)
  return target;
}

size_t SCUpgradeRedEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUpgradeRedEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RedUpgradeInfo upgradeInfo = 5;
  if (this->has_upgradeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upgradeinfo_);
  }

  // .PlaneWar.UpgradeRedResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 curReward = 2;
  if (this->curreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curreward());
  }

  // int32 grantThreshold = 3;
  if (this->grantthreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grantthreshold());
  }

  // int32 addReward = 4;
  if (this->addreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addreward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUpgradeRedEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUpgradeRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUpgradeRedEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUpgradeRedEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUpgradeRedEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUpgradeRedEnvelope)
    MergeFrom(*source);
  }
}

void SCUpgradeRedEnvelope::MergeFrom(const SCUpgradeRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUpgradeRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_upgradeinfo()) {
    _internal_mutable_upgradeinfo()->::PlaneWar::RedUpgradeInfo::MergeFrom(from._internal_upgradeinfo());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.curreward() != 0) {
    _internal_set_curreward(from._internal_curreward());
  }
  if (from.grantthreshold() != 0) {
    _internal_set_grantthreshold(from._internal_grantthreshold());
  }
  if (from.addreward() != 0) {
    _internal_set_addreward(from._internal_addreward());
  }
}

void SCUpgradeRedEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUpgradeRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpgradeRedEnvelope::CopyFrom(const SCUpgradeRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUpgradeRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpgradeRedEnvelope::IsInitialized() const {
  return true;
}

void SCUpgradeRedEnvelope::InternalSwap(SCUpgradeRedEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUpgradeRedEnvelope, addreward_)
      + sizeof(SCUpgradeRedEnvelope::addreward_)
      - PROTOBUF_FIELD_OFFSET(SCUpgradeRedEnvelope, upgradeinfo_)>(
          reinterpret_cast<char*>(&upgradeinfo_),
          reinterpret_cast<char*>(&other->upgradeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUpgradeRedEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSCommonRedEnvelopeInfo::_Internal {
 public:
};

CSCommonRedEnvelopeInfo::CSCommonRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSCommonRedEnvelopeInfo)
}
CSCommonRedEnvelopeInfo::CSCommonRedEnvelopeInfo(const CSCommonRedEnvelopeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isopen_ = from.isopen_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSCommonRedEnvelopeInfo)
}

void CSCommonRedEnvelopeInfo::SharedCtor() {
  isopen_ = false;
}

CSCommonRedEnvelopeInfo::~CSCommonRedEnvelopeInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSCommonRedEnvelopeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSCommonRedEnvelopeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSCommonRedEnvelopeInfo::ArenaDtor(void* object) {
  CSCommonRedEnvelopeInfo* _this = reinterpret_cast< CSCommonRedEnvelopeInfo* >(object);
  (void)_this;
}
void CSCommonRedEnvelopeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSCommonRedEnvelopeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSCommonRedEnvelopeInfo& CSCommonRedEnvelopeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSCommonRedEnvelopeInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSCommonRedEnvelopeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSCommonRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isopen_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSCommonRedEnvelopeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSCommonRedEnvelopeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSCommonRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isopen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSCommonRedEnvelopeInfo)
  return target;
}

size_t CSCommonRedEnvelopeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSCommonRedEnvelopeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOpen = 1;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSCommonRedEnvelopeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSCommonRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSCommonRedEnvelopeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSCommonRedEnvelopeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSCommonRedEnvelopeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSCommonRedEnvelopeInfo)
    MergeFrom(*source);
  }
}

void CSCommonRedEnvelopeInfo::MergeFrom(const CSCommonRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSCommonRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isopen() != 0) {
    _internal_set_isopen(from._internal_isopen());
  }
}

void CSCommonRedEnvelopeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSCommonRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCommonRedEnvelopeInfo::CopyFrom(const CSCommonRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSCommonRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCommonRedEnvelopeInfo::IsInitialized() const {
  return true;
}

void CSCommonRedEnvelopeInfo::InternalSwap(CSCommonRedEnvelopeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isopen_, other->isopen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSCommonRedEnvelopeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonRedInfo::_Internal {
 public:
};

CommonRedInfo::CommonRedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CommonRedInfo)
}
CommonRedInfo::CommonRedInfo(const CommonRedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  sourceplayernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceplayernick().empty()) {
    sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceplayernick(), 
      GetArena());
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&isselfgrant_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(isselfgrant_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CommonRedInfo)
}

void CommonRedInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonRedInfo_PlaneWar_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceplayernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isselfgrant_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(isselfgrant_));
}

CommonRedInfo::~CommonRedInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CommonRedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonRedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceplayernick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonRedInfo::ArenaDtor(void* object) {
  CommonRedInfo* _this = reinterpret_cast< CommonRedInfo* >(object);
  (void)_this;
}
void CommonRedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonRedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonRedInfo& CommonRedInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonRedInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CommonRedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CommonRedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  sourceplayernick_.ClearToEmpty();
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isselfgrant_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(isselfgrant_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonRedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.CommonRedInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourcePlayerNick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sourceplayernick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.CommonRedInfo.sourcePlayerNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tryOpenNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tryopennum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSelfGrant = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isselfgrant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonRedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CommonRedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.CommonRedInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward(), target);
  }

  // int32 expire = 3;
  if (this->expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_expire(), target);
  }

  // string sourcePlayerNick = 4;
  if (this->sourceplayernick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceplayernick().data(), static_cast<int>(this->_internal_sourceplayernick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.CommonRedInfo.sourcePlayerNick");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sourceplayernick(), target);
  }

  // int32 tryOpenNum = 5;
  if (this->tryopennum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tryopennum(), target);
  }

  // int32 cost = 6;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cost(), target);
  }

  // bool isSelfGrant = 7;
  if (this->isselfgrant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isselfgrant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CommonRedInfo)
  return target;
}

size_t CommonRedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CommonRedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string sourcePlayerNick = 4;
  if (this->sourceplayernick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceplayernick());
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 expire = 3;
  if (this->expire() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expire());
  }

  // int32 tryOpenNum = 5;
  if (this->tryopennum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tryopennum());
  }

  // int32 cost = 6;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  // bool isSelfGrant = 7;
  if (this->isselfgrant() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonRedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CommonRedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonRedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonRedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CommonRedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CommonRedInfo)
    MergeFrom(*source);
  }
}

void CommonRedInfo::MergeFrom(const CommonRedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CommonRedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sourceplayernick().size() > 0) {
    _internal_set_sourceplayernick(from._internal_sourceplayernick());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
  if (from.tryopennum() != 0) {
    _internal_set_tryopennum(from._internal_tryopennum());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
  if (from.isselfgrant() != 0) {
    _internal_set_isselfgrant(from._internal_isselfgrant());
  }
}

void CommonRedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CommonRedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRedInfo::CopyFrom(const CommonRedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CommonRedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRedInfo::IsInitialized() const {
  return true;
}

void CommonRedInfo::InternalSwap(CommonRedInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sourceplayernick_.Swap(&other->sourceplayernick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonRedInfo, isselfgrant_)
      + sizeof(CommonRedInfo::isselfgrant_)
      - PROTOBUF_FIELD_OFFSET(CommonRedInfo, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonRedInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCCommonRedEnvelopeInfo::_Internal {
 public:
};

SCCommonRedEnvelopeInfo::SCCommonRedEnvelopeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  redlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCCommonRedEnvelopeInfo)
}
SCCommonRedEnvelopeInfo::SCCommonRedEnvelopeInfo(const SCCommonRedEnvelopeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      redlist_(from.redlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grantthreshold_, &from.grantthreshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&remainopennum_) -
    reinterpret_cast<char*>(&grantthreshold_)) + sizeof(remainopennum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCCommonRedEnvelopeInfo)
}

void SCCommonRedEnvelopeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCCommonRedEnvelopeInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&grantthreshold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&remainopennum_) -
      reinterpret_cast<char*>(&grantthreshold_)) + sizeof(remainopennum_));
}

SCCommonRedEnvelopeInfo::~SCCommonRedEnvelopeInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCCommonRedEnvelopeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCCommonRedEnvelopeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCCommonRedEnvelopeInfo::ArenaDtor(void* object) {
  SCCommonRedEnvelopeInfo* _this = reinterpret_cast< SCCommonRedEnvelopeInfo* >(object);
  (void)_this;
}
void SCCommonRedEnvelopeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCCommonRedEnvelopeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCCommonRedEnvelopeInfo& SCCommonRedEnvelopeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCCommonRedEnvelopeInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCCommonRedEnvelopeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCCommonRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redlist_.Clear();
  ::memset(&grantthreshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainopennum_) -
      reinterpret_cast<char*>(&grantthreshold_)) + sizeof(remainopennum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCCommonRedEnvelopeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.CommonRedInfo redList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 grantThreshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grantthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxShowNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxshownum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxOpenNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxopennum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remainOpenNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remainopennum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCCommonRedEnvelopeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCCommonRedEnvelopeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.CommonRedInfo redList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_redlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_redlist(i), target, stream);
  }

  // int32 grantThreshold = 2;
  if (this->grantthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_grantthreshold(), target);
  }

  // int32 maxShowNum = 3;
  if (this->maxshownum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxshownum(), target);
  }

  // int32 maxOpenNum = 4;
  if (this->maxopennum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxopennum(), target);
  }

  // int32 remainOpenNum = 5;
  if (this->remainopennum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_remainopennum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCCommonRedEnvelopeInfo)
  return target;
}

size_t SCCommonRedEnvelopeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCCommonRedEnvelopeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.CommonRedInfo redList = 1;
  total_size += 1UL * this->_internal_redlist_size();
  for (const auto& msg : this->redlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 grantThreshold = 2;
  if (this->grantthreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grantthreshold());
  }

  // int32 maxShowNum = 3;
  if (this->maxshownum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxshownum());
  }

  // int32 maxOpenNum = 4;
  if (this->maxopennum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxopennum());
  }

  // int32 remainOpenNum = 5;
  if (this->remainopennum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remainopennum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCCommonRedEnvelopeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCCommonRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCCommonRedEnvelopeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCCommonRedEnvelopeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCCommonRedEnvelopeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCCommonRedEnvelopeInfo)
    MergeFrom(*source);
  }
}

void SCCommonRedEnvelopeInfo::MergeFrom(const SCCommonRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCCommonRedEnvelopeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redlist_.MergeFrom(from.redlist_);
  if (from.grantthreshold() != 0) {
    _internal_set_grantthreshold(from._internal_grantthreshold());
  }
  if (from.maxshownum() != 0) {
    _internal_set_maxshownum(from._internal_maxshownum());
  }
  if (from.maxopennum() != 0) {
    _internal_set_maxopennum(from._internal_maxopennum());
  }
  if (from.remainopennum() != 0) {
    _internal_set_remainopennum(from._internal_remainopennum());
  }
}

void SCCommonRedEnvelopeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCCommonRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCommonRedEnvelopeInfo::CopyFrom(const SCCommonRedEnvelopeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCCommonRedEnvelopeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCommonRedEnvelopeInfo::IsInitialized() const {
  return true;
}

void SCCommonRedEnvelopeInfo::InternalSwap(SCCommonRedEnvelopeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  redlist_.InternalSwap(&other->redlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCCommonRedEnvelopeInfo, remainopennum_)
      + sizeof(SCCommonRedEnvelopeInfo::remainopennum_)
      - PROTOBUF_FIELD_OFFSET(SCCommonRedEnvelopeInfo, grantthreshold_)>(
          reinterpret_cast<char*>(&grantthreshold_),
          reinterpret_cast<char*>(&other->grantthreshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCCommonRedEnvelopeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenCommonRedEnvelope::_Internal {
 public:
};

CSOpenCommonRedEnvelope::CSOpenCommonRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSOpenCommonRedEnvelope)
}
CSOpenCommonRedEnvelope::CSOpenCommonRedEnvelope(const CSOpenCommonRedEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSOpenCommonRedEnvelope)
}

void CSOpenCommonRedEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSOpenCommonRedEnvelope_PlaneWar_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSOpenCommonRedEnvelope::~CSOpenCommonRedEnvelope() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSOpenCommonRedEnvelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenCommonRedEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOpenCommonRedEnvelope::ArenaDtor(void* object) {
  CSOpenCommonRedEnvelope* _this = reinterpret_cast< CSOpenCommonRedEnvelope* >(object);
  (void)_this;
}
void CSOpenCommonRedEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenCommonRedEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenCommonRedEnvelope& CSOpenCommonRedEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenCommonRedEnvelope_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSOpenCommonRedEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSOpenCommonRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenCommonRedEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.CSOpenCommonRedEnvelope.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenCommonRedEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSOpenCommonRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.CSOpenCommonRedEnvelope.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSOpenCommonRedEnvelope)
  return target;
}

size_t CSOpenCommonRedEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSOpenCommonRedEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenCommonRedEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSOpenCommonRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenCommonRedEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenCommonRedEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSOpenCommonRedEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSOpenCommonRedEnvelope)
    MergeFrom(*source);
  }
}

void CSOpenCommonRedEnvelope::MergeFrom(const CSOpenCommonRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSOpenCommonRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSOpenCommonRedEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSOpenCommonRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenCommonRedEnvelope::CopyFrom(const CSOpenCommonRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSOpenCommonRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenCommonRedEnvelope::IsInitialized() const {
  return true;
}

void CSOpenCommonRedEnvelope::InternalSwap(CSOpenCommonRedEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenCommonRedEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenCommonRedEnvelope::_Internal {
 public:
};

SCOpenCommonRedEnvelope::SCOpenCommonRedEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCOpenCommonRedEnvelope)
}
SCOpenCommonRedEnvelope::SCOpenCommonRedEnvelope(const SCOpenCommonRedEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&result_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCOpenCommonRedEnvelope)
}

void SCOpenCommonRedEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenCommonRedEnvelope_PlaneWar_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reward_));
}

SCOpenCommonRedEnvelope::~SCOpenCommonRedEnvelope() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCOpenCommonRedEnvelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenCommonRedEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCOpenCommonRedEnvelope::ArenaDtor(void* object) {
  SCOpenCommonRedEnvelope* _this = reinterpret_cast< SCOpenCommonRedEnvelope* >(object);
  (void)_this;
}
void SCOpenCommonRedEnvelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenCommonRedEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenCommonRedEnvelope& SCOpenCommonRedEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenCommonRedEnvelope_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCOpenCommonRedEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCOpenCommonRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenCommonRedEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.SCOpenCommonRedEnvelope.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remainOpenNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remainopennum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenCommonRedEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCOpenCommonRedEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.SCOpenCommonRedEnvelope.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // int32 remainOpenNum = 3;
  if (this->remainopennum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_remainopennum(), target);
  }

  // int32 reward = 4;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCOpenCommonRedEnvelope)
  return target;
}

size_t SCOpenCommonRedEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCOpenCommonRedEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // int32 remainOpenNum = 3;
  if (this->remainopennum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remainopennum());
  }

  // int32 reward = 4;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenCommonRedEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCOpenCommonRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenCommonRedEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenCommonRedEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCOpenCommonRedEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCOpenCommonRedEnvelope)
    MergeFrom(*source);
  }
}

void SCOpenCommonRedEnvelope::MergeFrom(const SCOpenCommonRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCOpenCommonRedEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.remainopennum() != 0) {
    _internal_set_remainopennum(from._internal_remainopennum());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void SCOpenCommonRedEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCOpenCommonRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenCommonRedEnvelope::CopyFrom(const SCOpenCommonRedEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCOpenCommonRedEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenCommonRedEnvelope::IsInitialized() const {
  return true;
}

void SCOpenCommonRedEnvelope::InternalSwap(SCOpenCommonRedEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCOpenCommonRedEnvelope, reward_)
      + sizeof(SCOpenCommonRedEnvelope::reward_)
      - PROTOBUF_FIELD_OFFSET(SCOpenCommonRedEnvelope, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenCommonRedEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RedRankPlayerInfo::_Internal {
 public:
};

RedRankPlayerInfo::RedRankPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RedRankPlayerInfo)
}
RedRankPlayerInfo::RedRankPlayerInfo(const RedRankPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&viplevel_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(viplevel_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RedRankPlayerInfo)
}

void RedRankPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedRankPlayerInfo_PlaneWar_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(viplevel_));
}

RedRankPlayerInfo::~RedRankPlayerInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.RedRankPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedRankPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedRankPlayerInfo::ArenaDtor(void* object) {
  RedRankPlayerInfo* _this = reinterpret_cast< RedRankPlayerInfo* >(object);
  (void)_this;
}
void RedRankPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedRankPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedRankPlayerInfo& RedRankPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedRankPlayerInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RedRankPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RedRankPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  icon_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(viplevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedRankPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.RedRankPlayerInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.RedRankPlayerInfo.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vipLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedRankPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RedRankPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.RedRankPlayerInfo.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.RedRankPlayerInfo.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // int32 vipLevel = 4;
  if (this->viplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_viplevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RedRankPlayerInfo)
  return target;
}

size_t RedRankPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RedRankPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string icon = 3;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // int32 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 vipLevel = 4;
  if (this->viplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedRankPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RedRankPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedRankPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedRankPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RedRankPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RedRankPlayerInfo)
    MergeFrom(*source);
  }
}

void RedRankPlayerInfo::MergeFrom(const RedRankPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RedRankPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {
    _internal_set_nick(from._internal_nick());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.viplevel() != 0) {
    _internal_set_viplevel(from._internal_viplevel());
  }
}

void RedRankPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RedRankPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedRankPlayerInfo::CopyFrom(const RedRankPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RedRankPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedRankPlayerInfo::IsInitialized() const {
  return true;
}

void RedRankPlayerInfo::InternalSwap(RedRankPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedRankPlayerInfo, viplevel_)
      + sizeof(RedRankPlayerInfo::viplevel_)
      - PROTOBUF_FIELD_OFFSET(RedRankPlayerInfo, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedRankPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGrantCommonRedEnvelopeRank::_Internal {
 public:
};

CSGrantCommonRedEnvelopeRank::CSGrantCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGrantCommonRedEnvelopeRank)
}
CSGrantCommonRedEnvelopeRank::CSGrantCommonRedEnvelopeRank(const CSGrantCommonRedEnvelopeRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGrantCommonRedEnvelopeRank)
}

void CSGrantCommonRedEnvelopeRank::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

CSGrantCommonRedEnvelopeRank::~CSGrantCommonRedEnvelopeRank() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGrantCommonRedEnvelopeRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGrantCommonRedEnvelopeRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGrantCommonRedEnvelopeRank::ArenaDtor(void* object) {
  CSGrantCommonRedEnvelopeRank* _this = reinterpret_cast< CSGrantCommonRedEnvelopeRank* >(object);
  (void)_this;
}
void CSGrantCommonRedEnvelopeRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGrantCommonRedEnvelopeRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGrantCommonRedEnvelopeRank& CSGrantCommonRedEnvelopeRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGrantCommonRedEnvelopeRank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGrantCommonRedEnvelopeRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGrantCommonRedEnvelopeRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGrantCommonRedEnvelopeRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGrantCommonRedEnvelopeRank)
  return target;
}

size_t CSGrantCommonRedEnvelopeRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGrantCommonRedEnvelopeRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGrantCommonRedEnvelopeRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGrantCommonRedEnvelopeRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGrantCommonRedEnvelopeRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGrantCommonRedEnvelopeRank)
    MergeFrom(*source);
  }
}

void CSGrantCommonRedEnvelopeRank::MergeFrom(const CSGrantCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void CSGrantCommonRedEnvelopeRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGrantCommonRedEnvelopeRank::CopyFrom(const CSGrantCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGrantCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGrantCommonRedEnvelopeRank::IsInitialized() const {
  return true;
}

void CSGrantCommonRedEnvelopeRank::InternalSwap(CSGrantCommonRedEnvelopeRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGrantCommonRedEnvelopeRank, to_)
      + sizeof(CSGrantCommonRedEnvelopeRank::to_)
      - PROTOBUF_FIELD_OFFSET(CSGrantCommonRedEnvelopeRank, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGrantCommonRedEnvelopeRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GrantRankItem::_Internal {
 public:
  static const ::PlaneWar::RedRankPlayerInfo& playerinfo(const GrantRankItem* msg);
};

const ::PlaneWar::RedRankPlayerInfo&
GrantRankItem::_Internal::playerinfo(const GrantRankItem* msg) {
  return *msg->playerinfo_;
}
GrantRankItem::GrantRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GrantRankItem)
}
GrantRankItem::GrantRankItem(const GrantRankItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::PlaneWar::RedRankPlayerInfo(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GrantRankItem)
}

void GrantRankItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantRankItem_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&playerinfo_)) + sizeof(reward_));
}

GrantRankItem::~GrantRankItem() {
  // @@protoc_insertion_point(destructor:PlaneWar.GrantRankItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrantRankItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerinfo_;
}

void GrantRankItem::ArenaDtor(void* object) {
  GrantRankItem* _this = reinterpret_cast< GrantRankItem* >(object);
  (void)_this;
}
void GrantRankItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrantRankItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantRankItem& GrantRankItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantRankItem_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GrantRankItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GrantRankItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantRankItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upgradeNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upgradenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantRankItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GrantRankItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
  if (this->has_playerinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::playerinfo(this), target, stream);
  }

  // int32 upgradeNum = 3;
  if (this->upgradenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_upgradenum(), target);
  }

  // int32 reward = 4;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GrantRankItem)
  return target;
}

size_t GrantRankItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GrantRankItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 upgradeNum = 3;
  if (this->upgradenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upgradenum());
  }

  // int32 reward = 4;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantRankItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GrantRankItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantRankItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantRankItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GrantRankItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GrantRankItem)
    MergeFrom(*source);
  }
}

void GrantRankItem::MergeFrom(const GrantRankItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GrantRankItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerinfo()) {
    _internal_mutable_playerinfo()->::PlaneWar::RedRankPlayerInfo::MergeFrom(from._internal_playerinfo());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.upgradenum() != 0) {
    _internal_set_upgradenum(from._internal_upgradenum());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void GrantRankItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GrantRankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantRankItem::CopyFrom(const GrantRankItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GrantRankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantRankItem::IsInitialized() const {
  return true;
}

void GrantRankItem::InternalSwap(GrantRankItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantRankItem, reward_)
      + sizeof(GrantRankItem::reward_)
      - PROTOBUF_FIELD_OFFSET(GrantRankItem, playerinfo_)>(
          reinterpret_cast<char*>(&playerinfo_),
          reinterpret_cast<char*>(&other->playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantRankItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGrantCommonRedEnvelopeRank::_Internal {
 public:
  static const ::PlaneWar::GrantRankItem& selfrank(const SCGrantCommonRedEnvelopeRank* msg);
};

const ::PlaneWar::GrantRankItem&
SCGrantCommonRedEnvelopeRank::_Internal::selfrank(const SCGrantCommonRedEnvelopeRank* msg) {
  return *msg->selfrank_;
}
SCGrantCommonRedEnvelopeRank::SCGrantCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGrantCommonRedEnvelopeRank)
}
SCGrantCommonRedEnvelopeRank::SCGrantCommonRedEnvelopeRank(const SCGrantCommonRedEnvelopeRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranklist_(from.ranklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selfrank()) {
    selfrank_ = new ::PlaneWar::GrantRankItem(*from.selfrank_);
  } else {
    selfrank_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGrantCommonRedEnvelopeRank)
}

void SCGrantCommonRedEnvelopeRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGrantCommonRedEnvelopeRank_PlaneWar_2eproto.base);
  selfrank_ = nullptr;
}

SCGrantCommonRedEnvelopeRank::~SCGrantCommonRedEnvelopeRank() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGrantCommonRedEnvelopeRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGrantCommonRedEnvelopeRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selfrank_;
}

void SCGrantCommonRedEnvelopeRank::ArenaDtor(void* object) {
  SCGrantCommonRedEnvelopeRank* _this = reinterpret_cast< SCGrantCommonRedEnvelopeRank* >(object);
  (void)_this;
}
void SCGrantCommonRedEnvelopeRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGrantCommonRedEnvelopeRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGrantCommonRedEnvelopeRank& SCGrantCommonRedEnvelopeRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGrantCommonRedEnvelopeRank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGrantCommonRedEnvelopeRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranklist_.Clear();
  if (GetArena() == nullptr && selfrank_ != nullptr) {
    delete selfrank_;
  }
  selfrank_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGrantCommonRedEnvelopeRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GrantRankItem rankList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GrantRankItem selfRank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfrank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGrantCommonRedEnvelopeRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GrantRankItem rankList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranklist(i), target, stream);
  }

  // .PlaneWar.GrantRankItem selfRank = 2;
  if (this->has_selfrank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selfrank(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGrantCommonRedEnvelopeRank)
  return target;
}

size_t SCGrantCommonRedEnvelopeRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GrantRankItem rankList = 1;
  total_size += 1UL * this->_internal_ranklist_size();
  for (const auto& msg : this->ranklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.GrantRankItem selfRank = 2;
  if (this->has_selfrank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfrank_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGrantCommonRedEnvelopeRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGrantCommonRedEnvelopeRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGrantCommonRedEnvelopeRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGrantCommonRedEnvelopeRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGrantCommonRedEnvelopeRank)
    MergeFrom(*source);
  }
}

void SCGrantCommonRedEnvelopeRank::MergeFrom(const SCGrantCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranklist_.MergeFrom(from.ranklist_);
  if (from.has_selfrank()) {
    _internal_mutable_selfrank()->::PlaneWar::GrantRankItem::MergeFrom(from._internal_selfrank());
  }
}

void SCGrantCommonRedEnvelopeRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGrantCommonRedEnvelopeRank::CopyFrom(const SCGrantCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGrantCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGrantCommonRedEnvelopeRank::IsInitialized() const {
  return true;
}

void SCGrantCommonRedEnvelopeRank::InternalSwap(SCGrantCommonRedEnvelopeRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ranklist_.InternalSwap(&other->ranklist_);
  swap(selfrank_, other->selfrank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGrantCommonRedEnvelopeRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenCommonRedEnvelopeRank::_Internal {
 public:
};

CSOpenCommonRedEnvelopeRank::CSOpenCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSOpenCommonRedEnvelopeRank)
}
CSOpenCommonRedEnvelopeRank::CSOpenCommonRedEnvelopeRank(const CSOpenCommonRedEnvelopeRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSOpenCommonRedEnvelopeRank)
}

void CSOpenCommonRedEnvelopeRank::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

CSOpenCommonRedEnvelopeRank::~CSOpenCommonRedEnvelopeRank() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSOpenCommonRedEnvelopeRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenCommonRedEnvelopeRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOpenCommonRedEnvelopeRank::ArenaDtor(void* object) {
  CSOpenCommonRedEnvelopeRank* _this = reinterpret_cast< CSOpenCommonRedEnvelopeRank* >(object);
  (void)_this;
}
void CSOpenCommonRedEnvelopeRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenCommonRedEnvelopeRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenCommonRedEnvelopeRank& CSOpenCommonRedEnvelopeRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenCommonRedEnvelopeRank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSOpenCommonRedEnvelopeRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenCommonRedEnvelopeRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenCommonRedEnvelopeRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSOpenCommonRedEnvelopeRank)
  return target;
}

size_t CSOpenCommonRedEnvelopeRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenCommonRedEnvelopeRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenCommonRedEnvelopeRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenCommonRedEnvelopeRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSOpenCommonRedEnvelopeRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSOpenCommonRedEnvelopeRank)
    MergeFrom(*source);
  }
}

void CSOpenCommonRedEnvelopeRank::MergeFrom(const CSOpenCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void CSOpenCommonRedEnvelopeRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenCommonRedEnvelopeRank::CopyFrom(const CSOpenCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSOpenCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenCommonRedEnvelopeRank::IsInitialized() const {
  return true;
}

void CSOpenCommonRedEnvelopeRank::InternalSwap(CSOpenCommonRedEnvelopeRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOpenCommonRedEnvelopeRank, to_)
      + sizeof(CSOpenCommonRedEnvelopeRank::to_)
      - PROTOBUF_FIELD_OFFSET(CSOpenCommonRedEnvelopeRank, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenCommonRedEnvelopeRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenRankItem::_Internal {
 public:
  static const ::PlaneWar::RedRankPlayerInfo& playerinfo(const OpenRankItem* msg);
};

const ::PlaneWar::RedRankPlayerInfo&
OpenRankItem::_Internal::playerinfo(const OpenRankItem* msg) {
  return *msg->playerinfo_;
}
OpenRankItem::OpenRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.OpenRankItem)
}
OpenRankItem::OpenRankItem(const OpenRankItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::PlaneWar::RedRankPlayerInfo(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&opennum_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(opennum_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.OpenRankItem)
}

void OpenRankItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenRankItem_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&opennum_) -
      reinterpret_cast<char*>(&playerinfo_)) + sizeof(opennum_));
}

OpenRankItem::~OpenRankItem() {
  // @@protoc_insertion_point(destructor:PlaneWar.OpenRankItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenRankItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerinfo_;
}

void OpenRankItem::ArenaDtor(void* object) {
  OpenRankItem* _this = reinterpret_cast< OpenRankItem* >(object);
  (void)_this;
}
void OpenRankItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenRankItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenRankItem& OpenRankItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenRankItem_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void OpenRankItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.OpenRankItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opennum_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(opennum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenRankItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalReward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalreward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 openNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          opennum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenRankItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.OpenRankItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
  if (this->has_playerinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::playerinfo(this), target, stream);
  }

  // int32 totalReward = 3;
  if (this->totalreward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_totalreward(), target);
  }

  // int32 openNum = 4;
  if (this->opennum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_opennum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.OpenRankItem)
  return target;
}

size_t OpenRankItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.OpenRankItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RedRankPlayerInfo playerInfo = 2;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 totalReward = 3;
  if (this->totalreward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalreward());
  }

  // int32 openNum = 4;
  if (this->opennum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opennum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenRankItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.OpenRankItem)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenRankItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenRankItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.OpenRankItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.OpenRankItem)
    MergeFrom(*source);
  }
}

void OpenRankItem::MergeFrom(const OpenRankItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.OpenRankItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerinfo()) {
    _internal_mutable_playerinfo()->::PlaneWar::RedRankPlayerInfo::MergeFrom(from._internal_playerinfo());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.totalreward() != 0) {
    _internal_set_totalreward(from._internal_totalreward());
  }
  if (from.opennum() != 0) {
    _internal_set_opennum(from._internal_opennum());
  }
}

void OpenRankItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.OpenRankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRankItem::CopyFrom(const OpenRankItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.OpenRankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRankItem::IsInitialized() const {
  return true;
}

void OpenRankItem::InternalSwap(OpenRankItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenRankItem, opennum_)
      + sizeof(OpenRankItem::opennum_)
      - PROTOBUF_FIELD_OFFSET(OpenRankItem, playerinfo_)>(
          reinterpret_cast<char*>(&playerinfo_),
          reinterpret_cast<char*>(&other->playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenRankItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenCommonRedEnvelopeRank::_Internal {
 public:
  static const ::PlaneWar::OpenRankItem& selfrank(const SCOpenCommonRedEnvelopeRank* msg);
};

const ::PlaneWar::OpenRankItem&
SCOpenCommonRedEnvelopeRank::_Internal::selfrank(const SCOpenCommonRedEnvelopeRank* msg) {
  return *msg->selfrank_;
}
SCOpenCommonRedEnvelopeRank::SCOpenCommonRedEnvelopeRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCOpenCommonRedEnvelopeRank)
}
SCOpenCommonRedEnvelopeRank::SCOpenCommonRedEnvelopeRank(const SCOpenCommonRedEnvelopeRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranklist_(from.ranklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selfrank()) {
    selfrank_ = new ::PlaneWar::OpenRankItem(*from.selfrank_);
  } else {
    selfrank_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCOpenCommonRedEnvelopeRank)
}

void SCOpenCommonRedEnvelopeRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenCommonRedEnvelopeRank_PlaneWar_2eproto.base);
  selfrank_ = nullptr;
}

SCOpenCommonRedEnvelopeRank::~SCOpenCommonRedEnvelopeRank() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCOpenCommonRedEnvelopeRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenCommonRedEnvelopeRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selfrank_;
}

void SCOpenCommonRedEnvelopeRank::ArenaDtor(void* object) {
  SCOpenCommonRedEnvelopeRank* _this = reinterpret_cast< SCOpenCommonRedEnvelopeRank* >(object);
  (void)_this;
}
void SCOpenCommonRedEnvelopeRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenCommonRedEnvelopeRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenCommonRedEnvelopeRank& SCOpenCommonRedEnvelopeRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenCommonRedEnvelopeRank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCOpenCommonRedEnvelopeRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranklist_.Clear();
  if (GetArena() == nullptr && selfrank_ != nullptr) {
    delete selfrank_;
  }
  selfrank_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenCommonRedEnvelopeRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.OpenRankItem rankList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.OpenRankItem selfRank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfrank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenCommonRedEnvelopeRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenRankItem rankList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranklist(i), target, stream);
  }

  // .PlaneWar.OpenRankItem selfRank = 2;
  if (this->has_selfrank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selfrank(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCOpenCommonRedEnvelopeRank)
  return target;
}

size_t SCOpenCommonRedEnvelopeRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenRankItem rankList = 1;
  total_size += 1UL * this->_internal_ranklist_size();
  for (const auto& msg : this->ranklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.OpenRankItem selfRank = 2;
  if (this->has_selfrank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfrank_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenCommonRedEnvelopeRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenCommonRedEnvelopeRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenCommonRedEnvelopeRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCOpenCommonRedEnvelopeRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCOpenCommonRedEnvelopeRank)
    MergeFrom(*source);
  }
}

void SCOpenCommonRedEnvelopeRank::MergeFrom(const SCOpenCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranklist_.MergeFrom(from.ranklist_);
  if (from.has_selfrank()) {
    _internal_mutable_selfrank()->::PlaneWar::OpenRankItem::MergeFrom(from._internal_selfrank());
  }
}

void SCOpenCommonRedEnvelopeRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenCommonRedEnvelopeRank::CopyFrom(const SCOpenCommonRedEnvelopeRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCOpenCommonRedEnvelopeRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenCommonRedEnvelopeRank::IsInitialized() const {
  return true;
}

void SCOpenCommonRedEnvelopeRank::InternalSwap(SCOpenCommonRedEnvelopeRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ranklist_.InternalSwap(&other->ranklist_);
  swap(selfrank_, other->selfrank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenCommonRedEnvelopeRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGrantCommonRedEnvelopeRecord::_Internal {
 public:
};

CSGrantCommonRedEnvelopeRecord::CSGrantCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGrantCommonRedEnvelopeRecord)
}
CSGrantCommonRedEnvelopeRecord::CSGrantCommonRedEnvelopeRecord(const CSGrantCommonRedEnvelopeRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGrantCommonRedEnvelopeRecord)
}

void CSGrantCommonRedEnvelopeRecord::SharedCtor() {
}

CSGrantCommonRedEnvelopeRecord::~CSGrantCommonRedEnvelopeRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGrantCommonRedEnvelopeRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGrantCommonRedEnvelopeRecord::ArenaDtor(void* object) {
  CSGrantCommonRedEnvelopeRecord* _this = reinterpret_cast< CSGrantCommonRedEnvelopeRecord* >(object);
  (void)_this;
}
void CSGrantCommonRedEnvelopeRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGrantCommonRedEnvelopeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGrantCommonRedEnvelopeRecord& CSGrantCommonRedEnvelopeRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGrantCommonRedEnvelopeRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGrantCommonRedEnvelopeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGrantCommonRedEnvelopeRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGrantCommonRedEnvelopeRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  return target;
}

size_t CSGrantCommonRedEnvelopeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGrantCommonRedEnvelopeRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGrantCommonRedEnvelopeRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGrantCommonRedEnvelopeRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGrantCommonRedEnvelopeRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGrantCommonRedEnvelopeRecord)
    MergeFrom(*source);
  }
}

void CSGrantCommonRedEnvelopeRecord::MergeFrom(const CSGrantCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGrantCommonRedEnvelopeRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGrantCommonRedEnvelopeRecord::CopyFrom(const CSGrantCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGrantCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGrantCommonRedEnvelopeRecord::IsInitialized() const {
  return true;
}

void CSGrantCommonRedEnvelopeRecord::InternalSwap(CSGrantCommonRedEnvelopeRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGrantCommonRedEnvelopeRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GrantRecord::_Internal {
 public:
};

GrantRecord::GrantRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GrantRecord)
}
GrantRecord::GrantRecord(const GrantRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  openplayernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openplayernick().empty()) {
    openplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_openplayernick(), 
      GetArena());
  }
  ::memcpy(&granttime_, &from.granttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&granttime_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GrantRecord)
}

void GrantRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrantRecord_PlaneWar_2eproto.base);
  openplayernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&granttime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&granttime_)) + sizeof(status_));
}

GrantRecord::~GrantRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.GrantRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrantRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  openplayernick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GrantRecord::ArenaDtor(void* object) {
  GrantRecord* _this = reinterpret_cast< GrantRecord* >(object);
  (void)_this;
}
void GrantRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrantRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrantRecord& GrantRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrantRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GrantRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GrantRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openplayernick_.ClearToEmpty();
  ::memset(&granttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&granttime_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grantTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          granttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expireTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GrantRedStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::PlaneWar::GrantRedStatus>(val));
        } else goto handle_unusual;
        continue;
      // string openPlayerNick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_openplayernick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GrantRecord.openPlayerNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GrantRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grantTime = 1;
  if (this->granttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_granttime(), target);
  }

  // int32 expireTime = 2;
  if (this->expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_expiretime(), target);
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward(), target);
  }

  // .PlaneWar.GrantRedStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // string openPlayerNick = 5;
  if (this->openplayernick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openplayernick().data(), static_cast<int>(this->_internal_openplayernick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GrantRecord.openPlayerNick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_openplayernick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GrantRecord)
  return target;
}

size_t GrantRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GrantRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openPlayerNick = 5;
  if (this->openplayernick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openplayernick());
  }

  // int32 grantTime = 1;
  if (this->granttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_granttime());
  }

  // int32 expireTime = 2;
  if (this->expiretime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiretime());
  }

  // int32 reward = 3;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // .PlaneWar.GrantRedStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GrantRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GrantRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GrantRecord)
    MergeFrom(*source);
  }
}

void GrantRecord::MergeFrom(const GrantRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GrantRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openplayernick().size() > 0) {
    _internal_set_openplayernick(from._internal_openplayernick());
  }
  if (from.granttime() != 0) {
    _internal_set_granttime(from._internal_granttime());
  }
  if (from.expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GrantRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GrantRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantRecord::CopyFrom(const GrantRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GrantRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantRecord::IsInitialized() const {
  return true;
}

void GrantRecord::InternalSwap(GrantRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  openplayernick_.Swap(&other->openplayernick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantRecord, status_)
      + sizeof(GrantRecord::status_)
      - PROTOBUF_FIELD_OFFSET(GrantRecord, granttime_)>(
          reinterpret_cast<char*>(&granttime_),
          reinterpret_cast<char*>(&other->granttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGrantCommonRedEnvelopeRecord::_Internal {
 public:
};

SCGrantCommonRedEnvelopeRecord::SCGrantCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  recordlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGrantCommonRedEnvelopeRecord)
}
SCGrantCommonRedEnvelopeRecord::SCGrantCommonRedEnvelopeRecord(const SCGrantCommonRedEnvelopeRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recordlist_(from.recordlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGrantCommonRedEnvelopeRecord)
}

void SCGrantCommonRedEnvelopeRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGrantCommonRedEnvelopeRecord_PlaneWar_2eproto.base);
}

SCGrantCommonRedEnvelopeRecord::~SCGrantCommonRedEnvelopeRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGrantCommonRedEnvelopeRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGrantCommonRedEnvelopeRecord::ArenaDtor(void* object) {
  SCGrantCommonRedEnvelopeRecord* _this = reinterpret_cast< SCGrantCommonRedEnvelopeRecord* >(object);
  (void)_this;
}
void SCGrantCommonRedEnvelopeRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGrantCommonRedEnvelopeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGrantCommonRedEnvelopeRecord& SCGrantCommonRedEnvelopeRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGrantCommonRedEnvelopeRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGrantCommonRedEnvelopeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recordlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGrantCommonRedEnvelopeRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GrantRecord recordList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recordlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGrantCommonRedEnvelopeRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GrantRecord recordList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recordlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_recordlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  return target;
}

size_t SCGrantCommonRedEnvelopeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GrantRecord recordList = 1;
  total_size += 1UL * this->_internal_recordlist_size();
  for (const auto& msg : this->recordlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGrantCommonRedEnvelopeRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGrantCommonRedEnvelopeRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGrantCommonRedEnvelopeRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGrantCommonRedEnvelopeRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGrantCommonRedEnvelopeRecord)
    MergeFrom(*source);
  }
}

void SCGrantCommonRedEnvelopeRecord::MergeFrom(const SCGrantCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recordlist_.MergeFrom(from.recordlist_);
}

void SCGrantCommonRedEnvelopeRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGrantCommonRedEnvelopeRecord::CopyFrom(const SCGrantCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGrantCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGrantCommonRedEnvelopeRecord::IsInitialized() const {
  return true;
}

void SCGrantCommonRedEnvelopeRecord::InternalSwap(SCGrantCommonRedEnvelopeRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recordlist_.InternalSwap(&other->recordlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGrantCommonRedEnvelopeRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenCommonRedEnvelopeRecord::_Internal {
 public:
};

CSOpenCommonRedEnvelopeRecord::CSOpenCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSOpenCommonRedEnvelopeRecord)
}
CSOpenCommonRedEnvelopeRecord::CSOpenCommonRedEnvelopeRecord(const CSOpenCommonRedEnvelopeRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSOpenCommonRedEnvelopeRecord)
}

void CSOpenCommonRedEnvelopeRecord::SharedCtor() {
}

CSOpenCommonRedEnvelopeRecord::~CSOpenCommonRedEnvelopeRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenCommonRedEnvelopeRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOpenCommonRedEnvelopeRecord::ArenaDtor(void* object) {
  CSOpenCommonRedEnvelopeRecord* _this = reinterpret_cast< CSOpenCommonRedEnvelopeRecord* >(object);
  (void)_this;
}
void CSOpenCommonRedEnvelopeRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenCommonRedEnvelopeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenCommonRedEnvelopeRecord& CSOpenCommonRedEnvelopeRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenCommonRedEnvelopeRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSOpenCommonRedEnvelopeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenCommonRedEnvelopeRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenCommonRedEnvelopeRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  return target;
}

size_t CSOpenCommonRedEnvelopeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenCommonRedEnvelopeRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenCommonRedEnvelopeRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenCommonRedEnvelopeRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSOpenCommonRedEnvelopeRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSOpenCommonRedEnvelopeRecord)
    MergeFrom(*source);
  }
}

void CSOpenCommonRedEnvelopeRecord::MergeFrom(const CSOpenCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSOpenCommonRedEnvelopeRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenCommonRedEnvelopeRecord::CopyFrom(const CSOpenCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSOpenCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenCommonRedEnvelopeRecord::IsInitialized() const {
  return true;
}

void CSOpenCommonRedEnvelopeRecord::InternalSwap(CSOpenCommonRedEnvelopeRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenCommonRedEnvelopeRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenRecord::_Internal {
 public:
};

OpenRecord::OpenRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.OpenRecord)
}
OpenRecord::OpenRecord(const OpenRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceplayernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceplayernick().empty()) {
    sourceplayernick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceplayernick(), 
      GetArena());
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&opentime_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(opentime_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.OpenRecord)
}

void OpenRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenRecord_PlaneWar_2eproto.base);
  sourceplayernick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(opentime_));
}

OpenRecord::~OpenRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.OpenRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceplayernick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenRecord::ArenaDtor(void* object) {
  OpenRecord* _this = reinterpret_cast< OpenRecord* >(object);
  (void)_this;
}
void OpenRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenRecord& OpenRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void OpenRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.OpenRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceplayernick_.ClearToEmpty();
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opentime_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(opentime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sourcePlayerNick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourceplayernick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.OpenRecord.sourcePlayerNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 openTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          opentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.OpenRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcePlayerNick = 1;
  if (this->sourceplayernick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceplayernick().data(), static_cast<int>(this->_internal_sourceplayernick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.OpenRecord.sourcePlayerNick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourceplayernick(), target);
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward(), target);
  }

  // int32 openTime = 3;
  if (this->opentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_opentime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.OpenRecord)
  return target;
}

size_t OpenRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.OpenRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourcePlayerNick = 1;
  if (this->sourceplayernick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceplayernick());
  }

  // int32 reward = 2;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 openTime = 3;
  if (this->opentime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opentime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.OpenRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.OpenRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.OpenRecord)
    MergeFrom(*source);
  }
}

void OpenRecord::MergeFrom(const OpenRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.OpenRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceplayernick().size() > 0) {
    _internal_set_sourceplayernick(from._internal_sourceplayernick());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.opentime() != 0) {
    _internal_set_opentime(from._internal_opentime());
  }
}

void OpenRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.OpenRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRecord::CopyFrom(const OpenRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.OpenRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRecord::IsInitialized() const {
  return true;
}

void OpenRecord::InternalSwap(OpenRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sourceplayernick_.Swap(&other->sourceplayernick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenRecord, opentime_)
      + sizeof(OpenRecord::opentime_)
      - PROTOBUF_FIELD_OFFSET(OpenRecord, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenCommonRedEnvelopeRecord::_Internal {
 public:
};

SCOpenCommonRedEnvelopeRecord::SCOpenCommonRedEnvelopeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  recordlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCOpenCommonRedEnvelopeRecord)
}
SCOpenCommonRedEnvelopeRecord::SCOpenCommonRedEnvelopeRecord(const SCOpenCommonRedEnvelopeRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recordlist_(from.recordlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  showrecordnum_ = from.showrecordnum_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCOpenCommonRedEnvelopeRecord)
}

void SCOpenCommonRedEnvelopeRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenCommonRedEnvelopeRecord_PlaneWar_2eproto.base);
  showrecordnum_ = 0;
}

SCOpenCommonRedEnvelopeRecord::~SCOpenCommonRedEnvelopeRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenCommonRedEnvelopeRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOpenCommonRedEnvelopeRecord::ArenaDtor(void* object) {
  SCOpenCommonRedEnvelopeRecord* _this = reinterpret_cast< SCOpenCommonRedEnvelopeRecord* >(object);
  (void)_this;
}
void SCOpenCommonRedEnvelopeRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenCommonRedEnvelopeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenCommonRedEnvelopeRecord& SCOpenCommonRedEnvelopeRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenCommonRedEnvelopeRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCOpenCommonRedEnvelopeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recordlist_.Clear();
  showrecordnum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenCommonRedEnvelopeRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.OpenRecord recordList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recordlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 showRecordNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          showrecordnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenCommonRedEnvelopeRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenRecord recordList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recordlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_recordlist(i), target, stream);
  }

  // int32 showRecordNum = 2;
  if (this->showrecordnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_showrecordnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  return target;
}

size_t SCOpenCommonRedEnvelopeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenRecord recordList = 1;
  total_size += 1UL * this->_internal_recordlist_size();
  for (const auto& msg : this->recordlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 showRecordNum = 2;
  if (this->showrecordnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showrecordnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenCommonRedEnvelopeRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenCommonRedEnvelopeRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenCommonRedEnvelopeRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCOpenCommonRedEnvelopeRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCOpenCommonRedEnvelopeRecord)
    MergeFrom(*source);
  }
}

void SCOpenCommonRedEnvelopeRecord::MergeFrom(const SCOpenCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recordlist_.MergeFrom(from.recordlist_);
  if (from.showrecordnum() != 0) {
    _internal_set_showrecordnum(from._internal_showrecordnum());
  }
}

void SCOpenCommonRedEnvelopeRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenCommonRedEnvelopeRecord::CopyFrom(const SCOpenCommonRedEnvelopeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCOpenCommonRedEnvelopeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenCommonRedEnvelopeRecord::IsInitialized() const {
  return true;
}

void SCOpenCommonRedEnvelopeRecord::InternalSwap(SCOpenCommonRedEnvelopeRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recordlist_.InternalSwap(&other->recordlist_);
  swap(showrecordnum_, other->showrecordnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenCommonRedEnvelopeRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRedEnvelopeOpStatusNotify::_Internal {
 public:
  static const ::PlaneWar::RedUpgradeInfo& upgradeinfo(const SCRedEnvelopeOpStatusNotify* msg);
};

const ::PlaneWar::RedUpgradeInfo&
SCRedEnvelopeOpStatusNotify::_Internal::upgradeinfo(const SCRedEnvelopeOpStatusNotify* msg) {
  return *msg->upgradeinfo_;
}
SCRedEnvelopeOpStatusNotify::SCRedEnvelopeOpStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRedEnvelopeOpStatusNotify)
}
SCRedEnvelopeOpStatusNotify::SCRedEnvelopeOpStatusNotify(const SCRedEnvelopeOpStatusNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upgradeinfo()) {
    upgradeinfo_ = new ::PlaneWar::RedUpgradeInfo(*from.upgradeinfo_);
  } else {
    upgradeinfo_ = nullptr;
  }
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRedEnvelopeOpStatusNotify)
}

void SCRedEnvelopeOpStatusNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRedEnvelopeOpStatusNotify_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&upgradeinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&upgradeinfo_)) + sizeof(reward_));
}

SCRedEnvelopeOpStatusNotify::~SCRedEnvelopeOpStatusNotify() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRedEnvelopeOpStatusNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRedEnvelopeOpStatusNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete upgradeinfo_;
}

void SCRedEnvelopeOpStatusNotify::ArenaDtor(void* object) {
  SCRedEnvelopeOpStatusNotify* _this = reinterpret_cast< SCRedEnvelopeOpStatusNotify* >(object);
  (void)_this;
}
void SCRedEnvelopeOpStatusNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRedEnvelopeOpStatusNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRedEnvelopeOpStatusNotify& SCRedEnvelopeOpStatusNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRedEnvelopeOpStatusNotify_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRedEnvelopeOpStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && upgradeinfo_ != nullptr) {
    delete upgradeinfo_;
  }
  upgradeinfo_ = nullptr;
  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRedEnvelopeOpStatusNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RedOpStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::PlaneWar::RedOpStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 curMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RedUpgradeInfo upgradeInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRedEnvelopeOpStatusNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // .PlaneWar.RedOpStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int64 curMoney = 3;
  if (this->curmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_curmoney(), target);
  }

  // .PlaneWar.RedUpgradeInfo upgradeInfo = 4;
  if (this->has_upgradeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::upgradeinfo(this), target, stream);
  }

  // int32 reward = 5;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRedEnvelopeOpStatusNotify)
  return target;
}

size_t SCRedEnvelopeOpStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.RedUpgradeInfo upgradeInfo = 4;
  if (this->has_upgradeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upgradeinfo_);
  }

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // .PlaneWar.RedOpStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 curMoney = 3;
  if (this->curmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curmoney());
  }

  // int32 reward = 5;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRedEnvelopeOpStatusNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRedEnvelopeOpStatusNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRedEnvelopeOpStatusNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRedEnvelopeOpStatusNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRedEnvelopeOpStatusNotify)
    MergeFrom(*source);
  }
}

void SCRedEnvelopeOpStatusNotify::MergeFrom(const SCRedEnvelopeOpStatusNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_upgradeinfo()) {
    _internal_mutable_upgradeinfo()->::PlaneWar::RedUpgradeInfo::MergeFrom(from._internal_upgradeinfo());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.curmoney() != 0) {
    _internal_set_curmoney(from._internal_curmoney());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void SCRedEnvelopeOpStatusNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRedEnvelopeOpStatusNotify::CopyFrom(const SCRedEnvelopeOpStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRedEnvelopeOpStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRedEnvelopeOpStatusNotify::IsInitialized() const {
  return true;
}

void SCRedEnvelopeOpStatusNotify::InternalSwap(SCRedEnvelopeOpStatusNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRedEnvelopeOpStatusNotify, reward_)
      + sizeof(SCRedEnvelopeOpStatusNotify::reward_)
      - PROTOBUF_FIELD_OFFSET(SCRedEnvelopeOpStatusNotify, upgradeinfo_)>(
          reinterpret_cast<char*>(&upgradeinfo_),
          reinterpret_cast<char*>(&other->upgradeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRedEnvelopeOpStatusNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncWeaponState::_Internal {
 public:
  static const ::PlaneWar::WeaponState& weaponstate(const CSSyncWeaponState* msg);
};

const ::PlaneWar::WeaponState&
CSSyncWeaponState::_Internal::weaponstate(const CSSyncWeaponState* msg) {
  return *msg->weaponstate_;
}
CSSyncWeaponState::CSSyncWeaponState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSyncWeaponState)
}
CSSyncWeaponState::CSSyncWeaponState(const CSSyncWeaponState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weaponstate()) {
    weaponstate_ = new ::PlaneWar::WeaponState(*from.weaponstate_);
  } else {
    weaponstate_ = nullptr;
  }
  ::memcpy(&weaponid_, &from.weaponid_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponuid_) -
    reinterpret_cast<char*>(&weaponid_)) + sizeof(weaponuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSyncWeaponState)
}

void CSSyncWeaponState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncWeaponState_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&weaponstate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponuid_) -
      reinterpret_cast<char*>(&weaponstate_)) + sizeof(weaponuid_));
}

CSSyncWeaponState::~CSSyncWeaponState() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSyncWeaponState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncWeaponState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete weaponstate_;
}

void CSSyncWeaponState::ArenaDtor(void* object) {
  CSSyncWeaponState* _this = reinterpret_cast< CSSyncWeaponState* >(object);
  (void)_this;
}
void CSSyncWeaponState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncWeaponState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncWeaponState& CSSyncWeaponState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncWeaponState_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSyncWeaponState::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSyncWeaponState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && weaponstate_ != nullptr) {
    delete weaponstate_;
  }
  weaponstate_ = nullptr;
  ::memset(&weaponid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponuid_) -
      reinterpret_cast<char*>(&weaponid_)) + sizeof(weaponuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncWeaponState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 weaponId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chairId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weaponUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          weaponuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WeaponState weaponState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncWeaponState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSyncWeaponState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weaponId = 1;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weaponid(), target);
  }

  // int32 chairId = 2;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chairid(), target);
  }

  // int32 weaponUID = 3;
  if (this->weaponuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_weaponuid(), target);
  }

  // .PlaneWar.WeaponState weaponState = 4;
  if (this->has_weaponstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weaponstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSyncWeaponState)
  return target;
}

size_t CSSyncWeaponState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSyncWeaponState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.WeaponState weaponState = 4;
  if (this->has_weaponstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weaponstate_);
  }

  // int32 weaponId = 1;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  // int32 chairId = 2;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 weaponUID = 3;
  if (this->weaponuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncWeaponState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSyncWeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncWeaponState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncWeaponState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSyncWeaponState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSyncWeaponState)
    MergeFrom(*source);
  }
}

void CSSyncWeaponState::MergeFrom(const CSSyncWeaponState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSyncWeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weaponstate()) {
    _internal_mutable_weaponstate()->::PlaneWar::WeaponState::MergeFrom(from._internal_weaponstate());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.weaponuid() != 0) {
    _internal_set_weaponuid(from._internal_weaponuid());
  }
}

void CSSyncWeaponState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSyncWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncWeaponState::CopyFrom(const CSSyncWeaponState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSyncWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncWeaponState::IsInitialized() const {
  return true;
}

void CSSyncWeaponState::InternalSwap(CSSyncWeaponState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncWeaponState, weaponuid_)
      + sizeof(CSSyncWeaponState::weaponuid_)
      - PROTOBUF_FIELD_OFFSET(CSSyncWeaponState, weaponstate_)>(
          reinterpret_cast<char*>(&weaponstate_),
          reinterpret_cast<char*>(&other->weaponstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncWeaponState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncWeaponState::_Internal {
 public:
};

SCSyncWeaponState::SCSyncWeaponState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncWeaponState)
}
SCSyncWeaponState::SCSyncWeaponState(const SCSyncWeaponState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncWeaponState)
}

void SCSyncWeaponState::SharedCtor() {
}

SCSyncWeaponState::~SCSyncWeaponState() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncWeaponState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncWeaponState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncWeaponState::ArenaDtor(void* object) {
  SCSyncWeaponState* _this = reinterpret_cast< SCSyncWeaponState* >(object);
  (void)_this;
}
void SCSyncWeaponState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncWeaponState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncWeaponState& SCSyncWeaponState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncWeaponState_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncWeaponState::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncWeaponState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncWeaponState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncWeaponState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncWeaponState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncWeaponState)
  return target;
}

size_t SCSyncWeaponState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncWeaponState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncWeaponState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncWeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncWeaponState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncWeaponState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncWeaponState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncWeaponState)
    MergeFrom(*source);
  }
}

void SCSyncWeaponState::MergeFrom(const SCSyncWeaponState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncWeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCSyncWeaponState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncWeaponState::CopyFrom(const SCSyncWeaponState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncWeaponState::IsInitialized() const {
  return true;
}

void SCSyncWeaponState::InternalSwap(SCSyncWeaponState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncWeaponState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPreHit::_Internal {
 public:
};

CSPreHit::CSPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSPreHit)
}
CSPreHit::CSPreHit(const CSPreHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(sourceuid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSPreHit)
}

void CSPreHit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(sourceuid_));
}

CSPreHit::~CSPreHit() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSPreHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPreHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPreHit::ArenaDtor(void* object) {
  CSPreHit* _this = reinterpret_cast< CSPreHit* >(object);
  (void)_this;
}
void CSPreHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPreHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPreHit& CSPreHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPreHit_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSPreHit::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceuid_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(sourceuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPreHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPreHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullettype(), target);
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSPreHit)
  return target;
}

size_t CSPreHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSPreHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 sourceUID = 3;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPreHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPreHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPreHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSPreHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSPreHit)
    MergeFrom(*source);
  }
}

void CSPreHit::MergeFrom(const CSPreHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSPreHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPreHit::CopyFrom(const CSPreHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPreHit::IsInitialized() const {
  return true;
}

void CSPreHit::InternalSwap(CSPreHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSPreHit, sourceuid_)
      + sizeof(CSPreHit::sourceuid_)
      - PROTOBUF_FIELD_OFFSET(CSPreHit, ratio_)>(
          reinterpret_cast<char*>(&ratio_),
          reinterpret_cast<char*>(&other->ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPreHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPreHit::_Internal {
 public:
  static const ::PlaneWar::HitMode& hitmode(const SCPreHit* msg);
};

const ::PlaneWar::HitMode&
SCPreHit::_Internal::hitmode(const SCPreHit* msg) {
  return *msg->hitmode_;
}
SCPreHit::SCPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCPreHit)
}
SCPreHit::SCPreHit(const SCPreHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hitmode()) {
    hitmode_ = new ::PlaneWar::HitMode(*from.hitmode_);
  } else {
    hitmode_ = nullptr;
  }
  weaponuid_ = from.weaponuid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCPreHit)
}

void SCPreHit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPreHit_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hitmode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponuid_) -
      reinterpret_cast<char*>(&hitmode_)) + sizeof(weaponuid_));
}

SCPreHit::~SCPreHit() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCPreHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPreHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hitmode_;
}

void SCPreHit::ArenaDtor(void* object) {
  SCPreHit* _this = reinterpret_cast< SCPreHit* >(object);
  (void)_this;
}
void SCPreHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPreHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPreHit& SCPreHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPreHit_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCPreHit::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hitmode_ != nullptr) {
    delete hitmode_;
  }
  hitmode_ = nullptr;
  weaponuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPreHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 weaponUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          weaponuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.HitMode hitMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hitmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPreHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weaponUID = 1;
  if (this->weaponuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weaponuid(), target);
  }

  // .PlaneWar.HitMode hitMode = 2;
  if (this->has_hitmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hitmode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCPreHit)
  return target;
}

size_t SCPreHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCPreHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.HitMode hitMode = 2;
  if (this->has_hitmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hitmode_);
  }

  // int32 weaponUID = 1;
  if (this->weaponuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPreHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPreHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPreHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCPreHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCPreHit)
    MergeFrom(*source);
  }
}

void SCPreHit::MergeFrom(const SCPreHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hitmode()) {
    _internal_mutable_hitmode()->::PlaneWar::HitMode::MergeFrom(from._internal_hitmode());
  }
  if (from.weaponuid() != 0) {
    _internal_set_weaponuid(from._internal_weaponuid());
  }
}

void SCPreHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPreHit::CopyFrom(const SCPreHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPreHit::IsInitialized() const {
  return true;
}

void SCPreHit::InternalSwap(SCPreHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPreHit, weaponuid_)
      + sizeof(SCPreHit::weaponuid_)
      - PROTOBUF_FIELD_OFFSET(SCPreHit, hitmode_)>(
          reinterpret_cast<char*>(&hitmode_),
          reinterpret_cast<char*>(&other->hitmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPreHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Animation::_Internal {
 public:
  static const ::PlaneWar::FortuneWheelJson& fortunejson(const Animation* msg);
  static const ::PlaneWar::GoldenToadJson& goldentoadjson(const Animation* msg);
  static const ::PlaneWar::DiceJson& dicejson(const Animation* msg);
};

const ::PlaneWar::FortuneWheelJson&
Animation::_Internal::fortunejson(const Animation* msg) {
  return *msg->fortunejson_;
}
const ::PlaneWar::GoldenToadJson&
Animation::_Internal::goldentoadjson(const Animation* msg) {
  return *msg->goldentoadjson_;
}
const ::PlaneWar::DiceJson&
Animation::_Internal::dicejson(const Animation* msg) {
  return *msg->dicejson_;
}
Animation::Animation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multiplelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.Animation)
}
Animation::Animation(const Animation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multiplelist_(from.multiplelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  animationmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_animationmsg().empty()) {
    animationmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animationmsg(), 
      GetArena());
  }
  if (from._internal_has_fortunejson()) {
    fortunejson_ = new ::PlaneWar::FortuneWheelJson(*from.fortunejson_);
  } else {
    fortunejson_ = nullptr;
  }
  if (from._internal_has_goldentoadjson()) {
    goldentoadjson_ = new ::PlaneWar::GoldenToadJson(*from.goldentoadjson_);
  } else {
    goldentoadjson_ = nullptr;
  }
  if (from._internal_has_dicejson()) {
    dicejson_ = new ::PlaneWar::DiceJson(*from.dicejson_);
  } else {
    dicejson_ = nullptr;
  }
  ::memcpy(&animationid_, &from.animationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&animationid_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.Animation)
}

void Animation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Animation_PlaneWar_2eproto.base);
  animationmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fortunejson_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&fortunejson_)) + sizeof(ratio_));
}

Animation::~Animation() {
  // @@protoc_insertion_point(destructor:PlaneWar.Animation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Animation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  animationmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fortunejson_;
  if (this != internal_default_instance()) delete goldentoadjson_;
  if (this != internal_default_instance()) delete dicejson_;
}

void Animation::ArenaDtor(void* object) {
  Animation* _this = reinterpret_cast< Animation* >(object);
  (void)_this;
}
void Animation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Animation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Animation& Animation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Animation_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void Animation::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.Animation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiplelist_.Clear();
  animationmsg_.ClearToEmpty();
  if (GetArena() == nullptr && fortunejson_ != nullptr) {
    delete fortunejson_;
  }
  fortunejson_ = nullptr;
  if (GetArena() == nullptr && goldentoadjson_ != nullptr) {
    delete goldentoadjson_;
  }
  goldentoadjson_ = nullptr;
  if (GetArena() == nullptr && dicejson_ != nullptr) {
    delete dicejson_;
  }
  dicejson_ = nullptr;
  ::memset(&animationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&animationid_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Animation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 animationID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          animationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string animationMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_animationmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.Animation.animationMsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monsterUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          monsteruid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originUID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          originuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 multipleList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_multiplelist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_multiplelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.FortuneWheelJson fortuneJson = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fortunejson(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GoldenToadJson goldenToadJson = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_goldentoadjson(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.DiceJson diceJson = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicejson(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Animation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.Animation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 animationID = 1;
  if (this->animationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_animationid(), target);
  }

  // string animationMsg = 2;
  if (this->animationmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animationmsg().data(), static_cast<int>(this->_internal_animationmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.Animation.animationMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animationmsg(), target);
  }

  // int32 chair = 3;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair(), target);
  }

  // int32 monsterUID = 4;
  if (this->monsteruid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_monsteruid(), target);
  }

  // int32 bulletType = 5;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bullettype(), target);
  }

  // int32 earn = 6;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_earn(), target);
  }

  // int32 originUID = 7;
  if (this->originuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_originuid(), target);
  }

  // repeated int32 multipleList = 8;
  {
    int byte_size = _multiplelist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_multiplelist(), byte_size, target);
    }
  }

  // int32 ratio = 9;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ratio(), target);
  }

  // .PlaneWar.FortuneWheelJson fortuneJson = 10;
  if (this->has_fortunejson()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fortunejson(this), target, stream);
  }

  // .PlaneWar.GoldenToadJson goldenToadJson = 11;
  if (this->has_goldentoadjson()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::goldentoadjson(this), target, stream);
  }

  // .PlaneWar.DiceJson diceJson = 12;
  if (this->has_dicejson()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::dicejson(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.Animation)
  return target;
}

size_t Animation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.Animation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 multipleList = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->multiplelist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _multiplelist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string animationMsg = 2;
  if (this->animationmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animationmsg());
  }

  // .PlaneWar.FortuneWheelJson fortuneJson = 10;
  if (this->has_fortunejson()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fortunejson_);
  }

  // .PlaneWar.GoldenToadJson goldenToadJson = 11;
  if (this->has_goldentoadjson()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *goldentoadjson_);
  }

  // .PlaneWar.DiceJson diceJson = 12;
  if (this->has_dicejson()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dicejson_);
  }

  // int32 animationID = 1;
  if (this->animationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_animationid());
  }

  // int32 chair = 3;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 monsterUID = 4;
  if (this->monsteruid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsteruid());
  }

  // int32 bulletType = 5;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // int32 earn = 6;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // int32 originUID = 7;
  if (this->originuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originuid());
  }

  // int32 ratio = 9;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Animation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.Animation)
  GOOGLE_DCHECK_NE(&from, this);
  const Animation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Animation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.Animation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.Animation)
    MergeFrom(*source);
  }
}

void Animation::MergeFrom(const Animation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.Animation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiplelist_.MergeFrom(from.multiplelist_);
  if (from.animationmsg().size() > 0) {
    _internal_set_animationmsg(from._internal_animationmsg());
  }
  if (from.has_fortunejson()) {
    _internal_mutable_fortunejson()->::PlaneWar::FortuneWheelJson::MergeFrom(from._internal_fortunejson());
  }
  if (from.has_goldentoadjson()) {
    _internal_mutable_goldentoadjson()->::PlaneWar::GoldenToadJson::MergeFrom(from._internal_goldentoadjson());
  }
  if (from.has_dicejson()) {
    _internal_mutable_dicejson()->::PlaneWar::DiceJson::MergeFrom(from._internal_dicejson());
  }
  if (from.animationid() != 0) {
    _internal_set_animationid(from._internal_animationid());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.monsteruid() != 0) {
    _internal_set_monsteruid(from._internal_monsteruid());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.originuid() != 0) {
    _internal_set_originuid(from._internal_originuid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void Animation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.Animation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Animation::CopyFrom(const Animation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.Animation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Animation::IsInitialized() const {
  return true;
}

void Animation::InternalSwap(Animation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multiplelist_.InternalSwap(&other->multiplelist_);
  animationmsg_.Swap(&other->animationmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Animation, ratio_)
      + sizeof(Animation::ratio_)
      - PROTOBUF_FIELD_OFFSET(Animation, fortunejson_)>(
          reinterpret_cast<char*>(&fortunejson_),
          reinterpret_cast<char*>(&other->fortunejson_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Animation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiceJson::_Internal {
 public:
};

DiceJson::DiceJson(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dice_(arena),
  mullist_(arena),
  mulposlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.DiceJson)
}
DiceJson::DiceJson(const DiceJson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dice_(from.dice_),
      mullist_(from.mullist_),
      mulposlist_(from.mulposlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  step_ = from.step_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.DiceJson)
}

void DiceJson::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiceJson_PlaneWar_2eproto.base);
  step_ = 0;
}

DiceJson::~DiceJson() {
  // @@protoc_insertion_point(destructor:PlaneWar.DiceJson)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiceJson::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiceJson::ArenaDtor(void* object) {
  DiceJson* _this = reinterpret_cast< DiceJson* >(object);
  (void)_this;
}
void DiceJson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiceJson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiceJson& DiceJson::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiceJson_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void DiceJson::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.DiceJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dice_.Clear();
  mullist_.Clear();
  mulposlist_.Clear();
  step_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiceJson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.Dice dice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.Dice mulList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mullist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.Pos mulPosList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mulposlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiceJson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.DiceJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step = 1;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_step(), target);
  }

  // repeated .PlaneWar.Dice dice = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dice_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dice(i), target, stream);
  }

  // repeated .PlaneWar.Dice mulList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mullist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mullist(i), target, stream);
  }

  // repeated .PlaneWar.Pos mulPosList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mulposlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mulposlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.DiceJson)
  return target;
}

size_t DiceJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.DiceJson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.Dice dice = 2;
  total_size += 1UL * this->_internal_dice_size();
  for (const auto& msg : this->dice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.Dice mulList = 3;
  total_size += 1UL * this->_internal_mullist_size();
  for (const auto& msg : this->mullist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.Pos mulPosList = 4;
  total_size += 1UL * this->_internal_mulposlist_size();
  for (const auto& msg : this->mulposlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 step = 1;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiceJson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.DiceJson)
  GOOGLE_DCHECK_NE(&from, this);
  const DiceJson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiceJson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.DiceJson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.DiceJson)
    MergeFrom(*source);
  }
}

void DiceJson::MergeFrom(const DiceJson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.DiceJson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dice_.MergeFrom(from.dice_);
  mullist_.MergeFrom(from.mullist_);
  mulposlist_.MergeFrom(from.mulposlist_);
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
}

void DiceJson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.DiceJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceJson::CopyFrom(const DiceJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.DiceJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceJson::IsInitialized() const {
  return true;
}

void DiceJson::InternalSwap(DiceJson* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dice_.InternalSwap(&other->dice_);
  mullist_.InternalSwap(&other->mullist_);
  mulposlist_.InternalSwap(&other->mulposlist_);
  swap(step_, other->step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiceJson::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FortuneWheelJson::_Internal {
 public:
};

FortuneWheelJson::FortuneWheelJson(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.FortuneWheelJson)
}
FortuneWheelJson::FortuneWheelJson(const FortuneWheelJson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_ = from.site_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.FortuneWheelJson)
}

void FortuneWheelJson::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FortuneWheelJson_PlaneWar_2eproto.base);
  site_ = 0;
}

FortuneWheelJson::~FortuneWheelJson() {
  // @@protoc_insertion_point(destructor:PlaneWar.FortuneWheelJson)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FortuneWheelJson::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FortuneWheelJson::ArenaDtor(void* object) {
  FortuneWheelJson* _this = reinterpret_cast< FortuneWheelJson* >(object);
  (void)_this;
}
void FortuneWheelJson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FortuneWheelJson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FortuneWheelJson& FortuneWheelJson::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FortuneWheelJson_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void FortuneWheelJson::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.FortuneWheelJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  site_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FortuneWheelJson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.FortuneWheelInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 site = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FortuneWheelJson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.FortuneWheelJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.FortuneWheelInfo result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_result(i), target, stream);
  }

  // int32 site = 2;
  if (this->site() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_site(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.FortuneWheelJson)
  return target;
}

size_t FortuneWheelJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.FortuneWheelJson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.FortuneWheelInfo result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 site = 2;
  if (this->site() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_site());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FortuneWheelJson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.FortuneWheelJson)
  GOOGLE_DCHECK_NE(&from, this);
  const FortuneWheelJson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FortuneWheelJson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.FortuneWheelJson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.FortuneWheelJson)
    MergeFrom(*source);
  }
}

void FortuneWheelJson::MergeFrom(const FortuneWheelJson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.FortuneWheelJson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.site() != 0) {
    _internal_set_site(from._internal_site());
  }
}

void FortuneWheelJson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.FortuneWheelJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FortuneWheelJson::CopyFrom(const FortuneWheelJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.FortuneWheelJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FortuneWheelJson::IsInitialized() const {
  return true;
}

void FortuneWheelJson::InternalSwap(FortuneWheelJson* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(site_, other->site_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FortuneWheelJson::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GoldenToadJson::_Internal {
 public:
};

GoldenToadJson::GoldenToadJson(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orderlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GoldenToadJson)
}
GoldenToadJson::GoldenToadJson(const GoldenToadJson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orderlist_(from.orderlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&totalratio_, &from.totalratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&totalratio_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GoldenToadJson)
}

void GoldenToadJson::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GoldenToadJson_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&totalratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&totalratio_)) + sizeof(step_));
}

GoldenToadJson::~GoldenToadJson() {
  // @@protoc_insertion_point(destructor:PlaneWar.GoldenToadJson)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GoldenToadJson::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GoldenToadJson::ArenaDtor(void* object) {
  GoldenToadJson* _this = reinterpret_cast< GoldenToadJson* >(object);
  (void)_this;
}
void GoldenToadJson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoldenToadJson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoldenToadJson& GoldenToadJson::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoldenToadJson_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GoldenToadJson::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GoldenToadJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderlist_.Clear();
  ::memset(&totalratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&totalratio_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoldenToadJson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.OrderData orderList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orderlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 totalRatio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoldenToadJson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GoldenToadJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.OrderData orderList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orderlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orderlist(i), target, stream);
  }

  // int32 totalRatio = 2;
  if (this->totalratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalratio(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // int32 step = 4;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GoldenToadJson)
  return target;
}

size_t GoldenToadJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GoldenToadJson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.OrderData orderList = 1;
  total_size += 1UL * this->_internal_orderlist_size();
  for (const auto& msg : this->orderlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 totalRatio = 2;
  if (this->totalratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalratio());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 step = 4;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoldenToadJson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GoldenToadJson)
  GOOGLE_DCHECK_NE(&from, this);
  const GoldenToadJson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoldenToadJson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GoldenToadJson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GoldenToadJson)
    MergeFrom(*source);
  }
}

void GoldenToadJson::MergeFrom(const GoldenToadJson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GoldenToadJson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orderlist_.MergeFrom(from.orderlist_);
  if (from.totalratio() != 0) {
    _internal_set_totalratio(from._internal_totalratio());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
}

void GoldenToadJson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GoldenToadJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldenToadJson::CopyFrom(const GoldenToadJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GoldenToadJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldenToadJson::IsInitialized() const {
  return true;
}

void GoldenToadJson::InternalSwap(GoldenToadJson* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderlist_.InternalSwap(&other->orderlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoldenToadJson, step_)
      + sizeof(GoldenToadJson::step_)
      - PROTOBUF_FIELD_OFFSET(GoldenToadJson, totalratio_)>(
          reinterpret_cast<char*>(&totalratio_),
          reinterpret_cast<char*>(&other->totalratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GoldenToadJson::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderData::_Internal {
 public:
};

OrderData::OrderData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.OrderData)
}
OrderData::OrderData(const OrderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.OrderData)
}

void OrderData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&type_)) + sizeof(ratio_));
}

OrderData::~OrderData() {
  // @@protoc_insertion_point(destructor:PlaneWar.OrderData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderData::ArenaDtor(void* object) {
  OrderData* _this = reinterpret_cast< OrderData* >(object);
  (void)_this;
}
void OrderData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderData& OrderData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderData_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void OrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.OrderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&type_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.OrderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.OrderData)
  return target;
}

size_t OrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.OrderData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.OrderData)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.OrderData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.OrderData)
    MergeFrom(*source);
  }
}

void OrderData::MergeFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.OrderData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void OrderData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderData::CopyFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderData::IsInitialized() const {
  return true;
}

void OrderData::InternalSwap(OrderData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderData, ratio_)
      + sizeof(OrderData::ratio_)
      - PROTOBUF_FIELD_OFFSET(OrderData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncAnimation::_Internal {
 public:
  static const ::PlaneWar::Animation& animation(const CSSyncAnimation* msg);
};

const ::PlaneWar::Animation&
CSSyncAnimation::_Internal::animation(const CSSyncAnimation* msg) {
  return *msg->animation_;
}
CSSyncAnimation::CSSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSyncAnimation)
}
CSSyncAnimation::CSSyncAnimation(const CSSyncAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_animation()) {
    animation_ = new ::PlaneWar::Animation(*from.animation_);
  } else {
    animation_ = nullptr;
  }
  iscomplete_ = from.iscomplete_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSyncAnimation)
}

void CSSyncAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncAnimation_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&animation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&iscomplete_) -
      reinterpret_cast<char*>(&animation_)) + sizeof(iscomplete_));
}

CSSyncAnimation::~CSSyncAnimation() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSyncAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete animation_;
}

void CSSyncAnimation::ArenaDtor(void* object) {
  CSSyncAnimation* _this = reinterpret_cast< CSSyncAnimation* >(object);
  (void)_this;
}
void CSSyncAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncAnimation& CSSyncAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncAnimation_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSyncAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && animation_ != nullptr) {
    delete animation_;
  }
  animation_ = nullptr;
  iscomplete_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.Animation animation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isComplete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iscomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.Animation animation = 1;
  if (this->has_animation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::animation(this), target, stream);
  }

  // bool isComplete = 2;
  if (this->iscomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_iscomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSyncAnimation)
  return target;
}

size_t CSSyncAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSyncAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Animation animation = 1;
  if (this->has_animation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animation_);
  }

  // bool isComplete = 2;
  if (this->iscomplete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSyncAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSyncAnimation)
    MergeFrom(*source);
  }
}

void CSSyncAnimation::MergeFrom(const CSSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_animation()) {
    _internal_mutable_animation()->::PlaneWar::Animation::MergeFrom(from._internal_animation());
  }
  if (from.iscomplete() != 0) {
    _internal_set_iscomplete(from._internal_iscomplete());
  }
}

void CSSyncAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncAnimation::CopyFrom(const CSSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncAnimation::IsInitialized() const {
  return true;
}

void CSSyncAnimation::InternalSwap(CSSyncAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncAnimation, iscomplete_)
      + sizeof(CSSyncAnimation::iscomplete_)
      - PROTOBUF_FIELD_OFFSET(CSSyncAnimation, animation_)>(
          reinterpret_cast<char*>(&animation_),
          reinterpret_cast<char*>(&other->animation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncAnimation::_Internal {
 public:
  static const ::PlaneWar::Animation& animation(const SCSyncAnimation* msg);
};

const ::PlaneWar::Animation&
SCSyncAnimation::_Internal::animation(const SCSyncAnimation* msg) {
  return *msg->animation_;
}
SCSyncAnimation::SCSyncAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncAnimation)
}
SCSyncAnimation::SCSyncAnimation(const SCSyncAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_animation()) {
    animation_ = new ::PlaneWar::Animation(*from.animation_);
  } else {
    animation_ = nullptr;
  }
  iscomplete_ = from.iscomplete_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncAnimation)
}

void SCSyncAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncAnimation_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&animation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&iscomplete_) -
      reinterpret_cast<char*>(&animation_)) + sizeof(iscomplete_));
}

SCSyncAnimation::~SCSyncAnimation() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete animation_;
}

void SCSyncAnimation::ArenaDtor(void* object) {
  SCSyncAnimation* _this = reinterpret_cast< SCSyncAnimation* >(object);
  (void)_this;
}
void SCSyncAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncAnimation& SCSyncAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncAnimation_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && animation_ != nullptr) {
    delete animation_;
  }
  animation_ = nullptr;
  iscomplete_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.Animation animation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isComplete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iscomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.Animation animation = 1;
  if (this->has_animation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::animation(this), target, stream);
  }

  // bool isComplete = 2;
  if (this->iscomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_iscomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncAnimation)
  return target;
}

size_t SCSyncAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Animation animation = 1;
  if (this->has_animation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animation_);
  }

  // bool isComplete = 2;
  if (this->iscomplete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncAnimation)
    MergeFrom(*source);
  }
}

void SCSyncAnimation::MergeFrom(const SCSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_animation()) {
    _internal_mutable_animation()->::PlaneWar::Animation::MergeFrom(from._internal_animation());
  }
  if (from.iscomplete() != 0) {
    _internal_set_iscomplete(from._internal_iscomplete());
  }
}

void SCSyncAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncAnimation::CopyFrom(const SCSyncAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncAnimation::IsInitialized() const {
  return true;
}

void SCSyncAnimation::InternalSwap(SCSyncAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncAnimation, iscomplete_)
      + sizeof(SCSyncAnimation::iscomplete_)
      - PROTOBUF_FIELD_OFFSET(SCSyncAnimation, animation_)>(
          reinterpret_cast<char*>(&animation_),
          reinterpret_cast<char*>(&other->animation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetAnimations::_Internal {
 public:
};

SCGetAnimations::SCGetAnimations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  animations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetAnimations)
}
SCGetAnimations::SCGetAnimations(const SCGetAnimations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      animations_(from.animations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetAnimations)
}

void SCGetAnimations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetAnimations_PlaneWar_2eproto.base);
}

SCGetAnimations::~SCGetAnimations() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetAnimations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetAnimations::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetAnimations::ArenaDtor(void* object) {
  SCGetAnimations* _this = reinterpret_cast< SCGetAnimations* >(object);
  (void)_this;
}
void SCGetAnimations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetAnimations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetAnimations& SCGetAnimations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetAnimations_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetAnimations::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetAnimations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  animations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetAnimations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.Animation animations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_animations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetAnimations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetAnimations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.Animation animations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_animations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_animations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetAnimations)
  return target;
}

size_t SCGetAnimations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetAnimations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.Animation animations = 1;
  total_size += 1UL * this->_internal_animations_size();
  for (const auto& msg : this->animations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetAnimations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetAnimations)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetAnimations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetAnimations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetAnimations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetAnimations)
    MergeFrom(*source);
  }
}

void SCGetAnimations::MergeFrom(const SCGetAnimations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetAnimations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  animations_.MergeFrom(from.animations_);
}

void SCGetAnimations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetAnimations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetAnimations::CopyFrom(const SCGetAnimations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetAnimations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetAnimations::IsInitialized() const {
  return true;
}

void SCGetAnimations::InternalSwap(SCGetAnimations* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  animations_.InternalSwap(&other->animations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetAnimations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GradeRankDetail::_Internal {
 public:
};

GradeRankDetail::GradeRankDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GradeRankDetail)
}
GradeRankDetail::GradeRankDetail(const GradeRankDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rankname().empty()) {
    rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rankname(), 
      GetArena());
  }
  rankindex_ = from.rankindex_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GradeRankDetail)
}

void GradeRankDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GradeRankDetail_PlaneWar_2eproto.base);
  rankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rankindex_ = 0;
}

GradeRankDetail::~GradeRankDetail() {
  // @@protoc_insertion_point(destructor:PlaneWar.GradeRankDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradeRankDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rankname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GradeRankDetail::ArenaDtor(void* object) {
  GradeRankDetail* _this = reinterpret_cast< GradeRankDetail* >(object);
  (void)_this;
}
void GradeRankDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradeRankDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradeRankDetail& GradeRankDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradeRankDetail_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GradeRankDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GradeRankDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankname_.ClearToEmpty();
  rankindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradeRankDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rankIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rankindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rankName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rankname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GradeRankDetail.rankName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradeRankDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GradeRankDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rankIndex = 1;
  if (this->rankindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rankindex(), target);
  }

  // string rankName = 2;
  if (this->rankname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rankname().data(), static_cast<int>(this->_internal_rankname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GradeRankDetail.rankName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rankname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GradeRankDetail)
  return target;
}

size_t GradeRankDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GradeRankDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rankName = 2;
  if (this->rankname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rankname());
  }

  // int32 rankIndex = 1;
  if (this->rankindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rankindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradeRankDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GradeRankDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const GradeRankDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradeRankDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GradeRankDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GradeRankDetail)
    MergeFrom(*source);
  }
}

void GradeRankDetail::MergeFrom(const GradeRankDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GradeRankDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rankname().size() > 0) {
    _internal_set_rankname(from._internal_rankname());
  }
  if (from.rankindex() != 0) {
    _internal_set_rankindex(from._internal_rankindex());
  }
}

void GradeRankDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GradeRankDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeRankDetail::CopyFrom(const GradeRankDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GradeRankDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeRankDetail::IsInitialized() const {
  return true;
}

void GradeRankDetail::InternalSwap(GradeRankDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rankname_.Swap(&other->rankname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rankindex_, other->rankindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GradeRankDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GradeRankConfig::_Internal {
 public:
};

GradeRankConfig::GradeRankConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graderankdetail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GradeRankConfig)
}
GradeRankConfig::GradeRankConfig(const GradeRankConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graderankdetail_(from.graderankdetail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ranklistlen_ = from.ranklistlen_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GradeRankConfig)
}

void GradeRankConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GradeRankConfig_PlaneWar_2eproto.base);
  ranklistlen_ = 0;
}

GradeRankConfig::~GradeRankConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.GradeRankConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradeRankConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GradeRankConfig::ArenaDtor(void* object) {
  GradeRankConfig* _this = reinterpret_cast< GradeRankConfig* >(object);
  (void)_this;
}
void GradeRankConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradeRankConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradeRankConfig& GradeRankConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradeRankConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GradeRankConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GradeRankConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graderankdetail_.Clear();
  ranklistlen_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradeRankConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GradeRankDetail gradeRankDetail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graderankdetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 rankListLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ranklistlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradeRankConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GradeRankConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRankDetail gradeRankDetail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graderankdetail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_graderankdetail(i), target, stream);
  }

  // int32 rankListLen = 2;
  if (this->ranklistlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ranklistlen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GradeRankConfig)
  return target;
}

size_t GradeRankConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GradeRankConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRankDetail gradeRankDetail = 1;
  total_size += 1UL * this->_internal_graderankdetail_size();
  for (const auto& msg : this->graderankdetail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 rankListLen = 2;
  if (this->ranklistlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ranklistlen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradeRankConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GradeRankConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GradeRankConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradeRankConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GradeRankConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GradeRankConfig)
    MergeFrom(*source);
  }
}

void GradeRankConfig::MergeFrom(const GradeRankConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GradeRankConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graderankdetail_.MergeFrom(from.graderankdetail_);
  if (from.ranklistlen() != 0) {
    _internal_set_ranklistlen(from._internal_ranklistlen());
  }
}

void GradeRankConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GradeRankConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeRankConfig::CopyFrom(const GradeRankConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GradeRankConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeRankConfig::IsInitialized() const {
  return true;
}

void GradeRankConfig::InternalSwap(GradeRankConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graderankdetail_.InternalSwap(&other->graderankdetail_);
  swap(ranklistlen_, other->ranklistlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GradeRankConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WareGivingInfo::_Internal {
 public:
};

WareGivingInfo::WareGivingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WareGivingInfo)
}
WareGivingInfo::WareGivingInfo(const WareGivingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  propname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propname().empty()) {
    propname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_propname(), 
      GetArena());
  }
  ::memcpy(&propid_, &from.propid_,
    static_cast<size_t>(reinterpret_cast<char*>(&norepeat_) -
    reinterpret_cast<char*>(&propid_)) + sizeof(norepeat_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WareGivingInfo)
}

void WareGivingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WareGivingInfo_PlaneWar_2eproto.base);
  propname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&norepeat_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(norepeat_));
}

WareGivingInfo::~WareGivingInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.WareGivingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WareGivingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  propname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WareGivingInfo::ArenaDtor(void* object) {
  WareGivingInfo* _this = reinterpret_cast< WareGivingInfo* >(object);
  (void)_this;
}
void WareGivingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WareGivingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WareGivingInfo& WareGivingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WareGivingInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WareGivingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WareGivingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propname_.ClearToEmpty();
  ::memset(&propid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&norepeat_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(norepeat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WareGivingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string propName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_propname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.WareGivingInfo.propName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool noRepeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          norepeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WareGivingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WareGivingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  // string propName = 2;
  if (this->propname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propname().data(), static_cast<int>(this->_internal_propname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.WareGivingInfo.propName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_propname(), target);
  }

  // float ratio = 3;
  if (!(this->ratio() <= 0 && this->ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ratio(), target);
  }

  // bool noRepeat = 4;
  if (this->norepeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_norepeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WareGivingInfo)
  return target;
}

size_t WareGivingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WareGivingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string propName = 2;
  if (this->propname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propname());
  }

  // int32 propId = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // float ratio = 3;
  if (!(this->ratio() <= 0 && this->ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // bool noRepeat = 4;
  if (this->norepeat() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WareGivingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WareGivingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WareGivingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WareGivingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WareGivingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WareGivingInfo)
    MergeFrom(*source);
  }
}

void WareGivingInfo::MergeFrom(const WareGivingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WareGivingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propname().size() > 0) {
    _internal_set_propname(from._internal_propname());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (!(from.ratio() <= 0 && from.ratio() >= 0)) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.norepeat() != 0) {
    _internal_set_norepeat(from._internal_norepeat());
  }
}

void WareGivingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WareGivingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WareGivingInfo::CopyFrom(const WareGivingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WareGivingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WareGivingInfo::IsInitialized() const {
  return true;
}

void WareGivingInfo::InternalSwap(WareGivingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  propname_.Swap(&other->propname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WareGivingInfo, norepeat_)
      + sizeof(WareGivingInfo::norepeat_)
      - PROTOBUF_FIELD_OFFSET(WareGivingInfo, propid_)>(
          reinterpret_cast<char*>(&propid_),
          reinterpret_cast<char*>(&other->propid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WareGivingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WareInfo::_Internal {
 public:
};

WareInfo::WareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waregivinginfolist_(arena),
  waregivingproinfolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.WareInfo)
}
WareInfo::WareInfo(const WareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waregivinginfolist_(from.waregivinginfolist_),
      waregivingproinfolist_(from.waregivingproinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wareid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wareid().empty()) {
    wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wareid(), 
      GetArena());
  }
  ::memcpy(&minmoney_, &from.minmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&minmoney_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.WareInfo)
}

void WareInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WareInfo_PlaneWar_2eproto.base);
  wareid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&minmoney_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&minmoney_)) + sizeof(price_));
}

WareInfo::~WareInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.WareInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wareid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WareInfo::ArenaDtor(void* object) {
  WareInfo* _this = reinterpret_cast< WareInfo* >(object);
  (void)_this;
}
void WareInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WareInfo& WareInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WareInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void WareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.WareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waregivinginfolist_.Clear();
  waregivingproinfolist_.Clear();
  wareid_.ClearToEmpty();
  ::memset(&minmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&minmoney_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WareInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string wareId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_wareid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.WareInfo.wareId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.WareGivingInfo wareGivingInfoList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waregivinginfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 minMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          minmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxMoney = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.WareGivingInfo wareGivingProInfoList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waregivingproinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WareInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.WareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string wareId = 1;
  if (this->wareid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wareid().data(), static_cast<int>(this->_internal_wareid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.WareInfo.wareId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_wareid(), target);
  }

  // repeated .PlaneWar.WareGivingInfo wareGivingInfoList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waregivinginfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_waregivinginfolist(i), target, stream);
  }

  // int32 minMoney = 3;
  if (this->minmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_minmoney(), target);
  }

  // int32 maxMoney = 4;
  if (this->maxmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxmoney(), target);
  }

  // int32 price = 5;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_price(), target);
  }

  // repeated .PlaneWar.WareGivingInfo wareGivingProInfoList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waregivingproinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_waregivingproinfolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.WareInfo)
  return target;
}

size_t WareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.WareInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.WareGivingInfo wareGivingInfoList = 2;
  total_size += 1UL * this->_internal_waregivinginfolist_size();
  for (const auto& msg : this->waregivinginfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.WareGivingInfo wareGivingProInfoList = 6;
  total_size += 1UL * this->_internal_waregivingproinfolist_size();
  for (const auto& msg : this->waregivingproinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string wareId = 1;
  if (this->wareid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wareid());
  }

  // int32 minMoney = 3;
  if (this->minmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minmoney());
  }

  // int32 maxMoney = 4;
  if (this->maxmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxmoney());
  }

  // int32 price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WareInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.WareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WareInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WareInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.WareInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.WareInfo)
    MergeFrom(*source);
  }
}

void WareInfo::MergeFrom(const WareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.WareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waregivinginfolist_.MergeFrom(from.waregivinginfolist_);
  waregivingproinfolist_.MergeFrom(from.waregivingproinfolist_);
  if (from.wareid().size() > 0) {
    _internal_set_wareid(from._internal_wareid());
  }
  if (from.minmoney() != 0) {
    _internal_set_minmoney(from._internal_minmoney());
  }
  if (from.maxmoney() != 0) {
    _internal_set_maxmoney(from._internal_maxmoney());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void WareInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.WareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WareInfo::CopyFrom(const WareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.WareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WareInfo::IsInitialized() const {
  return true;
}

void WareInfo::InternalSwap(WareInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waregivinginfolist_.InternalSwap(&other->waregivinginfolist_);
  waregivingproinfolist_.InternalSwap(&other->waregivingproinfolist_);
  wareid_.Swap(&other->wareid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WareInfo, price_)
      + sizeof(WareInfo::price_)
      - PROTOBUF_FIELD_OFFSET(WareInfo, minmoney_)>(
          reinterpret_cast<char*>(&minmoney_),
          reinterpret_cast<char*>(&other->minmoney_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WareInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExtraGradeRewardInfo::_Internal {
 public:
};

ExtraGradeRewardInfo::ExtraGradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ExtraGradeRewardInfo)
}
ExtraGradeRewardInfo::ExtraGradeRewardInfo(const ExtraGradeRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  extraexp_ = from.extraexp_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ExtraGradeRewardInfo)
}

void ExtraGradeRewardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtraGradeRewardInfo_PlaneWar_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extraexp_ = 0;
}

ExtraGradeRewardInfo::~ExtraGradeRewardInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.ExtraGradeRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtraGradeRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtraGradeRewardInfo::ArenaDtor(void* object) {
  ExtraGradeRewardInfo* _this = reinterpret_cast< ExtraGradeRewardInfo* >(object);
  (void)_this;
}
void ExtraGradeRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtraGradeRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtraGradeRewardInfo& ExtraGradeRewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtraGradeRewardInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ExtraGradeRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ExtraGradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  desc_.ClearToEmpty();
  extraexp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtraGradeRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.ExtraGradeRewardInfo.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.ExtraGradeRewardInfo.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float extraExp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          extraexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtraGradeRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ExtraGradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.ExtraGradeRewardInfo.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.ExtraGradeRewardInfo.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // float extraExp = 3;
  if (!(this->extraexp() <= 0 && this->extraexp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_extraexp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ExtraGradeRewardInfo)
  return target;
}

size_t ExtraGradeRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ExtraGradeRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // float extraExp = 3;
  if (!(this->extraexp() <= 0 && this->extraexp() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtraGradeRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ExtraGradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtraGradeRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtraGradeRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ExtraGradeRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ExtraGradeRewardInfo)
    MergeFrom(*source);
  }
}

void ExtraGradeRewardInfo::MergeFrom(const ExtraGradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ExtraGradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.desc().size() > 0) {
    _internal_set_desc(from._internal_desc());
  }
  if (!(from.extraexp() <= 0 && from.extraexp() >= 0)) {
    _internal_set_extraexp(from._internal_extraexp());
  }
}

void ExtraGradeRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ExtraGradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraGradeRewardInfo::CopyFrom(const ExtraGradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ExtraGradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraGradeRewardInfo::IsInitialized() const {
  return true;
}

void ExtraGradeRewardInfo::InternalSwap(ExtraGradeRewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(extraexp_, other->extraexp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtraGradeRewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RankWareConfig::_Internal {
 public:
  static const ::PlaneWar::WareInfo& commwareinfo(const RankWareConfig* msg);
  static const ::PlaneWar::WareInfo& advancewareinfo(const RankWareConfig* msg);
  static const ::PlaneWar::ExtraGradeRewardInfo& extragraderewardinfo(const RankWareConfig* msg);
};

const ::PlaneWar::WareInfo&
RankWareConfig::_Internal::commwareinfo(const RankWareConfig* msg) {
  return *msg->commwareinfo_;
}
const ::PlaneWar::WareInfo&
RankWareConfig::_Internal::advancewareinfo(const RankWareConfig* msg) {
  return *msg->advancewareinfo_;
}
const ::PlaneWar::ExtraGradeRewardInfo&
RankWareConfig::_Internal::extragraderewardinfo(const RankWareConfig* msg) {
  return *msg->extragraderewardinfo_;
}
RankWareConfig::RankWareConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waredesclist_(arena),
  gradedesclist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.RankWareConfig)
}
RankWareConfig::RankWareConfig(const RankWareConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waredesclist_(from.waredesclist_),
      gradedesclist_(from.gradedesclist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commwareinfo()) {
    commwareinfo_ = new ::PlaneWar::WareInfo(*from.commwareinfo_);
  } else {
    commwareinfo_ = nullptr;
  }
  if (from._internal_has_advancewareinfo()) {
    advancewareinfo_ = new ::PlaneWar::WareInfo(*from.advancewareinfo_);
  } else {
    advancewareinfo_ = nullptr;
  }
  if (from._internal_has_extragraderewardinfo()) {
    extragraderewardinfo_ = new ::PlaneWar::ExtraGradeRewardInfo(*from.extragraderewardinfo_);
  } else {
    extragraderewardinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.RankWareConfig)
}

void RankWareConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankWareConfig_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&commwareinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extragraderewardinfo_) -
      reinterpret_cast<char*>(&commwareinfo_)) + sizeof(extragraderewardinfo_));
}

RankWareConfig::~RankWareConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.RankWareConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankWareConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commwareinfo_;
  if (this != internal_default_instance()) delete advancewareinfo_;
  if (this != internal_default_instance()) delete extragraderewardinfo_;
}

void RankWareConfig::ArenaDtor(void* object) {
  RankWareConfig* _this = reinterpret_cast< RankWareConfig* >(object);
  (void)_this;
}
void RankWareConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankWareConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankWareConfig& RankWareConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankWareConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void RankWareConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.RankWareConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waredesclist_.Clear();
  gradedesclist_.Clear();
  if (GetArena() == nullptr && commwareinfo_ != nullptr) {
    delete commwareinfo_;
  }
  commwareinfo_ = nullptr;
  if (GetArena() == nullptr && advancewareinfo_ != nullptr) {
    delete advancewareinfo_;
  }
  advancewareinfo_ = nullptr;
  if (GetArena() == nullptr && extragraderewardinfo_ != nullptr) {
    delete extragraderewardinfo_;
  }
  extragraderewardinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankWareConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.WareInfo commWareInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commwareinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.WareInfo advanceWareInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_advancewareinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ExtraGradeRewardInfo extraGradeRewardInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extragraderewardinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 wareDescList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waredesclist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_waredesclist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gradeDescList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gradedesclist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_gradedesclist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankWareConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.RankWareConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.WareInfo commWareInfo = 1;
  if (this->has_commwareinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commwareinfo(this), target, stream);
  }

  // .PlaneWar.WareInfo advanceWareInfo = 2;
  if (this->has_advancewareinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::advancewareinfo(this), target, stream);
  }

  // .PlaneWar.ExtraGradeRewardInfo extraGradeRewardInfo = 3;
  if (this->has_extragraderewardinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extragraderewardinfo(this), target, stream);
  }

  // repeated int32 wareDescList = 4;
  {
    int byte_size = _waredesclist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_waredesclist(), byte_size, target);
    }
  }

  // repeated int32 gradeDescList = 5;
  {
    int byte_size = _gradedesclist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_gradedesclist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.RankWareConfig)
  return target;
}

size_t RankWareConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.RankWareConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 wareDescList = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->waredesclist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waredesclist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 gradeDescList = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gradedesclist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gradedesclist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .PlaneWar.WareInfo commWareInfo = 1;
  if (this->has_commwareinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commwareinfo_);
  }

  // .PlaneWar.WareInfo advanceWareInfo = 2;
  if (this->has_advancewareinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advancewareinfo_);
  }

  // .PlaneWar.ExtraGradeRewardInfo extraGradeRewardInfo = 3;
  if (this->has_extragraderewardinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extragraderewardinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankWareConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.RankWareConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RankWareConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankWareConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.RankWareConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.RankWareConfig)
    MergeFrom(*source);
  }
}

void RankWareConfig::MergeFrom(const RankWareConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.RankWareConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waredesclist_.MergeFrom(from.waredesclist_);
  gradedesclist_.MergeFrom(from.gradedesclist_);
  if (from.has_commwareinfo()) {
    _internal_mutable_commwareinfo()->::PlaneWar::WareInfo::MergeFrom(from._internal_commwareinfo());
  }
  if (from.has_advancewareinfo()) {
    _internal_mutable_advancewareinfo()->::PlaneWar::WareInfo::MergeFrom(from._internal_advancewareinfo());
  }
  if (from.has_extragraderewardinfo()) {
    _internal_mutable_extragraderewardinfo()->::PlaneWar::ExtraGradeRewardInfo::MergeFrom(from._internal_extragraderewardinfo());
  }
}

void RankWareConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.RankWareConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankWareConfig::CopyFrom(const RankWareConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.RankWareConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankWareConfig::IsInitialized() const {
  return true;
}

void RankWareConfig::InternalSwap(RankWareConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waredesclist_.InternalSwap(&other->waredesclist_);
  gradedesclist_.InternalSwap(&other->gradedesclist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankWareConfig, extragraderewardinfo_)
      + sizeof(RankWareConfig::extragraderewardinfo_)
      - PROTOBUF_FIELD_OFFSET(RankWareConfig, commwareinfo_)>(
          reinterpret_cast<char*>(&commwareinfo_),
          reinterpret_cast<char*>(&other->commwareinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankWareConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiceConfig::_Internal {
 public:
};

DiceConfig::DiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ratiolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.DiceConfig)
}
DiceConfig::DiceConfig(const DiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ratiolist_(from.ratiolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maxmul_ = from.maxmul_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.DiceConfig)
}

void DiceConfig::SharedCtor() {
  maxmul_ = 0;
}

DiceConfig::~DiceConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.DiceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiceConfig::ArenaDtor(void* object) {
  DiceConfig* _this = reinterpret_cast< DiceConfig* >(object);
  (void)_this;
}
void DiceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiceConfig& DiceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiceConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void DiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.DiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratiolist_.Clear();
  maxmul_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ratioList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ratiolist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ratiolist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxMul = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxmul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.DiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ratioList = 1;
  {
    int byte_size = _ratiolist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ratiolist(), byte_size, target);
    }
  }

  // int32 maxMul = 2;
  if (this->maxmul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxmul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.DiceConfig)
  return target;
}

size_t DiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.DiceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ratioList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ratiolist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ratiolist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 maxMul = 2;
  if (this->maxmul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxmul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.DiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DiceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.DiceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.DiceConfig)
    MergeFrom(*source);
  }
}

void DiceConfig::MergeFrom(const DiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.DiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ratiolist_.MergeFrom(from.ratiolist_);
  if (from.maxmul() != 0) {
    _internal_set_maxmul(from._internal_maxmul());
  }
}

void DiceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.DiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceConfig::CopyFrom(const DiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.DiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceConfig::IsInitialized() const {
  return true;
}

void DiceConfig::InternalSwap(DiceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ratiolist_.InternalSwap(&other->ratiolist_);
  swap(maxmul_, other->maxmul_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncConfigs::_Internal {
 public:
};

CSSyncConfigs::CSSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSyncConfigs)
}
CSSyncConfigs::CSSyncConfigs(const CSSyncConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSyncConfigs)
}

void CSSyncConfigs::SharedCtor() {
}

CSSyncConfigs::~CSSyncConfigs() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSyncConfigs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncConfigs::ArenaDtor(void* object) {
  CSSyncConfigs* _this = reinterpret_cast< CSSyncConfigs* >(object);
  (void)_this;
}
void CSSyncConfigs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncConfigs& CSSyncConfigs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncConfigs_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSyncConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncConfigs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncConfigs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSyncConfigs)
  return target;
}

size_t CSSyncConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSyncConfigs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncConfigs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncConfigs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncConfigs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSyncConfigs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSyncConfigs)
    MergeFrom(*source);
  }
}

void CSSyncConfigs::MergeFrom(const CSSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSyncConfigs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncConfigs::CopyFrom(const CSSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncConfigs::IsInitialized() const {
  return true;
}

void CSSyncConfigs::InternalSwap(CSSyncConfigs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncConfigs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncConfigs::_Internal {
 public:
  static const ::PlaneWar::BeeConfig& beeconfig(const SCSyncConfigs* msg);
  static const ::PlaneWar::ReplayConfig& replayconfig(const SCSyncConfigs* msg);
  static const ::PlaneWar::GradeRankConfig& graderankconfig(const SCSyncConfigs* msg);
  static const ::PlaneWar::RankWareConfig& wareconfig(const SCSyncConfigs* msg);
  static const ::PlaneWar::DiceConfig& diceconfig(const SCSyncConfigs* msg);
};

const ::PlaneWar::BeeConfig&
SCSyncConfigs::_Internal::beeconfig(const SCSyncConfigs* msg) {
  return *msg->beeconfig_;
}
const ::PlaneWar::ReplayConfig&
SCSyncConfigs::_Internal::replayconfig(const SCSyncConfigs* msg) {
  return *msg->replayconfig_;
}
const ::PlaneWar::GradeRankConfig&
SCSyncConfigs::_Internal::graderankconfig(const SCSyncConfigs* msg) {
  return *msg->graderankconfig_;
}
const ::PlaneWar::RankWareConfig&
SCSyncConfigs::_Internal::wareconfig(const SCSyncConfigs* msg) {
  return *msg->wareconfig_;
}
const ::PlaneWar::DiceConfig&
SCSyncConfigs::_Internal::diceconfig(const SCSyncConfigs* msg) {
  return *msg->diceconfig_;
}
SCSyncConfigs::SCSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fortuneconfig_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncConfigs)
}
SCSyncConfigs::SCSyncConfigs(const SCSyncConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fortuneconfig_(from.fortuneconfig_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_beeconfig()) {
    beeconfig_ = new ::PlaneWar::BeeConfig(*from.beeconfig_);
  } else {
    beeconfig_ = nullptr;
  }
  if (from._internal_has_replayconfig()) {
    replayconfig_ = new ::PlaneWar::ReplayConfig(*from.replayconfig_);
  } else {
    replayconfig_ = nullptr;
  }
  if (from._internal_has_graderankconfig()) {
    graderankconfig_ = new ::PlaneWar::GradeRankConfig(*from.graderankconfig_);
  } else {
    graderankconfig_ = nullptr;
  }
  if (from._internal_has_wareconfig()) {
    wareconfig_ = new ::PlaneWar::RankWareConfig(*from.wareconfig_);
  } else {
    wareconfig_ = nullptr;
  }
  if (from._internal_has_diceconfig()) {
    diceconfig_ = new ::PlaneWar::DiceConfig(*from.diceconfig_);
  } else {
    diceconfig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncConfigs)
}

void SCSyncConfigs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncConfigs_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&beeconfig_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&diceconfig_) -
      reinterpret_cast<char*>(&beeconfig_)) + sizeof(diceconfig_));
}

SCSyncConfigs::~SCSyncConfigs() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncConfigs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete beeconfig_;
  if (this != internal_default_instance()) delete replayconfig_;
  if (this != internal_default_instance()) delete graderankconfig_;
  if (this != internal_default_instance()) delete wareconfig_;
  if (this != internal_default_instance()) delete diceconfig_;
}

void SCSyncConfigs::ArenaDtor(void* object) {
  SCSyncConfigs* _this = reinterpret_cast< SCSyncConfigs* >(object);
  (void)_this;
}
void SCSyncConfigs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncConfigs& SCSyncConfigs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncConfigs_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fortuneconfig_.Clear();
  if (GetArena() == nullptr && beeconfig_ != nullptr) {
    delete beeconfig_;
  }
  beeconfig_ = nullptr;
  if (GetArena() == nullptr && replayconfig_ != nullptr) {
    delete replayconfig_;
  }
  replayconfig_ = nullptr;
  if (GetArena() == nullptr && graderankconfig_ != nullptr) {
    delete graderankconfig_;
  }
  graderankconfig_ = nullptr;
  if (GetArena() == nullptr && wareconfig_ != nullptr) {
    delete wareconfig_;
  }
  wareconfig_ = nullptr;
  if (GetArena() == nullptr && diceconfig_ != nullptr) {
    delete diceconfig_;
  }
  diceconfig_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncConfigs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.FortuneConfig fortuneConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fortuneconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.BeeConfig beeConfig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_beeconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ReplayConfig replayConfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replayconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GradeRankConfig gradeRankConfig = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graderankconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.RankWareConfig wareConfig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wareconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.DiceConfig diceConfig = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_diceconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncConfigs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.FortuneConfig fortuneConfig = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fortuneconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fortuneconfig(i), target, stream);
  }

  // .PlaneWar.BeeConfig beeConfig = 2;
  if (this->has_beeconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::beeconfig(this), target, stream);
  }

  // .PlaneWar.ReplayConfig replayConfig = 3;
  if (this->has_replayconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::replayconfig(this), target, stream);
  }

  // .PlaneWar.GradeRankConfig gradeRankConfig = 4;
  if (this->has_graderankconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::graderankconfig(this), target, stream);
  }

  // .PlaneWar.RankWareConfig wareConfig = 5;
  if (this->has_wareconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wareconfig(this), target, stream);
  }

  // .PlaneWar.DiceConfig diceConfig = 6;
  if (this->has_diceconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::diceconfig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncConfigs)
  return target;
}

size_t SCSyncConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncConfigs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.FortuneConfig fortuneConfig = 1;
  total_size += 1UL * this->_internal_fortuneconfig_size();
  for (const auto& msg : this->fortuneconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.BeeConfig beeConfig = 2;
  if (this->has_beeconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beeconfig_);
  }

  // .PlaneWar.ReplayConfig replayConfig = 3;
  if (this->has_replayconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replayconfig_);
  }

  // .PlaneWar.GradeRankConfig gradeRankConfig = 4;
  if (this->has_graderankconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graderankconfig_);
  }

  // .PlaneWar.RankWareConfig wareConfig = 5;
  if (this->has_wareconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wareconfig_);
  }

  // .PlaneWar.DiceConfig diceConfig = 6;
  if (this->has_diceconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diceconfig_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncConfigs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncConfigs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncConfigs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncConfigs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncConfigs)
    MergeFrom(*source);
  }
}

void SCSyncConfigs::MergeFrom(const SCSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fortuneconfig_.MergeFrom(from.fortuneconfig_);
  if (from.has_beeconfig()) {
    _internal_mutable_beeconfig()->::PlaneWar::BeeConfig::MergeFrom(from._internal_beeconfig());
  }
  if (from.has_replayconfig()) {
    _internal_mutable_replayconfig()->::PlaneWar::ReplayConfig::MergeFrom(from._internal_replayconfig());
  }
  if (from.has_graderankconfig()) {
    _internal_mutable_graderankconfig()->::PlaneWar::GradeRankConfig::MergeFrom(from._internal_graderankconfig());
  }
  if (from.has_wareconfig()) {
    _internal_mutable_wareconfig()->::PlaneWar::RankWareConfig::MergeFrom(from._internal_wareconfig());
  }
  if (from.has_diceconfig()) {
    _internal_mutable_diceconfig()->::PlaneWar::DiceConfig::MergeFrom(from._internal_diceconfig());
  }
}

void SCSyncConfigs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncConfigs::CopyFrom(const SCSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncConfigs::IsInitialized() const {
  return true;
}

void SCSyncConfigs::InternalSwap(SCSyncConfigs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fortuneconfig_.InternalSwap(&other->fortuneconfig_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncConfigs, diceconfig_)
      + sizeof(SCSyncConfigs::diceconfig_)
      - PROTOBUF_FIELD_OFFSET(SCSyncConfigs, beeconfig_)>(
          reinterpret_cast<char*>(&beeconfig_),
          reinterpret_cast<char*>(&other->beeconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncConfigs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSConfirmWeaponExist::_Internal {
 public:
};

CSConfirmWeaponExist::CSConfirmWeaponExist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSConfirmWeaponExist)
}
CSConfirmWeaponExist::CSConfirmWeaponExist(const CSConfirmWeaponExist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceuid_ = from.sourceuid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSConfirmWeaponExist)
}

void CSConfirmWeaponExist::SharedCtor() {
  sourceuid_ = 0;
}

CSConfirmWeaponExist::~CSConfirmWeaponExist() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSConfirmWeaponExist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSConfirmWeaponExist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSConfirmWeaponExist::ArenaDtor(void* object) {
  CSConfirmWeaponExist* _this = reinterpret_cast< CSConfirmWeaponExist* >(object);
  (void)_this;
}
void CSConfirmWeaponExist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSConfirmWeaponExist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSConfirmWeaponExist& CSConfirmWeaponExist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSConfirmWeaponExist_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSConfirmWeaponExist::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSConfirmWeaponExist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSConfirmWeaponExist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sourceUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSConfirmWeaponExist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSConfirmWeaponExist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sourceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSConfirmWeaponExist)
  return target;
}

size_t CSConfirmWeaponExist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSConfirmWeaponExist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sourceUID = 1;
  if (this->sourceuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSConfirmWeaponExist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSConfirmWeaponExist)
  GOOGLE_DCHECK_NE(&from, this);
  const CSConfirmWeaponExist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSConfirmWeaponExist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSConfirmWeaponExist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSConfirmWeaponExist)
    MergeFrom(*source);
  }
}

void CSConfirmWeaponExist::MergeFrom(const CSConfirmWeaponExist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSConfirmWeaponExist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceuid() != 0) {
    _internal_set_sourceuid(from._internal_sourceuid());
  }
}

void CSConfirmWeaponExist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSConfirmWeaponExist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSConfirmWeaponExist::CopyFrom(const CSConfirmWeaponExist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSConfirmWeaponExist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSConfirmWeaponExist::IsInitialized() const {
  return true;
}

void CSConfirmWeaponExist::InternalSwap(CSConfirmWeaponExist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sourceuid_, other->sourceuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSConfirmWeaponExist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCConfirmWeaponExist::_Internal {
 public:
};

SCConfirmWeaponExist::SCConfirmWeaponExist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCConfirmWeaponExist)
}
SCConfirmWeaponExist::SCConfirmWeaponExist(const SCConfirmWeaponExist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exist_ = from.exist_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCConfirmWeaponExist)
}

void SCConfirmWeaponExist::SharedCtor() {
  exist_ = false;
}

SCConfirmWeaponExist::~SCConfirmWeaponExist() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCConfirmWeaponExist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCConfirmWeaponExist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCConfirmWeaponExist::ArenaDtor(void* object) {
  SCConfirmWeaponExist* _this = reinterpret_cast< SCConfirmWeaponExist* >(object);
  (void)_this;
}
void SCConfirmWeaponExist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCConfirmWeaponExist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCConfirmWeaponExist& SCConfirmWeaponExist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCConfirmWeaponExist_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCConfirmWeaponExist::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCConfirmWeaponExist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCConfirmWeaponExist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool exist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCConfirmWeaponExist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCConfirmWeaponExist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exist = 1;
  if (this->exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCConfirmWeaponExist)
  return target;
}

size_t SCConfirmWeaponExist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCConfirmWeaponExist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exist = 1;
  if (this->exist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCConfirmWeaponExist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCConfirmWeaponExist)
  GOOGLE_DCHECK_NE(&from, this);
  const SCConfirmWeaponExist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCConfirmWeaponExist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCConfirmWeaponExist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCConfirmWeaponExist)
    MergeFrom(*source);
  }
}

void SCConfirmWeaponExist::MergeFrom(const SCConfirmWeaponExist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCConfirmWeaponExist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
}

void SCConfirmWeaponExist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCConfirmWeaponExist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCConfirmWeaponExist::CopyFrom(const SCConfirmWeaponExist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCConfirmWeaponExist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCConfirmWeaponExist::IsInitialized() const {
  return true;
}

void SCConfirmWeaponExist::InternalSwap(SCConfirmWeaponExist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(exist_, other->exist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCConfirmWeaponExist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetVideo::_Internal {
 public:
};

CSGetVideo::CSGetVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetVideo)
}
CSGetVideo::CSGetVideo(const CSGetVideo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_videoid().empty()) {
    videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_videoid(), 
      GetArena());
  }
  videotype_ = from.videotype_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetVideo)
}

void CSGetVideo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSGetVideo_PlaneWar_2eproto.base);
  videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  videotype_ = 0;
}

CSGetVideo::~CSGetVideo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetVideo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetVideo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  videoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSGetVideo::ArenaDtor(void* object) {
  CSGetVideo* _this = reinterpret_cast< CSGetVideo* >(object);
  (void)_this;
}
void CSGetVideo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetVideo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetVideo& CSGetVideo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetVideo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetVideo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videoid_.ClearToEmpty();
  videotype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetVideo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string videoId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_videoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.CSGetVideo.videoId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 videoType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          videotype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetVideo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetVideo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string videoId = 1;
  if (this->videoid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_videoid().data(), static_cast<int>(this->_internal_videoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.CSGetVideo.videoId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_videoid(), target);
  }

  // int32 videoType = 2;
  if (this->videotype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_videotype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetVideo)
  return target;
}

size_t CSGetVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetVideo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string videoId = 1;
  if (this->videoid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_videoid());
  }

  // int32 videoType = 2;
  if (this->videotype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_videotype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetVideo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetVideo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetVideo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetVideo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetVideo)
    MergeFrom(*source);
  }
}

void CSGetVideo::MergeFrom(const CSGetVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.videoid().size() > 0) {
    _internal_set_videoid(from._internal_videoid());
  }
  if (from.videotype() != 0) {
    _internal_set_videotype(from._internal_videotype());
  }
}

void CSGetVideo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetVideo::CopyFrom(const CSGetVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetVideo::IsInitialized() const {
  return true;
}

void CSGetVideo::InternalSwap(CSGetVideo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  videoid_.Swap(&other->videoid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(videotype_, other->videotype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetVideo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetVideo::_Internal {
 public:
};

SCGetVideo::SCGetVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  createdpathlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetVideo)
}
SCGetVideo::SCGetVideo(const SCGetVideo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      createdpathlist_(from.createdpathlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(weaponid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetVideo)
}

void SCGetVideo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetVideo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(weaponid_));
}

SCGetVideo::~SCGetVideo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetVideo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetVideo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetVideo::ArenaDtor(void* object) {
  SCGetVideo* _this = reinterpret_cast< SCGetVideo* >(object);
  (void)_this;
}
void SCGetVideo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetVideo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetVideo& SCGetVideo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetVideo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetVideo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  createdpathlist_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(weaponid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetVideo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.MonsterPath createdPathList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_createdpathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 rewardType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rewardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 money = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gunType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          guntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arena = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          arena_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weaponId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetVideo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetVideo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.MonsterPath createdPathList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_createdpathlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_createdpathlist(i), target, stream);
  }

  // int32 rewardType = 2;
  if (this->rewardtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rewardtype(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // int32 reward = 4;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reward(), target);
  }

  // int32 chair = 5;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_chair(), target);
  }

  // int64 money = 6;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_money(), target);
  }

  // int32 ratio = 7;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ratio(), target);
  }

  // int32 gunType = 8;
  if (this->guntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_guntype(), target);
  }

  // int32 arena = 9;
  if (this->arena() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_arena(), target);
  }

  // int32 weaponId = 10;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_weaponid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetVideo)
  return target;
}

size_t SCGetVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetVideo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.MonsterPath createdPathList = 1;
  total_size += 1UL * this->_internal_createdpathlist_size();
  for (const auto& msg : this->createdpathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 rewardType = 2;
  if (this->rewardtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewardtype());
  }

  // int32 reward = 4;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int64 money = 6;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_money());
  }

  // int32 chair = 5;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 ratio = 7;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 gunType = 8;
  if (this->guntype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guntype());
  }

  // int32 arena = 9;
  if (this->arena() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arena());
  }

  // int32 weaponId = 10;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetVideo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetVideo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetVideo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetVideo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetVideo)
    MergeFrom(*source);
  }
}

void SCGetVideo::MergeFrom(const SCGetVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  createdpathlist_.MergeFrom(from.createdpathlist_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.rewardtype() != 0) {
    _internal_set_rewardtype(from._internal_rewardtype());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.guntype() != 0) {
    _internal_set_guntype(from._internal_guntype());
  }
  if (from.arena() != 0) {
    _internal_set_arena(from._internal_arena());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
}

void SCGetVideo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetVideo::CopyFrom(const SCGetVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetVideo::IsInitialized() const {
  return true;
}

void SCGetVideo::InternalSwap(SCGetVideo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  createdpathlist_.InternalSwap(&other->createdpathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetVideo, weaponid_)
      + sizeof(SCGetVideo::weaponid_)
      - PROTOBUF_FIELD_OFFSET(SCGetVideo, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetVideo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VideoCommon::_Internal {
 public:
};

VideoCommon::VideoCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.VideoCommon)
}
VideoCommon::VideoCommon(const VideoCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_videoid().empty()) {
    videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_videoid(), 
      GetArena());
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&arenaid_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(arenaid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.VideoCommon)
}

void VideoCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoCommon_PlaneWar_2eproto.base);
  videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&arenaid_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(arenaid_));
}

VideoCommon::~VideoCommon() {
  // @@protoc_insertion_point(destructor:PlaneWar.VideoCommon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  videoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoCommon::ArenaDtor(void* object) {
  VideoCommon* _this = reinterpret_cast< VideoCommon* >(object);
  (void)_this;
}
void VideoCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoCommon& VideoCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoCommon_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void VideoCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.VideoCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videoid_.ClearToEmpty();
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arenaid_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(arenaid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rewardType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rewardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string videoId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_videoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.VideoCommon.videoId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          unread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weaponId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arenaId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          arenaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoCommon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.VideoCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reward = 1;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reward(), target);
  }

  // int32 rewardType = 2;
  if (this->rewardtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rewardtype(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // string videoId = 4;
  if (this->videoid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_videoid().data(), static_cast<int>(this->_internal_videoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.VideoCommon.videoId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_videoid(), target);
  }

  // bool unread = 5;
  if (this->unread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_unread(), target);
  }

  // int32 weaponId = 6;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_weaponid(), target);
  }

  // int32 arenaId = 7;
  if (this->arenaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_arenaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.VideoCommon)
  return target;
}

size_t VideoCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.VideoCommon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string videoId = 4;
  if (this->videoid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_videoid());
  }

  // int32 reward = 1;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 rewardType = 2;
  if (this->rewardtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rewardtype());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // bool unread = 5;
  if (this->unread() != 0) {
    total_size += 1 + 1;
  }

  // int32 weaponId = 6;
  if (this->weaponid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weaponid());
  }

  // int32 arenaId = 7;
  if (this->arenaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arenaid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.VideoCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.VideoCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.VideoCommon)
    MergeFrom(*source);
  }
}

void VideoCommon::MergeFrom(const VideoCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.VideoCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.videoid().size() > 0) {
    _internal_set_videoid(from._internal_videoid());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.rewardtype() != 0) {
    _internal_set_rewardtype(from._internal_rewardtype());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.unread() != 0) {
    _internal_set_unread(from._internal_unread());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
  if (from.arenaid() != 0) {
    _internal_set_arenaid(from._internal_arenaid());
  }
}

void VideoCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.VideoCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCommon::CopyFrom(const VideoCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.VideoCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCommon::IsInitialized() const {
  return true;
}

void VideoCommon::InternalSwap(VideoCommon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  videoid_.Swap(&other->videoid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoCommon, arenaid_)
      + sizeof(VideoCommon::arenaid_)
      - PROTOBUF_FIELD_OFFSET(VideoCommon, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCommon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GlobalVideoInfo::_Internal {
 public:
  static const ::PlaneWar::VideoCommon& common(const GlobalVideoInfo* msg);
};

const ::PlaneWar::VideoCommon&
GlobalVideoInfo::_Internal::common(const GlobalVideoInfo* msg) {
  return *msg->common_;
}
GlobalVideoInfo::GlobalVideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GlobalVideoInfo)
}
GlobalVideoInfo::GlobalVideoInfo(const GlobalVideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nicename().empty()) {
    nicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nicename(), 
      GetArena());
  }
  if (from._internal_has_common()) {
    common_ = new ::PlaneWar::VideoCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  self_ = from.self_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GlobalVideoInfo)
}

void GlobalVideoInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalVideoInfo_PlaneWar_2eproto.base);
  nicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&self_) -
      reinterpret_cast<char*>(&common_)) + sizeof(self_));
}

GlobalVideoInfo::~GlobalVideoInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.GlobalVideoInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalVideoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete common_;
}

void GlobalVideoInfo::ArenaDtor(void* object) {
  GlobalVideoInfo* _this = reinterpret_cast< GlobalVideoInfo* >(object);
  (void)_this;
}
void GlobalVideoInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalVideoInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalVideoInfo& GlobalVideoInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalVideoInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GlobalVideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GlobalVideoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicename_.ClearToEmpty();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  self_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalVideoInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string niceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GlobalVideoInfo.niceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool self = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.VideoCommon common = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalVideoInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GlobalVideoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string niceName = 1;
  if (this->nicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nicename().data(), static_cast<int>(this->_internal_nicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GlobalVideoInfo.niceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nicename(), target);
  }

  // bool self = 2;
  if (this->self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_self(), target);
  }

  // .PlaneWar.VideoCommon common = 3;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GlobalVideoInfo)
  return target;
}

size_t GlobalVideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GlobalVideoInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string niceName = 1;
  if (this->nicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nicename());
  }

  // .PlaneWar.VideoCommon common = 3;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // bool self = 2;
  if (this->self() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalVideoInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GlobalVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalVideoInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalVideoInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GlobalVideoInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GlobalVideoInfo)
    MergeFrom(*source);
  }
}

void GlobalVideoInfo::MergeFrom(const GlobalVideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GlobalVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nicename().size() > 0) {
    _internal_set_nicename(from._internal_nicename());
  }
  if (from.has_common()) {
    _internal_mutable_common()->::PlaneWar::VideoCommon::MergeFrom(from._internal_common());
  }
  if (from.self() != 0) {
    _internal_set_self(from._internal_self());
  }
}

void GlobalVideoInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GlobalVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalVideoInfo::CopyFrom(const GlobalVideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GlobalVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalVideoInfo::IsInitialized() const {
  return true;
}

void GlobalVideoInfo::InternalSwap(GlobalVideoInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nicename_.Swap(&other->nicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalVideoInfo, self_)
      + sizeof(GlobalVideoInfo::self_)
      - PROTOBUF_FIELD_OFFSET(GlobalVideoInfo, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalVideoInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SelfVideoInfo::_Internal {
 public:
  static const ::PlaneWar::VideoCommon& common(const SelfVideoInfo* msg);
};

const ::PlaneWar::VideoCommon&
SelfVideoInfo::_Internal::common(const SelfVideoInfo* msg) {
  return *msg->common_;
}
SelfVideoInfo::SelfVideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SelfVideoInfo)
}
SelfVideoInfo::SelfVideoInfo(const SelfVideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::PlaneWar::VideoCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SelfVideoInfo)
}

void SelfVideoInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelfVideoInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&common_)) + sizeof(ratio_));
}

SelfVideoInfo::~SelfVideoInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SelfVideoInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelfVideoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void SelfVideoInfo::ArenaDtor(void* object) {
  SelfVideoInfo* _this = reinterpret_cast< SelfVideoInfo* >(object);
  (void)_this;
}
void SelfVideoInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelfVideoInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelfVideoInfo& SelfVideoInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelfVideoInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SelfVideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SelfVideoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ratio_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelfVideoInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.VideoCommon common = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelfVideoInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SelfVideoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratio(), target);
  }

  // .PlaneWar.VideoCommon common = 2;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SelfVideoInfo)
  return target;
}

size_t SelfVideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SelfVideoInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.VideoCommon common = 2;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfVideoInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SelfVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SelfVideoInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelfVideoInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SelfVideoInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SelfVideoInfo)
    MergeFrom(*source);
  }
}

void SelfVideoInfo::MergeFrom(const SelfVideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SelfVideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::PlaneWar::VideoCommon::MergeFrom(from._internal_common());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void SelfVideoInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SelfVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfVideoInfo::CopyFrom(const SelfVideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SelfVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfVideoInfo::IsInitialized() const {
  return true;
}

void SelfVideoInfo::InternalSwap(SelfVideoInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelfVideoInfo, ratio_)
      + sizeof(SelfVideoInfo::ratio_)
      - PROTOBUF_FIELD_OFFSET(SelfVideoInfo, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfVideoInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSelfVideoRecord::_Internal {
 public:
};

CSSelfVideoRecord::CSSelfVideoRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSelfVideoRecord)
}
CSSelfVideoRecord::CSSelfVideoRecord(const CSSelfVideoRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSelfVideoRecord)
}

void CSSelfVideoRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

CSSelfVideoRecord::~CSSelfVideoRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSelfVideoRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSelfVideoRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSelfVideoRecord::ArenaDtor(void* object) {
  CSSelfVideoRecord* _this = reinterpret_cast< CSSelfVideoRecord* >(object);
  (void)_this;
}
void CSSelfVideoRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSelfVideoRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSelfVideoRecord& CSSelfVideoRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSelfVideoRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSelfVideoRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSelfVideoRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSelfVideoRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSelfVideoRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSelfVideoRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSelfVideoRecord)
  return target;
}

size_t CSSelfVideoRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSelfVideoRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSelfVideoRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSelfVideoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSelfVideoRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSelfVideoRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSelfVideoRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSelfVideoRecord)
    MergeFrom(*source);
  }
}

void CSSelfVideoRecord::MergeFrom(const CSSelfVideoRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSelfVideoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void CSSelfVideoRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSelfVideoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSelfVideoRecord::CopyFrom(const CSSelfVideoRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSelfVideoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSelfVideoRecord::IsInitialized() const {
  return true;
}

void CSSelfVideoRecord::InternalSwap(CSSelfVideoRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSelfVideoRecord, to_)
      + sizeof(CSSelfVideoRecord::to_)
      - PROTOBUF_FIELD_OFFSET(CSSelfVideoRecord, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSelfVideoRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSelfVideoRecord::_Internal {
 public:
};

SCSelfVideoRecord::SCSelfVideoRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  videolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSelfVideoRecord)
}
SCSelfVideoRecord::SCSelfVideoRecord(const SCSelfVideoRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      videolist_(from.videolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  refreshtime_ = from.refreshtime_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSelfVideoRecord)
}

void SCSelfVideoRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSelfVideoRecord_PlaneWar_2eproto.base);
  refreshtime_ = 0;
}

SCSelfVideoRecord::~SCSelfVideoRecord() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSelfVideoRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSelfVideoRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSelfVideoRecord::ArenaDtor(void* object) {
  SCSelfVideoRecord* _this = reinterpret_cast< SCSelfVideoRecord* >(object);
  (void)_this;
}
void SCSelfVideoRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSelfVideoRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSelfVideoRecord& SCSelfVideoRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSelfVideoRecord_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSelfVideoRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSelfVideoRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videolist_.Clear();
  refreshtime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSelfVideoRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.SelfVideoInfo videoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_videolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 refreshTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refreshtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSelfVideoRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSelfVideoRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.SelfVideoInfo videoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_videolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_videolist(i), target, stream);
  }

  // int32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_refreshtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSelfVideoRecord)
  return target;
}

size_t SCSelfVideoRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSelfVideoRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.SelfVideoInfo videoList = 1;
  total_size += 1UL * this->_internal_videolist_size();
  for (const auto& msg : this->videolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refreshtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSelfVideoRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSelfVideoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSelfVideoRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSelfVideoRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSelfVideoRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSelfVideoRecord)
    MergeFrom(*source);
  }
}

void SCSelfVideoRecord::MergeFrom(const SCSelfVideoRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSelfVideoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  videolist_.MergeFrom(from.videolist_);
  if (from.refreshtime() != 0) {
    _internal_set_refreshtime(from._internal_refreshtime());
  }
}

void SCSelfVideoRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSelfVideoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSelfVideoRecord::CopyFrom(const SCSelfVideoRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSelfVideoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSelfVideoRecord::IsInitialized() const {
  return true;
}

void SCSelfVideoRecord::InternalSwap(SCSelfVideoRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  videolist_.InternalSwap(&other->videolist_);
  swap(refreshtime_, other->refreshtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSelfVideoRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVideoRank::_Internal {
 public:
};

CSVideoRank::CSVideoRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSVideoRank)
}
CSVideoRank::CSVideoRank(const CSVideoRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSVideoRank)
}

void CSVideoRank::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

CSVideoRank::~CSVideoRank() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSVideoRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVideoRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSVideoRank::ArenaDtor(void* object) {
  CSVideoRank* _this = reinterpret_cast< CSVideoRank* >(object);
  (void)_this;
}
void CSVideoRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVideoRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSVideoRank& CSVideoRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSVideoRank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSVideoRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSVideoRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVideoRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVideoRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSVideoRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSVideoRank)
  return target;
}

size_t CSVideoRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSVideoRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVideoRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSVideoRank)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVideoRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVideoRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSVideoRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSVideoRank)
    MergeFrom(*source);
  }
}

void CSVideoRank::MergeFrom(const CSVideoRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSVideoRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void CSVideoRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSVideoRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVideoRank::CopyFrom(const CSVideoRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSVideoRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVideoRank::IsInitialized() const {
  return true;
}

void CSVideoRank::InternalSwap(CSVideoRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVideoRank, to_)
      + sizeof(CSVideoRank::to_)
      - PROTOBUF_FIELD_OFFSET(CSVideoRank, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVideoRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCVideoRank::_Internal {
 public:
};

SCVideoRank::SCVideoRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  videolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCVideoRank)
}
SCVideoRank::SCVideoRank(const SCVideoRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      videolist_(from.videolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  refreshtime_ = from.refreshtime_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCVideoRank)
}

void SCVideoRank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCVideoRank_PlaneWar_2eproto.base);
  refreshtime_ = 0;
}

SCVideoRank::~SCVideoRank() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCVideoRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCVideoRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCVideoRank::ArenaDtor(void* object) {
  SCVideoRank* _this = reinterpret_cast< SCVideoRank* >(object);
  (void)_this;
}
void SCVideoRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCVideoRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCVideoRank& SCVideoRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCVideoRank_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCVideoRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCVideoRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videolist_.Clear();
  refreshtime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCVideoRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GlobalVideoInfo videoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_videolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 refreshTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refreshtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCVideoRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCVideoRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GlobalVideoInfo videoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_videolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_videolist(i), target, stream);
  }

  // int32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_refreshtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCVideoRank)
  return target;
}

size_t SCVideoRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCVideoRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GlobalVideoInfo videoList = 1;
  total_size += 1UL * this->_internal_videolist_size();
  for (const auto& msg : this->videolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 refreshTime = 2;
  if (this->refreshtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refreshtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCVideoRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCVideoRank)
  GOOGLE_DCHECK_NE(&from, this);
  const SCVideoRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCVideoRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCVideoRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCVideoRank)
    MergeFrom(*source);
  }
}

void SCVideoRank::MergeFrom(const SCVideoRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCVideoRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  videolist_.MergeFrom(from.videolist_);
  if (from.refreshtime() != 0) {
    _internal_set_refreshtime(from._internal_refreshtime());
  }
}

void SCVideoRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCVideoRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCVideoRank::CopyFrom(const SCVideoRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCVideoRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCVideoRank::IsInitialized() const {
  return true;
}

void SCVideoRank::InternalSwap(SCVideoRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  videolist_.InternalSwap(&other->videolist_);
  swap(refreshtime_, other->refreshtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCVideoRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReceiveReward::_Internal {
 public:
};

ReceiveReward::ReceiveReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ReceiveReward)
}
ReceiveReward::ReceiveReward(const ReceiveReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  ::memcpy(&propid_, &from.propid_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_) -
    reinterpret_cast<char*>(&propid_)) + sizeof(special_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ReceiveReward)
}

void ReceiveReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceiveReward_PlaneWar_2eproto.base);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&special_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(special_));
}

ReceiveReward::~ReceiveReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.ReceiveReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReceiveReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReceiveReward::ArenaDtor(void* object) {
  ReceiveReward* _this = reinterpret_cast< ReceiveReward* >(object);
  (void)_this;
}
void ReceiveReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceiveReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceiveReward& ReceiveReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceiveReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ReceiveReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ReceiveReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmpty();
  title_.ClearToEmpty();
  ::memset(&propid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&special_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(special_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          advance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool box = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          box_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uniqueId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.ReceiveReward.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeLimit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          timelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.ReceiveReward.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 propType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          proptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 special = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          special_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ReceiveReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // bool advance = 3;
  if (this->advance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_advance(), target);
  }

  // int32 minNum = 4;
  if (this->minnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_minnum(), target);
  }

  // int32 maxNum = 5;
  if (this->maxnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxnum(), target);
  }

  // bool box = 6;
  if (this->box() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_box(), target);
  }

  // int32 uniqueId = 7;
  if (this->uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_uniqueid(), target);
  }

  // string desc = 8;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.ReceiveReward.desc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // int32 timeLimit = 9;
  if (this->timelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_timelimit(), target);
  }

  // string title = 10;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.ReceiveReward.title");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_title(), target);
  }

  // int32 propType = 11;
  if (this->proptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_proptype(), target);
  }

  // int32 special = 12;
  if (this->special() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_special(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ReceiveReward)
  return target;
}

size_t ReceiveReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ReceiveReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string desc = 8;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string title = 10;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int32 propId = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 minNum = 4;
  if (this->minnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minnum());
  }

  // bool advance = 3;
  if (this->advance() != 0) {
    total_size += 1 + 1;
  }

  // bool box = 6;
  if (this->box() != 0) {
    total_size += 1 + 1;
  }

  // int32 maxNum = 5;
  if (this->maxnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxnum());
  }

  // int32 uniqueId = 7;
  if (this->uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniqueid());
  }

  // int32 timeLimit = 9;
  if (this->timelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timelimit());
  }

  // int32 propType = 11;
  if (this->proptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proptype());
  }

  // int32 special = 12;
  if (this->special() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ReceiveReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceiveReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ReceiveReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ReceiveReward)
    MergeFrom(*source);
  }
}

void ReceiveReward::MergeFrom(const ReceiveReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ReceiveReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {
    _internal_set_desc(from._internal_desc());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.minnum() != 0) {
    _internal_set_minnum(from._internal_minnum());
  }
  if (from.advance() != 0) {
    _internal_set_advance(from._internal_advance());
  }
  if (from.box() != 0) {
    _internal_set_box(from._internal_box());
  }
  if (from.maxnum() != 0) {
    _internal_set_maxnum(from._internal_maxnum());
  }
  if (from.uniqueid() != 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
  if (from.timelimit() != 0) {
    _internal_set_timelimit(from._internal_timelimit());
  }
  if (from.proptype() != 0) {
    _internal_set_proptype(from._internal_proptype());
  }
  if (from.special() != 0) {
    _internal_set_special(from._internal_special());
  }
}

void ReceiveReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ReceiveReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveReward::CopyFrom(const ReceiveReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ReceiveReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveReward::IsInitialized() const {
  return true;
}

void ReceiveReward::InternalSwap(ReceiveReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceiveReward, special_)
      + sizeof(ReceiveReward::special_)
      - PROTOBUF_FIELD_OFFSET(ReceiveReward, propid_)>(
          reinterpret_cast<char*>(&propid_),
          reinterpret_cast<char*>(&other->propid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSReceiveGradeReward::_Internal {
 public:
};

CSReceiveGradeReward::CSReceiveGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSReceiveGradeReward)
}
CSReceiveGradeReward::CSReceiveGradeReward(const CSReceiveGradeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSReceiveGradeReward)
}

void CSReceiveGradeReward::SharedCtor() {
}

CSReceiveGradeReward::~CSReceiveGradeReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSReceiveGradeReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSReceiveGradeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSReceiveGradeReward::ArenaDtor(void* object) {
  CSReceiveGradeReward* _this = reinterpret_cast< CSReceiveGradeReward* >(object);
  (void)_this;
}
void CSReceiveGradeReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSReceiveGradeReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSReceiveGradeReward& CSReceiveGradeReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSReceiveGradeReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSReceiveGradeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSReceiveGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReceiveGradeReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSReceiveGradeReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSReceiveGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSReceiveGradeReward)
  return target;
}

size_t CSReceiveGradeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSReceiveGradeReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSReceiveGradeReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSReceiveGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSReceiveGradeReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSReceiveGradeReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSReceiveGradeReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSReceiveGradeReward)
    MergeFrom(*source);
  }
}

void CSReceiveGradeReward::MergeFrom(const CSReceiveGradeReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSReceiveGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSReceiveGradeReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSReceiveGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReceiveGradeReward::CopyFrom(const CSReceiveGradeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSReceiveGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReceiveGradeReward::IsInitialized() const {
  return true;
}

void CSReceiveGradeReward::InternalSwap(CSReceiveGradeReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReceiveGradeReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCReceiveGradeReward::_Internal {
 public:
};

SCReceiveGradeReward::SCReceiveGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  receiverewardlist_(arena),
  unreceiverewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCReceiveGradeReward)
}
SCReceiveGradeReward::SCReceiveGradeReward(const SCReceiveGradeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      receiverewardlist_(from.receiverewardlist_),
      unreceiverewardlist_(from.unreceiverewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seasonend_ = from.seasonend_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCReceiveGradeReward)
}

void SCReceiveGradeReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCReceiveGradeReward_PlaneWar_2eproto.base);
  seasonend_ = false;
}

SCReceiveGradeReward::~SCReceiveGradeReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCReceiveGradeReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCReceiveGradeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCReceiveGradeReward::ArenaDtor(void* object) {
  SCReceiveGradeReward* _this = reinterpret_cast< SCReceiveGradeReward* >(object);
  (void)_this;
}
void SCReceiveGradeReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCReceiveGradeReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCReceiveGradeReward& SCReceiveGradeReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCReceiveGradeReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCReceiveGradeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCReceiveGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiverewardlist_.Clear();
  unreceiverewardlist_.Clear();
  seasonend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCReceiveGradeReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receiverewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.ReceiveReward unReceiveRewardList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unreceiverewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool seasonEnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seasonend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCReceiveGradeReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCReceiveGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_receiverewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_receiverewardlist(i), target, stream);
  }

  // repeated .PlaneWar.ReceiveReward unReceiveRewardList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unreceiverewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_unreceiverewardlist(i), target, stream);
  }

  // bool seasonEnd = 3;
  if (this->seasonend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_seasonend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCReceiveGradeReward)
  return target;
}

size_t SCReceiveGradeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCReceiveGradeReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
  total_size += 1UL * this->_internal_receiverewardlist_size();
  for (const auto& msg : this->receiverewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.ReceiveReward unReceiveRewardList = 2;
  total_size += 1UL * this->_internal_unreceiverewardlist_size();
  for (const auto& msg : this->unreceiverewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool seasonEnd = 3;
  if (this->seasonend() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCReceiveGradeReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCReceiveGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCReceiveGradeReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCReceiveGradeReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCReceiveGradeReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCReceiveGradeReward)
    MergeFrom(*source);
  }
}

void SCReceiveGradeReward::MergeFrom(const SCReceiveGradeReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCReceiveGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiverewardlist_.MergeFrom(from.receiverewardlist_);
  unreceiverewardlist_.MergeFrom(from.unreceiverewardlist_);
  if (from.seasonend() != 0) {
    _internal_set_seasonend(from._internal_seasonend());
  }
}

void SCReceiveGradeReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCReceiveGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCReceiveGradeReward::CopyFrom(const SCReceiveGradeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCReceiveGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCReceiveGradeReward::IsInitialized() const {
  return true;
}

void SCReceiveGradeReward::InternalSwap(SCReceiveGradeReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receiverewardlist_.InternalSwap(&other->receiverewardlist_);
  unreceiverewardlist_.InternalSwap(&other->unreceiverewardlist_);
  swap(seasonend_, other->seasonend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCReceiveGradeReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GradeRewardDetail::_Internal {
 public:
  static const ::PlaneWar::ReceiveReward& rewardinfo(const GradeRewardDetail* msg);
};

const ::PlaneWar::ReceiveReward&
GradeRewardDetail::_Internal::rewardinfo(const GradeRewardDetail* msg) {
  return *msg->rewardinfo_;
}
GradeRewardDetail::GradeRewardDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GradeRewardDetail)
}
GradeRewardDetail::GradeRewardDetail(const GradeRewardDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rewardinfo()) {
    rewardinfo_ = new ::PlaneWar::ReceiveReward(*from.rewardinfo_);
  } else {
    rewardinfo_ = nullptr;
  }
  ::memcpy(&reach_, &from.reach_,
    static_cast<size_t>(reinterpret_cast<char*>(&receive_) -
    reinterpret_cast<char*>(&reach_)) + sizeof(receive_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GradeRewardDetail)
}

void GradeRewardDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GradeRewardDetail_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rewardinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&receive_) -
      reinterpret_cast<char*>(&rewardinfo_)) + sizeof(receive_));
}

GradeRewardDetail::~GradeRewardDetail() {
  // @@protoc_insertion_point(destructor:PlaneWar.GradeRewardDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradeRewardDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rewardinfo_;
}

void GradeRewardDetail::ArenaDtor(void* object) {
  GradeRewardDetail* _this = reinterpret_cast< GradeRewardDetail* >(object);
  (void)_this;
}
void GradeRewardDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradeRewardDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradeRewardDetail& GradeRewardDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradeRewardDetail_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GradeRewardDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GradeRewardDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rewardinfo_ != nullptr) {
    delete rewardinfo_;
  }
  rewardinfo_ = nullptr;
  ::memset(&reach_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receive_) -
      reinterpret_cast<char*>(&reach_)) + sizeof(receive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradeRewardDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.ReceiveReward rewardInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewardinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reach = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool receive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradeRewardDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GradeRewardDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.ReceiveReward rewardInfo = 1;
  if (this->has_rewardinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rewardinfo(this), target, stream);
  }

  // bool reach = 2;
  if (this->reach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reach(), target);
  }

  // bool receive = 3;
  if (this->receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_receive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GradeRewardDetail)
  return target;
}

size_t GradeRewardDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GradeRewardDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.ReceiveReward rewardInfo = 1;
  if (this->has_rewardinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewardinfo_);
  }

  // bool reach = 2;
  if (this->reach() != 0) {
    total_size += 1 + 1;
  }

  // bool receive = 3;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradeRewardDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GradeRewardDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const GradeRewardDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradeRewardDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GradeRewardDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GradeRewardDetail)
    MergeFrom(*source);
  }
}

void GradeRewardDetail::MergeFrom(const GradeRewardDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GradeRewardDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rewardinfo()) {
    _internal_mutable_rewardinfo()->::PlaneWar::ReceiveReward::MergeFrom(from._internal_rewardinfo());
  }
  if (from.reach() != 0) {
    _internal_set_reach(from._internal_reach());
  }
  if (from.receive() != 0) {
    _internal_set_receive(from._internal_receive());
  }
}

void GradeRewardDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GradeRewardDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeRewardDetail::CopyFrom(const GradeRewardDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GradeRewardDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeRewardDetail::IsInitialized() const {
  return true;
}

void GradeRewardDetail::InternalSwap(GradeRewardDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradeRewardDetail, receive_)
      + sizeof(GradeRewardDetail::receive_)
      - PROTOBUF_FIELD_OFFSET(GradeRewardDetail, rewardinfo_)>(
          reinterpret_cast<char*>(&rewardinfo_),
          reinterpret_cast<char*>(&other->rewardinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GradeRewardDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GradeRewardInfo::_Internal {
 public:
};

GradeRewardInfo::GradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commrewardlist_(arena),
  advancerewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GradeRewardInfo)
}
GradeRewardInfo::GradeRewardInfo(const GradeRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commrewardlist_(from.commrewardlist_),
      advancerewardlist_(from.advancerewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rankname().empty()) {
    rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rankname(), 
      GetArena());
  }
  first_ = from.first_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GradeRewardInfo)
}

void GradeRewardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GradeRewardInfo_PlaneWar_2eproto.base);
  rankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_ = false;
}

GradeRewardInfo::~GradeRewardInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.GradeRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradeRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rankname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GradeRewardInfo::ArenaDtor(void* object) {
  GradeRewardInfo* _this = reinterpret_cast< GradeRewardInfo* >(object);
  (void)_this;
}
void GradeRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradeRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradeRewardInfo& GradeRewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradeRewardInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GradeRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commrewardlist_.Clear();
  advancerewardlist_.Clear();
  rankname_.ClearToEmpty();
  first_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradeRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rankName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rankname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GradeRewardInfo.rankName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.GradeRewardDetail commRewardList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commrewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.GradeRewardDetail advanceRewardList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_advancerewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool first = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradeRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rankName = 1;
  if (this->rankname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rankname().data(), static_cast<int>(this->_internal_rankname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GradeRewardInfo.rankName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rankname(), target);
  }

  // repeated .PlaneWar.GradeRewardDetail commRewardList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commrewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_commrewardlist(i), target, stream);
  }

  // repeated .PlaneWar.GradeRewardDetail advanceRewardList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_advancerewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_advancerewardlist(i), target, stream);
  }

  // bool first = 4;
  if (this->first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_first(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GradeRewardInfo)
  return target;
}

size_t GradeRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GradeRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRewardDetail commRewardList = 2;
  total_size += 1UL * this->_internal_commrewardlist_size();
  for (const auto& msg : this->commrewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlaneWar.GradeRewardDetail advanceRewardList = 3;
  total_size += 1UL * this->_internal_advancerewardlist_size();
  for (const auto& msg : this->advancerewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string rankName = 1;
  if (this->rankname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rankname());
  }

  // bool first = 4;
  if (this->first() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradeRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GradeRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradeRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GradeRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GradeRewardInfo)
    MergeFrom(*source);
  }
}

void GradeRewardInfo::MergeFrom(const GradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commrewardlist_.MergeFrom(from.commrewardlist_);
  advancerewardlist_.MergeFrom(from.advancerewardlist_);
  if (from.rankname().size() > 0) {
    _internal_set_rankname(from._internal_rankname());
  }
  if (from.first() != 0) {
    _internal_set_first(from._internal_first());
  }
}

void GradeRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeRewardInfo::CopyFrom(const GradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeRewardInfo::IsInitialized() const {
  return true;
}

void GradeRewardInfo::InternalSwap(GradeRewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  commrewardlist_.InternalSwap(&other->commrewardlist_);
  advancerewardlist_.InternalSwap(&other->advancerewardlist_);
  rankname_.Swap(&other->rankname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(first_, other->first_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GradeRewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GradeRankInfo::_Internal {
 public:
};

GradeRankInfo::GradeRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.GradeRankInfo)
}
GradeRankInfo::GradeRankInfo(const GradeRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rankname().empty()) {
    rankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rankname(), 
      GetArena());
  }
  historyrankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_historyrankname().empty()) {
    historyrankname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_historyrankname(), 
      GetArena());
  }
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playername().empty()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArena());
  }
  ::memcpy(&currentrank_, &from.currentrank_,
    static_cast<size_t>(reinterpret_cast<char*>(&isself_) -
    reinterpret_cast<char*>(&currentrank_)) + sizeof(isself_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.GradeRankInfo)
}

void GradeRankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GradeRankInfo_PlaneWar_2eproto.base);
  rankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  historyrankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&currentrank_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isself_) -
      reinterpret_cast<char*>(&currentrank_)) + sizeof(isself_));
}

GradeRankInfo::~GradeRankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.GradeRankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradeRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rankname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  historyrankname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GradeRankInfo::ArenaDtor(void* object) {
  GradeRankInfo* _this = reinterpret_cast< GradeRankInfo* >(object);
  (void)_this;
}
void GradeRankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradeRankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradeRankInfo& GradeRankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradeRankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void GradeRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.GradeRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankname_.ClearToEmpty();
  historyrankname_.ClearToEmpty();
  playername_.ClearToEmpty();
  ::memset(&currentrank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isself_) -
      reinterpret_cast<char*>(&currentrank_)) + sizeof(isself_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradeRankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 currentRank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          currentrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rankName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rankname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GradeRankInfo.rankName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 historyRank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          historyrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string historyRankName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_historyrankname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GradeRankInfo.historyRankName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kingTag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          kingtag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float currentExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          currentexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nextExp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          nextexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float extraExp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          extraexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string playerName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.GradeRankInfo.playerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 availableGift = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          availablegift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLast = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          islast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSelf = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          isself_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradeRankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.GradeRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currentRank = 1;
  if (this->currentrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_currentrank(), target);
  }

  // int32 star = 2;
  if (this->star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_star(), target);
  }

  // string rankName = 3;
  if (this->rankname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rankname().data(), static_cast<int>(this->_internal_rankname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GradeRankInfo.rankName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rankname(), target);
  }

  // int32 historyRank = 4;
  if (this->historyrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_historyrank(), target);
  }

  // string historyRankName = 5;
  if (this->historyrankname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_historyrankname().data(), static_cast<int>(this->_internal_historyrankname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GradeRankInfo.historyRankName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_historyrankname(), target);
  }

  // int32 kingTag = 6;
  if (this->kingtag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_kingtag(), target);
  }

  // float currentExp = 7;
  if (!(this->currentexp() <= 0 && this->currentexp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_currentexp(), target);
  }

  // float nextExp = 8;
  if (!(this->nextexp() <= 0 && this->nextexp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_nextexp(), target);
  }

  // float extraExp = 9;
  if (!(this->extraexp() <= 0 && this->extraexp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_extraexp(), target);
  }

  // string playerName = 10;
  if (this->playername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.GradeRankInfo.playerName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_playername(), target);
  }

  // int32 availableGift = 11;
  if (this->availablegift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_availablegift(), target);
  }

  // bool isLast = 12;
  if (this->islast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_islast(), target);
  }

  // bool isSelf = 13;
  if (this->isself() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_isself(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.GradeRankInfo)
  return target;
}

size_t GradeRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.GradeRankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rankName = 3;
  if (this->rankname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rankname());
  }

  // string historyRankName = 5;
  if (this->historyrankname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_historyrankname());
  }

  // string playerName = 10;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // int32 currentRank = 1;
  if (this->currentrank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentrank());
  }

  // int32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star());
  }

  // int32 historyRank = 4;
  if (this->historyrank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_historyrank());
  }

  // int32 kingTag = 6;
  if (this->kingtag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kingtag());
  }

  // float currentExp = 7;
  if (!(this->currentexp() <= 0 && this->currentexp() >= 0)) {
    total_size += 1 + 4;
  }

  // float nextExp = 8;
  if (!(this->nextexp() <= 0 && this->nextexp() >= 0)) {
    total_size += 1 + 4;
  }

  // float extraExp = 9;
  if (!(this->extraexp() <= 0 && this->extraexp() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 availableGift = 11;
  if (this->availablegift() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_availablegift());
  }

  // bool isLast = 12;
  if (this->islast() != 0) {
    total_size += 1 + 1;
  }

  // bool isSelf = 13;
  if (this->isself() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradeRankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.GradeRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GradeRankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradeRankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.GradeRankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.GradeRankInfo)
    MergeFrom(*source);
  }
}

void GradeRankInfo::MergeFrom(const GradeRankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.GradeRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rankname().size() > 0) {
    _internal_set_rankname(from._internal_rankname());
  }
  if (from.historyrankname().size() > 0) {
    _internal_set_historyrankname(from._internal_historyrankname());
  }
  if (from.playername().size() > 0) {
    _internal_set_playername(from._internal_playername());
  }
  if (from.currentrank() != 0) {
    _internal_set_currentrank(from._internal_currentrank());
  }
  if (from.star() != 0) {
    _internal_set_star(from._internal_star());
  }
  if (from.historyrank() != 0) {
    _internal_set_historyrank(from._internal_historyrank());
  }
  if (from.kingtag() != 0) {
    _internal_set_kingtag(from._internal_kingtag());
  }
  if (!(from.currentexp() <= 0 && from.currentexp() >= 0)) {
    _internal_set_currentexp(from._internal_currentexp());
  }
  if (!(from.nextexp() <= 0 && from.nextexp() >= 0)) {
    _internal_set_nextexp(from._internal_nextexp());
  }
  if (!(from.extraexp() <= 0 && from.extraexp() >= 0)) {
    _internal_set_extraexp(from._internal_extraexp());
  }
  if (from.availablegift() != 0) {
    _internal_set_availablegift(from._internal_availablegift());
  }
  if (from.islast() != 0) {
    _internal_set_islast(from._internal_islast());
  }
  if (from.isself() != 0) {
    _internal_set_isself(from._internal_isself());
  }
}

void GradeRankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.GradeRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeRankInfo::CopyFrom(const GradeRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.GradeRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeRankInfo::IsInitialized() const {
  return true;
}

void GradeRankInfo::InternalSwap(GradeRankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rankname_.Swap(&other->rankname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  historyrankname_.Swap(&other->historyrankname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradeRankInfo, isself_)
      + sizeof(GradeRankInfo::isself_)
      - PROTOBUF_FIELD_OFFSET(GradeRankInfo, currentrank_)>(
          reinterpret_cast<char*>(&currentrank_),
          reinterpret_cast<char*>(&other->currentrank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GradeRankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetTableUserInfo::_Internal {
 public:
};

CSGetTableUserInfo::CSGetTableUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetTableUserInfo)
}
CSGetTableUserInfo::CSGetTableUserInfo(const CSGetTableUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chairid_ = from.chairid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetTableUserInfo)
}

void CSGetTableUserInfo::SharedCtor() {
  chairid_ = 0;
}

CSGetTableUserInfo::~CSGetTableUserInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetTableUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetTableUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetTableUserInfo::ArenaDtor(void* object) {
  CSGetTableUserInfo* _this = reinterpret_cast< CSGetTableUserInfo* >(object);
  (void)_this;
}
void CSGetTableUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetTableUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetTableUserInfo& CSGetTableUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetTableUserInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetTableUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetTableUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chairid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetTableUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetTableUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetTableUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chairId = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetTableUserInfo)
  return target;
}

size_t CSGetTableUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetTableUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chairId = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetTableUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetTableUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetTableUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetTableUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetTableUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetTableUserInfo)
    MergeFrom(*source);
  }
}

void CSGetTableUserInfo::MergeFrom(const CSGetTableUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetTableUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
}

void CSGetTableUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetTableUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTableUserInfo::CopyFrom(const CSGetTableUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetTableUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTableUserInfo::IsInitialized() const {
  return true;
}

void CSGetTableUserInfo::InternalSwap(CSGetTableUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chairid_, other->chairid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetTableUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetTableUserInfo::_Internal {
 public:
  static const ::PlaneWar::PlayerInfo& playerinfo(const SCGetTableUserInfo* msg);
  static const ::PlaneWar::GradeRankInfo& graderankinfo(const SCGetTableUserInfo* msg);
};

const ::PlaneWar::PlayerInfo&
SCGetTableUserInfo::_Internal::playerinfo(const SCGetTableUserInfo* msg) {
  return *msg->playerinfo_;
}
const ::PlaneWar::GradeRankInfo&
SCGetTableUserInfo::_Internal::graderankinfo(const SCGetTableUserInfo* msg) {
  return *msg->graderankinfo_;
}
SCGetTableUserInfo::SCGetTableUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetTableUserInfo)
}
SCGetTableUserInfo::SCGetTableUserInfo(const SCGetTableUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::PlaneWar::PlayerInfo(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  if (from._internal_has_graderankinfo()) {
    graderankinfo_ = new ::PlaneWar::GradeRankInfo(*from.graderankinfo_);
  } else {
    graderankinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetTableUserInfo)
}

void SCGetTableUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetTableUserInfo_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&graderankinfo_) -
      reinterpret_cast<char*>(&playerinfo_)) + sizeof(graderankinfo_));
}

SCGetTableUserInfo::~SCGetTableUserInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetTableUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetTableUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerinfo_;
  if (this != internal_default_instance()) delete graderankinfo_;
}

void SCGetTableUserInfo::ArenaDtor(void* object) {
  SCGetTableUserInfo* _this = reinterpret_cast< SCGetTableUserInfo* >(object);
  (void)_this;
}
void SCGetTableUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetTableUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetTableUserInfo& SCGetTableUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetTableUserInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetTableUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetTableUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  if (GetArena() == nullptr && graderankinfo_ != nullptr) {
    delete graderankinfo_;
  }
  graderankinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetTableUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.PlayerInfo playerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GradeRankInfo gradeRankInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graderankinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetTableUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetTableUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.PlayerInfo playerInfo = 1;
  if (this->has_playerinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerinfo(this), target, stream);
  }

  // .PlaneWar.GradeRankInfo gradeRankInfo = 2;
  if (this->has_graderankinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graderankinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetTableUserInfo)
  return target;
}

size_t SCGetTableUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetTableUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.PlayerInfo playerInfo = 1;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  // .PlaneWar.GradeRankInfo gradeRankInfo = 2;
  if (this->has_graderankinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graderankinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetTableUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetTableUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetTableUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetTableUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetTableUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetTableUserInfo)
    MergeFrom(*source);
  }
}

void SCGetTableUserInfo::MergeFrom(const SCGetTableUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetTableUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerinfo()) {
    _internal_mutable_playerinfo()->::PlaneWar::PlayerInfo::MergeFrom(from._internal_playerinfo());
  }
  if (from.has_graderankinfo()) {
    _internal_mutable_graderankinfo()->::PlaneWar::GradeRankInfo::MergeFrom(from._internal_graderankinfo());
  }
}

void SCGetTableUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetTableUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetTableUserInfo::CopyFrom(const SCGetTableUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetTableUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetTableUserInfo::IsInitialized() const {
  return true;
}

void SCGetTableUserInfo::InternalSwap(SCGetTableUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetTableUserInfo, graderankinfo_)
      + sizeof(SCGetTableUserInfo::graderankinfo_)
      - PROTOBUF_FIELD_OFFSET(SCGetTableUserInfo, playerinfo_)>(
          reinterpret_cast<char*>(&playerinfo_),
          reinterpret_cast<char*>(&other->playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetTableUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetGradeRewardInfo::_Internal {
 public:
};

CSGetGradeRewardInfo::CSGetGradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetGradeRewardInfo)
}
CSGetGradeRewardInfo::CSGetGradeRewardInfo(const CSGetGradeRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startidx_, &from.startidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&endidx_) -
    reinterpret_cast<char*>(&startidx_)) + sizeof(endidx_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetGradeRewardInfo)
}

void CSGetGradeRewardInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&startidx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&endidx_) -
      reinterpret_cast<char*>(&startidx_)) + sizeof(endidx_));
}

CSGetGradeRewardInfo::~CSGetGradeRewardInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetGradeRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetGradeRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetGradeRewardInfo::ArenaDtor(void* object) {
  CSGetGradeRewardInfo* _this = reinterpret_cast< CSGetGradeRewardInfo* >(object);
  (void)_this;
}
void CSGetGradeRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetGradeRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetGradeRewardInfo& CSGetGradeRewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetGradeRewardInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetGradeRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetGradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endidx_) -
      reinterpret_cast<char*>(&startidx_)) + sizeof(endidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetGradeRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 startIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetGradeRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetGradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startIdx = 1;
  if (this->startidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_startidx(), target);
  }

  // int32 endIdx = 2;
  if (this->endidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_endidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetGradeRewardInfo)
  return target;
}

size_t CSGetGradeRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetGradeRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 startIdx = 1;
  if (this->startidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_startidx());
  }

  // int32 endIdx = 2;
  if (this->endidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetGradeRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetGradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetGradeRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetGradeRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetGradeRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetGradeRewardInfo)
    MergeFrom(*source);
  }
}

void CSGetGradeRewardInfo::MergeFrom(const CSGetGradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetGradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startidx() != 0) {
    _internal_set_startidx(from._internal_startidx());
  }
  if (from.endidx() != 0) {
    _internal_set_endidx(from._internal_endidx());
  }
}

void CSGetGradeRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetGradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetGradeRewardInfo::CopyFrom(const CSGetGradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetGradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetGradeRewardInfo::IsInitialized() const {
  return true;
}

void CSGetGradeRewardInfo::InternalSwap(CSGetGradeRewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGetGradeRewardInfo, endidx_)
      + sizeof(CSGetGradeRewardInfo::endidx_)
      - PROTOBUF_FIELD_OFFSET(CSGetGradeRewardInfo, startidx_)>(
          reinterpret_cast<char*>(&startidx_),
          reinterpret_cast<char*>(&other->startidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetGradeRewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetGradeRewardInfo::_Internal {
 public:
};

SCGetGradeRewardInfo::SCGetGradeRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graderewardinfolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetGradeRewardInfo)
}
SCGetGradeRewardInfo::SCGetGradeRewardInfo(const SCGetGradeRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graderewardinfolist_(from.graderewardinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetGradeRewardInfo)
}

void SCGetGradeRewardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetGradeRewardInfo_PlaneWar_2eproto.base);
}

SCGetGradeRewardInfo::~SCGetGradeRewardInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetGradeRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetGradeRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetGradeRewardInfo::ArenaDtor(void* object) {
  SCGetGradeRewardInfo* _this = reinterpret_cast< SCGetGradeRewardInfo* >(object);
  (void)_this;
}
void SCGetGradeRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetGradeRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetGradeRewardInfo& SCGetGradeRewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetGradeRewardInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetGradeRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetGradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graderewardinfolist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetGradeRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GradeRewardInfo gradeRewardInfoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graderewardinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetGradeRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetGradeRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRewardInfo gradeRewardInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graderewardinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_graderewardinfolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetGradeRewardInfo)
  return target;
}

size_t SCGetGradeRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetGradeRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRewardInfo gradeRewardInfoList = 1;
  total_size += 1UL * this->_internal_graderewardinfolist_size();
  for (const auto& msg : this->graderewardinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetGradeRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetGradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetGradeRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetGradeRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetGradeRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetGradeRewardInfo)
    MergeFrom(*source);
  }
}

void SCGetGradeRewardInfo::MergeFrom(const SCGetGradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetGradeRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graderewardinfolist_.MergeFrom(from.graderewardinfolist_);
}

void SCGetGradeRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetGradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetGradeRewardInfo::CopyFrom(const SCGetGradeRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetGradeRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetGradeRewardInfo::IsInitialized() const {
  return true;
}

void SCGetGradeRewardInfo::InternalSwap(SCGetGradeRewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graderewardinfolist_.InternalSwap(&other->graderewardinfolist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetGradeRewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetGradeRankInfo::_Internal {
 public:
};

CSGetGradeRankInfo::CSGetGradeRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetGradeRankInfo)
}
CSGetGradeRankInfo::CSGetGradeRankInfo(const CSGetGradeRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetGradeRankInfo)
}

void CSGetGradeRankInfo::SharedCtor() {
}

CSGetGradeRankInfo::~CSGetGradeRankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetGradeRankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetGradeRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetGradeRankInfo::ArenaDtor(void* object) {
  CSGetGradeRankInfo* _this = reinterpret_cast< CSGetGradeRankInfo* >(object);
  (void)_this;
}
void CSGetGradeRankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetGradeRankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetGradeRankInfo& CSGetGradeRankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetGradeRankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetGradeRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetGradeRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetGradeRankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetGradeRankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetGradeRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetGradeRankInfo)
  return target;
}

size_t CSGetGradeRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetGradeRankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetGradeRankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetGradeRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetGradeRankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetGradeRankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetGradeRankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetGradeRankInfo)
    MergeFrom(*source);
  }
}

void CSGetGradeRankInfo::MergeFrom(const CSGetGradeRankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetGradeRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetGradeRankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetGradeRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetGradeRankInfo::CopyFrom(const CSGetGradeRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetGradeRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetGradeRankInfo::IsInitialized() const {
  return true;
}

void CSGetGradeRankInfo::InternalSwap(CSGetGradeRankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetGradeRankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetGradeRankInfo::_Internal {
 public:
  static const ::PlaneWar::GradeRankInfo& graderankinfo(const SCGetGradeRankInfo* msg);
};

const ::PlaneWar::GradeRankInfo&
SCGetGradeRankInfo::_Internal::graderankinfo(const SCGetGradeRankInfo* msg) {
  return *msg->graderankinfo_;
}
SCGetGradeRankInfo::SCGetGradeRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetGradeRankInfo)
}
SCGetGradeRankInfo::SCGetGradeRankInfo(const SCGetGradeRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graderankinfo()) {
    graderankinfo_ = new ::PlaneWar::GradeRankInfo(*from.graderankinfo_);
  } else {
    graderankinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetGradeRankInfo)
}

void SCGetGradeRankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetGradeRankInfo_PlaneWar_2eproto.base);
  graderankinfo_ = nullptr;
}

SCGetGradeRankInfo::~SCGetGradeRankInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetGradeRankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetGradeRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graderankinfo_;
}

void SCGetGradeRankInfo::ArenaDtor(void* object) {
  SCGetGradeRankInfo* _this = reinterpret_cast< SCGetGradeRankInfo* >(object);
  (void)_this;
}
void SCGetGradeRankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetGradeRankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetGradeRankInfo& SCGetGradeRankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetGradeRankInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetGradeRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetGradeRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && graderankinfo_ != nullptr) {
    delete graderankinfo_;
  }
  graderankinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetGradeRankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graderankinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetGradeRankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetGradeRankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
  if (this->has_graderankinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::graderankinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetGradeRankInfo)
  return target;
}

size_t SCGetGradeRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetGradeRankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
  if (this->has_graderankinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graderankinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetGradeRankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetGradeRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetGradeRankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetGradeRankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetGradeRankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetGradeRankInfo)
    MergeFrom(*source);
  }
}

void SCGetGradeRankInfo::MergeFrom(const SCGetGradeRankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetGradeRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graderankinfo()) {
    _internal_mutable_graderankinfo()->::PlaneWar::GradeRankInfo::MergeFrom(from._internal_graderankinfo());
  }
}

void SCGetGradeRankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetGradeRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetGradeRankInfo::CopyFrom(const SCGetGradeRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetGradeRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetGradeRankInfo::IsInitialized() const {
  return true;
}

void SCGetGradeRankInfo::InternalSwap(SCGetGradeRankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(graderankinfo_, other->graderankinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetGradeRankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRankUpgrade::_Internal {
 public:
  static const ::PlaneWar::GradeRankInfo& graderankinfo(const SCRankUpgrade* msg);
};

const ::PlaneWar::GradeRankInfo&
SCRankUpgrade::_Internal::graderankinfo(const SCRankUpgrade* msg) {
  return *msg->graderankinfo_;
}
SCRankUpgrade::SCRankUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRankUpgrade)
}
SCRankUpgrade::SCRankUpgrade(const SCRankUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graderankinfo()) {
    graderankinfo_ = new ::PlaneWar::GradeRankInfo(*from.graderankinfo_);
  } else {
    graderankinfo_ = nullptr;
  }
  ::memcpy(&advance_, &from.advance_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
    reinterpret_cast<char*>(&advance_)) + sizeof(chair_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRankUpgrade)
}

void SCRankUpgrade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRankUpgrade_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&graderankinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&graderankinfo_)) + sizeof(chair_));
}

SCRankUpgrade::~SCRankUpgrade() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRankUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRankUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graderankinfo_;
}

void SCRankUpgrade::ArenaDtor(void* object) {
  SCRankUpgrade* _this = reinterpret_cast< SCRankUpgrade* >(object);
  (void)_this;
}
void SCRankUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRankUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRankUpgrade& SCRankUpgrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRankUpgrade_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRankUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRankUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && graderankinfo_ != nullptr) {
    delete graderankinfo_;
  }
  graderankinfo_ = nullptr;
  ::memset(&advance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) -
      reinterpret_cast<char*>(&advance_)) + sizeof(chair_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRankUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graderankinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          advance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRankUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRankUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
  if (this->has_graderankinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::graderankinfo(this), target, stream);
  }

  // bool advance = 2;
  if (this->advance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_advance(), target);
  }

  // int32 chair = 3;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRankUpgrade)
  return target;
}

size_t SCRankUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRankUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.GradeRankInfo gradeRankInfo = 1;
  if (this->has_graderankinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graderankinfo_);
  }

  // bool advance = 2;
  if (this->advance() != 0) {
    total_size += 1 + 1;
  }

  // int32 chair = 3;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRankUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRankUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRankUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRankUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRankUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRankUpgrade)
    MergeFrom(*source);
  }
}

void SCRankUpgrade::MergeFrom(const SCRankUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRankUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graderankinfo()) {
    _internal_mutable_graderankinfo()->::PlaneWar::GradeRankInfo::MergeFrom(from._internal_graderankinfo());
  }
  if (from.advance() != 0) {
    _internal_set_advance(from._internal_advance());
  }
  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
}

void SCRankUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRankUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRankUpgrade::CopyFrom(const SCRankUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRankUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRankUpgrade::IsInitialized() const {
  return true;
}

void SCRankUpgrade::InternalSwap(SCRankUpgrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRankUpgrade, chair_)
      + sizeof(SCRankUpgrade::chair_)
      - PROTOBUF_FIELD_OFFSET(SCRankUpgrade, graderankinfo_)>(
          reinterpret_cast<char*>(&graderankinfo_),
          reinterpret_cast<char*>(&other->graderankinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRankUpgrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSRankSeasonStatus::_Internal {
 public:
};

CSRankSeasonStatus::CSRankSeasonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSRankSeasonStatus)
}
CSRankSeasonStatus::CSRankSeasonStatus(const CSRankSeasonStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSRankSeasonStatus)
}

void CSRankSeasonStatus::SharedCtor() {
}

CSRankSeasonStatus::~CSRankSeasonStatus() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSRankSeasonStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSRankSeasonStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSRankSeasonStatus::ArenaDtor(void* object) {
  CSRankSeasonStatus* _this = reinterpret_cast< CSRankSeasonStatus* >(object);
  (void)_this;
}
void CSRankSeasonStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSRankSeasonStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSRankSeasonStatus& CSRankSeasonStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSRankSeasonStatus_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSRankSeasonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSRankSeasonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRankSeasonStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSRankSeasonStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSRankSeasonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSRankSeasonStatus)
  return target;
}

size_t CSRankSeasonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSRankSeasonStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSRankSeasonStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSRankSeasonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSRankSeasonStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSRankSeasonStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSRankSeasonStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSRankSeasonStatus)
    MergeFrom(*source);
  }
}

void CSRankSeasonStatus::MergeFrom(const CSRankSeasonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSRankSeasonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSRankSeasonStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSRankSeasonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRankSeasonStatus::CopyFrom(const CSRankSeasonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSRankSeasonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankSeasonStatus::IsInitialized() const {
  return true;
}

void CSRankSeasonStatus::InternalSwap(CSRankSeasonStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRankSeasonStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCRankSeasonStatus::_Internal {
 public:
};

SCRankSeasonStatus::SCRankSeasonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCRankSeasonStatus)
}
SCRankSeasonStatus::SCRankSeasonStatus(const SCRankSeasonStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seasonname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seasonname().empty()) {
    seasonname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seasonname(), 
      GetArena());
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCRankSeasonStatus)
}

void SCRankSeasonStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCRankSeasonStatus_PlaneWar_2eproto.base);
  seasonname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(season_));
}

SCRankSeasonStatus::~SCRankSeasonStatus() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCRankSeasonStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCRankSeasonStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  seasonname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCRankSeasonStatus::ArenaDtor(void* object) {
  SCRankSeasonStatus* _this = reinterpret_cast< SCRankSeasonStatus* >(object);
  (void)_this;
}
void SCRankSeasonStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCRankSeasonStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCRankSeasonStatus& SCRankSeasonStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCRankSeasonStatus_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCRankSeasonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCRankSeasonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seasonname_.ClearToEmpty();
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(season_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCRankSeasonStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seasonName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_seasonname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.SCRankSeasonStatus.seasonName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 season = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCRankSeasonStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCRankSeasonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_starttime(), target);
  }

  // int32 endTime = 3;
  if (this->endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_endtime(), target);
  }

  // string seasonName = 4;
  if (this->seasonname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seasonname().data(), static_cast<int>(this->_internal_seasonname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.SCRankSeasonStatus.seasonName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_seasonname(), target);
  }

  // int32 season = 5;
  if (this->season() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_season(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCRankSeasonStatus)
  return target;
}

size_t SCRankSeasonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCRankSeasonStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string seasonName = 4;
  if (this->seasonname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seasonname());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 endTime = 3;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endtime());
  }

  // int32 season = 5;
  if (this->season() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_season());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCRankSeasonStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCRankSeasonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCRankSeasonStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCRankSeasonStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCRankSeasonStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCRankSeasonStatus)
    MergeFrom(*source);
  }
}

void SCRankSeasonStatus::MergeFrom(const SCRankSeasonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCRankSeasonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seasonname().size() > 0) {
    _internal_set_seasonname(from._internal_seasonname());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.season() != 0) {
    _internal_set_season(from._internal_season());
  }
}

void SCRankSeasonStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCRankSeasonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRankSeasonStatus::CopyFrom(const SCRankSeasonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCRankSeasonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRankSeasonStatus::IsInitialized() const {
  return true;
}

void SCRankSeasonStatus::InternalSwap(SCRankSeasonStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seasonname_.Swap(&other->seasonname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCRankSeasonStatus, season_)
      + sizeof(SCRankSeasonStatus::season_)
      - PROTOBUF_FIELD_OFFSET(SCRankSeasonStatus, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCRankSeasonStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncTime::_Internal {
 public:
};

SCSyncTime::SCSyncTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncTime)
}
SCSyncTime::SCSyncTime(const SCSyncTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncTime)
}

void SCSyncTime::SharedCtor() {
  time_ = 0;
}

SCSyncTime::~SCSyncTime() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncTime::ArenaDtor(void* object) {
  SCSyncTime* _this = reinterpret_cast< SCSyncTime* >(object);
  (void)_this;
}
void SCSyncTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncTime& SCSyncTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncTime_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncTime::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncTime)
  return target;
}

size_t SCSyncTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncTime)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncTime)
    MergeFrom(*source);
  }
}

void SCSyncTime::MergeFrom(const SCSyncTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void SCSyncTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncTime::CopyFrom(const SCSyncTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncTime::IsInitialized() const {
  return true;
}

void SCSyncTime::InternalSwap(SCSyncTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNoticePropsOverdue::_Internal {
 public:
};

SCNoticePropsOverdue::SCNoticePropsOverdue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCNoticePropsOverdue)
}
SCNoticePropsOverdue::SCNoticePropsOverdue(const SCNoticePropsOverdue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  propid_ = from.propid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCNoticePropsOverdue)
}

void SCNoticePropsOverdue::SharedCtor() {
  propid_ = 0;
}

SCNoticePropsOverdue::~SCNoticePropsOverdue() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCNoticePropsOverdue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNoticePropsOverdue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNoticePropsOverdue::ArenaDtor(void* object) {
  SCNoticePropsOverdue* _this = reinterpret_cast< SCNoticePropsOverdue* >(object);
  (void)_this;
}
void SCNoticePropsOverdue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNoticePropsOverdue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNoticePropsOverdue& SCNoticePropsOverdue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNoticePropsOverdue_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCNoticePropsOverdue::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCNoticePropsOverdue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNoticePropsOverdue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNoticePropsOverdue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCNoticePropsOverdue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCNoticePropsOverdue)
  return target;
}

size_t SCNoticePropsOverdue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCNoticePropsOverdue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNoticePropsOverdue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCNoticePropsOverdue)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNoticePropsOverdue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNoticePropsOverdue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCNoticePropsOverdue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCNoticePropsOverdue)
    MergeFrom(*source);
  }
}

void SCNoticePropsOverdue::MergeFrom(const SCNoticePropsOverdue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCNoticePropsOverdue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
}

void SCNoticePropsOverdue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCNoticePropsOverdue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNoticePropsOverdue::CopyFrom(const SCNoticePropsOverdue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCNoticePropsOverdue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNoticePropsOverdue::IsInitialized() const {
  return true;
}

void SCNoticePropsOverdue::InternalSwap(SCNoticePropsOverdue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(propid_, other->propid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNoticePropsOverdue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PurchaseResult::_Internal {
 public:
};

PurchaseResult::PurchaseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PurchaseResult)
}
PurchaseResult::PurchaseResult(const PurchaseResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wareid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wareid().empty()) {
    wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wareid(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PurchaseResult)
}

void PurchaseResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PurchaseResult_PlaneWar_2eproto.base);
  wareid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

PurchaseResult::~PurchaseResult() {
  // @@protoc_insertion_point(destructor:PlaneWar.PurchaseResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurchaseResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wareid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PurchaseResult::ArenaDtor(void* object) {
  PurchaseResult* _this = reinterpret_cast< PurchaseResult* >(object);
  (void)_this;
}
void PurchaseResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurchaseResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurchaseResult& PurchaseResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurchaseResult_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PurchaseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PurchaseResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wareid_.ClearToEmpty();
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurchaseResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string wareId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_wareid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PurchaseResult.wareId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurchaseResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PurchaseResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string wareId = 1;
  if (this->wareid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wareid().data(), static_cast<int>(this->_internal_wareid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PurchaseResult.wareId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_wareid(), target);
  }

  // bool status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PurchaseResult)
  return target;
}

size_t PurchaseResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PurchaseResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string wareId = 1;
  if (this->wareid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wareid());
  }

  // bool status = 2;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurchaseResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PurchaseResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PurchaseResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurchaseResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PurchaseResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PurchaseResult)
    MergeFrom(*source);
  }
}

void PurchaseResult::MergeFrom(const PurchaseResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PurchaseResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wareid().size() > 0) {
    _internal_set_wareid(from._internal_wareid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PurchaseResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PurchaseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseResult::CopyFrom(const PurchaseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PurchaseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseResult::IsInitialized() const {
  return true;
}

void PurchaseResult::InternalSwap(PurchaseResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wareid_.Swap(&other->wareid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PurchaseResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSQueryPackagePurchase::_Internal {
 public:
};

CSQueryPackagePurchase::CSQueryPackagePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wareidlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSQueryPackagePurchase)
}
CSQueryPackagePurchase::CSQueryPackagePurchase(const CSQueryPackagePurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wareidlist_(from.wareidlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSQueryPackagePurchase)
}

void CSQueryPackagePurchase::SharedCtor() {
}

CSQueryPackagePurchase::~CSQueryPackagePurchase() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSQueryPackagePurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSQueryPackagePurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSQueryPackagePurchase::ArenaDtor(void* object) {
  CSQueryPackagePurchase* _this = reinterpret_cast< CSQueryPackagePurchase* >(object);
  (void)_this;
}
void CSQueryPackagePurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSQueryPackagePurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSQueryPackagePurchase& CSQueryPackagePurchase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSQueryPackagePurchase_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSQueryPackagePurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSQueryPackagePurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wareidlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSQueryPackagePurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 wareIdList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wareidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_wareidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSQueryPackagePurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSQueryPackagePurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 wareIdList = 1;
  {
    int byte_size = _wareidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_wareidlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSQueryPackagePurchase)
  return target;
}

size_t CSQueryPackagePurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSQueryPackagePurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 wareIdList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->wareidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _wareidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSQueryPackagePurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSQueryPackagePurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CSQueryPackagePurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSQueryPackagePurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSQueryPackagePurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSQueryPackagePurchase)
    MergeFrom(*source);
  }
}

void CSQueryPackagePurchase::MergeFrom(const CSQueryPackagePurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSQueryPackagePurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wareidlist_.MergeFrom(from.wareidlist_);
}

void CSQueryPackagePurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSQueryPackagePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryPackagePurchase::CopyFrom(const CSQueryPackagePurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSQueryPackagePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryPackagePurchase::IsInitialized() const {
  return true;
}

void CSQueryPackagePurchase::InternalSwap(CSQueryPackagePurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wareidlist_.InternalSwap(&other->wareidlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSQueryPackagePurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCQueryPackagePurchase::_Internal {
 public:
};

SCQueryPackagePurchase::SCQueryPackagePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  purchasereslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCQueryPackagePurchase)
}
SCQueryPackagePurchase::SCQueryPackagePurchase(const SCQueryPackagePurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      purchasereslist_(from.purchasereslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCQueryPackagePurchase)
}

void SCQueryPackagePurchase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCQueryPackagePurchase_PlaneWar_2eproto.base);
}

SCQueryPackagePurchase::~SCQueryPackagePurchase() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCQueryPackagePurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCQueryPackagePurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCQueryPackagePurchase::ArenaDtor(void* object) {
  SCQueryPackagePurchase* _this = reinterpret_cast< SCQueryPackagePurchase* >(object);
  (void)_this;
}
void SCQueryPackagePurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCQueryPackagePurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCQueryPackagePurchase& SCQueryPackagePurchase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCQueryPackagePurchase_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCQueryPackagePurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCQueryPackagePurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purchasereslist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCQueryPackagePurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.PurchaseResult purchaseResList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_purchasereslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCQueryPackagePurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCQueryPackagePurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.PurchaseResult purchaseResList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_purchasereslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_purchasereslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCQueryPackagePurchase)
  return target;
}

size_t SCQueryPackagePurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCQueryPackagePurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PurchaseResult purchaseResList = 1;
  total_size += 1UL * this->_internal_purchasereslist_size();
  for (const auto& msg : this->purchasereslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCQueryPackagePurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCQueryPackagePurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const SCQueryPackagePurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCQueryPackagePurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCQueryPackagePurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCQueryPackagePurchase)
    MergeFrom(*source);
  }
}

void SCQueryPackagePurchase::MergeFrom(const SCQueryPackagePurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCQueryPackagePurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  purchasereslist_.MergeFrom(from.purchasereslist_);
}

void SCQueryPackagePurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCQueryPackagePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCQueryPackagePurchase::CopyFrom(const SCQueryPackagePurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCQueryPackagePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCQueryPackagePurchase::IsInitialized() const {
  return true;
}

void SCQueryPackagePurchase::InternalSwap(SCQueryPackagePurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  purchasereslist_.InternalSwap(&other->purchasereslist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCQueryPackagePurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PropsInfo::_Internal {
 public:
};

PropsInfo::PropsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PropsInfo)
}
PropsInfo::PropsInfo(const PropsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&propid_, &from.propid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&propid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PropsInfo)
}

void PropsInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&propid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(num_));
}

PropsInfo::~PropsInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.PropsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropsInfo::ArenaDtor(void* object) {
  PropsInfo* _this = reinterpret_cast< PropsInfo* >(object);
  (void)_this;
}
void PropsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropsInfo& PropsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropsInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PropsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PropsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&propid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&propid_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PropsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PropsInfo)
  return target;
}

size_t PropsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PropsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PropsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PropsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PropsInfo)
    MergeFrom(*source);
  }
}

void PropsInfo::MergeFrom(const PropsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PropsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void PropsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsInfo::CopyFrom(const PropsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PropsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsInfo::IsInitialized() const {
  return true;
}

void PropsInfo::InternalSwap(PropsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropsInfo, num_)
      + sizeof(PropsInfo::num_)
      - PROTOBUF_FIELD_OFFSET(PropsInfo, propid_)>(
          reinterpret_cast<char*>(&propid_),
          reinterpret_cast<char*>(&other->propid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGamePurchasePush::_Internal {
 public:
};

SCGamePurchasePush::SCGamePurchasePush(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  propslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGamePurchasePush)
}
SCGamePurchasePush::SCGamePurchasePush(const SCGamePurchasePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      propslist_(from.propslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGamePurchasePush)
}

void SCGamePurchasePush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGamePurchasePush_PlaneWar_2eproto.base);
}

SCGamePurchasePush::~SCGamePurchasePush() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGamePurchasePush)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGamePurchasePush::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGamePurchasePush::ArenaDtor(void* object) {
  SCGamePurchasePush* _this = reinterpret_cast< SCGamePurchasePush* >(object);
  (void)_this;
}
void SCGamePurchasePush::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGamePurchasePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGamePurchasePush& SCGamePurchasePush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGamePurchasePush_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGamePurchasePush::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGamePurchasePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propslist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGamePurchasePush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.PropsInfo propsList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGamePurchasePush::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGamePurchasePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.PropsInfo propsList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_propslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_propslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGamePurchasePush)
  return target;
}

size_t SCGamePurchasePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGamePurchasePush)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PropsInfo propsList = 1;
  total_size += 1UL * this->_internal_propslist_size();
  for (const auto& msg : this->propslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGamePurchasePush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGamePurchasePush)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGamePurchasePush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGamePurchasePush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGamePurchasePush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGamePurchasePush)
    MergeFrom(*source);
  }
}

void SCGamePurchasePush::MergeFrom(const SCGamePurchasePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGamePurchasePush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propslist_.MergeFrom(from.propslist_);
}

void SCGamePurchasePush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGamePurchasePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGamePurchasePush::CopyFrom(const SCGamePurchasePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGamePurchasePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGamePurchasePush::IsInitialized() const {
  return true;
}

void SCGamePurchasePush::InternalSwap(SCGamePurchasePush* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  propslist_.InternalSwap(&other->propslist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGamePurchasePush::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PackageMarquee::_Internal {
 public:
  static const ::PlaneWar::PropsInfo& props(const PackageMarquee* msg);
};

const ::PlaneWar::PropsInfo&
PackageMarquee::_Internal::props(const PackageMarquee* msg) {
  return *msg->props_;
}
PackageMarquee::PackageMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.PackageMarquee)
}
PackageMarquee::PackageMarquee(const PackageMarquee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  wareid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wareid().empty()) {
    wareid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wareid(), 
      GetArena());
  }
  if (from._internal_has_props()) {
    props_ = new ::PlaneWar::PropsInfo(*from.props_);
  } else {
    props_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.PackageMarquee)
}

void PackageMarquee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PackageMarquee_PlaneWar_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wareid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  props_ = nullptr;
}

PackageMarquee::~PackageMarquee() {
  // @@protoc_insertion_point(destructor:PlaneWar.PackageMarquee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PackageMarquee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wareid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete props_;
}

void PackageMarquee::ArenaDtor(void* object) {
  PackageMarquee* _this = reinterpret_cast< PackageMarquee* >(object);
  (void)_this;
}
void PackageMarquee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackageMarquee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackageMarquee& PackageMarquee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackageMarquee_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void PackageMarquee::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.PackageMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  wareid_.ClearToEmpty();
  if (GetArena() == nullptr && props_ != nullptr) {
    delete props_;
  }
  props_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageMarquee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PackageMarquee.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wareId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_wareid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.PackageMarquee.wareId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.PropsInfo props = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_props(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackageMarquee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.PackageMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PackageMarquee.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string wareId = 2;
  if (this->wareid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wareid().data(), static_cast<int>(this->_internal_wareid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.PackageMarquee.wareId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wareid(), target);
  }

  // .PlaneWar.PropsInfo props = 3;
  if (this->has_props()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::props(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.PackageMarquee)
  return target;
}

size_t PackageMarquee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.PackageMarquee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string wareId = 2;
  if (this->wareid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wareid());
  }

  // .PlaneWar.PropsInfo props = 3;
  if (this->has_props()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *props_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackageMarquee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.PackageMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  const PackageMarquee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackageMarquee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.PackageMarquee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.PackageMarquee)
    MergeFrom(*source);
  }
}

void PackageMarquee::MergeFrom(const PackageMarquee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.PackageMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.wareid().size() > 0) {
    _internal_set_wareid(from._internal_wareid());
  }
  if (from.has_props()) {
    _internal_mutable_props()->::PlaneWar::PropsInfo::MergeFrom(from._internal_props());
  }
}

void PackageMarquee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.PackageMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageMarquee::CopyFrom(const PackageMarquee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.PackageMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMarquee::IsInitialized() const {
  return true;
}

void PackageMarquee::InternalSwap(PackageMarquee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wareid_.Swap(&other->wareid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(props_, other->props_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageMarquee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSQueryPackageMarquee::_Internal {
 public:
};

CSQueryPackageMarquee::CSQueryPackageMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSQueryPackageMarquee)
}
CSQueryPackageMarquee::CSQueryPackageMarquee(const CSQueryPackageMarquee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSQueryPackageMarquee)
}

void CSQueryPackageMarquee::SharedCtor() {
}

CSQueryPackageMarquee::~CSQueryPackageMarquee() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSQueryPackageMarquee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSQueryPackageMarquee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSQueryPackageMarquee::ArenaDtor(void* object) {
  CSQueryPackageMarquee* _this = reinterpret_cast< CSQueryPackageMarquee* >(object);
  (void)_this;
}
void CSQueryPackageMarquee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSQueryPackageMarquee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSQueryPackageMarquee& CSQueryPackageMarquee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSQueryPackageMarquee_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSQueryPackageMarquee::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSQueryPackageMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSQueryPackageMarquee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSQueryPackageMarquee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSQueryPackageMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSQueryPackageMarquee)
  return target;
}

size_t CSQueryPackageMarquee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSQueryPackageMarquee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSQueryPackageMarquee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSQueryPackageMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  const CSQueryPackageMarquee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSQueryPackageMarquee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSQueryPackageMarquee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSQueryPackageMarquee)
    MergeFrom(*source);
  }
}

void CSQueryPackageMarquee::MergeFrom(const CSQueryPackageMarquee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSQueryPackageMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSQueryPackageMarquee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSQueryPackageMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryPackageMarquee::CopyFrom(const CSQueryPackageMarquee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSQueryPackageMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryPackageMarquee::IsInitialized() const {
  return true;
}

void CSQueryPackageMarquee::InternalSwap(CSQueryPackageMarquee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSQueryPackageMarquee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCQueryPackageMarquee::_Internal {
 public:
};

SCQueryPackageMarquee::SCQueryPackageMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packagemarqueelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCQueryPackageMarquee)
}
SCQueryPackageMarquee::SCQueryPackageMarquee(const SCQueryPackageMarquee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packagemarqueelist_(from.packagemarqueelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marqueemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marqueemodel().empty()) {
    marqueemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marqueemodel(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCQueryPackageMarquee)
}

void SCQueryPackageMarquee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCQueryPackageMarquee_PlaneWar_2eproto.base);
  marqueemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SCQueryPackageMarquee::~SCQueryPackageMarquee() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCQueryPackageMarquee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCQueryPackageMarquee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marqueemodel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCQueryPackageMarquee::ArenaDtor(void* object) {
  SCQueryPackageMarquee* _this = reinterpret_cast< SCQueryPackageMarquee* >(object);
  (void)_this;
}
void SCQueryPackageMarquee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCQueryPackageMarquee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCQueryPackageMarquee& SCQueryPackageMarquee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCQueryPackageMarquee_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCQueryPackageMarquee::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCQueryPackageMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packagemarqueelist_.Clear();
  marqueemodel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCQueryPackageMarquee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marqueeModel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marqueemodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.SCQueryPackageMarquee.marqueeModel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.PackageMarquee packageMarqueeList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packagemarqueelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCQueryPackageMarquee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCQueryPackageMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marqueeModel = 1;
  if (this->marqueemodel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marqueemodel().data(), static_cast<int>(this->_internal_marqueemodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.SCQueryPackageMarquee.marqueeModel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marqueemodel(), target);
  }

  // repeated .PlaneWar.PackageMarquee packageMarqueeList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packagemarqueelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_packagemarqueelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCQueryPackageMarquee)
  return target;
}

size_t SCQueryPackageMarquee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCQueryPackageMarquee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.PackageMarquee packageMarqueeList = 2;
  total_size += 1UL * this->_internal_packagemarqueelist_size();
  for (const auto& msg : this->packagemarqueelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string marqueeModel = 1;
  if (this->marqueemodel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marqueemodel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCQueryPackageMarquee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCQueryPackageMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  const SCQueryPackageMarquee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCQueryPackageMarquee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCQueryPackageMarquee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCQueryPackageMarquee)
    MergeFrom(*source);
  }
}

void SCQueryPackageMarquee::MergeFrom(const SCQueryPackageMarquee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCQueryPackageMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packagemarqueelist_.MergeFrom(from.packagemarqueelist_);
  if (from.marqueemodel().size() > 0) {
    _internal_set_marqueemodel(from._internal_marqueemodel());
  }
}

void SCQueryPackageMarquee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCQueryPackageMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCQueryPackageMarquee::CopyFrom(const SCQueryPackageMarquee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCQueryPackageMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCQueryPackageMarquee::IsInitialized() const {
  return true;
}

void SCQueryPackageMarquee::InternalSwap(SCQueryPackageMarquee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packagemarqueelist_.InternalSwap(&other->packagemarqueelist_);
  marqueemodel_.Swap(&other->marqueemodel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SCQueryPackageMarquee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetWings::_Internal {
 public:
};

CSSetWings::CSSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSetWings)
}
CSSetWings::CSSetWings(const CSSetWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wingid_ = from.wingid_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSetWings)
}

void CSSetWings::SharedCtor() {
  wingid_ = 0;
}

CSSetWings::~CSSetWings() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSetWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetWings::ArenaDtor(void* object) {
  CSSetWings* _this = reinterpret_cast< CSSetWings* >(object);
  (void)_this;
}
void CSSetWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetWings& CSSetWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetWings_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSetWings::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wingid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wingId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wingId = 1;
  if (this->wingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wingid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSetWings)
  return target;
}

size_t CSSetWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSetWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wingId = 1;
  if (this->wingid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wingid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSetWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSetWings)
    MergeFrom(*source);
  }
}

void CSSetWings::MergeFrom(const CSSetWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wingid() != 0) {
    _internal_set_wingid(from._internal_wingid());
  }
}

void CSSetWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetWings::CopyFrom(const CSSetWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetWings::IsInitialized() const {
  return true;
}

void CSSetWings::InternalSwap(CSSetWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wingid_, other->wingid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetWings::_Internal {
 public:
};

SCSetWings::SCSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSetWings)
}
SCSetWings::SCSetWings(const SCSetWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_, &from.chair_,
    static_cast<size_t>(reinterpret_cast<char*>(&wingid_) -
    reinterpret_cast<char*>(&chair_)) + sizeof(wingid_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSetWings)
}

void SCSetWings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wingid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(wingid_));
}

SCSetWings::~SCSetWings() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSetWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetWings::ArenaDtor(void* object) {
  SCSetWings* _this = reinterpret_cast< SCSetWings* >(object);
  (void)_this;
}
void SCSetWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetWings& SCSetWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetWings_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSetWings::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wingid_) -
      reinterpret_cast<char*>(&chair_)) + sizeof(wingid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wingId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair(), target);
  }

  // int32 wingId = 2;
  if (this->wingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wingid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSetWings)
  return target;
}

size_t SCSetWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSetWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair = 1;
  if (this->chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair());
  }

  // int32 wingId = 2;
  if (this->wingid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wingid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSetWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSetWings)
    MergeFrom(*source);
  }
}

void SCSetWings::MergeFrom(const SCSetWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair() != 0) {
    _internal_set_chair(from._internal_chair());
  }
  if (from.wingid() != 0) {
    _internal_set_wingid(from._internal_wingid());
  }
}

void SCSetWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetWings::CopyFrom(const SCSetWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetWings::IsInitialized() const {
  return true;
}

void SCSetWings::InternalSwap(SCSetWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetWings, wingid_)
      + sizeof(SCSetWings::wingid_)
      - PROTOBUF_FIELD_OFFSET(SCSetWings, chair_)>(
          reinterpret_cast<char*>(&chair_),
          reinterpret_cast<char*>(&other->chair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVerifySeasonChange::_Internal {
 public:
};

CSVerifySeasonChange::CSVerifySeasonChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSVerifySeasonChange)
}
CSVerifySeasonChange::CSVerifySeasonChange(const CSVerifySeasonChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSVerifySeasonChange)
}

void CSVerifySeasonChange::SharedCtor() {
}

CSVerifySeasonChange::~CSVerifySeasonChange() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSVerifySeasonChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVerifySeasonChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSVerifySeasonChange::ArenaDtor(void* object) {
  CSVerifySeasonChange* _this = reinterpret_cast< CSVerifySeasonChange* >(object);
  (void)_this;
}
void CSVerifySeasonChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVerifySeasonChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSVerifySeasonChange& CSVerifySeasonChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSVerifySeasonChange_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSVerifySeasonChange::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSVerifySeasonChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVerifySeasonChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVerifySeasonChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSVerifySeasonChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSVerifySeasonChange)
  return target;
}

size_t CSVerifySeasonChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSVerifySeasonChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVerifySeasonChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSVerifySeasonChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVerifySeasonChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVerifySeasonChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSVerifySeasonChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSVerifySeasonChange)
    MergeFrom(*source);
  }
}

void CSVerifySeasonChange::MergeFrom(const CSVerifySeasonChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSVerifySeasonChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSVerifySeasonChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSVerifySeasonChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVerifySeasonChange::CopyFrom(const CSVerifySeasonChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSVerifySeasonChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVerifySeasonChange::IsInitialized() const {
  return true;
}

void CSVerifySeasonChange::InternalSwap(CSVerifySeasonChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVerifySeasonChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCVerifySeasonChange::_Internal {
 public:
  static const ::PlaneWar::GradeRankInfo& beforegraderankinfo(const SCVerifySeasonChange* msg);
  static const ::PlaneWar::GradeRankInfo& currentgraderankinfo(const SCVerifySeasonChange* msg);
};

const ::PlaneWar::GradeRankInfo&
SCVerifySeasonChange::_Internal::beforegraderankinfo(const SCVerifySeasonChange* msg) {
  return *msg->beforegraderankinfo_;
}
const ::PlaneWar::GradeRankInfo&
SCVerifySeasonChange::_Internal::currentgraderankinfo(const SCVerifySeasonChange* msg) {
  return *msg->currentgraderankinfo_;
}
SCVerifySeasonChange::SCVerifySeasonChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCVerifySeasonChange)
}
SCVerifySeasonChange::SCVerifySeasonChange(const SCVerifySeasonChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_beforegraderankinfo()) {
    beforegraderankinfo_ = new ::PlaneWar::GradeRankInfo(*from.beforegraderankinfo_);
  } else {
    beforegraderankinfo_ = nullptr;
  }
  if (from._internal_has_currentgraderankinfo()) {
    currentgraderankinfo_ = new ::PlaneWar::GradeRankInfo(*from.currentgraderankinfo_);
  } else {
    currentgraderankinfo_ = nullptr;
  }
  ::memcpy(&change_, &from.change_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentseason_) -
    reinterpret_cast<char*>(&change_)) + sizeof(currentseason_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCVerifySeasonChange)
}

void SCVerifySeasonChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCVerifySeasonChange_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&beforegraderankinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&currentseason_) -
      reinterpret_cast<char*>(&beforegraderankinfo_)) + sizeof(currentseason_));
}

SCVerifySeasonChange::~SCVerifySeasonChange() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCVerifySeasonChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCVerifySeasonChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete beforegraderankinfo_;
  if (this != internal_default_instance()) delete currentgraderankinfo_;
}

void SCVerifySeasonChange::ArenaDtor(void* object) {
  SCVerifySeasonChange* _this = reinterpret_cast< SCVerifySeasonChange* >(object);
  (void)_this;
}
void SCVerifySeasonChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCVerifySeasonChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCVerifySeasonChange& SCVerifySeasonChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCVerifySeasonChange_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCVerifySeasonChange::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCVerifySeasonChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && beforegraderankinfo_ != nullptr) {
    delete beforegraderankinfo_;
  }
  beforegraderankinfo_ = nullptr;
  if (GetArena() == nullptr && currentgraderankinfo_ != nullptr) {
    delete currentgraderankinfo_;
  }
  currentgraderankinfo_ = nullptr;
  ::memset(&change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentseason_) -
      reinterpret_cast<char*>(&change_)) + sizeof(currentseason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCVerifySeasonChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GradeRankInfo beforeGradeRankInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_beforegraderankinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GradeRankInfo currentGradeRankInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentgraderankinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beforeSeason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          beforeseason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentSeason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          currentseason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCVerifySeasonChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCVerifySeasonChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool change = 1;
  if (this->change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_change(), target);
  }

  // .PlaneWar.GradeRankInfo beforeGradeRankInfo = 2;
  if (this->has_beforegraderankinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::beforegraderankinfo(this), target, stream);
  }

  // .PlaneWar.GradeRankInfo currentGradeRankInfo = 3;
  if (this->has_currentgraderankinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::currentgraderankinfo(this), target, stream);
  }

  // int32 beforeSeason = 4;
  if (this->beforeseason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_beforeseason(), target);
  }

  // int32 currentSeason = 5;
  if (this->currentseason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_currentseason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCVerifySeasonChange)
  return target;
}

size_t SCVerifySeasonChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCVerifySeasonChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.GradeRankInfo beforeGradeRankInfo = 2;
  if (this->has_beforegraderankinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beforegraderankinfo_);
  }

  // .PlaneWar.GradeRankInfo currentGradeRankInfo = 3;
  if (this->has_currentgraderankinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentgraderankinfo_);
  }

  // bool change = 1;
  if (this->change() != 0) {
    total_size += 1 + 1;
  }

  // int32 beforeSeason = 4;
  if (this->beforeseason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beforeseason());
  }

  // int32 currentSeason = 5;
  if (this->currentseason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentseason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCVerifySeasonChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCVerifySeasonChange)
  GOOGLE_DCHECK_NE(&from, this);
  const SCVerifySeasonChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCVerifySeasonChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCVerifySeasonChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCVerifySeasonChange)
    MergeFrom(*source);
  }
}

void SCVerifySeasonChange::MergeFrom(const SCVerifySeasonChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCVerifySeasonChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beforegraderankinfo()) {
    _internal_mutable_beforegraderankinfo()->::PlaneWar::GradeRankInfo::MergeFrom(from._internal_beforegraderankinfo());
  }
  if (from.has_currentgraderankinfo()) {
    _internal_mutable_currentgraderankinfo()->::PlaneWar::GradeRankInfo::MergeFrom(from._internal_currentgraderankinfo());
  }
  if (from.change() != 0) {
    _internal_set_change(from._internal_change());
  }
  if (from.beforeseason() != 0) {
    _internal_set_beforeseason(from._internal_beforeseason());
  }
  if (from.currentseason() != 0) {
    _internal_set_currentseason(from._internal_currentseason());
  }
}

void SCVerifySeasonChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCVerifySeasonChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCVerifySeasonChange::CopyFrom(const SCVerifySeasonChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCVerifySeasonChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCVerifySeasonChange::IsInitialized() const {
  return true;
}

void SCVerifySeasonChange::InternalSwap(SCVerifySeasonChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCVerifySeasonChange, currentseason_)
      + sizeof(SCVerifySeasonChange::currentseason_)
      - PROTOBUF_FIELD_OFFSET(SCVerifySeasonChange, beforegraderankinfo_)>(
          reinterpret_cast<char*>(&beforegraderankinfo_),
          reinterpret_cast<char*>(&other->beforegraderankinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCVerifySeasonChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSExistUnReceiveRankReward::_Internal {
 public:
};

CSExistUnReceiveRankReward::CSExistUnReceiveRankReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSExistUnReceiveRankReward)
}
CSExistUnReceiveRankReward::CSExistUnReceiveRankReward(const CSExistUnReceiveRankReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSExistUnReceiveRankReward)
}

void CSExistUnReceiveRankReward::SharedCtor() {
}

CSExistUnReceiveRankReward::~CSExistUnReceiveRankReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSExistUnReceiveRankReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSExistUnReceiveRankReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSExistUnReceiveRankReward::ArenaDtor(void* object) {
  CSExistUnReceiveRankReward* _this = reinterpret_cast< CSExistUnReceiveRankReward* >(object);
  (void)_this;
}
void CSExistUnReceiveRankReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSExistUnReceiveRankReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSExistUnReceiveRankReward& CSExistUnReceiveRankReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSExistUnReceiveRankReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSExistUnReceiveRankReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSExistUnReceiveRankReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSExistUnReceiveRankReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSExistUnReceiveRankReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSExistUnReceiveRankReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSExistUnReceiveRankReward)
  return target;
}

size_t CSExistUnReceiveRankReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSExistUnReceiveRankReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSExistUnReceiveRankReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSExistUnReceiveRankReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSExistUnReceiveRankReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSExistUnReceiveRankReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSExistUnReceiveRankReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSExistUnReceiveRankReward)
    MergeFrom(*source);
  }
}

void CSExistUnReceiveRankReward::MergeFrom(const CSExistUnReceiveRankReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSExistUnReceiveRankReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSExistUnReceiveRankReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSExistUnReceiveRankReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExistUnReceiveRankReward::CopyFrom(const CSExistUnReceiveRankReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSExistUnReceiveRankReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExistUnReceiveRankReward::IsInitialized() const {
  return true;
}

void CSExistUnReceiveRankReward::InternalSwap(CSExistUnReceiveRankReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSExistUnReceiveRankReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCExistUnReceiveRankReward::_Internal {
 public:
};

SCExistUnReceiveRankReward::SCExistUnReceiveRankReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCExistUnReceiveRankReward)
}
SCExistUnReceiveRankReward::SCExistUnReceiveRankReward(const SCExistUnReceiveRankReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exist_ = from.exist_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCExistUnReceiveRankReward)
}

void SCExistUnReceiveRankReward::SharedCtor() {
  exist_ = false;
}

SCExistUnReceiveRankReward::~SCExistUnReceiveRankReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCExistUnReceiveRankReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCExistUnReceiveRankReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCExistUnReceiveRankReward::ArenaDtor(void* object) {
  SCExistUnReceiveRankReward* _this = reinterpret_cast< SCExistUnReceiveRankReward* >(object);
  (void)_this;
}
void SCExistUnReceiveRankReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCExistUnReceiveRankReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCExistUnReceiveRankReward& SCExistUnReceiveRankReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCExistUnReceiveRankReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCExistUnReceiveRankReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCExistUnReceiveRankReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCExistUnReceiveRankReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool exist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCExistUnReceiveRankReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCExistUnReceiveRankReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exist = 1;
  if (this->exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCExistUnReceiveRankReward)
  return target;
}

size_t SCExistUnReceiveRankReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCExistUnReceiveRankReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exist = 1;
  if (this->exist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCExistUnReceiveRankReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCExistUnReceiveRankReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCExistUnReceiveRankReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCExistUnReceiveRankReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCExistUnReceiveRankReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCExistUnReceiveRankReward)
    MergeFrom(*source);
  }
}

void SCExistUnReceiveRankReward::MergeFrom(const SCExistUnReceiveRankReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCExistUnReceiveRankReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
}

void SCExistUnReceiveRankReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCExistUnReceiveRankReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCExistUnReceiveRankReward::CopyFrom(const SCExistUnReceiveRankReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCExistUnReceiveRankReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCExistUnReceiveRankReward::IsInitialized() const {
  return true;
}

void SCExistUnReceiveRankReward::InternalSwap(SCExistUnReceiveRankReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(exist_, other->exist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCExistUnReceiveRankReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSReceiveExtraGradeReward::_Internal {
 public:
};

CSReceiveExtraGradeReward::CSReceiveExtraGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSReceiveExtraGradeReward)
}
CSReceiveExtraGradeReward::CSReceiveExtraGradeReward(const CSReceiveExtraGradeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSReceiveExtraGradeReward)
}

void CSReceiveExtraGradeReward::SharedCtor() {
  num_ = 0;
}

CSReceiveExtraGradeReward::~CSReceiveExtraGradeReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSReceiveExtraGradeReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSReceiveExtraGradeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSReceiveExtraGradeReward::ArenaDtor(void* object) {
  CSReceiveExtraGradeReward* _this = reinterpret_cast< CSReceiveExtraGradeReward* >(object);
  (void)_this;
}
void CSReceiveExtraGradeReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSReceiveExtraGradeReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSReceiveExtraGradeReward& CSReceiveExtraGradeReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSReceiveExtraGradeReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSReceiveExtraGradeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSReceiveExtraGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReceiveExtraGradeReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSReceiveExtraGradeReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSReceiveExtraGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSReceiveExtraGradeReward)
  return target;
}

size_t CSReceiveExtraGradeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSReceiveExtraGradeReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSReceiveExtraGradeReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSReceiveExtraGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSReceiveExtraGradeReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSReceiveExtraGradeReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSReceiveExtraGradeReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSReceiveExtraGradeReward)
    MergeFrom(*source);
  }
}

void CSReceiveExtraGradeReward::MergeFrom(const CSReceiveExtraGradeReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSReceiveExtraGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void CSReceiveExtraGradeReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSReceiveExtraGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReceiveExtraGradeReward::CopyFrom(const CSReceiveExtraGradeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSReceiveExtraGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReceiveExtraGradeReward::IsInitialized() const {
  return true;
}

void CSReceiveExtraGradeReward::InternalSwap(CSReceiveExtraGradeReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReceiveExtraGradeReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCReceiveExtraGradeReward::_Internal {
 public:
};

SCReceiveExtraGradeReward::SCReceiveExtraGradeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  receiverewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCReceiveExtraGradeReward)
}
SCReceiveExtraGradeReward::SCReceiveExtraGradeReward(const SCReceiveExtraGradeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      receiverewardlist_(from.receiverewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCReceiveExtraGradeReward)
}

void SCReceiveExtraGradeReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCReceiveExtraGradeReward_PlaneWar_2eproto.base);
  num_ = 0;
}

SCReceiveExtraGradeReward::~SCReceiveExtraGradeReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCReceiveExtraGradeReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCReceiveExtraGradeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCReceiveExtraGradeReward::ArenaDtor(void* object) {
  SCReceiveExtraGradeReward* _this = reinterpret_cast< SCReceiveExtraGradeReward* >(object);
  (void)_this;
}
void SCReceiveExtraGradeReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCReceiveExtraGradeReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCReceiveExtraGradeReward& SCReceiveExtraGradeReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCReceiveExtraGradeReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCReceiveExtraGradeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCReceiveExtraGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiverewardlist_.Clear();
  num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCReceiveExtraGradeReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receiverewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCReceiveExtraGradeReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCReceiveExtraGradeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_receiverewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_receiverewardlist(i), target, stream);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCReceiveExtraGradeReward)
  return target;
}

size_t SCReceiveExtraGradeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCReceiveExtraGradeReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.ReceiveReward receiveRewardList = 1;
  total_size += 1UL * this->_internal_receiverewardlist_size();
  for (const auto& msg : this->receiverewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCReceiveExtraGradeReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCReceiveExtraGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCReceiveExtraGradeReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCReceiveExtraGradeReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCReceiveExtraGradeReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCReceiveExtraGradeReward)
    MergeFrom(*source);
  }
}

void SCReceiveExtraGradeReward::MergeFrom(const SCReceiveExtraGradeReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCReceiveExtraGradeReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiverewardlist_.MergeFrom(from.receiverewardlist_);
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void SCReceiveExtraGradeReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCReceiveExtraGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCReceiveExtraGradeReward::CopyFrom(const SCReceiveExtraGradeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCReceiveExtraGradeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCReceiveExtraGradeReward::IsInitialized() const {
  return true;
}

void SCReceiveExtraGradeReward::InternalSwap(SCReceiveExtraGradeReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receiverewardlist_.InternalSwap(&other->receiverewardlist_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCReceiveExtraGradeReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetGradeRankList::_Internal {
 public:
};

CSGetGradeRankList::CSGetGradeRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSGetGradeRankList)
}
CSGetGradeRankList::CSGetGradeRankList(const CSGetGradeRankList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&from_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSGetGradeRankList)
}

void CSGetGradeRankList::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&from_)) + sizeof(season_));
}

CSGetGradeRankList::~CSGetGradeRankList() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSGetGradeRankList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetGradeRankList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetGradeRankList::ArenaDtor(void* object) {
  CSGetGradeRankList* _this = reinterpret_cast< CSGetGradeRankList* >(object);
  (void)_this;
}
void CSGetGradeRankList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetGradeRankList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetGradeRankList& CSGetGradeRankList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetGradeRankList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSGetGradeRankList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSGetGradeRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&from_)) + sizeof(season_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetGradeRankList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 season = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetGradeRankList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSGetGradeRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // int32 season = 3;
  if (this->season() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_season(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSGetGradeRankList)
  return target;
}

size_t CSGetGradeRankList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSGetGradeRankList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  // int32 season = 3;
  if (this->season() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_season());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetGradeRankList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSGetGradeRankList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetGradeRankList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetGradeRankList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSGetGradeRankList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSGetGradeRankList)
    MergeFrom(*source);
  }
}

void CSGetGradeRankList::MergeFrom(const CSGetGradeRankList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSGetGradeRankList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.season() != 0) {
    _internal_set_season(from._internal_season());
  }
}

void CSGetGradeRankList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSGetGradeRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetGradeRankList::CopyFrom(const CSGetGradeRankList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSGetGradeRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetGradeRankList::IsInitialized() const {
  return true;
}

void CSGetGradeRankList::InternalSwap(CSGetGradeRankList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGetGradeRankList, season_)
      + sizeof(CSGetGradeRankList::season_)
      - PROTOBUF_FIELD_OFFSET(CSGetGradeRankList, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetGradeRankList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetGradeRankList::_Internal {
 public:
  static const ::PlaneWar::GradeRankInfo& selfrankinfo(const SCGetGradeRankList* msg);
};

const ::PlaneWar::GradeRankInfo&
SCGetGradeRankList::_Internal::selfrankinfo(const SCGetGradeRankList* msg) {
  return *msg->selfrankinfo_;
}
SCGetGradeRankList::SCGetGradeRankList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graderanklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCGetGradeRankList)
}
SCGetGradeRankList::SCGetGradeRankList(const SCGetGradeRankList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graderanklist_(from.graderanklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selfrankinfo()) {
    selfrankinfo_ = new ::PlaneWar::GradeRankInfo(*from.selfrankinfo_);
  } else {
    selfrankinfo_ = nullptr;
  }
  ord_ = from.ord_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCGetGradeRankList)
}

void SCGetGradeRankList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetGradeRankList_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&selfrankinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ord_) -
      reinterpret_cast<char*>(&selfrankinfo_)) + sizeof(ord_));
}

SCGetGradeRankList::~SCGetGradeRankList() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCGetGradeRankList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetGradeRankList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selfrankinfo_;
}

void SCGetGradeRankList::ArenaDtor(void* object) {
  SCGetGradeRankList* _this = reinterpret_cast< SCGetGradeRankList* >(object);
  (void)_this;
}
void SCGetGradeRankList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetGradeRankList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetGradeRankList& SCGetGradeRankList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetGradeRankList_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCGetGradeRankList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCGetGradeRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graderanklist_.Clear();
  if (GetArena() == nullptr && selfrankinfo_ != nullptr) {
    delete selfrankinfo_;
  }
  selfrankinfo_ = nullptr;
  ord_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetGradeRankList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.GradeRankInfo gradeRankList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graderanklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.GradeRankInfo selfRankInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfrankinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetGradeRankList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCGetGradeRankList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRankInfo gradeRankList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graderanklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_graderanklist(i), target, stream);
  }

  // .PlaneWar.GradeRankInfo selfRankInfo = 2;
  if (this->has_selfrankinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selfrankinfo(this), target, stream);
  }

  // int32 ord = 3;
  if (this->ord() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCGetGradeRankList)
  return target;
}

size_t SCGetGradeRankList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCGetGradeRankList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.GradeRankInfo gradeRankList = 1;
  total_size += 1UL * this->_internal_graderanklist_size();
  for (const auto& msg : this->graderanklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.GradeRankInfo selfRankInfo = 2;
  if (this->has_selfrankinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfrankinfo_);
  }

  // int32 ord = 3;
  if (this->ord() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ord());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetGradeRankList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCGetGradeRankList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetGradeRankList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetGradeRankList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCGetGradeRankList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCGetGradeRankList)
    MergeFrom(*source);
  }
}

void SCGetGradeRankList::MergeFrom(const SCGetGradeRankList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCGetGradeRankList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graderanklist_.MergeFrom(from.graderanklist_);
  if (from.has_selfrankinfo()) {
    _internal_mutable_selfrankinfo()->::PlaneWar::GradeRankInfo::MergeFrom(from._internal_selfrankinfo());
  }
  if (from.ord() != 0) {
    _internal_set_ord(from._internal_ord());
  }
}

void SCGetGradeRankList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCGetGradeRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetGradeRankList::CopyFrom(const SCGetGradeRankList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCGetGradeRankList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetGradeRankList::IsInitialized() const {
  return true;
}

void SCGetGradeRankList::InternalSwap(SCGetGradeRankList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graderanklist_.InternalSwap(&other->graderanklist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetGradeRankList, ord_)
      + sizeof(SCGetGradeRankList::ord_)
      - PROTOBUF_FIELD_OFFSET(SCGetGradeRankList, selfrankinfo_)>(
          reinterpret_cast<char*>(&selfrankinfo_),
          reinterpret_cast<char*>(&other->selfrankinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetGradeRankList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyPlane::_Internal {
 public:
};

CSBuyPlane::CSBuyPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSBuyPlane)
}
CSBuyPlane::CSBuyPlane(const CSBuyPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plane_id_ = from.plane_id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSBuyPlane)
}

void CSBuyPlane::SharedCtor() {
  plane_id_ = 0;
}

CSBuyPlane::~CSBuyPlane() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSBuyPlane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyPlane::ArenaDtor(void* object) {
  CSBuyPlane* _this = reinterpret_cast< CSBuyPlane* >(object);
  (void)_this;
}
void CSBuyPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyPlane& CSBuyPlane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyPlane_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSBuyPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSBuyPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plane_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 plane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          plane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyPlane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSBuyPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 plane_id = 1;
  if (this->plane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSBuyPlane)
  return target;
}

size_t CSBuyPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSBuyPlane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 plane_id = 1;
  if (this->plane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSBuyPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSBuyPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSBuyPlane)
    MergeFrom(*source);
  }
}

void CSBuyPlane::MergeFrom(const CSBuyPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSBuyPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plane_id() != 0) {
    _internal_set_plane_id(from._internal_plane_id());
  }
}

void CSBuyPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSBuyPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyPlane::CopyFrom(const CSBuyPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSBuyPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyPlane::IsInitialized() const {
  return true;
}

void CSBuyPlane::InternalSwap(CSBuyPlane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(plane_id_, other->plane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyPlane::_Internal {
 public:
};

SCBuyPlane::SCBuyPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCBuyPlane)
}
SCBuyPlane::SCBuyPlane(const SCBuyPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plane_id_ = from.plane_id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCBuyPlane)
}

void SCBuyPlane::SharedCtor() {
  plane_id_ = 0;
}

SCBuyPlane::~SCBuyPlane() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCBuyPlane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBuyPlane::ArenaDtor(void* object) {
  SCBuyPlane* _this = reinterpret_cast< SCBuyPlane* >(object);
  (void)_this;
}
void SCBuyPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyPlane& SCBuyPlane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyPlane_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCBuyPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCBuyPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plane_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 plane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          plane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyPlane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCBuyPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 plane_id = 1;
  if (this->plane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCBuyPlane)
  return target;
}

size_t SCBuyPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCBuyPlane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 plane_id = 1;
  if (this->plane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCBuyPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCBuyPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCBuyPlane)
    MergeFrom(*source);
  }
}

void SCBuyPlane::MergeFrom(const SCBuyPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCBuyPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plane_id() != 0) {
    _internal_set_plane_id(from._internal_plane_id());
  }
}

void SCBuyPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCBuyPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyPlane::CopyFrom(const SCBuyPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCBuyPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyPlane::IsInitialized() const {
  return true;
}

void SCBuyPlane::InternalSwap(SCBuyPlane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(plane_id_, other->plane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyWings::_Internal {
 public:
};

CSBuyWings::CSBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSBuyWings)
}
CSBuyWings::CSBuyWings(const CSBuyWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wings_id_ = from.wings_id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSBuyWings)
}

void CSBuyWings::SharedCtor() {
  wings_id_ = 0;
}

CSBuyWings::~CSBuyWings() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSBuyWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyWings::ArenaDtor(void* object) {
  CSBuyWings* _this = reinterpret_cast< CSBuyWings* >(object);
  (void)_this;
}
void CSBuyWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyWings& CSBuyWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyWings_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSBuyWings::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSBuyWings)
  return target;
}

size_t CSBuyWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSBuyWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSBuyWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSBuyWings)
    MergeFrom(*source);
  }
}

void CSBuyWings::MergeFrom(const CSBuyWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
}

void CSBuyWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyWings::CopyFrom(const CSBuyWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyWings::IsInitialized() const {
  return true;
}

void CSBuyWings::InternalSwap(CSBuyWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wings_id_, other->wings_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyWings::_Internal {
 public:
};

SCBuyWings::SCBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCBuyWings)
}
SCBuyWings::SCBuyWings(const SCBuyWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wings_id_ = from.wings_id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCBuyWings)
}

void SCBuyWings::SharedCtor() {
  wings_id_ = 0;
}

SCBuyWings::~SCBuyWings() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCBuyWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBuyWings::ArenaDtor(void* object) {
  SCBuyWings* _this = reinterpret_cast< SCBuyWings* >(object);
  (void)_this;
}
void SCBuyWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyWings& SCBuyWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyWings_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCBuyWings::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCBuyWings)
  return target;
}

size_t SCBuyWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCBuyWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCBuyWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCBuyWings)
    MergeFrom(*source);
  }
}

void SCBuyWings::MergeFrom(const SCBuyWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
}

void SCBuyWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyWings::CopyFrom(const SCBuyWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyWings::IsInitialized() const {
  return true;
}

void SCBuyWings::InternalSwap(SCBuyWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wings_id_, other->wings_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenChestReward::_Internal {
 public:
  static const ::PlaneWar::Decimal& num(const OpenChestReward* msg);
};

const ::PlaneWar::Decimal&
OpenChestReward::_Internal::num(const OpenChestReward* msg) {
  return *msg->num_;
}
OpenChestReward::OpenChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.OpenChestReward)
}
OpenChestReward::OpenChestReward(const OpenChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num()) {
    num_ = new ::PlaneWar::Decimal(*from.num_);
  } else {
    num_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.OpenChestReward)
}

void OpenChestReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenChestReward_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&num_)) + sizeof(id_));
}

OpenChestReward::~OpenChestReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.OpenChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_;
}

void OpenChestReward::ArenaDtor(void* object) {
  OpenChestReward* _this = reinterpret_cast< OpenChestReward* >(object);
  (void)_this;
}
void OpenChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenChestReward& OpenChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenChestReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void OpenChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.OpenChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && num_ != nullptr) {
    delete num_;
  }
  num_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.Decimal num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.OpenChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .PlaneWar.Decimal num = 2;
  if (this->has_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::num(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.OpenChestReward)
  return target;
}

size_t OpenChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.OpenChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.Decimal num = 2;
  if (this->has_num()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *num_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.OpenChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.OpenChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.OpenChestReward)
    MergeFrom(*source);
  }
}

void OpenChestReward::MergeFrom(const OpenChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.OpenChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num()) {
    _internal_mutable_num()->::PlaneWar::Decimal::MergeFrom(from._internal_num());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OpenChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.OpenChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChestReward::CopyFrom(const OpenChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.OpenChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChestReward::IsInitialized() const {
  return true;
}

void OpenChestReward::InternalSwap(OpenChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenChestReward, id_)
      + sizeof(OpenChestReward::id_)
      - PROTOBUF_FIELD_OFFSET(OpenChestReward, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUpdateChestStatus::_Internal {
 public:
};

SCUpdateChestStatus::SCUpdateChestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCUpdateChestStatus)
}
SCUpdateChestStatus::SCUpdateChestStatus(const SCUpdateChestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chest_type_, &from.chest_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_reward_) -
    reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCUpdateChestStatus)
}

void SCUpdateChestStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chest_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&available_reward_) -
      reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
}

SCUpdateChestStatus::~SCUpdateChestStatus() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCUpdateChestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUpdateChestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUpdateChestStatus::ArenaDtor(void* object) {
  SCUpdateChestStatus* _this = reinterpret_cast< SCUpdateChestStatus* >(object);
  (void)_this;
}
void SCUpdateChestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUpdateChestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUpdateChestStatus& SCUpdateChestStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUpdateChestStatus_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCUpdateChestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCUpdateChestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chest_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_reward_) -
      reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUpdateChestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ChestType chest_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chest_type(static_cast<::PlaneWar::ChestType>(val));
        } else goto handle_unusual;
        continue;
      // int32 total_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guide = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 available_reward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          available_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUpdateChestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCUpdateChestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_active = 1;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_active(), target);
  }

  // .PlaneWar.ChestType chest_type = 2;
  if (this->chest_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chest_type(), target);
  }

  // int32 total_progress = 3;
  if (this->total_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_progress(), target);
  }

  // int32 remain_progress = 4;
  if (this->remain_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain_progress(), target);
  }

  // bool guide = 5;
  if (this->guide() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_guide(), target);
  }

  // int32 available_reward = 6;
  if (this->available_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_available_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCUpdateChestStatus)
  return target;
}

size_t SCUpdateChestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCUpdateChestStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.ChestType chest_type = 2;
  if (this->chest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chest_type());
  }

  // int32 total_progress = 3;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_progress());
  }

  // bool is_active = 1;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool guide = 5;
  if (this->guide() != 0) {
    total_size += 1 + 1;
  }

  // int32 remain_progress = 4;
  if (this->remain_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_progress());
  }

  // int32 available_reward = 6;
  if (this->available_reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUpdateChestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCUpdateChestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUpdateChestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUpdateChestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCUpdateChestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCUpdateChestStatus)
    MergeFrom(*source);
  }
}

void SCUpdateChestStatus::MergeFrom(const SCUpdateChestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCUpdateChestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chest_type() != 0) {
    _internal_set_chest_type(from._internal_chest_type());
  }
  if (from.total_progress() != 0) {
    _internal_set_total_progress(from._internal_total_progress());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from.guide() != 0) {
    _internal_set_guide(from._internal_guide());
  }
  if (from.remain_progress() != 0) {
    _internal_set_remain_progress(from._internal_remain_progress());
  }
  if (from.available_reward() != 0) {
    _internal_set_available_reward(from._internal_available_reward());
  }
}

void SCUpdateChestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCUpdateChestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpdateChestStatus::CopyFrom(const SCUpdateChestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCUpdateChestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpdateChestStatus::IsInitialized() const {
  return true;
}

void SCUpdateChestStatus::InternalSwap(SCUpdateChestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUpdateChestStatus, available_reward_)
      + sizeof(SCUpdateChestStatus::available_reward_)
      - PROTOBUF_FIELD_OFFSET(SCUpdateChestStatus, chest_type_)>(
          reinterpret_cast<char*>(&chest_type_),
          reinterpret_cast<char*>(&other->chest_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUpdateChestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChestBrief::_Internal {
 public:
};

ChestBrief::ChestBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.ChestBrief)
}
ChestBrief::ChestBrief(const ChestBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_(from.reward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chest_type_ = from.chest_type_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.ChestBrief)
}

void ChestBrief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChestBrief_PlaneWar_2eproto.base);
  chest_type_ = 0;
}

ChestBrief::~ChestBrief() {
  // @@protoc_insertion_point(destructor:PlaneWar.ChestBrief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChestBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChestBrief::ArenaDtor(void* object) {
  ChestBrief* _this = reinterpret_cast< ChestBrief* >(object);
  (void)_this;
}
void ChestBrief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChestBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChestBrief& ChestBrief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChestBrief_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void ChestBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.ChestBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_.Clear();
  chest_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestBrief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.ChestType chest_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chest_type(static_cast<::PlaneWar::ChestType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.OpenChestReward reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChestBrief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.ChestBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.ChestType chest_type = 1;
  if (this->chest_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chest_type(), target);
  }

  // repeated .PlaneWar.OpenChestReward reward = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.ChestBrief)
  return target;
}

size_t ChestBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.ChestBrief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenChestReward reward = 2;
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.ChestType chest_type = 1;
  if (this->chest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chest_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChestBrief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.ChestBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const ChestBrief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChestBrief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.ChestBrief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.ChestBrief)
    MergeFrom(*source);
  }
}

void ChestBrief::MergeFrom(const ChestBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.ChestBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_.MergeFrom(from.reward_);
  if (from.chest_type() != 0) {
    _internal_set_chest_type(from._internal_chest_type());
  }
}

void ChestBrief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.ChestBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestBrief::CopyFrom(const ChestBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.ChestBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestBrief::IsInitialized() const {
  return true;
}

void ChestBrief::InternalSwap(ChestBrief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_.InternalSwap(&other->reward_);
  swap(chest_type_, other->chest_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestBrief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestConfig::_Internal {
 public:
};

SCChestConfig::SCChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chest_brief_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCChestConfig)
}
SCChestConfig::SCChestConfig(const SCChestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chest_brief_list_(from.chest_brief_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&end_time_, &from.end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enable_) -
    reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCChestConfig)
}

void SCChestConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCChestConfig_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_enable_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
}

SCChestConfig::~SCChestConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCChestConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestConfig::ArenaDtor(void* object) {
  SCChestConfig* _this = reinterpret_cast< SCChestConfig* >(object);
  (void)_this;
}
void SCChestConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestConfig& SCChestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCChestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chest_brief_list_.Clear();
  ::memset(&end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enable_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 end_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlaneWar.ChestBrief chest_brief_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chest_brief_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 min_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_open = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ChestAutoSelectOption auto_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::PlaneWar::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool is_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 end_time = 1;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_end_time(), target);
  }

  // repeated .PlaneWar.ChestBrief chest_brief_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chest_brief_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chest_brief_list(i), target, stream);
  }

  // int32 min_ratio = 3;
  if (this->min_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_ratio(), target);
  }

  // bool auto_open = 4;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_open(), target);
  }

  // .PlaneWar.ChestAutoSelectOption auto_option = 5;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_auto_option(), target);
  }

  // bool is_enable = 6;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCChestConfig)
  return target;
}

size_t SCChestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCChestConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.ChestBrief chest_brief_list = 2;
  total_size += 1UL * this->_internal_chest_brief_list_size();
  for (const auto& msg : this->chest_brief_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 end_time = 1;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  // int32 min_ratio = 3;
  if (this->min_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_ratio());
  }

  // .PlaneWar.ChestAutoSelectOption auto_option = 5;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 4;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_enable = 6;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCChestConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCChestConfig)
    MergeFrom(*source);
  }
}

void SCChestConfig::MergeFrom(const SCChestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chest_brief_list_.MergeFrom(from.chest_brief_list_);
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.min_ratio() != 0) {
    _internal_set_min_ratio(from._internal_min_ratio());
  }
  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void SCChestConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestConfig::CopyFrom(const SCChestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestConfig::IsInitialized() const {
  return true;
}

void SCChestConfig::InternalSwap(SCChestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chest_brief_list_.InternalSwap(&other->chest_brief_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChestConfig, is_enable_)
      + sizeof(SCChestConfig::is_enable_)
      - PROTOBUF_FIELD_OFFSET(SCChestConfig, end_time_)>(
          reinterpret_cast<char*>(&end_time_),
          reinterpret_cast<char*>(&other->end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenChest::_Internal {
 public:
};

SCOpenChest::SCOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCOpenChest)
}
SCOpenChest::SCOpenChest(const SCOpenChest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_option_ = from.auto_option_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCOpenChest)
}

void SCOpenChest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenChest_PlaneWar_2eproto.base);
  auto_option_ = 0;
}

SCOpenChest::~SCOpenChest() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCOpenChest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenChest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOpenChest::ArenaDtor(void* object) {
  SCOpenChest* _this = reinterpret_cast< SCOpenChest* >(object);
  (void)_this;
}
void SCOpenChest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenChest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenChest& SCOpenChest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenChest_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCOpenChest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  auto_option_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenChest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.OpenChestReward reward_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlaneWar.ChestAutoSelectOption auto_option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::PlaneWar::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenChest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenChestReward reward_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward_list(i), target, stream);
  }

  // .PlaneWar.ChestAutoSelectOption auto_option = 2;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_auto_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCOpenChest)
  return target;
}

size_t SCOpenChest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCOpenChest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.OpenChestReward reward_list = 1;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlaneWar.ChestAutoSelectOption auto_option = 2;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenChest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenChest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenChest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCOpenChest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCOpenChest)
    MergeFrom(*source);
  }
}

void SCOpenChest::MergeFrom(const SCOpenChest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
}

void SCOpenChest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenChest::CopyFrom(const SCOpenChest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenChest::IsInitialized() const {
  return true;
}

void SCOpenChest::InternalSwap(SCOpenChest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(auto_option_, other->auto_option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenChest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSelectChestReward::_Internal {
 public:
  static const ::PlaneWar::OpenChestReward& reward(const CSSelectChestReward* msg);
};

const ::PlaneWar::OpenChestReward&
CSSelectChestReward::_Internal::reward(const CSSelectChestReward* msg) {
  return *msg->reward_;
}
CSSelectChestReward::CSSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSelectChestReward)
}
CSSelectChestReward::CSSelectChestReward(const CSSelectChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::PlaneWar::OpenChestReward(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  select_index_ = from.select_index_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSelectChestReward)
}

void CSSelectChestReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSelectChestReward_PlaneWar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&select_index_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(select_index_));
}

CSSelectChestReward::~CSSelectChestReward() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSelectChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSelectChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
}

void CSSelectChestReward::ArenaDtor(void* object) {
  CSSelectChestReward* _this = reinterpret_cast< CSSelectChestReward* >(object);
  (void)_this;
}
void CSSelectChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSelectChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSelectChestReward& CSSelectChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSelectChestReward_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSelectChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  select_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSelectChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 select_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          select_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlaneWar.OpenChestReward reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSelectChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 select_index = 1;
  if (this->select_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_select_index(), target);
  }

  // .PlaneWar.OpenChestReward reward = 2;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSelectChestReward)
  return target;
}

size_t CSSelectChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSelectChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.OpenChestReward reward = 2;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // int32 select_index = 1;
  if (this->select_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_select_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSelectChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSelectChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSelectChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSelectChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSelectChestReward)
    MergeFrom(*source);
  }
}

void CSSelectChestReward::MergeFrom(const CSSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::PlaneWar::OpenChestReward::MergeFrom(from._internal_reward());
  }
  if (from.select_index() != 0) {
    _internal_set_select_index(from._internal_select_index());
  }
}

void CSSelectChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSelectChestReward::CopyFrom(const CSSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSelectChestReward::IsInitialized() const {
  return true;
}

void CSSelectChestReward::InternalSwap(CSSelectChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSelectChestReward, select_index_)
      + sizeof(CSSelectChestReward::select_index_)
      - PROTOBUF_FIELD_OFFSET(CSSelectChestReward, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSelectChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestSetAutoSelect::_Internal {
 public:
};

CSChestSetAutoSelect::CSChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSChestSetAutoSelect)
}
CSChestSetAutoSelect::CSChestSetAutoSelect(const CSChestSetAutoSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_option_, &from.auto_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
    reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSChestSetAutoSelect)
}

void CSChestSetAutoSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto_option_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
}

CSChestSetAutoSelect::~CSChestSetAutoSelect() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSChestSetAutoSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestSetAutoSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestSetAutoSelect::ArenaDtor(void* object) {
  CSChestSetAutoSelect* _this = reinterpret_cast< CSChestSetAutoSelect* >(object);
  (void)_this;
}
void CSChestSetAutoSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestSetAutoSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestSetAutoSelect& CSChestSetAutoSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestSetAutoSelect_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSChestSetAutoSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestSetAutoSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.ChestAutoSelectOption auto_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::PlaneWar::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestSetAutoSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_option(), target);
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSChestSetAutoSelect)
  return target;
}

size_t CSChestSetAutoSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSChestSetAutoSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestSetAutoSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestSetAutoSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestSetAutoSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSChestSetAutoSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSChestSetAutoSelect)
    MergeFrom(*source);
  }
}

void CSChestSetAutoSelect::MergeFrom(const CSChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
}

void CSChestSetAutoSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestSetAutoSelect::CopyFrom(const CSChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestSetAutoSelect::IsInitialized() const {
  return true;
}

void CSChestSetAutoSelect::InternalSwap(CSChestSetAutoSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSChestSetAutoSelect, auto_open_)
      + sizeof(CSChestSetAutoSelect::auto_open_)
      - PROTOBUF_FIELD_OFFSET(CSChestSetAutoSelect, auto_option_)>(
          reinterpret_cast<char*>(&auto_option_),
          reinterpret_cast<char*>(&other->auto_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestSetAutoSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestSetAutoSelect::_Internal {
 public:
};

SCChestSetAutoSelect::SCChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCChestSetAutoSelect)
}
SCChestSetAutoSelect::SCChestSetAutoSelect(const SCChestSetAutoSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_option_, &from.auto_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
    reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCChestSetAutoSelect)
}

void SCChestSetAutoSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto_option_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
}

SCChestSetAutoSelect::~SCChestSetAutoSelect() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCChestSetAutoSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestSetAutoSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestSetAutoSelect::ArenaDtor(void* object) {
  SCChestSetAutoSelect* _this = reinterpret_cast< SCChestSetAutoSelect* >(object);
  (void)_this;
}
void SCChestSetAutoSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestSetAutoSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestSetAutoSelect& SCChestSetAutoSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestSetAutoSelect_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCChestSetAutoSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestSetAutoSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlaneWar.ChestAutoSelectOption auto_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::PlaneWar::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestSetAutoSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlaneWar.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_option(), target);
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCChestSetAutoSelect)
  return target;
}

size_t SCChestSetAutoSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCChestSetAutoSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlaneWar.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestSetAutoSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestSetAutoSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestSetAutoSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCChestSetAutoSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCChestSetAutoSelect)
    MergeFrom(*source);
  }
}

void SCChestSetAutoSelect::MergeFrom(const SCChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
}

void SCChestSetAutoSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestSetAutoSelect::CopyFrom(const SCChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestSetAutoSelect::IsInitialized() const {
  return true;
}

void SCChestSetAutoSelect::InternalSwap(SCChestSetAutoSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChestSetAutoSelect, auto_open_)
      + sizeof(SCChestSetAutoSelect::auto_open_)
      - PROTOBUF_FIELD_OFFSET(SCChestSetAutoSelect, auto_option_)>(
          reinterpret_cast<char*>(&auto_option_),
          reinterpret_cast<char*>(&other->auto_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestSetAutoSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestSetEnable::_Internal {
 public:
};

CSChestSetEnable::CSChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSChestSetEnable)
}
CSChestSetEnable::CSChestSetEnable(const CSChestSetEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_enable_ = from.is_enable_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSChestSetEnable)
}

void CSChestSetEnable::SharedCtor() {
  is_enable_ = false;
}

CSChestSetEnable::~CSChestSetEnable() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSChestSetEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestSetEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestSetEnable::ArenaDtor(void* object) {
  CSChestSetEnable* _this = reinterpret_cast< CSChestSetEnable* >(object);
  (void)_this;
}
void CSChestSetEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestSetEnable& CSChestSetEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestSetEnable_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSChestSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestSetEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestSetEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSChestSetEnable)
  return target;
}

size_t CSChestSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSChestSetEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestSetEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestSetEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestSetEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSChestSetEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSChestSetEnable)
    MergeFrom(*source);
  }
}

void CSChestSetEnable::MergeFrom(const CSChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void CSChestSetEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestSetEnable::CopyFrom(const CSChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestSetEnable::IsInitialized() const {
  return true;
}

void CSChestSetEnable::InternalSwap(CSChestSetEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_enable_, other->is_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestSetEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestSetEnable::_Internal {
 public:
};

SCChestSetEnable::SCChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCChestSetEnable)
}
SCChestSetEnable::SCChestSetEnable(const SCChestSetEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_enable_ = from.is_enable_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCChestSetEnable)
}

void SCChestSetEnable::SharedCtor() {
  is_enable_ = false;
}

SCChestSetEnable::~SCChestSetEnable() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCChestSetEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestSetEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestSetEnable::ArenaDtor(void* object) {
  SCChestSetEnable* _this = reinterpret_cast< SCChestSetEnable* >(object);
  (void)_this;
}
void SCChestSetEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestSetEnable& SCChestSetEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestSetEnable_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCChestSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestSetEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestSetEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCChestSetEnable)
  return target;
}

size_t SCChestSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCChestSetEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestSetEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestSetEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestSetEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCChestSetEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCChestSetEnable)
    MergeFrom(*source);
  }
}

void SCChestSetEnable::MergeFrom(const SCChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void SCChestSetEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestSetEnable::CopyFrom(const SCChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestSetEnable::IsInitialized() const {
  return true;
}

void SCChestSetEnable::InternalSwap(SCChestSetEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_enable_, other->is_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestSetEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCWaterDropInfo::_Internal {
 public:
};

SCWaterDropInfo::SCWaterDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCWaterDropInfo)
}
SCWaterDropInfo::SCWaterDropInfo(const SCWaterDropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragmentcount_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(fragmentcount_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCWaterDropInfo)
}

void SCWaterDropInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fragmentcount_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(fragmentcount_));
}

SCWaterDropInfo::~SCWaterDropInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCWaterDropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCWaterDropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCWaterDropInfo::ArenaDtor(void* object) {
  SCWaterDropInfo* _this = reinterpret_cast< SCWaterDropInfo* >(object);
  (void)_this;
}
void SCWaterDropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCWaterDropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCWaterDropInfo& SCWaterDropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCWaterDropInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCWaterDropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCWaterDropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentcount_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(fragmentcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCWaterDropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dropCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dropcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fragmentCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fragmentcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCWaterDropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCWaterDropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 dropCount = 2;
  if (this->dropcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dropcount(), target);
  }

  // int32 fragmentCount = 3;
  if (this->fragmentcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fragmentcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCWaterDropInfo)
  return target;
}

size_t SCWaterDropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCWaterDropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 dropCount = 2;
  if (this->dropcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropcount());
  }

  // int32 fragmentCount = 3;
  if (this->fragmentcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fragmentcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCWaterDropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCWaterDropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCWaterDropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCWaterDropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCWaterDropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCWaterDropInfo)
    MergeFrom(*source);
  }
}

void SCWaterDropInfo::MergeFrom(const SCWaterDropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCWaterDropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.dropcount() != 0) {
    _internal_set_dropcount(from._internal_dropcount());
  }
  if (from.fragmentcount() != 0) {
    _internal_set_fragmentcount(from._internal_fragmentcount());
  }
}

void SCWaterDropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCWaterDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCWaterDropInfo::CopyFrom(const SCWaterDropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCWaterDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCWaterDropInfo::IsInitialized() const {
  return true;
}

void SCWaterDropInfo::InternalSwap(SCWaterDropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCWaterDropInfo, fragmentcount_)
      + sizeof(SCWaterDropInfo::fragmentcount_)
      - PROTOBUF_FIELD_OFFSET(SCWaterDropInfo, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCWaterDropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextInfo::_Internal {
 public:
};

TextInfo::TextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.TextInfo)
}
TextInfo::TextInfo(const TextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:PlaneWar.TextInfo)
}

void TextInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextInfo_PlaneWar_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

TextInfo::~TextInfo() {
  // @@protoc_insertion_point(destructor:PlaneWar.TextInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextInfo::ArenaDtor(void* object) {
  TextInfo* _this = reinterpret_cast< TextInfo* >(object);
  (void)_this;
}
void TextInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextInfo& TextInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextInfo_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void TextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.TextInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlaneWar.TextInfo.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.TextInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlaneWar.TextInfo.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.TextInfo)
  return target;
}

size_t TextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.TextInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.TextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TextInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.TextInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.TextInfo)
    MergeFrom(*source);
  }
}

void TextInfo::MergeFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.TextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void TextInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextInfo::CopyFrom(const TextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextInfo::IsInitialized() const {
  return true;
}

void TextInfo::InternalSwap(TextInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncTextConfig::_Internal {
 public:
};

CSSyncTextConfig::CSSyncTextConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.CSSyncTextConfig)
}
CSSyncTextConfig::CSSyncTextConfig(const CSSyncTextConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startidx_, &from.startidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&endidx_) -
    reinterpret_cast<char*>(&startidx_)) + sizeof(endidx_));
  // @@protoc_insertion_point(copy_constructor:PlaneWar.CSSyncTextConfig)
}

void CSSyncTextConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&startidx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&endidx_) -
      reinterpret_cast<char*>(&startidx_)) + sizeof(endidx_));
}

CSSyncTextConfig::~CSSyncTextConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.CSSyncTextConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncTextConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncTextConfig::ArenaDtor(void* object) {
  CSSyncTextConfig* _this = reinterpret_cast< CSSyncTextConfig* >(object);
  (void)_this;
}
void CSSyncTextConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncTextConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncTextConfig& CSSyncTextConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncTextConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void CSSyncTextConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.CSSyncTextConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endidx_) -
      reinterpret_cast<char*>(&startidx_)) + sizeof(endidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncTextConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 startIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncTextConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.CSSyncTextConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startIdx = 1;
  if (this->startidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_startidx(), target);
  }

  // int32 endIdx = 2;
  if (this->endidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_endidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.CSSyncTextConfig)
  return target;
}

size_t CSSyncTextConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.CSSyncTextConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 startIdx = 1;
  if (this->startidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_startidx());
  }

  // int32 endIdx = 2;
  if (this->endidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncTextConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.CSSyncTextConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncTextConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncTextConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.CSSyncTextConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.CSSyncTextConfig)
    MergeFrom(*source);
  }
}

void CSSyncTextConfig::MergeFrom(const CSSyncTextConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.CSSyncTextConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startidx() != 0) {
    _internal_set_startidx(from._internal_startidx());
  }
  if (from.endidx() != 0) {
    _internal_set_endidx(from._internal_endidx());
  }
}

void CSSyncTextConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.CSSyncTextConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncTextConfig::CopyFrom(const CSSyncTextConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.CSSyncTextConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncTextConfig::IsInitialized() const {
  return true;
}

void CSSyncTextConfig::InternalSwap(CSSyncTextConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncTextConfig, endidx_)
      + sizeof(CSSyncTextConfig::endidx_)
      - PROTOBUF_FIELD_OFFSET(CSSyncTextConfig, startidx_)>(
          reinterpret_cast<char*>(&startidx_),
          reinterpret_cast<char*>(&other->startidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncTextConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncTextConfig::_Internal {
 public:
};

SCSyncTextConfig::SCSyncTextConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  textlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlaneWar.SCSyncTextConfig)
}
SCSyncTextConfig::SCSyncTextConfig(const SCSyncTextConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      textlist_(from.textlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlaneWar.SCSyncTextConfig)
}

void SCSyncTextConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncTextConfig_PlaneWar_2eproto.base);
}

SCSyncTextConfig::~SCSyncTextConfig() {
  // @@protoc_insertion_point(destructor:PlaneWar.SCSyncTextConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncTextConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncTextConfig::ArenaDtor(void* object) {
  SCSyncTextConfig* _this = reinterpret_cast< SCSyncTextConfig* >(object);
  (void)_this;
}
void SCSyncTextConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncTextConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncTextConfig& SCSyncTextConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncTextConfig_PlaneWar_2eproto.base);
  return *internal_default_instance();
}


void SCSyncTextConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaneWar.SCSyncTextConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncTextConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlaneWar.TextInfo textList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncTextConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaneWar.SCSyncTextConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlaneWar.TextInfo textList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_textlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_textlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlaneWar.SCSyncTextConfig)
  return target;
}

size_t SCSyncTextConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaneWar.SCSyncTextConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlaneWar.TextInfo textList = 1;
  total_size += 1UL * this->_internal_textlist_size();
  for (const auto& msg : this->textlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncTextConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaneWar.SCSyncTextConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncTextConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncTextConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaneWar.SCSyncTextConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaneWar.SCSyncTextConfig)
    MergeFrom(*source);
  }
}

void SCSyncTextConfig::MergeFrom(const SCSyncTextConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaneWar.SCSyncTextConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textlist_.MergeFrom(from.textlist_);
}

void SCSyncTextConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaneWar.SCSyncTextConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncTextConfig::CopyFrom(const SCSyncTextConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaneWar.SCSyncTextConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncTextConfig::IsInitialized() const {
  return true;
}

void SCSyncTextConfig::InternalSwap(SCSyncTextConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  textlist_.InternalSwap(&other->textlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncTextConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PlaneWar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlaneWar::Decimal* Arena::CreateMaybeMessage< ::PlaneWar::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SC_SceneInfo* Arena::CreateMaybeMessage< ::PlaneWar::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSLogin* Arena::CreateMaybeMessage< ::PlaneWar::CSLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCLogin* Arena::CreateMaybeMessage< ::PlaneWar::SCLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSLogout* Arena::CreateMaybeMessage< ::PlaneWar::CSLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCLogout* Arena::CreateMaybeMessage< ::PlaneWar::SCLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CommonPropInfo* Arena::CreateMaybeMessage< ::PlaneWar::CommonPropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CommonPropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::Pos* Arena::CreateMaybeMessage< ::PlaneWar::Pos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::BuffInfo* Arena::CreateMaybeMessage< ::PlaneWar::BuffInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::BuffInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::BlackHoleInfo* Arena::CreateMaybeMessage< ::PlaneWar::BlackHoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::BlackHoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::FormInfo* Arena::CreateMaybeMessage< ::PlaneWar::FormInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::FormInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::LockInfo* Arena::CreateMaybeMessage< ::PlaneWar::LockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::LockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::HitMode* Arena::CreateMaybeMessage< ::PlaneWar::HitMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::HitMode >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WeaponState* Arena::CreateMaybeMessage< ::PlaneWar::WeaponState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WeaponState >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SettleInfo* Arena::CreateMaybeMessage< ::PlaneWar::SettleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SettleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GunInfo* Arena::CreateMaybeMessage< ::PlaneWar::GunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::FlameInfo* Arena::CreateMaybeMessage< ::PlaneWar::FlameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::FlameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::BeeInfo* Arena::CreateMaybeMessage< ::PlaneWar::BeeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::BeeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WeaponInfo* Arena::CreateMaybeMessage< ::PlaneWar::WeaponInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WeaponInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SpecEffect* Arena::CreateMaybeMessage< ::PlaneWar::SpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::Dice* Arena::CreateMaybeMessage< ::PlaneWar::Dice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::Dice >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::DiceInfo* Arena::CreateMaybeMessage< ::PlaneWar::DiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::DiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::StateInfo* Arena::CreateMaybeMessage< ::PlaneWar::StateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::StateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MissileInfo* Arena::CreateMaybeMessage< ::PlaneWar::MissileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MissileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PiggyInfo* Arena::CreateMaybeMessage< ::PlaneWar::PiggyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PiggyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ArenaPieceInfo* Arena::CreateMaybeMessage< ::PlaneWar::ArenaPieceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ArenaPieceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PieceInfo* Arena::CreateMaybeMessage< ::PlaneWar::PieceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PieceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RouletteInfo* Arena::CreateMaybeMessage< ::PlaneWar::RouletteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RouletteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::EffectInfo* Arena::CreateMaybeMessage< ::PlaneWar::EffectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::EffectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PlayerInfo* Arena::CreateMaybeMessage< ::PlaneWar::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PlaneSpecEffect* Arena::CreateMaybeMessage< ::PlaneWar::PlaneSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PlaneSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WingsSpecEffect* Arena::CreateMaybeMessage< ::PlaneWar::WingsSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WingsSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PlaneInfo* Arena::CreateMaybeMessage< ::PlaneWar::PlaneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PlaneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::InteractionItem* Arena::CreateMaybeMessage< ::PlaneWar::InteractionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::InteractionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RankStatusInfo* Arena::CreateMaybeMessage< ::PlaneWar::RankStatusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RankStatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WingsInfo* Arena::CreateMaybeMessage< ::PlaneWar::WingsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WingsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RoomInfo* Arena::CreateMaybeMessage< ::PlaneWar::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSReady* Arena::CreateMaybeMessage< ::PlaneWar::CSReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSReady >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCReady* Arena::CreateMaybeMessage< ::PlaneWar::SCReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCReady >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUserEnterNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCUserEnterNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUserEnterNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MonsterInfo* Arena::CreateMaybeMessage< ::PlaneWar::MonsterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MonsterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMonsterSpawn* Arena::CreateMaybeMessage< ::PlaneWar::SCMonsterSpawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMonsterSpawn >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSShot* Arena::CreateMaybeMessage< ::PlaneWar::CSShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSShot >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCShot* Arena::CreateMaybeMessage< ::PlaneWar::SCShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCShot >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSLock* Arena::CreateMaybeMessage< ::PlaneWar::CSLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSLock >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCLock* Arena::CreateMaybeMessage< ::PlaneWar::SCLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCLock >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::Poker* Arena::CreateMaybeMessage< ::PlaneWar::Poker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::Poker >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::DropPoker* Arena::CreateMaybeMessage< ::PlaneWar::DropPoker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::DropPoker >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::TriggerBullet* Arena::CreateMaybeMessage< ::PlaneWar::TriggerBullet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::TriggerBullet >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::Roulette* Arena::CreateMaybeMessage< ::PlaneWar::Roulette >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::Roulette >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::DropBuff* Arena::CreateMaybeMessage< ::PlaneWar::DropBuff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::DropBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::FakeTresureInfo* Arena::CreateMaybeMessage< ::PlaneWar::FakeTresureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::FakeTresureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::TreasureInfo* Arena::CreateMaybeMessage< ::PlaneWar::TreasureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::TreasureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::FortuneWheelInfo* Arena::CreateMaybeMessage< ::PlaneWar::FortuneWheelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::FortuneWheelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ToadInfo* Arena::CreateMaybeMessage< ::PlaneWar::ToadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ToadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::FortuneConfig* Arena::CreateMaybeMessage< ::PlaneWar::FortuneConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::FortuneConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::BeeConfig* Arena::CreateMaybeMessage< ::PlaneWar::BeeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::BeeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CommonReplayConfig* Arena::CreateMaybeMessage< ::PlaneWar::CommonReplayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CommonReplayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GlobalReplayConfig* Arena::CreateMaybeMessage< ::PlaneWar::GlobalReplayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GlobalReplayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PersonalReplayConfig* Arena::CreateMaybeMessage< ::PlaneWar::PersonalReplayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PersonalReplayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ReplayConfig* Arena::CreateMaybeMessage< ::PlaneWar::ReplayConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ReplayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ConnMonsterInfo* Arena::CreateMaybeMessage< ::PlaneWar::ConnMonsterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ConnMonsterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSHit* Arena::CreateMaybeMessage< ::PlaneWar::CSHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSHit >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCHit* Arena::CreateMaybeMessage< ::PlaneWar::SCHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCHit >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSMonsterDestory* Arena::CreateMaybeMessage< ::PlaneWar::CSMonsterDestory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSMonsterDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMonsterDestory* Arena::CreateMaybeMessage< ::PlaneWar::SCMonsterDestory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMonsterDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSTransform* Arena::CreateMaybeMessage< ::PlaneWar::CSTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCTransform* Arena::CreateMaybeMessage< ::PlaneWar::SCTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSPlanePosSync* Arena::CreateMaybeMessage< ::PlaneWar::CSPlanePosSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSPlanePosSync >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPlanePosSync* Arena::CreateMaybeMessage< ::PlaneWar::SCPlanePosSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPlanePosSync >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCStateEnd* Arena::CreateMaybeMessage< ::PlaneWar::SCStateEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCStateEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSModRatio* Arena::CreateMaybeMessage< ::PlaneWar::CSModRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSModRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCModRatio* Arena::CreateMaybeMessage< ::PlaneWar::SCModRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCModRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGainNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCGainNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGainNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGainSettle* Arena::CreateMaybeMessage< ::PlaneWar::SCGainSettle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGainSettle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSetPlane* Arena::CreateMaybeMessage< ::PlaneWar::CSSetPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSetPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSetPlane* Arena::CreateMaybeMessage< ::PlaneWar::SCSetPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSetPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSwitchBackGround* Arena::CreateMaybeMessage< ::PlaneWar::CSSwitchBackGround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSwitchBackGround >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSwitchBackGround* Arena::CreateMaybeMessage< ::PlaneWar::SCSwitchBackGround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSwitchBackGround >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MonsterPath* Arena::CreateMaybeMessage< ::PlaneWar::MonsterPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MonsterPath >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncMonsterInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncMonsterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncMonsterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ScratchInfo* Arena::CreateMaybeMessage< ::PlaneWar::ScratchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ScratchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSScratchCardList* Arena::CreateMaybeMessage< ::PlaneWar::CSScratchCardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSScratchCardList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCScratchCardList* Arena::CreateMaybeMessage< ::PlaneWar::SCScratchCardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCScratchCardList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUseScratchCard* Arena::CreateMaybeMessage< ::PlaneWar::CSUseScratchCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUseScratchCard >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUseScratchCard* Arena::CreateMaybeMessage< ::PlaneWar::SCUseScratchCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUseScratchCard >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSExplodeSettle* Arena::CreateMaybeMessage< ::PlaneWar::CSExplodeSettle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSExplodeSettle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCExplodeSettle* Arena::CreateMaybeMessage< ::PlaneWar::SCExplodeSettle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCExplodeSettle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSFallIntoBlackHole* Arena::CreateMaybeMessage< ::PlaneWar::CSFallIntoBlackHole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSFallIntoBlackHole >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCFallIntoBlackHole* Arena::CreateMaybeMessage< ::PlaneWar::SCFallIntoBlackHole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCFallIntoBlackHole >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSyncBlackHolePos* Arena::CreateMaybeMessage< ::PlaneWar::CSSyncBlackHolePos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSyncBlackHolePos >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncBlackHolePos* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncBlackHolePos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncBlackHolePos >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSInteraction* Arena::CreateMaybeMessage< ::PlaneWar::CSInteraction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSInteraction >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCInteraction* Arena::CreateMaybeMessage< ::PlaneWar::SCInteraction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCInteraction >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::JumpHighArena* Arena::CreateMaybeMessage< ::PlaneWar::JumpHighArena >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::JumpHighArena >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PoolArenaLimit* Arena::CreateMaybeMessage< ::PlaneWar::PoolArenaLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PoolArenaLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCActivityInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetTaskReward* Arena::CreateMaybeMessage< ::PlaneWar::CSGetTaskReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetTaskReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetTaskReward* Arena::CreateMaybeMessage< ::PlaneWar::SCGetTaskReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetTaskReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetTaskInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSGetTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetTaskInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCGetTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCNoticeInfoChange* Arena::CreateMaybeMessage< ::PlaneWar::SCNoticeInfoChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCNoticeInfoChange >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ProsInfo* Arena::CreateMaybeMessage< ::PlaneWar::ProsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ProsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCNoticeHallProsChange* Arena::CreateMaybeMessage< ::PlaneWar::SCNoticeHallProsChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCNoticeHallProsChange >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::TimingMonster* Arena::CreateMaybeMessage< ::PlaneWar::TimingMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::TimingMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCNoticeTimingMonster* Arena::CreateMaybeMessage< ::PlaneWar::SCNoticeTimingMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCNoticeTimingMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSPiggyBankInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSPiggyBankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSPiggyBankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPiggyBankInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCPiggyBankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPiggyBankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PiggyReward* Arena::CreateMaybeMessage< ::PlaneWar::PiggyReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PiggyReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSOpenPiggyBank* Arena::CreateMaybeMessage< ::PlaneWar::CSOpenPiggyBank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSOpenPiggyBank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCOpenPiggyBank* Arena::CreateMaybeMessage< ::PlaneWar::SCOpenPiggyBank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCOpenPiggyBank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSPiggyBankOpenFinish* Arena::CreateMaybeMessage< ::PlaneWar::CSPiggyBankOpenFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSPiggyBankOpenFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPiggyBankOpenFinish* Arena::CreateMaybeMessage< ::PlaneWar::SCPiggyBankOpenFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPiggyBankOpenFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPiggyBankChangeNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCPiggyBankChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPiggyBankChangeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSetPersonalPoolEnable* Arena::CreateMaybeMessage< ::PlaneWar::CSSetPersonalPoolEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSetPersonalPoolEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSetPersonalPoolEnable* Arena::CreateMaybeMessage< ::PlaneWar::SCSetPersonalPoolEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSetPersonalPoolEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSPersonalPoolInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSPersonalPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSPersonalPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PersonalPoolReward* Arena::CreateMaybeMessage< ::PlaneWar::PersonalPoolReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PersonalPoolReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PersonalPoolLevelInfo* Arena::CreateMaybeMessage< ::PlaneWar::PersonalPoolLevelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PersonalPoolLevelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PersonalPoolLuckyInfo* Arena::CreateMaybeMessage< ::PlaneWar::PersonalPoolLuckyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PersonalPoolLuckyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPersonalPoolInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCPersonalPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPersonalPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSDrawPersonalPool* Arena::CreateMaybeMessage< ::PlaneWar::CSDrawPersonalPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSDrawPersonalPool >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUpgradePoolReward* Arena::CreateMaybeMessage< ::PlaneWar::CSUpgradePoolReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUpgradePoolReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUpgradePoolReward* Arena::CreateMaybeMessage< ::PlaneWar::SCUpgradePoolReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUpgradePoolReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetPoolLuckyReward* Arena::CreateMaybeMessage< ::PlaneWar::CSGetPoolLuckyReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetPoolLuckyReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetPoolLuckyReward* Arena::CreateMaybeMessage< ::PlaneWar::SCGetPoolLuckyReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetPoolLuckyReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPersonalPoolChangeNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCPersonalPoolChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPersonalPoolChangeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUseMissile* Arena::CreateMaybeMessage< ::PlaneWar::CSUseMissile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUseMissile >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUseMissile* Arena::CreateMaybeMessage< ::PlaneWar::SCUseMissile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUseMissile >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSMonsterCall* Arena::CreateMaybeMessage< ::PlaneWar::CSMonsterCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSMonsterCall >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMonsterCall* Arena::CreateMaybeMessage< ::PlaneWar::SCMonsterCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMonsterCall >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSClickStatic* Arena::CreateMaybeMessage< ::PlaneWar::CSClickStatic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSClickStatic >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCClickStatic* Arena::CreateMaybeMessage< ::PlaneWar::SCClickStatic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCClickStatic >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RankInfo* Arena::CreateMaybeMessage< ::PlaneWar::RankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MyRankInfo* Arena::CreateMaybeMessage< ::PlaneWar::MyRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MyRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSRankList* Arena::CreateMaybeMessage< ::PlaneWar::CSRankList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSRankList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRankList* Arena::CreateMaybeMessage< ::PlaneWar::SCRankList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRankList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::TitleInfo* Arena::CreateMaybeMessage< ::PlaneWar::TitleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::TitleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCTitleList* Arena::CreateMaybeMessage< ::PlaneWar::SCTitleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCTitleList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSelectTitle* Arena::CreateMaybeMessage< ::PlaneWar::CSSelectTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSelectTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSelectTitle* Arena::CreateMaybeMessage< ::PlaneWar::SCSelectTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSelectTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCTitleActiveNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCTitleActiveNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCTitleActiveNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRoomInfoChangeNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCRoomInfoChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRoomInfoChangeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSMatchBrief* Arena::CreateMaybeMessage< ::PlaneWar::CSMatchBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSMatchBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMatchBrief* Arena::CreateMaybeMessage< ::PlaneWar::SCMatchBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMatchBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSMatchDetail* Arena::CreateMaybeMessage< ::PlaneWar::CSMatchDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSMatchDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MatchSubInfo* Arena::CreateMaybeMessage< ::PlaneWar::MatchSubInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MatchSubInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MatchRewardItem* Arena::CreateMaybeMessage< ::PlaneWar::MatchRewardItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MatchRewardItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MatchRankInfo* Arena::CreateMaybeMessage< ::PlaneWar::MatchRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MatchRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MatchTask* Arena::CreateMaybeMessage< ::PlaneWar::MatchTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MatchTask >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMatchDetail* Arena::CreateMaybeMessage< ::PlaneWar::SCMatchDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMatchDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSMatchReward* Arena::CreateMaybeMessage< ::PlaneWar::CSMatchReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSMatchReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RankReward* Arena::CreateMaybeMessage< ::PlaneWar::RankReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RankReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMatchReward* Arena::CreateMaybeMessage< ::PlaneWar::SCMatchReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMatchReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::MyMatchReward* Arena::CreateMaybeMessage< ::PlaneWar::MyMatchReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::MyMatchReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCMatchRewardNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCMatchRewardNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCMatchRewardNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGiftList* Arena::CreateMaybeMessage< ::PlaneWar::CSGiftList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGiftList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GiftInfo* Arena::CreateMaybeMessage< ::PlaneWar::GiftInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GiftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGiftList* Arena::CreateMaybeMessage< ::PlaneWar::SCGiftList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGiftList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGiftExpireNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCGiftExpireNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGiftExpireNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetMatchTaskReward* Arena::CreateMaybeMessage< ::PlaneWar::CSGetMatchTaskReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetMatchTaskReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetMatchTaskReward* Arena::CreateMaybeMessage< ::PlaneWar::SCGetMatchTaskReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetMatchTaskReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WeaponUseCondition* Arena::CreateMaybeMessage< ::PlaneWar::WeaponUseCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WeaponUseCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WeaponConfig* Arena::CreateMaybeMessage< ::PlaneWar::WeaponConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WeaponConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSWeaponPieceInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSWeaponPieceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSWeaponPieceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PiecesStackLimitInfo* Arena::CreateMaybeMessage< ::PlaneWar::PiecesStackLimitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PiecesStackLimitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCWeaponPieceInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCWeaponPieceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCWeaponPieceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSBuyWeapon* Arena::CreateMaybeMessage< ::PlaneWar::CSBuyWeapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSBuyWeapon >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCBuyWeapon* Arena::CreateMaybeMessage< ::PlaneWar::SCBuyWeapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCBuyWeapon >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::EarnRecord* Arena::CreateMaybeMessage< ::PlaneWar::EarnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::EarnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSWeaponEarnRecord* Arena::CreateMaybeMessage< ::PlaneWar::CSWeaponEarnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSWeaponEarnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCWeaponEarnRecord* Arena::CreateMaybeMessage< ::PlaneWar::SCWeaponEarnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCWeaponEarnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSStateForceSettle* Arena::CreateMaybeMessage< ::PlaneWar::CSStateForceSettle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSStateForceSettle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCStateForceSettle* Arena::CreateMaybeMessage< ::PlaneWar::SCStateForceSettle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCStateForceSettle >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCAddMissedBullet* Arena::CreateMaybeMessage< ::PlaneWar::SCAddMissedBullet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCAddMissedBullet >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUpdateBulletData* Arena::CreateMaybeMessage< ::PlaneWar::CSUpdateBulletData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUpdateBulletData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUpdateBulletData* Arena::CreateMaybeMessage< ::PlaneWar::SCUpdateBulletData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUpdateBulletData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUseMissileBatch* Arena::CreateMaybeMessage< ::PlaneWar::CSUseMissileBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUseMissileBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUseMissileBatch* Arena::CreateMaybeMessage< ::PlaneWar::SCUseMissileBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUseMissileBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSyncPropsToHall* Arena::CreateMaybeMessage< ::PlaneWar::CSSyncPropsToHall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSyncPropsToHall >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncPropsToHall* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncPropsToHall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncPropsToHall >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSChangeTable* Arena::CreateMaybeMessage< ::PlaneWar::CSChangeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSChangeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCChangeTable* Arena::CreateMaybeMessage< ::PlaneWar::SCChangeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCChangeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUseRoulette* Arena::CreateMaybeMessage< ::PlaneWar::CSUseRoulette >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUseRoulette >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUseRoulette* Arena::CreateMaybeMessage< ::PlaneWar::SCUseRoulette >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUseRoulette >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSRedEnvelopePoint* Arena::CreateMaybeMessage< ::PlaneWar::CSRedEnvelopePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSRedEnvelopePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RedOpenInfo* Arena::CreateMaybeMessage< ::PlaneWar::RedOpenInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RedOpenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRedEnvelopePoint* Arena::CreateMaybeMessage< ::PlaneWar::SCRedEnvelopePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRedEnvelopePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSRedEnvelopeInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSRedEnvelopeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSRedEnvelopeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RedInfo* Arena::CreateMaybeMessage< ::PlaneWar::RedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRedEnvelopeInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCRedEnvelopeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRedEnvelopeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSOpenRedEnvelope* Arena::CreateMaybeMessage< ::PlaneWar::CSOpenRedEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSOpenRedEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RedUpgradeInfo* Arena::CreateMaybeMessage< ::PlaneWar::RedUpgradeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RedUpgradeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCOpenRedEnvelope* Arena::CreateMaybeMessage< ::PlaneWar::SCOpenRedEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCOpenRedEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSUpgradeRedEnvelope* Arena::CreateMaybeMessage< ::PlaneWar::CSUpgradeRedEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSUpgradeRedEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUpgradeRedEnvelope* Arena::CreateMaybeMessage< ::PlaneWar::SCUpgradeRedEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUpgradeRedEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSCommonRedEnvelopeInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSCommonRedEnvelopeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSCommonRedEnvelopeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CommonRedInfo* Arena::CreateMaybeMessage< ::PlaneWar::CommonRedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CommonRedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCCommonRedEnvelopeInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCCommonRedEnvelopeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCCommonRedEnvelopeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSOpenCommonRedEnvelope* Arena::CreateMaybeMessage< ::PlaneWar::CSOpenCommonRedEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSOpenCommonRedEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCOpenCommonRedEnvelope* Arena::CreateMaybeMessage< ::PlaneWar::SCOpenCommonRedEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCOpenCommonRedEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RedRankPlayerInfo* Arena::CreateMaybeMessage< ::PlaneWar::RedRankPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RedRankPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGrantCommonRedEnvelopeRank* Arena::CreateMaybeMessage< ::PlaneWar::CSGrantCommonRedEnvelopeRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGrantCommonRedEnvelopeRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GrantRankItem* Arena::CreateMaybeMessage< ::PlaneWar::GrantRankItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GrantRankItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGrantCommonRedEnvelopeRank* Arena::CreateMaybeMessage< ::PlaneWar::SCGrantCommonRedEnvelopeRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGrantCommonRedEnvelopeRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSOpenCommonRedEnvelopeRank* Arena::CreateMaybeMessage< ::PlaneWar::CSOpenCommonRedEnvelopeRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSOpenCommonRedEnvelopeRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::OpenRankItem* Arena::CreateMaybeMessage< ::PlaneWar::OpenRankItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::OpenRankItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCOpenCommonRedEnvelopeRank* Arena::CreateMaybeMessage< ::PlaneWar::SCOpenCommonRedEnvelopeRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCOpenCommonRedEnvelopeRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGrantCommonRedEnvelopeRecord* Arena::CreateMaybeMessage< ::PlaneWar::CSGrantCommonRedEnvelopeRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGrantCommonRedEnvelopeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GrantRecord* Arena::CreateMaybeMessage< ::PlaneWar::GrantRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GrantRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGrantCommonRedEnvelopeRecord* Arena::CreateMaybeMessage< ::PlaneWar::SCGrantCommonRedEnvelopeRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGrantCommonRedEnvelopeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSOpenCommonRedEnvelopeRecord* Arena::CreateMaybeMessage< ::PlaneWar::CSOpenCommonRedEnvelopeRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSOpenCommonRedEnvelopeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::OpenRecord* Arena::CreateMaybeMessage< ::PlaneWar::OpenRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::OpenRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCOpenCommonRedEnvelopeRecord* Arena::CreateMaybeMessage< ::PlaneWar::SCOpenCommonRedEnvelopeRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCOpenCommonRedEnvelopeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRedEnvelopeOpStatusNotify* Arena::CreateMaybeMessage< ::PlaneWar::SCRedEnvelopeOpStatusNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRedEnvelopeOpStatusNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSyncWeaponState* Arena::CreateMaybeMessage< ::PlaneWar::CSSyncWeaponState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSyncWeaponState >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncWeaponState* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncWeaponState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncWeaponState >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSPreHit* Arena::CreateMaybeMessage< ::PlaneWar::CSPreHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSPreHit >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCPreHit* Arena::CreateMaybeMessage< ::PlaneWar::SCPreHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCPreHit >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::Animation* Arena::CreateMaybeMessage< ::PlaneWar::Animation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::Animation >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::DiceJson* Arena::CreateMaybeMessage< ::PlaneWar::DiceJson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::DiceJson >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::FortuneWheelJson* Arena::CreateMaybeMessage< ::PlaneWar::FortuneWheelJson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::FortuneWheelJson >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GoldenToadJson* Arena::CreateMaybeMessage< ::PlaneWar::GoldenToadJson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GoldenToadJson >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::OrderData* Arena::CreateMaybeMessage< ::PlaneWar::OrderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::OrderData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSyncAnimation* Arena::CreateMaybeMessage< ::PlaneWar::CSSyncAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSyncAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncAnimation* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetAnimations* Arena::CreateMaybeMessage< ::PlaneWar::SCGetAnimations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetAnimations >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GradeRankDetail* Arena::CreateMaybeMessage< ::PlaneWar::GradeRankDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GradeRankDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GradeRankConfig* Arena::CreateMaybeMessage< ::PlaneWar::GradeRankConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GradeRankConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WareGivingInfo* Arena::CreateMaybeMessage< ::PlaneWar::WareGivingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WareGivingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::WareInfo* Arena::CreateMaybeMessage< ::PlaneWar::WareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::WareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ExtraGradeRewardInfo* Arena::CreateMaybeMessage< ::PlaneWar::ExtraGradeRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ExtraGradeRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::RankWareConfig* Arena::CreateMaybeMessage< ::PlaneWar::RankWareConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::RankWareConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::DiceConfig* Arena::CreateMaybeMessage< ::PlaneWar::DiceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::DiceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSyncConfigs* Arena::CreateMaybeMessage< ::PlaneWar::CSSyncConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSyncConfigs >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncConfigs* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncConfigs >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSConfirmWeaponExist* Arena::CreateMaybeMessage< ::PlaneWar::CSConfirmWeaponExist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSConfirmWeaponExist >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCConfirmWeaponExist* Arena::CreateMaybeMessage< ::PlaneWar::SCConfirmWeaponExist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCConfirmWeaponExist >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetVideo* Arena::CreateMaybeMessage< ::PlaneWar::CSGetVideo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetVideo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetVideo* Arena::CreateMaybeMessage< ::PlaneWar::SCGetVideo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetVideo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::VideoCommon* Arena::CreateMaybeMessage< ::PlaneWar::VideoCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::VideoCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GlobalVideoInfo* Arena::CreateMaybeMessage< ::PlaneWar::GlobalVideoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GlobalVideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SelfVideoInfo* Arena::CreateMaybeMessage< ::PlaneWar::SelfVideoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SelfVideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSelfVideoRecord* Arena::CreateMaybeMessage< ::PlaneWar::CSSelfVideoRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSelfVideoRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSelfVideoRecord* Arena::CreateMaybeMessage< ::PlaneWar::SCSelfVideoRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSelfVideoRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSVideoRank* Arena::CreateMaybeMessage< ::PlaneWar::CSVideoRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSVideoRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCVideoRank* Arena::CreateMaybeMessage< ::PlaneWar::SCVideoRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCVideoRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ReceiveReward* Arena::CreateMaybeMessage< ::PlaneWar::ReceiveReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ReceiveReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSReceiveGradeReward* Arena::CreateMaybeMessage< ::PlaneWar::CSReceiveGradeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSReceiveGradeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCReceiveGradeReward* Arena::CreateMaybeMessage< ::PlaneWar::SCReceiveGradeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCReceiveGradeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GradeRewardDetail* Arena::CreateMaybeMessage< ::PlaneWar::GradeRewardDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GradeRewardDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GradeRewardInfo* Arena::CreateMaybeMessage< ::PlaneWar::GradeRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GradeRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::GradeRankInfo* Arena::CreateMaybeMessage< ::PlaneWar::GradeRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::GradeRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetTableUserInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSGetTableUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetTableUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetTableUserInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCGetTableUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetTableUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetGradeRewardInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSGetGradeRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetGradeRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetGradeRewardInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCGetGradeRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetGradeRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetGradeRankInfo* Arena::CreateMaybeMessage< ::PlaneWar::CSGetGradeRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetGradeRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetGradeRankInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCGetGradeRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetGradeRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRankUpgrade* Arena::CreateMaybeMessage< ::PlaneWar::SCRankUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRankUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSRankSeasonStatus* Arena::CreateMaybeMessage< ::PlaneWar::CSRankSeasonStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSRankSeasonStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCRankSeasonStatus* Arena::CreateMaybeMessage< ::PlaneWar::SCRankSeasonStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCRankSeasonStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncTime* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncTime >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCNoticePropsOverdue* Arena::CreateMaybeMessage< ::PlaneWar::SCNoticePropsOverdue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCNoticePropsOverdue >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PurchaseResult* Arena::CreateMaybeMessage< ::PlaneWar::PurchaseResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PurchaseResult >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSQueryPackagePurchase* Arena::CreateMaybeMessage< ::PlaneWar::CSQueryPackagePurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSQueryPackagePurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCQueryPackagePurchase* Arena::CreateMaybeMessage< ::PlaneWar::SCQueryPackagePurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCQueryPackagePurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PropsInfo* Arena::CreateMaybeMessage< ::PlaneWar::PropsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PropsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGamePurchasePush* Arena::CreateMaybeMessage< ::PlaneWar::SCGamePurchasePush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGamePurchasePush >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::PackageMarquee* Arena::CreateMaybeMessage< ::PlaneWar::PackageMarquee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::PackageMarquee >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSQueryPackageMarquee* Arena::CreateMaybeMessage< ::PlaneWar::CSQueryPackageMarquee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSQueryPackageMarquee >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCQueryPackageMarquee* Arena::CreateMaybeMessage< ::PlaneWar::SCQueryPackageMarquee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCQueryPackageMarquee >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSetWings* Arena::CreateMaybeMessage< ::PlaneWar::CSSetWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSetWings >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSetWings* Arena::CreateMaybeMessage< ::PlaneWar::SCSetWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSetWings >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSVerifySeasonChange* Arena::CreateMaybeMessage< ::PlaneWar::CSVerifySeasonChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSVerifySeasonChange >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCVerifySeasonChange* Arena::CreateMaybeMessage< ::PlaneWar::SCVerifySeasonChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCVerifySeasonChange >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSExistUnReceiveRankReward* Arena::CreateMaybeMessage< ::PlaneWar::CSExistUnReceiveRankReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSExistUnReceiveRankReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCExistUnReceiveRankReward* Arena::CreateMaybeMessage< ::PlaneWar::SCExistUnReceiveRankReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCExistUnReceiveRankReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSReceiveExtraGradeReward* Arena::CreateMaybeMessage< ::PlaneWar::CSReceiveExtraGradeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSReceiveExtraGradeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCReceiveExtraGradeReward* Arena::CreateMaybeMessage< ::PlaneWar::SCReceiveExtraGradeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCReceiveExtraGradeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSGetGradeRankList* Arena::CreateMaybeMessage< ::PlaneWar::CSGetGradeRankList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSGetGradeRankList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCGetGradeRankList* Arena::CreateMaybeMessage< ::PlaneWar::SCGetGradeRankList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCGetGradeRankList >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSBuyPlane* Arena::CreateMaybeMessage< ::PlaneWar::CSBuyPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSBuyPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCBuyPlane* Arena::CreateMaybeMessage< ::PlaneWar::SCBuyPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCBuyPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSBuyWings* Arena::CreateMaybeMessage< ::PlaneWar::CSBuyWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSBuyWings >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCBuyWings* Arena::CreateMaybeMessage< ::PlaneWar::SCBuyWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCBuyWings >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::OpenChestReward* Arena::CreateMaybeMessage< ::PlaneWar::OpenChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::OpenChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCUpdateChestStatus* Arena::CreateMaybeMessage< ::PlaneWar::SCUpdateChestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCUpdateChestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::ChestBrief* Arena::CreateMaybeMessage< ::PlaneWar::ChestBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::ChestBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCChestConfig* Arena::CreateMaybeMessage< ::PlaneWar::SCChestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCChestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCOpenChest* Arena::CreateMaybeMessage< ::PlaneWar::SCOpenChest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCOpenChest >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSelectChestReward* Arena::CreateMaybeMessage< ::PlaneWar::CSSelectChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSelectChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSChestSetAutoSelect* Arena::CreateMaybeMessage< ::PlaneWar::CSChestSetAutoSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSChestSetAutoSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCChestSetAutoSelect* Arena::CreateMaybeMessage< ::PlaneWar::SCChestSetAutoSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCChestSetAutoSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSChestSetEnable* Arena::CreateMaybeMessage< ::PlaneWar::CSChestSetEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSChestSetEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCChestSetEnable* Arena::CreateMaybeMessage< ::PlaneWar::SCChestSetEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCChestSetEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCWaterDropInfo* Arena::CreateMaybeMessage< ::PlaneWar::SCWaterDropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCWaterDropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::TextInfo* Arena::CreateMaybeMessage< ::PlaneWar::TextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::TextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::CSSyncTextConfig* Arena::CreateMaybeMessage< ::PlaneWar::CSSyncTextConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::CSSyncTextConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PlaneWar::SCSyncTextConfig* Arena::CreateMaybeMessage< ::PlaneWar::SCSyncTextConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlaneWar::SCSyncTextConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
